
pNav32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c9d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001540  0801cb68  0801cb68  0002cb68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e0a8  0801e0a8  00030c74  2**0
                  CONTENTS
  4 .ARM          00000008  0801e0a8  0801e0a8  0002e0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e0b0  0801e0b0  00030c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  0801e0b0  0801e0b0  0002e0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e0cc  0801e0cc  0002e0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c74  20000000  0801e0d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030c74  2**0
                  CONTENTS
 10 .bss          0001c080  20000c78  20000c78  00030c78  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2001ccf8  2001ccf8  00030c78  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030c74  2**0
                  CONTENTS, READONLY
 13 .debug_info   000313ec  00000000  00000000  00030ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000709d  00000000  00000000  00062090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002588  00000000  00000000  00069130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002298  00000000  00000000  0006b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e2c8  00000000  00000000  0006d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032e80  00000000  00000000  0009bc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6467  00000000  00000000  000cea98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000083  00000000  00000000  001c4eff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ab24  00000000  00000000  001c4f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c78 	.word	0x20000c78
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801cb50 	.word	0x0801cb50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c7c 	.word	0x20000c7c
 80001cc:	0801cb50 	.word	0x0801cb50

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_ldivmod>:
 80006b8:	b97b      	cbnz	r3, 80006da <__aeabi_ldivmod+0x22>
 80006ba:	b972      	cbnz	r2, 80006da <__aeabi_ldivmod+0x22>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bfbe      	ittt	lt
 80006c0:	2000      	movlt	r0, #0
 80006c2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80006c6:	e006      	blt.n	80006d6 <__aeabi_ldivmod+0x1e>
 80006c8:	bf08      	it	eq
 80006ca:	2800      	cmpeq	r0, #0
 80006cc:	bf1c      	itt	ne
 80006ce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80006d2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006d6:	f000 b9bf 	b.w	8000a58 <__aeabi_idiv0>
 80006da:	f1ad 0c08 	sub.w	ip, sp, #8
 80006de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e2:	2900      	cmp	r1, #0
 80006e4:	db09      	blt.n	80006fa <__aeabi_ldivmod+0x42>
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db1a      	blt.n	8000720 <__aeabi_ldivmod+0x68>
 80006ea:	f000 f84d 	bl	8000788 <__udivmoddi4>
 80006ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f6:	b004      	add	sp, #16
 80006f8:	4770      	bx	lr
 80006fa:	4240      	negs	r0, r0
 80006fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000700:	2b00      	cmp	r3, #0
 8000702:	db1b      	blt.n	800073c <__aeabi_ldivmod+0x84>
 8000704:	f000 f840 	bl	8000788 <__udivmoddi4>
 8000708:	f8dd e004 	ldr.w	lr, [sp, #4]
 800070c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000710:	b004      	add	sp, #16
 8000712:	4240      	negs	r0, r0
 8000714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000718:	4252      	negs	r2, r2
 800071a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800071e:	4770      	bx	lr
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	f000 f82f 	bl	8000788 <__udivmoddi4>
 800072a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800072e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000732:	b004      	add	sp, #16
 8000734:	4240      	negs	r0, r0
 8000736:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073a:	4770      	bx	lr
 800073c:	4252      	negs	r2, r2
 800073e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000742:	f000 f821 	bl	8000788 <__udivmoddi4>
 8000746:	f8dd e004 	ldr.w	lr, [sp, #4]
 800074a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800074e:	b004      	add	sp, #16
 8000750:	4252      	negs	r2, r2
 8000752:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000756:	4770      	bx	lr

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000768:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800076c:	f000 b974 	b.w	8000a58 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f806 	bl	8000788 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__udivmoddi4>:
 8000788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800078c:	9d08      	ldr	r5, [sp, #32]
 800078e:	4604      	mov	r4, r0
 8000790:	468e      	mov	lr, r1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d14d      	bne.n	8000832 <__udivmoddi4+0xaa>
 8000796:	428a      	cmp	r2, r1
 8000798:	4694      	mov	ip, r2
 800079a:	d969      	bls.n	8000870 <__udivmoddi4+0xe8>
 800079c:	fab2 f282 	clz	r2, r2
 80007a0:	b152      	cbz	r2, 80007b8 <__udivmoddi4+0x30>
 80007a2:	fa01 f302 	lsl.w	r3, r1, r2
 80007a6:	f1c2 0120 	rsb	r1, r2, #32
 80007aa:	fa20 f101 	lsr.w	r1, r0, r1
 80007ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80007b2:	ea41 0e03 	orr.w	lr, r1, r3
 80007b6:	4094      	lsls	r4, r2
 80007b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007bc:	0c21      	lsrs	r1, r4, #16
 80007be:	fbbe f6f8 	udiv	r6, lr, r8
 80007c2:	fa1f f78c 	uxth.w	r7, ip
 80007c6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ce:	fb06 f107 	mul.w	r1, r6, r7
 80007d2:	4299      	cmp	r1, r3
 80007d4:	d90a      	bls.n	80007ec <__udivmoddi4+0x64>
 80007d6:	eb1c 0303 	adds.w	r3, ip, r3
 80007da:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007de:	f080 811f 	bcs.w	8000a20 <__udivmoddi4+0x298>
 80007e2:	4299      	cmp	r1, r3
 80007e4:	f240 811c 	bls.w	8000a20 <__udivmoddi4+0x298>
 80007e8:	3e02      	subs	r6, #2
 80007ea:	4463      	add	r3, ip
 80007ec:	1a5b      	subs	r3, r3, r1
 80007ee:	b2a4      	uxth	r4, r4
 80007f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007f4:	fb08 3310 	mls	r3, r8, r0, r3
 80007f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007fc:	fb00 f707 	mul.w	r7, r0, r7
 8000800:	42a7      	cmp	r7, r4
 8000802:	d90a      	bls.n	800081a <__udivmoddi4+0x92>
 8000804:	eb1c 0404 	adds.w	r4, ip, r4
 8000808:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800080c:	f080 810a 	bcs.w	8000a24 <__udivmoddi4+0x29c>
 8000810:	42a7      	cmp	r7, r4
 8000812:	f240 8107 	bls.w	8000a24 <__udivmoddi4+0x29c>
 8000816:	4464      	add	r4, ip
 8000818:	3802      	subs	r0, #2
 800081a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800081e:	1be4      	subs	r4, r4, r7
 8000820:	2600      	movs	r6, #0
 8000822:	b11d      	cbz	r5, 800082c <__udivmoddi4+0xa4>
 8000824:	40d4      	lsrs	r4, r2
 8000826:	2300      	movs	r3, #0
 8000828:	e9c5 4300 	strd	r4, r3, [r5]
 800082c:	4631      	mov	r1, r6
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	428b      	cmp	r3, r1
 8000834:	d909      	bls.n	800084a <__udivmoddi4+0xc2>
 8000836:	2d00      	cmp	r5, #0
 8000838:	f000 80ef 	beq.w	8000a1a <__udivmoddi4+0x292>
 800083c:	2600      	movs	r6, #0
 800083e:	e9c5 0100 	strd	r0, r1, [r5]
 8000842:	4630      	mov	r0, r6
 8000844:	4631      	mov	r1, r6
 8000846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084a:	fab3 f683 	clz	r6, r3
 800084e:	2e00      	cmp	r6, #0
 8000850:	d14a      	bne.n	80008e8 <__udivmoddi4+0x160>
 8000852:	428b      	cmp	r3, r1
 8000854:	d302      	bcc.n	800085c <__udivmoddi4+0xd4>
 8000856:	4282      	cmp	r2, r0
 8000858:	f200 80f9 	bhi.w	8000a4e <__udivmoddi4+0x2c6>
 800085c:	1a84      	subs	r4, r0, r2
 800085e:	eb61 0303 	sbc.w	r3, r1, r3
 8000862:	2001      	movs	r0, #1
 8000864:	469e      	mov	lr, r3
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e0      	beq.n	800082c <__udivmoddi4+0xa4>
 800086a:	e9c5 4e00 	strd	r4, lr, [r5]
 800086e:	e7dd      	b.n	800082c <__udivmoddi4+0xa4>
 8000870:	b902      	cbnz	r2, 8000874 <__udivmoddi4+0xec>
 8000872:	deff      	udf	#255	; 0xff
 8000874:	fab2 f282 	clz	r2, r2
 8000878:	2a00      	cmp	r2, #0
 800087a:	f040 8092 	bne.w	80009a2 <__udivmoddi4+0x21a>
 800087e:	eba1 010c 	sub.w	r1, r1, ip
 8000882:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000886:	fa1f fe8c 	uxth.w	lr, ip
 800088a:	2601      	movs	r6, #1
 800088c:	0c20      	lsrs	r0, r4, #16
 800088e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000892:	fb07 1113 	mls	r1, r7, r3, r1
 8000896:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089a:	fb0e f003 	mul.w	r0, lr, r3
 800089e:	4288      	cmp	r0, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0x12c>
 80008a2:	eb1c 0101 	adds.w	r1, ip, r1
 80008a6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x12a>
 80008ac:	4288      	cmp	r0, r1
 80008ae:	f200 80cb 	bhi.w	8000a48 <__udivmoddi4+0x2c0>
 80008b2:	4643      	mov	r3, r8
 80008b4:	1a09      	subs	r1, r1, r0
 80008b6:	b2a4      	uxth	r4, r4
 80008b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008bc:	fb07 1110 	mls	r1, r7, r0, r1
 80008c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008c4:	fb0e fe00 	mul.w	lr, lr, r0
 80008c8:	45a6      	cmp	lr, r4
 80008ca:	d908      	bls.n	80008de <__udivmoddi4+0x156>
 80008cc:	eb1c 0404 	adds.w	r4, ip, r4
 80008d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008d4:	d202      	bcs.n	80008dc <__udivmoddi4+0x154>
 80008d6:	45a6      	cmp	lr, r4
 80008d8:	f200 80bb 	bhi.w	8000a52 <__udivmoddi4+0x2ca>
 80008dc:	4608      	mov	r0, r1
 80008de:	eba4 040e 	sub.w	r4, r4, lr
 80008e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008e6:	e79c      	b.n	8000822 <__udivmoddi4+0x9a>
 80008e8:	f1c6 0720 	rsb	r7, r6, #32
 80008ec:	40b3      	lsls	r3, r6
 80008ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80008f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008f6:	fa20 f407 	lsr.w	r4, r0, r7
 80008fa:	fa01 f306 	lsl.w	r3, r1, r6
 80008fe:	431c      	orrs	r4, r3
 8000900:	40f9      	lsrs	r1, r7
 8000902:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000906:	fa00 f306 	lsl.w	r3, r0, r6
 800090a:	fbb1 f8f9 	udiv	r8, r1, r9
 800090e:	0c20      	lsrs	r0, r4, #16
 8000910:	fa1f fe8c 	uxth.w	lr, ip
 8000914:	fb09 1118 	mls	r1, r9, r8, r1
 8000918:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800091c:	fb08 f00e 	mul.w	r0, r8, lr
 8000920:	4288      	cmp	r0, r1
 8000922:	fa02 f206 	lsl.w	r2, r2, r6
 8000926:	d90b      	bls.n	8000940 <__udivmoddi4+0x1b8>
 8000928:	eb1c 0101 	adds.w	r1, ip, r1
 800092c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000930:	f080 8088 	bcs.w	8000a44 <__udivmoddi4+0x2bc>
 8000934:	4288      	cmp	r0, r1
 8000936:	f240 8085 	bls.w	8000a44 <__udivmoddi4+0x2bc>
 800093a:	f1a8 0802 	sub.w	r8, r8, #2
 800093e:	4461      	add	r1, ip
 8000940:	1a09      	subs	r1, r1, r0
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb1 f0f9 	udiv	r0, r1, r9
 8000948:	fb09 1110 	mls	r1, r9, r0, r1
 800094c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000950:	fb00 fe0e 	mul.w	lr, r0, lr
 8000954:	458e      	cmp	lr, r1
 8000956:	d908      	bls.n	800096a <__udivmoddi4+0x1e2>
 8000958:	eb1c 0101 	adds.w	r1, ip, r1
 800095c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000960:	d26c      	bcs.n	8000a3c <__udivmoddi4+0x2b4>
 8000962:	458e      	cmp	lr, r1
 8000964:	d96a      	bls.n	8000a3c <__udivmoddi4+0x2b4>
 8000966:	3802      	subs	r0, #2
 8000968:	4461      	add	r1, ip
 800096a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800096e:	fba0 9402 	umull	r9, r4, r0, r2
 8000972:	eba1 010e 	sub.w	r1, r1, lr
 8000976:	42a1      	cmp	r1, r4
 8000978:	46c8      	mov	r8, r9
 800097a:	46a6      	mov	lr, r4
 800097c:	d356      	bcc.n	8000a2c <__udivmoddi4+0x2a4>
 800097e:	d053      	beq.n	8000a28 <__udivmoddi4+0x2a0>
 8000980:	b15d      	cbz	r5, 800099a <__udivmoddi4+0x212>
 8000982:	ebb3 0208 	subs.w	r2, r3, r8
 8000986:	eb61 010e 	sbc.w	r1, r1, lr
 800098a:	fa01 f707 	lsl.w	r7, r1, r7
 800098e:	fa22 f306 	lsr.w	r3, r2, r6
 8000992:	40f1      	lsrs	r1, r6
 8000994:	431f      	orrs	r7, r3
 8000996:	e9c5 7100 	strd	r7, r1, [r5]
 800099a:	2600      	movs	r6, #0
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	f1c2 0320 	rsb	r3, r2, #32
 80009a6:	40d8      	lsrs	r0, r3
 80009a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ac:	fa21 f303 	lsr.w	r3, r1, r3
 80009b0:	4091      	lsls	r1, r2
 80009b2:	4301      	orrs	r1, r0
 80009b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b8:	fa1f fe8c 	uxth.w	lr, ip
 80009bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009c0:	fb07 3610 	mls	r6, r7, r0, r3
 80009c4:	0c0b      	lsrs	r3, r1, #16
 80009c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ca:	fb00 f60e 	mul.w	r6, r0, lr
 80009ce:	429e      	cmp	r6, r3
 80009d0:	fa04 f402 	lsl.w	r4, r4, r2
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x260>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80009de:	d22f      	bcs.n	8000a40 <__udivmoddi4+0x2b8>
 80009e0:	429e      	cmp	r6, r3
 80009e2:	d92d      	bls.n	8000a40 <__udivmoddi4+0x2b8>
 80009e4:	3802      	subs	r0, #2
 80009e6:	4463      	add	r3, ip
 80009e8:	1b9b      	subs	r3, r3, r6
 80009ea:	b289      	uxth	r1, r1
 80009ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80009f0:	fb07 3316 	mls	r3, r7, r6, r3
 80009f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009f8:	fb06 f30e 	mul.w	r3, r6, lr
 80009fc:	428b      	cmp	r3, r1
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x28a>
 8000a00:	eb1c 0101 	adds.w	r1, ip, r1
 8000a04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000a08:	d216      	bcs.n	8000a38 <__udivmoddi4+0x2b0>
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	d914      	bls.n	8000a38 <__udivmoddi4+0x2b0>
 8000a0e:	3e02      	subs	r6, #2
 8000a10:	4461      	add	r1, ip
 8000a12:	1ac9      	subs	r1, r1, r3
 8000a14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a18:	e738      	b.n	800088c <__udivmoddi4+0x104>
 8000a1a:	462e      	mov	r6, r5
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	e705      	b.n	800082c <__udivmoddi4+0xa4>
 8000a20:	4606      	mov	r6, r0
 8000a22:	e6e3      	b.n	80007ec <__udivmoddi4+0x64>
 8000a24:	4618      	mov	r0, r3
 8000a26:	e6f8      	b.n	800081a <__udivmoddi4+0x92>
 8000a28:	454b      	cmp	r3, r9
 8000a2a:	d2a9      	bcs.n	8000980 <__udivmoddi4+0x1f8>
 8000a2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a34:	3801      	subs	r0, #1
 8000a36:	e7a3      	b.n	8000980 <__udivmoddi4+0x1f8>
 8000a38:	4646      	mov	r6, r8
 8000a3a:	e7ea      	b.n	8000a12 <__udivmoddi4+0x28a>
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	e794      	b.n	800096a <__udivmoddi4+0x1e2>
 8000a40:	4640      	mov	r0, r8
 8000a42:	e7d1      	b.n	80009e8 <__udivmoddi4+0x260>
 8000a44:	46d0      	mov	r8, sl
 8000a46:	e77b      	b.n	8000940 <__udivmoddi4+0x1b8>
 8000a48:	3b02      	subs	r3, #2
 8000a4a:	4461      	add	r1, ip
 8000a4c:	e732      	b.n	80008b4 <__udivmoddi4+0x12c>
 8000a4e:	4630      	mov	r0, r6
 8000a50:	e709      	b.n	8000866 <__udivmoddi4+0xde>
 8000a52:	4464      	add	r4, ip
 8000a54:	3802      	subs	r0, #2
 8000a56:	e742      	b.n	80008de <__udivmoddi4+0x156>

08000a58 <__aeabi_idiv0>:
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a70:	4a21      	ldr	r2, [pc, #132]	; (8000af8 <MX_ADC1_Init+0x9c>)
 8000a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <MX_ADC1_Init+0xa0>)
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000abe:	f002 fb69 	bl	8003194 <HAL_ADC_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ac8:	f001 f8b0 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000ade:	f002 fb9d 	bl	800321c <HAL_ADC_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ae8:	f001 f8a0 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000c94 	.word	0x20000c94
 8000af8:	40012000 	.word	0x40012000
 8000afc:	0f000001 	.word	0x0f000001

08000b00 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b06:	463b      	mov	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b12:	4b64      	ldr	r3, [pc, #400]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b14:	4a64      	ldr	r2, [pc, #400]	; (8000ca8 <MX_ADC3_Init+0x1a8>)
 8000b16:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b18:	4b62      	ldr	r3, [pc, #392]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b1e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b20:	4b60      	ldr	r3, [pc, #384]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8000b26:	4b5f      	ldr	r3, [pc, #380]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b2c:	4b5d      	ldr	r3, [pc, #372]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b32:	4b5c      	ldr	r3, [pc, #368]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000b42:	4b58      	ldr	r3, [pc, #352]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b44:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4a:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 12;
 8000b50:	4b54      	ldr	r3, [pc, #336]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b56:	4b53      	ldr	r3, [pc, #332]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b5e:	4b51      	ldr	r3, [pc, #324]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b64:	484f      	ldr	r0, [pc, #316]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b66:	f002 fb15 	bl	8003194 <HAL_ADC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8000b70:	f001 f85c 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b74:	230a      	movs	r3, #10
 8000b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	4847      	ldr	r0, [pc, #284]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b86:	f002 fb49 	bl	800321c <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000b90:	f001 f84c 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4841      	ldr	r0, [pc, #260]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b9e:	f002 fb3d 	bl	800321c <HAL_ADC_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000ba8:	f001 f840 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000bac:	2303      	movs	r3, #3
 8000bae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	483b      	ldr	r0, [pc, #236]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000bb6:	f002 fb31 	bl	800321c <HAL_ADC_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 8000bc0:	f001 f834 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4835      	ldr	r0, [pc, #212]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000bce:	f002 fb25 	bl	800321c <HAL_ADC_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000bd8:	f001 f828 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8000bdc:	2305      	movs	r3, #5
 8000bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	482f      	ldr	r0, [pc, #188]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000be6:	f002 fb19 	bl	800321c <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8000bf0:	f001 f81c 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000bfe:	f002 fb0d 	bl	800321c <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC3_Init+0x10c>
  {
    Error_Handler();
 8000c08:	f001 f810 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c16:	f002 fb01 	bl	800321c <HAL_ADC_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC3_Init+0x124>
  {
    Error_Handler();
 8000c20:	f001 f804 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 8000c24:	2308      	movs	r3, #8
 8000c26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481d      	ldr	r0, [pc, #116]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c2e:	f002 faf5 	bl	800321c <HAL_ADC_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC3_Init+0x13c>
  {
    Error_Handler();
 8000c38:	f000 fff8 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 9;
 8000c3c:	2309      	movs	r3, #9
 8000c3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c46:	f002 fae9 	bl	800321c <HAL_ADC_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC3_Init+0x154>
  {
    Error_Handler();
 8000c50:	f000 ffec 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 10;
 8000c54:	230a      	movs	r3, #10
 8000c56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c5e:	f002 fadd 	bl	800321c <HAL_ADC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC3_Init+0x16c>
  {
    Error_Handler();
 8000c68:	f000 ffe0 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 11;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c76:	f002 fad1 	bl	800321c <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC3_Init+0x184>
  {
    Error_Handler();
 8000c80:	f000 ffd4 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 12;
 8000c84:	230c      	movs	r3, #12
 8000c86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c8e:	f002 fac5 	bl	800321c <HAL_ADC_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC3_Init+0x19c>
  {
    Error_Handler();
 8000c98:	f000 ffc8 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000cdc 	.word	0x20000cdc
 8000ca8:	40012200 	.word	0x40012200

08000cac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08c      	sub	sp, #48	; 0x30
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a53      	ldr	r2, [pc, #332]	; (8000e18 <HAL_ADC_MspInit+0x16c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d142      	bne.n	8000d54 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	4b52      	ldr	r3, [pc, #328]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a51      	ldr	r2, [pc, #324]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b4f      	ldr	r3, [pc, #316]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	4b4b      	ldr	r3, [pc, #300]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a4a      	ldr	r2, [pc, #296]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b48      	ldr	r3, [pc, #288]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a43      	ldr	r2, [pc, #268]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC_VREF_Pin;
 8000d22:	2304      	movs	r3, #4
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d26:	2303      	movs	r3, #3
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_VREF_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	483a      	ldr	r0, [pc, #232]	; (8000e20 <HAL_ADC_MspInit+0x174>)
 8000d36:	f003 f98f 	bl	8004058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_TEMP_Pin;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4835      	ldr	r0, [pc, #212]	; (8000e24 <HAL_ADC_MspInit+0x178>)
 8000d4e:	f003 f983 	bl	8004058 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000d52:	e05d      	b.n	8000e10 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC3)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a33      	ldr	r2, [pc, #204]	; (8000e28 <HAL_ADC_MspInit+0x17c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d158      	bne.n	8000e10 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a2d      	ldr	r2, [pc, #180]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a26      	ldr	r2, [pc, #152]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_MOT1_CUR_Pin|ADC_MOT2_CUR_Pin|ADC_VREF_Pin;
 8000d96:	2307      	movs	r3, #7
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	481d      	ldr	r0, [pc, #116]	; (8000e20 <HAL_ADC_MspInit+0x174>)
 8000daa:	f003 f955 	bl	8004058 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000db0:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <HAL_ADC_MspInit+0x184>)
 8000db2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000db6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000dba:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dce:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dd6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dde:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dec:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000df6:	f002 fd2d 	bl	8003854 <HAL_DMA_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_ADC_MspInit+0x158>
      Error_Handler();
 8000e00:	f000 ff14 	bl	8001c2c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	; 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020800 	.word	0x40020800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40012200 	.word	0x40012200
 8000e2c:	20000d24 	.word	0x20000d24
 8000e30:	40026410 	.word	0x40026410

08000e34 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_CRC_Init+0x20>)
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <MX_CRC_Init+0x24>)
 8000e3c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_CRC_Init+0x20>)
 8000e40:	f002 fcec 	bl	800381c <HAL_CRC_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e4a:	f000 feef 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000d84 	.word	0x20000d84
 8000e58:	40023000 	.word	0x40023000

08000e5c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <HAL_CRC_MspInit+0x3c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10d      	bne.n	8000e8a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023000 	.word	0x40023000
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000eac:	f00c fe7a 	bl	800dba4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000eb0:	4b58      	ldr	r3, [pc, #352]	; (8001014 <pvPortMallocMicroROS+0x174>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000eb8:	f000 f980 	bl	80011bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000ebc:	4b56      	ldr	r3, [pc, #344]	; (8001018 <pvPortMallocMicroROS+0x178>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f040 808e 	bne.w	8000fe6 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d01d      	beq.n	8000f0c <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d014      	beq.n	8000f0c <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f023 0307 	bic.w	r3, r3, #7
 8000ee8:	3308      	adds	r3, #8
 8000eea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00a      	beq.n	8000f0c <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efa:	f383 8811 	msr	BASEPRI, r3
 8000efe:	f3bf 8f6f 	isb	sy
 8000f02:	f3bf 8f4f 	dsb	sy
 8000f06:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000f08:	bf00      	nop
 8000f0a:	e7fe      	b.n	8000f0a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d069      	beq.n	8000fe6 <pvPortMallocMicroROS+0x146>
 8000f12:	4b42      	ldr	r3, [pc, #264]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d864      	bhi.n	8000fe6 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000f1c:	4b40      	ldr	r3, [pc, #256]	; (8001020 <pvPortMallocMicroROS+0x180>)
 8000f1e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000f20:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <pvPortMallocMicroROS+0x180>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f26:	e004      	b.n	8000f32 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d903      	bls.n	8000f44 <pvPortMallocMicroROS+0xa4>
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f1      	bne.n	8000f28 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000f44:	4b33      	ldr	r3, [pc, #204]	; (8001014 <pvPortMallocMicroROS+0x174>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d04b      	beq.n	8000fe6 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2208      	movs	r2, #8
 8000f54:	4413      	add	r3, r2
 8000f56:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1ad2      	subs	r2, r2, r3
 8000f68:	2308      	movs	r3, #8
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d91f      	bls.n	8000fb0 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00a      	beq.n	8000f98 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f86:	f383 8811 	msr	BASEPRI, r3
 8000f8a:	f3bf 8f6f 	isb	sy
 8000f8e:	f3bf 8f4f 	dsb	sy
 8000f92:	613b      	str	r3, [r7, #16]
}
 8000f94:	bf00      	nop
 8000f96:	e7fe      	b.n	8000f96 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	1ad2      	subs	r2, r2, r3
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000faa:	69b8      	ldr	r0, [r7, #24]
 8000fac:	f000 f968 	bl	8001280 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	4a18      	ldr	r2, [pc, #96]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <pvPortMallocMicroROS+0x184>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d203      	bcs.n	8000fd2 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <pvPortMallocMicroROS+0x184>)
 8000fd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <pvPortMallocMicroROS+0x178>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000fe6:	f00c fdeb 	bl	800dbc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff8:	f383 8811 	msr	BASEPRI, r3
 8000ffc:	f3bf 8f6f 	isb	sy
 8001000:	f3bf 8f4f 	dsb	sy
 8001004:	60fb      	str	r3, [r7, #12]
}
 8001006:	bf00      	nop
 8001008:	e7fe      	b.n	8001008 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800100a:	69fb      	ldr	r3, [r7, #28]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20004994 	.word	0x20004994
 8001018:	200049a0 	.word	0x200049a0
 800101c:	20004998 	.word	0x20004998
 8001020:	2000498c 	.word	0x2000498c
 8001024:	2000499c 	.word	0x2000499c

08001028 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d048      	beq.n	80010cc <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800103a:	2308      	movs	r3, #8
 800103c:	425b      	negs	r3, r3
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4413      	add	r3, r2
 8001042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <vPortFreeMicroROS+0xac>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4013      	ands	r3, r2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <vPortFreeMicroROS+0x44>
	__asm volatile
 8001056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105a:	f383 8811 	msr	BASEPRI, r3
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	f3bf 8f4f 	dsb	sy
 8001066:	60fb      	str	r3, [r7, #12]
}
 8001068:	bf00      	nop
 800106a:	e7fe      	b.n	800106a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00a      	beq.n	800108a <vPortFreeMicroROS+0x62>
	__asm volatile
 8001074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001078:	f383 8811 	msr	BASEPRI, r3
 800107c:	f3bf 8f6f 	isb	sy
 8001080:	f3bf 8f4f 	dsb	sy
 8001084:	60bb      	str	r3, [r7, #8]
}
 8001086:	bf00      	nop
 8001088:	e7fe      	b.n	8001088 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <vPortFreeMicroROS+0xac>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4013      	ands	r3, r2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d019      	beq.n	80010cc <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d115      	bne.n	80010cc <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <vPortFreeMicroROS+0xac>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	401a      	ands	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80010b0:	f00c fd78 	bl	800dba4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <vPortFreeMicroROS+0xb0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <vPortFreeMicroROS+0xb0>)
 80010c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80010c2:	6938      	ldr	r0, [r7, #16]
 80010c4:	f000 f8dc 	bl	8001280 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80010c8:	f00c fd7a 	bl	800dbc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200049a0 	.word	0x200049a0
 80010d8:	20004998 	.word	0x20004998

080010dc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80010e8:	2308      	movs	r3, #8
 80010ea:	425b      	negs	r3, r3
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	4413      	add	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <getBlockSize+0x38>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	43db      	mvns	r3, r3
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]

	return count;
 8001104:	68fb      	ldr	r3, [r7, #12]
}
 8001106:	4618      	mov	r0, r3
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	200049a0 	.word	0x200049a0

08001118 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001122:	f00c fd3f 	bl	800dba4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f7ff feba 	bl	8000ea0 <pvPortMallocMicroROS>
 800112c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d017      	beq.n	8001164 <pvPortReallocMicroROS+0x4c>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d014      	beq.n	8001164 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffce 	bl	80010dc <getBlockSize>
 8001140:	4603      	mov	r3, r0
 8001142:	2208      	movs	r2, #8
 8001144:	1a9b      	subs	r3, r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d201      	bcs.n	8001154 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f01a f9fd 	bl	801b558 <memcpy>

		vPortFreeMicroROS(pv);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ff62 	bl	8001028 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001164:	f00c fd2c 	bl	800dbc0 <xTaskResumeAll>

	return newmem;
 8001168:	68bb      	ldr	r3, [r7, #8]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800117c:	f00c fd12 	bl	800dba4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff fe88 	bl	8000ea0 <pvPortMallocMicroROS>
 8001190:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001196:	e004      	b.n	80011a2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	613a      	str	r2, [r7, #16]
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	1e5a      	subs	r2, r3, #1
 80011a6:	617a      	str	r2, [r7, #20]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f5      	bne.n	8001198 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80011ac:	f00c fd08 	bl	800dbc0 <xTaskResumeAll>
  	return mem;
 80011b0:	68fb      	ldr	r3, [r7, #12]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80011c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80011c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <prvHeapInit+0xac>)
 80011ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00c      	beq.n	80011f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3307      	adds	r3, #7
 80011da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f023 0307 	bic.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <prvHeapInit+0xac>)
 80011ec:	4413      	add	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80011f4:	4a1d      	ldr	r2, [pc, #116]	; (800126c <prvHeapInit+0xb0>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <prvHeapInit+0xb0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	4413      	add	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001208:	2208      	movs	r2, #8
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f023 0307 	bic.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <prvHeapInit+0xb4>)
 800121c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <prvHeapInit+0xb4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <prvHeapInit+0xb4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	1ad2      	subs	r2, r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <prvHeapInit+0xb4>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <prvHeapInit+0xb8>)
 800124a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <prvHeapInit+0xbc>)
 8001252:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <prvHeapInit+0xc0>)
 8001256:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	20000d8c 	.word	0x20000d8c
 800126c:	2000498c 	.word	0x2000498c
 8001270:	20004994 	.word	0x20004994
 8001274:	2000499c 	.word	0x2000499c
 8001278:	20004998 	.word	0x20004998
 800127c:	200049a0 	.word	0x200049a0

08001280 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <prvInsertBlockIntoFreeList+0xac>)
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	e002      	b.n	8001294 <prvInsertBlockIntoFreeList+0x14>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	d8f7      	bhi.n	800128e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4413      	add	r3, r2
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d108      	bne.n	80012c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	441a      	add	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	441a      	add	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d118      	bne.n	8001308 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <prvInsertBlockIntoFreeList+0xb0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d00d      	beq.n	80012fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	441a      	add	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	e008      	b.n	8001310 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <prvInsertBlockIntoFreeList+0xb0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e003      	b.n	8001310 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	d002      	beq.n	800131e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	2000498c 	.word	0x2000498c
 8001330:	20004994 	.word	0x20004994

08001334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_DMA_Init+0x98>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <MX_DMA_Init+0x98>)
 8001344:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <MX_DMA_Init+0x98>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_DMA_Init+0x98>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <MX_DMA_Init+0x98>)
 8001360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_DMA_Init+0x98>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2105      	movs	r1, #5
 8001376:	200c      	movs	r0, #12
 8001378:	f002 fa26 	bl	80037c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800137c:	200c      	movs	r0, #12
 800137e:	f002 fa3f 	bl	8003800 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2105      	movs	r1, #5
 8001386:	200e      	movs	r0, #14
 8001388:	f002 fa1e 	bl	80037c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800138c:	200e      	movs	r0, #14
 800138e:	f002 fa37 	bl	8003800 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2105      	movs	r1, #5
 8001396:	2038      	movs	r0, #56	; 0x38
 8001398:	f002 fa16 	bl	80037c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800139c:	2038      	movs	r0, #56	; 0x38
 800139e:	f002 fa2f 	bl	8003800 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2105      	movs	r1, #5
 80013a6:	203a      	movs	r0, #58	; 0x3a
 80013a8:	f002 fa0e 	bl	80037c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80013ac:	203a      	movs	r0, #58	; 0x3a
 80013ae:	f002 fa27 	bl	8003800 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2105      	movs	r1, #5
 80013b6:	2046      	movs	r0, #70	; 0x46
 80013b8:	f002 fa06 	bl	80037c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80013bc:	2046      	movs	r0, #70	; 0x46
 80013be:	f002 fa1f 	bl	8003800 <HAL_NVIC_EnableIRQ>

}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80013de:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80013e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e4:	4904      	ldr	r1, [pc, #16]	; (80013f8 <cubemx_transport_open+0x28>)
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f006 fcfc 	bl	8007de4 <HAL_UART_Receive_DMA>
    return true;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200049a4 	.word	0x200049a4

080013fc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800140a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f006 fd19 	bl	8007e44 <HAL_UART_DMAStop>
    return true;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001430:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b20      	cmp	r3, #32
 800143c:	d11c      	bne.n	8001478 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	b29b      	uxth	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f006 fc4e 	bl	8007ce8 <HAL_UART_Transmit_DMA>
 800144c:	4603      	mov	r3, r0
 800144e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001450:	e002      	b.n	8001458 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001452:	2001      	movs	r0, #1
 8001454:	f00b fb5a 	bl	800cb0c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001458:	7cfb      	ldrb	r3, [r7, #19]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d105      	bne.n	800146a <cubemx_transport_write+0x4e>
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b20      	cmp	r3, #32
 8001468:	d1f3      	bne.n	8001452 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800146a:	7cfb      	ldrb	r3, [r7, #19]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <cubemx_transport_write+0x58>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	e002      	b.n	800147a <cubemx_transport_write+0x5e>
 8001474:	2300      	movs	r3, #0
 8001476:	e000      	b.n	800147a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001478:	2300      	movs	r3, #0
    }
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001498:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149e:	b672      	cpsid	i
}
 80014a0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <cubemx_transport_read+0x9c>)
 80014b0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014b2:	b662      	cpsie	i
}
 80014b4:	bf00      	nop
        __enable_irq();
        ms_used++;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80014bc:	2001      	movs	r0, #1
 80014be:	f00b fb25 	bl	800cb0c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <cubemx_transport_read+0xa0>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <cubemx_transport_read+0x9c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d103      	bne.n	80014d6 <cubemx_transport_read+0x52>
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbe3      	blt.n	800149e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80014da:	e011      	b.n	8001500 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <cubemx_transport_read+0xa0>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	440b      	add	r3, r1
 80014e6:	4910      	ldr	r1, [pc, #64]	; (8001528 <cubemx_transport_read+0xa4>)
 80014e8:	5c8a      	ldrb	r2, [r1, r2]
 80014ea:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <cubemx_transport_read+0xa0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <cubemx_transport_read+0xa0>)
 80014f8:	6013      	str	r3, [r2, #0]
        wrote++;
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <cubemx_transport_read+0xa0>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <cubemx_transport_read+0x9c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d003      	beq.n	8001514 <cubemx_transport_read+0x90>
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	d3e3      	bcc.n	80014dc <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001514:	69bb      	ldr	r3, [r7, #24]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200051a8 	.word	0x200051a8
 8001524:	200051a4 	.word	0x200051a4
 8001528:	200049a4 	.word	0x200049a4

0800152c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of rosTaskLed */
  rosTaskLedHandle = osThreadNew(StartTaskLed, NULL, &rosTaskLed_attributes);
 8001530:	4a08      	ldr	r2, [pc, #32]	; (8001554 <MX_FREERTOS_Init+0x28>)
 8001532:	2100      	movs	r1, #0
 8001534:	4808      	ldr	r0, [pc, #32]	; (8001558 <MX_FREERTOS_Init+0x2c>)
 8001536:	f00b fa57 	bl	800c9e8 <osThreadNew>
 800153a:	4603      	mov	r3, r0
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <MX_FREERTOS_Init+0x30>)
 800153e:	6013      	str	r3, [r2, #0]

  /* creation of rosTaskCom */
  rosTaskComHandle = osThreadNew(StartTaskCom, NULL, &rosTaskCom_attributes);
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <MX_FREERTOS_Init+0x34>)
 8001542:	2100      	movs	r1, #0
 8001544:	4807      	ldr	r0, [pc, #28]	; (8001564 <MX_FREERTOS_Init+0x38>)
 8001546:	f00b fa4f 	bl	800c9e8 <osThreadNew>
 800154a:	4603      	mov	r3, r0
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <MX_FREERTOS_Init+0x3c>)
 800154e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	0801cc5c 	.word	0x0801cc5c
 8001558:	0800156d 	.word	0x0800156d
 800155c:	200051ac 	.word	0x200051ac
 8001560:	0801cc80 	.word	0x0801cc80
 8001564:	080015a1 	.word	0x080015a1
 8001568:	20005a6c 	.word	0x20005a6c

0800156c <StartTaskLed>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskLed */
void StartTaskLed(void *argument)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001574:	f00d ff92 	bl	800f49c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartTaskLed */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 1);
 8001578:	2201      	movs	r2, #1
 800157a:	2140      	movs	r1, #64	; 0x40
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <StartTaskLed+0x30>)
 800157e:	f002 ff07 	bl	8004390 <HAL_GPIO_WritePin>
		osDelay(100);
 8001582:	2064      	movs	r0, #100	; 0x64
 8001584:	f00b fac2 	bl	800cb0c <osDelay>
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <StartTaskLed+0x30>)
 800158e:	f002 feff 	bl	8004390 <HAL_GPIO_WritePin>
		osDelay(200);
 8001592:	20c8      	movs	r0, #200	; 0xc8
 8001594:	f00b faba 	bl	800cb0c <osDelay>
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 1);
 8001598:	e7ee      	b.n	8001578 <StartTaskLed+0xc>
 800159a:	bf00      	nop
 800159c:	40020000 	.word	0x40020000

080015a0 <StartTaskCom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCom */
void StartTaskCom(void *argument)
{
 80015a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015a4:	b0de      	sub	sp, #376	; 0x178
 80015a6:	af02      	add	r7, sp, #8
 80015a8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80015ac:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80015b0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTaskCom */
	rmw_uros_set_custom_transport(
 80015b2:	4b8d      	ldr	r3, [pc, #564]	; (80017e8 <StartTaskCom+0x248>)
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	4b8d      	ldr	r3, [pc, #564]	; (80017ec <StartTaskCom+0x24c>)
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4b8d      	ldr	r3, [pc, #564]	; (80017f0 <StartTaskCom+0x250>)
 80015bc:	4a8d      	ldr	r2, [pc, #564]	; (80017f4 <StartTaskCom+0x254>)
 80015be:	498e      	ldr	r1, [pc, #568]	; (80017f8 <StartTaskCom+0x258>)
 80015c0:	2001      	movs	r0, #1
 80015c2:	f00e fe8d 	bl	80102e0 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80015c6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00e fe0a 	bl	80101e4 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80015d0:	4b8a      	ldr	r3, [pc, #552]	; (80017fc <StartTaskCom+0x25c>)
 80015d2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	freeRTOS_allocator.deallocate = microros_deallocate;
 80015d6:	4b8a      	ldr	r3, [pc, #552]	; (8001800 <StartTaskCom+0x260>)
 80015d8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	freeRTOS_allocator.reallocate = microros_reallocate;
 80015dc:	4b89      	ldr	r3, [pc, #548]	; (8001804 <StartTaskCom+0x264>)
 80015de:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80015e2:	4b89      	ldr	r3, [pc, #548]	; (8001808 <StartTaskCom+0x268>)
 80015e4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

	if (!rcutils_set_default_allocator(&freeRTOS_allocator))
 80015e8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00e fe07 	bl	8010200 <rcutils_set_default_allocator>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f083 0301 	eor.w	r3, r3, #1
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <StartTaskCom+0x66>
	{	printf("Error on default allocators (line %d)\n", __LINE__);
 80015fe:	21cb      	movs	r1, #203	; 0xcb
 8001600:	4882      	ldr	r0, [pc, #520]	; (800180c <StartTaskCom+0x26c>)
 8001602:	f01a f8b5 	bl	801b770 <iprintf>

	rclc_support_t support;
	rcl_allocator_t allocator;
	rcl_node_t node;

	allocator = rcl_get_default_allocator();
 8001606:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800160a:	f5a3 74a2 	sub.w	r4, r3, #324	; 0x144
 800160e:	463b      	mov	r3, r7
 8001610:	4618      	mov	r0, r3
 8001612:	f00e fe13 	bl	801023c <rcutils_get_default_allocator>
 8001616:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800161a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800161e:	461d      	mov	r5, r3
 8001620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001624:	682b      	ldr	r3, [r5, #0]
 8001626:	6023      	str	r3, [r4, #0]

	//create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 8001628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800162c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001630:	2200      	movs	r2, #0
 8001632:	2100      	movs	r1, #0
 8001634:	f00e fd14 	bl	8010060 <rclc_support_init>

	// create node
	rclc_node_init_default(&node, "pnav32", "", &support);
 8001638:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800163c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001640:	4a73      	ldr	r2, [pc, #460]	; (8001810 <StartTaskCom+0x270>)
 8001642:	4974      	ldr	r1, [pc, #464]	; (8001814 <StartTaskCom+0x274>)
 8001644:	f00e fd56 	bl	80100f4 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_default( &publisher0, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), "pInt32");
 8001648:	f00f fe3c 	bl	80112c4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800164c:	4602      	mov	r2, r0
 800164e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001652:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8001656:	4b70      	ldr	r3, [pc, #448]	; (8001818 <StartTaskCom+0x278>)
 8001658:	f00e fd88 	bl	801016c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher1, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int64), "pInt64");
 800165c:	f00f fe4a 	bl	80112f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>
 8001660:	4602      	mov	r2, r0
 8001662:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001666:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 800166a:	4b6c      	ldr	r3, [pc, #432]	; (800181c <StartTaskCom+0x27c>)
 800166c:	f00e fd7e 	bl	801016c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher2, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, BatteryState), "pBatt");
 8001670:	f00f fab0 	bl	8010bd4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>
 8001674:	4602      	mov	r2, r0
 8001676:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800167a:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 800167e:	4b68      	ldr	r3, [pc, #416]	; (8001820 <StartTaskCom+0x280>)
 8001680:	f00e fd74 	bl	801016c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher3, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Temperature), "pTemp");
 8001684:	f00f fabe 	bl	8010c04 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>
 8001688:	4602      	mov	r2, r0
 800168a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800168e:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8001692:	4b64      	ldr	r3, [pc, #400]	; (8001824 <StartTaskCom+0x284>)
 8001694:	f00e fd6a 	bl	801016c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher4, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray), "pFloat64M");
 8001698:	f00f fdfc 	bl	8011294 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 800169c:	4602      	mov	r2, r0
 800169e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80016a2:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 80016a6:	4b60      	ldr	r3, [pc, #384]	; (8001828 <StartTaskCom+0x288>)
 80016a8:	f00e fd60 	bl	801016c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher5, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, ColorRGBA), "pColorRGBA");
 80016ac:	f00f fdda 	bl	8011264 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80016b6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80016ba:	4b5c      	ldr	r3, [pc, #368]	; (800182c <StartTaskCom+0x28c>)
 80016bc:	f00e fd56 	bl	801016c <rclc_publisher_init_default>

	// preinit with random test value
	msg0.data = 1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	msg1.data = 10;
 80016c6:	f04f 020a 	mov.w	r2, #10
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	msg2.voltage = 24.9;
 80016d2:	4b57      	ldr	r3, [pc, #348]	; (8001830 <StartTaskCom+0x290>)
 80016d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	msg2.charge = 35;
 80016d8:	4b56      	ldr	r3, [pc, #344]	; (8001834 <StartTaskCom+0x294>)
 80016da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	msg2.current = 10;
 80016de:	4b56      	ldr	r3, [pc, #344]	; (8001838 <StartTaskCom+0x298>)
 80016e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	msg3.temperature = 45;
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	4b54      	ldr	r3, [pc, #336]	; (800183c <StartTaskCom+0x29c>)
 80016ea:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	msg5.r= 127;
 80016ee:	4b54      	ldr	r3, [pc, #336]	; (8001840 <StartTaskCom+0x2a0>)
 80016f0:	677b      	str	r3, [r7, #116]	; 0x74
	msg5.g= 127;
 80016f2:	4b53      	ldr	r3, [pc, #332]	; (8001840 <StartTaskCom+0x2a0>)
 80016f4:	67bb      	str	r3, [r7, #120]	; 0x78
	msg5.b= 100;
 80016f6:	4b53      	ldr	r3, [pc, #332]	; (8001844 <StartTaskCom+0x2a4>)
 80016f8:	67fb      	str	r3, [r7, #124]	; 0x7c
	msg5.a= 200;
 80016fa:	4b53      	ldr	r3, [pc, #332]	; (8001848 <StartTaskCom+0x2a8>)
 80016fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  for(;;)
  {

	// Random data update before publish
	msg0.data++;
 8001700:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001704:	3301      	adds	r3, #1
 8001706:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	msg1.data++;
 800170a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800170e:	f112 0801 	adds.w	r8, r2, #1
 8001712:	f143 0900 	adc.w	r9, r3, #0
 8001716:	e9c7 8950 	strd	r8, r9, [r7, #320]	; 0x140
	msg2.voltage += 0.001;
 800171a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff22 	bl	8000568 <__aeabi_f2d>
 8001724:	a32e      	add	r3, pc, #184	; (adr r3, 80017e0 <StartTaskCom+0x240>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe fdbf 	bl	80002ac <__adddf3>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7fe ff6f 	bl	8000618 <__aeabi_d2f>
 800173a:	4603      	mov	r3, r0
 800173c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	msg3.temperature += 0.001;
 8001740:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001744:	a326      	add	r3, pc, #152	; (adr r3, 80017e0 <StartTaskCom+0x240>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7fe fdaf 	bl	80002ac <__adddf3>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	msg5.g++;
 8001756:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800175a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800175e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001762:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78


	// Led ON
	HAL_GPIO_WritePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	4838      	ldr	r0, [pc, #224]	; (800184c <StartTaskCom+0x2ac>)
 800176c:	f002 fe10 	bl	8004390 <HAL_GPIO_WritePin>

	rcl_ret_t ret;
	ret = rcl_publish(&publisher0, &msg0, NULL);
 8001770:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001774:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001778:	2200      	movs	r2, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f00e fc4c 	bl	8010018 <rcl_publish>
 8001780:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
	ret += rcl_publish(&publisher1, &msg1, NULL);
 8001784:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001788:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800178c:	2200      	movs	r2, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f00e fc42 	bl	8010018 <rcl_publish>
 8001794:	4602      	mov	r2, r0
 8001796:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800179a:	4413      	add	r3, r2
 800179c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
//	ret += rcl_publish(&publisher2, &msg2, NULL);
//	ret += rcl_publish(&publisher3, &msg3, NULL);
//	ret += rcl_publish(&publisher4, &msg4, NULL);
	ret += rcl_publish(&publisher4, &msg4, NULL);
 80017a0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80017a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017a8:	2200      	movs	r2, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00e fc34 	bl	8010018 <rcl_publish>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80017b6:	4413      	add	r3, r2
 80017b8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	if (ret != RCL_RET_OK)
 80017bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <StartTaskCom+0x22e>
	{
	  printf("Error publishing (line %d)\n", __LINE__);
 80017c4:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80017c8:	4821      	ldr	r0, [pc, #132]	; (8001850 <StartTaskCom+0x2b0>)
 80017ca:	f019 ffd1 	bl	801b770 <iprintf>
	}

	// Led turn Off
	HAL_GPIO_WritePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin, 1);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	481e      	ldr	r0, [pc, #120]	; (800184c <StartTaskCom+0x2ac>)
 80017d4:	f002 fddc 	bl	8004390 <HAL_GPIO_WritePin>
	osDelay(100);
 80017d8:	2064      	movs	r0, #100	; 0x64
 80017da:	f00b f997 	bl	800cb0c <osDelay>
  {
 80017de:	e78f      	b.n	8001700 <StartTaskCom+0x160>
 80017e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80017e4:	3f50624d 	.word	0x3f50624d
 80017e8:	08001485 	.word	0x08001485
 80017ec:	0800141d 	.word	0x0800141d
 80017f0:	080013fd 	.word	0x080013fd
 80017f4:	080013d1 	.word	0x080013d1
 80017f8:	200119b4 	.word	0x200119b4
 80017fc:	08001c39 	.word	0x08001c39
 8001800:	08001c7d 	.word	0x08001c7d
 8001804:	08001cb5 	.word	0x08001cb5
 8001808:	08001d21 	.word	0x08001d21
 800180c:	0801cb80 	.word	0x0801cb80
 8001810:	0801cba8 	.word	0x0801cba8
 8001814:	0801cbac 	.word	0x0801cbac
 8001818:	0801cbb4 	.word	0x0801cbb4
 800181c:	0801cbbc 	.word	0x0801cbbc
 8001820:	0801cbc4 	.word	0x0801cbc4
 8001824:	0801cbcc 	.word	0x0801cbcc
 8001828:	0801cbd4 	.word	0x0801cbd4
 800182c:	0801cbe0 	.word	0x0801cbe0
 8001830:	41c73333 	.word	0x41c73333
 8001834:	420c0000 	.word	0x420c0000
 8001838:	41200000 	.word	0x41200000
 800183c:	40468000 	.word	0x40468000
 8001840:	42fe0000 	.word	0x42fe0000
 8001844:	42c80000 	.word	0x42c80000
 8001848:	43480000 	.word	0x43480000
 800184c:	40020000 	.word	0x40020000
 8001850:	0801cbec 	.word	0x0801cbec

08001854 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> S_TIM11_CH1
*/
void MX_GPIO_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	; 0x30
 8001858:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	4b59      	ldr	r3, [pc, #356]	; (80019d4 <MX_GPIO_Init+0x180>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <MX_GPIO_Init+0x180>)
 8001874:	f043 0310 	orr.w	r3, r3, #16
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b56      	ldr	r3, [pc, #344]	; (80019d4 <MX_GPIO_Init+0x180>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	4b52      	ldr	r3, [pc, #328]	; (80019d4 <MX_GPIO_Init+0x180>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a51      	ldr	r2, [pc, #324]	; (80019d4 <MX_GPIO_Init+0x180>)
 8001890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b4f      	ldr	r3, [pc, #316]	; (80019d4 <MX_GPIO_Init+0x180>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b4b      	ldr	r3, [pc, #300]	; (80019d4 <MX_GPIO_Init+0x180>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a4a      	ldr	r2, [pc, #296]	; (80019d4 <MX_GPIO_Init+0x180>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <MX_GPIO_Init+0x180>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <MX_GPIO_Init+0x180>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a43      	ldr	r2, [pc, #268]	; (80019d4 <MX_GPIO_Init+0x180>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b41      	ldr	r3, [pc, #260]	; (80019d4 <MX_GPIO_Init+0x180>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <MX_GPIO_Init+0x180>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a3c      	ldr	r2, [pc, #240]	; (80019d4 <MX_GPIO_Init+0x180>)
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <MX_GPIO_Init+0x180>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <MX_GPIO_Init+0x180>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a35      	ldr	r2, [pc, #212]	; (80019d4 <MX_GPIO_Init+0x180>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <MX_GPIO_Init+0x180>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8001918:	482f      	ldr	r0, [pc, #188]	; (80019d8 <MX_GPIO_Init+0x184>)
 800191a:	f002 fd39 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_MOT_ENABLE_Pin|O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 6164 	mov.w	r1, #3648	; 0xe40
 8001924:	482d      	ldr	r0, [pc, #180]	; (80019dc <MX_GPIO_Init+0x188>)
 8001926:	f002 fd33 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_PWR_REG_EN_GPIO_Port, O_PWR_REG_EN_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001930:	482b      	ldr	r0, [pc, #172]	; (80019e0 <MX_GPIO_Init+0x18c>)
 8001932:	f002 fd2d 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = I_KEY1_Pin|I_KEY0_Pin;
 8001936:	2318      	movs	r3, #24
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193e:	2301      	movs	r3, #1
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4619      	mov	r1, r3
 8001948:	4826      	ldr	r0, [pc, #152]	; (80019e4 <MX_GPIO_Init+0x190>)
 800194a:	f002 fb85 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin;
 800194e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	481c      	ldr	r0, [pc, #112]	; (80019d8 <MX_GPIO_Init+0x184>)
 8001968:	f002 fb76 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = O_MOT_ENABLE_Pin|O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin;
 800196c:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001972:	2301      	movs	r3, #1
 8001974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	4815      	ldr	r0, [pc, #84]	; (80019dc <MX_GPIO_Init+0x188>)
 8001986:	f002 fb67 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_PWR_REG_EN_Pin;
 800198a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(O_PWR_REG_EN_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	480f      	ldr	r0, [pc, #60]	; (80019e0 <MX_GPIO_Init+0x18c>)
 80019a4:	f002 fb58 	bl	8004058 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TIM_AUX2_PWM_Pin;
 80019a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80019ba:	2303      	movs	r3, #3
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TIM_AUX2_PWM_GPIO_Port, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	4806      	ldr	r0, [pc, #24]	; (80019e0 <MX_GPIO_Init+0x18c>)
 80019c6:	f002 fb47 	bl	8004058 <HAL_GPIO_Init>

}
 80019ca:	bf00      	nop
 80019cc:	3730      	adds	r7, #48	; 0x30
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020800 	.word	0x40020800
 80019e0:	40020400 	.word	0x40020400
 80019e4:	40021000 	.word	0x40021000

080019e8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MX_I2C2_Init+0x50>)
 80019ee:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <MX_I2C2_Init+0x54>)
 80019f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_I2C2_Init+0x50>)
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <MX_I2C2_Init+0x58>)
 80019f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_I2C2_Init+0x50>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_I2C2_Init+0x50>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_I2C2_Init+0x50>)
 8001a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <MX_I2C2_Init+0x50>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_I2C2_Init+0x50>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <MX_I2C2_Init+0x50>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_I2C2_Init+0x50>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_I2C2_Init+0x50>)
 8001a26:	f002 fccd 	bl	80043c4 <HAL_I2C_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a30:	f000 f8fc 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200116ac 	.word	0x200116ac
 8001a3c:	40005800 	.word	0x40005800
 8001a40:	000186a0 	.word	0x000186a0

08001a44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <HAL_I2C_MspInit+0x84>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d12c      	bne.n	8001ac0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_I2C_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a17      	ldr	r2, [pc, #92]	; (8001acc <HAL_I2C_MspInit+0x88>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_I2C_MspInit+0x88>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001a82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a88:	2312      	movs	r3, #18
 8001a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a94:	2304      	movs	r3, #4
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <HAL_I2C_MspInit+0x8c>)
 8001aa0:	f002 fada 	bl	8004058 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_I2C_MspInit+0x88>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	4a07      	ldr	r2, [pc, #28]	; (8001acc <HAL_I2C_MspInit+0x88>)
 8001aae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_I2C_MspInit+0x88>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	; 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40005800 	.word	0x40005800
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020400 	.word	0x40020400

08001ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad8:	f001 faf6 	bl	80030c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001adc:	f000 f82a 	bl	8001b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ae0:	f7ff feb8 	bl	8001854 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001ae4:	f000 fc92 	bl	800240c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ae8:	f000 fce8 	bl	80024bc <MX_TIM2_Init>
  MX_TIM8_Init();
 8001aec:	f000 fe14 	bl	8002718 <MX_TIM8_Init>
  MX_I2C2_Init();
 8001af0:	f7ff ff7a 	bl	80019e8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001af4:	f000 fa3a 	bl	8001f6c <MX_SPI1_Init>
  MX_DMA_Init();
 8001af8:	f7ff fc1c 	bl	8001334 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001afc:	f001 f8ae 	bl	8002c5c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001b00:	f7fe ffac 	bl	8000a5c <MX_ADC1_Init>
  MX_ADC3_Init();
 8001b04:	f7fe fffc 	bl	8000b00 <MX_ADC3_Init>
  MX_TIM3_Init();
 8001b08:	f000 fd2c 	bl	8002564 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b0c:	f000 fda6 	bl	800265c <MX_TIM4_Init>
  MX_UART5_Init();
 8001b10:	f001 f87a 	bl	8002c08 <MX_UART5_Init>
  MX_CRC_Init();
 8001b14:	f7ff f98e 	bl	8000e34 <MX_CRC_Init>
  MX_RNG_Init();
 8001b18:	f000 f9f2 	bl	8001f00 <MX_RNG_Init>
  MX_TIM14_Init();
 8001b1c:	f000 feaa 	bl	8002874 <MX_TIM14_Init>
  MX_USART3_UART_Init();
 8001b20:	f001 f8c6 	bl	8002cb0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001b24:	f00a ff16 	bl	800c954 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001b28:	f7ff fd00 	bl	800152c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b2c:	f00a ff36 	bl	800c99c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <main+0x5c>
	...

08001b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b094      	sub	sp, #80	; 0x50
 8001b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3a:	f107 0320 	add.w	r3, r7, #32
 8001b3e:	2230      	movs	r2, #48	; 0x30
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f019 fd16 	bl	801b574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <SystemClock_Config+0xcc>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <SystemClock_Config+0xcc>)
 8001b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b66:	6413      	str	r3, [r2, #64]	; 0x40
 8001b68:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <SystemClock_Config+0xcc>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <SystemClock_Config+0xd0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a21      	ldr	r2, [pc, #132]	; (8001c04 <SystemClock_Config+0xd0>)
 8001b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <SystemClock_Config+0xd0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b90:	2301      	movs	r3, #1
 8001b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ba8:	23a8      	movs	r3, #168	; 0xa8
 8001baa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bac:	2302      	movs	r3, #2
 8001bae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb4:	f107 0320 	add.w	r3, r7, #32
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 ffc5 	bl	8005b48 <HAL_RCC_OscConfig>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bc4:	f000 f832 	bl	8001c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc8:	230f      	movs	r3, #15
 8001bca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	2105      	movs	r1, #5
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 fa26 	bl	8006038 <HAL_RCC_ClockConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bf2:	f000 f81b 	bl	8001c2c <Error_Handler>
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	3750      	adds	r7, #80	; 0x50
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40007000 	.word	0x40007000

08001c08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c1a:	f001 fa77 	bl	800310c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40014400 	.word	0x40014400

08001c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <Error_Handler+0x8>
	...

08001c38 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <microros_allocate+0x3c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <microros_allocate+0x3c>)
 8001c50:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <microros_allocate+0x40>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <microros_allocate+0x40>)
 8001c60:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff f91c 	bl	8000ea0 <pvPortMallocMicroROS>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20011700 	.word	0x20011700
 8001c78:	20011704 	.word	0x20011704

08001c7c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00c      	beq.n	8001ca6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fa25 	bl	80010dc <getBlockSize>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <microros_deallocate+0x34>)
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <microros_deallocate+0x34>)
 8001c9e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff f9c1 	bl	8001028 <vPortFreeMicroROS>
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20011704 	.word	0x20011704

08001cb4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <microros_reallocate+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	4413      	add	r3, r2
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <microros_reallocate+0x64>)
 8001cce:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <microros_reallocate+0x68>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	4413      	add	r3, r2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <microros_reallocate+0x68>)
 8001cde:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d104      	bne.n	8001cf0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001ce6:	68b8      	ldr	r0, [r7, #8]
 8001ce8:	f7ff f8da 	bl	8000ea0 <pvPortMallocMicroROS>
 8001cec:	4603      	mov	r3, r0
 8001cee:	e00e      	b.n	8001d0e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7ff f9f3 	bl	80010dc <getBlockSize>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <microros_reallocate+0x68>)
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <microros_reallocate+0x68>)
 8001d02:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f7ff fa06 	bl	8001118 <pvPortReallocMicroROS>
 8001d0c:	4603      	mov	r3, r0
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20011700 	.word	0x20011700
 8001d1c:	20011704 	.word	0x20011704

08001d20 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <microros_zero_allocate+0x48>)
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <microros_zero_allocate+0x48>)
 8001d3e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <microros_zero_allocate+0x4c>)
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <microros_zero_allocate+0x4c>)
 8001d52:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f7ff fa0b 	bl	8001172 <pvPortCallocMicroROS>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20011700 	.word	0x20011700
 8001d6c:	20011704 	.word	0x20011704

08001d70 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001d82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d86:	a320      	add	r3, pc, #128	; (adr r3, 8001e08 <UTILS_NanosecondsToTimespec+0x98>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fc94 	bl	80006b8 <__aeabi_ldivmod>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001d9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d9e:	a31a      	add	r3, pc, #104	; (adr r3, 8001e08 <UTILS_NanosecondsToTimespec+0x98>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fc88 	bl	80006b8 <__aeabi_ldivmod>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da20      	bge.n	8001df6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <UTILS_NanosecondsToTimespec+0x90>)
 8001dba:	fb82 1203 	smull	r1, r2, r2, r3
 8001dbe:	1712      	asrs	r2, r2, #28
 8001dc0:	17db      	asrs	r3, r3, #31
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	6979      	ldr	r1, [r7, #20]
 8001dd0:	17c8      	asrs	r0, r1, #31
 8001dd2:	460c      	mov	r4, r1
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	ebb2 0804 	subs.w	r8, r2, r4
 8001dda:	eb63 0905 	sbc.w	r9, r3, r5
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	4906      	ldr	r1, [pc, #24]	; (8001e04 <UTILS_NanosecondsToTimespec+0x94>)
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	441a      	add	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	609a      	str	r2, [r3, #8]
    }
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e00:	44b82fa1 	.word	0x44b82fa1
 8001e04:	3b9aca00 	.word	0x3b9aca00
 8001e08:	3b9aca00 	.word	0x3b9aca00
 8001e0c:	00000000 	.word	0x00000000

08001e10 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e14:	b08e      	sub	sp, #56	; 0x38
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6278      	str	r0, [r7, #36]	; 0x24
 8001e1a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001e1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e20:	2300      	movs	r3, #0
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e36:	4618      	mov	r0, r3
 8001e38:	f00c f942 	bl	800e0c0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	17da      	asrs	r2, r3, #31
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	61fa      	str	r2, [r7, #28]
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	000b      	movs	r3, r1
 8001e50:	2200      	movs	r2, #0
 8001e52:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e58:	2200      	movs	r2, #0
 8001e5a:	461c      	mov	r4, r3
 8001e5c:	4615      	mov	r5, r2
 8001e5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e62:	1911      	adds	r1, r2, r4
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	416b      	adcs	r3, r5
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e6e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001e72:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	f04f 0400 	mov.w	r4, #0
 8001e7e:	f04f 0500 	mov.w	r5, #0
 8001e82:	015d      	lsls	r5, r3, #5
 8001e84:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001e88:	0154      	lsls	r4, r2, #5
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	ebb2 0800 	subs.w	r8, r2, r0
 8001e92:	eb63 0901 	sbc.w	r9, r3, r1
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001ea2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001ea6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001eaa:	4690      	mov	r8, r2
 8001eac:	4699      	mov	r9, r3
 8001eae:	eb18 0a00 	adds.w	sl, r8, r0
 8001eb2:	eb49 0b01 	adc.w	fp, r9, r1
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ec2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ec6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eca:	ebb2 040a 	subs.w	r4, r2, sl
 8001ece:	603c      	str	r4, [r7, #0]
 8001ed0:	eb63 030b 	sbc.w	r3, r3, fp
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eda:	4623      	mov	r3, r4
 8001edc:	181b      	adds	r3, r3, r0
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	462b      	mov	r3, r5
 8001ee2:	eb41 0303 	adc.w	r3, r1, r3
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eee:	f7ff ff3f 	bl	8001d70 <UTILS_NanosecondsToTimespec>

    return 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3738      	adds	r7, #56	; 0x38
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001f00 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_RNG_Init+0x20>)
 8001f06:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <MX_RNG_Init+0x24>)
 8001f08:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_RNG_Init+0x20>)
 8001f0c:	f004 fae6 	bl	80064dc <HAL_RNG_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001f16:	f7ff fe89 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20011708 	.word	0x20011708
 8001f24:	50060800 	.word	0x50060800

08001f28 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <HAL_RNG_MspInit+0x3c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d10d      	bne.n	8001f56 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_RNG_MspInit+0x40>)
 8001f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f42:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <HAL_RNG_MspInit+0x40>)
 8001f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f48:	6353      	str	r3, [r2, #52]	; 0x34
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_RNG_MspInit+0x40>)
 8001f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	50060800 	.word	0x50060800
 8001f68:	40023800 	.word	0x40023800

08001f6c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <MX_SPI1_Init+0x68>)
 8001f74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001fb8:	220a      	movs	r2, #10
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fbc:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <MX_SPI1_Init+0x64>)
 8001fbe:	f004 fab7 	bl	8006530 <HAL_SPI_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fc8:	f7ff fe30 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20011718 	.word	0x20011718
 8001fd4:	40013000 	.word	0x40013000

08001fd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <HAL_SPI_MspInit+0x84>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d12b      	bne.n	8002052 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_SPI_MspInit+0x88>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a17      	ldr	r2, [pc, #92]	; (8002060 <HAL_SPI_MspInit+0x88>)
 8002004:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_SPI_MspInit+0x88>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_SPI_MspInit+0x88>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <HAL_SPI_MspInit+0x88>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <HAL_SPI_MspInit+0x88>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002032:	2338      	movs	r3, #56	; 0x38
 8002034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002042:	2305      	movs	r3, #5
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <HAL_SPI_MspInit+0x8c>)
 800204e:	f002 f803 	bl	8004058 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	; 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40013000 	.word	0x40013000
 8002060:	40023800 	.word	0x40023800
 8002064:	40020400 	.word	0x40020400

08002068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_MspInit+0x54>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a11      	ldr	r2, [pc, #68]	; (80020bc <HAL_MspInit+0x54>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <HAL_MspInit+0x54>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_MspInit+0x54>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <HAL_MspInit+0x54>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_MspInit+0x54>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	210f      	movs	r1, #15
 80020aa:	f06f 0001 	mvn.w	r0, #1
 80020ae:	f001 fb8b 	bl	80037c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08c      	sub	sp, #48	; 0x30
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	2019      	movs	r0, #25
 80020d6:	f001 fb77 	bl	80037c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020da:	2019      	movs	r0, #25
 80020dc:	f001 fb90 	bl	8003800 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_InitTick+0xa4>)
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <HAL_InitTick+0xa4>)
 80020ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ee:	6453      	str	r3, [r2, #68]	; 0x44
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_InitTick+0xa4>)
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020fc:	f107 0210 	add.w	r2, r7, #16
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f004 f9b6 	bl	8006478 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800210c:	f004 f9a0 	bl	8006450 <HAL_RCC_GetPCLK2Freq>
 8002110:	4603      	mov	r3, r0
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002118:	4a13      	ldr	r2, [pc, #76]	; (8002168 <HAL_InitTick+0xa8>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0c9b      	lsrs	r3, r3, #18
 8002120:	3b01      	subs	r3, #1
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_InitTick+0xac>)
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <HAL_InitTick+0xb0>)
 8002128:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_InitTick+0xac>)
 800212c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002130:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8002132:	4a0e      	ldr	r2, [pc, #56]	; (800216c <HAL_InitTick+0xac>)
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_InitTick+0xac>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_InitTick+0xac>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8002144:	4809      	ldr	r0, [pc, #36]	; (800216c <HAL_InitTick+0xac>)
 8002146:	f004 fa7c 	bl	8006642 <HAL_TIM_Base_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d104      	bne.n	800215a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8002150:	4806      	ldr	r0, [pc, #24]	; (800216c <HAL_InitTick+0xac>)
 8002152:	f004 fac5 	bl	80066e0 <HAL_TIM_Base_Start_IT>
 8002156:	4603      	mov	r3, r0
 8002158:	e000      	b.n	800215c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	3730      	adds	r7, #48	; 0x30
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	431bde83 	.word	0x431bde83
 800216c:	20011770 	.word	0x20011770
 8002170:	40014400 	.word	0x40014400

08002174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <NMI_Handler+0x4>

0800217a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <HardFault_Handler+0x4>

08002180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <MemManage_Handler+0x4>

08002186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218a:	e7fe      	b.n	800218a <BusFault_Handler+0x4>

0800218c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <UsageFault_Handler+0x4>

08002192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <DMA1_Stream1_IRQHandler+0x10>)
 80021a6:	f001 fced 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20011afc 	.word	0x20011afc

080021b4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <DMA1_Stream3_IRQHandler+0x10>)
 80021ba:	f001 fce3 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20011b5c 	.word	0x20011b5c

080021c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80021ce:	f004 fc94 	bl	8006afa <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80021d2:	4803      	ldr	r0, [pc, #12]	; (80021e0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80021d4:	f004 fc91 	bl	8006afa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200117c0 	.word	0x200117c0
 80021e0:	20011770 	.word	0x20011770

080021e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <USART1_IRQHandler+0x10>)
 80021ea:	f005 feab 	bl	8007f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200119b4 	.word	0x200119b4

080021f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <USART3_IRQHandler+0x10>)
 80021fe:	f005 fea1 	bl	8007f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200119f8 	.word	0x200119f8

0800220c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <DMA2_Stream0_IRQHandler+0x10>)
 8002212:	f001 fcb7 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000d24 	.word	0x20000d24

08002220 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <DMA2_Stream2_IRQHandler+0x10>)
 8002226:	f001 fcad 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20011a3c 	.word	0x20011a3c

08002234 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <OTG_FS_IRQHandler+0x10>)
 800223a:	f002 fb57 	bl	80048ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20017ab0 	.word	0x20017ab0

08002248 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <DMA2_Stream7_IRQHandler+0x10>)
 800224e:	f001 fc99 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20011a9c 	.word	0x20011a9c

0800225c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
	return 1;
 8002260:	2301      	movs	r3, #1
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_kill>:

int _kill(int pid, int sig)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002276:	f018 ff71 	bl	801b15c <__errno>
 800227a:	4603      	mov	r3, r0
 800227c:	2216      	movs	r2, #22
 800227e:	601a      	str	r2, [r3, #0]
	return -1;
 8002280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_exit>:

void _exit (int status)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002294:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ffe7 	bl	800226c <_kill>
	while (1) {}		/* Make sure we hang here */
 800229e:	e7fe      	b.n	800229e <_exit+0x12>

080022a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	e00a      	b.n	80022c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022b2:	f3af 8000 	nop.w
 80022b6:	4601      	mov	r1, r0
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	60ba      	str	r2, [r7, #8]
 80022be:	b2ca      	uxtb	r2, r1
 80022c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	dbf0      	blt.n	80022b2 <_read+0x12>
	}

return len;
 80022d0:	687b      	ldr	r3, [r7, #4]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e009      	b.n	8002300 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60ba      	str	r2, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	3301      	adds	r3, #1
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	dbf1      	blt.n	80022ec <_write+0x12>
	}
	return len;
 8002308:	687b      	ldr	r3, [r7, #4]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <_sbrk>:

caddr_t _sbrk(int incr) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    extern char __heap_start__ asm("end");  // Defined by the linker.
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == NULL) heap_end = &__heap_start__;
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <_sbrk+0x5c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <_sbrk+0x16>
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <_sbrk+0x5c>)
 8002326:	4a13      	ldr	r2, [pc, #76]	; (8002374 <_sbrk+0x60>)
 8002328:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <_sbrk+0x5c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60fb      	str	r3, [r7, #12]

    if (heap_end + incr > &_estack - _Min_Stack_Size) {
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <_sbrk+0x5c>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	441a      	add	r2, r3
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <_sbrk+0x64>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	425b      	negs	r3, r3
 800233e:	490f      	ldr	r1, [pc, #60]	; (800237c <_sbrk+0x68>)
 8002340:	440b      	add	r3, r1
 8002342:	429a      	cmp	r2, r3
 8002344:	d908      	bls.n	8002358 <_sbrk+0x44>
    		__asm("BKPT #0\n");
 8002346:	be00      	bkpt	0x0000
        errno = ENOMEM;
 8002348:	f018 ff08 	bl	801b15c <__errno>
 800234c:	4603      	mov	r3, r0
 800234e:	220c      	movs	r2, #12
 8002350:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 8002352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002356:	e006      	b.n	8002366 <_sbrk+0x52>

    }

    heap_end += incr;
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <_sbrk+0x5c>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	4a03      	ldr	r2, [pc, #12]	; (8002370 <_sbrk+0x5c>)
 8002362:	6013      	str	r3, [r2, #0]
    return (caddr_t)prev_heap_end;
 8002364:	68fb      	ldr	r3, [r7, #12]

}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200117bc 	.word	0x200117bc
 8002374:	2001ccf8 	.word	0x2001ccf8
 8002378:	00000400 	.word	0x00000400
 800237c:	20020000 	.word	0x20020000

08002380 <_close>:

int _close(int file)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	return -1;
 8002388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023a8:	605a      	str	r2, [r3, #4]
	return 0;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <_isatty>:

int _isatty(int file)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	return 1;
 80023c0:	2301      	movs	r3, #1
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
	return 0;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <SystemInit+0x20>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <SystemInit+0x20>)
 80023f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08c      	sub	sp, #48	; 0x30
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	2224      	movs	r2, #36	; 0x24
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f019 f8aa 	bl	801b574 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <MX_TIM1_Init+0xa8>)
 800242a:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <MX_TIM1_Init+0xac>)
 800242c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800242e:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <MX_TIM1_Init+0xa8>)
 8002430:	2200      	movs	r2, #0
 8002432:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002434:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <MX_TIM1_Init+0xa8>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <MX_TIM1_Init+0xa8>)
 800243c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002440:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <MX_TIM1_Init+0xa8>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <MX_TIM1_Init+0xa8>)
 800244a:	2200      	movs	r2, #0
 800244c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <MX_TIM1_Init+0xa8>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002454:	2303      	movs	r3, #3
 8002456:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002458:	2300      	movs	r3, #0
 800245a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800245c:	2301      	movs	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002460:	2300      	movs	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800246c:	2301      	movs	r3, #1
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002470:	2300      	movs	r3, #0
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	4619      	mov	r1, r3
 800247e:	480d      	ldr	r0, [pc, #52]	; (80024b4 <MX_TIM1_Init+0xa8>)
 8002480:	f004 fa95 	bl	80069ae <HAL_TIM_Encoder_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800248a:	f7ff fbcf 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	4619      	mov	r1, r3
 800249a:	4806      	ldr	r0, [pc, #24]	; (80024b4 <MX_TIM1_Init+0xa8>)
 800249c:	f005 faf4 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80024a6:	f7ff fbc1 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	3730      	adds	r7, #48	; 0x30
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200117c0 	.word	0x200117c0
 80024b8:	40010000 	.word	0x40010000

080024bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	; 0x30
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	2224      	movs	r2, #36	; 0x24
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f019 f852 	bl	801b574 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <MX_TIM2_Init+0xa4>)
 80024da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024e0:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <MX_TIM2_Init+0xa4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <MX_TIM2_Init+0xa4>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80024ec:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <MX_TIM2_Init+0xa4>)
 80024ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <MX_TIM2_Init+0xa4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <MX_TIM2_Init+0xa4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002500:	2303      	movs	r3, #3
 8002502:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002508:	2301      	movs	r3, #1
 800250a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002514:	2300      	movs	r3, #0
 8002516:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002518:	2301      	movs	r3, #1
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800251c:	2300      	movs	r3, #0
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	4619      	mov	r1, r3
 800252a:	480d      	ldr	r0, [pc, #52]	; (8002560 <MX_TIM2_Init+0xa4>)
 800252c:	f004 fa3f 	bl	80069ae <HAL_TIM_Encoder_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002536:	f7ff fb79 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	4619      	mov	r1, r3
 8002546:	4806      	ldr	r0, [pc, #24]	; (8002560 <MX_TIM2_Init+0xa4>)
 8002548:	f005 fa9e 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002552:	f7ff fb6b 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	3730      	adds	r7, #48	; 0x30
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20011808 	.word	0x20011808

08002564 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08e      	sub	sp, #56	; 0x38
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800256a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
 8002584:	615a      	str	r2, [r3, #20]
 8002586:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002594:	4b2f      	ldr	r3, [pc, #188]	; (8002654 <MX_TIM3_Init+0xf0>)
 8002596:	4a30      	ldr	r2, [pc, #192]	; (8002658 <MX_TIM3_Init+0xf4>)
 8002598:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800259a:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <MX_TIM3_Init+0xf0>)
 800259c:	2200      	movs	r2, #0
 800259e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a0:	4b2c      	ldr	r3, [pc, #176]	; (8002654 <MX_TIM3_Init+0xf0>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025a6:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <MX_TIM3_Init+0xf0>)
 80025a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ae:	4b29      	ldr	r3, [pc, #164]	; (8002654 <MX_TIM3_Init+0xf0>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <MX_TIM3_Init+0xf0>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025ba:	4826      	ldr	r0, [pc, #152]	; (8002654 <MX_TIM3_Init+0xf0>)
 80025bc:	f004 f94f 	bl	800685e <HAL_TIM_PWM_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80025c6:	f7ff fb31 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80025ca:	4822      	ldr	r0, [pc, #136]	; (8002654 <MX_TIM3_Init+0xf0>)
 80025cc:	f004 f996 	bl	80068fc <HAL_TIM_IC_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80025d6:	f7ff fb29 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025e6:	4619      	mov	r1, r3
 80025e8:	481a      	ldr	r0, [pc, #104]	; (8002654 <MX_TIM3_Init+0xf0>)
 80025ea:	f005 fa4d 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80025f4:	f7ff fb1a 	bl	8001c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025f8:	2360      	movs	r3, #96	; 0x60
 80025fa:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	2208      	movs	r2, #8
 800260e:	4619      	mov	r1, r3
 8002610:	4810      	ldr	r0, [pc, #64]	; (8002654 <MX_TIM3_Init+0xf0>)
 8002612:	f004 fc73 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 800261c:	f7ff fb06 	bl	8001c2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002620:	2300      	movs	r3, #0
 8002622:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002624:	2301      	movs	r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	220c      	movs	r2, #12
 8002634:	4619      	mov	r1, r3
 8002636:	4807      	ldr	r0, [pc, #28]	; (8002654 <MX_TIM3_Init+0xf0>)
 8002638:	f004 fbc4 	bl	8006dc4 <HAL_TIM_IC_ConfigChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8002642:	f7ff faf3 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002646:	4803      	ldr	r0, [pc, #12]	; (8002654 <MX_TIM3_Init+0xf0>)
 8002648:	f000 fa5c 	bl	8002b04 <HAL_TIM_MspPostInit>

}
 800264c:	bf00      	nop
 800264e:	3738      	adds	r7, #56	; 0x38
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20011850 	.word	0x20011850
 8002658:	40000400 	.word	0x40000400

0800265c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	; 0x28
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002662:	f107 0320 	add.w	r3, r7, #32
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
 8002678:	611a      	str	r2, [r3, #16]
 800267a:	615a      	str	r2, [r3, #20]
 800267c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <MX_TIM4_Init+0xb4>)
 8002680:	4a24      	ldr	r2, [pc, #144]	; (8002714 <MX_TIM4_Init+0xb8>)
 8002682:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <MX_TIM4_Init+0xb4>)
 8002686:	2200      	movs	r2, #0
 8002688:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <MX_TIM4_Init+0xb4>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <MX_TIM4_Init+0xb4>)
 8002692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002696:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <MX_TIM4_Init+0xb4>)
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <MX_TIM4_Init+0xb4>)
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80026a4:	481a      	ldr	r0, [pc, #104]	; (8002710 <MX_TIM4_Init+0xb4>)
 80026a6:	f004 f88b 	bl	80067c0 <HAL_TIM_OC_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80026b0:	f7ff fabc 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b4:	2300      	movs	r3, #0
 80026b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026bc:	f107 0320 	add.w	r3, r7, #32
 80026c0:	4619      	mov	r1, r3
 80026c2:	4813      	ldr	r0, [pc, #76]	; (8002710 <MX_TIM4_Init+0xb4>)
 80026c4:	f005 f9e0 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80026ce:	f7ff faad 	bl	8001c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	220c      	movs	r2, #12
 80026e6:	4619      	mov	r1, r3
 80026e8:	4809      	ldr	r0, [pc, #36]	; (8002710 <MX_TIM4_Init+0xb4>)
 80026ea:	f004 fb0f 	bl	8006d0c <HAL_TIM_OC_ConfigChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80026f4:	f7ff fa9a 	bl	8001c2c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <MX_TIM4_Init+0xb4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <MX_TIM4_Init+0xb4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002706:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002708:	bf00      	nop
 800270a:	3728      	adds	r7, #40	; 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20011898 	.word	0x20011898
 8002714:	40000800 	.word	0x40000800

08002718 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b096      	sub	sp, #88	; 0x58
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
 8002744:	611a      	str	r2, [r3, #16]
 8002746:	615a      	str	r2, [r3, #20]
 8002748:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	2220      	movs	r2, #32
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f018 ff0f 	bl	801b574 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002756:	4b45      	ldr	r3, [pc, #276]	; (800286c <MX_TIM8_Init+0x154>)
 8002758:	4a45      	ldr	r2, [pc, #276]	; (8002870 <MX_TIM8_Init+0x158>)
 800275a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800275c:	4b43      	ldr	r3, [pc, #268]	; (800286c <MX_TIM8_Init+0x154>)
 800275e:	2200      	movs	r2, #0
 8002760:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002762:	4b42      	ldr	r3, [pc, #264]	; (800286c <MX_TIM8_Init+0x154>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002768:	4b40      	ldr	r3, [pc, #256]	; (800286c <MX_TIM8_Init+0x154>)
 800276a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800276e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002770:	4b3e      	ldr	r3, [pc, #248]	; (800286c <MX_TIM8_Init+0x154>)
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002776:	4b3d      	ldr	r3, [pc, #244]	; (800286c <MX_TIM8_Init+0x154>)
 8002778:	2200      	movs	r2, #0
 800277a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800277c:	4b3b      	ldr	r3, [pc, #236]	; (800286c <MX_TIM8_Init+0x154>)
 800277e:	2200      	movs	r2, #0
 8002780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002782:	483a      	ldr	r0, [pc, #232]	; (800286c <MX_TIM8_Init+0x154>)
 8002784:	f003 ff5d 	bl	8006642 <HAL_TIM_Base_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800278e:	f7ff fa4d 	bl	8001c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002796:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002798:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800279c:	4619      	mov	r1, r3
 800279e:	4833      	ldr	r0, [pc, #204]	; (800286c <MX_TIM8_Init+0x154>)
 80027a0:	f004 fc6e 	bl	8007080 <HAL_TIM_ConfigClockSource>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80027aa:	f7ff fa3f 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80027ae:	482f      	ldr	r0, [pc, #188]	; (800286c <MX_TIM8_Init+0x154>)
 80027b0:	f004 f855 	bl	800685e <HAL_TIM_PWM_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80027ba:	f7ff fa37 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80027c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027ca:	4619      	mov	r1, r3
 80027cc:	4827      	ldr	r0, [pc, #156]	; (800286c <MX_TIM8_Init+0x154>)
 80027ce:	f005 f95b 	bl	8007a88 <HAL_TIMEx_MasterConfigSynchronization>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80027d8:	f7ff fa28 	bl	8001c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027dc:	2360      	movs	r3, #96	; 0x60
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 512;
 80027e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027e6:	2300      	movs	r3, #0
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027ea:	2300      	movs	r3, #0
 80027ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fe:	2204      	movs	r2, #4
 8002800:	4619      	mov	r1, r3
 8002802:	481a      	ldr	r0, [pc, #104]	; (800286c <MX_TIM8_Init+0x154>)
 8002804:	f004 fb7a 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800280e:	f7ff fa0d 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002816:	2208      	movs	r2, #8
 8002818:	4619      	mov	r1, r3
 800281a:	4814      	ldr	r0, [pc, #80]	; (800286c <MX_TIM8_Init+0x154>)
 800281c:	f004 fb6e 	bl	8006efc <HAL_TIM_PWM_ConfigChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8002826:	f7ff fa01 	bl	8001c2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 2;
 8002836:	2302      	movs	r3, #2
 8002838:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800283e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002842:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	4619      	mov	r1, r3
 800284c:	4807      	ldr	r0, [pc, #28]	; (800286c <MX_TIM8_Init+0x154>)
 800284e:	f005 f997 	bl	8007b80 <HAL_TIMEx_ConfigBreakDeadTime>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8002858:	f7ff f9e8 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800285c:	4803      	ldr	r0, [pc, #12]	; (800286c <MX_TIM8_Init+0x154>)
 800285e:	f000 f951 	bl	8002b04 <HAL_TIM_MspPostInit>

}
 8002862:	bf00      	nop
 8002864:	3758      	adds	r7, #88	; 0x58
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200118e0 	.word	0x200118e0
 8002870:	40010400 	.word	0x40010400

08002874 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <MX_TIM14_Init+0x40>)
 800287a:	4a0f      	ldr	r2, [pc, #60]	; (80028b8 <MX_TIM14_Init+0x44>)
 800287c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <MX_TIM14_Init+0x40>)
 8002880:	2200      	movs	r2, #0
 8002882:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <MX_TIM14_Init+0x40>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <MX_TIM14_Init+0x40>)
 800288c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002890:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <MX_TIM14_Init+0x40>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <MX_TIM14_Init+0x40>)
 800289a:	2200      	movs	r2, #0
 800289c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800289e:	4805      	ldr	r0, [pc, #20]	; (80028b4 <MX_TIM14_Init+0x40>)
 80028a0:	f003 fecf 	bl	8006642 <HAL_TIM_Base_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80028aa:	f7ff f9bf 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20011928 	.word	0x20011928
 80028b8:	40002000 	.word	0x40002000

080028bc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08c      	sub	sp, #48	; 0x30
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a36      	ldr	r2, [pc, #216]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d135      	bne.n	800294a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	4b35      	ldr	r3, [pc, #212]	; (80029b8 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	4a34      	ldr	r2, [pc, #208]	; (80029b8 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6453      	str	r3, [r2, #68]	; 0x44
 80028ee:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	4b2e      	ldr	r3, [pc, #184]	; (80029b8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a2d      	ldr	r2, [pc, #180]	; (80029b8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM_ENC1_A_Pin|TIM_ENC1_B_Pin;
 8002916:	f44f 7340 	mov.w	r3, #768	; 0x300
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002928:	2301      	movs	r3, #1
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	4619      	mov	r1, r3
 8002932:	4822      	ldr	r0, [pc, #136]	; (80029bc <HAL_TIM_Encoder_MspInit+0x100>)
 8002934:	f001 fb90 	bl	8004058 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002938:	2200      	movs	r2, #0
 800293a:	2105      	movs	r1, #5
 800293c:	2019      	movs	r0, #25
 800293e:	f000 ff43 	bl	80037c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002942:	2019      	movs	r0, #25
 8002944:	f000 ff5c 	bl	8003800 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002948:	e030      	b.n	80029ac <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d12b      	bne.n	80029ac <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	4a16      	ldr	r2, [pc, #88]	; (80029b8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6413      	str	r3, [r2, #64]	; 0x40
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	4a0f      	ldr	r2, [pc, #60]	; (80029b8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6313      	str	r3, [r2, #48]	; 0x30
 8002980:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_ENC2_B_Pin|TIM_ENC2_A_Pin;
 800298c:	2322      	movs	r3, #34	; 0x22
 800298e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	2300      	movs	r3, #0
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800299c:	2301      	movs	r3, #1
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	4619      	mov	r1, r3
 80029a6:	4805      	ldr	r0, [pc, #20]	; (80029bc <HAL_TIM_Encoder_MspInit+0x100>)
 80029a8:	f001 fb56 	bl	8004058 <HAL_GPIO_Init>
}
 80029ac:	bf00      	nop
 80029ae:	3730      	adds	r7, #48	; 0x30
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40010000 	.word	0x40010000
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40020000 	.word	0x40020000

080029c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM3)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_TIM_PWM_MspInit+0x84>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d12b      	bne.n	8002a3a <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <HAL_TIM_PWM_MspInit+0x88>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_TIM_PWM_MspInit+0x88>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_TIM_PWM_MspInit+0x88>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_TIM_PWM_MspInit+0x88>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <HAL_TIM_PWM_MspInit+0x88>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <HAL_TIM_PWM_MspInit+0x88>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_FAN_INDEX_Pin;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_FAN_INDEX_GPIO_Port, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	4805      	ldr	r0, [pc, #20]	; (8002a4c <HAL_TIM_PWM_MspInit+0x8c>)
 8002a36:	f001 fb0f 	bl	8004058 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	3728      	adds	r7, #40	; 0x28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40020400 	.word	0x40020400

08002a50 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0b      	ldr	r2, [pc, #44]	; (8002a8c <HAL_TIM_OC_MspInit+0x3c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d10d      	bne.n	8002a7e <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_TIM_OC_MspInit+0x40>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_TIM_OC_MspInit+0x40>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <HAL_TIM_OC_MspInit+0x40>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40000800 	.word	0x40000800
 8002a90:	40023800 	.word	0x40023800

08002a94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <HAL_TIM_Base_MspInit+0x64>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b14      	ldr	r3, [pc, #80]	; (8002afc <HAL_TIM_Base_MspInit+0x68>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	4a13      	ldr	r2, [pc, #76]	; (8002afc <HAL_TIM_Base_MspInit+0x68>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_TIM_Base_MspInit+0x68>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002ac2:	e012      	b.n	8002aea <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM14)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <HAL_TIM_Base_MspInit+0x6c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d10d      	bne.n	8002aea <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_TIM_Base_MspInit+0x68>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a09      	ldr	r2, [pc, #36]	; (8002afc <HAL_TIM_Base_MspInit+0x68>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <HAL_TIM_Base_MspInit+0x68>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40010400 	.word	0x40010400
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40002000 	.word	0x40002000

08002b04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a34      	ldr	r2, [pc, #208]	; (8002bf4 <HAL_TIM_MspPostInit+0xf0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d11e      	bne.n	8002b64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <HAL_TIM_MspPostInit+0xf4>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a32      	ldr	r2, [pc, #200]	; (8002bf8 <HAL_TIM_MspPostInit+0xf4>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <HAL_TIM_MspPostInit+0xf4>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = TIM_FAN_PWM_Pin;
 8002b42:	2301      	movs	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b52:	2302      	movs	r3, #2
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002b56:	f107 0314 	add.w	r3, r7, #20
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4827      	ldr	r0, [pc, #156]	; (8002bfc <HAL_TIM_MspPostInit+0xf8>)
 8002b5e:	f001 fa7b 	bl	8004058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002b62:	e042      	b.n	8002bea <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <HAL_TIM_MspPostInit+0xfc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d13d      	bne.n	8002bea <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <HAL_TIM_MspPostInit+0xf4>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a20      	ldr	r2, [pc, #128]	; (8002bf8 <HAL_TIM_MspPostInit+0xf4>)
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <HAL_TIM_MspPostInit+0xf4>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <HAL_TIM_MspPostInit+0xf4>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a19      	ldr	r2, [pc, #100]	; (8002bf8 <HAL_TIM_MspPostInit+0xf4>)
 8002b94:	f043 0304 	orr.w	r3, r3, #4
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <HAL_TIM_MspPostInit+0xf4>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM_MOT1_B_Pin|TIM_MOT2_B_Pin;
 8002ba6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bac:	2302      	movs	r3, #2
 8002bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	480e      	ldr	r0, [pc, #56]	; (8002bfc <HAL_TIM_MspPostInit+0xf8>)
 8002bc4:	f001 fa48 	bl	8004058 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM_MOT1_A_Pin|TIM_MOT2_A_Pin;
 8002bc8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bde:	f107 0314 	add.w	r3, r7, #20
 8002be2:	4619      	mov	r1, r3
 8002be4:	4807      	ldr	r0, [pc, #28]	; (8002c04 <HAL_TIM_MspPostInit+0x100>)
 8002be6:	f001 fa37 	bl	8004058 <HAL_GPIO_Init>
}
 8002bea:	bf00      	nop
 8002bec:	3728      	adds	r7, #40	; 0x28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40020400 	.word	0x40020400
 8002c00:	40010400 	.word	0x40010400
 8002c04:	40020800 	.word	0x40020800

08002c08 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <MX_UART5_Init+0x4c>)
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <MX_UART5_Init+0x50>)
 8002c10:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <MX_UART5_Init+0x4c>)
 8002c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c18:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <MX_UART5_Init+0x4c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <MX_UART5_Init+0x4c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <MX_UART5_Init+0x4c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <MX_UART5_Init+0x4c>)
 8002c2e:	220c      	movs	r2, #12
 8002c30:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <MX_UART5_Init+0x4c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <MX_UART5_Init+0x4c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002c3e:	4805      	ldr	r0, [pc, #20]	; (8002c54 <MX_UART5_Init+0x4c>)
 8002c40:	f005 f804 	bl	8007c4c <HAL_UART_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002c4a:	f7fe ffef 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20011970 	.word	0x20011970
 8002c58:	40005000 	.word	0x40005000

08002c5c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <MX_USART1_UART_Init+0x50>)
 8002c64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c82:	220c      	movs	r2, #12
 8002c84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c92:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <MX_USART1_UART_Init+0x4c>)
 8002c94:	f004 ffda 	bl	8007c4c <HAL_UART_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c9e:	f7fe ffc5 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200119b4 	.word	0x200119b4
 8002cac:	40011000 	.word	0x40011000

08002cb0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_USART3_UART_Init+0x4c>)
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <MX_USART3_UART_Init+0x50>)
 8002cb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <MX_USART3_UART_Init+0x4c>)
 8002cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <MX_USART3_UART_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <MX_USART3_UART_Init+0x4c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_USART3_UART_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <MX_USART3_UART_Init+0x4c>)
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <MX_USART3_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_USART3_UART_Init+0x4c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_USART3_UART_Init+0x4c>)
 8002ce8:	f004 ffb0 	bl	8007c4c <HAL_UART_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002cf2:	f7fe ff9b 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200119f8 	.word	0x200119f8
 8002d00:	40004800 	.word	0x40004800

08002d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08e      	sub	sp, #56	; 0x38
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a74      	ldr	r2, [pc, #464]	; (8002ef4 <HAL_UART_MspInit+0x1f0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d14b      	bne.n	8002dbe <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	623b      	str	r3, [r7, #32]
 8002d2a:	4b73      	ldr	r3, [pc, #460]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	4a72      	ldr	r2, [pc, #456]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d34:	6413      	str	r3, [r2, #64]	; 0x40
 8002d36:	4b70      	ldr	r3, [pc, #448]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3e:	623b      	str	r3, [r7, #32]
 8002d40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	4b6c      	ldr	r3, [pc, #432]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a6b      	ldr	r2, [pc, #428]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002d4c:	f043 0304 	orr.w	r3, r3, #4
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b69      	ldr	r3, [pc, #420]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	4b65      	ldr	r3, [pc, #404]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a64      	ldr	r2, [pc, #400]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002d68:	f043 0308 	orr.w	r3, r3, #8
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b62      	ldr	r3, [pc, #392]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = SER2_TX_Pin;
 8002d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d8c:	2308      	movs	r3, #8
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SER2_TX_GPIO_Port, &GPIO_InitStruct);
 8002d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d94:	4619      	mov	r1, r3
 8002d96:	4859      	ldr	r0, [pc, #356]	; (8002efc <HAL_UART_MspInit+0x1f8>)
 8002d98:	f001 f95e 	bl	8004058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SER2_RX_Pin;
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002dac:	2308      	movs	r3, #8
 8002dae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SER2_RX_GPIO_Port, &GPIO_InitStruct);
 8002db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db4:	4619      	mov	r1, r3
 8002db6:	4852      	ldr	r0, [pc, #328]	; (8002f00 <HAL_UART_MspInit+0x1fc>)
 8002db8:	f001 f94e 	bl	8004058 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002dbc:	e148      	b.n	8003050 <HAL_UART_MspInit+0x34c>
  else if(uartHandle->Instance==USART1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a50      	ldr	r2, [pc, #320]	; (8002f04 <HAL_UART_MspInit+0x200>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	f040 80a9 	bne.w	8002f1c <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	4a49      	ldr	r2, [pc, #292]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002dd4:	f043 0310 	orr.w	r3, r3, #16
 8002dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	4b43      	ldr	r3, [pc, #268]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a42      	ldr	r2, [pc, #264]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b40      	ldr	r3, [pc, #256]	; (8002ef8 <HAL_UART_MspInit+0x1f4>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e02:	23c0      	movs	r3, #192	; 0xc0
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e12:	2307      	movs	r3, #7
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	483a      	ldr	r0, [pc, #232]	; (8002f08 <HAL_UART_MspInit+0x204>)
 8002e1e:	f001 f91b 	bl	8004058 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002e22:	4b3a      	ldr	r3, [pc, #232]	; (8002f0c <HAL_UART_MspInit+0x208>)
 8002e24:	4a3a      	ldr	r2, [pc, #232]	; (8002f10 <HAL_UART_MspInit+0x20c>)
 8002e26:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002e28:	4b38      	ldr	r3, [pc, #224]	; (8002f0c <HAL_UART_MspInit+0x208>)
 8002e2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e30:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <HAL_UART_MspInit+0x208>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e36:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <HAL_UART_MspInit+0x208>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e3c:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <HAL_UART_MspInit+0x208>)
 8002e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e42:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e44:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <HAL_UART_MspInit+0x208>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e4a:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <HAL_UART_MspInit+0x208>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e50:	4b2e      	ldr	r3, [pc, #184]	; (8002f0c <HAL_UART_MspInit+0x208>)
 8002e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e56:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e58:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <HAL_UART_MspInit+0x208>)
 8002e5a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e5e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e60:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <HAL_UART_MspInit+0x208>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e66:	4829      	ldr	r0, [pc, #164]	; (8002f0c <HAL_UART_MspInit+0x208>)
 8002e68:	f000 fcf4 	bl	8003854 <HAL_DMA_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002e72:	f7fe fedb 	bl	8001c2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a24      	ldr	r2, [pc, #144]	; (8002f0c <HAL_UART_MspInit+0x208>)
 8002e7a:	639a      	str	r2, [r3, #56]	; 0x38
 8002e7c:	4a23      	ldr	r2, [pc, #140]	; (8002f0c <HAL_UART_MspInit+0x208>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002e82:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_UART_MspInit+0x210>)
 8002e84:	4a24      	ldr	r2, [pc, #144]	; (8002f18 <HAL_UART_MspInit+0x214>)
 8002e86:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002e88:	4b22      	ldr	r3, [pc, #136]	; (8002f14 <HAL_UART_MspInit+0x210>)
 8002e8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e8e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e90:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_UART_MspInit+0x210>)
 8002e92:	2240      	movs	r2, #64	; 0x40
 8002e94:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e96:	4b1f      	ldr	r3, [pc, #124]	; (8002f14 <HAL_UART_MspInit+0x210>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <HAL_UART_MspInit+0x210>)
 8002e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <HAL_UART_MspInit+0x210>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eaa:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <HAL_UART_MspInit+0x210>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002eb0:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <HAL_UART_MspInit+0x210>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002eb6:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <HAL_UART_MspInit+0x210>)
 8002eb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ebc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_UART_MspInit+0x210>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ec4:	4813      	ldr	r0, [pc, #76]	; (8002f14 <HAL_UART_MspInit+0x210>)
 8002ec6:	f000 fcc5 	bl	8003854 <HAL_DMA_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8002ed0:	f7fe feac 	bl	8001c2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <HAL_UART_MspInit+0x210>)
 8002ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <HAL_UART_MspInit+0x210>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2105      	movs	r1, #5
 8002ee4:	2025      	movs	r0, #37	; 0x25
 8002ee6:	f000 fc6f 	bl	80037c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eea:	2025      	movs	r0, #37	; 0x25
 8002eec:	f000 fc88 	bl	8003800 <HAL_NVIC_EnableIRQ>
}
 8002ef0:	e0ae      	b.n	8003050 <HAL_UART_MspInit+0x34c>
 8002ef2:	bf00      	nop
 8002ef4:	40005000 	.word	0x40005000
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40020800 	.word	0x40020800
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	40011000 	.word	0x40011000
 8002f08:	40020400 	.word	0x40020400
 8002f0c:	20011a3c 	.word	0x20011a3c
 8002f10:	40026440 	.word	0x40026440
 8002f14:	20011a9c 	.word	0x20011a9c
 8002f18:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a4d      	ldr	r2, [pc, #308]	; (8003058 <HAL_UART_MspInit+0x354>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	f040 8094 	bne.w	8003050 <HAL_UART_MspInit+0x34c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	4b4b      	ldr	r3, [pc, #300]	; (800305c <HAL_UART_MspInit+0x358>)
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	4a4a      	ldr	r2, [pc, #296]	; (800305c <HAL_UART_MspInit+0x358>)
 8002f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f36:	6413      	str	r3, [r2, #64]	; 0x40
 8002f38:	4b48      	ldr	r3, [pc, #288]	; (800305c <HAL_UART_MspInit+0x358>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	4b44      	ldr	r3, [pc, #272]	; (800305c <HAL_UART_MspInit+0x358>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	4a43      	ldr	r2, [pc, #268]	; (800305c <HAL_UART_MspInit+0x358>)
 8002f4e:	f043 0308 	orr.w	r3, r3, #8
 8002f52:	6313      	str	r3, [r2, #48]	; 0x30
 8002f54:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_UART_MspInit+0x358>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f66:	2302      	movs	r3, #2
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f72:	2307      	movs	r3, #7
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4838      	ldr	r0, [pc, #224]	; (8003060 <HAL_UART_MspInit+0x35c>)
 8002f7e:	f001 f86b 	bl	8004058 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002f82:	4b38      	ldr	r3, [pc, #224]	; (8003064 <HAL_UART_MspInit+0x360>)
 8002f84:	4a38      	ldr	r2, [pc, #224]	; (8003068 <HAL_UART_MspInit+0x364>)
 8002f86:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002f88:	4b36      	ldr	r3, [pc, #216]	; (8003064 <HAL_UART_MspInit+0x360>)
 8002f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f8e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f90:	4b34      	ldr	r3, [pc, #208]	; (8003064 <HAL_UART_MspInit+0x360>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f96:	4b33      	ldr	r3, [pc, #204]	; (8003064 <HAL_UART_MspInit+0x360>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f9c:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_UART_MspInit+0x360>)
 8002f9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fa4:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <HAL_UART_MspInit+0x360>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002faa:	4b2e      	ldr	r3, [pc, #184]	; (8003064 <HAL_UART_MspInit+0x360>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002fb0:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <HAL_UART_MspInit+0x360>)
 8002fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fb6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fb8:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <HAL_UART_MspInit+0x360>)
 8002fba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002fbe:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fc0:	4b28      	ldr	r3, [pc, #160]	; (8003064 <HAL_UART_MspInit+0x360>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002fc6:	4827      	ldr	r0, [pc, #156]	; (8003064 <HAL_UART_MspInit+0x360>)
 8002fc8:	f000 fc44 	bl	8003854 <HAL_DMA_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 8002fd2:	f7fe fe2b 	bl	8001c2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a22      	ldr	r2, [pc, #136]	; (8003064 <HAL_UART_MspInit+0x360>)
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38
 8002fdc:	4a21      	ldr	r2, [pc, #132]	; (8003064 <HAL_UART_MspInit+0x360>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_UART_MspInit+0x368>)
 8002fe4:	4a22      	ldr	r2, [pc, #136]	; (8003070 <HAL_UART_MspInit+0x36c>)
 8002fe6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_UART_MspInit+0x368>)
 8002fea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fee:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	; (800306c <HAL_UART_MspInit+0x368>)
 8002ff2:	2240      	movs	r2, #64	; 0x40
 8002ff4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_UART_MspInit+0x368>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_UART_MspInit+0x368>)
 8002ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003002:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_UART_MspInit+0x368>)
 8003006:	2200      	movs	r2, #0
 8003008:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800300a:	4b18      	ldr	r3, [pc, #96]	; (800306c <HAL_UART_MspInit+0x368>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_UART_MspInit+0x368>)
 8003012:	2200      	movs	r2, #0
 8003014:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_UART_MspInit+0x368>)
 8003018:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800301c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <HAL_UART_MspInit+0x368>)
 8003020:	2200      	movs	r2, #0
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003024:	4811      	ldr	r0, [pc, #68]	; (800306c <HAL_UART_MspInit+0x368>)
 8003026:	f000 fc15 	bl	8003854 <HAL_DMA_Init>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_UART_MspInit+0x330>
      Error_Handler();
 8003030:	f7fe fdfc 	bl	8001c2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a0d      	ldr	r2, [pc, #52]	; (800306c <HAL_UART_MspInit+0x368>)
 8003038:	635a      	str	r2, [r3, #52]	; 0x34
 800303a:	4a0c      	ldr	r2, [pc, #48]	; (800306c <HAL_UART_MspInit+0x368>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003040:	2200      	movs	r2, #0
 8003042:	2105      	movs	r1, #5
 8003044:	2027      	movs	r0, #39	; 0x27
 8003046:	f000 fbbf 	bl	80037c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800304a:	2027      	movs	r0, #39	; 0x27
 800304c:	f000 fbd8 	bl	8003800 <HAL_NVIC_EnableIRQ>
}
 8003050:	bf00      	nop
 8003052:	3738      	adds	r7, #56	; 0x38
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40004800 	.word	0x40004800
 800305c:	40023800 	.word	0x40023800
 8003060:	40020c00 	.word	0x40020c00
 8003064:	20011afc 	.word	0x20011afc
 8003068:	40026028 	.word	0x40026028
 800306c:	20011b5c 	.word	0x20011b5c
 8003070:	40026058 	.word	0x40026058

08003074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003078:	480d      	ldr	r0, [pc, #52]	; (80030b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800307a:	490e      	ldr	r1, [pc, #56]	; (80030b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800307c:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800307e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003080:	e002      	b.n	8003088 <LoopCopyDataInit>

08003082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003086:	3304      	adds	r3, #4

08003088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800308a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800308c:	d3f9      	bcc.n	8003082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800308e:	4a0b      	ldr	r2, [pc, #44]	; (80030bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003090:	4c0b      	ldr	r4, [pc, #44]	; (80030c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003094:	e001      	b.n	800309a <LoopFillZerobss>

08003096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003098:	3204      	adds	r2, #4

0800309a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800309a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800309c:	d3fb      	bcc.n	8003096 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800309e:	f7ff f9a3 	bl	80023e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030a2:	f018 fa21 	bl	801b4e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030a6:	f7fe fd15 	bl	8001ad4 <main>
  bx  lr    
 80030aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030b4:	20000c74 	.word	0x20000c74
  ldr r2, =_sidata
 80030b8:	0801e0d0 	.word	0x0801e0d0
  ldr r2, =_sbss
 80030bc:	20000c78 	.word	0x20000c78
  ldr r4, =_ebss
 80030c0:	2001ccf8 	.word	0x2001ccf8

080030c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030c4:	e7fe      	b.n	80030c4 <ADC_IRQHandler>
	...

080030c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030cc:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_Init+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <HAL_Init+0x40>)
 80030d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_Init+0x40>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_Init+0x40>)
 80030de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030e4:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_Init+0x40>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_Init+0x40>)
 80030ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030f0:	2003      	movs	r0, #3
 80030f2:	f000 fb5e 	bl	80037b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030f6:	2005      	movs	r0, #5
 80030f8:	f7fe ffe2 	bl	80020c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030fc:	f7fe ffb4 	bl	8002068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023c00 	.word	0x40023c00

0800310c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_IncTick+0x20>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_IncTick+0x24>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4413      	add	r3, r2
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_IncTick+0x24>)
 800311e:	6013      	str	r3, [r2, #0]
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	2000000c 	.word	0x2000000c
 8003130:	20011bbc 	.word	0x20011bbc

08003134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return uwTick;
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_GetTick+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20011bbc 	.word	0x20011bbc

0800314c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003154:	f7ff ffee 	bl	8003134 <HAL_GetTick>
 8003158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003164:	d005      	beq.n	8003172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <HAL_Delay+0x44>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003172:	bf00      	nop
 8003174:	f7ff ffde 	bl	8003134 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	429a      	cmp	r2, r3
 8003182:	d8f7      	bhi.n	8003174 <HAL_Delay+0x28>
  {
  }
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	2000000c 	.word	0x2000000c

08003194 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e033      	b.n	8003212 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fd fd7a 	bl	8000cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d118      	bne.n	8003204 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031da:	f023 0302 	bic.w	r3, r3, #2
 80031de:	f043 0202 	orr.w	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f93a 	bl	8003460 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
 8003202:	e001      	b.n	8003208 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x1c>
 8003234:	2302      	movs	r3, #2
 8003236:	e105      	b.n	8003444 <HAL_ADC_ConfigChannel+0x228>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b09      	cmp	r3, #9
 8003246:	d925      	bls.n	8003294 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68d9      	ldr	r1, [r3, #12]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	3b1e      	subs	r3, #30
 800325e:	2207      	movs	r2, #7
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43da      	mvns	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	400a      	ands	r2, r1
 800326c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68d9      	ldr	r1, [r3, #12]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	4618      	mov	r0, r3
 8003280:	4603      	mov	r3, r0
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4403      	add	r3, r0
 8003286:	3b1e      	subs	r3, #30
 8003288:	409a      	lsls	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	e022      	b.n	80032da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6919      	ldr	r1, [r3, #16]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	2207      	movs	r2, #7
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43da      	mvns	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	400a      	ands	r2, r1
 80032b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6919      	ldr	r1, [r3, #16]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	4618      	mov	r0, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4403      	add	r3, r0
 80032d0:	409a      	lsls	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d824      	bhi.n	800332c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	3b05      	subs	r3, #5
 80032f4:	221f      	movs	r2, #31
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43da      	mvns	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	400a      	ands	r2, r1
 8003302:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	4618      	mov	r0, r3
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	3b05      	subs	r3, #5
 800331e:	fa00 f203 	lsl.w	r2, r0, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	635a      	str	r2, [r3, #52]	; 0x34
 800332a:	e04c      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b0c      	cmp	r3, #12
 8003332:	d824      	bhi.n	800337e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	3b23      	subs	r3, #35	; 0x23
 8003346:	221f      	movs	r2, #31
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43da      	mvns	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	400a      	ands	r2, r1
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	b29b      	uxth	r3, r3
 8003362:	4618      	mov	r0, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	3b23      	subs	r3, #35	; 0x23
 8003370:	fa00 f203 	lsl.w	r2, r0, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
 800337c:	e023      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	3b41      	subs	r3, #65	; 0x41
 8003390:	221f      	movs	r2, #31
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43da      	mvns	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	400a      	ands	r2, r1
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	4618      	mov	r0, r3
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	3b41      	subs	r3, #65	; 0x41
 80033ba:	fa00 f203 	lsl.w	r2, r0, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033c6:	4b22      	ldr	r3, [pc, #136]	; (8003450 <HAL_ADC_ConfigChannel+0x234>)
 80033c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a21      	ldr	r2, [pc, #132]	; (8003454 <HAL_ADC_ConfigChannel+0x238>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d109      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1cc>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b12      	cmp	r3, #18
 80033da:	d105      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_ADC_ConfigChannel+0x238>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d123      	bne.n	800343a <HAL_ADC_ConfigChannel+0x21e>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d003      	beq.n	8003402 <HAL_ADC_ConfigChannel+0x1e6>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b11      	cmp	r3, #17
 8003400:	d11b      	bne.n	800343a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b10      	cmp	r3, #16
 8003414:	d111      	bne.n	800343a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_ADC_ConfigChannel+0x23c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a10      	ldr	r2, [pc, #64]	; (800345c <HAL_ADC_ConfigChannel+0x240>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	0c9a      	lsrs	r2, r3, #18
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800342c:	e002      	b.n	8003434 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	3b01      	subs	r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f9      	bne.n	800342e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40012300 	.word	0x40012300
 8003454:	40012000 	.word	0x40012000
 8003458:	20000004 	.word	0x20000004
 800345c:	431bde83 	.word	0x431bde83

08003460 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003468:	4b79      	ldr	r3, [pc, #484]	; (8003650 <ADC_Init+0x1f0>)
 800346a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	021a      	lsls	r2, r3, #8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6899      	ldr	r1, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	4a58      	ldr	r2, [pc, #352]	; (8003654 <ADC_Init+0x1f4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d022      	beq.n	800353e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003506:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6899      	ldr	r1, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	e00f      	b.n	800355e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800354c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800355c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0202 	bic.w	r2, r2, #2
 800356c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7e1b      	ldrb	r3, [r3, #24]
 8003578:	005a      	lsls	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01b      	beq.n	80035c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6859      	ldr	r1, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	3b01      	subs	r3, #1
 80035b8:	035a      	lsls	r2, r3, #13
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	e007      	b.n	80035d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	051a      	lsls	r2, r3, #20
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6899      	ldr	r1, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003616:	025a      	lsls	r2, r3, #9
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6899      	ldr	r1, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	029a      	lsls	r2, r3, #10
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40012300 	.word	0x40012300
 8003654:	0f000001 	.word	0x0f000001

08003658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003674:	4013      	ands	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800368a:	4a04      	ldr	r2, [pc, #16]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	60d3      	str	r3, [r2, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <__NVIC_GetPriorityGrouping+0x18>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	f003 0307 	and.w	r3, r3, #7
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	db0b      	blt.n	80036e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	f003 021f 	and.w	r2, r3, #31
 80036d4:	4907      	ldr	r1, [pc, #28]	; (80036f4 <__NVIC_EnableIRQ+0x38>)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2001      	movs	r0, #1
 80036de:	fa00 f202 	lsl.w	r2, r0, r2
 80036e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000e100 	.word	0xe000e100

080036f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	6039      	str	r1, [r7, #0]
 8003702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	2b00      	cmp	r3, #0
 800370a:	db0a      	blt.n	8003722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	490c      	ldr	r1, [pc, #48]	; (8003744 <__NVIC_SetPriority+0x4c>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	440b      	add	r3, r1
 800371c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003720:	e00a      	b.n	8003738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4908      	ldr	r1, [pc, #32]	; (8003748 <__NVIC_SetPriority+0x50>)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	3b04      	subs	r3, #4
 8003730:	0112      	lsls	r2, r2, #4
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	440b      	add	r3, r1
 8003736:	761a      	strb	r2, [r3, #24]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	e000e100 	.word	0xe000e100
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f1c3 0307 	rsb	r3, r3, #7
 8003766:	2b04      	cmp	r3, #4
 8003768:	bf28      	it	cs
 800376a:	2304      	movcs	r3, #4
 800376c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3304      	adds	r3, #4
 8003772:	2b06      	cmp	r3, #6
 8003774:	d902      	bls.n	800377c <NVIC_EncodePriority+0x30>
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3b03      	subs	r3, #3
 800377a:	e000      	b.n	800377e <NVIC_EncodePriority+0x32>
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43da      	mvns	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	401a      	ands	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003794:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	43d9      	mvns	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a4:	4313      	orrs	r3, r2
         );
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3724      	adds	r7, #36	; 0x24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff ff4c 	bl	8003658 <__NVIC_SetPriorityGrouping>
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037da:	f7ff ff61 	bl	80036a0 <__NVIC_GetPriorityGrouping>
 80037de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	6978      	ldr	r0, [r7, #20]
 80037e6:	f7ff ffb1 	bl	800374c <NVIC_EncodePriority>
 80037ea:	4602      	mov	r2, r0
 80037ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f0:	4611      	mov	r1, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff ff80 	bl	80036f8 <__NVIC_SetPriority>
}
 80037f8:	bf00      	nop
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ff54 	bl	80036bc <__NVIC_EnableIRQ>
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e00e      	b.n	800384c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	795b      	ldrb	r3, [r3, #5]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fd fb0c 	bl	8000e5c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003860:	f7ff fc68 	bl	8003134 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e099      	b.n	80039a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003890:	e00f      	b.n	80038b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003892:	f7ff fc4f 	bl	8003134 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b05      	cmp	r3, #5
 800389e:	d908      	bls.n	80038b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2203      	movs	r2, #3
 80038aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e078      	b.n	80039a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e8      	bne.n	8003892 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4b38      	ldr	r3, [pc, #224]	; (80039ac <HAL_DMA_Init+0x158>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b04      	cmp	r3, #4
 800390a:	d107      	bne.n	800391c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	4313      	orrs	r3, r2
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f023 0307 	bic.w	r3, r3, #7
 8003932:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	2b04      	cmp	r3, #4
 8003944:	d117      	bne.n	8003976 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00e      	beq.n	8003976 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fb01 	bl	8003f60 <DMA_CheckFifoParam>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2240      	movs	r2, #64	; 0x40
 8003968:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003972:	2301      	movs	r3, #1
 8003974:	e016      	b.n	80039a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fab8 	bl	8003ef4 <DMA_CalcBaseAndBitshift>
 8003984:	4603      	mov	r3, r0
 8003986:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	223f      	movs	r2, #63	; 0x3f
 800398e:	409a      	lsls	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	f010803f 	.word	0xf010803f

080039b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_DMA_Start_IT+0x26>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e040      	b.n	8003a58 <HAL_DMA_Start_IT+0xa8>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d12f      	bne.n	8003a4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fa4a 	bl	8003e98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a08:	223f      	movs	r2, #63	; 0x3f
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0216 	orr.w	r2, r2, #22
 8003a1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d007      	beq.n	8003a38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0208 	orr.w	r2, r2, #8
 8003a36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	e005      	b.n	8003a56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
 8003a54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a6e:	f7ff fb61 	bl	8003134 <HAL_GetTick>
 8003a72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d008      	beq.n	8003a92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2280      	movs	r2, #128	; 0x80
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e052      	b.n	8003b38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0216 	bic.w	r2, r2, #22
 8003aa0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695a      	ldr	r2, [r3, #20]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ab0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <HAL_DMA_Abort+0x62>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0208 	bic.w	r2, r2, #8
 8003ad0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ae2:	e013      	b.n	8003b0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ae4:	f7ff fb26 	bl	8003134 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d90c      	bls.n	8003b0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2203      	movs	r2, #3
 8003afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e015      	b.n	8003b38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1e4      	bne.n	8003ae4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	223f      	movs	r2, #63	; 0x3f
 8003b20:	409a      	lsls	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d004      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2280      	movs	r2, #128	; 0x80
 8003b58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e00c      	b.n	8003b78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2205      	movs	r2, #5
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b90:	4b8e      	ldr	r3, [pc, #568]	; (8003dcc <HAL_DMA_IRQHandler+0x248>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a8e      	ldr	r2, [pc, #568]	; (8003dd0 <HAL_DMA_IRQHandler+0x24c>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	0a9b      	lsrs	r3, r3, #10
 8003b9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bae:	2208      	movs	r2, #8
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01a      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0204 	bic.w	r2, r2, #4
 8003bd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	2208      	movs	r2, #8
 8003bde:	409a      	lsls	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	f043 0201 	orr.w	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d012      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	2201      	movs	r2, #1
 8003c14:	409a      	lsls	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1e:	f043 0202 	orr.w	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d012      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	2204      	movs	r2, #4
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	f043 0204 	orr.w	r2, r3, #4
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	2210      	movs	r2, #16
 8003c62:	409a      	lsls	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d043      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d03c      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	2210      	movs	r2, #16
 8003c80:	409a      	lsls	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d018      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d108      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d024      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
 8003cb2:	e01f      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01b      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
 8003cc4:	e016      	b.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0208 	bic.w	r2, r2, #8
 8003ce2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 808f 	beq.w	8003e24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 8087 	beq.w	8003e24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d136      	bne.n	8003d9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0216 	bic.w	r2, r2, #22
 8003d3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d103      	bne.n	8003d5e <HAL_DMA_IRQHandler+0x1da>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0208 	bic.w	r2, r2, #8
 8003d6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d72:	223f      	movs	r2, #63	; 0x3f
 8003d74:	409a      	lsls	r2, r3
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d07e      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
        }
        return;
 8003d9a:	e079      	b.n	8003e90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d01d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10d      	bne.n	8003dd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d031      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
 8003dc8:	e02c      	b.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
 8003dca:	bf00      	nop
 8003dcc:	20000004 	.word	0x20000004
 8003dd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d023      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
 8003de4:	e01e      	b.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10f      	bne.n	8003e14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0210 	bic.w	r2, r2, #16
 8003e02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d032      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d022      	beq.n	8003e7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2205      	movs	r2, #5
 8003e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	3301      	adds	r3, #1
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d307      	bcc.n	8003e6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f2      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x2cc>
 8003e6a:	e000      	b.n	8003e6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
 8003e8e:	e000      	b.n	8003e92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e90:	bf00      	nop
    }
  }
}
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b40      	cmp	r3, #64	; 0x40
 8003ec4:	d108      	bne.n	8003ed8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ed6:	e007      	b.n	8003ee8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	3b10      	subs	r3, #16
 8003f04:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <DMA_CalcBaseAndBitshift+0x64>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f0e:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <DMA_CalcBaseAndBitshift+0x68>)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d909      	bls.n	8003f36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	1d1a      	adds	r2, r3, #4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	659a      	str	r2, [r3, #88]	; 0x58
 8003f34:	e007      	b.n	8003f46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f3e:	f023 0303 	bic.w	r3, r3, #3
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	aaaaaaab 	.word	0xaaaaaaab
 8003f5c:	0801ccbc 	.word	0x0801ccbc

08003f60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d11f      	bne.n	8003fba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d856      	bhi.n	800402e <DMA_CheckFifoParam+0xce>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <DMA_CheckFifoParam+0x28>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003f99 	.word	0x08003f99
 8003f8c:	08003fab 	.word	0x08003fab
 8003f90:	08003f99 	.word	0x08003f99
 8003f94:	0800402f 	.word	0x0800402f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d046      	beq.n	8004032 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa8:	e043      	b.n	8004032 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fb2:	d140      	bne.n	8004036 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb8:	e03d      	b.n	8004036 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	d121      	bne.n	8004008 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d837      	bhi.n	800403a <DMA_CheckFifoParam+0xda>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <DMA_CheckFifoParam+0x70>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08003fe1 	.word	0x08003fe1
 8003fd4:	08003fe7 	.word	0x08003fe7
 8003fd8:	08003fe1 	.word	0x08003fe1
 8003fdc:	08003ff9 	.word	0x08003ff9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe4:	e030      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d025      	beq.n	800403e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff6:	e022      	b.n	800403e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004000:	d11f      	bne.n	8004042 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004006:	e01c      	b.n	8004042 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d903      	bls.n	8004016 <DMA_CheckFifoParam+0xb6>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b03      	cmp	r3, #3
 8004012:	d003      	beq.n	800401c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004014:	e018      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
      break;
 800401a:	e015      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00e      	beq.n	8004046 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      break;
 800402c:	e00b      	b.n	8004046 <DMA_CheckFifoParam+0xe6>
      break;
 800402e:	bf00      	nop
 8004030:	e00a      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 8004032:	bf00      	nop
 8004034:	e008      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 8004036:	bf00      	nop
 8004038:	e006      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 800403a:	bf00      	nop
 800403c:	e004      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 800403e:	bf00      	nop
 8004040:	e002      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;   
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <DMA_CheckFifoParam+0xe8>
      break;
 8004046:	bf00      	nop
    }
  } 
  
  return status; 
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop

08004058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004058:	b480      	push	{r7}
 800405a:	b089      	sub	sp, #36	; 0x24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	e16b      	b.n	800434c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004074:	2201      	movs	r2, #1
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4013      	ands	r3, r2
 8004086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	429a      	cmp	r2, r3
 800408e:	f040 815a 	bne.w	8004346 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d005      	beq.n	80040aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d130      	bne.n	800410c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	2203      	movs	r2, #3
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040e0:	2201      	movs	r2, #1
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	091b      	lsrs	r3, r3, #4
 80040f6:	f003 0201 	and.w	r2, r3, #1
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	2b03      	cmp	r3, #3
 8004116:	d017      	beq.n	8004148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	2203      	movs	r2, #3
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d123      	bne.n	800419c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	08da      	lsrs	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3208      	adds	r2, #8
 800415c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	220f      	movs	r2, #15
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	43db      	mvns	r3, r3
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4013      	ands	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4313      	orrs	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	08da      	lsrs	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3208      	adds	r2, #8
 8004196:	69b9      	ldr	r1, [r7, #24]
 8004198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	2203      	movs	r2, #3
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 0203 	and.w	r2, r3, #3
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80b4 	beq.w	8004346 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	4b60      	ldr	r3, [pc, #384]	; (8004364 <HAL_GPIO_Init+0x30c>)
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	4a5f      	ldr	r2, [pc, #380]	; (8004364 <HAL_GPIO_Init+0x30c>)
 80041e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041ec:	6453      	str	r3, [r2, #68]	; 0x44
 80041ee:	4b5d      	ldr	r3, [pc, #372]	; (8004364 <HAL_GPIO_Init+0x30c>)
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041fa:	4a5b      	ldr	r2, [pc, #364]	; (8004368 <HAL_GPIO_Init+0x310>)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	089b      	lsrs	r3, r3, #2
 8004200:	3302      	adds	r3, #2
 8004202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	220f      	movs	r2, #15
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a52      	ldr	r2, [pc, #328]	; (800436c <HAL_GPIO_Init+0x314>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d02b      	beq.n	800427e <HAL_GPIO_Init+0x226>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a51      	ldr	r2, [pc, #324]	; (8004370 <HAL_GPIO_Init+0x318>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d025      	beq.n	800427a <HAL_GPIO_Init+0x222>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a50      	ldr	r2, [pc, #320]	; (8004374 <HAL_GPIO_Init+0x31c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01f      	beq.n	8004276 <HAL_GPIO_Init+0x21e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a4f      	ldr	r2, [pc, #316]	; (8004378 <HAL_GPIO_Init+0x320>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d019      	beq.n	8004272 <HAL_GPIO_Init+0x21a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a4e      	ldr	r2, [pc, #312]	; (800437c <HAL_GPIO_Init+0x324>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_GPIO_Init+0x216>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a4d      	ldr	r2, [pc, #308]	; (8004380 <HAL_GPIO_Init+0x328>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00d      	beq.n	800426a <HAL_GPIO_Init+0x212>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a4c      	ldr	r2, [pc, #304]	; (8004384 <HAL_GPIO_Init+0x32c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <HAL_GPIO_Init+0x20e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a4b      	ldr	r2, [pc, #300]	; (8004388 <HAL_GPIO_Init+0x330>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_GPIO_Init+0x20a>
 800425e:	2307      	movs	r3, #7
 8004260:	e00e      	b.n	8004280 <HAL_GPIO_Init+0x228>
 8004262:	2308      	movs	r3, #8
 8004264:	e00c      	b.n	8004280 <HAL_GPIO_Init+0x228>
 8004266:	2306      	movs	r3, #6
 8004268:	e00a      	b.n	8004280 <HAL_GPIO_Init+0x228>
 800426a:	2305      	movs	r3, #5
 800426c:	e008      	b.n	8004280 <HAL_GPIO_Init+0x228>
 800426e:	2304      	movs	r3, #4
 8004270:	e006      	b.n	8004280 <HAL_GPIO_Init+0x228>
 8004272:	2303      	movs	r3, #3
 8004274:	e004      	b.n	8004280 <HAL_GPIO_Init+0x228>
 8004276:	2302      	movs	r3, #2
 8004278:	e002      	b.n	8004280 <HAL_GPIO_Init+0x228>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_GPIO_Init+0x228>
 800427e:	2300      	movs	r3, #0
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	f002 0203 	and.w	r2, r2, #3
 8004286:	0092      	lsls	r2, r2, #2
 8004288:	4093      	lsls	r3, r2
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004290:	4935      	ldr	r1, [pc, #212]	; (8004368 <HAL_GPIO_Init+0x310>)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	3302      	adds	r3, #2
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800429e:	4b3b      	ldr	r3, [pc, #236]	; (800438c <HAL_GPIO_Init+0x334>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042c2:	4a32      	ldr	r2, [pc, #200]	; (800438c <HAL_GPIO_Init+0x334>)
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042c8:	4b30      	ldr	r3, [pc, #192]	; (800438c <HAL_GPIO_Init+0x334>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042ec:	4a27      	ldr	r2, [pc, #156]	; (800438c <HAL_GPIO_Init+0x334>)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042f2:	4b26      	ldr	r3, [pc, #152]	; (800438c <HAL_GPIO_Init+0x334>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004316:	4a1d      	ldr	r2, [pc, #116]	; (800438c <HAL_GPIO_Init+0x334>)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800431c:	4b1b      	ldr	r3, [pc, #108]	; (800438c <HAL_GPIO_Init+0x334>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004340:	4a12      	ldr	r2, [pc, #72]	; (800438c <HAL_GPIO_Init+0x334>)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3301      	adds	r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2b0f      	cmp	r3, #15
 8004350:	f67f ae90 	bls.w	8004074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	3724      	adds	r7, #36	; 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800
 8004368:	40013800 	.word	0x40013800
 800436c:	40020000 	.word	0x40020000
 8004370:	40020400 	.word	0x40020400
 8004374:	40020800 	.word	0x40020800
 8004378:	40020c00 	.word	0x40020c00
 800437c:	40021000 	.word	0x40021000
 8004380:	40021400 	.word	0x40021400
 8004384:	40021800 	.word	0x40021800
 8004388:	40021c00 	.word	0x40021c00
 800438c:	40013c00 	.word	0x40013c00

08004390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
 800439c:	4613      	mov	r3, r2
 800439e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043a0:	787b      	ldrb	r3, [r7, #1]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043ac:	e003      	b.n	80043b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043ae:	887b      	ldrh	r3, [r7, #2]
 80043b0:	041a      	lsls	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	619a      	str	r2, [r3, #24]
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e12b      	b.n	800462e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fd fb2a 	bl	8001a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2224      	movs	r2, #36	; 0x24
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004416:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004426:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004428:	f001 fffe 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 800442c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4a81      	ldr	r2, [pc, #516]	; (8004638 <HAL_I2C_Init+0x274>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d807      	bhi.n	8004448 <HAL_I2C_Init+0x84>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a80      	ldr	r2, [pc, #512]	; (800463c <HAL_I2C_Init+0x278>)
 800443c:	4293      	cmp	r3, r2
 800443e:	bf94      	ite	ls
 8004440:	2301      	movls	r3, #1
 8004442:	2300      	movhi	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	e006      	b.n	8004456 <HAL_I2C_Init+0x92>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4a7d      	ldr	r2, [pc, #500]	; (8004640 <HAL_I2C_Init+0x27c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	bf94      	ite	ls
 8004450:	2301      	movls	r3, #1
 8004452:	2300      	movhi	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0e7      	b.n	800462e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a78      	ldr	r2, [pc, #480]	; (8004644 <HAL_I2C_Init+0x280>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	0c9b      	lsrs	r3, r3, #18
 8004468:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a6a      	ldr	r2, [pc, #424]	; (8004638 <HAL_I2C_Init+0x274>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d802      	bhi.n	8004498 <HAL_I2C_Init+0xd4>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3301      	adds	r3, #1
 8004496:	e009      	b.n	80044ac <HAL_I2C_Init+0xe8>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	4a69      	ldr	r2, [pc, #420]	; (8004648 <HAL_I2C_Init+0x284>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	099b      	lsrs	r3, r3, #6
 80044aa:	3301      	adds	r3, #1
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	495c      	ldr	r1, [pc, #368]	; (8004638 <HAL_I2C_Init+0x274>)
 80044c8:	428b      	cmp	r3, r1
 80044ca:	d819      	bhi.n	8004500 <HAL_I2C_Init+0x13c>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1e59      	subs	r1, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80044da:	1c59      	adds	r1, r3, #1
 80044dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044e0:	400b      	ands	r3, r1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_I2C_Init+0x138>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1e59      	subs	r1, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80044f4:	3301      	adds	r3, #1
 80044f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fa:	e051      	b.n	80045a0 <HAL_I2C_Init+0x1dc>
 80044fc:	2304      	movs	r3, #4
 80044fe:	e04f      	b.n	80045a0 <HAL_I2C_Init+0x1dc>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d111      	bne.n	800452c <HAL_I2C_Init+0x168>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1e58      	subs	r0, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	440b      	add	r3, r1
 8004516:	fbb0 f3f3 	udiv	r3, r0, r3
 800451a:	3301      	adds	r3, #1
 800451c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e012      	b.n	8004552 <HAL_I2C_Init+0x18e>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1e58      	subs	r0, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6859      	ldr	r1, [r3, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	0099      	lsls	r1, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004542:	3301      	adds	r3, #1
 8004544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_Init+0x196>
 8004556:	2301      	movs	r3, #1
 8004558:	e022      	b.n	80045a0 <HAL_I2C_Init+0x1dc>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10e      	bne.n	8004580 <HAL_I2C_Init+0x1bc>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1e58      	subs	r0, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6859      	ldr	r1, [r3, #4]
 800456a:	460b      	mov	r3, r1
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	440b      	add	r3, r1
 8004570:	fbb0 f3f3 	udiv	r3, r0, r3
 8004574:	3301      	adds	r3, #1
 8004576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457e:	e00f      	b.n	80045a0 <HAL_I2C_Init+0x1dc>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1e58      	subs	r0, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	0099      	lsls	r1, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	fbb0 f3f3 	udiv	r3, r0, r3
 8004596:	3301      	adds	r3, #1
 8004598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	6809      	ldr	r1, [r1, #0]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6911      	ldr	r1, [r2, #16]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	68d2      	ldr	r2, [r2, #12]
 80045da:	4311      	orrs	r1, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	000186a0 	.word	0x000186a0
 800463c:	001e847f 	.word	0x001e847f
 8004640:	003d08ff 	.word	0x003d08ff
 8004644:	431bde83 	.word	0x431bde83
 8004648:	10624dd3 	.word	0x10624dd3

0800464c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800464c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800464e:	b08f      	sub	sp, #60	; 0x3c
 8004650:	af0a      	add	r7, sp, #40	; 0x28
 8004652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e10f      	b.n	800487e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f00b f8ef 	bl	800f85c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2203      	movs	r2, #3
 8004682:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f004 fe5a 	bl	8009356 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	687e      	ldr	r6, [r7, #4]
 80046aa:	466d      	mov	r5, sp
 80046ac:	f106 0410 	add.w	r4, r6, #16
 80046b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80046c0:	1d33      	adds	r3, r6, #4
 80046c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046c4:	6838      	ldr	r0, [r7, #0]
 80046c6:	f004 fd31 	bl	800912c <USB_CoreInit>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0d0      	b.n	800487e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f004 fe48 	bl	8009378 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046e8:	2300      	movs	r3, #0
 80046ea:	73fb      	strb	r3, [r7, #15]
 80046ec:	e04a      	b.n	8004784 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046ee:	7bfa      	ldrb	r2, [r7, #15]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	333d      	adds	r3, #61	; 0x3d
 80046fe:	2201      	movs	r2, #1
 8004700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	440b      	add	r3, r1
 8004710:	333c      	adds	r3, #60	; 0x3c
 8004712:	7bfa      	ldrb	r2, [r7, #15]
 8004714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004716:	7bfa      	ldrb	r2, [r7, #15]
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	b298      	uxth	r0, r3
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	3344      	adds	r3, #68	; 0x44
 800472a:	4602      	mov	r2, r0
 800472c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800472e:	7bfa      	ldrb	r2, [r7, #15]
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	3340      	adds	r3, #64	; 0x40
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004742:	7bfa      	ldrb	r2, [r7, #15]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	3348      	adds	r3, #72	; 0x48
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	334c      	adds	r3, #76	; 0x4c
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800476a:	7bfa      	ldrb	r2, [r7, #15]
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	3354      	adds	r3, #84	; 0x54
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	3301      	adds	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
 8004784:	7bfa      	ldrb	r2, [r7, #15]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	429a      	cmp	r2, r3
 800478c:	d3af      	bcc.n	80046ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800478e:	2300      	movs	r3, #0
 8004790:	73fb      	strb	r3, [r7, #15]
 8004792:	e044      	b.n	800481e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004794:	7bfa      	ldrb	r2, [r7, #15]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047aa:	7bfa      	ldrb	r2, [r7, #15]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80047bc:	7bfa      	ldrb	r2, [r7, #15]
 80047be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047c0:	7bfa      	ldrb	r2, [r7, #15]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80047d2:	2200      	movs	r2, #0
 80047d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047d6:	7bfa      	ldrb	r2, [r7, #15]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047ec:	7bfa      	ldrb	r2, [r7, #15]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004802:	7bfa      	ldrb	r2, [r7, #15]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	3301      	adds	r3, #1
 800481c:	73fb      	strb	r3, [r7, #15]
 800481e:	7bfa      	ldrb	r2, [r7, #15]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	429a      	cmp	r2, r3
 8004826:	d3b5      	bcc.n	8004794 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	687e      	ldr	r6, [r7, #4]
 8004830:	466d      	mov	r5, sp
 8004832:	f106 0410 	add.w	r4, r6, #16
 8004836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800483a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800483c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800483e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004842:	e885 0003 	stmia.w	r5, {r0, r1}
 8004846:	1d33      	adds	r3, r6, #4
 8004848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800484a:	6838      	ldr	r0, [r7, #0]
 800484c:	f004 fde0 	bl	8009410 <USB_DevInit>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d005      	beq.n	8004862 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e00d      	b.n	800487e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f005 ff2f 	bl	800a6da <USB_DevDisconnect>

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004886 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_PCD_Start+0x1c>
 800489e:	2302      	movs	r3, #2
 80048a0:	e020      	b.n	80048e4 <HAL_PCD_Start+0x5e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d109      	bne.n	80048c6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d005      	beq.n	80048c6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f004 fd32 	bl	8009334 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f005 fedf 	bl	800a698 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b08d      	sub	sp, #52	; 0x34
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f005 ff9d 	bl	800a842 <USB_GetMode>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	f040 848a 	bne.w	8005224 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f005 ff01 	bl	800a71c <USB_ReadInterrupts>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8480 	beq.w	8005222 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	0a1b      	lsrs	r3, r3, #8
 800492c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f005 feee 	bl	800a71c <USB_ReadInterrupts>
 8004940:	4603      	mov	r3, r0
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d107      	bne.n	800495a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f002 0202 	and.w	r2, r2, #2
 8004958:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f005 fedc 	bl	800a71c <USB_ReadInterrupts>
 8004964:	4603      	mov	r3, r0
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b10      	cmp	r3, #16
 800496c:	d161      	bne.n	8004a32 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699a      	ldr	r2, [r3, #24]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0210 	bic.w	r2, r2, #16
 800497c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f003 020f 	and.w	r2, r3, #15
 800498a:	4613      	mov	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	4413      	add	r3, r2
 800499a:	3304      	adds	r3, #4
 800499c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	0c5b      	lsrs	r3, r3, #17
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d124      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d035      	beq.n	8004a22 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80049c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	6a38      	ldr	r0, [r7, #32]
 80049ca:	f005 fd13 	bl	800a3f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049da:	441a      	add	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	6a1a      	ldr	r2, [r3, #32]
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	091b      	lsrs	r3, r3, #4
 80049e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049ec:	441a      	add	r2, r3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	621a      	str	r2, [r3, #32]
 80049f2:	e016      	b.n	8004a22 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	0c5b      	lsrs	r3, r3, #17
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	2b06      	cmp	r3, #6
 80049fe:	d110      	bne.n	8004a22 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a06:	2208      	movs	r2, #8
 8004a08:	4619      	mov	r1, r3
 8004a0a:	6a38      	ldr	r0, [r7, #32]
 8004a0c:	f005 fcf2 	bl	800a3f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	6a1a      	ldr	r2, [r3, #32]
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a1c:	441a      	add	r2, r3
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699a      	ldr	r2, [r3, #24]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0210 	orr.w	r2, r2, #16
 8004a30:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f005 fe70 	bl	800a71c <USB_ReadInterrupts>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a46:	f040 80a7 	bne.w	8004b98 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f005 fe75 	bl	800a742 <USB_ReadDevAllOutEpInterrupt>
 8004a58:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004a5a:	e099      	b.n	8004b90 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 808e 	beq.w	8004b84 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	4611      	mov	r1, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f005 fe99 	bl	800a7aa <USB_ReadDevOutEPInterrupt>
 8004a78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00c      	beq.n	8004a9e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a90:	461a      	mov	r2, r3
 8004a92:	2301      	movs	r3, #1
 8004a94:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fec3 	bl	8005824 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 ff99 	bl	80059f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f003 0310 	and.w	r3, r3, #16
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2310      	movs	r3, #16
 8004adc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d030      	beq.n	8004b4a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af0:	2b80      	cmp	r3, #128	; 0x80
 8004af2:	d109      	bne.n	8004b08 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b06:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	4413      	add	r3, r2
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	78db      	ldrb	r3, [r3, #3]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d108      	bne.n	8004b38 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	4619      	mov	r1, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f00a ff98 	bl	800fa68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	461a      	mov	r2, r3
 8004b46:	2302      	movs	r3, #2
 8004b48:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b60:	461a      	mov	r2, r3
 8004b62:	2320      	movs	r3, #32
 8004b64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d009      	beq.n	8004b84 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b82:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	3301      	adds	r3, #1
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f47f af62 	bne.w	8004a5c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f005 fdbd 	bl	800a71c <USB_ReadInterrupts>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ba8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bac:	f040 80db 	bne.w	8004d66 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f005 fdde 	bl	800a776 <USB_ReadDevAllInEpInterrupt>
 8004bba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004bc0:	e0cd      	b.n	8004d5e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80c2 	beq.w	8004d52 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f005 fe04 	bl	800a7e6 <USB_ReadDevInEPInterrupt>
 8004bde:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d057      	beq.n	8004c9a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69f9      	ldr	r1, [r7, #28]
 8004c06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d132      	bne.n	8004c8e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	334c      	adds	r3, #76	; 0x4c
 8004c38:	6819      	ldr	r1, [r3, #0]
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3e:	4613      	mov	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4403      	add	r3, r0
 8004c48:	3348      	adds	r3, #72	; 0x48
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4419      	add	r1, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c52:	4613      	mov	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4403      	add	r3, r0
 8004c5c:	334c      	adds	r3, #76	; 0x4c
 8004c5e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d113      	bne.n	8004c8e <HAL_PCD_IRQHandler+0x3a2>
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	3354      	adds	r3, #84	; 0x54
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d108      	bne.n	8004c8e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c86:	461a      	mov	r2, r3
 8004c88:	2101      	movs	r1, #1
 8004c8a:	f005 fe0b 	bl	800a8a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f00a fe62 	bl	800f95e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	461a      	mov	r2, r3
 8004cce:	2310      	movs	r3, #16
 8004cd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2340      	movs	r3, #64	; 0x40
 8004cec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d023      	beq.n	8004d40 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cfa:	6a38      	ldr	r0, [r7, #32]
 8004cfc:	f004 fcec 	bl	80096d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d02:	4613      	mov	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	3338      	adds	r3, #56	; 0x38
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	4413      	add	r3, r2
 8004d10:	3304      	adds	r3, #4
 8004d12:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	78db      	ldrb	r3, [r3, #3]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d108      	bne.n	8004d2e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	4619      	mov	r1, r3
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f00a feaf 	bl	800fa8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004d4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fcdb 	bl	8005708 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	3301      	adds	r3, #1
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	085b      	lsrs	r3, r3, #1
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f47f af2e 	bne.w	8004bc2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f005 fcd6 	bl	800a71c <USB_ReadInterrupts>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d7a:	d122      	bne.n	8004dc2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d108      	bne.n	8004dac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004da2:	2100      	movs	r1, #0
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fec3 	bl	8005b30 <HAL_PCDEx_LPM_Callback>
 8004daa:	e002      	b.n	8004db2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f00a fe4d 	bl	800fa4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f005 fca8 	bl	800a71c <USB_ReadInterrupts>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd6:	d112      	bne.n	8004dfe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d102      	bne.n	8004dee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f00a fe09 	bl	800fa00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004dfc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f005 fc8a 	bl	800a71c <USB_ReadInterrupts>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e12:	f040 80b7 	bne.w	8004f84 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2110      	movs	r1, #16
 8004e30:	4618      	mov	r0, r3
 8004e32:	f004 fc51 	bl	80096d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e3a:	e046      	b.n	8004eca <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e4e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e60:	0151      	lsls	r1, r2, #5
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	440a      	add	r2, r1
 8004e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e82:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ea2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ebe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ec2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d3b3      	bcc.n	8004e3c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004ee6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d016      	beq.n	8004f1e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f00:	f043 030b 	orr.w	r3, r3, #11
 8004f04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f16:	f043 030b 	orr.w	r3, r3, #11
 8004f1a:	6453      	str	r3, [r2, #68]	; 0x44
 8004f1c:	e015      	b.n	8004f4a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f30:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004f34:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f44:	f043 030b 	orr.w	r3, r3, #11
 8004f48:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f5c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f005 fc98 	bl	800a8a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f005 fbc7 	bl	800a71c <USB_ReadInterrupts>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f98:	d124      	bne.n	8004fe4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f005 fc5d 	bl	800a85e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f004 fc12 	bl	80097d2 <USB_GetDevSpeed>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681c      	ldr	r4, [r3, #0]
 8004fba:	f001 fa29 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8004fbe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f004 f911 	bl	80091f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f00a fced 	bl	800f9ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695a      	ldr	r2, [r3, #20]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f005 fb97 	bl	800a71c <USB_ReadInterrupts>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d10a      	bne.n	800500e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f00a fcca 	bl	800f992 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695a      	ldr	r2, [r3, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f002 0208 	and.w	r2, r2, #8
 800500c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f005 fb82 	bl	800a71c <USB_ReadInterrupts>
 8005018:	4603      	mov	r3, r0
 800501a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501e:	2b80      	cmp	r3, #128	; 0x80
 8005020:	d122      	bne.n	8005068 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800502e:	2301      	movs	r3, #1
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
 8005032:	e014      	b.n	800505e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005038:	4613      	mov	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d105      	bne.n	8005058 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	b2db      	uxtb	r3, r3
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fb27 	bl	80056a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	3301      	adds	r3, #1
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005064:	429a      	cmp	r2, r3
 8005066:	d3e5      	bcc.n	8005034 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f005 fb55 	bl	800a71c <USB_ReadInterrupts>
 8005072:	4603      	mov	r3, r0
 8005074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800507c:	d13b      	bne.n	80050f6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800507e:	2301      	movs	r3, #1
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
 8005082:	e02b      	b.n	80050dc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005098:	4613      	mov	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	3340      	adds	r3, #64	; 0x40
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d115      	bne.n	80050d6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80050aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	da12      	bge.n	80050d6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b4:	4613      	mov	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	333f      	adds	r3, #63	; 0x3f
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	4619      	mov	r1, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fae8 	bl	80056a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	3301      	adds	r3, #1
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d3ce      	bcc.n	8005084 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80050f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f005 fb0e 	bl	800a71c <USB_ReadInterrupts>
 8005100:	4603      	mov	r3, r0
 8005102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800510a:	d155      	bne.n	80051b8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800510c:	2301      	movs	r3, #1
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
 8005110:	e045      	b.n	800519e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005126:	4613      	mov	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d12e      	bne.n	8005198 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800513a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800513c:	2b00      	cmp	r3, #0
 800513e:	da2b      	bge.n	8005198 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800514c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005150:	429a      	cmp	r2, r3
 8005152:	d121      	bne.n	8005198 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005158:	4613      	mov	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005166:	2201      	movs	r2, #1
 8005168:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005194:	6053      	str	r3, [r2, #4]
            break;
 8005196:	e007      	b.n	80051a8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	3301      	adds	r3, #1
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d3b4      	bcc.n	8005112 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80051b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f005 faad 	bl	800a71c <USB_ReadInterrupts>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d10a      	bne.n	80051e4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f00a fc6e 	bl	800fab0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80051e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f005 fa97 	bl	800a71c <USB_ReadInterrupts>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d115      	bne.n	8005224 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f00a fc5e 	bl	800facc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6859      	ldr	r1, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	e000      	b.n	8005224 <HAL_PCD_IRQHandler+0x938>
      return;
 8005222:	bf00      	nop
    }
  }
}
 8005224:	3734      	adds	r7, #52	; 0x34
 8005226:	46bd      	mov	sp, r7
 8005228:	bd90      	pop	{r4, r7, pc}

0800522a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_PCD_SetAddress+0x1a>
 8005240:	2302      	movs	r3, #2
 8005242:	e013      	b.n	800526c <HAL_PCD_SetAddress+0x42>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f005 f9f5 	bl	800a64c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	4608      	mov	r0, r1
 800527e:	4611      	mov	r1, r2
 8005280:	461a      	mov	r2, r3
 8005282:	4603      	mov	r3, r0
 8005284:	70fb      	strb	r3, [r7, #3]
 8005286:	460b      	mov	r3, r1
 8005288:	803b      	strh	r3, [r7, #0]
 800528a:	4613      	mov	r3, r2
 800528c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005296:	2b00      	cmp	r3, #0
 8005298:	da0f      	bge.n	80052ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	f003 020f 	and.w	r2, r3, #15
 80052a0:	4613      	mov	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	3338      	adds	r3, #56	; 0x38
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	4413      	add	r3, r2
 80052ae:	3304      	adds	r3, #4
 80052b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	705a      	strb	r2, [r3, #1]
 80052b8:	e00f      	b.n	80052da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052ba:	78fb      	ldrb	r3, [r7, #3]
 80052bc:	f003 020f 	and.w	r2, r3, #15
 80052c0:	4613      	mov	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	4413      	add	r3, r2
 80052d0:	3304      	adds	r3, #4
 80052d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80052da:	78fb      	ldrb	r3, [r7, #3]
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80052e6:	883a      	ldrh	r2, [r7, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	78ba      	ldrb	r2, [r7, #2]
 80052f0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005304:	78bb      	ldrb	r3, [r7, #2]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d102      	bne.n	8005310 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_PCD_EP_Open+0xaa>
 800531a:	2302      	movs	r3, #2
 800531c:	e00e      	b.n	800533c <HAL_PCD_EP_Open+0xc8>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	4618      	mov	r0, r3
 800532e:	f004 fa75 	bl	800981c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800533a:	7afb      	ldrb	r3, [r7, #11]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005354:	2b00      	cmp	r3, #0
 8005356:	da0f      	bge.n	8005378 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	f003 020f 	and.w	r2, r3, #15
 800535e:	4613      	mov	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	3338      	adds	r3, #56	; 0x38
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	4413      	add	r3, r2
 800536c:	3304      	adds	r3, #4
 800536e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	705a      	strb	r2, [r3, #1]
 8005376:	e00f      	b.n	8005398 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	f003 020f 	and.w	r2, r3, #15
 800537e:	4613      	mov	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	4413      	add	r3, r2
 800538e:	3304      	adds	r3, #4
 8005390:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005398:	78fb      	ldrb	r3, [r7, #3]
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_PCD_EP_Close+0x6e>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e00e      	b.n	80053d0 <HAL_PCD_EP_Close+0x8c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68f9      	ldr	r1, [r7, #12]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f004 fab3 	bl	800992c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	607a      	str	r2, [r7, #4]
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	460b      	mov	r3, r1
 80053e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053e8:	7afb      	ldrb	r3, [r7, #11]
 80053ea:	f003 020f 	and.w	r2, r3, #15
 80053ee:	4613      	mov	r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	3304      	adds	r3, #4
 8005400:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2200      	movs	r2, #0
 8005418:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800541a:	7afb      	ldrb	r3, [r7, #11]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	b2da      	uxtb	r2, r3
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d102      	bne.n	8005434 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005434:	7afb      	ldrb	r3, [r7, #11]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	6979      	ldr	r1, [r7, #20]
 800544c:	f004 fd92 	bl	8009f74 <USB_EP0StartXfer>
 8005450:	e008      	b.n	8005464 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	6979      	ldr	r1, [r7, #20]
 8005460:	f004 fb40 	bl	8009ae4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	460b      	mov	r3, r1
 8005478:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800547a:	78fb      	ldrb	r3, [r7, #3]
 800547c:	f003 020f 	and.w	r2, r3, #15
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005490:	681b      	ldr	r3, [r3, #0]
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b086      	sub	sp, #24
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	460b      	mov	r3, r1
 80054ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054ae:	7afb      	ldrb	r3, [r7, #11]
 80054b0:	f003 020f 	and.w	r2, r3, #15
 80054b4:	4613      	mov	r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	3338      	adds	r3, #56	; 0x38
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	3304      	adds	r3, #4
 80054c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2200      	movs	r2, #0
 80054d6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2201      	movs	r2, #1
 80054dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054de:	7afb      	ldrb	r3, [r7, #11]
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d102      	bne.n	80054f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054f8:	7afb      	ldrb	r3, [r7, #11]
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	6979      	ldr	r1, [r7, #20]
 8005510:	f004 fd30 	bl	8009f74 <USB_EP0StartXfer>
 8005514:	e008      	b.n	8005528 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	b2db      	uxtb	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	6979      	ldr	r1, [r7, #20]
 8005524:	f004 fade 	bl	8009ae4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	460b      	mov	r3, r1
 800553c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	f003 020f 	and.w	r2, r3, #15
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	429a      	cmp	r2, r3
 800554a:	d901      	bls.n	8005550 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e050      	b.n	80055f2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005554:	2b00      	cmp	r3, #0
 8005556:	da0f      	bge.n	8005578 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	f003 020f 	and.w	r2, r3, #15
 800555e:	4613      	mov	r3, r2
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	3338      	adds	r3, #56	; 0x38
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	4413      	add	r3, r2
 800556c:	3304      	adds	r3, #4
 800556e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	705a      	strb	r2, [r3, #1]
 8005576:	e00d      	b.n	8005594 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005578:	78fa      	ldrb	r2, [r7, #3]
 800557a:	4613      	mov	r3, r2
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	4413      	add	r3, r2
 800558a:	3304      	adds	r3, #4
 800558c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2201      	movs	r2, #1
 8005598:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_PCD_EP_SetStall+0x82>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e01e      	b.n	80055f2 <HAL_PCD_EP_SetStall+0xc0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68f9      	ldr	r1, [r7, #12]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f004 ff6e 	bl	800a4a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	b2d9      	uxtb	r1, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055e2:	461a      	mov	r2, r3
 80055e4:	f005 f95e 	bl	800a8a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	460b      	mov	r3, r1
 8005604:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	f003 020f 	and.w	r2, r3, #15
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	d901      	bls.n	8005618 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e042      	b.n	800569e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800561c:	2b00      	cmp	r3, #0
 800561e:	da0f      	bge.n	8005640 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	f003 020f 	and.w	r2, r3, #15
 8005626:	4613      	mov	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	3338      	adds	r3, #56	; 0x38
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4413      	add	r3, r2
 8005634:	3304      	adds	r3, #4
 8005636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	705a      	strb	r2, [r3, #1]
 800563e:	e00f      	b.n	8005660 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	f003 020f 	and.w	r2, r3, #15
 8005646:	4613      	mov	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4413      	add	r3, r2
 8005656:	3304      	adds	r3, #4
 8005658:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	b2da      	uxtb	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_PCD_EP_ClrStall+0x86>
 800567c:	2302      	movs	r3, #2
 800567e:	e00e      	b.n	800569e <HAL_PCD_EP_ClrStall+0xa4>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68f9      	ldr	r1, [r7, #12]
 800568e:	4618      	mov	r0, r3
 8005690:	f004 ff76 	bl	800a580 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	460b      	mov	r3, r1
 80056b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80056b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	da0c      	bge.n	80056d4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056ba:	78fb      	ldrb	r3, [r7, #3]
 80056bc:	f003 020f 	and.w	r2, r3, #15
 80056c0:	4613      	mov	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	3338      	adds	r3, #56	; 0x38
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	3304      	adds	r3, #4
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e00c      	b.n	80056ee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	f003 020f 	and.w	r2, r3, #15
 80056da:	4613      	mov	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	4413      	add	r3, r2
 80056ea:	3304      	adds	r3, #4
 80056ec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f004 fd95 	bl	800a224 <USB_EPStopXfer>
 80056fa:	4603      	mov	r3, r0
 80056fc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80056fe:	7afb      	ldrb	r3, [r7, #11]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	; 0x28
 800570c:	af02      	add	r7, sp, #8
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	4613      	mov	r3, r2
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	3338      	adds	r3, #56	; 0x38
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	4413      	add	r3, r2
 800572c:	3304      	adds	r3, #4
 800572e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a1a      	ldr	r2, [r3, #32]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	429a      	cmp	r2, r3
 800573a:	d901      	bls.n	8005740 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e06c      	b.n	800581a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	699a      	ldr	r2, [r3, #24]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	429a      	cmp	r2, r3
 8005754:	d902      	bls.n	800575c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	3303      	adds	r3, #3
 8005760:	089b      	lsrs	r3, r3, #2
 8005762:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005764:	e02b      	b.n	80057be <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	429a      	cmp	r2, r3
 800577a:	d902      	bls.n	8005782 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	3303      	adds	r3, #3
 8005786:	089b      	lsrs	r3, r3, #2
 8005788:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6919      	ldr	r1, [r3, #16]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800579a:	b2db      	uxtb	r3, r3
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	4603      	mov	r3, r0
 80057a0:	6978      	ldr	r0, [r7, #20]
 80057a2:	f004 fde9 	bl	800a378 <USB_WritePacket>

    ep->xfer_buff  += len;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	441a      	add	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	441a      	add	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d809      	bhi.n	80057e8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1a      	ldr	r2, [r3, #32]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057dc:	429a      	cmp	r2, r3
 80057de:	d203      	bcs.n	80057e8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1be      	bne.n	8005766 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d811      	bhi.n	8005818 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	2201      	movs	r2, #1
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	43db      	mvns	r3, r3
 800580e:	6939      	ldr	r1, [r7, #16]
 8005810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005814:	4013      	ands	r3, r2
 8005816:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	333c      	adds	r3, #60	; 0x3c
 800583c:	3304      	adds	r3, #4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d17b      	bne.n	8005952 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b00      	cmp	r3, #0
 8005862:	d015      	beq.n	8005890 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	4a61      	ldr	r2, [pc, #388]	; (80059ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	f240 80b9 	bls.w	80059e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80b3 	beq.w	80059e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005886:	461a      	mov	r2, r3
 8005888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588c:	6093      	str	r3, [r2, #8]
 800588e:	e0a7      	b.n	80059e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d009      	beq.n	80058ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a6:	461a      	mov	r2, r3
 80058a8:	2320      	movs	r3, #32
 80058aa:	6093      	str	r3, [r2, #8]
 80058ac:	e098      	b.n	80059e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f040 8093 	bne.w	80059e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	4a4b      	ldr	r2, [pc, #300]	; (80059ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d90f      	bls.n	80058e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d8:	461a      	mov	r2, r3
 80058da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058de:	6093      	str	r3, [r2, #8]
 80058e0:	e07e      	b.n	80059e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	4613      	mov	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	4413      	add	r3, r2
 80058f4:	3304      	adds	r3, #4
 80058f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	0159      	lsls	r1, r3, #5
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	440b      	add	r3, r1
 8005904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800590e:	1ad2      	subs	r2, r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d114      	bne.n	8005944 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800592c:	461a      	mov	r2, r3
 800592e:	2101      	movs	r1, #1
 8005930:	f004 ffb8 	bl	800a8a4 <USB_EP0_OutStart>
 8005934:	e006      	b.n	8005944 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	441a      	add	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f009 ffec 	bl	800f928 <HAL_PCD_DataOutStageCallback>
 8005950:	e046      	b.n	80059e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	4a26      	ldr	r2, [pc, #152]	; (80059f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d124      	bne.n	80059a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	461a      	mov	r2, r3
 8005972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005976:	6093      	str	r3, [r2, #8]
 8005978:	e032      	b.n	80059e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005990:	461a      	mov	r2, r3
 8005992:	2320      	movs	r3, #32
 8005994:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f009 ffc3 	bl	800f928 <HAL_PCD_DataOutStageCallback>
 80059a2:	e01d      	b.n	80059e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d114      	bne.n	80059d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	4613      	mov	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d108      	bne.n	80059d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80059cc:	461a      	mov	r2, r3
 80059ce:	2100      	movs	r1, #0
 80059d0:	f004 ff68 	bl	800a8a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f009 ffa4 	bl	800f928 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	4f54300a 	.word	0x4f54300a
 80059f0:	4f54310a 	.word	0x4f54310a

080059f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	333c      	adds	r3, #60	; 0x3c
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4a15      	ldr	r2, [pc, #84]	; (8005a7c <PCD_EP_OutSetupPacket_int+0x88>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d90e      	bls.n	8005a48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d009      	beq.n	8005a48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a40:	461a      	mov	r2, r3
 8005a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f009 ff5b 	bl	800f904 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <PCD_EP_OutSetupPacket_int+0x88>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d90c      	bls.n	8005a70 <PCD_EP_OutSetupPacket_int+0x7c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d108      	bne.n	8005a70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a68:	461a      	mov	r2, r3
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	f004 ff1a 	bl	800a8a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	4f54300a 	.word	0x4f54300a

08005a80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	70fb      	strb	r3, [r7, #3]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d107      	bne.n	8005aae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005a9e:	883b      	ldrh	r3, [r7, #0]
 8005aa0:	0419      	lsls	r1, r3, #16
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8005aac:	e028      	b.n	8005b00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	0c1b      	lsrs	r3, r3, #16
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	4413      	add	r3, r2
 8005aba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005abc:	2300      	movs	r3, #0
 8005abe:	73fb      	strb	r3, [r7, #15]
 8005ac0:	e00d      	b.n	8005ade <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	3340      	adds	r3, #64	; 0x40
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	0c1b      	lsrs	r3, r3, #16
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	3301      	adds	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
 8005ade:	7bfa      	ldrb	r2, [r7, #15]
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d3ec      	bcc.n	8005ac2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ae8:	883b      	ldrh	r3, [r7, #0]
 8005aea:	0418      	lsls	r0, r3, #16
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	4302      	orrs	r2, r0
 8005af8:	3340      	adds	r3, #64	; 0x40
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	460b      	mov	r3, r1
 8005b18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	887a      	ldrh	r2, [r7, #2]
 8005b20:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e267      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d075      	beq.n	8005c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b66:	4b88      	ldr	r3, [pc, #544]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 030c 	and.w	r3, r3, #12
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d00c      	beq.n	8005b8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b72:	4b85      	ldr	r3, [pc, #532]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b7a:	2b08      	cmp	r3, #8
 8005b7c:	d112      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b7e:	4b82      	ldr	r3, [pc, #520]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b8a:	d10b      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b8c:	4b7e      	ldr	r3, [pc, #504]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d05b      	beq.n	8005c50 <HAL_RCC_OscConfig+0x108>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d157      	bne.n	8005c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e242      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bac:	d106      	bne.n	8005bbc <HAL_RCC_OscConfig+0x74>
 8005bae:	4b76      	ldr	r3, [pc, #472]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a75      	ldr	r2, [pc, #468]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	e01d      	b.n	8005bf8 <HAL_RCC_OscConfig+0xb0>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bc4:	d10c      	bne.n	8005be0 <HAL_RCC_OscConfig+0x98>
 8005bc6:	4b70      	ldr	r3, [pc, #448]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a6f      	ldr	r2, [pc, #444]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	4b6d      	ldr	r3, [pc, #436]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a6c      	ldr	r2, [pc, #432]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	e00b      	b.n	8005bf8 <HAL_RCC_OscConfig+0xb0>
 8005be0:	4b69      	ldr	r3, [pc, #420]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a68      	ldr	r2, [pc, #416]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	4b66      	ldr	r3, [pc, #408]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a65      	ldr	r2, [pc, #404]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d013      	beq.n	8005c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c00:	f7fd fa98 	bl	8003134 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c08:	f7fd fa94 	bl	8003134 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b64      	cmp	r3, #100	; 0x64
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e207      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c1a:	4b5b      	ldr	r3, [pc, #364]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0f0      	beq.n	8005c08 <HAL_RCC_OscConfig+0xc0>
 8005c26:	e014      	b.n	8005c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c28:	f7fd fa84 	bl	8003134 <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c30:	f7fd fa80 	bl	8003134 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b64      	cmp	r3, #100	; 0x64
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e1f3      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c42:	4b51      	ldr	r3, [pc, #324]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f0      	bne.n	8005c30 <HAL_RCC_OscConfig+0xe8>
 8005c4e:	e000      	b.n	8005c52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d063      	beq.n	8005d26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c5e:	4b4a      	ldr	r3, [pc, #296]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 030c 	and.w	r3, r3, #12
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00b      	beq.n	8005c82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c6a:	4b47      	ldr	r3, [pc, #284]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d11c      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c76:	4b44      	ldr	r3, [pc, #272]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d116      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c82:	4b41      	ldr	r3, [pc, #260]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <HAL_RCC_OscConfig+0x152>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d001      	beq.n	8005c9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e1c7      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c9a:	4b3b      	ldr	r3, [pc, #236]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	4937      	ldr	r1, [pc, #220]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cae:	e03a      	b.n	8005d26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d020      	beq.n	8005cfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cb8:	4b34      	ldr	r3, [pc, #208]	; (8005d8c <HAL_RCC_OscConfig+0x244>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbe:	f7fd fa39 	bl	8003134 <HAL_GetTick>
 8005cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cc4:	e008      	b.n	8005cd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cc6:	f7fd fa35 	bl	8003134 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e1a8      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd8:	4b2b      	ldr	r3, [pc, #172]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0f0      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce4:	4b28      	ldr	r3, [pc, #160]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	4925      	ldr	r1, [pc, #148]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	600b      	str	r3, [r1, #0]
 8005cf8:	e015      	b.n	8005d26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cfa:	4b24      	ldr	r3, [pc, #144]	; (8005d8c <HAL_RCC_OscConfig+0x244>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d00:	f7fd fa18 	bl	8003134 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d08:	f7fd fa14 	bl	8003134 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e187      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d1a:	4b1b      	ldr	r3, [pc, #108]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f0      	bne.n	8005d08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d036      	beq.n	8005da0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d016      	beq.n	8005d68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d3a:	4b15      	ldr	r3, [pc, #84]	; (8005d90 <HAL_RCC_OscConfig+0x248>)
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d40:	f7fd f9f8 	bl	8003134 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d48:	f7fd f9f4 	bl	8003134 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e167      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d5a:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0x200>
 8005d66:	e01b      	b.n	8005da0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d68:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <HAL_RCC_OscConfig+0x248>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d6e:	f7fd f9e1 	bl	8003134 <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d74:	e00e      	b.n	8005d94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d76:	f7fd f9dd 	bl	8003134 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d907      	bls.n	8005d94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e150      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	42470000 	.word	0x42470000
 8005d90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d94:	4b88      	ldr	r3, [pc, #544]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1ea      	bne.n	8005d76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 8097 	beq.w	8005edc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dae:	2300      	movs	r3, #0
 8005db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005db2:	4b81      	ldr	r3, [pc, #516]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10f      	bne.n	8005dde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60bb      	str	r3, [r7, #8]
 8005dc2:	4b7d      	ldr	r3, [pc, #500]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	4a7c      	ldr	r2, [pc, #496]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8005dce:	4b7a      	ldr	r3, [pc, #488]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	60bb      	str	r3, [r7, #8]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dde:	4b77      	ldr	r3, [pc, #476]	; (8005fbc <HAL_RCC_OscConfig+0x474>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d118      	bne.n	8005e1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dea:	4b74      	ldr	r3, [pc, #464]	; (8005fbc <HAL_RCC_OscConfig+0x474>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a73      	ldr	r2, [pc, #460]	; (8005fbc <HAL_RCC_OscConfig+0x474>)
 8005df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005df6:	f7fd f99d 	bl	8003134 <HAL_GetTick>
 8005dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dfe:	f7fd f999 	bl	8003134 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e10c      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e10:	4b6a      	ldr	r3, [pc, #424]	; (8005fbc <HAL_RCC_OscConfig+0x474>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0f0      	beq.n	8005dfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d106      	bne.n	8005e32 <HAL_RCC_OscConfig+0x2ea>
 8005e24:	4b64      	ldr	r3, [pc, #400]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	4a63      	ldr	r2, [pc, #396]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005e2a:	f043 0301 	orr.w	r3, r3, #1
 8005e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e30:	e01c      	b.n	8005e6c <HAL_RCC_OscConfig+0x324>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	2b05      	cmp	r3, #5
 8005e38:	d10c      	bne.n	8005e54 <HAL_RCC_OscConfig+0x30c>
 8005e3a:	4b5f      	ldr	r3, [pc, #380]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	4a5e      	ldr	r2, [pc, #376]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005e40:	f043 0304 	orr.w	r3, r3, #4
 8005e44:	6713      	str	r3, [r2, #112]	; 0x70
 8005e46:	4b5c      	ldr	r3, [pc, #368]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	4a5b      	ldr	r2, [pc, #364]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005e4c:	f043 0301 	orr.w	r3, r3, #1
 8005e50:	6713      	str	r3, [r2, #112]	; 0x70
 8005e52:	e00b      	b.n	8005e6c <HAL_RCC_OscConfig+0x324>
 8005e54:	4b58      	ldr	r3, [pc, #352]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	4a57      	ldr	r2, [pc, #348]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005e5a:	f023 0301 	bic.w	r3, r3, #1
 8005e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e60:	4b55      	ldr	r3, [pc, #340]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e64:	4a54      	ldr	r2, [pc, #336]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005e66:	f023 0304 	bic.w	r3, r3, #4
 8005e6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d015      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e74:	f7fd f95e 	bl	8003134 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7a:	e00a      	b.n	8005e92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e7c:	f7fd f95a 	bl	8003134 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e0cb      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e92:	4b49      	ldr	r3, [pc, #292]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0ee      	beq.n	8005e7c <HAL_RCC_OscConfig+0x334>
 8005e9e:	e014      	b.n	8005eca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ea0:	f7fd f948 	bl	8003134 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea6:	e00a      	b.n	8005ebe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ea8:	f7fd f944 	bl	8003134 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e0b5      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ebe:	4b3e      	ldr	r3, [pc, #248]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1ee      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d105      	bne.n	8005edc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ed0:	4b39      	ldr	r3, [pc, #228]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	4a38      	ldr	r2, [pc, #224]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 80a1 	beq.w	8006028 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ee6:	4b34      	ldr	r3, [pc, #208]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 030c 	and.w	r3, r3, #12
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d05c      	beq.n	8005fac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d141      	bne.n	8005f7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efa:	4b31      	ldr	r3, [pc, #196]	; (8005fc0 <HAL_RCC_OscConfig+0x478>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f00:	f7fd f918 	bl	8003134 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f08:	f7fd f914 	bl	8003134 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e087      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f1a:	4b27      	ldr	r3, [pc, #156]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1f0      	bne.n	8005f08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	69da      	ldr	r2, [r3, #28]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	019b      	lsls	r3, r3, #6
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	085b      	lsrs	r3, r3, #1
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	041b      	lsls	r3, r3, #16
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	061b      	lsls	r3, r3, #24
 8005f4a:	491b      	ldr	r1, [pc, #108]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f50:	4b1b      	ldr	r3, [pc, #108]	; (8005fc0 <HAL_RCC_OscConfig+0x478>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f56:	f7fd f8ed 	bl	8003134 <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f5e:	f7fd f8e9 	bl	8003134 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e05c      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f70:	4b11      	ldr	r3, [pc, #68]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f0      	beq.n	8005f5e <HAL_RCC_OscConfig+0x416>
 8005f7c:	e054      	b.n	8006028 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f7e:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <HAL_RCC_OscConfig+0x478>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f84:	f7fd f8d6 	bl	8003134 <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f8c:	f7fd f8d2 	bl	8003134 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e045      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9e:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <HAL_RCC_OscConfig+0x470>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f0      	bne.n	8005f8c <HAL_RCC_OscConfig+0x444>
 8005faa:	e03d      	b.n	8006028 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d107      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e038      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	40007000 	.word	0x40007000
 8005fc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fc4:	4b1b      	ldr	r3, [pc, #108]	; (8006034 <HAL_RCC_OscConfig+0x4ec>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d028      	beq.n	8006024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d121      	bne.n	8006024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d11a      	bne.n	8006024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ffa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d111      	bne.n	8006024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	3b01      	subs	r3, #1
 800600e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006010:	429a      	cmp	r2, r3
 8006012:	d107      	bne.n	8006024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006020:	429a      	cmp	r2, r3
 8006022:	d001      	beq.n	8006028 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e000      	b.n	800602a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	40023800 	.word	0x40023800

08006038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0cc      	b.n	80061e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800604c:	4b68      	ldr	r3, [pc, #416]	; (80061f0 <HAL_RCC_ClockConfig+0x1b8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d90c      	bls.n	8006074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800605a:	4b65      	ldr	r3, [pc, #404]	; (80061f0 <HAL_RCC_ClockConfig+0x1b8>)
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006062:	4b63      	ldr	r3, [pc, #396]	; (80061f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d001      	beq.n	8006074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e0b8      	b.n	80061e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d020      	beq.n	80060c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800608c:	4b59      	ldr	r3, [pc, #356]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	4a58      	ldr	r2, [pc, #352]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006092:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006096:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d005      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060a4:	4b53      	ldr	r3, [pc, #332]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	4a52      	ldr	r2, [pc, #328]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060b0:	4b50      	ldr	r3, [pc, #320]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	494d      	ldr	r1, [pc, #308]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d044      	beq.n	8006158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d107      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d6:	4b47      	ldr	r3, [pc, #284]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d119      	bne.n	8006116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e07f      	b.n	80061e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d003      	beq.n	80060f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d107      	bne.n	8006106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f6:	4b3f      	ldr	r3, [pc, #252]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d109      	bne.n	8006116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e06f      	b.n	80061e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006106:	4b3b      	ldr	r3, [pc, #236]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e067      	b.n	80061e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006116:	4b37      	ldr	r3, [pc, #220]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f023 0203 	bic.w	r2, r3, #3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	4934      	ldr	r1, [pc, #208]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006124:	4313      	orrs	r3, r2
 8006126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006128:	f7fd f804 	bl	8003134 <HAL_GetTick>
 800612c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800612e:	e00a      	b.n	8006146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006130:	f7fd f800 	bl	8003134 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	f241 3288 	movw	r2, #5000	; 0x1388
 800613e:	4293      	cmp	r3, r2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e04f      	b.n	80061e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006146:	4b2b      	ldr	r3, [pc, #172]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 020c 	and.w	r2, r3, #12
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	429a      	cmp	r2, r3
 8006156:	d1eb      	bne.n	8006130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006158:	4b25      	ldr	r3, [pc, #148]	; (80061f0 <HAL_RCC_ClockConfig+0x1b8>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d20c      	bcs.n	8006180 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006166:	4b22      	ldr	r3, [pc, #136]	; (80061f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800616e:	4b20      	ldr	r3, [pc, #128]	; (80061f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d001      	beq.n	8006180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e032      	b.n	80061e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d008      	beq.n	800619e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800618c:	4b19      	ldr	r3, [pc, #100]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	4916      	ldr	r1, [pc, #88]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 800619a:	4313      	orrs	r3, r2
 800619c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0308 	and.w	r3, r3, #8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d009      	beq.n	80061be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061aa:	4b12      	ldr	r3, [pc, #72]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	490e      	ldr	r1, [pc, #56]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061be:	f000 f821 	bl	8006204 <HAL_RCC_GetSysClockFreq>
 80061c2:	4602      	mov	r2, r0
 80061c4:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	091b      	lsrs	r3, r3, #4
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	490a      	ldr	r1, [pc, #40]	; (80061f8 <HAL_RCC_ClockConfig+0x1c0>)
 80061d0:	5ccb      	ldrb	r3, [r1, r3]
 80061d2:	fa22 f303 	lsr.w	r3, r2, r3
 80061d6:	4a09      	ldr	r2, [pc, #36]	; (80061fc <HAL_RCC_ClockConfig+0x1c4>)
 80061d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061da:	4b09      	ldr	r3, [pc, #36]	; (8006200 <HAL_RCC_ClockConfig+0x1c8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fb ff6e 	bl	80020c0 <HAL_InitTick>

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	40023c00 	.word	0x40023c00
 80061f4:	40023800 	.word	0x40023800
 80061f8:	0801cca4 	.word	0x0801cca4
 80061fc:	20000004 	.word	0x20000004
 8006200:	20000008 	.word	0x20000008

08006204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006208:	b094      	sub	sp, #80	; 0x50
 800620a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	647b      	str	r3, [r7, #68]	; 0x44
 8006210:	2300      	movs	r3, #0
 8006212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006214:	2300      	movs	r3, #0
 8006216:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800621c:	4b79      	ldr	r3, [pc, #484]	; (8006404 <HAL_RCC_GetSysClockFreq+0x200>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 030c 	and.w	r3, r3, #12
 8006224:	2b08      	cmp	r3, #8
 8006226:	d00d      	beq.n	8006244 <HAL_RCC_GetSysClockFreq+0x40>
 8006228:	2b08      	cmp	r3, #8
 800622a:	f200 80e1 	bhi.w	80063f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_RCC_GetSysClockFreq+0x34>
 8006232:	2b04      	cmp	r3, #4
 8006234:	d003      	beq.n	800623e <HAL_RCC_GetSysClockFreq+0x3a>
 8006236:	e0db      	b.n	80063f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006238:	4b73      	ldr	r3, [pc, #460]	; (8006408 <HAL_RCC_GetSysClockFreq+0x204>)
 800623a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800623c:	e0db      	b.n	80063f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800623e:	4b73      	ldr	r3, [pc, #460]	; (800640c <HAL_RCC_GetSysClockFreq+0x208>)
 8006240:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006242:	e0d8      	b.n	80063f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006244:	4b6f      	ldr	r3, [pc, #444]	; (8006404 <HAL_RCC_GetSysClockFreq+0x200>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800624c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800624e:	4b6d      	ldr	r3, [pc, #436]	; (8006404 <HAL_RCC_GetSysClockFreq+0x200>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d063      	beq.n	8006322 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800625a:	4b6a      	ldr	r3, [pc, #424]	; (8006404 <HAL_RCC_GetSysClockFreq+0x200>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	099b      	lsrs	r3, r3, #6
 8006260:	2200      	movs	r2, #0
 8006262:	63bb      	str	r3, [r7, #56]	; 0x38
 8006264:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626c:	633b      	str	r3, [r7, #48]	; 0x30
 800626e:	2300      	movs	r3, #0
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
 8006272:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006276:	4622      	mov	r2, r4
 8006278:	462b      	mov	r3, r5
 800627a:	f04f 0000 	mov.w	r0, #0
 800627e:	f04f 0100 	mov.w	r1, #0
 8006282:	0159      	lsls	r1, r3, #5
 8006284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006288:	0150      	lsls	r0, r2, #5
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4621      	mov	r1, r4
 8006290:	1a51      	subs	r1, r2, r1
 8006292:	6139      	str	r1, [r7, #16]
 8006294:	4629      	mov	r1, r5
 8006296:	eb63 0301 	sbc.w	r3, r3, r1
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062a8:	4659      	mov	r1, fp
 80062aa:	018b      	lsls	r3, r1, #6
 80062ac:	4651      	mov	r1, sl
 80062ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062b2:	4651      	mov	r1, sl
 80062b4:	018a      	lsls	r2, r1, #6
 80062b6:	4651      	mov	r1, sl
 80062b8:	ebb2 0801 	subs.w	r8, r2, r1
 80062bc:	4659      	mov	r1, fp
 80062be:	eb63 0901 	sbc.w	r9, r3, r1
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	f04f 0300 	mov.w	r3, #0
 80062ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062d6:	4690      	mov	r8, r2
 80062d8:	4699      	mov	r9, r3
 80062da:	4623      	mov	r3, r4
 80062dc:	eb18 0303 	adds.w	r3, r8, r3
 80062e0:	60bb      	str	r3, [r7, #8]
 80062e2:	462b      	mov	r3, r5
 80062e4:	eb49 0303 	adc.w	r3, r9, r3
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	f04f 0200 	mov.w	r2, #0
 80062ee:	f04f 0300 	mov.w	r3, #0
 80062f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062f6:	4629      	mov	r1, r5
 80062f8:	024b      	lsls	r3, r1, #9
 80062fa:	4621      	mov	r1, r4
 80062fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006300:	4621      	mov	r1, r4
 8006302:	024a      	lsls	r2, r1, #9
 8006304:	4610      	mov	r0, r2
 8006306:	4619      	mov	r1, r3
 8006308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800630a:	2200      	movs	r2, #0
 800630c:	62bb      	str	r3, [r7, #40]	; 0x28
 800630e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006310:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006314:	f7fa fa20 	bl	8000758 <__aeabi_uldivmod>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	4613      	mov	r3, r2
 800631e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006320:	e058      	b.n	80063d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006322:	4b38      	ldr	r3, [pc, #224]	; (8006404 <HAL_RCC_GetSysClockFreq+0x200>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	099b      	lsrs	r3, r3, #6
 8006328:	2200      	movs	r2, #0
 800632a:	4618      	mov	r0, r3
 800632c:	4611      	mov	r1, r2
 800632e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006332:	623b      	str	r3, [r7, #32]
 8006334:	2300      	movs	r3, #0
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
 8006338:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800633c:	4642      	mov	r2, r8
 800633e:	464b      	mov	r3, r9
 8006340:	f04f 0000 	mov.w	r0, #0
 8006344:	f04f 0100 	mov.w	r1, #0
 8006348:	0159      	lsls	r1, r3, #5
 800634a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800634e:	0150      	lsls	r0, r2, #5
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4641      	mov	r1, r8
 8006356:	ebb2 0a01 	subs.w	sl, r2, r1
 800635a:	4649      	mov	r1, r9
 800635c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	f04f 0300 	mov.w	r3, #0
 8006368:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800636c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006370:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006374:	ebb2 040a 	subs.w	r4, r2, sl
 8006378:	eb63 050b 	sbc.w	r5, r3, fp
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	f04f 0300 	mov.w	r3, #0
 8006384:	00eb      	lsls	r3, r5, #3
 8006386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800638a:	00e2      	lsls	r2, r4, #3
 800638c:	4614      	mov	r4, r2
 800638e:	461d      	mov	r5, r3
 8006390:	4643      	mov	r3, r8
 8006392:	18e3      	adds	r3, r4, r3
 8006394:	603b      	str	r3, [r7, #0]
 8006396:	464b      	mov	r3, r9
 8006398:	eb45 0303 	adc.w	r3, r5, r3
 800639c:	607b      	str	r3, [r7, #4]
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063aa:	4629      	mov	r1, r5
 80063ac:	028b      	lsls	r3, r1, #10
 80063ae:	4621      	mov	r1, r4
 80063b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063b4:	4621      	mov	r1, r4
 80063b6:	028a      	lsls	r2, r1, #10
 80063b8:	4610      	mov	r0, r2
 80063ba:	4619      	mov	r1, r3
 80063bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063be:	2200      	movs	r2, #0
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	61fa      	str	r2, [r7, #28]
 80063c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063c8:	f7fa f9c6 	bl	8000758 <__aeabi_uldivmod>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4613      	mov	r3, r2
 80063d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063d4:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <HAL_RCC_GetSysClockFreq+0x200>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	0c1b      	lsrs	r3, r3, #16
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	3301      	adds	r3, #1
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80063e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063ee:	e002      	b.n	80063f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <HAL_RCC_GetSysClockFreq+0x204>)
 80063f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3750      	adds	r7, #80	; 0x50
 80063fc:	46bd      	mov	sp, r7
 80063fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006402:	bf00      	nop
 8006404:	40023800 	.word	0x40023800
 8006408:	00f42400 	.word	0x00f42400
 800640c:	007a1200 	.word	0x007a1200

08006410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006414:	4b03      	ldr	r3, [pc, #12]	; (8006424 <HAL_RCC_GetHCLKFreq+0x14>)
 8006416:	681b      	ldr	r3, [r3, #0]
}
 8006418:	4618      	mov	r0, r3
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	20000004 	.word	0x20000004

08006428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800642c:	f7ff fff0 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8006430:	4602      	mov	r2, r0
 8006432:	4b05      	ldr	r3, [pc, #20]	; (8006448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	0a9b      	lsrs	r3, r3, #10
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	4903      	ldr	r1, [pc, #12]	; (800644c <HAL_RCC_GetPCLK1Freq+0x24>)
 800643e:	5ccb      	ldrb	r3, [r1, r3]
 8006440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006444:	4618      	mov	r0, r3
 8006446:	bd80      	pop	{r7, pc}
 8006448:	40023800 	.word	0x40023800
 800644c:	0801ccb4 	.word	0x0801ccb4

08006450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006454:	f7ff ffdc 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8006458:	4602      	mov	r2, r0
 800645a:	4b05      	ldr	r3, [pc, #20]	; (8006470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	0b5b      	lsrs	r3, r3, #13
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	4903      	ldr	r1, [pc, #12]	; (8006474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006466:	5ccb      	ldrb	r3, [r1, r3]
 8006468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800646c:	4618      	mov	r0, r3
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40023800 	.word	0x40023800
 8006474:	0801ccb4 	.word	0x0801ccb4

08006478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	220f      	movs	r2, #15
 8006486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006488:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 0203 	and.w	r2, r3, #3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006494:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064a0:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	08db      	lsrs	r3, r3, #3
 80064b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064ba:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <HAL_RCC_GetClockConfig+0x60>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0207 	and.w	r2, r3, #7
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	601a      	str	r2, [r3, #0]
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40023c00 	.word	0x40023c00

080064dc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e01c      	b.n	8006528 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	795b      	ldrb	r3, [r3, #5]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d105      	bne.n	8006504 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fb fd12 	bl	8001f28 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0204 	orr.w	r2, r2, #4
 8006518:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e07b      	b.n	800663a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2b00      	cmp	r3, #0
 8006548:	d108      	bne.n	800655c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006552:	d009      	beq.n	8006568 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	61da      	str	r2, [r3, #28]
 800655a:	e005      	b.n	8006568 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fb fd28 	bl	8001fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800659e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065d8:	431a      	orrs	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065e2:	431a      	orrs	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ec:	ea42 0103 	orr.w	r1, r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	0c1b      	lsrs	r3, r3, #16
 8006606:	f003 0104 	and.w	r1, r3, #4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	f003 0210 	and.w	r2, r3, #16
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69da      	ldr	r2, [r3, #28]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006628:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e041      	b.n	80066d8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d106      	bne.n	800666e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7fc fa13 	bl	8002a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2202      	movs	r2, #2
 8006672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3304      	adds	r3, #4
 800667e:	4619      	mov	r1, r3
 8006680:	4610      	mov	r0, r2
 8006682:	f000 fded 	bl	8007260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d001      	beq.n	80066f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e04e      	b.n	8006796 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a23      	ldr	r2, [pc, #140]	; (80067a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d022      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006722:	d01d      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a1f      	ldr	r2, [pc, #124]	; (80067a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d018      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a1e      	ldr	r2, [pc, #120]	; (80067ac <HAL_TIM_Base_Start_IT+0xcc>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d013      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a1c      	ldr	r2, [pc, #112]	; (80067b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00e      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1b      	ldr	r2, [pc, #108]	; (80067b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d009      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a19      	ldr	r2, [pc, #100]	; (80067b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d004      	beq.n	8006760 <HAL_TIM_Base_Start_IT+0x80>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a18      	ldr	r2, [pc, #96]	; (80067bc <HAL_TIM_Base_Start_IT+0xdc>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d111      	bne.n	8006784 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b06      	cmp	r3, #6
 8006770:	d010      	beq.n	8006794 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0201 	orr.w	r2, r2, #1
 8006780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006782:	e007      	b.n	8006794 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0201 	orr.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	40010000 	.word	0x40010000
 80067a8:	40000400 	.word	0x40000400
 80067ac:	40000800 	.word	0x40000800
 80067b0:	40000c00 	.word	0x40000c00
 80067b4:	40010400 	.word	0x40010400
 80067b8:	40014000 	.word	0x40014000
 80067bc:	40001800 	.word	0x40001800

080067c0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e041      	b.n	8006856 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fc f932 	bl	8002a50 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f000 fd2e 	bl	8007260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e041      	b.n	80068f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d106      	bne.n	800688a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7fc f89b 	bl	80029c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3304      	adds	r3, #4
 800689a:	4619      	mov	r1, r3
 800689c:	4610      	mov	r0, r2
 800689e:	f000 fcdf 	bl	8007260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e041      	b.n	8006992 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d106      	bne.n	8006928 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f839 	bl	800699a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3304      	adds	r3, #4
 8006938:	4619      	mov	r1, r3
 800693a:	4610      	mov	r0, r2
 800693c:	f000 fc90 	bl	8007260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b086      	sub	sp, #24
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e097      	b.n	8006af2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d106      	bne.n	80069dc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fb ff70 	bl	80028bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6812      	ldr	r2, [r2, #0]
 80069ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f2:	f023 0307 	bic.w	r3, r3, #7
 80069f6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3304      	adds	r3, #4
 8006a00:	4619      	mov	r1, r3
 8006a02:	4610      	mov	r0, r2
 8006a04:	f000 fc2c 	bl	8007260 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a30:	f023 0303 	bic.w	r3, r3, #3
 8006a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	021b      	lsls	r3, r3, #8
 8006a40:	4313      	orrs	r3, r2
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006a4e:	f023 030c 	bic.w	r3, r3, #12
 8006a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	011a      	lsls	r2, r3, #4
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	031b      	lsls	r3, r3, #12
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006a8c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006a94:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d122      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d11b      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f06f 0202 	mvn.w	r2, #2
 8006b26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	f003 0303 	and.w	r3, r3, #3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fb70 	bl	8007222 <HAL_TIM_IC_CaptureCallback>
 8006b42:	e005      	b.n	8006b50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fb62 	bl	800720e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fb73 	bl	8007236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	d122      	bne.n	8006baa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d11b      	bne.n	8006baa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f06f 0204 	mvn.w	r2, #4
 8006b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fb46 	bl	8007222 <HAL_TIM_IC_CaptureCallback>
 8006b96:	e005      	b.n	8006ba4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fb38 	bl	800720e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fb49 	bl	8007236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d122      	bne.n	8006bfe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d11b      	bne.n	8006bfe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f06f 0208 	mvn.w	r2, #8
 8006bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2204      	movs	r2, #4
 8006bd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	f003 0303 	and.w	r3, r3, #3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fb1c 	bl	8007222 <HAL_TIM_IC_CaptureCallback>
 8006bea:	e005      	b.n	8006bf8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fb0e 	bl	800720e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fb1f 	bl	8007236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f003 0310 	and.w	r3, r3, #16
 8006c08:	2b10      	cmp	r3, #16
 8006c0a:	d122      	bne.n	8006c52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f003 0310 	and.w	r3, r3, #16
 8006c16:	2b10      	cmp	r3, #16
 8006c18:	d11b      	bne.n	8006c52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f06f 0210 	mvn.w	r2, #16
 8006c22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2208      	movs	r2, #8
 8006c28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 faf2 	bl	8007222 <HAL_TIM_IC_CaptureCallback>
 8006c3e:	e005      	b.n	8006c4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fae4 	bl	800720e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 faf5 	bl	8007236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d10e      	bne.n	8006c7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d107      	bne.n	8006c7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f06f 0201 	mvn.w	r2, #1
 8006c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7fa ffc5 	bl	8001c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c88:	2b80      	cmp	r3, #128	; 0x80
 8006c8a:	d10e      	bne.n	8006caa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c96:	2b80      	cmp	r3, #128	; 0x80
 8006c98:	d107      	bne.n	8006caa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 ffc7 	bl	8007c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb4:	2b40      	cmp	r3, #64	; 0x40
 8006cb6:	d10e      	bne.n	8006cd6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	d107      	bne.n	8006cd6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 faba 	bl	800724a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	f003 0320 	and.w	r3, r3, #32
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	d10e      	bne.n	8006d02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f003 0320 	and.w	r3, r3, #32
 8006cee:	2b20      	cmp	r3, #32
 8006cf0:	d107      	bne.n	8006d02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f06f 0220 	mvn.w	r2, #32
 8006cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 ff91 	bl	8007c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d02:	bf00      	nop
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d101      	bne.n	8006d2a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006d26:	2302      	movs	r3, #2
 8006d28:	e048      	b.n	8006dbc <HAL_TIM_OC_ConfigChannel+0xb0>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b0c      	cmp	r3, #12
 8006d36:	d839      	bhi.n	8006dac <HAL_TIM_OC_ConfigChannel+0xa0>
 8006d38:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3e:	bf00      	nop
 8006d40:	08006d75 	.word	0x08006d75
 8006d44:	08006dad 	.word	0x08006dad
 8006d48:	08006dad 	.word	0x08006dad
 8006d4c:	08006dad 	.word	0x08006dad
 8006d50:	08006d83 	.word	0x08006d83
 8006d54:	08006dad 	.word	0x08006dad
 8006d58:	08006dad 	.word	0x08006dad
 8006d5c:	08006dad 	.word	0x08006dad
 8006d60:	08006d91 	.word	0x08006d91
 8006d64:	08006dad 	.word	0x08006dad
 8006d68:	08006dad 	.word	0x08006dad
 8006d6c:	08006dad 	.word	0x08006dad
 8006d70:	08006d9f 	.word	0x08006d9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fb10 	bl	80073a0 <TIM_OC1_SetConfig>
      break;
 8006d80:	e017      	b.n	8006db2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68b9      	ldr	r1, [r7, #8]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 fb79 	bl	8007480 <TIM_OC2_SetConfig>
      break;
 8006d8e:	e010      	b.n	8006db2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68b9      	ldr	r1, [r7, #8]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fbe8 	bl	800756c <TIM_OC3_SetConfig>
      break;
 8006d9c:	e009      	b.n	8006db2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fc55 	bl	8007654 <TIM_OC4_SetConfig>
      break;
 8006daa:	e002      	b.n	8006db2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	75fb      	strb	r3, [r7, #23]
      break;
 8006db0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e088      	b.n	8006ef4 <HAL_TIM_IC_ConfigChannel+0x130>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d11b      	bne.n	8006e28 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	6819      	ldr	r1, [r3, #0]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f000 fc7e 	bl	8007700 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699a      	ldr	r2, [r3, #24]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 020c 	bic.w	r2, r2, #12
 8006e12:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6999      	ldr	r1, [r3, #24]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	619a      	str	r2, [r3, #24]
 8006e26:	e060      	b.n	8006eea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d11c      	bne.n	8006e68 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	6819      	ldr	r1, [r3, #0]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f000 fd02 	bl	8007846 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	699a      	ldr	r2, [r3, #24]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e50:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6999      	ldr	r1, [r3, #24]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	021a      	lsls	r2, r3, #8
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	619a      	str	r2, [r3, #24]
 8006e66:	e040      	b.n	8006eea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b08      	cmp	r3, #8
 8006e6c:	d11b      	bne.n	8006ea6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	6819      	ldr	r1, [r3, #0]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f000 fd4f 	bl	8007920 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69da      	ldr	r2, [r3, #28]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 020c 	bic.w	r2, r2, #12
 8006e90:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69d9      	ldr	r1, [r3, #28]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	61da      	str	r2, [r3, #28]
 8006ea4:	e021      	b.n	8006eea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b0c      	cmp	r3, #12
 8006eaa:	d11c      	bne.n	8006ee6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	6819      	ldr	r1, [r3, #0]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f000 fd6c 	bl	8007998 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69da      	ldr	r2, [r3, #28]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ece:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69d9      	ldr	r1, [r3, #28]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	021a      	lsls	r2, r3, #8
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	61da      	str	r2, [r3, #28]
 8006ee4:	e001      	b.n	8006eea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e0ae      	b.n	8007078 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b0c      	cmp	r3, #12
 8006f26:	f200 809f 	bhi.w	8007068 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f65 	.word	0x08006f65
 8006f34:	08007069 	.word	0x08007069
 8006f38:	08007069 	.word	0x08007069
 8006f3c:	08007069 	.word	0x08007069
 8006f40:	08006fa5 	.word	0x08006fa5
 8006f44:	08007069 	.word	0x08007069
 8006f48:	08007069 	.word	0x08007069
 8006f4c:	08007069 	.word	0x08007069
 8006f50:	08006fe7 	.word	0x08006fe7
 8006f54:	08007069 	.word	0x08007069
 8006f58:	08007069 	.word	0x08007069
 8006f5c:	08007069 	.word	0x08007069
 8006f60:	08007027 	.word	0x08007027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68b9      	ldr	r1, [r7, #8]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fa18 	bl	80073a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699a      	ldr	r2, [r3, #24]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f042 0208 	orr.w	r2, r2, #8
 8006f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699a      	ldr	r2, [r3, #24]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0204 	bic.w	r2, r2, #4
 8006f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6999      	ldr	r1, [r3, #24]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	691a      	ldr	r2, [r3, #16]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	619a      	str	r2, [r3, #24]
      break;
 8006fa2:	e064      	b.n	800706e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fa68 	bl	8007480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699a      	ldr	r2, [r3, #24]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6999      	ldr	r1, [r3, #24]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	021a      	lsls	r2, r3, #8
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	619a      	str	r2, [r3, #24]
      break;
 8006fe4:	e043      	b.n	800706e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68b9      	ldr	r1, [r7, #8]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fabd 	bl	800756c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f042 0208 	orr.w	r2, r2, #8
 8007000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69da      	ldr	r2, [r3, #28]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0204 	bic.w	r2, r2, #4
 8007010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	69d9      	ldr	r1, [r3, #28]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	691a      	ldr	r2, [r3, #16]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	61da      	str	r2, [r3, #28]
      break;
 8007024:	e023      	b.n	800706e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fb11 	bl	8007654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69da      	ldr	r2, [r3, #28]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69d9      	ldr	r1, [r3, #28]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	021a      	lsls	r2, r3, #8
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	61da      	str	r2, [r3, #28]
      break;
 8007066:	e002      	b.n	800706e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	75fb      	strb	r3, [r7, #23]
      break;
 800706c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007076:	7dfb      	ldrb	r3, [r7, #23]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_TIM_ConfigClockSource+0x1c>
 8007098:	2302      	movs	r3, #2
 800709a:	e0b4      	b.n	8007206 <HAL_TIM_ConfigClockSource+0x186>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d4:	d03e      	beq.n	8007154 <HAL_TIM_ConfigClockSource+0xd4>
 80070d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070da:	f200 8087 	bhi.w	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 80070de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e2:	f000 8086 	beq.w	80071f2 <HAL_TIM_ConfigClockSource+0x172>
 80070e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ea:	d87f      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 80070ec:	2b70      	cmp	r3, #112	; 0x70
 80070ee:	d01a      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0xa6>
 80070f0:	2b70      	cmp	r3, #112	; 0x70
 80070f2:	d87b      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 80070f4:	2b60      	cmp	r3, #96	; 0x60
 80070f6:	d050      	beq.n	800719a <HAL_TIM_ConfigClockSource+0x11a>
 80070f8:	2b60      	cmp	r3, #96	; 0x60
 80070fa:	d877      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 80070fc:	2b50      	cmp	r3, #80	; 0x50
 80070fe:	d03c      	beq.n	800717a <HAL_TIM_ConfigClockSource+0xfa>
 8007100:	2b50      	cmp	r3, #80	; 0x50
 8007102:	d873      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 8007104:	2b40      	cmp	r3, #64	; 0x40
 8007106:	d058      	beq.n	80071ba <HAL_TIM_ConfigClockSource+0x13a>
 8007108:	2b40      	cmp	r3, #64	; 0x40
 800710a:	d86f      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 800710c:	2b30      	cmp	r3, #48	; 0x30
 800710e:	d064      	beq.n	80071da <HAL_TIM_ConfigClockSource+0x15a>
 8007110:	2b30      	cmp	r3, #48	; 0x30
 8007112:	d86b      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 8007114:	2b20      	cmp	r3, #32
 8007116:	d060      	beq.n	80071da <HAL_TIM_ConfigClockSource+0x15a>
 8007118:	2b20      	cmp	r3, #32
 800711a:	d867      	bhi.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d05c      	beq.n	80071da <HAL_TIM_ConfigClockSource+0x15a>
 8007120:	2b10      	cmp	r3, #16
 8007122:	d05a      	beq.n	80071da <HAL_TIM_ConfigClockSource+0x15a>
 8007124:	e062      	b.n	80071ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	6899      	ldr	r1, [r3, #8]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f000 fc87 	bl	8007a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007148:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	609a      	str	r2, [r3, #8]
      break;
 8007152:	e04f      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	6899      	ldr	r1, [r3, #8]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f000 fc70 	bl	8007a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007176:	609a      	str	r2, [r3, #8]
      break;
 8007178:	e03c      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	6859      	ldr	r1, [r3, #4]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	461a      	mov	r2, r3
 8007188:	f000 fb2e 	bl	80077e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2150      	movs	r1, #80	; 0x50
 8007192:	4618      	mov	r0, r3
 8007194:	f000 fc3d 	bl	8007a12 <TIM_ITRx_SetConfig>
      break;
 8007198:	e02c      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6818      	ldr	r0, [r3, #0]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	6859      	ldr	r1, [r3, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	461a      	mov	r2, r3
 80071a8:	f000 fb8a 	bl	80078c0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2160      	movs	r1, #96	; 0x60
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fc2d 	bl	8007a12 <TIM_ITRx_SetConfig>
      break;
 80071b8:	e01c      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	6859      	ldr	r1, [r3, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	461a      	mov	r2, r3
 80071c8:	f000 fb0e 	bl	80077e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2140      	movs	r1, #64	; 0x40
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 fc1d 	bl	8007a12 <TIM_ITRx_SetConfig>
      break;
 80071d8:	e00c      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4619      	mov	r1, r3
 80071e4:	4610      	mov	r0, r2
 80071e6:	f000 fc14 	bl	8007a12 <TIM_ITRx_SetConfig>
      break;
 80071ea:	e003      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]
      break;
 80071f0:	e000      	b.n	80071f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80071f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007222:	b480      	push	{r7}
 8007224:	b083      	sub	sp, #12
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800723e:	bf00      	nop
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a40      	ldr	r2, [pc, #256]	; (8007374 <TIM_Base_SetConfig+0x114>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d013      	beq.n	80072a0 <TIM_Base_SetConfig+0x40>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727e:	d00f      	beq.n	80072a0 <TIM_Base_SetConfig+0x40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a3d      	ldr	r2, [pc, #244]	; (8007378 <TIM_Base_SetConfig+0x118>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00b      	beq.n	80072a0 <TIM_Base_SetConfig+0x40>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a3c      	ldr	r2, [pc, #240]	; (800737c <TIM_Base_SetConfig+0x11c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d007      	beq.n	80072a0 <TIM_Base_SetConfig+0x40>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a3b      	ldr	r2, [pc, #236]	; (8007380 <TIM_Base_SetConfig+0x120>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d003      	beq.n	80072a0 <TIM_Base_SetConfig+0x40>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a3a      	ldr	r2, [pc, #232]	; (8007384 <TIM_Base_SetConfig+0x124>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d108      	bne.n	80072b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a2f      	ldr	r2, [pc, #188]	; (8007374 <TIM_Base_SetConfig+0x114>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d02b      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c0:	d027      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a2c      	ldr	r2, [pc, #176]	; (8007378 <TIM_Base_SetConfig+0x118>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d023      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a2b      	ldr	r2, [pc, #172]	; (800737c <TIM_Base_SetConfig+0x11c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d01f      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a2a      	ldr	r2, [pc, #168]	; (8007380 <TIM_Base_SetConfig+0x120>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d01b      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a29      	ldr	r2, [pc, #164]	; (8007384 <TIM_Base_SetConfig+0x124>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d017      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a28      	ldr	r2, [pc, #160]	; (8007388 <TIM_Base_SetConfig+0x128>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d013      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a27      	ldr	r2, [pc, #156]	; (800738c <TIM_Base_SetConfig+0x12c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d00f      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a26      	ldr	r2, [pc, #152]	; (8007390 <TIM_Base_SetConfig+0x130>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d00b      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a25      	ldr	r2, [pc, #148]	; (8007394 <TIM_Base_SetConfig+0x134>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d007      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a24      	ldr	r2, [pc, #144]	; (8007398 <TIM_Base_SetConfig+0x138>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d003      	beq.n	8007312 <TIM_Base_SetConfig+0xb2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a23      	ldr	r2, [pc, #140]	; (800739c <TIM_Base_SetConfig+0x13c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d108      	bne.n	8007324 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <TIM_Base_SetConfig+0x114>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_Base_SetConfig+0xf8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a0c      	ldr	r2, [pc, #48]	; (8007384 <TIM_Base_SetConfig+0x124>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d103      	bne.n	8007360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	615a      	str	r2, [r3, #20]
}
 8007366:	bf00      	nop
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40010000 	.word	0x40010000
 8007378:	40000400 	.word	0x40000400
 800737c:	40000800 	.word	0x40000800
 8007380:	40000c00 	.word	0x40000c00
 8007384:	40010400 	.word	0x40010400
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800
 8007394:	40001800 	.word	0x40001800
 8007398:	40001c00 	.word	0x40001c00
 800739c:	40002000 	.word	0x40002000

080073a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	f023 0201 	bic.w	r2, r3, #1
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0303 	bic.w	r3, r3, #3
 80073d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f023 0302 	bic.w	r3, r3, #2
 80073e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a20      	ldr	r2, [pc, #128]	; (8007478 <TIM_OC1_SetConfig+0xd8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d003      	beq.n	8007404 <TIM_OC1_SetConfig+0x64>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a1f      	ldr	r2, [pc, #124]	; (800747c <TIM_OC1_SetConfig+0xdc>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d10c      	bne.n	800741e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f023 0308 	bic.w	r3, r3, #8
 800740a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f023 0304 	bic.w	r3, r3, #4
 800741c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a15      	ldr	r2, [pc, #84]	; (8007478 <TIM_OC1_SetConfig+0xd8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d003      	beq.n	800742e <TIM_OC1_SetConfig+0x8e>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a14      	ldr	r2, [pc, #80]	; (800747c <TIM_OC1_SetConfig+0xdc>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d111      	bne.n	8007452 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800743c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	4313      	orrs	r3, r2
 8007450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	621a      	str	r2, [r3, #32]
}
 800746c:	bf00      	nop
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	40010000 	.word	0x40010000
 800747c:	40010400 	.word	0x40010400

08007480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	f023 0210 	bic.w	r2, r3, #16
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f023 0320 	bic.w	r3, r3, #32
 80074ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a22      	ldr	r2, [pc, #136]	; (8007564 <TIM_OC2_SetConfig+0xe4>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d003      	beq.n	80074e8 <TIM_OC2_SetConfig+0x68>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a21      	ldr	r2, [pc, #132]	; (8007568 <TIM_OC2_SetConfig+0xe8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d10d      	bne.n	8007504 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	011b      	lsls	r3, r3, #4
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a17      	ldr	r2, [pc, #92]	; (8007564 <TIM_OC2_SetConfig+0xe4>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d003      	beq.n	8007514 <TIM_OC2_SetConfig+0x94>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a16      	ldr	r2, [pc, #88]	; (8007568 <TIM_OC2_SetConfig+0xe8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d113      	bne.n	800753c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800751a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007522:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	4313      	orrs	r3, r2
 800753a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	40010000 	.word	0x40010000
 8007568:	40010400 	.word	0x40010400

0800756c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0303 	bic.w	r3, r3, #3
 80075a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	4313      	orrs	r3, r2
 80075c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a21      	ldr	r2, [pc, #132]	; (800764c <TIM_OC3_SetConfig+0xe0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d003      	beq.n	80075d2 <TIM_OC3_SetConfig+0x66>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a20      	ldr	r2, [pc, #128]	; (8007650 <TIM_OC3_SetConfig+0xe4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d10d      	bne.n	80075ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	021b      	lsls	r3, r3, #8
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a16      	ldr	r2, [pc, #88]	; (800764c <TIM_OC3_SetConfig+0xe0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d003      	beq.n	80075fe <TIM_OC3_SetConfig+0x92>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a15      	ldr	r2, [pc, #84]	; (8007650 <TIM_OC3_SetConfig+0xe4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d113      	bne.n	8007626 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800760c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4313      	orrs	r3, r2
 8007624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	621a      	str	r2, [r3, #32]
}
 8007640:	bf00      	nop
 8007642:	371c      	adds	r7, #28
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	40010000 	.word	0x40010000
 8007650:	40010400 	.word	0x40010400

08007654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800768a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	021b      	lsls	r3, r3, #8
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800769e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	031b      	lsls	r3, r3, #12
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a12      	ldr	r2, [pc, #72]	; (80076f8 <TIM_OC4_SetConfig+0xa4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d003      	beq.n	80076bc <TIM_OC4_SetConfig+0x68>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a11      	ldr	r2, [pc, #68]	; (80076fc <TIM_OC4_SetConfig+0xa8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d109      	bne.n	80076d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	019b      	lsls	r3, r3, #6
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	621a      	str	r2, [r3, #32]
}
 80076ea:	bf00      	nop
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40010000 	.word	0x40010000
 80076fc:	40010400 	.word	0x40010400

08007700 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f023 0201 	bic.w	r2, r3, #1
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4a28      	ldr	r2, [pc, #160]	; (80077cc <TIM_TI1_SetConfig+0xcc>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01b      	beq.n	8007766 <TIM_TI1_SetConfig+0x66>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007734:	d017      	beq.n	8007766 <TIM_TI1_SetConfig+0x66>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4a25      	ldr	r2, [pc, #148]	; (80077d0 <TIM_TI1_SetConfig+0xd0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d013      	beq.n	8007766 <TIM_TI1_SetConfig+0x66>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4a24      	ldr	r2, [pc, #144]	; (80077d4 <TIM_TI1_SetConfig+0xd4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00f      	beq.n	8007766 <TIM_TI1_SetConfig+0x66>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4a23      	ldr	r2, [pc, #140]	; (80077d8 <TIM_TI1_SetConfig+0xd8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00b      	beq.n	8007766 <TIM_TI1_SetConfig+0x66>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4a22      	ldr	r2, [pc, #136]	; (80077dc <TIM_TI1_SetConfig+0xdc>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d007      	beq.n	8007766 <TIM_TI1_SetConfig+0x66>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	4a21      	ldr	r2, [pc, #132]	; (80077e0 <TIM_TI1_SetConfig+0xe0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d003      	beq.n	8007766 <TIM_TI1_SetConfig+0x66>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4a20      	ldr	r2, [pc, #128]	; (80077e4 <TIM_TI1_SetConfig+0xe4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d101      	bne.n	800776a <TIM_TI1_SetConfig+0x6a>
 8007766:	2301      	movs	r3, #1
 8007768:	e000      	b.n	800776c <TIM_TI1_SetConfig+0x6c>
 800776a:	2300      	movs	r3, #0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d008      	beq.n	8007782 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4313      	orrs	r3, r2
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	e003      	b.n	800778a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f043 0301 	orr.w	r3, r3, #1
 8007788:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007790:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	011b      	lsls	r3, r3, #4
 8007796:	b2db      	uxtb	r3, r3
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f023 030a 	bic.w	r3, r3, #10
 80077a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f003 030a 	and.w	r3, r3, #10
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	621a      	str	r2, [r3, #32]
}
 80077be:	bf00      	nop
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40010000 	.word	0x40010000
 80077d0:	40000400 	.word	0x40000400
 80077d4:	40000800 	.word	0x40000800
 80077d8:	40000c00 	.word	0x40000c00
 80077dc:	40010400 	.word	0x40010400
 80077e0:	40014000 	.word	0x40014000
 80077e4:	40001800 	.word	0x40001800

080077e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	f023 0201 	bic.w	r2, r3, #1
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4313      	orrs	r3, r2
 800781c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f023 030a 	bic.w	r3, r3, #10
 8007824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007846:	b480      	push	{r7}
 8007848:	b087      	sub	sp, #28
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	607a      	str	r2, [r7, #4]
 8007852:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	f023 0210 	bic.w	r2, r3, #16
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007872:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	031b      	lsls	r3, r3, #12
 800788a:	b29b      	uxth	r3, r3
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	4313      	orrs	r3, r2
 8007890:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007898:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	621a      	str	r2, [r3, #32]
}
 80078b4:	bf00      	nop
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	f023 0210 	bic.w	r2, r3, #16
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	031b      	lsls	r3, r3, #12
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	011b      	lsls	r3, r3, #4
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	4313      	orrs	r3, r2
 8007906:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	621a      	str	r2, [r3, #32]
}
 8007914:	bf00      	nop
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f023 0303 	bic.w	r3, r3, #3
 800794c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800795c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	b2db      	uxtb	r3, r3
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	4313      	orrs	r3, r2
 8007968:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007970:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	4313      	orrs	r3, r2
 800797e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	621a      	str	r2, [r3, #32]
}
 800798c:	bf00      	nop
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	031b      	lsls	r3, r3, #12
 80079dc:	b29b      	uxth	r3, r3
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80079ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	031b      	lsls	r3, r3, #12
 80079f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	621a      	str	r2, [r3, #32]
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b085      	sub	sp, #20
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f043 0307 	orr.w	r3, r3, #7
 8007a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	609a      	str	r2, [r3, #8]
}
 8007a3c:	bf00      	nop
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	021a      	lsls	r2, r3, #8
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	609a      	str	r2, [r3, #8]
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d101      	bne.n	8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	e05a      	b.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a21      	ldr	r2, [pc, #132]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d022      	beq.n	8007b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aec:	d01d      	beq.n	8007b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a1d      	ldr	r2, [pc, #116]	; (8007b68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d018      	beq.n	8007b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a1b      	ldr	r2, [pc, #108]	; (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a1a      	ldr	r2, [pc, #104]	; (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00e      	beq.n	8007b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a18      	ldr	r2, [pc, #96]	; (8007b74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a17      	ldr	r2, [pc, #92]	; (8007b78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a15      	ldr	r2, [pc, #84]	; (8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d10c      	bne.n	8007b44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	40010000 	.word	0x40010000
 8007b68:	40000400 	.word	0x40000400
 8007b6c:	40000800 	.word	0x40000800
 8007b70:	40000c00 	.word	0x40000c00
 8007b74:	40010400 	.word	0x40010400
 8007b78:	40014000 	.word	0x40014000
 8007b7c:	40001800 	.word	0x40001800

08007b80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d101      	bne.n	8007b9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e03d      	b.n	8007c18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e03f      	b.n	8007cde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d106      	bne.n	8007c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7fb f846 	bl	8002d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2224      	movs	r2, #36	; 0x24
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 ffd7 	bl	8008c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	691a      	ldr	r2, [r3, #16]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	695a      	ldr	r2, [r3, #20]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08c      	sub	sp, #48	; 0x30
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d165      	bne.n	8007dce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <HAL_UART_Transmit_DMA+0x26>
 8007d08:	88fb      	ldrh	r3, [r7, #6]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e05e      	b.n	8007dd0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_UART_Transmit_DMA+0x38>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e057      	b.n	8007dd0 <HAL_UART_Transmit_DMA+0xe8>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	88fa      	ldrh	r2, [r7, #6]
 8007d32:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	88fa      	ldrh	r2, [r7, #6]
 8007d38:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2221      	movs	r2, #33	; 0x21
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4c:	4a22      	ldr	r2, [pc, #136]	; (8007dd8 <HAL_UART_Transmit_DMA+0xf0>)
 8007d4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d54:	4a21      	ldr	r2, [pc, #132]	; (8007ddc <HAL_UART_Transmit_DMA+0xf4>)
 8007d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5c:	4a20      	ldr	r2, [pc, #128]	; (8007de0 <HAL_UART_Transmit_DMA+0xf8>)
 8007d5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d64:	2200      	movs	r2, #0
 8007d66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007d68:	f107 0308 	add.w	r3, r7, #8
 8007d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	88fb      	ldrh	r3, [r7, #6]
 8007d80:	f7fb fe16 	bl	80039b0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d8c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3314      	adds	r3, #20
 8007d9c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	617b      	str	r3, [r7, #20]
   return(result);
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3314      	adds	r3, #20
 8007db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007db6:	627a      	str	r2, [r7, #36]	; 0x24
 8007db8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6a39      	ldr	r1, [r7, #32]
 8007dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e5      	bne.n	8007d96 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e000      	b.n	8007dd0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007dce:	2302      	movs	r3, #2
  }
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3730      	adds	r7, #48	; 0x30
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	080084dd 	.word	0x080084dd
 8007ddc:	08008577 	.word	0x08008577
 8007de0:	080086ef 	.word	0x080086ef

08007de4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	4613      	mov	r3, r2
 8007df0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	d11d      	bne.n	8007e3a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <HAL_UART_Receive_DMA+0x26>
 8007e04:	88fb      	ldrh	r3, [r7, #6]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e016      	b.n	8007e3c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <HAL_UART_Receive_DMA+0x38>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e00f      	b.n	8007e3c <HAL_UART_Receive_DMA+0x58>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e2a:	88fb      	ldrh	r3, [r7, #6]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	68b9      	ldr	r1, [r7, #8]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 fca7 	bl	8008784 <UART_Start_Receive_DMA>
 8007e36:	4603      	mov	r3, r0
 8007e38:	e000      	b.n	8007e3c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e3a:	2302      	movs	r3, #2
  }
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b090      	sub	sp, #64	; 0x40
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5a:	2b80      	cmp	r3, #128	; 0x80
 8007e5c:	bf0c      	ite	eq
 8007e5e:	2301      	moveq	r3, #1
 8007e60:	2300      	movne	r3, #0
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b21      	cmp	r3, #33	; 0x21
 8007e70:	d128      	bne.n	8007ec4 <HAL_UART_DMAStop+0x80>
 8007e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d025      	beq.n	8007ec4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3314      	adds	r3, #20
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	623b      	str	r3, [r7, #32]
   return(result);
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3314      	adds	r3, #20
 8007e96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e98:	633a      	str	r2, [r7, #48]	; 0x30
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e5      	bne.n	8007e78 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d004      	beq.n	8007ebe <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fb fdd1 	bl	8003a60 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fcfe 	bl	80088c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ece:	2b40      	cmp	r3, #64	; 0x40
 8007ed0:	bf0c      	ite	eq
 8007ed2:	2301      	moveq	r3, #1
 8007ed4:	2300      	movne	r3, #0
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b22      	cmp	r3, #34	; 0x22
 8007ee4:	d128      	bne.n	8007f38 <HAL_UART_DMAStop+0xf4>
 8007ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d025      	beq.n	8007f38 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3314      	adds	r3, #20
 8007ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f02:	637b      	str	r3, [r7, #52]	; 0x34
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3314      	adds	r3, #20
 8007f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f0c:	61fa      	str	r2, [r7, #28]
 8007f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	69b9      	ldr	r1, [r7, #24]
 8007f12:	69fa      	ldr	r2, [r7, #28]
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	617b      	str	r3, [r7, #20]
   return(result);
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e5      	bne.n	8007eec <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d004      	beq.n	8007f32 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fb fd97 	bl	8003a60 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fcec 	bl	8008910 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3740      	adds	r7, #64	; 0x40
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
	...

08007f44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b0ba      	sub	sp, #232	; 0xe8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10f      	bne.n	8007faa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f8e:	f003 0320 	and.w	r3, r3, #32
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d009      	beq.n	8007faa <HAL_UART_IRQHandler+0x66>
 8007f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fd93 	bl	8008ace <UART_Receive_IT>
      return;
 8007fa8:	e256      	b.n	8008458 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 80de 	beq.w	8008170 <HAL_UART_IRQHandler+0x22c>
 8007fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d106      	bne.n	8007fce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 80d1 	beq.w	8008170 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00b      	beq.n	8007ff2 <HAL_UART_IRQHandler+0xae>
 8007fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d005      	beq.n	8007ff2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	f043 0201 	orr.w	r2, r3, #1
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff6:	f003 0304 	and.w	r3, r3, #4
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00b      	beq.n	8008016 <HAL_UART_IRQHandler+0xd2>
 8007ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d005      	beq.n	8008016 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800e:	f043 0202 	orr.w	r2, r3, #2
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00b      	beq.n	800803a <HAL_UART_IRQHandler+0xf6>
 8008022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	f043 0204 	orr.w	r2, r3, #4
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800803a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800803e:	f003 0308 	and.w	r3, r3, #8
 8008042:	2b00      	cmp	r3, #0
 8008044:	d011      	beq.n	800806a <HAL_UART_IRQHandler+0x126>
 8008046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800804a:	f003 0320 	and.w	r3, r3, #32
 800804e:	2b00      	cmp	r3, #0
 8008050:	d105      	bne.n	800805e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d005      	beq.n	800806a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	f043 0208 	orr.w	r2, r3, #8
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 81ed 	beq.w	800844e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008078:	f003 0320 	and.w	r3, r3, #32
 800807c:	2b00      	cmp	r3, #0
 800807e:	d008      	beq.n	8008092 <HAL_UART_IRQHandler+0x14e>
 8008080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008084:	f003 0320 	and.w	r3, r3, #32
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fd1e 	bl	8008ace <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809c:	2b40      	cmp	r3, #64	; 0x40
 800809e:	bf0c      	ite	eq
 80080a0:	2301      	moveq	r3, #1
 80080a2:	2300      	movne	r3, #0
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	f003 0308 	and.w	r3, r3, #8
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d103      	bne.n	80080be <HAL_UART_IRQHandler+0x17a>
 80080b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d04f      	beq.n	800815e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fc26 	bl	8008910 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ce:	2b40      	cmp	r3, #64	; 0x40
 80080d0:	d141      	bne.n	8008156 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3314      	adds	r3, #20
 80080d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3314      	adds	r3, #20
 80080fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008106:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800810a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800810e:	e841 2300 	strex	r3, r2, [r1]
 8008112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1d9      	bne.n	80080d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008122:	2b00      	cmp	r3, #0
 8008124:	d013      	beq.n	800814e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	4a7d      	ldr	r2, [pc, #500]	; (8008320 <HAL_UART_IRQHandler+0x3dc>)
 800812c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	4618      	mov	r0, r3
 8008134:	f7fb fd04 	bl	8003b40 <HAL_DMA_Abort_IT>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d016      	beq.n	800816c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008148:	4610      	mov	r0, r2
 800814a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800814c:	e00e      	b.n	800816c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f9ae 	bl	80084b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008154:	e00a      	b.n	800816c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f9aa 	bl	80084b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800815c:	e006      	b.n	800816c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f9a6 	bl	80084b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800816a:	e170      	b.n	800844e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800816c:	bf00      	nop
    return;
 800816e:	e16e      	b.n	800844e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008174:	2b01      	cmp	r3, #1
 8008176:	f040 814a 	bne.w	800840e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800817a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817e:	f003 0310 	and.w	r3, r3, #16
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 8143 	beq.w	800840e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818c:	f003 0310 	and.w	r3, r3, #16
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 813c 	beq.w	800840e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008196:	2300      	movs	r3, #0
 8008198:	60bb      	str	r3, [r7, #8]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	60bb      	str	r3, [r7, #8]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	60bb      	str	r3, [r7, #8]
 80081aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b6:	2b40      	cmp	r3, #64	; 0x40
 80081b8:	f040 80b4 	bne.w	8008324 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 8140 	beq.w	8008452 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081da:	429a      	cmp	r2, r3
 80081dc:	f080 8139 	bcs.w	8008452 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081f2:	f000 8088 	beq.w	8008306 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	330c      	adds	r3, #12
 80081fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008200:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800820c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	330c      	adds	r3, #12
 800821e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008222:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800822e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800823a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1d9      	bne.n	80081f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3314      	adds	r3, #20
 8008248:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3314      	adds	r3, #20
 8008262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008266:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800826a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800826e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e1      	bne.n	8008242 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3314      	adds	r3, #20
 8008284:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800828e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3314      	adds	r3, #20
 800829e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082aa:	e841 2300 	strex	r3, r2, [r1]
 80082ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e3      	bne.n	800827e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	330c      	adds	r3, #12
 80082ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ce:	e853 3f00 	ldrex	r3, [r3]
 80082d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082d6:	f023 0310 	bic.w	r3, r3, #16
 80082da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	330c      	adds	r3, #12
 80082e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80082e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80082ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e3      	bne.n	80082c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	4618      	mov	r0, r3
 8008302:	f7fb fbad 	bl	8003a60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800830e:	b29b      	uxth	r3, r3
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	b29b      	uxth	r3, r3
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f8d4 	bl	80084c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800831c:	e099      	b.n	8008452 <HAL_UART_IRQHandler+0x50e>
 800831e:	bf00      	nop
 8008320:	080089d7 	.word	0x080089d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800832c:	b29b      	uxth	r3, r3
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008338:	b29b      	uxth	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 808b 	beq.w	8008456 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 8086 	beq.w	8008456 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	330c      	adds	r3, #12
 8008350:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	e853 3f00 	ldrex	r3, [r3]
 8008358:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800835a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008360:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	330c      	adds	r3, #12
 800836a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800836e:	647a      	str	r2, [r7, #68]	; 0x44
 8008370:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008372:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008374:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008376:	e841 2300 	strex	r3, r2, [r1]
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800837c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1e3      	bne.n	800834a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3314      	adds	r3, #20
 8008388:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	623b      	str	r3, [r7, #32]
   return(result);
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	f023 0301 	bic.w	r3, r3, #1
 8008398:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3314      	adds	r3, #20
 80083a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083a6:	633a      	str	r2, [r7, #48]	; 0x30
 80083a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e3      	bne.n	8008382 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	330c      	adds	r3, #12
 80083ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	e853 3f00 	ldrex	r3, [r3]
 80083d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 0310 	bic.w	r3, r3, #16
 80083de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	330c      	adds	r3, #12
 80083e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80083ec:	61fa      	str	r2, [r7, #28]
 80083ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	69b9      	ldr	r1, [r7, #24]
 80083f2:	69fa      	ldr	r2, [r7, #28]
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	617b      	str	r3, [r7, #20]
   return(result);
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e3      	bne.n	80083c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f85c 	bl	80084c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800840c:	e023      	b.n	8008456 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800840e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008416:	2b00      	cmp	r3, #0
 8008418:	d009      	beq.n	800842e <HAL_UART_IRQHandler+0x4ea>
 800841a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800841e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fae9 	bl	80089fe <UART_Transmit_IT>
    return;
 800842c:	e014      	b.n	8008458 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800842e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00e      	beq.n	8008458 <HAL_UART_IRQHandler+0x514>
 800843a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b00      	cmp	r3, #0
 8008444:	d008      	beq.n	8008458 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fb29 	bl	8008a9e <UART_EndTransmit_IT>
    return;
 800844c:	e004      	b.n	8008458 <HAL_UART_IRQHandler+0x514>
    return;
 800844e:	bf00      	nop
 8008450:	e002      	b.n	8008458 <HAL_UART_IRQHandler+0x514>
      return;
 8008452:	bf00      	nop
 8008454:	e000      	b.n	8008458 <HAL_UART_IRQHandler+0x514>
      return;
 8008456:	bf00      	nop
  }
}
 8008458:	37e8      	adds	r7, #232	; 0xe8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop

08008460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b090      	sub	sp, #64	; 0x40
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d137      	bne.n	8008568 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80084f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fa:	2200      	movs	r2, #0
 80084fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3314      	adds	r3, #20
 8008504:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	e853 3f00 	ldrex	r3, [r3]
 800850c:	623b      	str	r3, [r7, #32]
   return(result);
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008514:	63bb      	str	r3, [r7, #56]	; 0x38
 8008516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3314      	adds	r3, #20
 800851c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800851e:	633a      	str	r2, [r7, #48]	; 0x30
 8008520:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e5      	bne.n	80084fe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	330c      	adds	r3, #12
 8008538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	60fb      	str	r3, [r7, #12]
   return(result);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008548:	637b      	str	r3, [r7, #52]	; 0x34
 800854a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	330c      	adds	r3, #12
 8008550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008552:	61fa      	str	r2, [r7, #28]
 8008554:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	69b9      	ldr	r1, [r7, #24]
 8008558:	69fa      	ldr	r2, [r7, #28]
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	617b      	str	r3, [r7, #20]
   return(result);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e5      	bne.n	8008532 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008566:	e002      	b.n	800856e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008568:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800856a:	f7ff ff79 	bl	8008460 <HAL_UART_TxCpltCallback>
}
 800856e:	bf00      	nop
 8008570:	3740      	adds	r7, #64	; 0x40
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7ff ff75 	bl	8008474 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800858a:	bf00      	nop
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b09c      	sub	sp, #112	; 0x70
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d172      	bne.n	8008694 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80085ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b0:	2200      	movs	r2, #0
 80085b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	330c      	adds	r3, #12
 80085ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085be:	e853 3f00 	ldrex	r3, [r3]
 80085c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80085cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	330c      	adds	r3, #12
 80085d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80085d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085dc:	e841 2300 	strex	r3, r2, [r1]
 80085e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e5      	bne.n	80085b4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3314      	adds	r3, #20
 80085ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fa:	f023 0301 	bic.w	r3, r3, #1
 80085fe:	667b      	str	r3, [r7, #100]	; 0x64
 8008600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3314      	adds	r3, #20
 8008606:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008608:	647a      	str	r2, [r7, #68]	; 0x44
 800860a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800860e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e5      	bne.n	80085e8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800861c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3314      	adds	r3, #20
 8008622:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	623b      	str	r3, [r7, #32]
   return(result);
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008632:	663b      	str	r3, [r7, #96]	; 0x60
 8008634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3314      	adds	r3, #20
 800863a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800863c:	633a      	str	r2, [r7, #48]	; 0x30
 800863e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008644:	e841 2300 	strex	r3, r2, [r1]
 8008648:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e5      	bne.n	800861c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008652:	2220      	movs	r2, #32
 8008654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865c:	2b01      	cmp	r3, #1
 800865e:	d119      	bne.n	8008694 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	330c      	adds	r3, #12
 8008666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f023 0310 	bic.w	r3, r3, #16
 8008676:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	330c      	adds	r3, #12
 800867e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008680:	61fa      	str	r2, [r7, #28]
 8008682:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008684:	69b9      	ldr	r1, [r7, #24]
 8008686:	69fa      	ldr	r2, [r7, #28]
 8008688:	e841 2300 	strex	r3, r2, [r1]
 800868c:	617b      	str	r3, [r7, #20]
   return(result);
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1e5      	bne.n	8008660 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008698:	2b01      	cmp	r3, #1
 800869a:	d106      	bne.n	80086aa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800869c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086a0:	4619      	mov	r1, r3
 80086a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086a4:	f7ff ff0e 	bl	80084c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086a8:	e002      	b.n	80086b0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80086aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086ac:	f7ff feec 	bl	8008488 <HAL_UART_RxCpltCallback>
}
 80086b0:	bf00      	nop
 80086b2:	3770      	adds	r7, #112	; 0x70
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d108      	bne.n	80086e0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086d2:	085b      	lsrs	r3, r3, #1
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	4619      	mov	r1, r3
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f7ff fef3 	bl	80084c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086de:	e002      	b.n	80086e6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f7ff fedb 	bl	800849c <HAL_UART_RxHalfCpltCallback>
}
 80086e6:	bf00      	nop
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870a:	2b80      	cmp	r3, #128	; 0x80
 800870c:	bf0c      	ite	eq
 800870e:	2301      	moveq	r3, #1
 8008710:	2300      	movne	r3, #0
 8008712:	b2db      	uxtb	r3, r3
 8008714:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b21      	cmp	r3, #33	; 0x21
 8008720:	d108      	bne.n	8008734 <UART_DMAError+0x46>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d005      	beq.n	8008734 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2200      	movs	r2, #0
 800872c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800872e:	68b8      	ldr	r0, [r7, #8]
 8008730:	f000 f8c6 	bl	80088c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800873e:	2b40      	cmp	r3, #64	; 0x40
 8008740:	bf0c      	ite	eq
 8008742:	2301      	moveq	r3, #1
 8008744:	2300      	movne	r3, #0
 8008746:	b2db      	uxtb	r3, r3
 8008748:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b22      	cmp	r3, #34	; 0x22
 8008754:	d108      	bne.n	8008768 <UART_DMAError+0x7a>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d005      	beq.n	8008768 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2200      	movs	r2, #0
 8008760:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008762:	68b8      	ldr	r0, [r7, #8]
 8008764:	f000 f8d4 	bl	8008910 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	f043 0210 	orr.w	r2, r3, #16
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008774:	68b8      	ldr	r0, [r7, #8]
 8008776:	f7ff fe9b 	bl	80084b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800877a:	bf00      	nop
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b098      	sub	sp, #96	; 0x60
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	4613      	mov	r3, r2
 8008790:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	88fa      	ldrh	r2, [r7, #6]
 800879c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2222      	movs	r2, #34	; 0x22
 80087a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	4a40      	ldr	r2, [pc, #256]	; (80088b4 <UART_Start_Receive_DMA+0x130>)
 80087b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b8:	4a3f      	ldr	r2, [pc, #252]	; (80088b8 <UART_Start_Receive_DMA+0x134>)
 80087ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c0:	4a3e      	ldr	r2, [pc, #248]	; (80088bc <UART_Start_Receive_DMA+0x138>)
 80087c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c8:	2200      	movs	r2, #0
 80087ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80087cc:	f107 0308 	add.w	r3, r7, #8
 80087d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3304      	adds	r3, #4
 80087dc:	4619      	mov	r1, r3
 80087de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	88fb      	ldrh	r3, [r7, #6]
 80087e4:	f7fb f8e4 	bl	80039b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80087e8:	2300      	movs	r3, #0
 80087ea:	613b      	str	r3, [r7, #16]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	613b      	str	r3, [r7, #16]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	613b      	str	r3, [r7, #16]
 80087fc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d019      	beq.n	8008842 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	330c      	adds	r3, #12
 8008814:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800881e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008824:	65bb      	str	r3, [r7, #88]	; 0x58
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	330c      	adds	r3, #12
 800882c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800882e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008830:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008834:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800883c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e5      	bne.n	800880e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3314      	adds	r3, #20
 8008848:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008854:	f043 0301 	orr.w	r3, r3, #1
 8008858:	657b      	str	r3, [r7, #84]	; 0x54
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3314      	adds	r3, #20
 8008860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008862:	63ba      	str	r2, [r7, #56]	; 0x38
 8008864:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e5      	bne.n	8008842 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3314      	adds	r3, #20
 800887c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	e853 3f00 	ldrex	r3, [r3]
 8008884:	617b      	str	r3, [r7, #20]
   return(result);
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888c:	653b      	str	r3, [r7, #80]	; 0x50
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3314      	adds	r3, #20
 8008894:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008896:	627a      	str	r2, [r7, #36]	; 0x24
 8008898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	6a39      	ldr	r1, [r7, #32]
 800889c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800889e:	e841 2300 	strex	r3, r2, [r1]
 80088a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e5      	bne.n	8008876 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3760      	adds	r7, #96	; 0x60
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	08008593 	.word	0x08008593
 80088b8:	080086b9 	.word	0x080086b9
 80088bc:	080086ef 	.word	0x080086ef

080088c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b089      	sub	sp, #36	; 0x24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	330c      	adds	r3, #12
 80088ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	e853 3f00 	ldrex	r3, [r3]
 80088d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80088de:	61fb      	str	r3, [r7, #28]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	330c      	adds	r3, #12
 80088e6:	69fa      	ldr	r2, [r7, #28]
 80088e8:	61ba      	str	r2, [r7, #24]
 80088ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ec:	6979      	ldr	r1, [r7, #20]
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	e841 2300 	strex	r3, r2, [r1]
 80088f4:	613b      	str	r3, [r7, #16]
   return(result);
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1e5      	bne.n	80088c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2220      	movs	r2, #32
 8008900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008904:	bf00      	nop
 8008906:	3724      	adds	r7, #36	; 0x24
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008910:	b480      	push	{r7}
 8008912:	b095      	sub	sp, #84	; 0x54
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	330c      	adds	r3, #12
 800891e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008922:	e853 3f00 	ldrex	r3, [r3]
 8008926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800892e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	330c      	adds	r3, #12
 8008936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008938:	643a      	str	r2, [r7, #64]	; 0x40
 800893a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800893e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008940:	e841 2300 	strex	r3, r2, [r1]
 8008944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e5      	bne.n	8008918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3314      	adds	r3, #20
 8008952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	e853 3f00 	ldrex	r3, [r3]
 800895a:	61fb      	str	r3, [r7, #28]
   return(result);
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	f023 0301 	bic.w	r3, r3, #1
 8008962:	64bb      	str	r3, [r7, #72]	; 0x48
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3314      	adds	r3, #20
 800896a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800896c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800896e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008974:	e841 2300 	strex	r3, r2, [r1]
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e5      	bne.n	800894c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008984:	2b01      	cmp	r3, #1
 8008986:	d119      	bne.n	80089bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	330c      	adds	r3, #12
 800898e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	60bb      	str	r3, [r7, #8]
   return(result);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f023 0310 	bic.w	r3, r3, #16
 800899e:	647b      	str	r3, [r7, #68]	; 0x44
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	330c      	adds	r3, #12
 80089a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089a8:	61ba      	str	r2, [r7, #24]
 80089aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	6979      	ldr	r1, [r7, #20]
 80089ae:	69ba      	ldr	r2, [r7, #24]
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	613b      	str	r3, [r7, #16]
   return(result);
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e5      	bne.n	8008988 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2220      	movs	r2, #32
 80089c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80089ca:	bf00      	nop
 80089cc:	3754      	adds	r7, #84	; 0x54
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f7ff fd5d 	bl	80084b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089f6:	bf00      	nop
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b21      	cmp	r3, #33	; 0x21
 8008a10:	d13e      	bne.n	8008a90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a1a:	d114      	bne.n	8008a46 <UART_Transmit_IT+0x48>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d110      	bne.n	8008a46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	1c9a      	adds	r2, r3, #2
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	621a      	str	r2, [r3, #32]
 8008a44:	e008      	b.n	8008a58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	1c59      	adds	r1, r3, #1
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	6211      	str	r1, [r2, #32]
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	4619      	mov	r1, r3
 8008a66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10f      	bne.n	8008a8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68da      	ldr	r2, [r3, #12]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	e000      	b.n	8008a92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a90:	2302      	movs	r3, #2
  }
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68da      	ldr	r2, [r3, #12]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ab4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff fcce 	bl	8008460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b08c      	sub	sp, #48	; 0x30
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b22      	cmp	r3, #34	; 0x22
 8008ae0:	f040 80ab 	bne.w	8008c3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aec:	d117      	bne.n	8008b1e <UART_Receive_IT+0x50>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d113      	bne.n	8008b1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008af6:	2300      	movs	r3, #0
 8008af8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b16:	1c9a      	adds	r2, r3, #2
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	629a      	str	r2, [r3, #40]	; 0x28
 8008b1c:	e026      	b.n	8008b6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008b24:	2300      	movs	r3, #0
 8008b26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b30:	d007      	beq.n	8008b42 <UART_Receive_IT+0x74>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10a      	bne.n	8008b50 <UART_Receive_IT+0x82>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d106      	bne.n	8008b50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	e008      	b.n	8008b62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	3b01      	subs	r3, #1
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d15a      	bne.n	8008c36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68da      	ldr	r2, [r3, #12]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f022 0220 	bic.w	r2, r2, #32
 8008b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68da      	ldr	r2, [r3, #12]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	695a      	ldr	r2, [r3, #20]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f022 0201 	bic.w	r2, r2, #1
 8008bae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d135      	bne.n	8008c2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	330c      	adds	r3, #12
 8008bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	e853 3f00 	ldrex	r3, [r3]
 8008bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f023 0310 	bic.w	r3, r3, #16
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	330c      	adds	r3, #12
 8008be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be6:	623a      	str	r2, [r7, #32]
 8008be8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bea:	69f9      	ldr	r1, [r7, #28]
 8008bec:	6a3a      	ldr	r2, [r7, #32]
 8008bee:	e841 2300 	strex	r3, r2, [r1]
 8008bf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1e5      	bne.n	8008bc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0310 	and.w	r3, r3, #16
 8008c04:	2b10      	cmp	r3, #16
 8008c06:	d10a      	bne.n	8008c1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c08:	2300      	movs	r3, #0
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	60fb      	str	r3, [r7, #12]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff fc4d 	bl	80084c4 <HAL_UARTEx_RxEventCallback>
 8008c2a:	e002      	b.n	8008c32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff fc2b 	bl	8008488 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	e002      	b.n	8008c3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	e000      	b.n	8008c3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008c3a:	2302      	movs	r3, #2
  }
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3730      	adds	r7, #48	; 0x30
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c48:	b0c0      	sub	sp, #256	; 0x100
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c60:	68d9      	ldr	r1, [r3, #12]
 8008c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	ea40 0301 	orr.w	r3, r0, r1
 8008c6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	431a      	orrs	r2, r3
 8008c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c9c:	f021 010c 	bic.w	r1, r1, #12
 8008ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008caa:	430b      	orrs	r3, r1
 8008cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cbe:	6999      	ldr	r1, [r3, #24]
 8008cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	ea40 0301 	orr.w	r3, r0, r1
 8008cca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4b8f      	ldr	r3, [pc, #572]	; (8008f10 <UART_SetConfig+0x2cc>)
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d005      	beq.n	8008ce4 <UART_SetConfig+0xa0>
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4b8d      	ldr	r3, [pc, #564]	; (8008f14 <UART_SetConfig+0x2d0>)
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d104      	bne.n	8008cee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ce4:	f7fd fbb4 	bl	8006450 <HAL_RCC_GetPCLK2Freq>
 8008ce8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008cec:	e003      	b.n	8008cf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cee:	f7fd fb9b 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 8008cf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d00:	f040 810c 	bne.w	8008f1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008d16:	4622      	mov	r2, r4
 8008d18:	462b      	mov	r3, r5
 8008d1a:	1891      	adds	r1, r2, r2
 8008d1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d1e:	415b      	adcs	r3, r3
 8008d20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d26:	4621      	mov	r1, r4
 8008d28:	eb12 0801 	adds.w	r8, r2, r1
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	eb43 0901 	adc.w	r9, r3, r1
 8008d32:	f04f 0200 	mov.w	r2, #0
 8008d36:	f04f 0300 	mov.w	r3, #0
 8008d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d46:	4690      	mov	r8, r2
 8008d48:	4699      	mov	r9, r3
 8008d4a:	4623      	mov	r3, r4
 8008d4c:	eb18 0303 	adds.w	r3, r8, r3
 8008d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d54:	462b      	mov	r3, r5
 8008d56:	eb49 0303 	adc.w	r3, r9, r3
 8008d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d72:	460b      	mov	r3, r1
 8008d74:	18db      	adds	r3, r3, r3
 8008d76:	653b      	str	r3, [r7, #80]	; 0x50
 8008d78:	4613      	mov	r3, r2
 8008d7a:	eb42 0303 	adc.w	r3, r2, r3
 8008d7e:	657b      	str	r3, [r7, #84]	; 0x54
 8008d80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d88:	f7f7 fce6 	bl	8000758 <__aeabi_uldivmod>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4b61      	ldr	r3, [pc, #388]	; (8008f18 <UART_SetConfig+0x2d4>)
 8008d92:	fba3 2302 	umull	r2, r3, r3, r2
 8008d96:	095b      	lsrs	r3, r3, #5
 8008d98:	011c      	lsls	r4, r3, #4
 8008d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008da4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008da8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008dac:	4642      	mov	r2, r8
 8008dae:	464b      	mov	r3, r9
 8008db0:	1891      	adds	r1, r2, r2
 8008db2:	64b9      	str	r1, [r7, #72]	; 0x48
 8008db4:	415b      	adcs	r3, r3
 8008db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008db8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008dbc:	4641      	mov	r1, r8
 8008dbe:	eb12 0a01 	adds.w	sl, r2, r1
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	eb43 0b01 	adc.w	fp, r3, r1
 8008dc8:	f04f 0200 	mov.w	r2, #0
 8008dcc:	f04f 0300 	mov.w	r3, #0
 8008dd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008dd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ddc:	4692      	mov	sl, r2
 8008dde:	469b      	mov	fp, r3
 8008de0:	4643      	mov	r3, r8
 8008de2:	eb1a 0303 	adds.w	r3, sl, r3
 8008de6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dea:	464b      	mov	r3, r9
 8008dec:	eb4b 0303 	adc.w	r3, fp, r3
 8008df0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008e04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	18db      	adds	r3, r3, r3
 8008e0c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e0e:	4613      	mov	r3, r2
 8008e10:	eb42 0303 	adc.w	r3, r2, r3
 8008e14:	647b      	str	r3, [r7, #68]	; 0x44
 8008e16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008e1e:	f7f7 fc9b 	bl	8000758 <__aeabi_uldivmod>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4611      	mov	r1, r2
 8008e28:	4b3b      	ldr	r3, [pc, #236]	; (8008f18 <UART_SetConfig+0x2d4>)
 8008e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8008e2e:	095b      	lsrs	r3, r3, #5
 8008e30:	2264      	movs	r2, #100	; 0x64
 8008e32:	fb02 f303 	mul.w	r3, r2, r3
 8008e36:	1acb      	subs	r3, r1, r3
 8008e38:	00db      	lsls	r3, r3, #3
 8008e3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008e3e:	4b36      	ldr	r3, [pc, #216]	; (8008f18 <UART_SetConfig+0x2d4>)
 8008e40:	fba3 2302 	umull	r2, r3, r3, r2
 8008e44:	095b      	lsrs	r3, r3, #5
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e4c:	441c      	add	r4, r3
 8008e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008e5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008e60:	4642      	mov	r2, r8
 8008e62:	464b      	mov	r3, r9
 8008e64:	1891      	adds	r1, r2, r2
 8008e66:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e68:	415b      	adcs	r3, r3
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e70:	4641      	mov	r1, r8
 8008e72:	1851      	adds	r1, r2, r1
 8008e74:	6339      	str	r1, [r7, #48]	; 0x30
 8008e76:	4649      	mov	r1, r9
 8008e78:	414b      	adcs	r3, r1
 8008e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e7c:	f04f 0200 	mov.w	r2, #0
 8008e80:	f04f 0300 	mov.w	r3, #0
 8008e84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e88:	4659      	mov	r1, fp
 8008e8a:	00cb      	lsls	r3, r1, #3
 8008e8c:	4651      	mov	r1, sl
 8008e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e92:	4651      	mov	r1, sl
 8008e94:	00ca      	lsls	r2, r1, #3
 8008e96:	4610      	mov	r0, r2
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	4642      	mov	r2, r8
 8008e9e:	189b      	adds	r3, r3, r2
 8008ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	460a      	mov	r2, r1
 8008ea8:	eb42 0303 	adc.w	r3, r2, r3
 8008eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ebc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	18db      	adds	r3, r3, r3
 8008ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eca:	4613      	mov	r3, r2
 8008ecc:	eb42 0303 	adc.w	r3, r2, r3
 8008ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ed6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008eda:	f7f7 fc3d 	bl	8000758 <__aeabi_uldivmod>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4b0d      	ldr	r3, [pc, #52]	; (8008f18 <UART_SetConfig+0x2d4>)
 8008ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ee8:	095b      	lsrs	r3, r3, #5
 8008eea:	2164      	movs	r1, #100	; 0x64
 8008eec:	fb01 f303 	mul.w	r3, r1, r3
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	00db      	lsls	r3, r3, #3
 8008ef4:	3332      	adds	r3, #50	; 0x32
 8008ef6:	4a08      	ldr	r2, [pc, #32]	; (8008f18 <UART_SetConfig+0x2d4>)
 8008ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	f003 0207 	and.w	r2, r3, #7
 8008f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4422      	add	r2, r4
 8008f0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f0c:	e105      	b.n	800911a <UART_SetConfig+0x4d6>
 8008f0e:	bf00      	nop
 8008f10:	40011000 	.word	0x40011000
 8008f14:	40011400 	.word	0x40011400
 8008f18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f20:	2200      	movs	r2, #0
 8008f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008f2e:	4642      	mov	r2, r8
 8008f30:	464b      	mov	r3, r9
 8008f32:	1891      	adds	r1, r2, r2
 8008f34:	6239      	str	r1, [r7, #32]
 8008f36:	415b      	adcs	r3, r3
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
 8008f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f3e:	4641      	mov	r1, r8
 8008f40:	1854      	adds	r4, r2, r1
 8008f42:	4649      	mov	r1, r9
 8008f44:	eb43 0501 	adc.w	r5, r3, r1
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	00eb      	lsls	r3, r5, #3
 8008f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f56:	00e2      	lsls	r2, r4, #3
 8008f58:	4614      	mov	r4, r2
 8008f5a:	461d      	mov	r5, r3
 8008f5c:	4643      	mov	r3, r8
 8008f5e:	18e3      	adds	r3, r4, r3
 8008f60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f64:	464b      	mov	r3, r9
 8008f66:	eb45 0303 	adc.w	r3, r5, r3
 8008f6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f7e:	f04f 0200 	mov.w	r2, #0
 8008f82:	f04f 0300 	mov.w	r3, #0
 8008f86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	008b      	lsls	r3, r1, #2
 8008f8e:	4621      	mov	r1, r4
 8008f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f94:	4621      	mov	r1, r4
 8008f96:	008a      	lsls	r2, r1, #2
 8008f98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f9c:	f7f7 fbdc 	bl	8000758 <__aeabi_uldivmod>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4b60      	ldr	r3, [pc, #384]	; (8009128 <UART_SetConfig+0x4e4>)
 8008fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8008faa:	095b      	lsrs	r3, r3, #5
 8008fac:	011c      	lsls	r4, r3, #4
 8008fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008fb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008fbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	1891      	adds	r1, r2, r2
 8008fc6:	61b9      	str	r1, [r7, #24]
 8008fc8:	415b      	adcs	r3, r3
 8008fca:	61fb      	str	r3, [r7, #28]
 8008fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fd0:	4641      	mov	r1, r8
 8008fd2:	1851      	adds	r1, r2, r1
 8008fd4:	6139      	str	r1, [r7, #16]
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	414b      	adcs	r3, r1
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	f04f 0200 	mov.w	r2, #0
 8008fe0:	f04f 0300 	mov.w	r3, #0
 8008fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fe8:	4659      	mov	r1, fp
 8008fea:	00cb      	lsls	r3, r1, #3
 8008fec:	4651      	mov	r1, sl
 8008fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ff2:	4651      	mov	r1, sl
 8008ff4:	00ca      	lsls	r2, r1, #3
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	189b      	adds	r3, r3, r2
 8009000:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009004:	464b      	mov	r3, r9
 8009006:	460a      	mov	r2, r1
 8009008:	eb42 0303 	adc.w	r3, r2, r3
 800900c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	67bb      	str	r3, [r7, #120]	; 0x78
 800901a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800901c:	f04f 0200 	mov.w	r2, #0
 8009020:	f04f 0300 	mov.w	r3, #0
 8009024:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009028:	4649      	mov	r1, r9
 800902a:	008b      	lsls	r3, r1, #2
 800902c:	4641      	mov	r1, r8
 800902e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009032:	4641      	mov	r1, r8
 8009034:	008a      	lsls	r2, r1, #2
 8009036:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800903a:	f7f7 fb8d 	bl	8000758 <__aeabi_uldivmod>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4b39      	ldr	r3, [pc, #228]	; (8009128 <UART_SetConfig+0x4e4>)
 8009044:	fba3 1302 	umull	r1, r3, r3, r2
 8009048:	095b      	lsrs	r3, r3, #5
 800904a:	2164      	movs	r1, #100	; 0x64
 800904c:	fb01 f303 	mul.w	r3, r1, r3
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	011b      	lsls	r3, r3, #4
 8009054:	3332      	adds	r3, #50	; 0x32
 8009056:	4a34      	ldr	r2, [pc, #208]	; (8009128 <UART_SetConfig+0x4e4>)
 8009058:	fba2 2303 	umull	r2, r3, r2, r3
 800905c:	095b      	lsrs	r3, r3, #5
 800905e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009062:	441c      	add	r4, r3
 8009064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009068:	2200      	movs	r2, #0
 800906a:	673b      	str	r3, [r7, #112]	; 0x70
 800906c:	677a      	str	r2, [r7, #116]	; 0x74
 800906e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009072:	4642      	mov	r2, r8
 8009074:	464b      	mov	r3, r9
 8009076:	1891      	adds	r1, r2, r2
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	415b      	adcs	r3, r3
 800907c:	60fb      	str	r3, [r7, #12]
 800907e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009082:	4641      	mov	r1, r8
 8009084:	1851      	adds	r1, r2, r1
 8009086:	6039      	str	r1, [r7, #0]
 8009088:	4649      	mov	r1, r9
 800908a:	414b      	adcs	r3, r1
 800908c:	607b      	str	r3, [r7, #4]
 800908e:	f04f 0200 	mov.w	r2, #0
 8009092:	f04f 0300 	mov.w	r3, #0
 8009096:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800909a:	4659      	mov	r1, fp
 800909c:	00cb      	lsls	r3, r1, #3
 800909e:	4651      	mov	r1, sl
 80090a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090a4:	4651      	mov	r1, sl
 80090a6:	00ca      	lsls	r2, r1, #3
 80090a8:	4610      	mov	r0, r2
 80090aa:	4619      	mov	r1, r3
 80090ac:	4603      	mov	r3, r0
 80090ae:	4642      	mov	r2, r8
 80090b0:	189b      	adds	r3, r3, r2
 80090b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80090b4:	464b      	mov	r3, r9
 80090b6:	460a      	mov	r2, r1
 80090b8:	eb42 0303 	adc.w	r3, r2, r3
 80090bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	663b      	str	r3, [r7, #96]	; 0x60
 80090c8:	667a      	str	r2, [r7, #100]	; 0x64
 80090ca:	f04f 0200 	mov.w	r2, #0
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80090d6:	4649      	mov	r1, r9
 80090d8:	008b      	lsls	r3, r1, #2
 80090da:	4641      	mov	r1, r8
 80090dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090e0:	4641      	mov	r1, r8
 80090e2:	008a      	lsls	r2, r1, #2
 80090e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80090e8:	f7f7 fb36 	bl	8000758 <__aeabi_uldivmod>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4b0d      	ldr	r3, [pc, #52]	; (8009128 <UART_SetConfig+0x4e4>)
 80090f2:	fba3 1302 	umull	r1, r3, r3, r2
 80090f6:	095b      	lsrs	r3, r3, #5
 80090f8:	2164      	movs	r1, #100	; 0x64
 80090fa:	fb01 f303 	mul.w	r3, r1, r3
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	011b      	lsls	r3, r3, #4
 8009102:	3332      	adds	r3, #50	; 0x32
 8009104:	4a08      	ldr	r2, [pc, #32]	; (8009128 <UART_SetConfig+0x4e4>)
 8009106:	fba2 2303 	umull	r2, r3, r2, r3
 800910a:	095b      	lsrs	r3, r3, #5
 800910c:	f003 020f 	and.w	r2, r3, #15
 8009110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4422      	add	r2, r4
 8009118:	609a      	str	r2, [r3, #8]
}
 800911a:	bf00      	nop
 800911c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009120:	46bd      	mov	sp, r7
 8009122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009126:	bf00      	nop
 8009128:	51eb851f 	.word	0x51eb851f

0800912c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800912c:	b084      	sub	sp, #16
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	f107 001c 	add.w	r0, r7, #28
 800913a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	2b01      	cmp	r3, #1
 8009142:	d122      	bne.n	800918a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009148:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800916c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800916e:	2b01      	cmp	r3, #1
 8009170:	d105      	bne.n	800917e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 fbee 	bl	800a960 <USB_CoreReset>
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]
 8009188:	e01a      	b.n	80091c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f001 fbe2 	bl	800a960 <USB_CoreReset>
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80091a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d106      	bne.n	80091b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	639a      	str	r2, [r3, #56]	; 0x38
 80091b2:	e005      	b.n	80091c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80091c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d10b      	bne.n	80091de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f043 0206 	orr.w	r2, r3, #6
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f043 0220 	orr.w	r2, r3, #32
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091ea:	b004      	add	sp, #16
 80091ec:	4770      	bx	lr
	...

080091f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	4613      	mov	r3, r2
 80091fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d165      	bne.n	80092d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4a41      	ldr	r2, [pc, #260]	; (800930c <USB_SetTurnaroundTime+0x11c>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d906      	bls.n	800921a <USB_SetTurnaroundTime+0x2a>
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	4a40      	ldr	r2, [pc, #256]	; (8009310 <USB_SetTurnaroundTime+0x120>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d202      	bcs.n	800921a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009214:	230f      	movs	r3, #15
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	e062      	b.n	80092e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	4a3c      	ldr	r2, [pc, #240]	; (8009310 <USB_SetTurnaroundTime+0x120>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d306      	bcc.n	8009230 <USB_SetTurnaroundTime+0x40>
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	4a3b      	ldr	r2, [pc, #236]	; (8009314 <USB_SetTurnaroundTime+0x124>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d202      	bcs.n	8009230 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800922a:	230e      	movs	r3, #14
 800922c:	617b      	str	r3, [r7, #20]
 800922e:	e057      	b.n	80092e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	4a38      	ldr	r2, [pc, #224]	; (8009314 <USB_SetTurnaroundTime+0x124>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d306      	bcc.n	8009246 <USB_SetTurnaroundTime+0x56>
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	4a37      	ldr	r2, [pc, #220]	; (8009318 <USB_SetTurnaroundTime+0x128>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d202      	bcs.n	8009246 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009240:	230d      	movs	r3, #13
 8009242:	617b      	str	r3, [r7, #20]
 8009244:	e04c      	b.n	80092e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	4a33      	ldr	r2, [pc, #204]	; (8009318 <USB_SetTurnaroundTime+0x128>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d306      	bcc.n	800925c <USB_SetTurnaroundTime+0x6c>
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	4a32      	ldr	r2, [pc, #200]	; (800931c <USB_SetTurnaroundTime+0x12c>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d802      	bhi.n	800925c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009256:	230c      	movs	r3, #12
 8009258:	617b      	str	r3, [r7, #20]
 800925a:	e041      	b.n	80092e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	4a2f      	ldr	r2, [pc, #188]	; (800931c <USB_SetTurnaroundTime+0x12c>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d906      	bls.n	8009272 <USB_SetTurnaroundTime+0x82>
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	4a2e      	ldr	r2, [pc, #184]	; (8009320 <USB_SetTurnaroundTime+0x130>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d802      	bhi.n	8009272 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800926c:	230b      	movs	r3, #11
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	e036      	b.n	80092e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	4a2a      	ldr	r2, [pc, #168]	; (8009320 <USB_SetTurnaroundTime+0x130>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d906      	bls.n	8009288 <USB_SetTurnaroundTime+0x98>
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	4a29      	ldr	r2, [pc, #164]	; (8009324 <USB_SetTurnaroundTime+0x134>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d802      	bhi.n	8009288 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009282:	230a      	movs	r3, #10
 8009284:	617b      	str	r3, [r7, #20]
 8009286:	e02b      	b.n	80092e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	4a26      	ldr	r2, [pc, #152]	; (8009324 <USB_SetTurnaroundTime+0x134>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d906      	bls.n	800929e <USB_SetTurnaroundTime+0xae>
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	4a25      	ldr	r2, [pc, #148]	; (8009328 <USB_SetTurnaroundTime+0x138>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d202      	bcs.n	800929e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009298:	2309      	movs	r3, #9
 800929a:	617b      	str	r3, [r7, #20]
 800929c:	e020      	b.n	80092e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	4a21      	ldr	r2, [pc, #132]	; (8009328 <USB_SetTurnaroundTime+0x138>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d306      	bcc.n	80092b4 <USB_SetTurnaroundTime+0xc4>
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	4a20      	ldr	r2, [pc, #128]	; (800932c <USB_SetTurnaroundTime+0x13c>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d802      	bhi.n	80092b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80092ae:	2308      	movs	r3, #8
 80092b0:	617b      	str	r3, [r7, #20]
 80092b2:	e015      	b.n	80092e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	4a1d      	ldr	r2, [pc, #116]	; (800932c <USB_SetTurnaroundTime+0x13c>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d906      	bls.n	80092ca <USB_SetTurnaroundTime+0xda>
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	4a1c      	ldr	r2, [pc, #112]	; (8009330 <USB_SetTurnaroundTime+0x140>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d202      	bcs.n	80092ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80092c4:	2307      	movs	r3, #7
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	e00a      	b.n	80092e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80092ca:	2306      	movs	r3, #6
 80092cc:	617b      	str	r3, [r7, #20]
 80092ce:	e007      	b.n	80092e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80092d0:	79fb      	ldrb	r3, [r7, #7]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d102      	bne.n	80092dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80092d6:	2309      	movs	r3, #9
 80092d8:	617b      	str	r3, [r7, #20]
 80092da:	e001      	b.n	80092e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80092dc:	2309      	movs	r3, #9
 80092de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	029b      	lsls	r3, r3, #10
 80092f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80092f8:	431a      	orrs	r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	371c      	adds	r7, #28
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	00d8acbf 	.word	0x00d8acbf
 8009310:	00e4e1c0 	.word	0x00e4e1c0
 8009314:	00f42400 	.word	0x00f42400
 8009318:	01067380 	.word	0x01067380
 800931c:	011a499f 	.word	0x011a499f
 8009320:	01312cff 	.word	0x01312cff
 8009324:	014ca43f 	.word	0x014ca43f
 8009328:	016e3600 	.word	0x016e3600
 800932c:	01a6ab1f 	.word	0x01a6ab1f
 8009330:	01e84800 	.word	0x01e84800

08009334 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f043 0201 	orr.w	r2, r3, #1
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f023 0201 	bic.w	r2, r3, #1
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009394:	78fb      	ldrb	r3, [r7, #3]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d115      	bne.n	80093c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80093a6:	2001      	movs	r0, #1
 80093a8:	f7f9 fed0 	bl	800314c <HAL_Delay>
      ms++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 fa45 	bl	800a842 <USB_GetMode>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d01e      	beq.n	80093fc <USB_SetCurrentMode+0x84>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b31      	cmp	r3, #49	; 0x31
 80093c2:	d9f0      	bls.n	80093a6 <USB_SetCurrentMode+0x2e>
 80093c4:	e01a      	b.n	80093fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80093c6:	78fb      	ldrb	r3, [r7, #3]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d115      	bne.n	80093f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80093d8:	2001      	movs	r0, #1
 80093da:	f7f9 feb7 	bl	800314c <HAL_Delay>
      ms++;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3301      	adds	r3, #1
 80093e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 fa2c 	bl	800a842 <USB_GetMode>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d005      	beq.n	80093fc <USB_SetCurrentMode+0x84>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2b31      	cmp	r3, #49	; 0x31
 80093f4:	d9f0      	bls.n	80093d8 <USB_SetCurrentMode+0x60>
 80093f6:	e001      	b.n	80093fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e005      	b.n	8009408 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b32      	cmp	r3, #50	; 0x32
 8009400:	d101      	bne.n	8009406 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e000      	b.n	8009408 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009410:	b084      	sub	sp, #16
 8009412:	b580      	push	{r7, lr}
 8009414:	b086      	sub	sp, #24
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800941e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800942a:	2300      	movs	r3, #0
 800942c:	613b      	str	r3, [r7, #16]
 800942e:	e009      	b.n	8009444 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	3340      	adds	r3, #64	; 0x40
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	2200      	movs	r2, #0
 800943c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	3301      	adds	r3, #1
 8009442:	613b      	str	r3, [r7, #16]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	2b0e      	cmp	r3, #14
 8009448:	d9f2      	bls.n	8009430 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800944a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800944c:	2b00      	cmp	r3, #0
 800944e:	d11c      	bne.n	800948a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800945e:	f043 0302 	orr.w	r3, r3, #2
 8009462:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009468:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009474:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	639a      	str	r2, [r3, #56]	; 0x38
 8009488:	e00b      	b.n	80094a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094a8:	461a      	mov	r2, r3
 80094aa:	2300      	movs	r3, #0
 80094ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b4:	4619      	mov	r1, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094bc:	461a      	mov	r2, r3
 80094be:	680b      	ldr	r3, [r1, #0]
 80094c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d10c      	bne.n	80094e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d104      	bne.n	80094d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094ce:	2100      	movs	r1, #0
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f965 	bl	80097a0 <USB_SetDevSpeed>
 80094d6:	e008      	b.n	80094ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80094d8:	2101      	movs	r1, #1
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f960 	bl	80097a0 <USB_SetDevSpeed>
 80094e0:	e003      	b.n	80094ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80094e2:	2103      	movs	r1, #3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f95b 	bl	80097a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80094ea:	2110      	movs	r1, #16
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f8f3 	bl	80096d8 <USB_FlushTxFifo>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f91f 	bl	8009740 <USB_FlushRxFifo>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009512:	461a      	mov	r2, r3
 8009514:	2300      	movs	r3, #0
 8009516:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800951e:	461a      	mov	r2, r3
 8009520:	2300      	movs	r3, #0
 8009522:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952a:	461a      	mov	r2, r3
 800952c:	2300      	movs	r3, #0
 800952e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009530:	2300      	movs	r3, #0
 8009532:	613b      	str	r3, [r7, #16]
 8009534:	e043      	b.n	80095be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4413      	add	r3, r2
 800953e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800954c:	d118      	bne.n	8009580 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10a      	bne.n	800956a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009560:	461a      	mov	r2, r3
 8009562:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	e013      	b.n	8009592 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4413      	add	r3, r2
 8009572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009576:	461a      	mov	r2, r3
 8009578:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	e008      	b.n	8009592 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	015a      	lsls	r2, r3, #5
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4413      	add	r3, r2
 8009588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958c:	461a      	mov	r2, r3
 800958e:	2300      	movs	r3, #0
 8009590:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959e:	461a      	mov	r2, r3
 80095a0:	2300      	movs	r3, #0
 80095a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b0:	461a      	mov	r2, r3
 80095b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	3301      	adds	r3, #1
 80095bc:	613b      	str	r3, [r7, #16]
 80095be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d3b7      	bcc.n	8009536 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095c6:	2300      	movs	r3, #0
 80095c8:	613b      	str	r3, [r7, #16]
 80095ca:	e043      	b.n	8009654 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	015a      	lsls	r2, r3, #5
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	4413      	add	r3, r2
 80095d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095e2:	d118      	bne.n	8009616 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10a      	bne.n	8009600 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f6:	461a      	mov	r2, r3
 80095f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	e013      	b.n	8009628 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	015a      	lsls	r2, r3, #5
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4413      	add	r3, r2
 8009608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800960c:	461a      	mov	r2, r3
 800960e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	e008      	b.n	8009628 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	015a      	lsls	r2, r3, #5
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	4413      	add	r3, r2
 800961e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009622:	461a      	mov	r2, r3
 8009624:	2300      	movs	r3, #0
 8009626:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	4413      	add	r3, r2
 8009630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009634:	461a      	mov	r2, r3
 8009636:	2300      	movs	r3, #0
 8009638:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009646:	461a      	mov	r2, r3
 8009648:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800964c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	3301      	adds	r3, #1
 8009652:	613b      	str	r3, [r7, #16]
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	429a      	cmp	r2, r3
 800965a:	d3b7      	bcc.n	80095cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800966a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800966e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800967c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009680:	2b00      	cmp	r3, #0
 8009682:	d105      	bne.n	8009690 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	f043 0210 	orr.w	r2, r3, #16
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	699a      	ldr	r2, [r3, #24]
 8009694:	4b0f      	ldr	r3, [pc, #60]	; (80096d4 <USB_DevInit+0x2c4>)
 8009696:	4313      	orrs	r3, r2
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800969c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d005      	beq.n	80096ae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	f043 0208 	orr.w	r2, r3, #8
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d107      	bne.n	80096c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096bc:	f043 0304 	orr.w	r3, r3, #4
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096d0:	b004      	add	sp, #16
 80096d2:	4770      	bx	lr
 80096d4:	803c3800 	.word	0x803c3800

080096d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3301      	adds	r3, #1
 80096ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4a13      	ldr	r2, [pc, #76]	; (800973c <USB_FlushTxFifo+0x64>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d901      	bls.n	80096f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e01b      	b.n	8009730 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	daf2      	bge.n	80096e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	019b      	lsls	r3, r3, #6
 8009708:	f043 0220 	orr.w	r2, r3, #32
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3301      	adds	r3, #1
 8009714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	4a08      	ldr	r2, [pc, #32]	; (800973c <USB_FlushTxFifo+0x64>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d901      	bls.n	8009722 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	e006      	b.n	8009730 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b20      	cmp	r3, #32
 800972c:	d0f0      	beq.n	8009710 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	00030d40 	.word	0x00030d40

08009740 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009748:	2300      	movs	r3, #0
 800974a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	3301      	adds	r3, #1
 8009750:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4a11      	ldr	r2, [pc, #68]	; (800979c <USB_FlushRxFifo+0x5c>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d901      	bls.n	800975e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800975a:	2303      	movs	r3, #3
 800975c:	e018      	b.n	8009790 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	daf2      	bge.n	800974c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2210      	movs	r2, #16
 800976e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3301      	adds	r3, #1
 8009774:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	4a08      	ldr	r2, [pc, #32]	; (800979c <USB_FlushRxFifo+0x5c>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d901      	bls.n	8009782 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e006      	b.n	8009790 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	f003 0310 	and.w	r3, r3, #16
 800978a:	2b10      	cmp	r3, #16
 800978c:	d0f0      	beq.n	8009770 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	00030d40 	.word	0x00030d40

080097a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	78fb      	ldrb	r3, [r7, #3]
 80097ba:	68f9      	ldr	r1, [r7, #12]
 80097bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097c0:	4313      	orrs	r3, r2
 80097c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b087      	sub	sp, #28
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	f003 0306 	and.w	r3, r3, #6
 80097ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d102      	bne.n	80097f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80097f2:	2300      	movs	r3, #0
 80097f4:	75fb      	strb	r3, [r7, #23]
 80097f6:	e00a      	b.n	800980e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d002      	beq.n	8009804 <USB_GetDevSpeed+0x32>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2b06      	cmp	r3, #6
 8009802:	d102      	bne.n	800980a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009804:	2302      	movs	r3, #2
 8009806:	75fb      	strb	r3, [r7, #23]
 8009808:	e001      	b.n	800980e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800980a:	230f      	movs	r3, #15
 800980c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800980e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009810:	4618      	mov	r0, r3
 8009812:	371c      	adds	r7, #28
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	785b      	ldrb	r3, [r3, #1]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d13a      	bne.n	80098ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983e:	69da      	ldr	r2, [r3, #28]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	f003 030f 	and.w	r3, r3, #15
 8009848:	2101      	movs	r1, #1
 800984a:	fa01 f303 	lsl.w	r3, r1, r3
 800984e:	b29b      	uxth	r3, r3
 8009850:	68f9      	ldr	r1, [r7, #12]
 8009852:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009856:	4313      	orrs	r3, r2
 8009858:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	4413      	add	r3, r2
 8009862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d155      	bne.n	800991c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	791b      	ldrb	r3, [r3, #4]
 800988a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800988c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	059b      	lsls	r3, r3, #22
 8009892:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009894:	4313      	orrs	r3, r2
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	0151      	lsls	r1, r2, #5
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	440a      	add	r2, r1
 800989e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	e036      	b.n	800991c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b4:	69da      	ldr	r2, [r3, #28]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	f003 030f 	and.w	r3, r3, #15
 80098be:	2101      	movs	r1, #1
 80098c0:	fa01 f303 	lsl.w	r3, r1, r3
 80098c4:	041b      	lsls	r3, r3, #16
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098cc:	4313      	orrs	r3, r2
 80098ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d11a      	bne.n	800991c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	791b      	ldrb	r3, [r3, #4]
 8009900:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009902:	430b      	orrs	r3, r1
 8009904:	4313      	orrs	r3, r2
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	0151      	lsls	r1, r2, #5
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	440a      	add	r2, r1
 800990e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800991a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3714      	adds	r7, #20
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
	...

0800992c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	785b      	ldrb	r3, [r3, #1]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d161      	bne.n	8009a0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	015a      	lsls	r2, r3, #5
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	4413      	add	r3, r2
 8009950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800995a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800995e:	d11f      	bne.n	80099a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	015a      	lsls	r2, r3, #5
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	4413      	add	r3, r2
 8009968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	0151      	lsls	r1, r2, #5
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	440a      	add	r2, r1
 8009976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800997a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800997e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	0151      	lsls	r1, r2, #5
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	440a      	add	r2, r1
 8009996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800999a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800999e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	f003 030f 	and.w	r3, r3, #15
 80099b0:	2101      	movs	r1, #1
 80099b2:	fa01 f303 	lsl.w	r3, r1, r3
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	43db      	mvns	r3, r3
 80099ba:	68f9      	ldr	r1, [r7, #12]
 80099bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099c0:	4013      	ands	r3, r2
 80099c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ca:	69da      	ldr	r2, [r3, #28]
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	2101      	movs	r1, #1
 80099d6:	fa01 f303 	lsl.w	r3, r1, r3
 80099da:	b29b      	uxth	r3, r3
 80099dc:	43db      	mvns	r3, r3
 80099de:	68f9      	ldr	r1, [r7, #12]
 80099e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099e4:	4013      	ands	r3, r2
 80099e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	0159      	lsls	r1, r3, #5
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	440b      	add	r3, r1
 80099fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a02:	4619      	mov	r1, r3
 8009a04:	4b35      	ldr	r3, [pc, #212]	; (8009adc <USB_DeactivateEndpoint+0x1b0>)
 8009a06:	4013      	ands	r3, r2
 8009a08:	600b      	str	r3, [r1, #0]
 8009a0a:	e060      	b.n	8009ace <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	015a      	lsls	r2, r3, #5
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a22:	d11f      	bne.n	8009a64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	015a      	lsls	r2, r3, #5
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	0151      	lsls	r1, r2, #5
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	440a      	add	r2, r1
 8009a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	0151      	lsls	r1, r2, #5
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	440a      	add	r2, r1
 8009a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	f003 030f 	and.w	r3, r3, #15
 8009a74:	2101      	movs	r1, #1
 8009a76:	fa01 f303 	lsl.w	r3, r1, r3
 8009a7a:	041b      	lsls	r3, r3, #16
 8009a7c:	43db      	mvns	r3, r3
 8009a7e:	68f9      	ldr	r1, [r7, #12]
 8009a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a84:	4013      	ands	r3, r2
 8009a86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a8e:	69da      	ldr	r2, [r3, #28]
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	f003 030f 	and.w	r3, r3, #15
 8009a98:	2101      	movs	r1, #1
 8009a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a9e:	041b      	lsls	r3, r3, #16
 8009aa0:	43db      	mvns	r3, r3
 8009aa2:	68f9      	ldr	r1, [r7, #12]
 8009aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	0159      	lsls	r1, r3, #5
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	440b      	add	r3, r1
 8009ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <USB_DeactivateEndpoint+0x1b4>)
 8009aca:	4013      	ands	r3, r2
 8009acc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	ec337800 	.word	0xec337800
 8009ae0:	eff37800 	.word	0xeff37800

08009ae4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08a      	sub	sp, #40	; 0x28
 8009ae8:	af02      	add	r7, sp, #8
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	4613      	mov	r3, r2
 8009af0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	f040 815c 	bne.w	8009dbe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d132      	bne.n	8009b74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	0151      	lsls	r1, r2, #5
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	440a      	add	r2, r1
 8009b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	0151      	lsls	r1, r2, #5
 8009b44:	69fa      	ldr	r2, [r7, #28]
 8009b46:	440a      	add	r2, r1
 8009b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	0151      	lsls	r1, r2, #5
 8009b64:	69fa      	ldr	r2, [r7, #28]
 8009b66:	440a      	add	r2, r1
 8009b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b6c:	0cdb      	lsrs	r3, r3, #19
 8009b6e:	04db      	lsls	r3, r3, #19
 8009b70:	6113      	str	r3, [r2, #16]
 8009b72:	e074      	b.n	8009c5e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	69ba      	ldr	r2, [r7, #24]
 8009b84:	0151      	lsls	r1, r2, #5
 8009b86:	69fa      	ldr	r2, [r7, #28]
 8009b88:	440a      	add	r2, r1
 8009b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b8e:	0cdb      	lsrs	r3, r3, #19
 8009b90:	04db      	lsls	r3, r3, #19
 8009b92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	69ba      	ldr	r2, [r7, #24]
 8009ba4:	0151      	lsls	r1, r2, #5
 8009ba6:	69fa      	ldr	r2, [r7, #28]
 8009ba8:	440a      	add	r2, r1
 8009baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009bb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	6999      	ldr	r1, [r3, #24]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	440b      	add	r3, r1
 8009bd0:	1e59      	subs	r1, r3, #1
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8009bda:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009bdc:	4b9d      	ldr	r3, [pc, #628]	; (8009e54 <USB_EPStartXfer+0x370>)
 8009bde:	400b      	ands	r3, r1
 8009be0:	69b9      	ldr	r1, [r7, #24]
 8009be2:	0148      	lsls	r0, r1, #5
 8009be4:	69f9      	ldr	r1, [r7, #28]
 8009be6:	4401      	add	r1, r0
 8009be8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009bec:	4313      	orrs	r3, r2
 8009bee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	015a      	lsls	r2, r3, #5
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bfc:	691a      	ldr	r2, [r3, #16]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c06:	69b9      	ldr	r1, [r7, #24]
 8009c08:	0148      	lsls	r0, r1, #5
 8009c0a:	69f9      	ldr	r1, [r7, #28]
 8009c0c:	4401      	add	r1, r0
 8009c0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c12:	4313      	orrs	r3, r2
 8009c14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	791b      	ldrb	r3, [r3, #4]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d11f      	bne.n	8009c5e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	0151      	lsls	r1, r2, #5
 8009c30:	69fa      	ldr	r2, [r7, #28]
 8009c32:	440a      	add	r2, r1
 8009c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009c3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	69ba      	ldr	r2, [r7, #24]
 8009c4e:	0151      	lsls	r1, r2, #5
 8009c50:	69fa      	ldr	r2, [r7, #28]
 8009c52:	440a      	add	r2, r1
 8009c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009c5e:	79fb      	ldrb	r3, [r7, #7]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d14b      	bne.n	8009cfc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d009      	beq.n	8009c80 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c78:	461a      	mov	r2, r3
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	791b      	ldrb	r3, [r3, #4]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d128      	bne.n	8009cda <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d110      	bne.n	8009cba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	69ba      	ldr	r2, [r7, #24]
 8009ca8:	0151      	lsls	r1, r2, #5
 8009caa:	69fa      	ldr	r2, [r7, #28]
 8009cac:	440a      	add	r2, r1
 8009cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	e00f      	b.n	8009cda <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	015a      	lsls	r2, r3, #5
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	69ba      	ldr	r2, [r7, #24]
 8009cca:	0151      	lsls	r1, r2, #5
 8009ccc:	69fa      	ldr	r2, [r7, #28]
 8009cce:	440a      	add	r2, r1
 8009cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cd8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	015a      	lsls	r2, r3, #5
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	69ba      	ldr	r2, [r7, #24]
 8009cea:	0151      	lsls	r1, r2, #5
 8009cec:	69fa      	ldr	r2, [r7, #28]
 8009cee:	440a      	add	r2, r1
 8009cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009cf8:	6013      	str	r3, [r2, #0]
 8009cfa:	e133      	b.n	8009f64 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	015a      	lsls	r2, r3, #5
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	4413      	add	r3, r2
 8009d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	69ba      	ldr	r2, [r7, #24]
 8009d0c:	0151      	lsls	r1, r2, #5
 8009d0e:	69fa      	ldr	r2, [r7, #28]
 8009d10:	440a      	add	r2, r1
 8009d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	791b      	ldrb	r3, [r3, #4]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d015      	beq.n	8009d50 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	699b      	ldr	r3, [r3, #24]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f000 811b 	beq.w	8009f64 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	f003 030f 	and.w	r3, r3, #15
 8009d3e:	2101      	movs	r1, #1
 8009d40:	fa01 f303 	lsl.w	r3, r1, r3
 8009d44:	69f9      	ldr	r1, [r7, #28]
 8009d46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	634b      	str	r3, [r1, #52]	; 0x34
 8009d4e:	e109      	b.n	8009f64 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d110      	bne.n	8009d82 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	015a      	lsls	r2, r3, #5
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	4413      	add	r3, r2
 8009d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	69ba      	ldr	r2, [r7, #24]
 8009d70:	0151      	lsls	r1, r2, #5
 8009d72:	69fa      	ldr	r2, [r7, #28]
 8009d74:	440a      	add	r2, r1
 8009d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d7e:	6013      	str	r3, [r2, #0]
 8009d80:	e00f      	b.n	8009da2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	015a      	lsls	r2, r3, #5
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	4413      	add	r3, r2
 8009d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	69ba      	ldr	r2, [r7, #24]
 8009d92:	0151      	lsls	r1, r2, #5
 8009d94:	69fa      	ldr	r2, [r7, #28]
 8009d96:	440a      	add	r2, r1
 8009d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009da0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	6919      	ldr	r1, [r3, #16]
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	781a      	ldrb	r2, [r3, #0]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	b298      	uxth	r0, r3
 8009db0:	79fb      	ldrb	r3, [r7, #7]
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	4603      	mov	r3, r0
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 fade 	bl	800a378 <USB_WritePacket>
 8009dbc:	e0d2      	b.n	8009f64 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	69ba      	ldr	r2, [r7, #24]
 8009dce:	0151      	lsls	r1, r2, #5
 8009dd0:	69fa      	ldr	r2, [r7, #28]
 8009dd2:	440a      	add	r2, r1
 8009dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dd8:	0cdb      	lsrs	r3, r3, #19
 8009dda:	04db      	lsls	r3, r3, #19
 8009ddc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	69ba      	ldr	r2, [r7, #24]
 8009dee:	0151      	lsls	r1, r2, #5
 8009df0:	69fa      	ldr	r2, [r7, #28]
 8009df2:	440a      	add	r2, r1
 8009df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009df8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009dfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e00:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d126      	bne.n	8009e58 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e16:	691a      	ldr	r2, [r3, #16]
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e20:	69b9      	ldr	r1, [r7, #24]
 8009e22:	0148      	lsls	r0, r1, #5
 8009e24:	69f9      	ldr	r1, [r7, #28]
 8009e26:	4401      	add	r1, r0
 8009e28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	0151      	lsls	r1, r2, #5
 8009e42:	69fa      	ldr	r2, [r7, #28]
 8009e44:	440a      	add	r2, r1
 8009e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e4e:	6113      	str	r3, [r2, #16]
 8009e50:	e03a      	b.n	8009ec8 <USB_EPStartXfer+0x3e4>
 8009e52:	bf00      	nop
 8009e54:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	699a      	ldr	r2, [r3, #24]
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	4413      	add	r3, r2
 8009e62:	1e5a      	subs	r2, r3, #1
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e6c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	8afa      	ldrh	r2, [r7, #22]
 8009e74:	fb03 f202 	mul.w	r2, r3, r2
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e88:	691a      	ldr	r2, [r3, #16]
 8009e8a:	8afb      	ldrh	r3, [r7, #22]
 8009e8c:	04d9      	lsls	r1, r3, #19
 8009e8e:	4b38      	ldr	r3, [pc, #224]	; (8009f70 <USB_EPStartXfer+0x48c>)
 8009e90:	400b      	ands	r3, r1
 8009e92:	69b9      	ldr	r1, [r7, #24]
 8009e94:	0148      	lsls	r0, r1, #5
 8009e96:	69f9      	ldr	r1, [r7, #28]
 8009e98:	4401      	add	r1, r0
 8009e9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	015a      	lsls	r2, r3, #5
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eae:	691a      	ldr	r2, [r3, #16]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eb8:	69b9      	ldr	r1, [r7, #24]
 8009eba:	0148      	lsls	r0, r1, #5
 8009ebc:	69f9      	ldr	r1, [r7, #28]
 8009ebe:	4401      	add	r1, r0
 8009ec0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d10d      	bne.n	8009eea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d009      	beq.n	8009eea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	6919      	ldr	r1, [r3, #16]
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee6:	460a      	mov	r2, r1
 8009ee8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	791b      	ldrb	r3, [r3, #4]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d128      	bne.n	8009f44 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d110      	bne.n	8009f24 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	015a      	lsls	r2, r3, #5
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	4413      	add	r3, r2
 8009f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	69ba      	ldr	r2, [r7, #24]
 8009f12:	0151      	lsls	r1, r2, #5
 8009f14:	69fa      	ldr	r2, [r7, #28]
 8009f16:	440a      	add	r2, r1
 8009f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f20:	6013      	str	r3, [r2, #0]
 8009f22:	e00f      	b.n	8009f44 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	015a      	lsls	r2, r3, #5
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	69ba      	ldr	r2, [r7, #24]
 8009f34:	0151      	lsls	r1, r2, #5
 8009f36:	69fa      	ldr	r2, [r7, #28]
 8009f38:	440a      	add	r2, r1
 8009f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	015a      	lsls	r2, r3, #5
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	69ba      	ldr	r2, [r7, #24]
 8009f54:	0151      	lsls	r1, r2, #5
 8009f56:	69fa      	ldr	r2, [r7, #28]
 8009f58:	440a      	add	r2, r1
 8009f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3720      	adds	r7, #32
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	1ff80000 	.word	0x1ff80000

08009f74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b087      	sub	sp, #28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	785b      	ldrb	r3, [r3, #1]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	f040 80ce 	bne.w	800a132 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d132      	bne.n	800a004 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	0151      	lsls	r1, r2, #5
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	440a      	add	r2, r1
 8009fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009fbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009fc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	0151      	lsls	r1, r2, #5
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	440a      	add	r2, r1
 8009fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	0151      	lsls	r1, r2, #5
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	440a      	add	r2, r1
 8009ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ffc:	0cdb      	lsrs	r3, r3, #19
 8009ffe:	04db      	lsls	r3, r3, #19
 800a000:	6113      	str	r3, [r2, #16]
 800a002:	e04e      	b.n	800a0a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	0151      	lsls	r1, r2, #5
 800a016:	697a      	ldr	r2, [r7, #20]
 800a018:	440a      	add	r2, r1
 800a01a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a01e:	0cdb      	lsrs	r3, r3, #19
 800a020:	04db      	lsls	r3, r3, #19
 800a022:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	015a      	lsls	r2, r3, #5
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	4413      	add	r3, r2
 800a02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	0151      	lsls	r1, r2, #5
 800a036:	697a      	ldr	r2, [r7, #20]
 800a038:	440a      	add	r2, r1
 800a03a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a03e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a042:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a046:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	699a      	ldr	r2, [r3, #24]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	429a      	cmp	r2, r3
 800a052:	d903      	bls.n	800a05c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	68da      	ldr	r2, [r3, #12]
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	4413      	add	r3, r2
 800a064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	693a      	ldr	r2, [r7, #16]
 800a06c:	0151      	lsls	r1, r2, #5
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	440a      	add	r2, r1
 800a072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a076:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a07a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	4413      	add	r3, r2
 800a084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a088:	691a      	ldr	r2, [r3, #16]
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a092:	6939      	ldr	r1, [r7, #16]
 800a094:	0148      	lsls	r0, r1, #5
 800a096:	6979      	ldr	r1, [r7, #20]
 800a098:	4401      	add	r1, r0
 800a09a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d11e      	bne.n	800a0e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d009      	beq.n	800a0c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0bc:	461a      	mov	r2, r3
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	693a      	ldr	r2, [r7, #16]
 800a0d4:	0151      	lsls	r1, r2, #5
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	440a      	add	r2, r1
 800a0da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	e097      	b.n	800a216 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	0151      	lsls	r1, r2, #5
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	440a      	add	r2, r1
 800a0fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a100:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a104:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 8083 	beq.w	800a216 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	f003 030f 	and.w	r3, r3, #15
 800a120:	2101      	movs	r1, #1
 800a122:	fa01 f303 	lsl.w	r3, r1, r3
 800a126:	6979      	ldr	r1, [r7, #20]
 800a128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a12c:	4313      	orrs	r3, r2
 800a12e:	634b      	str	r3, [r1, #52]	; 0x34
 800a130:	e071      	b.n	800a216 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	015a      	lsls	r2, r3, #5
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	4413      	add	r3, r2
 800a13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	0151      	lsls	r1, r2, #5
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	440a      	add	r2, r1
 800a148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a14c:	0cdb      	lsrs	r3, r3, #19
 800a14e:	04db      	lsls	r3, r3, #19
 800a150:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	015a      	lsls	r2, r3, #5
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	4413      	add	r3, r2
 800a15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	0151      	lsls	r1, r2, #5
 800a164:	697a      	ldr	r2, [r7, #20]
 800a166:	440a      	add	r2, r1
 800a168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a16c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a170:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a174:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d003      	beq.n	800a186 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	68da      	ldr	r2, [r3, #12]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	68da      	ldr	r2, [r3, #12]
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	0151      	lsls	r1, r2, #5
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	440a      	add	r2, r1
 800a1a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	015a      	lsls	r2, r3, #5
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ba:	691a      	ldr	r2, [r3, #16]
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	69db      	ldr	r3, [r3, #28]
 800a1c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1c4:	6939      	ldr	r1, [r7, #16]
 800a1c6:	0148      	lsls	r0, r1, #5
 800a1c8:	6979      	ldr	r1, [r7, #20]
 800a1ca:	4401      	add	r1, r0
 800a1cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a1d4:	79fb      	ldrb	r3, [r7, #7]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d10d      	bne.n	800a1f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d009      	beq.n	800a1f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	6919      	ldr	r1, [r3, #16]
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f2:	460a      	mov	r2, r1
 800a1f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	015a      	lsls	r2, r3, #5
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	0151      	lsls	r1, r2, #5
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	440a      	add	r2, r1
 800a20c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a210:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a214:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	371c      	adds	r7, #28
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a224:	b480      	push	{r7}
 800a226:	b087      	sub	sp, #28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a22e:	2300      	movs	r3, #0
 800a230:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	785b      	ldrb	r3, [r3, #1]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d14a      	bne.n	800a2d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a25a:	f040 8086 	bne.w	800a36a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	015a      	lsls	r2, r3, #5
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	4413      	add	r3, r2
 800a268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	7812      	ldrb	r2, [r2, #0]
 800a272:	0151      	lsls	r1, r2, #5
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	440a      	add	r2, r1
 800a278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a27c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a280:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	7812      	ldrb	r2, [r2, #0]
 800a296:	0151      	lsls	r1, r2, #5
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	440a      	add	r2, r1
 800a29c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f242 7210 	movw	r2, #10000	; 0x2710
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d902      	bls.n	800a2bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	75fb      	strb	r3, [r7, #23]
          break;
 800a2ba:	e056      	b.n	800a36a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	015a      	lsls	r2, r3, #5
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2d4:	d0e7      	beq.n	800a2a6 <USB_EPStopXfer+0x82>
 800a2d6:	e048      	b.n	800a36a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2f0:	d13b      	bne.n	800a36a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	7812      	ldrb	r2, [r2, #0]
 800a306:	0151      	lsls	r1, r2, #5
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	440a      	add	r2, r1
 800a30c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a310:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a314:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	7812      	ldrb	r2, [r2, #0]
 800a32a:	0151      	lsls	r1, r2, #5
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	440a      	add	r2, r1
 800a330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a338:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3301      	adds	r3, #1
 800a33e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f242 7210 	movw	r2, #10000	; 0x2710
 800a346:	4293      	cmp	r3, r2
 800a348:	d902      	bls.n	800a350 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	75fb      	strb	r3, [r7, #23]
          break;
 800a34e:	e00c      	b.n	800a36a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	015a      	lsls	r2, r3, #5
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	4413      	add	r3, r2
 800a35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a368:	d0e7      	beq.n	800a33a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	371c      	adds	r7, #28
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a378:	b480      	push	{r7}
 800a37a:	b089      	sub	sp, #36	; 0x24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	4611      	mov	r1, r2
 800a384:	461a      	mov	r2, r3
 800a386:	460b      	mov	r3, r1
 800a388:	71fb      	strb	r3, [r7, #7]
 800a38a:	4613      	mov	r3, r2
 800a38c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a396:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d123      	bne.n	800a3e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a39e:	88bb      	ldrh	r3, [r7, #4]
 800a3a0:	3303      	adds	r3, #3
 800a3a2:	089b      	lsrs	r3, r3, #2
 800a3a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	61bb      	str	r3, [r7, #24]
 800a3aa:	e018      	b.n	800a3de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a3ac:	79fb      	ldrb	r3, [r7, #7]
 800a3ae:	031a      	lsls	r2, r3, #12
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	61bb      	str	r3, [r7, #24]
 800a3de:	69ba      	ldr	r2, [r7, #24]
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d3e2      	bcc.n	800a3ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3724      	adds	r7, #36	; 0x24
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b08b      	sub	sp, #44	; 0x2c
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	4613      	mov	r3, r2
 800a400:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a40a:	88fb      	ldrh	r3, [r7, #6]
 800a40c:	089b      	lsrs	r3, r3, #2
 800a40e:	b29b      	uxth	r3, r3
 800a410:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a412:	88fb      	ldrh	r3, [r7, #6]
 800a414:	f003 0303 	and.w	r3, r3, #3
 800a418:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a41a:	2300      	movs	r3, #0
 800a41c:	623b      	str	r3, [r7, #32]
 800a41e:	e014      	b.n	800a44a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	3301      	adds	r3, #1
 800a430:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	3301      	adds	r3, #1
 800a436:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	3301      	adds	r3, #1
 800a43c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	3301      	adds	r3, #1
 800a442:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	3301      	adds	r3, #1
 800a448:	623b      	str	r3, [r7, #32]
 800a44a:	6a3a      	ldr	r2, [r7, #32]
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d3e6      	bcc.n	800a420 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a452:	8bfb      	ldrh	r3, [r7, #30]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d01e      	beq.n	800a496 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a458:	2300      	movs	r3, #0
 800a45a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a462:	461a      	mov	r2, r3
 800a464:	f107 0310 	add.w	r3, r7, #16
 800a468:	6812      	ldr	r2, [r2, #0]
 800a46a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	b2db      	uxtb	r3, r3
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	fa22 f303 	lsr.w	r3, r2, r3
 800a478:	b2da      	uxtb	r2, r3
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	701a      	strb	r2, [r3, #0]
      i++;
 800a47e:	6a3b      	ldr	r3, [r7, #32]
 800a480:	3301      	adds	r3, #1
 800a482:	623b      	str	r3, [r7, #32]
      pDest++;
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	3301      	adds	r3, #1
 800a488:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a48a:	8bfb      	ldrh	r3, [r7, #30]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a490:	8bfb      	ldrh	r3, [r7, #30]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1ea      	bne.n	800a46c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a498:	4618      	mov	r0, r3
 800a49a:	372c      	adds	r7, #44	; 0x2c
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	785b      	ldrb	r3, [r3, #1]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d12c      	bne.n	800a51a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	015a      	lsls	r2, r3, #5
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	db12      	blt.n	800a4f8 <USB_EPSetStall+0x54>
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00f      	beq.n	800a4f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	015a      	lsls	r2, r3, #5
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	4413      	add	r3, r2
 800a4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	0151      	lsls	r1, r2, #5
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	440a      	add	r2, r1
 800a4ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a4f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	0151      	lsls	r1, r2, #5
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	440a      	add	r2, r1
 800a50e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a512:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a516:	6013      	str	r3, [r2, #0]
 800a518:	e02b      	b.n	800a572 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	db12      	blt.n	800a552 <USB_EPSetStall+0xae>
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00f      	beq.n	800a552 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	0151      	lsls	r1, r2, #5
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	440a      	add	r2, r1
 800a548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a54c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a550:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	015a      	lsls	r2, r3, #5
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	4413      	add	r3, r2
 800a55a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	0151      	lsls	r1, r2, #5
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	440a      	add	r2, r1
 800a568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a56c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a570:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3714      	adds	r7, #20
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	785b      	ldrb	r3, [r3, #1]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d128      	bne.n	800a5ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	015a      	lsls	r2, r3, #5
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	0151      	lsls	r1, r2, #5
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	440a      	add	r2, r1
 800a5b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	791b      	ldrb	r3, [r3, #4]
 800a5c0:	2b03      	cmp	r3, #3
 800a5c2:	d003      	beq.n	800a5cc <USB_EPClearStall+0x4c>
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	791b      	ldrb	r3, [r3, #4]
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d138      	bne.n	800a63e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	015a      	lsls	r2, r3, #5
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	0151      	lsls	r1, r2, #5
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	440a      	add	r2, r1
 800a5e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5ea:	6013      	str	r3, [r2, #0]
 800a5ec:	e027      	b.n	800a63e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	015a      	lsls	r2, r3, #5
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	0151      	lsls	r1, r2, #5
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	440a      	add	r2, r1
 800a604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a608:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a60c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	791b      	ldrb	r3, [r3, #4]
 800a612:	2b03      	cmp	r3, #3
 800a614:	d003      	beq.n	800a61e <USB_EPClearStall+0x9e>
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	791b      	ldrb	r3, [r3, #4]
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d10f      	bne.n	800a63e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	015a      	lsls	r2, r3, #5
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	4413      	add	r3, r2
 800a626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	0151      	lsls	r1, r2, #5
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	440a      	add	r2, r1
 800a634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a63c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a66a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a66e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	78fb      	ldrb	r3, [r7, #3]
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a680:	68f9      	ldr	r1, [r7, #12]
 800a682:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a686:	4313      	orrs	r3, r2
 800a688:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a6b2:	f023 0303 	bic.w	r3, r3, #3
 800a6b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6c6:	f023 0302 	bic.w	r3, r3, #2
 800a6ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b085      	sub	sp, #20
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a6f4:	f023 0303 	bic.w	r3, r3, #3
 800a6f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a708:	f043 0302 	orr.w	r3, r3, #2
 800a70c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	695b      	ldr	r3, [r3, #20]
 800a728:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	4013      	ands	r3, r2
 800a732:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a734:	68fb      	ldr	r3, [r7, #12]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a742:	b480      	push	{r7}
 800a744:	b085      	sub	sp, #20
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	4013      	ands	r3, r2
 800a764:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	0c1b      	lsrs	r3, r3, #16
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a776:	b480      	push	{r7}
 800a778:	b085      	sub	sp, #20
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a792:	69db      	ldr	r3, [r3, #28]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	4013      	ands	r3, r2
 800a798:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	b29b      	uxth	r3, r3
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a7ba:	78fb      	ldrb	r3, [r7, #3]
 800a7bc:	015a      	lsls	r2, r3, #5
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a7d8:	68bb      	ldr	r3, [r7, #8]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b087      	sub	sp, #28
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a808:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a80a:	78fb      	ldrb	r3, [r7, #3]
 800a80c:	f003 030f 	and.w	r3, r3, #15
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	fa22 f303 	lsr.w	r3, r2, r3
 800a816:	01db      	lsls	r3, r3, #7
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	693a      	ldr	r2, [r7, #16]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a820:	78fb      	ldrb	r3, [r7, #3]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	4013      	ands	r3, r2
 800a832:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a834:	68bb      	ldr	r3, [r7, #8]
}
 800a836:	4618      	mov	r0, r3
 800a838:	371c      	adds	r7, #28
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a842:	b480      	push	{r7}
 800a844:	b083      	sub	sp, #12
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	f003 0301 	and.w	r3, r3, #1
}
 800a852:	4618      	mov	r0, r3
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a85e:	b480      	push	{r7}
 800a860:	b085      	sub	sp, #20
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a878:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a87c:	f023 0307 	bic.w	r3, r3, #7
 800a880:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a894:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	333c      	adds	r3, #60	; 0x3c
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	4a26      	ldr	r2, [pc, #152]	; (800a95c <USB_EP0_OutStart+0xb8>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d90a      	bls.n	800a8de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8d8:	d101      	bne.n	800a8de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	e037      	b.n	800a94e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	697a      	ldr	r2, [r7, #20]
 800a8f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a90c:	f043 0318 	orr.w	r3, r3, #24
 800a910:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a920:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a924:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a926:	7afb      	ldrb	r3, [r7, #11]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d10f      	bne.n	800a94c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a932:	461a      	mov	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a946:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a94a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	371c      	adds	r7, #28
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	4f54300a 	.word	0x4f54300a

0800a960 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a968:	2300      	movs	r3, #0
 800a96a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3301      	adds	r3, #1
 800a970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4a13      	ldr	r2, [pc, #76]	; (800a9c4 <USB_CoreReset+0x64>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d901      	bls.n	800a97e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	e01b      	b.n	800a9b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	daf2      	bge.n	800a96c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a986:	2300      	movs	r3, #0
 800a988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	f043 0201 	orr.w	r2, r3, #1
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3301      	adds	r3, #1
 800a99a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	4a09      	ldr	r2, [pc, #36]	; (800a9c4 <USB_CoreReset+0x64>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d901      	bls.n	800a9a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	e006      	b.n	800a9b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d0f0      	beq.n	800a996 <USB_CoreReset+0x36>

  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	00030d40 	.word	0x00030d40

0800a9c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a9d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a9d8:	f005 fa10 	bl	800fdfc <USBD_static_malloc>
 800a9dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d109      	bne.n	800a9f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	32b0      	adds	r2, #176	; 0xb0
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	e0d4      	b.n	800aba2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a9f8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f010 fdb8 	bl	801b574 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	32b0      	adds	r2, #176	; 0xb0
 800aa0e:	68f9      	ldr	r1, [r7, #12]
 800aa10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	32b0      	adds	r2, #176	; 0xb0
 800aa1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	7c1b      	ldrb	r3, [r3, #16]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d138      	bne.n	800aaa2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aa30:	4b5e      	ldr	r3, [pc, #376]	; (800abac <USBD_CDC_Init+0x1e4>)
 800aa32:	7819      	ldrb	r1, [r3, #0]
 800aa34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa38:	2202      	movs	r2, #2
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f005 f8bb 	bl	800fbb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aa40:	4b5a      	ldr	r3, [pc, #360]	; (800abac <USBD_CDC_Init+0x1e4>)
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	f003 020f 	and.w	r2, r3, #15
 800aa48:	6879      	ldr	r1, [r7, #4]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4413      	add	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	440b      	add	r3, r1
 800aa54:	3324      	adds	r3, #36	; 0x24
 800aa56:	2201      	movs	r2, #1
 800aa58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aa5a:	4b55      	ldr	r3, [pc, #340]	; (800abb0 <USBD_CDC_Init+0x1e8>)
 800aa5c:	7819      	ldrb	r1, [r3, #0]
 800aa5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa62:	2202      	movs	r2, #2
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f005 f8a6 	bl	800fbb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aa6a:	4b51      	ldr	r3, [pc, #324]	; (800abb0 <USBD_CDC_Init+0x1e8>)
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	f003 020f 	and.w	r2, r3, #15
 800aa72:	6879      	ldr	r1, [r7, #4]
 800aa74:	4613      	mov	r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	4413      	add	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	440b      	add	r3, r1
 800aa7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa82:	2201      	movs	r2, #1
 800aa84:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aa86:	4b4b      	ldr	r3, [pc, #300]	; (800abb4 <USBD_CDC_Init+0x1ec>)
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	f003 020f 	and.w	r2, r3, #15
 800aa8e:	6879      	ldr	r1, [r7, #4]
 800aa90:	4613      	mov	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	440b      	add	r3, r1
 800aa9a:	3326      	adds	r3, #38	; 0x26
 800aa9c:	2210      	movs	r2, #16
 800aa9e:	801a      	strh	r2, [r3, #0]
 800aaa0:	e035      	b.n	800ab0e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aaa2:	4b42      	ldr	r3, [pc, #264]	; (800abac <USBD_CDC_Init+0x1e4>)
 800aaa4:	7819      	ldrb	r1, [r3, #0]
 800aaa6:	2340      	movs	r3, #64	; 0x40
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f005 f883 	bl	800fbb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aab0:	4b3e      	ldr	r3, [pc, #248]	; (800abac <USBD_CDC_Init+0x1e4>)
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	f003 020f 	and.w	r2, r3, #15
 800aab8:	6879      	ldr	r1, [r7, #4]
 800aaba:	4613      	mov	r3, r2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	4413      	add	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	440b      	add	r3, r1
 800aac4:	3324      	adds	r3, #36	; 0x24
 800aac6:	2201      	movs	r2, #1
 800aac8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aaca:	4b39      	ldr	r3, [pc, #228]	; (800abb0 <USBD_CDC_Init+0x1e8>)
 800aacc:	7819      	ldrb	r1, [r3, #0]
 800aace:	2340      	movs	r3, #64	; 0x40
 800aad0:	2202      	movs	r2, #2
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f005 f86f 	bl	800fbb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aad8:	4b35      	ldr	r3, [pc, #212]	; (800abb0 <USBD_CDC_Init+0x1e8>)
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	f003 020f 	and.w	r2, r3, #15
 800aae0:	6879      	ldr	r1, [r7, #4]
 800aae2:	4613      	mov	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	440b      	add	r3, r1
 800aaec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aaf4:	4b2f      	ldr	r3, [pc, #188]	; (800abb4 <USBD_CDC_Init+0x1ec>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	f003 020f 	and.w	r2, r3, #15
 800aafc:	6879      	ldr	r1, [r7, #4]
 800aafe:	4613      	mov	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	440b      	add	r3, r1
 800ab08:	3326      	adds	r3, #38	; 0x26
 800ab0a:	2210      	movs	r2, #16
 800ab0c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ab0e:	4b29      	ldr	r3, [pc, #164]	; (800abb4 <USBD_CDC_Init+0x1ec>)
 800ab10:	7819      	ldrb	r1, [r3, #0]
 800ab12:	2308      	movs	r3, #8
 800ab14:	2203      	movs	r2, #3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f005 f84d 	bl	800fbb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ab1c:	4b25      	ldr	r3, [pc, #148]	; (800abb4 <USBD_CDC_Init+0x1ec>)
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	f003 020f 	and.w	r2, r3, #15
 800ab24:	6879      	ldr	r1, [r7, #4]
 800ab26:	4613      	mov	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	440b      	add	r3, r1
 800ab30:	3324      	adds	r3, #36	; 0x24
 800ab32:	2201      	movs	r2, #1
 800ab34:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	33b0      	adds	r3, #176	; 0xb0
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	e018      	b.n	800aba2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	7c1b      	ldrb	r3, [r3, #16]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10a      	bne.n	800ab8e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab78:	4b0d      	ldr	r3, [pc, #52]	; (800abb0 <USBD_CDC_Init+0x1e8>)
 800ab7a:	7819      	ldrb	r1, [r3, #0]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab82:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f005 f904 	bl	800fd94 <USBD_LL_PrepareReceive>
 800ab8c:	e008      	b.n	800aba0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab8e:	4b08      	ldr	r3, [pc, #32]	; (800abb0 <USBD_CDC_Init+0x1e8>)
 800ab90:	7819      	ldrb	r1, [r3, #0]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab98:	2340      	movs	r3, #64	; 0x40
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f005 f8fa 	bl	800fd94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	20000097 	.word	0x20000097
 800abb0:	20000098 	.word	0x20000098
 800abb4:	20000099 	.word	0x20000099

0800abb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800abc4:	4b3a      	ldr	r3, [pc, #232]	; (800acb0 <USBD_CDC_DeInit+0xf8>)
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f005 f819 	bl	800fc02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800abd0:	4b37      	ldr	r3, [pc, #220]	; (800acb0 <USBD_CDC_DeInit+0xf8>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	f003 020f 	and.w	r2, r3, #15
 800abd8:	6879      	ldr	r1, [r7, #4]
 800abda:	4613      	mov	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	440b      	add	r3, r1
 800abe4:	3324      	adds	r3, #36	; 0x24
 800abe6:	2200      	movs	r2, #0
 800abe8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800abea:	4b32      	ldr	r3, [pc, #200]	; (800acb4 <USBD_CDC_DeInit+0xfc>)
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	4619      	mov	r1, r3
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f005 f806 	bl	800fc02 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800abf6:	4b2f      	ldr	r3, [pc, #188]	; (800acb4 <USBD_CDC_DeInit+0xfc>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	f003 020f 	and.w	r2, r3, #15
 800abfe:	6879      	ldr	r1, [r7, #4]
 800ac00:	4613      	mov	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4413      	add	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	440b      	add	r3, r1
 800ac0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ac0e:	2200      	movs	r2, #0
 800ac10:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ac12:	4b29      	ldr	r3, [pc, #164]	; (800acb8 <USBD_CDC_DeInit+0x100>)
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	4619      	mov	r1, r3
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f004 fff2 	bl	800fc02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ac1e:	4b26      	ldr	r3, [pc, #152]	; (800acb8 <USBD_CDC_DeInit+0x100>)
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	f003 020f 	and.w	r2, r3, #15
 800ac26:	6879      	ldr	r1, [r7, #4]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4413      	add	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	440b      	add	r3, r1
 800ac32:	3324      	adds	r3, #36	; 0x24
 800ac34:	2200      	movs	r2, #0
 800ac36:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ac38:	4b1f      	ldr	r3, [pc, #124]	; (800acb8 <USBD_CDC_DeInit+0x100>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	f003 020f 	and.w	r2, r3, #15
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	440b      	add	r3, r1
 800ac4c:	3326      	adds	r3, #38	; 0x26
 800ac4e:	2200      	movs	r2, #0
 800ac50:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	32b0      	adds	r2, #176	; 0xb0
 800ac5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d01f      	beq.n	800aca4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	33b0      	adds	r3, #176	; 0xb0
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	32b0      	adds	r2, #176	; 0xb0
 800ac82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac86:	4618      	mov	r0, r3
 800ac88:	f005 f8c6 	bl	800fe18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	32b0      	adds	r2, #176	; 0xb0
 800ac96:	2100      	movs	r1, #0
 800ac98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	20000097 	.word	0x20000097
 800acb4:	20000098 	.word	0x20000098
 800acb8:	20000099 	.word	0x20000099

0800acbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	32b0      	adds	r2, #176	; 0xb0
 800acd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800acd6:	2300      	movs	r3, #0
 800acd8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800acda:	2300      	movs	r3, #0
 800acdc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800acde:	2300      	movs	r3, #0
 800ace0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ace8:	2303      	movs	r3, #3
 800acea:	e0bf      	b.n	800ae6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d050      	beq.n	800ad9a <USBD_CDC_Setup+0xde>
 800acf8:	2b20      	cmp	r3, #32
 800acfa:	f040 80af 	bne.w	800ae5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	88db      	ldrh	r3, [r3, #6]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d03a      	beq.n	800ad7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	b25b      	sxtb	r3, r3
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	da1b      	bge.n	800ad48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	33b0      	adds	r3, #176	; 0xb0
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ad26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	88d2      	ldrh	r2, [r2, #6]
 800ad2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	88db      	ldrh	r3, [r3, #6]
 800ad32:	2b07      	cmp	r3, #7
 800ad34:	bf28      	it	cs
 800ad36:	2307      	movcs	r3, #7
 800ad38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	89fa      	ldrh	r2, [r7, #14]
 800ad3e:	4619      	mov	r1, r3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f001 fd43 	bl	800c7cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ad46:	e090      	b.n	800ae6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	785a      	ldrb	r2, [r3, #1]
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	88db      	ldrh	r3, [r3, #6]
 800ad56:	2b3f      	cmp	r3, #63	; 0x3f
 800ad58:	d803      	bhi.n	800ad62 <USBD_CDC_Setup+0xa6>
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	88db      	ldrh	r3, [r3, #6]
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	e000      	b.n	800ad64 <USBD_CDC_Setup+0xa8>
 800ad62:	2240      	movs	r2, #64	; 0x40
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ad6a:	6939      	ldr	r1, [r7, #16]
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ad72:	461a      	mov	r2, r3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f001 fd55 	bl	800c824 <USBD_CtlPrepareRx>
      break;
 800ad7a:	e076      	b.n	800ae6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	33b0      	adds	r3, #176	; 0xb0
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	7850      	ldrb	r0, [r2, #1]
 800ad92:	2200      	movs	r2, #0
 800ad94:	6839      	ldr	r1, [r7, #0]
 800ad96:	4798      	blx	r3
      break;
 800ad98:	e067      	b.n	800ae6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	785b      	ldrb	r3, [r3, #1]
 800ad9e:	2b0b      	cmp	r3, #11
 800ada0:	d851      	bhi.n	800ae46 <USBD_CDC_Setup+0x18a>
 800ada2:	a201      	add	r2, pc, #4	; (adr r2, 800ada8 <USBD_CDC_Setup+0xec>)
 800ada4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada8:	0800add9 	.word	0x0800add9
 800adac:	0800ae55 	.word	0x0800ae55
 800adb0:	0800ae47 	.word	0x0800ae47
 800adb4:	0800ae47 	.word	0x0800ae47
 800adb8:	0800ae47 	.word	0x0800ae47
 800adbc:	0800ae47 	.word	0x0800ae47
 800adc0:	0800ae47 	.word	0x0800ae47
 800adc4:	0800ae47 	.word	0x0800ae47
 800adc8:	0800ae47 	.word	0x0800ae47
 800adcc:	0800ae47 	.word	0x0800ae47
 800add0:	0800ae03 	.word	0x0800ae03
 800add4:	0800ae2d 	.word	0x0800ae2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	2b03      	cmp	r3, #3
 800ade2:	d107      	bne.n	800adf4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ade4:	f107 030a 	add.w	r3, r7, #10
 800ade8:	2202      	movs	r2, #2
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f001 fced 	bl	800c7cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800adf2:	e032      	b.n	800ae5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f001 fc77 	bl	800c6ea <USBD_CtlError>
            ret = USBD_FAIL;
 800adfc:	2303      	movs	r3, #3
 800adfe:	75fb      	strb	r3, [r7, #23]
          break;
 800ae00:	e02b      	b.n	800ae5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	d107      	bne.n	800ae1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae0e:	f107 030d 	add.w	r3, r7, #13
 800ae12:	2201      	movs	r2, #1
 800ae14:	4619      	mov	r1, r3
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f001 fcd8 	bl	800c7cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae1c:	e01d      	b.n	800ae5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae1e:	6839      	ldr	r1, [r7, #0]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f001 fc62 	bl	800c6ea <USBD_CtlError>
            ret = USBD_FAIL;
 800ae26:	2303      	movs	r3, #3
 800ae28:	75fb      	strb	r3, [r7, #23]
          break;
 800ae2a:	e016      	b.n	800ae5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b03      	cmp	r3, #3
 800ae36:	d00f      	beq.n	800ae58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f001 fc55 	bl	800c6ea <USBD_CtlError>
            ret = USBD_FAIL;
 800ae40:	2303      	movs	r3, #3
 800ae42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ae44:	e008      	b.n	800ae58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ae46:	6839      	ldr	r1, [r7, #0]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f001 fc4e 	bl	800c6ea <USBD_CtlError>
          ret = USBD_FAIL;
 800ae4e:	2303      	movs	r3, #3
 800ae50:	75fb      	strb	r3, [r7, #23]
          break;
 800ae52:	e002      	b.n	800ae5a <USBD_CDC_Setup+0x19e>
          break;
 800ae54:	bf00      	nop
 800ae56:	e008      	b.n	800ae6a <USBD_CDC_Setup+0x1ae>
          break;
 800ae58:	bf00      	nop
      }
      break;
 800ae5a:	e006      	b.n	800ae6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f001 fc43 	bl	800c6ea <USBD_CtlError>
      ret = USBD_FAIL;
 800ae64:	2303      	movs	r3, #3
 800ae66:	75fb      	strb	r3, [r7, #23]
      break;
 800ae68:	bf00      	nop
  }

  return (uint8_t)ret;
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	32b0      	adds	r2, #176	; 0xb0
 800ae92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d101      	bne.n	800ae9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e065      	b.n	800af6a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	32b0      	adds	r2, #176	; 0xb0
 800aea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aeae:	78fb      	ldrb	r3, [r7, #3]
 800aeb0:	f003 020f 	and.w	r2, r3, #15
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	440b      	add	r3, r1
 800aec0:	3318      	adds	r3, #24
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d02f      	beq.n	800af28 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aec8:	78fb      	ldrb	r3, [r7, #3]
 800aeca:	f003 020f 	and.w	r2, r3, #15
 800aece:	6879      	ldr	r1, [r7, #4]
 800aed0:	4613      	mov	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	440b      	add	r3, r1
 800aeda:	3318      	adds	r3, #24
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	78fb      	ldrb	r3, [r7, #3]
 800aee0:	f003 010f 	and.w	r1, r3, #15
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	460b      	mov	r3, r1
 800aee8:	00db      	lsls	r3, r3, #3
 800aeea:	440b      	add	r3, r1
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	4403      	add	r3, r0
 800aef0:	3348      	adds	r3, #72	; 0x48
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	fbb2 f1f3 	udiv	r1, r2, r3
 800aef8:	fb01 f303 	mul.w	r3, r1, r3
 800aefc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d112      	bne.n	800af28 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800af02:	78fb      	ldrb	r3, [r7, #3]
 800af04:	f003 020f 	and.w	r2, r3, #15
 800af08:	6879      	ldr	r1, [r7, #4]
 800af0a:	4613      	mov	r3, r2
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	4413      	add	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	440b      	add	r3, r1
 800af14:	3318      	adds	r3, #24
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af1a:	78f9      	ldrb	r1, [r7, #3]
 800af1c:	2300      	movs	r3, #0
 800af1e:	2200      	movs	r2, #0
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f004 ff16 	bl	800fd52 <USBD_LL_Transmit>
 800af26:	e01f      	b.n	800af68 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	33b0      	adds	r3, #176	; 0xb0
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d010      	beq.n	800af68 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	33b0      	adds	r3, #176	; 0xb0
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	4413      	add	r3, r2
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800af64:	78fa      	ldrb	r2, [r7, #3]
 800af66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	460b      	mov	r3, r1
 800af7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	32b0      	adds	r2, #176	; 0xb0
 800af88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	32b0      	adds	r2, #176	; 0xb0
 800af98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800afa0:	2303      	movs	r3, #3
 800afa2:	e01a      	b.n	800afda <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800afa4:	78fb      	ldrb	r3, [r7, #3]
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f004 ff14 	bl	800fdd6 <USBD_LL_GetRxDataSize>
 800afae:	4602      	mov	r2, r0
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	33b0      	adds	r3, #176	; 0xb0
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800afd4:	4611      	mov	r1, r2
 800afd6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b084      	sub	sp, #16
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	32b0      	adds	r2, #176	; 0xb0
 800aff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b000:	2303      	movs	r3, #3
 800b002:	e025      	b.n	800b050 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	33b0      	adds	r3, #176	; 0xb0
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	4413      	add	r3, r2
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d01a      	beq.n	800b04e <USBD_CDC_EP0_RxReady+0x6c>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b01e:	2bff      	cmp	r3, #255	; 0xff
 800b020:	d015      	beq.n	800b04e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	33b0      	adds	r3, #176	; 0xb0
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b03a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b042:	b292      	uxth	r2, r2
 800b044:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	22ff      	movs	r2, #255	; 0xff
 800b04a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b060:	2182      	movs	r1, #130	; 0x82
 800b062:	4818      	ldr	r0, [pc, #96]	; (800b0c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b064:	f000 fd09 	bl	800ba7a <USBD_GetEpDesc>
 800b068:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b06a:	2101      	movs	r1, #1
 800b06c:	4815      	ldr	r0, [pc, #84]	; (800b0c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b06e:	f000 fd04 	bl	800ba7a <USBD_GetEpDesc>
 800b072:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b074:	2181      	movs	r1, #129	; 0x81
 800b076:	4813      	ldr	r0, [pc, #76]	; (800b0c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b078:	f000 fcff 	bl	800ba7a <USBD_GetEpDesc>
 800b07c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2210      	movs	r2, #16
 800b088:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d006      	beq.n	800b09e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	2200      	movs	r2, #0
 800b094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b098:	711a      	strb	r2, [r3, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d006      	beq.n	800b0b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0ac:	711a      	strb	r2, [r3, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2243      	movs	r2, #67	; 0x43
 800b0b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b0b8:	4b02      	ldr	r3, [pc, #8]	; (800b0c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3718      	adds	r7, #24
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	20000054 	.word	0x20000054

0800b0c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b0d0:	2182      	movs	r1, #130	; 0x82
 800b0d2:	4818      	ldr	r0, [pc, #96]	; (800b134 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b0d4:	f000 fcd1 	bl	800ba7a <USBD_GetEpDesc>
 800b0d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b0da:	2101      	movs	r1, #1
 800b0dc:	4815      	ldr	r0, [pc, #84]	; (800b134 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b0de:	f000 fccc 	bl	800ba7a <USBD_GetEpDesc>
 800b0e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b0e4:	2181      	movs	r1, #129	; 0x81
 800b0e6:	4813      	ldr	r0, [pc, #76]	; (800b134 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b0e8:	f000 fcc7 	bl	800ba7a <USBD_GetEpDesc>
 800b0ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d002      	beq.n	800b0fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	2210      	movs	r2, #16
 800b0f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d006      	beq.n	800b10e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	2200      	movs	r2, #0
 800b104:	711a      	strb	r2, [r3, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	f042 0202 	orr.w	r2, r2, #2
 800b10c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d006      	beq.n	800b122 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2200      	movs	r2, #0
 800b118:	711a      	strb	r2, [r3, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f042 0202 	orr.w	r2, r2, #2
 800b120:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2243      	movs	r2, #67	; 0x43
 800b126:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b128:	4b02      	ldr	r3, [pc, #8]	; (800b134 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3718      	adds	r7, #24
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	20000054 	.word	0x20000054

0800b138 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b140:	2182      	movs	r1, #130	; 0x82
 800b142:	4818      	ldr	r0, [pc, #96]	; (800b1a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b144:	f000 fc99 	bl	800ba7a <USBD_GetEpDesc>
 800b148:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b14a:	2101      	movs	r1, #1
 800b14c:	4815      	ldr	r0, [pc, #84]	; (800b1a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b14e:	f000 fc94 	bl	800ba7a <USBD_GetEpDesc>
 800b152:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b154:	2181      	movs	r1, #129	; 0x81
 800b156:	4813      	ldr	r0, [pc, #76]	; (800b1a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b158:	f000 fc8f 	bl	800ba7a <USBD_GetEpDesc>
 800b15c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	2210      	movs	r2, #16
 800b168:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d006      	beq.n	800b17e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	2200      	movs	r2, #0
 800b174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b178:	711a      	strb	r2, [r3, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d006      	beq.n	800b192 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b18c:	711a      	strb	r2, [r3, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2243      	movs	r2, #67	; 0x43
 800b196:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b198:	4b02      	ldr	r3, [pc, #8]	; (800b1a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3718      	adds	r7, #24
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	20000054 	.word	0x20000054

0800b1a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	220a      	movs	r2, #10
 800b1b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b1b6:	4b03      	ldr	r3, [pc, #12]	; (800b1c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr
 800b1c4:	20000010 	.word	0x20000010

0800b1c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d101      	bne.n	800b1dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b1d8:	2303      	movs	r3, #3
 800b1da:	e009      	b.n	800b1f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	33b0      	adds	r3, #176	; 0xb0
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4413      	add	r3, r2
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b087      	sub	sp, #28
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	32b0      	adds	r2, #176	; 0xb0
 800b212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b216:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b21e:	2303      	movs	r3, #3
 800b220:	e008      	b.n	800b234 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	371c      	adds	r7, #28
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	32b0      	adds	r2, #176	; 0xb0
 800b254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b258:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d101      	bne.n	800b264 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b260:	2303      	movs	r3, #3
 800b262:	e004      	b.n	800b26e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3714      	adds	r7, #20
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
	...

0800b27c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	32b0      	adds	r2, #176	; 0xb0
 800b28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b292:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	32b0      	adds	r2, #176	; 0xb0
 800b29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	e018      	b.n	800b2dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	7c1b      	ldrb	r3, [r3, #16]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d10a      	bne.n	800b2c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2b2:	4b0c      	ldr	r3, [pc, #48]	; (800b2e4 <USBD_CDC_ReceivePacket+0x68>)
 800b2b4:	7819      	ldrb	r1, [r3, #0]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f004 fd67 	bl	800fd94 <USBD_LL_PrepareReceive>
 800b2c6:	e008      	b.n	800b2da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2c8:	4b06      	ldr	r3, [pc, #24]	; (800b2e4 <USBD_CDC_ReceivePacket+0x68>)
 800b2ca:	7819      	ldrb	r1, [r3, #0]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2d2:	2340      	movs	r3, #64	; 0x40
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f004 fd5d 	bl	800fd94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	20000098 	.word	0x20000098

0800b2e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d101      	bne.n	800b300 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	e01f      	b.n	800b340 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2201      	movs	r2, #1
 800b32a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	79fa      	ldrb	r2, [r7, #7]
 800b332:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f004 fbd7 	bl	800fae8 <USBD_LL_Init>
 800b33a:	4603      	mov	r3, r0
 800b33c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3718      	adds	r7, #24
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b352:	2300      	movs	r3, #0
 800b354:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d101      	bne.n	800b360 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b35c:	2303      	movs	r3, #3
 800b35e:	e025      	b.n	800b3ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	32ae      	adds	r2, #174	; 0xae
 800b372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00f      	beq.n	800b39c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	32ae      	adds	r2, #174	; 0xae
 800b386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38c:	f107 020e 	add.w	r2, r7, #14
 800b390:	4610      	mov	r0, r2
 800b392:	4798      	blx	r3
 800b394:	4602      	mov	r2, r0
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b3a2:	1c5a      	adds	r2, r3, #1
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f004 fbdf 	bl	800fb80 <USBD_LL_Start>
 800b3c2:	4603      	mov	r3, r0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b084      	sub	sp, #16
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d009      	beq.n	800b410 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	78fa      	ldrb	r2, [r7, #3]
 800b406:	4611      	mov	r1, r2
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	4798      	blx	r3
 800b40c:	4603      	mov	r3, r0
 800b40e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b410:	7bfb      	ldrb	r3, [r7, #15]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b084      	sub	sp, #16
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	460b      	mov	r3, r1
 800b424:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	78fa      	ldrb	r2, [r7, #3]
 800b434:	4611      	mov	r1, r2
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	4798      	blx	r3
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b440:	2303      	movs	r3, #3
 800b442:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b45e:	6839      	ldr	r1, [r7, #0]
 800b460:	4618      	mov	r0, r3
 800b462:	f001 f908 	bl	800c676 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b474:	461a      	mov	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b482:	f003 031f 	and.w	r3, r3, #31
 800b486:	2b02      	cmp	r3, #2
 800b488:	d01a      	beq.n	800b4c0 <USBD_LL_SetupStage+0x72>
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d822      	bhi.n	800b4d4 <USBD_LL_SetupStage+0x86>
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d002      	beq.n	800b498 <USBD_LL_SetupStage+0x4a>
 800b492:	2b01      	cmp	r3, #1
 800b494:	d00a      	beq.n	800b4ac <USBD_LL_SetupStage+0x5e>
 800b496:	e01d      	b.n	800b4d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b49e:	4619      	mov	r1, r3
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fb5f 	bl	800bb64 <USBD_StdDevReq>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4aa:	e020      	b.n	800b4ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 fbc7 	bl	800bc48 <USBD_StdItfReq>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b4be:	e016      	b.n	800b4ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fc29 	bl	800bd20 <USBD_StdEPReq>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b4d2:	e00c      	b.n	800b4ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b4da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f004 fbac 	bl	800fc40 <USBD_LL_StallEP>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ec:	bf00      	nop
  }

  return ret;
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	460b      	mov	r3, r1
 800b502:	607a      	str	r2, [r7, #4]
 800b504:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b50a:	7afb      	ldrb	r3, [r7, #11]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d16e      	bne.n	800b5ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b516:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b51e:	2b03      	cmp	r3, #3
 800b520:	f040 8098 	bne.w	800b654 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	689a      	ldr	r2, [r3, #8]
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d913      	bls.n	800b558 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	689a      	ldr	r2, [r3, #8]
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	1ad2      	subs	r2, r2, r3
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	68da      	ldr	r2, [r3, #12]
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	4293      	cmp	r3, r2
 800b548:	bf28      	it	cs
 800b54a:	4613      	movcs	r3, r2
 800b54c:	461a      	mov	r2, r3
 800b54e:	6879      	ldr	r1, [r7, #4]
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f001 f984 	bl	800c85e <USBD_CtlContinueRx>
 800b556:	e07d      	b.n	800b654 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b55e:	f003 031f 	and.w	r3, r3, #31
 800b562:	2b02      	cmp	r3, #2
 800b564:	d014      	beq.n	800b590 <USBD_LL_DataOutStage+0x98>
 800b566:	2b02      	cmp	r3, #2
 800b568:	d81d      	bhi.n	800b5a6 <USBD_LL_DataOutStage+0xae>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d002      	beq.n	800b574 <USBD_LL_DataOutStage+0x7c>
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d003      	beq.n	800b57a <USBD_LL_DataOutStage+0x82>
 800b572:	e018      	b.n	800b5a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b574:	2300      	movs	r3, #0
 800b576:	75bb      	strb	r3, [r7, #22]
            break;
 800b578:	e018      	b.n	800b5ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b580:	b2db      	uxtb	r3, r3
 800b582:	4619      	mov	r1, r3
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f000 fa5e 	bl	800ba46 <USBD_CoreFindIF>
 800b58a:	4603      	mov	r3, r0
 800b58c:	75bb      	strb	r3, [r7, #22]
            break;
 800b58e:	e00d      	b.n	800b5ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b596:	b2db      	uxtb	r3, r3
 800b598:	4619      	mov	r1, r3
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f000 fa60 	bl	800ba60 <USBD_CoreFindEP>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	75bb      	strb	r3, [r7, #22]
            break;
 800b5a4:	e002      	b.n	800b5ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	75bb      	strb	r3, [r7, #22]
            break;
 800b5aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b5ac:	7dbb      	ldrb	r3, [r7, #22]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d119      	bne.n	800b5e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b03      	cmp	r3, #3
 800b5bc:	d113      	bne.n	800b5e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b5be:	7dba      	ldrb	r2, [r7, #22]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	32ae      	adds	r2, #174	; 0xae
 800b5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00b      	beq.n	800b5e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b5ce:	7dba      	ldrb	r2, [r7, #22]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b5d6:	7dba      	ldrb	r2, [r7, #22]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	32ae      	adds	r2, #174	; 0xae
 800b5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f001 f94a 	bl	800c880 <USBD_CtlSendStatus>
 800b5ec:	e032      	b.n	800b654 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b5ee:	7afb      	ldrb	r3, [r7, #11]
 800b5f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f000 fa31 	bl	800ba60 <USBD_CoreFindEP>
 800b5fe:	4603      	mov	r3, r0
 800b600:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b602:	7dbb      	ldrb	r3, [r7, #22]
 800b604:	2bff      	cmp	r3, #255	; 0xff
 800b606:	d025      	beq.n	800b654 <USBD_LL_DataOutStage+0x15c>
 800b608:	7dbb      	ldrb	r3, [r7, #22]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d122      	bne.n	800b654 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b614:	b2db      	uxtb	r3, r3
 800b616:	2b03      	cmp	r3, #3
 800b618:	d117      	bne.n	800b64a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b61a:	7dba      	ldrb	r2, [r7, #22]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	32ae      	adds	r2, #174	; 0xae
 800b620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00f      	beq.n	800b64a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b62a:	7dba      	ldrb	r2, [r7, #22]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b632:	7dba      	ldrb	r2, [r7, #22]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	32ae      	adds	r2, #174	; 0xae
 800b638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	7afa      	ldrb	r2, [r7, #11]
 800b640:	4611      	mov	r1, r2
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	4798      	blx	r3
 800b646:	4603      	mov	r3, r0
 800b648:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b64a:	7dfb      	ldrb	r3, [r7, #23]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d001      	beq.n	800b654 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b650:	7dfb      	ldrb	r3, [r7, #23]
 800b652:	e000      	b.n	800b656 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3718      	adds	r7, #24
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b086      	sub	sp, #24
 800b662:	af00      	add	r7, sp, #0
 800b664:	60f8      	str	r0, [r7, #12]
 800b666:	460b      	mov	r3, r1
 800b668:	607a      	str	r2, [r7, #4]
 800b66a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b66c:	7afb      	ldrb	r3, [r7, #11]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d16f      	bne.n	800b752 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	3314      	adds	r3, #20
 800b676:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d15a      	bne.n	800b738 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	689a      	ldr	r2, [r3, #8]
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d914      	bls.n	800b6b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	689a      	ldr	r2, [r3, #8]
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	1ad2      	subs	r2, r2, r3
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	6879      	ldr	r1, [r7, #4]
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f001 f8ac 	bl	800c802 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f004 fb6f 	bl	800fd94 <USBD_LL_PrepareReceive>
 800b6b6:	e03f      	b.n	800b738 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	68da      	ldr	r2, [r3, #12]
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d11c      	bne.n	800b6fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d316      	bcc.n	800b6fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	685a      	ldr	r2, [r3, #4]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d20f      	bcs.n	800b6fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b6de:	2200      	movs	r2, #0
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f001 f88d 	bl	800c802 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f004 fb4c 	bl	800fd94 <USBD_LL_PrepareReceive>
 800b6fc:	e01c      	b.n	800b738 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b03      	cmp	r3, #3
 800b708:	d10f      	bne.n	800b72a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d009      	beq.n	800b72a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b72a:	2180      	movs	r1, #128	; 0x80
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f004 fa87 	bl	800fc40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f001 f8b7 	bl	800c8a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d03a      	beq.n	800b7b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f7ff fe42 	bl	800b3cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b750:	e032      	b.n	800b7b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b752:	7afb      	ldrb	r3, [r7, #11]
 800b754:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	4619      	mov	r1, r3
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f000 f97f 	bl	800ba60 <USBD_CoreFindEP>
 800b762:	4603      	mov	r3, r0
 800b764:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b766:	7dfb      	ldrb	r3, [r7, #23]
 800b768:	2bff      	cmp	r3, #255	; 0xff
 800b76a:	d025      	beq.n	800b7b8 <USBD_LL_DataInStage+0x15a>
 800b76c:	7dfb      	ldrb	r3, [r7, #23]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d122      	bne.n	800b7b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	d11c      	bne.n	800b7b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b77e:	7dfa      	ldrb	r2, [r7, #23]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	32ae      	adds	r2, #174	; 0xae
 800b784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d014      	beq.n	800b7b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b78e:	7dfa      	ldrb	r2, [r7, #23]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b796:	7dfa      	ldrb	r2, [r7, #23]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	32ae      	adds	r2, #174	; 0xae
 800b79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a0:	695b      	ldr	r3, [r3, #20]
 800b7a2:	7afa      	ldrb	r2, [r7, #11]
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	4798      	blx	r3
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b7ae:	7dbb      	ldrb	r3, [r7, #22]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b7b4:	7dbb      	ldrb	r3, [r7, #22]
 800b7b6:	e000      	b.n	800b7ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d014      	beq.n	800b828 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00e      	beq.n	800b828 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	6852      	ldr	r2, [r2, #4]
 800b816:	b2d2      	uxtb	r2, r2
 800b818:	4611      	mov	r1, r2
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	4798      	blx	r3
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d001      	beq.n	800b828 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b824:	2303      	movs	r3, #3
 800b826:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b828:	2340      	movs	r3, #64	; 0x40
 800b82a:	2200      	movs	r2, #0
 800b82c:	2100      	movs	r1, #0
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f004 f9c1 	bl	800fbb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2240      	movs	r2, #64	; 0x40
 800b840:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b844:	2340      	movs	r3, #64	; 0x40
 800b846:	2200      	movs	r2, #0
 800b848:	2180      	movs	r1, #128	; 0x80
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f004 f9b3 	bl	800fbb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2240      	movs	r2, #64	; 0x40
 800b85a:	621a      	str	r2, [r3, #32]

  return ret;
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b866:	b480      	push	{r7}
 800b868:	b083      	sub	sp, #12
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	460b      	mov	r3, r1
 800b870:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	78fa      	ldrb	r2, [r7, #3]
 800b876:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b886:	b480      	push	{r7}
 800b888:	b083      	sub	sp, #12
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b894:	b2da      	uxtb	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2204      	movs	r2, #4
 800b8a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr

0800b8b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b8b2:	b480      	push	{r7}
 800b8b4:	b083      	sub	sp, #12
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	2b04      	cmp	r3, #4
 800b8c4:	d106      	bne.n	800b8d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b082      	sub	sp, #8
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	d110      	bne.n	800b918 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00b      	beq.n	800b918 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b906:	69db      	ldr	r3, [r3, #28]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d005      	beq.n	800b918 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b912:	69db      	ldr	r3, [r3, #28]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b082      	sub	sp, #8
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	460b      	mov	r3, r1
 800b92c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	32ae      	adds	r2, #174	; 0xae
 800b938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b940:	2303      	movs	r3, #3
 800b942:	e01c      	b.n	800b97e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	2b03      	cmp	r3, #3
 800b94e:	d115      	bne.n	800b97c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	32ae      	adds	r2, #174	; 0xae
 800b95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95e:	6a1b      	ldr	r3, [r3, #32]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00b      	beq.n	800b97c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	32ae      	adds	r2, #174	; 0xae
 800b96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b972:	6a1b      	ldr	r3, [r3, #32]
 800b974:	78fa      	ldrb	r2, [r7, #3]
 800b976:	4611      	mov	r1, r2
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}

0800b986 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b986:	b580      	push	{r7, lr}
 800b988:	b082      	sub	sp, #8
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
 800b98e:	460b      	mov	r3, r1
 800b990:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	32ae      	adds	r2, #174	; 0xae
 800b99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d101      	bne.n	800b9a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	e01c      	b.n	800b9e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b03      	cmp	r3, #3
 800b9b2:	d115      	bne.n	800b9e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	32ae      	adds	r2, #174	; 0xae
 800b9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d00b      	beq.n	800b9e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	32ae      	adds	r2, #174	; 0xae
 800b9d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	78fa      	ldrb	r2, [r7, #3]
 800b9da:	4611      	mov	r1, r2
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	b083      	sub	sp, #12
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00e      	beq.n	800ba3c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	6852      	ldr	r2, [r2, #4]
 800ba2a:	b2d2      	uxtb	r2, r2
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	4798      	blx	r3
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d001      	beq.n	800ba3c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba46:	b480      	push	{r7}
 800ba48:	b083      	sub	sp, #12
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	460b      	mov	r3, r1
 800ba50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	370c      	adds	r7, #12
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b083      	sub	sp, #12
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b086      	sub	sp, #24
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	460b      	mov	r3, r1
 800ba84:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	885b      	ldrh	r3, [r3, #2]
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d920      	bls.n	800bae4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800baaa:	e013      	b.n	800bad4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800baac:	f107 030a 	add.w	r3, r7, #10
 800bab0:	4619      	mov	r1, r3
 800bab2:	6978      	ldr	r0, [r7, #20]
 800bab4:	f000 f81b 	bl	800baee <USBD_GetNextDesc>
 800bab8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	785b      	ldrb	r3, [r3, #1]
 800babe:	2b05      	cmp	r3, #5
 800bac0:	d108      	bne.n	800bad4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	789b      	ldrb	r3, [r3, #2]
 800baca:	78fa      	ldrb	r2, [r7, #3]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d008      	beq.n	800bae2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bad0:	2300      	movs	r3, #0
 800bad2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	885b      	ldrh	r3, [r3, #2]
 800bad8:	b29a      	uxth	r2, r3
 800bada:	897b      	ldrh	r3, [r7, #10]
 800badc:	429a      	cmp	r2, r3
 800bade:	d8e5      	bhi.n	800baac <USBD_GetEpDesc+0x32>
 800bae0:	e000      	b.n	800bae4 <USBD_GetEpDesc+0x6a>
          break;
 800bae2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bae4:	693b      	ldr	r3, [r7, #16]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3718      	adds	r7, #24
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800baee:	b480      	push	{r7}
 800baf0:	b085      	sub	sp, #20
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	881a      	ldrh	r2, [r3, #0]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	4413      	add	r3, r2
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	461a      	mov	r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4413      	add	r3, r2
 800bb18:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b087      	sub	sp, #28
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb46:	8a3b      	ldrh	r3, [r7, #16]
 800bb48:	021b      	lsls	r3, r3, #8
 800bb4a:	b21a      	sxth	r2, r3
 800bb4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	b21b      	sxth	r3, r3
 800bb54:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bb56:	89fb      	ldrh	r3, [r7, #14]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	371c      	adds	r7, #28
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb7a:	2b40      	cmp	r3, #64	; 0x40
 800bb7c:	d005      	beq.n	800bb8a <USBD_StdDevReq+0x26>
 800bb7e:	2b40      	cmp	r3, #64	; 0x40
 800bb80:	d857      	bhi.n	800bc32 <USBD_StdDevReq+0xce>
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00f      	beq.n	800bba6 <USBD_StdDevReq+0x42>
 800bb86:	2b20      	cmp	r3, #32
 800bb88:	d153      	bne.n	800bc32 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	32ae      	adds	r2, #174	; 0xae
 800bb94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	4798      	blx	r3
 800bba0:	4603      	mov	r3, r0
 800bba2:	73fb      	strb	r3, [r7, #15]
      break;
 800bba4:	e04a      	b.n	800bc3c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	785b      	ldrb	r3, [r3, #1]
 800bbaa:	2b09      	cmp	r3, #9
 800bbac:	d83b      	bhi.n	800bc26 <USBD_StdDevReq+0xc2>
 800bbae:	a201      	add	r2, pc, #4	; (adr r2, 800bbb4 <USBD_StdDevReq+0x50>)
 800bbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb4:	0800bc09 	.word	0x0800bc09
 800bbb8:	0800bc1d 	.word	0x0800bc1d
 800bbbc:	0800bc27 	.word	0x0800bc27
 800bbc0:	0800bc13 	.word	0x0800bc13
 800bbc4:	0800bc27 	.word	0x0800bc27
 800bbc8:	0800bbe7 	.word	0x0800bbe7
 800bbcc:	0800bbdd 	.word	0x0800bbdd
 800bbd0:	0800bc27 	.word	0x0800bc27
 800bbd4:	0800bbff 	.word	0x0800bbff
 800bbd8:	0800bbf1 	.word	0x0800bbf1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fa3c 	bl	800c05c <USBD_GetDescriptor>
          break;
 800bbe4:	e024      	b.n	800bc30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fba1 	bl	800c330 <USBD_SetAddress>
          break;
 800bbee:	e01f      	b.n	800bc30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bbf0:	6839      	ldr	r1, [r7, #0]
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 fbe0 	bl	800c3b8 <USBD_SetConfig>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	73fb      	strb	r3, [r7, #15]
          break;
 800bbfc:	e018      	b.n	800bc30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fc83 	bl	800c50c <USBD_GetConfig>
          break;
 800bc06:	e013      	b.n	800bc30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc08:	6839      	ldr	r1, [r7, #0]
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fcb4 	bl	800c578 <USBD_GetStatus>
          break;
 800bc10:	e00e      	b.n	800bc30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fce3 	bl	800c5e0 <USBD_SetFeature>
          break;
 800bc1a:	e009      	b.n	800bc30 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc1c:	6839      	ldr	r1, [r7, #0]
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 fd07 	bl	800c632 <USBD_ClrFeature>
          break;
 800bc24:	e004      	b.n	800bc30 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bc26:	6839      	ldr	r1, [r7, #0]
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 fd5e 	bl	800c6ea <USBD_CtlError>
          break;
 800bc2e:	bf00      	nop
      }
      break;
 800bc30:	e004      	b.n	800bc3c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fd58 	bl	800c6ea <USBD_CtlError>
      break;
 800bc3a:	bf00      	nop
  }

  return ret;
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop

0800bc48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc52:	2300      	movs	r3, #0
 800bc54:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc5e:	2b40      	cmp	r3, #64	; 0x40
 800bc60:	d005      	beq.n	800bc6e <USBD_StdItfReq+0x26>
 800bc62:	2b40      	cmp	r3, #64	; 0x40
 800bc64:	d852      	bhi.n	800bd0c <USBD_StdItfReq+0xc4>
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d001      	beq.n	800bc6e <USBD_StdItfReq+0x26>
 800bc6a:	2b20      	cmp	r3, #32
 800bc6c:	d14e      	bne.n	800bd0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	3b01      	subs	r3, #1
 800bc78:	2b02      	cmp	r3, #2
 800bc7a:	d840      	bhi.n	800bcfe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	889b      	ldrh	r3, [r3, #4]
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d836      	bhi.n	800bcf4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	889b      	ldrh	r3, [r3, #4]
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f7ff fed9 	bl	800ba46 <USBD_CoreFindIF>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	2bff      	cmp	r3, #255	; 0xff
 800bc9c:	d01d      	beq.n	800bcda <USBD_StdItfReq+0x92>
 800bc9e:	7bbb      	ldrb	r3, [r7, #14]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d11a      	bne.n	800bcda <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bca4:	7bba      	ldrb	r2, [r7, #14]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	32ae      	adds	r2, #174	; 0xae
 800bcaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00f      	beq.n	800bcd4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bcb4:	7bba      	ldrb	r2, [r7, #14]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bcbc:	7bba      	ldrb	r2, [r7, #14]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	32ae      	adds	r2, #174	; 0xae
 800bcc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	6839      	ldr	r1, [r7, #0]
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	4798      	blx	r3
 800bcce:	4603      	mov	r3, r0
 800bcd0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bcd2:	e004      	b.n	800bcde <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bcd8:	e001      	b.n	800bcde <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	88db      	ldrh	r3, [r3, #6]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d110      	bne.n	800bd08 <USBD_StdItfReq+0xc0>
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10d      	bne.n	800bd08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 fdc7 	bl	800c880 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bcf2:	e009      	b.n	800bd08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fcf7 	bl	800c6ea <USBD_CtlError>
          break;
 800bcfc:	e004      	b.n	800bd08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bcfe:	6839      	ldr	r1, [r7, #0]
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fcf2 	bl	800c6ea <USBD_CtlError>
          break;
 800bd06:	e000      	b.n	800bd0a <USBD_StdItfReq+0xc2>
          break;
 800bd08:	bf00      	nop
      }
      break;
 800bd0a:	e004      	b.n	800bd16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fceb 	bl	800c6ea <USBD_CtlError>
      break;
 800bd14:	bf00      	nop
  }

  return ret;
 800bd16:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	889b      	ldrh	r3, [r3, #4]
 800bd32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd3c:	2b40      	cmp	r3, #64	; 0x40
 800bd3e:	d007      	beq.n	800bd50 <USBD_StdEPReq+0x30>
 800bd40:	2b40      	cmp	r3, #64	; 0x40
 800bd42:	f200 817f 	bhi.w	800c044 <USBD_StdEPReq+0x324>
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d02a      	beq.n	800bda0 <USBD_StdEPReq+0x80>
 800bd4a:	2b20      	cmp	r3, #32
 800bd4c:	f040 817a 	bne.w	800c044 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
 800bd52:	4619      	mov	r1, r3
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f7ff fe83 	bl	800ba60 <USBD_CoreFindEP>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd5e:	7b7b      	ldrb	r3, [r7, #13]
 800bd60:	2bff      	cmp	r3, #255	; 0xff
 800bd62:	f000 8174 	beq.w	800c04e <USBD_StdEPReq+0x32e>
 800bd66:	7b7b      	ldrb	r3, [r7, #13]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f040 8170 	bne.w	800c04e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bd6e:	7b7a      	ldrb	r2, [r7, #13]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bd76:	7b7a      	ldrb	r2, [r7, #13]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	32ae      	adds	r2, #174	; 0xae
 800bd7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f000 8163 	beq.w	800c04e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bd88:	7b7a      	ldrb	r2, [r7, #13]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	32ae      	adds	r2, #174	; 0xae
 800bd8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	6839      	ldr	r1, [r7, #0]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	4798      	blx	r3
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bd9e:	e156      	b.n	800c04e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	785b      	ldrb	r3, [r3, #1]
 800bda4:	2b03      	cmp	r3, #3
 800bda6:	d008      	beq.n	800bdba <USBD_StdEPReq+0x9a>
 800bda8:	2b03      	cmp	r3, #3
 800bdaa:	f300 8145 	bgt.w	800c038 <USBD_StdEPReq+0x318>
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f000 809b 	beq.w	800beea <USBD_StdEPReq+0x1ca>
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d03c      	beq.n	800be32 <USBD_StdEPReq+0x112>
 800bdb8:	e13e      	b.n	800c038 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d002      	beq.n	800bdcc <USBD_StdEPReq+0xac>
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	d016      	beq.n	800bdf8 <USBD_StdEPReq+0xd8>
 800bdca:	e02c      	b.n	800be26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdcc:	7bbb      	ldrb	r3, [r7, #14]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00d      	beq.n	800bdee <USBD_StdEPReq+0xce>
 800bdd2:	7bbb      	ldrb	r3, [r7, #14]
 800bdd4:	2b80      	cmp	r3, #128	; 0x80
 800bdd6:	d00a      	beq.n	800bdee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdd8:	7bbb      	ldrb	r3, [r7, #14]
 800bdda:	4619      	mov	r1, r3
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f003 ff2f 	bl	800fc40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bde2:	2180      	movs	r1, #128	; 0x80
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f003 ff2b 	bl	800fc40 <USBD_LL_StallEP>
 800bdea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bdec:	e020      	b.n	800be30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fc7a 	bl	800c6ea <USBD_CtlError>
              break;
 800bdf6:	e01b      	b.n	800be30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	885b      	ldrh	r3, [r3, #2]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10e      	bne.n	800be1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800be00:	7bbb      	ldrb	r3, [r7, #14]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00b      	beq.n	800be1e <USBD_StdEPReq+0xfe>
 800be06:	7bbb      	ldrb	r3, [r7, #14]
 800be08:	2b80      	cmp	r3, #128	; 0x80
 800be0a:	d008      	beq.n	800be1e <USBD_StdEPReq+0xfe>
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	88db      	ldrh	r3, [r3, #6]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d104      	bne.n	800be1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800be14:	7bbb      	ldrb	r3, [r7, #14]
 800be16:	4619      	mov	r1, r3
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f003 ff11 	bl	800fc40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fd2e 	bl	800c880 <USBD_CtlSendStatus>

              break;
 800be24:	e004      	b.n	800be30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fc5e 	bl	800c6ea <USBD_CtlError>
              break;
 800be2e:	bf00      	nop
          }
          break;
 800be30:	e107      	b.n	800c042 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d002      	beq.n	800be44 <USBD_StdEPReq+0x124>
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d016      	beq.n	800be70 <USBD_StdEPReq+0x150>
 800be42:	e04b      	b.n	800bedc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be44:	7bbb      	ldrb	r3, [r7, #14]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00d      	beq.n	800be66 <USBD_StdEPReq+0x146>
 800be4a:	7bbb      	ldrb	r3, [r7, #14]
 800be4c:	2b80      	cmp	r3, #128	; 0x80
 800be4e:	d00a      	beq.n	800be66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be50:	7bbb      	ldrb	r3, [r7, #14]
 800be52:	4619      	mov	r1, r3
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f003 fef3 	bl	800fc40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be5a:	2180      	movs	r1, #128	; 0x80
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f003 feef 	bl	800fc40 <USBD_LL_StallEP>
 800be62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be64:	e040      	b.n	800bee8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800be66:	6839      	ldr	r1, [r7, #0]
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fc3e 	bl	800c6ea <USBD_CtlError>
              break;
 800be6e:	e03b      	b.n	800bee8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	885b      	ldrh	r3, [r3, #2]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d136      	bne.n	800bee6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800be78:	7bbb      	ldrb	r3, [r7, #14]
 800be7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d004      	beq.n	800be8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800be82:	7bbb      	ldrb	r3, [r7, #14]
 800be84:	4619      	mov	r1, r3
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f003 fef9 	bl	800fc7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fcf7 	bl	800c880 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800be92:	7bbb      	ldrb	r3, [r7, #14]
 800be94:	4619      	mov	r1, r3
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7ff fde2 	bl	800ba60 <USBD_CoreFindEP>
 800be9c:	4603      	mov	r3, r0
 800be9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bea0:	7b7b      	ldrb	r3, [r7, #13]
 800bea2:	2bff      	cmp	r3, #255	; 0xff
 800bea4:	d01f      	beq.n	800bee6 <USBD_StdEPReq+0x1c6>
 800bea6:	7b7b      	ldrb	r3, [r7, #13]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d11c      	bne.n	800bee6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800beac:	7b7a      	ldrb	r2, [r7, #13]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800beb4:	7b7a      	ldrb	r2, [r7, #13]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	32ae      	adds	r2, #174	; 0xae
 800beba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d010      	beq.n	800bee6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bec4:	7b7a      	ldrb	r2, [r7, #13]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	32ae      	adds	r2, #174	; 0xae
 800beca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	4798      	blx	r3
 800bed6:	4603      	mov	r3, r0
 800bed8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800beda:	e004      	b.n	800bee6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fc03 	bl	800c6ea <USBD_CtlError>
              break;
 800bee4:	e000      	b.n	800bee8 <USBD_StdEPReq+0x1c8>
              break;
 800bee6:	bf00      	nop
          }
          break;
 800bee8:	e0ab      	b.n	800c042 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d002      	beq.n	800befc <USBD_StdEPReq+0x1dc>
 800bef6:	2b03      	cmp	r3, #3
 800bef8:	d032      	beq.n	800bf60 <USBD_StdEPReq+0x240>
 800befa:	e097      	b.n	800c02c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800befc:	7bbb      	ldrb	r3, [r7, #14]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d007      	beq.n	800bf12 <USBD_StdEPReq+0x1f2>
 800bf02:	7bbb      	ldrb	r3, [r7, #14]
 800bf04:	2b80      	cmp	r3, #128	; 0x80
 800bf06:	d004      	beq.n	800bf12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fbed 	bl	800c6ea <USBD_CtlError>
                break;
 800bf10:	e091      	b.n	800c036 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	da0b      	bge.n	800bf32 <USBD_StdEPReq+0x212>
 800bf1a:	7bbb      	ldrb	r3, [r7, #14]
 800bf1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf20:	4613      	mov	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	3310      	adds	r3, #16
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	3304      	adds	r3, #4
 800bf30:	e00b      	b.n	800bf4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
 800bf34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf38:	4613      	mov	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	4413      	add	r3, r2
 800bf48:	3304      	adds	r3, #4
 800bf4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	2202      	movs	r2, #2
 800bf56:	4619      	mov	r1, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fc37 	bl	800c7cc <USBD_CtlSendData>
              break;
 800bf5e:	e06a      	b.n	800c036 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bf60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	da11      	bge.n	800bf8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bf68:	7bbb      	ldrb	r3, [r7, #14]
 800bf6a:	f003 020f 	and.w	r2, r3, #15
 800bf6e:	6879      	ldr	r1, [r7, #4]
 800bf70:	4613      	mov	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4413      	add	r3, r2
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	440b      	add	r3, r1
 800bf7a:	3324      	adds	r3, #36	; 0x24
 800bf7c:	881b      	ldrh	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d117      	bne.n	800bfb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 fbb0 	bl	800c6ea <USBD_CtlError>
                  break;
 800bf8a:	e054      	b.n	800c036 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bf8c:	7bbb      	ldrb	r3, [r7, #14]
 800bf8e:	f003 020f 	and.w	r2, r3, #15
 800bf92:	6879      	ldr	r1, [r7, #4]
 800bf94:	4613      	mov	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	4413      	add	r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	440b      	add	r3, r1
 800bf9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bfa2:	881b      	ldrh	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d104      	bne.n	800bfb2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fb9d 	bl	800c6ea <USBD_CtlError>
                  break;
 800bfb0:	e041      	b.n	800c036 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	da0b      	bge.n	800bfd2 <USBD_StdEPReq+0x2b2>
 800bfba:	7bbb      	ldrb	r3, [r7, #14]
 800bfbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4413      	add	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	3310      	adds	r3, #16
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	4413      	add	r3, r2
 800bfce:	3304      	adds	r3, #4
 800bfd0:	e00b      	b.n	800bfea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bfd2:	7bbb      	ldrb	r3, [r7, #14]
 800bfd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfd8:	4613      	mov	r3, r2
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	4413      	add	r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	3304      	adds	r3, #4
 800bfea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d002      	beq.n	800bff8 <USBD_StdEPReq+0x2d8>
 800bff2:	7bbb      	ldrb	r3, [r7, #14]
 800bff4:	2b80      	cmp	r3, #128	; 0x80
 800bff6:	d103      	bne.n	800c000 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	2200      	movs	r2, #0
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	e00e      	b.n	800c01e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c000:	7bbb      	ldrb	r3, [r7, #14]
 800c002:	4619      	mov	r1, r3
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f003 fe59 	bl	800fcbc <USBD_LL_IsStallEP>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d003      	beq.n	800c018 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	2201      	movs	r2, #1
 800c014:	601a      	str	r2, [r3, #0]
 800c016:	e002      	b.n	800c01e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	2200      	movs	r2, #0
 800c01c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	2202      	movs	r2, #2
 800c022:	4619      	mov	r1, r3
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fbd1 	bl	800c7cc <USBD_CtlSendData>
              break;
 800c02a:	e004      	b.n	800c036 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fb5b 	bl	800c6ea <USBD_CtlError>
              break;
 800c034:	bf00      	nop
          }
          break;
 800c036:	e004      	b.n	800c042 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c038:	6839      	ldr	r1, [r7, #0]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fb55 	bl	800c6ea <USBD_CtlError>
          break;
 800c040:	bf00      	nop
      }
      break;
 800c042:	e005      	b.n	800c050 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 fb4f 	bl	800c6ea <USBD_CtlError>
      break;
 800c04c:	e000      	b.n	800c050 <USBD_StdEPReq+0x330>
      break;
 800c04e:	bf00      	nop
  }

  return ret;
 800c050:	7bfb      	ldrb	r3, [r7, #15]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
	...

0800c05c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c066:	2300      	movs	r3, #0
 800c068:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c06a:	2300      	movs	r3, #0
 800c06c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c06e:	2300      	movs	r3, #0
 800c070:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	885b      	ldrh	r3, [r3, #2]
 800c076:	0a1b      	lsrs	r3, r3, #8
 800c078:	b29b      	uxth	r3, r3
 800c07a:	3b01      	subs	r3, #1
 800c07c:	2b06      	cmp	r3, #6
 800c07e:	f200 8128 	bhi.w	800c2d2 <USBD_GetDescriptor+0x276>
 800c082:	a201      	add	r2, pc, #4	; (adr r2, 800c088 <USBD_GetDescriptor+0x2c>)
 800c084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c088:	0800c0a5 	.word	0x0800c0a5
 800c08c:	0800c0bd 	.word	0x0800c0bd
 800c090:	0800c0fd 	.word	0x0800c0fd
 800c094:	0800c2d3 	.word	0x0800c2d3
 800c098:	0800c2d3 	.word	0x0800c2d3
 800c09c:	0800c273 	.word	0x0800c273
 800c0a0:	0800c29f 	.word	0x0800c29f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	7c12      	ldrb	r2, [r2, #16]
 800c0b0:	f107 0108 	add.w	r1, r7, #8
 800c0b4:	4610      	mov	r0, r2
 800c0b6:	4798      	blx	r3
 800c0b8:	60f8      	str	r0, [r7, #12]
      break;
 800c0ba:	e112      	b.n	800c2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7c1b      	ldrb	r3, [r3, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10d      	bne.n	800c0e0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0cc:	f107 0208 	add.w	r2, r7, #8
 800c0d0:	4610      	mov	r0, r2
 800c0d2:	4798      	blx	r3
 800c0d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	2202      	movs	r2, #2
 800c0dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c0de:	e100      	b.n	800c2e2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e8:	f107 0208 	add.w	r2, r7, #8
 800c0ec:	4610      	mov	r0, r2
 800c0ee:	4798      	blx	r3
 800c0f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	701a      	strb	r2, [r3, #0]
      break;
 800c0fa:	e0f2      	b.n	800c2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	885b      	ldrh	r3, [r3, #2]
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b05      	cmp	r3, #5
 800c104:	f200 80ac 	bhi.w	800c260 <USBD_GetDescriptor+0x204>
 800c108:	a201      	add	r2, pc, #4	; (adr r2, 800c110 <USBD_GetDescriptor+0xb4>)
 800c10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10e:	bf00      	nop
 800c110:	0800c129 	.word	0x0800c129
 800c114:	0800c15d 	.word	0x0800c15d
 800c118:	0800c191 	.word	0x0800c191
 800c11c:	0800c1c5 	.word	0x0800c1c5
 800c120:	0800c1f9 	.word	0x0800c1f9
 800c124:	0800c22d 	.word	0x0800c22d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00b      	beq.n	800c14c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	7c12      	ldrb	r2, [r2, #16]
 800c140:	f107 0108 	add.w	r1, r7, #8
 800c144:	4610      	mov	r0, r2
 800c146:	4798      	blx	r3
 800c148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c14a:	e091      	b.n	800c270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 facb 	bl	800c6ea <USBD_CtlError>
            err++;
 800c154:	7afb      	ldrb	r3, [r7, #11]
 800c156:	3301      	adds	r3, #1
 800c158:	72fb      	strb	r3, [r7, #11]
          break;
 800c15a:	e089      	b.n	800c270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00b      	beq.n	800c180 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	7c12      	ldrb	r2, [r2, #16]
 800c174:	f107 0108 	add.w	r1, r7, #8
 800c178:	4610      	mov	r0, r2
 800c17a:	4798      	blx	r3
 800c17c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c17e:	e077      	b.n	800c270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c180:	6839      	ldr	r1, [r7, #0]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fab1 	bl	800c6ea <USBD_CtlError>
            err++;
 800c188:	7afb      	ldrb	r3, [r7, #11]
 800c18a:	3301      	adds	r3, #1
 800c18c:	72fb      	strb	r3, [r7, #11]
          break;
 800c18e:	e06f      	b.n	800c270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00b      	beq.n	800c1b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	7c12      	ldrb	r2, [r2, #16]
 800c1a8:	f107 0108 	add.w	r1, r7, #8
 800c1ac:	4610      	mov	r0, r2
 800c1ae:	4798      	blx	r3
 800c1b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1b2:	e05d      	b.n	800c270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fa97 	bl	800c6ea <USBD_CtlError>
            err++;
 800c1bc:	7afb      	ldrb	r3, [r7, #11]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c1c2:	e055      	b.n	800c270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ca:	691b      	ldr	r3, [r3, #16]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00b      	beq.n	800c1e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1d6:	691b      	ldr	r3, [r3, #16]
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	7c12      	ldrb	r2, [r2, #16]
 800c1dc:	f107 0108 	add.w	r1, r7, #8
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	4798      	blx	r3
 800c1e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1e6:	e043      	b.n	800c270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 fa7d 	bl	800c6ea <USBD_CtlError>
            err++;
 800c1f0:	7afb      	ldrb	r3, [r7, #11]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c1f6:	e03b      	b.n	800c270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1fe:	695b      	ldr	r3, [r3, #20]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00b      	beq.n	800c21c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c20a:	695b      	ldr	r3, [r3, #20]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	7c12      	ldrb	r2, [r2, #16]
 800c210:	f107 0108 	add.w	r1, r7, #8
 800c214:	4610      	mov	r0, r2
 800c216:	4798      	blx	r3
 800c218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c21a:	e029      	b.n	800c270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fa63 	bl	800c6ea <USBD_CtlError>
            err++;
 800c224:	7afb      	ldrb	r3, [r7, #11]
 800c226:	3301      	adds	r3, #1
 800c228:	72fb      	strb	r3, [r7, #11]
          break;
 800c22a:	e021      	b.n	800c270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c232:	699b      	ldr	r3, [r3, #24]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00b      	beq.n	800c250 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	7c12      	ldrb	r2, [r2, #16]
 800c244:	f107 0108 	add.w	r1, r7, #8
 800c248:	4610      	mov	r0, r2
 800c24a:	4798      	blx	r3
 800c24c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c24e:	e00f      	b.n	800c270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c250:	6839      	ldr	r1, [r7, #0]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fa49 	bl	800c6ea <USBD_CtlError>
            err++;
 800c258:	7afb      	ldrb	r3, [r7, #11]
 800c25a:	3301      	adds	r3, #1
 800c25c:	72fb      	strb	r3, [r7, #11]
          break;
 800c25e:	e007      	b.n	800c270 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c260:	6839      	ldr	r1, [r7, #0]
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 fa41 	bl	800c6ea <USBD_CtlError>
          err++;
 800c268:	7afb      	ldrb	r3, [r7, #11]
 800c26a:	3301      	adds	r3, #1
 800c26c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c26e:	bf00      	nop
      }
      break;
 800c270:	e037      	b.n	800c2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	7c1b      	ldrb	r3, [r3, #16]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d109      	bne.n	800c28e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c282:	f107 0208 	add.w	r2, r7, #8
 800c286:	4610      	mov	r0, r2
 800c288:	4798      	blx	r3
 800c28a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c28c:	e029      	b.n	800c2e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 fa2a 	bl	800c6ea <USBD_CtlError>
        err++;
 800c296:	7afb      	ldrb	r3, [r7, #11]
 800c298:	3301      	adds	r3, #1
 800c29a:	72fb      	strb	r3, [r7, #11]
      break;
 800c29c:	e021      	b.n	800c2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	7c1b      	ldrb	r3, [r3, #16]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10d      	bne.n	800c2c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ae:	f107 0208 	add.w	r2, r7, #8
 800c2b2:	4610      	mov	r0, r2
 800c2b4:	4798      	blx	r3
 800c2b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	2207      	movs	r2, #7
 800c2be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2c0:	e00f      	b.n	800c2e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fa10 	bl	800c6ea <USBD_CtlError>
        err++;
 800c2ca:	7afb      	ldrb	r3, [r7, #11]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	72fb      	strb	r3, [r7, #11]
      break;
 800c2d0:	e007      	b.n	800c2e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fa08 	bl	800c6ea <USBD_CtlError>
      err++;
 800c2da:	7afb      	ldrb	r3, [r7, #11]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	72fb      	strb	r3, [r7, #11]
      break;
 800c2e0:	bf00      	nop
  }

  if (err != 0U)
 800c2e2:	7afb      	ldrb	r3, [r7, #11]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d11e      	bne.n	800c326 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	88db      	ldrh	r3, [r3, #6]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d016      	beq.n	800c31e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c2f0:	893b      	ldrh	r3, [r7, #8]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00e      	beq.n	800c314 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	88da      	ldrh	r2, [r3, #6]
 800c2fa:	893b      	ldrh	r3, [r7, #8]
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	bf28      	it	cs
 800c300:	4613      	movcs	r3, r2
 800c302:	b29b      	uxth	r3, r3
 800c304:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c306:	893b      	ldrh	r3, [r7, #8]
 800c308:	461a      	mov	r2, r3
 800c30a:	68f9      	ldr	r1, [r7, #12]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fa5d 	bl	800c7cc <USBD_CtlSendData>
 800c312:	e009      	b.n	800c328 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f9e7 	bl	800c6ea <USBD_CtlError>
 800c31c:	e004      	b.n	800c328 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 faae 	bl	800c880 <USBD_CtlSendStatus>
 800c324:	e000      	b.n	800c328 <USBD_GetDescriptor+0x2cc>
    return;
 800c326:	bf00      	nop
  }
}
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop

0800c330 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	889b      	ldrh	r3, [r3, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d131      	bne.n	800c3a6 <USBD_SetAddress+0x76>
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	88db      	ldrh	r3, [r3, #6]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d12d      	bne.n	800c3a6 <USBD_SetAddress+0x76>
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	885b      	ldrh	r3, [r3, #2]
 800c34e:	2b7f      	cmp	r3, #127	; 0x7f
 800c350:	d829      	bhi.n	800c3a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	885b      	ldrh	r3, [r3, #2]
 800c356:	b2db      	uxtb	r3, r3
 800c358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c35c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c364:	b2db      	uxtb	r3, r3
 800c366:	2b03      	cmp	r3, #3
 800c368:	d104      	bne.n	800c374 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f9bc 	bl	800c6ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c372:	e01d      	b.n	800c3b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	7bfa      	ldrb	r2, [r7, #15]
 800c378:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
 800c37e:	4619      	mov	r1, r3
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f003 fcc7 	bl	800fd14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 fa7a 	bl	800c880 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c38c:	7bfb      	ldrb	r3, [r7, #15]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d004      	beq.n	800c39c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2202      	movs	r2, #2
 800c396:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c39a:	e009      	b.n	800c3b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3a4:	e004      	b.n	800c3b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c3a6:	6839      	ldr	r1, [r7, #0]
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 f99e 	bl	800c6ea <USBD_CtlError>
  }
}
 800c3ae:	bf00      	nop
 800c3b0:	bf00      	nop
 800c3b2:	3710      	adds	r7, #16
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	885b      	ldrh	r3, [r3, #2]
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	4b4e      	ldr	r3, [pc, #312]	; (800c508 <USBD_SetConfig+0x150>)
 800c3ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c3d0:	4b4d      	ldr	r3, [pc, #308]	; (800c508 <USBD_SetConfig+0x150>)
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d905      	bls.n	800c3e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c3d8:	6839      	ldr	r1, [r7, #0]
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 f985 	bl	800c6ea <USBD_CtlError>
    return USBD_FAIL;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	e08c      	b.n	800c4fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d002      	beq.n	800c3f6 <USBD_SetConfig+0x3e>
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	d029      	beq.n	800c448 <USBD_SetConfig+0x90>
 800c3f4:	e075      	b.n	800c4e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c3f6:	4b44      	ldr	r3, [pc, #272]	; (800c508 <USBD_SetConfig+0x150>)
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d020      	beq.n	800c440 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c3fe:	4b42      	ldr	r3, [pc, #264]	; (800c508 <USBD_SetConfig+0x150>)
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	461a      	mov	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c408:	4b3f      	ldr	r3, [pc, #252]	; (800c508 <USBD_SetConfig+0x150>)
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	4619      	mov	r1, r3
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7fe ffe7 	bl	800b3e2 <USBD_SetClassConfig>
 800c414:	4603      	mov	r3, r0
 800c416:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c418:	7bfb      	ldrb	r3, [r7, #15]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d008      	beq.n	800c430 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c41e:	6839      	ldr	r1, [r7, #0]
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 f962 	bl	800c6ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2202      	movs	r2, #2
 800c42a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c42e:	e065      	b.n	800c4fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 fa25 	bl	800c880 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2203      	movs	r2, #3
 800c43a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c43e:	e05d      	b.n	800c4fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 fa1d 	bl	800c880 <USBD_CtlSendStatus>
      break;
 800c446:	e059      	b.n	800c4fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c448:	4b2f      	ldr	r3, [pc, #188]	; (800c508 <USBD_SetConfig+0x150>)
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d112      	bne.n	800c476 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2202      	movs	r2, #2
 800c454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c458:	4b2b      	ldr	r3, [pc, #172]	; (800c508 <USBD_SetConfig+0x150>)
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	461a      	mov	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c462:	4b29      	ldr	r3, [pc, #164]	; (800c508 <USBD_SetConfig+0x150>)
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7fe ffd6 	bl	800b41a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fa06 	bl	800c880 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c474:	e042      	b.n	800c4fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c476:	4b24      	ldr	r3, [pc, #144]	; (800c508 <USBD_SetConfig+0x150>)
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	461a      	mov	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	429a      	cmp	r2, r3
 800c482:	d02a      	beq.n	800c4da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7fe ffc4 	bl	800b41a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c492:	4b1d      	ldr	r3, [pc, #116]	; (800c508 <USBD_SetConfig+0x150>)
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	461a      	mov	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c49c:	4b1a      	ldr	r3, [pc, #104]	; (800c508 <USBD_SetConfig+0x150>)
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7fe ff9d 	bl	800b3e2 <USBD_SetClassConfig>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c4ac:	7bfb      	ldrb	r3, [r7, #15]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00f      	beq.n	800c4d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c4b2:	6839      	ldr	r1, [r7, #0]
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 f918 	bl	800c6ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f7fe ffa9 	bl	800b41a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2202      	movs	r2, #2
 800c4cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c4d0:	e014      	b.n	800c4fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 f9d4 	bl	800c880 <USBD_CtlSendStatus>
      break;
 800c4d8:	e010      	b.n	800c4fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 f9d0 	bl	800c880 <USBD_CtlSendStatus>
      break;
 800c4e0:	e00c      	b.n	800c4fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 f900 	bl	800c6ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4ea:	4b07      	ldr	r3, [pc, #28]	; (800c508 <USBD_SetConfig+0x150>)
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f7fe ff92 	bl	800b41a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	73fb      	strb	r3, [r7, #15]
      break;
 800c4fa:	bf00      	nop
  }

  return ret;
 800c4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20011bc0 	.word	0x20011bc0

0800c50c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	88db      	ldrh	r3, [r3, #6]
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d004      	beq.n	800c528 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 f8e2 	bl	800c6ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c526:	e023      	b.n	800c570 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b02      	cmp	r3, #2
 800c532:	dc02      	bgt.n	800c53a <USBD_GetConfig+0x2e>
 800c534:	2b00      	cmp	r3, #0
 800c536:	dc03      	bgt.n	800c540 <USBD_GetConfig+0x34>
 800c538:	e015      	b.n	800c566 <USBD_GetConfig+0x5a>
 800c53a:	2b03      	cmp	r3, #3
 800c53c:	d00b      	beq.n	800c556 <USBD_GetConfig+0x4a>
 800c53e:	e012      	b.n	800c566 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	3308      	adds	r3, #8
 800c54a:	2201      	movs	r2, #1
 800c54c:	4619      	mov	r1, r3
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f93c 	bl	800c7cc <USBD_CtlSendData>
        break;
 800c554:	e00c      	b.n	800c570 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	3304      	adds	r3, #4
 800c55a:	2201      	movs	r2, #1
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 f934 	bl	800c7cc <USBD_CtlSendData>
        break;
 800c564:	e004      	b.n	800c570 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 f8be 	bl	800c6ea <USBD_CtlError>
        break;
 800c56e:	bf00      	nop
}
 800c570:	bf00      	nop
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	3b01      	subs	r3, #1
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	d81e      	bhi.n	800c5ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	88db      	ldrh	r3, [r3, #6]
 800c594:	2b02      	cmp	r3, #2
 800c596:	d004      	beq.n	800c5a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c598:	6839      	ldr	r1, [r7, #0]
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 f8a5 	bl	800c6ea <USBD_CtlError>
        break;
 800c5a0:	e01a      	b.n	800c5d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d005      	beq.n	800c5be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	f043 0202 	orr.w	r2, r3, #2
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	330c      	adds	r3, #12
 800c5c2:	2202      	movs	r2, #2
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 f900 	bl	800c7cc <USBD_CtlSendData>
      break;
 800c5cc:	e004      	b.n	800c5d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c5ce:	6839      	ldr	r1, [r7, #0]
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f000 f88a 	bl	800c6ea <USBD_CtlError>
      break;
 800c5d6:	bf00      	nop
  }
}
 800c5d8:	bf00      	nop
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	885b      	ldrh	r3, [r3, #2]
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d107      	bne.n	800c602 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 f940 	bl	800c880 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c600:	e013      	b.n	800c62a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	885b      	ldrh	r3, [r3, #2]
 800c606:	2b02      	cmp	r3, #2
 800c608:	d10b      	bne.n	800c622 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	889b      	ldrh	r3, [r3, #4]
 800c60e:	0a1b      	lsrs	r3, r3, #8
 800c610:	b29b      	uxth	r3, r3
 800c612:	b2da      	uxtb	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 f930 	bl	800c880 <USBD_CtlSendStatus>
}
 800c620:	e003      	b.n	800c62a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f860 	bl	800c6ea <USBD_CtlError>
}
 800c62a:	bf00      	nop
 800c62c:	3708      	adds	r7, #8
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c632:	b580      	push	{r7, lr}
 800c634:	b082      	sub	sp, #8
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
 800c63a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c642:	b2db      	uxtb	r3, r3
 800c644:	3b01      	subs	r3, #1
 800c646:	2b02      	cmp	r3, #2
 800c648:	d80b      	bhi.n	800c662 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	885b      	ldrh	r3, [r3, #2]
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d10c      	bne.n	800c66c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f910 	bl	800c880 <USBD_CtlSendStatus>
      }
      break;
 800c660:	e004      	b.n	800c66c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 f840 	bl	800c6ea <USBD_CtlError>
      break;
 800c66a:	e000      	b.n	800c66e <USBD_ClrFeature+0x3c>
      break;
 800c66c:	bf00      	nop
  }
}
 800c66e:	bf00      	nop
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b084      	sub	sp, #16
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	781a      	ldrb	r2, [r3, #0]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	3301      	adds	r3, #1
 800c690:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	781a      	ldrb	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	3301      	adds	r3, #1
 800c69e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f7ff fa41 	bl	800bb28 <SWAPBYTE>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c6ba:	68f8      	ldr	r0, [r7, #12]
 800c6bc:	f7ff fa34 	bl	800bb28 <SWAPBYTE>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f7ff fa27 	bl	800bb28 <SWAPBYTE>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	461a      	mov	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	80da      	strh	r2, [r3, #6]
}
 800c6e2:	bf00      	nop
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b082      	sub	sp, #8
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6f4:	2180      	movs	r1, #128	; 0x80
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f003 faa2 	bl	800fc40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f003 fa9e 	bl	800fc40 <USBD_LL_StallEP>
}
 800c704:	bf00      	nop
 800c706:	3708      	adds	r7, #8
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b086      	sub	sp, #24
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c718:	2300      	movs	r3, #0
 800c71a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d036      	beq.n	800c790 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c726:	6938      	ldr	r0, [r7, #16]
 800c728:	f000 f836 	bl	800c798 <USBD_GetLen>
 800c72c:	4603      	mov	r3, r0
 800c72e:	3301      	adds	r3, #1
 800c730:	b29b      	uxth	r3, r3
 800c732:	005b      	lsls	r3, r3, #1
 800c734:	b29a      	uxth	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c73a:	7dfb      	ldrb	r3, [r7, #23]
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	4413      	add	r3, r2
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	7812      	ldrb	r2, [r2, #0]
 800c744:	701a      	strb	r2, [r3, #0]
  idx++;
 800c746:	7dfb      	ldrb	r3, [r7, #23]
 800c748:	3301      	adds	r3, #1
 800c74a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c74c:	7dfb      	ldrb	r3, [r7, #23]
 800c74e:	68ba      	ldr	r2, [r7, #8]
 800c750:	4413      	add	r3, r2
 800c752:	2203      	movs	r2, #3
 800c754:	701a      	strb	r2, [r3, #0]
  idx++;
 800c756:	7dfb      	ldrb	r3, [r7, #23]
 800c758:	3301      	adds	r3, #1
 800c75a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c75c:	e013      	b.n	800c786 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c75e:	7dfb      	ldrb	r3, [r7, #23]
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	4413      	add	r3, r2
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	7812      	ldrb	r2, [r2, #0]
 800c768:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	3301      	adds	r3, #1
 800c76e:	613b      	str	r3, [r7, #16]
    idx++;
 800c770:	7dfb      	ldrb	r3, [r7, #23]
 800c772:	3301      	adds	r3, #1
 800c774:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c776:	7dfb      	ldrb	r3, [r7, #23]
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	4413      	add	r3, r2
 800c77c:	2200      	movs	r2, #0
 800c77e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c780:	7dfb      	ldrb	r3, [r7, #23]
 800c782:	3301      	adds	r3, #1
 800c784:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1e7      	bne.n	800c75e <USBD_GetString+0x52>
 800c78e:	e000      	b.n	800c792 <USBD_GetString+0x86>
    return;
 800c790:	bf00      	nop
  }
}
 800c792:	3718      	adds	r7, #24
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c7a8:	e005      	b.n	800c7b6 <USBD_GetLen+0x1e>
  {
    len++;
 800c7aa:	7bfb      	ldrb	r3, [r7, #15]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1f5      	bne.n	800c7aa <USBD_GetLen+0x12>
  }

  return len;
 800c7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3714      	adds	r7, #20
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2202      	movs	r2, #2
 800c7dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f003 faad 	bl	800fd52 <USBD_LL_Transmit>

  return USBD_OK;
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b084      	sub	sp, #16
 800c806:	af00      	add	r7, sp, #0
 800c808:	60f8      	str	r0, [r7, #12]
 800c80a:	60b9      	str	r1, [r7, #8]
 800c80c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	2100      	movs	r1, #0
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f003 fa9c 	bl	800fd52 <USBD_LL_Transmit>

  return USBD_OK;
 800c81a:	2300      	movs	r3, #0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2203      	movs	r2, #3
 800c834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	68ba      	ldr	r2, [r7, #8]
 800c84c:	2100      	movs	r1, #0
 800c84e:	68f8      	ldr	r0, [r7, #12]
 800c850:	f003 faa0 	bl	800fd94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b084      	sub	sp, #16
 800c862:	af00      	add	r7, sp, #0
 800c864:	60f8      	str	r0, [r7, #12]
 800c866:	60b9      	str	r1, [r7, #8]
 800c868:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	68ba      	ldr	r2, [r7, #8]
 800c86e:	2100      	movs	r1, #0
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f003 fa8f 	bl	800fd94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2204      	movs	r2, #4
 800c88c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c890:	2300      	movs	r3, #0
 800c892:	2200      	movs	r2, #0
 800c894:	2100      	movs	r1, #0
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f003 fa5b 	bl	800fd52 <USBD_LL_Transmit>

  return USBD_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b082      	sub	sp, #8
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2205      	movs	r2, #5
 800c8b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f003 fa69 	bl	800fd94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <__NVIC_SetPriority>:
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	6039      	str	r1, [r7, #0]
 800c8d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c8d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	db0a      	blt.n	800c8f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	490c      	ldr	r1, [pc, #48]	; (800c918 <__NVIC_SetPriority+0x4c>)
 800c8e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8ea:	0112      	lsls	r2, r2, #4
 800c8ec:	b2d2      	uxtb	r2, r2
 800c8ee:	440b      	add	r3, r1
 800c8f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c8f4:	e00a      	b.n	800c90c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	4908      	ldr	r1, [pc, #32]	; (800c91c <__NVIC_SetPriority+0x50>)
 800c8fc:	79fb      	ldrb	r3, [r7, #7]
 800c8fe:	f003 030f 	and.w	r3, r3, #15
 800c902:	3b04      	subs	r3, #4
 800c904:	0112      	lsls	r2, r2, #4
 800c906:	b2d2      	uxtb	r2, r2
 800c908:	440b      	add	r3, r1
 800c90a:	761a      	strb	r2, [r3, #24]
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr
 800c918:	e000e100 	.word	0xe000e100
 800c91c:	e000ed00 	.word	0xe000ed00

0800c920 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c920:	b580      	push	{r7, lr}
 800c922:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c924:	4b05      	ldr	r3, [pc, #20]	; (800c93c <SysTick_Handler+0x1c>)
 800c926:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c928:	f001 fd4e 	bl	800e3c8 <xTaskGetSchedulerState>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d001      	beq.n	800c936 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c932:	f002 fb39 	bl	800efa8 <xPortSysTickHandler>
  }
}
 800c936:	bf00      	nop
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	e000e010 	.word	0xe000e010

0800c940 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c940:	b580      	push	{r7, lr}
 800c942:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c944:	2100      	movs	r1, #0
 800c946:	f06f 0004 	mvn.w	r0, #4
 800c94a:	f7ff ffbf 	bl	800c8cc <__NVIC_SetPriority>
#endif
}
 800c94e:	bf00      	nop
 800c950:	bd80      	pop	{r7, pc}
	...

0800c954 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c95a:	f3ef 8305 	mrs	r3, IPSR
 800c95e:	603b      	str	r3, [r7, #0]
  return(result);
 800c960:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c962:	2b00      	cmp	r3, #0
 800c964:	d003      	beq.n	800c96e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c966:	f06f 0305 	mvn.w	r3, #5
 800c96a:	607b      	str	r3, [r7, #4]
 800c96c:	e00c      	b.n	800c988 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c96e:	4b0a      	ldr	r3, [pc, #40]	; (800c998 <osKernelInitialize+0x44>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d105      	bne.n	800c982 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c976:	4b08      	ldr	r3, [pc, #32]	; (800c998 <osKernelInitialize+0x44>)
 800c978:	2201      	movs	r2, #1
 800c97a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c97c:	2300      	movs	r3, #0
 800c97e:	607b      	str	r3, [r7, #4]
 800c980:	e002      	b.n	800c988 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c986:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c988:	687b      	ldr	r3, [r7, #4]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	370c      	adds	r7, #12
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr
 800c996:	bf00      	nop
 800c998:	20011bc4 	.word	0x20011bc4

0800c99c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9a2:	f3ef 8305 	mrs	r3, IPSR
 800c9a6:	603b      	str	r3, [r7, #0]
  return(result);
 800c9a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d003      	beq.n	800c9b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c9ae:	f06f 0305 	mvn.w	r3, #5
 800c9b2:	607b      	str	r3, [r7, #4]
 800c9b4:	e010      	b.n	800c9d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c9b6:	4b0b      	ldr	r3, [pc, #44]	; (800c9e4 <osKernelStart+0x48>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d109      	bne.n	800c9d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c9be:	f7ff ffbf 	bl	800c940 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c9c2:	4b08      	ldr	r3, [pc, #32]	; (800c9e4 <osKernelStart+0x48>)
 800c9c4:	2202      	movs	r2, #2
 800c9c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c9c8:	f001 f87c 	bl	800dac4 <vTaskStartScheduler>
      stat = osOK;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	607b      	str	r3, [r7, #4]
 800c9d0:	e002      	b.n	800c9d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c9d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c9d8:	687b      	ldr	r3, [r7, #4]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	20011bc4 	.word	0x20011bc4

0800c9e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08e      	sub	sp, #56	; 0x38
 800c9ec:	af04      	add	r7, sp, #16
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9f8:	f3ef 8305 	mrs	r3, IPSR
 800c9fc:	617b      	str	r3, [r7, #20]
  return(result);
 800c9fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d17e      	bne.n	800cb02 <osThreadNew+0x11a>
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d07b      	beq.n	800cb02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ca0a:	2380      	movs	r3, #128	; 0x80
 800ca0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ca0e:	2318      	movs	r3, #24
 800ca10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ca12:	2300      	movs	r3, #0
 800ca14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ca16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d045      	beq.n	800caae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d002      	beq.n	800ca30 <osThreadNew+0x48>
        name = attr->name;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d002      	beq.n	800ca3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	699b      	ldr	r3, [r3, #24]
 800ca3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d008      	beq.n	800ca56 <osThreadNew+0x6e>
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	2b38      	cmp	r3, #56	; 0x38
 800ca48:	d805      	bhi.n	800ca56 <osThreadNew+0x6e>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	f003 0301 	and.w	r3, r3, #1
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <osThreadNew+0x72>
        return (NULL);
 800ca56:	2300      	movs	r3, #0
 800ca58:	e054      	b.n	800cb04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	695b      	ldr	r3, [r3, #20]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d003      	beq.n	800ca6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	695b      	ldr	r3, [r3, #20]
 800ca66:	089b      	lsrs	r3, r3, #2
 800ca68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d00e      	beq.n	800ca90 <osThreadNew+0xa8>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	2bbb      	cmp	r3, #187	; 0xbb
 800ca78:	d90a      	bls.n	800ca90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d006      	beq.n	800ca90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	695b      	ldr	r3, [r3, #20]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d002      	beq.n	800ca90 <osThreadNew+0xa8>
        mem = 1;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	61bb      	str	r3, [r7, #24]
 800ca8e:	e010      	b.n	800cab2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10c      	bne.n	800cab2 <osThreadNew+0xca>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d108      	bne.n	800cab2 <osThreadNew+0xca>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	691b      	ldr	r3, [r3, #16]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d104      	bne.n	800cab2 <osThreadNew+0xca>
          mem = 0;
 800caa8:	2300      	movs	r3, #0
 800caaa:	61bb      	str	r3, [r7, #24]
 800caac:	e001      	b.n	800cab2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800caae:	2300      	movs	r3, #0
 800cab0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d110      	bne.n	800cada <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cac0:	9202      	str	r2, [sp, #8]
 800cac2:	9301      	str	r3, [sp, #4]
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	6a3a      	ldr	r2, [r7, #32]
 800cacc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f000 fe0c 	bl	800d6ec <xTaskCreateStatic>
 800cad4:	4603      	mov	r3, r0
 800cad6:	613b      	str	r3, [r7, #16]
 800cad8:	e013      	b.n	800cb02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cada:	69bb      	ldr	r3, [r7, #24]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d110      	bne.n	800cb02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cae0:	6a3b      	ldr	r3, [r7, #32]
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	f107 0310 	add.w	r3, r7, #16
 800cae8:	9301      	str	r3, [sp, #4]
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f000 fe57 	bl	800d7a6 <xTaskCreate>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d001      	beq.n	800cb02 <osThreadNew+0x11a>
            hTask = NULL;
 800cafe:	2300      	movs	r3, #0
 800cb00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cb02:	693b      	ldr	r3, [r7, #16]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3728      	adds	r7, #40	; 0x28
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb14:	f3ef 8305 	mrs	r3, IPSR
 800cb18:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d003      	beq.n	800cb28 <osDelay+0x1c>
    stat = osErrorISR;
 800cb20:	f06f 0305 	mvn.w	r3, #5
 800cb24:	60fb      	str	r3, [r7, #12]
 800cb26:	e007      	b.n	800cb38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d002      	beq.n	800cb38 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 ff92 	bl	800da5c <vTaskDelay>
    }
  }

  return (stat);
 800cb38:	68fb      	ldr	r3, [r7, #12]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
	...

0800cb44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cb44:	b480      	push	{r7}
 800cb46:	b085      	sub	sp, #20
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	4a07      	ldr	r2, [pc, #28]	; (800cb70 <vApplicationGetIdleTaskMemory+0x2c>)
 800cb54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	4a06      	ldr	r2, [pc, #24]	; (800cb74 <vApplicationGetIdleTaskMemory+0x30>)
 800cb5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2280      	movs	r2, #128	; 0x80
 800cb60:	601a      	str	r2, [r3, #0]
}
 800cb62:	bf00      	nop
 800cb64:	3714      	adds	r7, #20
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	20011bc8 	.word	0x20011bc8
 800cb74:	20011c84 	.word	0x20011c84

0800cb78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	4a07      	ldr	r2, [pc, #28]	; (800cba4 <vApplicationGetTimerTaskMemory+0x2c>)
 800cb88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	4a06      	ldr	r2, [pc, #24]	; (800cba8 <vApplicationGetTimerTaskMemory+0x30>)
 800cb8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb96:	601a      	str	r2, [r3, #0]
}
 800cb98:	bf00      	nop
 800cb9a:	3714      	adds	r7, #20
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr
 800cba4:	20011e84 	.word	0x20011e84
 800cba8:	20011f40 	.word	0x20011f40

0800cbac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f103 0208 	add.w	r2, r3, #8
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f103 0208 	add.w	r2, r3, #8
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f103 0208 	add.w	r2, r3, #8
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cbe0:	bf00      	nop
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cbfa:	bf00      	nop
 800cbfc:	370c      	adds	r7, #12
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr

0800cc06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc06:	b480      	push	{r7}
 800cc08:	b085      	sub	sp, #20
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
 800cc0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	689a      	ldr	r2, [r3, #8]
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	683a      	ldr	r2, [r7, #0]
 800cc2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	1c5a      	adds	r2, r3, #1
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	601a      	str	r2, [r3, #0]
}
 800cc42:	bf00      	nop
 800cc44:	3714      	adds	r7, #20
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr

0800cc4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc4e:	b480      	push	{r7}
 800cc50:	b085      	sub	sp, #20
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
 800cc56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc64:	d103      	bne.n	800cc6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	60fb      	str	r3, [r7, #12]
 800cc6c:	e00c      	b.n	800cc88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	3308      	adds	r3, #8
 800cc72:	60fb      	str	r3, [r7, #12]
 800cc74:	e002      	b.n	800cc7c <vListInsert+0x2e>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	60fb      	str	r3, [r7, #12]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d2f6      	bcs.n	800cc76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	683a      	ldr	r2, [r7, #0]
 800cc96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	683a      	ldr	r2, [r7, #0]
 800cca2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	1c5a      	adds	r2, r3, #1
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	601a      	str	r2, [r3, #0]
}
 800ccb4:	bf00      	nop
 800ccb6:	3714      	adds	r7, #20
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	691b      	ldr	r3, [r3, #16]
 800cccc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	6892      	ldr	r2, [r2, #8]
 800ccd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	6852      	ldr	r2, [r2, #4]
 800cce0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d103      	bne.n	800ccf4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	689a      	ldr	r2, [r3, #8]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	1e5a      	subs	r2, r3, #1
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3714      	adds	r7, #20
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10a      	bne.n	800cd3e <xQueueGenericReset+0x2a>
	__asm volatile
 800cd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	60bb      	str	r3, [r7, #8]
}
 800cd3a:	bf00      	nop
 800cd3c:	e7fe      	b.n	800cd3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cd3e:	f002 f8a1 	bl	800ee84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd4a:	68f9      	ldr	r1, [r7, #12]
 800cd4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd4e:	fb01 f303 	mul.w	r3, r1, r3
 800cd52:	441a      	add	r2, r3
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	68f9      	ldr	r1, [r7, #12]
 800cd72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd74:	fb01 f303 	mul.w	r3, r1, r3
 800cd78:	441a      	add	r2, r3
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	22ff      	movs	r2, #255	; 0xff
 800cd82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	22ff      	movs	r2, #255	; 0xff
 800cd8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d114      	bne.n	800cdbe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	691b      	ldr	r3, [r3, #16]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d01a      	beq.n	800cdd2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	3310      	adds	r3, #16
 800cda0:	4618      	mov	r0, r3
 800cda2:	f001 f929 	bl	800dff8 <xTaskRemoveFromEventList>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d012      	beq.n	800cdd2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cdac:	4b0c      	ldr	r3, [pc, #48]	; (800cde0 <xQueueGenericReset+0xcc>)
 800cdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdb2:	601a      	str	r2, [r3, #0]
 800cdb4:	f3bf 8f4f 	dsb	sy
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	e009      	b.n	800cdd2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	3310      	adds	r3, #16
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7ff fef2 	bl	800cbac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	3324      	adds	r3, #36	; 0x24
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7ff feed 	bl	800cbac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cdd2:	f002 f887 	bl	800eee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cdd6:	2301      	movs	r3, #1
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	e000ed04 	.word	0xe000ed04

0800cde4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b08e      	sub	sp, #56	; 0x38
 800cde8:	af02      	add	r7, sp, #8
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	607a      	str	r2, [r7, #4]
 800cdf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10a      	bne.n	800ce0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfc:	f383 8811 	msr	BASEPRI, r3
 800ce00:	f3bf 8f6f 	isb	sy
 800ce04:	f3bf 8f4f 	dsb	sy
 800ce08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce0a:	bf00      	nop
 800ce0c:	e7fe      	b.n	800ce0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10a      	bne.n	800ce2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ce14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce18:	f383 8811 	msr	BASEPRI, r3
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce26:	bf00      	nop
 800ce28:	e7fe      	b.n	800ce28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d002      	beq.n	800ce36 <xQueueGenericCreateStatic+0x52>
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <xQueueGenericCreateStatic+0x56>
 800ce36:	2301      	movs	r3, #1
 800ce38:	e000      	b.n	800ce3c <xQueueGenericCreateStatic+0x58>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10a      	bne.n	800ce56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ce40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	623b      	str	r3, [r7, #32]
}
 800ce52:	bf00      	nop
 800ce54:	e7fe      	b.n	800ce54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d102      	bne.n	800ce62 <xQueueGenericCreateStatic+0x7e>
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d101      	bne.n	800ce66 <xQueueGenericCreateStatic+0x82>
 800ce62:	2301      	movs	r3, #1
 800ce64:	e000      	b.n	800ce68 <xQueueGenericCreateStatic+0x84>
 800ce66:	2300      	movs	r3, #0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10a      	bne.n	800ce82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ce6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce70:	f383 8811 	msr	BASEPRI, r3
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	61fb      	str	r3, [r7, #28]
}
 800ce7e:	bf00      	nop
 800ce80:	e7fe      	b.n	800ce80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ce82:	2350      	movs	r3, #80	; 0x50
 800ce84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	2b50      	cmp	r3, #80	; 0x50
 800ce8a:	d00a      	beq.n	800cea2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ce8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce90:	f383 8811 	msr	BASEPRI, r3
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	f3bf 8f4f 	dsb	sy
 800ce9c:	61bb      	str	r3, [r7, #24]
}
 800ce9e:	bf00      	nop
 800cea0:	e7fe      	b.n	800cea0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cea2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d00d      	beq.n	800ceca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ceae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ceb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ceba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebc:	9300      	str	r3, [sp, #0]
 800cebe:	4613      	mov	r3, r2
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	68b9      	ldr	r1, [r7, #8]
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f000 f805 	bl	800ced4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ceca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cecc:	4618      	mov	r0, r3
 800cece:	3730      	adds	r7, #48	; 0x30
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
 800cee0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d103      	bne.n	800cef0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	69ba      	ldr	r2, [r7, #24]
 800ceec:	601a      	str	r2, [r3, #0]
 800ceee:	e002      	b.n	800cef6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cf02:	2101      	movs	r1, #1
 800cf04:	69b8      	ldr	r0, [r7, #24]
 800cf06:	f7ff ff05 	bl	800cd14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	78fa      	ldrb	r2, [r7, #3]
 800cf0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf12:	bf00      	nop
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
	...

0800cf1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b08e      	sub	sp, #56	; 0x38
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
 800cf28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d10a      	bne.n	800cf4e <xQueueGenericSend+0x32>
	__asm volatile
 800cf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3c:	f383 8811 	msr	BASEPRI, r3
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf4a:	bf00      	nop
 800cf4c:	e7fe      	b.n	800cf4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d103      	bne.n	800cf5c <xQueueGenericSend+0x40>
 800cf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d101      	bne.n	800cf60 <xQueueGenericSend+0x44>
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e000      	b.n	800cf62 <xQueueGenericSend+0x46>
 800cf60:	2300      	movs	r3, #0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d10a      	bne.n	800cf7c <xQueueGenericSend+0x60>
	__asm volatile
 800cf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6a:	f383 8811 	msr	BASEPRI, r3
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f3bf 8f4f 	dsb	sy
 800cf76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf78:	bf00      	nop
 800cf7a:	e7fe      	b.n	800cf7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	2b02      	cmp	r3, #2
 800cf80:	d103      	bne.n	800cf8a <xQueueGenericSend+0x6e>
 800cf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d101      	bne.n	800cf8e <xQueueGenericSend+0x72>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e000      	b.n	800cf90 <xQueueGenericSend+0x74>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d10a      	bne.n	800cfaa <xQueueGenericSend+0x8e>
	__asm volatile
 800cf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	623b      	str	r3, [r7, #32]
}
 800cfa6:	bf00      	nop
 800cfa8:	e7fe      	b.n	800cfa8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfaa:	f001 fa0d 	bl	800e3c8 <xTaskGetSchedulerState>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d102      	bne.n	800cfba <xQueueGenericSend+0x9e>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d101      	bne.n	800cfbe <xQueueGenericSend+0xa2>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e000      	b.n	800cfc0 <xQueueGenericSend+0xa4>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d10a      	bne.n	800cfda <xQueueGenericSend+0xbe>
	__asm volatile
 800cfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc8:	f383 8811 	msr	BASEPRI, r3
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	61fb      	str	r3, [r7, #28]
}
 800cfd6:	bf00      	nop
 800cfd8:	e7fe      	b.n	800cfd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cfda:	f001 ff53 	bl	800ee84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d302      	bcc.n	800cff0 <xQueueGenericSend+0xd4>
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d129      	bne.n	800d044 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	68b9      	ldr	r1, [r7, #8]
 800cff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cff6:	f000 fa0b 	bl	800d410 <prvCopyDataToQueue>
 800cffa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d000:	2b00      	cmp	r3, #0
 800d002:	d010      	beq.n	800d026 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d006:	3324      	adds	r3, #36	; 0x24
 800d008:	4618      	mov	r0, r3
 800d00a:	f000 fff5 	bl	800dff8 <xTaskRemoveFromEventList>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d013      	beq.n	800d03c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d014:	4b3f      	ldr	r3, [pc, #252]	; (800d114 <xQueueGenericSend+0x1f8>)
 800d016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d01a:	601a      	str	r2, [r3, #0]
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	e00a      	b.n	800d03c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d007      	beq.n	800d03c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d02c:	4b39      	ldr	r3, [pc, #228]	; (800d114 <xQueueGenericSend+0x1f8>)
 800d02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d032:	601a      	str	r2, [r3, #0]
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d03c:	f001 ff52 	bl	800eee4 <vPortExitCritical>
				return pdPASS;
 800d040:	2301      	movs	r3, #1
 800d042:	e063      	b.n	800d10c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d103      	bne.n	800d052 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d04a:	f001 ff4b 	bl	800eee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d04e:	2300      	movs	r3, #0
 800d050:	e05c      	b.n	800d10c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d054:	2b00      	cmp	r3, #0
 800d056:	d106      	bne.n	800d066 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d058:	f107 0314 	add.w	r3, r7, #20
 800d05c:	4618      	mov	r0, r3
 800d05e:	f001 f855 	bl	800e10c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d062:	2301      	movs	r3, #1
 800d064:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d066:	f001 ff3d 	bl	800eee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d06a:	f000 fd9b 	bl	800dba4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d06e:	f001 ff09 	bl	800ee84 <vPortEnterCritical>
 800d072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d078:	b25b      	sxtb	r3, r3
 800d07a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d07e:	d103      	bne.n	800d088 <xQueueGenericSend+0x16c>
 800d080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d082:	2200      	movs	r2, #0
 800d084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d08e:	b25b      	sxtb	r3, r3
 800d090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d094:	d103      	bne.n	800d09e <xQueueGenericSend+0x182>
 800d096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d098:	2200      	movs	r2, #0
 800d09a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d09e:	f001 ff21 	bl	800eee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0a2:	1d3a      	adds	r2, r7, #4
 800d0a4:	f107 0314 	add.w	r3, r7, #20
 800d0a8:	4611      	mov	r1, r2
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f001 f844 	bl	800e138 <xTaskCheckForTimeOut>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d124      	bne.n	800d100 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d0b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0b8:	f000 faa2 	bl	800d600 <prvIsQueueFull>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d018      	beq.n	800d0f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c4:	3310      	adds	r3, #16
 800d0c6:	687a      	ldr	r2, [r7, #4]
 800d0c8:	4611      	mov	r1, r2
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f000 ff44 	bl	800df58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d0d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0d2:	f000 fa2d 	bl	800d530 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d0d6:	f000 fd73 	bl	800dbc0 <xTaskResumeAll>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f47f af7c 	bne.w	800cfda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d0e2:	4b0c      	ldr	r3, [pc, #48]	; (800d114 <xQueueGenericSend+0x1f8>)
 800d0e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e8:	601a      	str	r2, [r3, #0]
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	e772      	b.n	800cfda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d0f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0f6:	f000 fa1b 	bl	800d530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0fa:	f000 fd61 	bl	800dbc0 <xTaskResumeAll>
 800d0fe:	e76c      	b.n	800cfda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d102:	f000 fa15 	bl	800d530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d106:	f000 fd5b 	bl	800dbc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d10a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3738      	adds	r7, #56	; 0x38
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	e000ed04 	.word	0xe000ed04

0800d118 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b090      	sub	sp, #64	; 0x40
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
 800d124:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d10a      	bne.n	800d146 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d142:	bf00      	nop
 800d144:	e7fe      	b.n	800d144 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d103      	bne.n	800d154 <xQueueGenericSendFromISR+0x3c>
 800d14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d150:	2b00      	cmp	r3, #0
 800d152:	d101      	bne.n	800d158 <xQueueGenericSendFromISR+0x40>
 800d154:	2301      	movs	r3, #1
 800d156:	e000      	b.n	800d15a <xQueueGenericSendFromISR+0x42>
 800d158:	2300      	movs	r3, #0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d10a      	bne.n	800d174 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d170:	bf00      	nop
 800d172:	e7fe      	b.n	800d172 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	2b02      	cmp	r3, #2
 800d178:	d103      	bne.n	800d182 <xQueueGenericSendFromISR+0x6a>
 800d17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d101      	bne.n	800d186 <xQueueGenericSendFromISR+0x6e>
 800d182:	2301      	movs	r3, #1
 800d184:	e000      	b.n	800d188 <xQueueGenericSendFromISR+0x70>
 800d186:	2300      	movs	r3, #0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10a      	bne.n	800d1a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	623b      	str	r3, [r7, #32]
}
 800d19e:	bf00      	nop
 800d1a0:	e7fe      	b.n	800d1a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d1a2:	f001 ff51 	bl	800f048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d1a6:	f3ef 8211 	mrs	r2, BASEPRI
 800d1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	61fa      	str	r2, [r7, #28]
 800d1bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d1be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d302      	bcc.n	800d1d4 <xQueueGenericSendFromISR+0xbc>
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	d12f      	bne.n	800d234 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1e4:	683a      	ldr	r2, [r7, #0]
 800d1e6:	68b9      	ldr	r1, [r7, #8]
 800d1e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1ea:	f000 f911 	bl	800d410 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d1ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d1f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1f6:	d112      	bne.n	800d21e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d016      	beq.n	800d22e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d202:	3324      	adds	r3, #36	; 0x24
 800d204:	4618      	mov	r0, r3
 800d206:	f000 fef7 	bl	800dff8 <xTaskRemoveFromEventList>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00e      	beq.n	800d22e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00b      	beq.n	800d22e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2201      	movs	r2, #1
 800d21a:	601a      	str	r2, [r3, #0]
 800d21c:	e007      	b.n	800d22e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d21e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d222:	3301      	adds	r3, #1
 800d224:	b2db      	uxtb	r3, r3
 800d226:	b25a      	sxtb	r2, r3
 800d228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d22e:	2301      	movs	r3, #1
 800d230:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d232:	e001      	b.n	800d238 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d234:	2300      	movs	r3, #0
 800d236:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d23a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d242:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d246:	4618      	mov	r0, r3
 800d248:	3740      	adds	r7, #64	; 0x40
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
	...

0800d250 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b08c      	sub	sp, #48	; 0x30
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d25c:	2300      	movs	r3, #0
 800d25e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d266:	2b00      	cmp	r3, #0
 800d268:	d10a      	bne.n	800d280 <xQueueReceive+0x30>
	__asm volatile
 800d26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26e:	f383 8811 	msr	BASEPRI, r3
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	f3bf 8f4f 	dsb	sy
 800d27a:	623b      	str	r3, [r7, #32]
}
 800d27c:	bf00      	nop
 800d27e:	e7fe      	b.n	800d27e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d103      	bne.n	800d28e <xQueueReceive+0x3e>
 800d286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d101      	bne.n	800d292 <xQueueReceive+0x42>
 800d28e:	2301      	movs	r3, #1
 800d290:	e000      	b.n	800d294 <xQueueReceive+0x44>
 800d292:	2300      	movs	r3, #0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10a      	bne.n	800d2ae <xQueueReceive+0x5e>
	__asm volatile
 800d298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29c:	f383 8811 	msr	BASEPRI, r3
 800d2a0:	f3bf 8f6f 	isb	sy
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	61fb      	str	r3, [r7, #28]
}
 800d2aa:	bf00      	nop
 800d2ac:	e7fe      	b.n	800d2ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2ae:	f001 f88b 	bl	800e3c8 <xTaskGetSchedulerState>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d102      	bne.n	800d2be <xQueueReceive+0x6e>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d101      	bne.n	800d2c2 <xQueueReceive+0x72>
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e000      	b.n	800d2c4 <xQueueReceive+0x74>
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d10a      	bne.n	800d2de <xQueueReceive+0x8e>
	__asm volatile
 800d2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2cc:	f383 8811 	msr	BASEPRI, r3
 800d2d0:	f3bf 8f6f 	isb	sy
 800d2d4:	f3bf 8f4f 	dsb	sy
 800d2d8:	61bb      	str	r3, [r7, #24]
}
 800d2da:	bf00      	nop
 800d2dc:	e7fe      	b.n	800d2dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2de:	f001 fdd1 	bl	800ee84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d01f      	beq.n	800d32e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2ee:	68b9      	ldr	r1, [r7, #8]
 800d2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2f2:	f000 f8f7 	bl	800d4e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f8:	1e5a      	subs	r2, r3, #1
 800d2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00f      	beq.n	800d326 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d308:	3310      	adds	r3, #16
 800d30a:	4618      	mov	r0, r3
 800d30c:	f000 fe74 	bl	800dff8 <xTaskRemoveFromEventList>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	d007      	beq.n	800d326 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d316:	4b3d      	ldr	r3, [pc, #244]	; (800d40c <xQueueReceive+0x1bc>)
 800d318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d31c:	601a      	str	r2, [r3, #0]
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d326:	f001 fddd 	bl	800eee4 <vPortExitCritical>
				return pdPASS;
 800d32a:	2301      	movs	r3, #1
 800d32c:	e069      	b.n	800d402 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d103      	bne.n	800d33c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d334:	f001 fdd6 	bl	800eee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d338:	2300      	movs	r3, #0
 800d33a:	e062      	b.n	800d402 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d106      	bne.n	800d350 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d342:	f107 0310 	add.w	r3, r7, #16
 800d346:	4618      	mov	r0, r3
 800d348:	f000 fee0 	bl	800e10c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d34c:	2301      	movs	r3, #1
 800d34e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d350:	f001 fdc8 	bl	800eee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d354:	f000 fc26 	bl	800dba4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d358:	f001 fd94 	bl	800ee84 <vPortEnterCritical>
 800d35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d362:	b25b      	sxtb	r3, r3
 800d364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d368:	d103      	bne.n	800d372 <xQueueReceive+0x122>
 800d36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36c:	2200      	movs	r2, #0
 800d36e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d378:	b25b      	sxtb	r3, r3
 800d37a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d37e:	d103      	bne.n	800d388 <xQueueReceive+0x138>
 800d380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d382:	2200      	movs	r2, #0
 800d384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d388:	f001 fdac 	bl	800eee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d38c:	1d3a      	adds	r2, r7, #4
 800d38e:	f107 0310 	add.w	r3, r7, #16
 800d392:	4611      	mov	r1, r2
 800d394:	4618      	mov	r0, r3
 800d396:	f000 fecf 	bl	800e138 <xTaskCheckForTimeOut>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d123      	bne.n	800d3e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3a2:	f000 f917 	bl	800d5d4 <prvIsQueueEmpty>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d017      	beq.n	800d3dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ae:	3324      	adds	r3, #36	; 0x24
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	4611      	mov	r1, r2
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f000 fdcf 	bl	800df58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d3ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3bc:	f000 f8b8 	bl	800d530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d3c0:	f000 fbfe 	bl	800dbc0 <xTaskResumeAll>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d189      	bne.n	800d2de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d3ca:	4b10      	ldr	r3, [pc, #64]	; (800d40c <xQueueReceive+0x1bc>)
 800d3cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3d0:	601a      	str	r2, [r3, #0]
 800d3d2:	f3bf 8f4f 	dsb	sy
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	e780      	b.n	800d2de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d3dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3de:	f000 f8a7 	bl	800d530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3e2:	f000 fbed 	bl	800dbc0 <xTaskResumeAll>
 800d3e6:	e77a      	b.n	800d2de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d3e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3ea:	f000 f8a1 	bl	800d530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3ee:	f000 fbe7 	bl	800dbc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3f4:	f000 f8ee 	bl	800d5d4 <prvIsQueueEmpty>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f43f af6f 	beq.w	800d2de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d400:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d402:	4618      	mov	r0, r3
 800d404:	3730      	adds	r7, #48	; 0x30
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	e000ed04 	.word	0xe000ed04

0800d410 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d41c:	2300      	movs	r3, #0
 800d41e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d424:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d10d      	bne.n	800d44a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d14d      	bne.n	800d4d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f000 ffe2 	bl	800e404 <xTaskPriorityDisinherit>
 800d440:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	609a      	str	r2, [r3, #8]
 800d448:	e043      	b.n	800d4d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d119      	bne.n	800d484 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	6858      	ldr	r0, [r3, #4]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d458:	461a      	mov	r2, r3
 800d45a:	68b9      	ldr	r1, [r7, #8]
 800d45c:	f00e f87c 	bl	801b558 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	685a      	ldr	r2, [r3, #4]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d468:	441a      	add	r2, r3
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	685a      	ldr	r2, [r3, #4]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	429a      	cmp	r2, r3
 800d478:	d32b      	bcc.n	800d4d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	605a      	str	r2, [r3, #4]
 800d482:	e026      	b.n	800d4d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	68d8      	ldr	r0, [r3, #12]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d48c:	461a      	mov	r2, r3
 800d48e:	68b9      	ldr	r1, [r7, #8]
 800d490:	f00e f862 	bl	801b558 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	68da      	ldr	r2, [r3, #12]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d49c:	425b      	negs	r3, r3
 800d49e:	441a      	add	r2, r3
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	68da      	ldr	r2, [r3, #12]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d207      	bcs.n	800d4c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	689a      	ldr	r2, [r3, #8]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b8:	425b      	negs	r3, r3
 800d4ba:	441a      	add	r2, r3
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	d105      	bne.n	800d4d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	1c5a      	adds	r2, r3, #1
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d4da:	697b      	ldr	r3, [r7, #20]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3718      	adds	r7, #24
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d018      	beq.n	800d528 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	68da      	ldr	r2, [r3, #12]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4fe:	441a      	add	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	68da      	ldr	r2, [r3, #12]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d303      	bcc.n	800d518 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	68d9      	ldr	r1, [r3, #12]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d520:	461a      	mov	r2, r3
 800d522:	6838      	ldr	r0, [r7, #0]
 800d524:	f00e f818 	bl	801b558 <memcpy>
	}
}
 800d528:	bf00      	nop
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d538:	f001 fca4 	bl	800ee84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d542:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d544:	e011      	b.n	800d56a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d012      	beq.n	800d574 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	3324      	adds	r3, #36	; 0x24
 800d552:	4618      	mov	r0, r3
 800d554:	f000 fd50 	bl	800dff8 <xTaskRemoveFromEventList>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d001      	beq.n	800d562 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d55e:	f000 fe4d 	bl	800e1fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d562:	7bfb      	ldrb	r3, [r7, #15]
 800d564:	3b01      	subs	r3, #1
 800d566:	b2db      	uxtb	r3, r3
 800d568:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d56a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	dce9      	bgt.n	800d546 <prvUnlockQueue+0x16>
 800d572:	e000      	b.n	800d576 <prvUnlockQueue+0x46>
					break;
 800d574:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	22ff      	movs	r2, #255	; 0xff
 800d57a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d57e:	f001 fcb1 	bl	800eee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d582:	f001 fc7f 	bl	800ee84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d58c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d58e:	e011      	b.n	800d5b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	691b      	ldr	r3, [r3, #16]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d012      	beq.n	800d5be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	3310      	adds	r3, #16
 800d59c:	4618      	mov	r0, r3
 800d59e:	f000 fd2b 	bl	800dff8 <xTaskRemoveFromEventList>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d001      	beq.n	800d5ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d5a8:	f000 fe28 	bl	800e1fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d5ac:	7bbb      	ldrb	r3, [r7, #14]
 800d5ae:	3b01      	subs	r3, #1
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	dce9      	bgt.n	800d590 <prvUnlockQueue+0x60>
 800d5bc:	e000      	b.n	800d5c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d5be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	22ff      	movs	r2, #255	; 0xff
 800d5c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d5c8:	f001 fc8c 	bl	800eee4 <vPortExitCritical>
}
 800d5cc:	bf00      	nop
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5dc:	f001 fc52 	bl	800ee84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d102      	bne.n	800d5ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	e001      	b.n	800d5f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5f2:	f001 fc77 	bl	800eee4 <vPortExitCritical>

	return xReturn;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d608:	f001 fc3c 	bl	800ee84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d614:	429a      	cmp	r2, r3
 800d616:	d102      	bne.n	800d61e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d618:	2301      	movs	r3, #1
 800d61a:	60fb      	str	r3, [r7, #12]
 800d61c:	e001      	b.n	800d622 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d61e:	2300      	movs	r3, #0
 800d620:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d622:	f001 fc5f 	bl	800eee4 <vPortExitCritical>

	return xReturn;
 800d626:	68fb      	ldr	r3, [r7, #12]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3710      	adds	r7, #16
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d630:	b480      	push	{r7}
 800d632:	b085      	sub	sp, #20
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d63a:	2300      	movs	r3, #0
 800d63c:	60fb      	str	r3, [r7, #12]
 800d63e:	e014      	b.n	800d66a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d640:	4a0f      	ldr	r2, [pc, #60]	; (800d680 <vQueueAddToRegistry+0x50>)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d10b      	bne.n	800d664 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d64c:	490c      	ldr	r1, [pc, #48]	; (800d680 <vQueueAddToRegistry+0x50>)
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	683a      	ldr	r2, [r7, #0]
 800d652:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d656:	4a0a      	ldr	r2, [pc, #40]	; (800d680 <vQueueAddToRegistry+0x50>)
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	00db      	lsls	r3, r3, #3
 800d65c:	4413      	add	r3, r2
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d662:	e006      	b.n	800d672 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3301      	adds	r3, #1
 800d668:	60fb      	str	r3, [r7, #12]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2b07      	cmp	r3, #7
 800d66e:	d9e7      	bls.n	800d640 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d670:	bf00      	nop
 800d672:	bf00      	nop
 800d674:	3714      	adds	r7, #20
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	20012340 	.word	0x20012340

0800d684 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d684:	b580      	push	{r7, lr}
 800d686:	b086      	sub	sp, #24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d694:	f001 fbf6 	bl	800ee84 <vPortEnterCritical>
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d69e:	b25b      	sxtb	r3, r3
 800d6a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6a4:	d103      	bne.n	800d6ae <vQueueWaitForMessageRestricted+0x2a>
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6b4:	b25b      	sxtb	r3, r3
 800d6b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6ba:	d103      	bne.n	800d6c4 <vQueueWaitForMessageRestricted+0x40>
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6c4:	f001 fc0e 	bl	800eee4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d106      	bne.n	800d6de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	3324      	adds	r3, #36	; 0x24
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	68b9      	ldr	r1, [r7, #8]
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f000 fc61 	bl	800dfa0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d6de:	6978      	ldr	r0, [r7, #20]
 800d6e0:	f7ff ff26 	bl	800d530 <prvUnlockQueue>
	}
 800d6e4:	bf00      	nop
 800d6e6:	3718      	adds	r7, #24
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b08e      	sub	sp, #56	; 0x38
 800d6f0:	af04      	add	r7, sp, #16
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
 800d6f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10a      	bne.n	800d716 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	623b      	str	r3, [r7, #32]
}
 800d712:	bf00      	nop
 800d714:	e7fe      	b.n	800d714 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10a      	bne.n	800d732 <xTaskCreateStatic+0x46>
	__asm volatile
 800d71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d720:	f383 8811 	msr	BASEPRI, r3
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	61fb      	str	r3, [r7, #28]
}
 800d72e:	bf00      	nop
 800d730:	e7fe      	b.n	800d730 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d732:	23bc      	movs	r3, #188	; 0xbc
 800d734:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	2bbc      	cmp	r3, #188	; 0xbc
 800d73a:	d00a      	beq.n	800d752 <xTaskCreateStatic+0x66>
	__asm volatile
 800d73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d740:	f383 8811 	msr	BASEPRI, r3
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	61bb      	str	r3, [r7, #24]
}
 800d74e:	bf00      	nop
 800d750:	e7fe      	b.n	800d750 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d752:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d756:	2b00      	cmp	r3, #0
 800d758:	d01e      	beq.n	800d798 <xTaskCreateStatic+0xac>
 800d75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d01b      	beq.n	800d798 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d762:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d768:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76c:	2202      	movs	r2, #2
 800d76e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d772:	2300      	movs	r3, #0
 800d774:	9303      	str	r3, [sp, #12]
 800d776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d778:	9302      	str	r3, [sp, #8]
 800d77a:	f107 0314 	add.w	r3, r7, #20
 800d77e:	9301      	str	r3, [sp, #4]
 800d780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	68b9      	ldr	r1, [r7, #8]
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f000 f850 	bl	800d830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d792:	f000 f8f3 	bl	800d97c <prvAddNewTaskToReadyList>
 800d796:	e001      	b.n	800d79c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d798:	2300      	movs	r3, #0
 800d79a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d79c:	697b      	ldr	r3, [r7, #20]
	}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3728      	adds	r7, #40	; 0x28
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b08c      	sub	sp, #48	; 0x30
 800d7aa:	af04      	add	r7, sp, #16
 800d7ac:	60f8      	str	r0, [r7, #12]
 800d7ae:	60b9      	str	r1, [r7, #8]
 800d7b0:	603b      	str	r3, [r7, #0]
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d7b6:	88fb      	ldrh	r3, [r7, #6]
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f001 fc84 	bl	800f0c8 <pvPortMalloc>
 800d7c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00e      	beq.n	800d7e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7c8:	20bc      	movs	r0, #188	; 0xbc
 800d7ca:	f001 fc7d 	bl	800f0c8 <pvPortMalloc>
 800d7ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d003      	beq.n	800d7de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	697a      	ldr	r2, [r7, #20]
 800d7da:	631a      	str	r2, [r3, #48]	; 0x30
 800d7dc:	e005      	b.n	800d7ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7de:	6978      	ldr	r0, [r7, #20]
 800d7e0:	f001 fd3e 	bl	800f260 <vPortFree>
 800d7e4:	e001      	b.n	800d7ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d017      	beq.n	800d820 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d7f8:	88fa      	ldrh	r2, [r7, #6]
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	9303      	str	r3, [sp, #12]
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	9302      	str	r3, [sp, #8]
 800d802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d804:	9301      	str	r3, [sp, #4]
 800d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	68b9      	ldr	r1, [r7, #8]
 800d80e:	68f8      	ldr	r0, [r7, #12]
 800d810:	f000 f80e 	bl	800d830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d814:	69f8      	ldr	r0, [r7, #28]
 800d816:	f000 f8b1 	bl	800d97c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d81a:	2301      	movs	r3, #1
 800d81c:	61bb      	str	r3, [r7, #24]
 800d81e:	e002      	b.n	800d826 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d824:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d826:	69bb      	ldr	r3, [r7, #24]
	}
 800d828:	4618      	mov	r0, r3
 800d82a:	3720      	adds	r7, #32
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b088      	sub	sp, #32
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
 800d83c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d840:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	461a      	mov	r2, r3
 800d848:	21a5      	movs	r1, #165	; 0xa5
 800d84a:	f00d fe93 	bl	801b574 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d858:	3b01      	subs	r3, #1
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	4413      	add	r3, r2
 800d85e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	f023 0307 	bic.w	r3, r3, #7
 800d866:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	f003 0307 	and.w	r3, r3, #7
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d00a      	beq.n	800d888 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d876:	f383 8811 	msr	BASEPRI, r3
 800d87a:	f3bf 8f6f 	isb	sy
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	617b      	str	r3, [r7, #20]
}
 800d884:	bf00      	nop
 800d886:	e7fe      	b.n	800d886 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d01f      	beq.n	800d8ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d88e:	2300      	movs	r3, #0
 800d890:	61fb      	str	r3, [r7, #28]
 800d892:	e012      	b.n	800d8ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	4413      	add	r3, r2
 800d89a:	7819      	ldrb	r1, [r3, #0]
 800d89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d89e:	69fb      	ldr	r3, [r7, #28]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	3334      	adds	r3, #52	; 0x34
 800d8a4:	460a      	mov	r2, r1
 800d8a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d006      	beq.n	800d8c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	61fb      	str	r3, [r7, #28]
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	2b0f      	cmp	r3, #15
 800d8be:	d9e9      	bls.n	800d894 <prvInitialiseNewTask+0x64>
 800d8c0:	e000      	b.n	800d8c4 <prvInitialiseNewTask+0x94>
			{
				break;
 800d8c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8cc:	e003      	b.n	800d8d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d8:	2b37      	cmp	r3, #55	; 0x37
 800d8da:	d901      	bls.n	800d8e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8dc:	2337      	movs	r3, #55	; 0x37
 800d8de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f4:	3304      	adds	r3, #4
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7ff f978 	bl	800cbec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fe:	3318      	adds	r3, #24
 800d900:	4618      	mov	r0, r3
 800d902:	f7ff f973 	bl	800cbec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d90a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d914:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d91a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	2200      	movs	r2, #0
 800d920:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d926:	2200      	movs	r2, #0
 800d928:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92e:	3354      	adds	r3, #84	; 0x54
 800d930:	2260      	movs	r2, #96	; 0x60
 800d932:	2100      	movs	r1, #0
 800d934:	4618      	mov	r0, r3
 800d936:	f00d fe1d 	bl	801b574 <memset>
 800d93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93c:	4a0c      	ldr	r2, [pc, #48]	; (800d970 <prvInitialiseNewTask+0x140>)
 800d93e:	659a      	str	r2, [r3, #88]	; 0x58
 800d940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d942:	4a0c      	ldr	r2, [pc, #48]	; (800d974 <prvInitialiseNewTask+0x144>)
 800d944:	65da      	str	r2, [r3, #92]	; 0x5c
 800d946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d948:	4a0b      	ldr	r2, [pc, #44]	; (800d978 <prvInitialiseNewTask+0x148>)
 800d94a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	68f9      	ldr	r1, [r7, #12]
 800d950:	69b8      	ldr	r0, [r7, #24]
 800d952:	f001 f967 	bl	800ec24 <pxPortInitialiseStack>
 800d956:	4602      	mov	r2, r0
 800d958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d002      	beq.n	800d968 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d966:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d968:	bf00      	nop
 800d96a:	3720      	adds	r7, #32
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	0801df80 	.word	0x0801df80
 800d974:	0801dfa0 	.word	0x0801dfa0
 800d978:	0801df60 	.word	0x0801df60

0800d97c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d984:	f001 fa7e 	bl	800ee84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d988:	4b2d      	ldr	r3, [pc, #180]	; (800da40 <prvAddNewTaskToReadyList+0xc4>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	3301      	adds	r3, #1
 800d98e:	4a2c      	ldr	r2, [pc, #176]	; (800da40 <prvAddNewTaskToReadyList+0xc4>)
 800d990:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d992:	4b2c      	ldr	r3, [pc, #176]	; (800da44 <prvAddNewTaskToReadyList+0xc8>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d109      	bne.n	800d9ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d99a:	4a2a      	ldr	r2, [pc, #168]	; (800da44 <prvAddNewTaskToReadyList+0xc8>)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9a0:	4b27      	ldr	r3, [pc, #156]	; (800da40 <prvAddNewTaskToReadyList+0xc4>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d110      	bne.n	800d9ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d9a8:	f000 fc4c 	bl	800e244 <prvInitialiseTaskLists>
 800d9ac:	e00d      	b.n	800d9ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d9ae:	4b26      	ldr	r3, [pc, #152]	; (800da48 <prvAddNewTaskToReadyList+0xcc>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d109      	bne.n	800d9ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d9b6:	4b23      	ldr	r3, [pc, #140]	; (800da44 <prvAddNewTaskToReadyList+0xc8>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d802      	bhi.n	800d9ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d9c4:	4a1f      	ldr	r2, [pc, #124]	; (800da44 <prvAddNewTaskToReadyList+0xc8>)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d9ca:	4b20      	ldr	r3, [pc, #128]	; (800da4c <prvAddNewTaskToReadyList+0xd0>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	4a1e      	ldr	r2, [pc, #120]	; (800da4c <prvAddNewTaskToReadyList+0xd0>)
 800d9d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d9d4:	4b1d      	ldr	r3, [pc, #116]	; (800da4c <prvAddNewTaskToReadyList+0xd0>)
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9e0:	4b1b      	ldr	r3, [pc, #108]	; (800da50 <prvAddNewTaskToReadyList+0xd4>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d903      	bls.n	800d9f0 <prvAddNewTaskToReadyList+0x74>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ec:	4a18      	ldr	r2, [pc, #96]	; (800da50 <prvAddNewTaskToReadyList+0xd4>)
 800d9ee:	6013      	str	r3, [r2, #0]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4a15      	ldr	r2, [pc, #84]	; (800da54 <prvAddNewTaskToReadyList+0xd8>)
 800d9fe:	441a      	add	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	3304      	adds	r3, #4
 800da04:	4619      	mov	r1, r3
 800da06:	4610      	mov	r0, r2
 800da08:	f7ff f8fd 	bl	800cc06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da0c:	f001 fa6a 	bl	800eee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da10:	4b0d      	ldr	r3, [pc, #52]	; (800da48 <prvAddNewTaskToReadyList+0xcc>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00e      	beq.n	800da36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da18:	4b0a      	ldr	r3, [pc, #40]	; (800da44 <prvAddNewTaskToReadyList+0xc8>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da22:	429a      	cmp	r2, r3
 800da24:	d207      	bcs.n	800da36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da26:	4b0c      	ldr	r3, [pc, #48]	; (800da58 <prvAddNewTaskToReadyList+0xdc>)
 800da28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da2c:	601a      	str	r2, [r3, #0]
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da36:	bf00      	nop
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	20012854 	.word	0x20012854
 800da44:	20012380 	.word	0x20012380
 800da48:	20012860 	.word	0x20012860
 800da4c:	20012870 	.word	0x20012870
 800da50:	2001285c 	.word	0x2001285c
 800da54:	20012384 	.word	0x20012384
 800da58:	e000ed04 	.word	0xe000ed04

0800da5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da64:	2300      	movs	r3, #0
 800da66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d017      	beq.n	800da9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800da6e:	4b13      	ldr	r3, [pc, #76]	; (800dabc <vTaskDelay+0x60>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d00a      	beq.n	800da8c <vTaskDelay+0x30>
	__asm volatile
 800da76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7a:	f383 8811 	msr	BASEPRI, r3
 800da7e:	f3bf 8f6f 	isb	sy
 800da82:	f3bf 8f4f 	dsb	sy
 800da86:	60bb      	str	r3, [r7, #8]
}
 800da88:	bf00      	nop
 800da8a:	e7fe      	b.n	800da8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800da8c:	f000 f88a 	bl	800dba4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da90:	2100      	movs	r1, #0
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 fd24 	bl	800e4e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da98:	f000 f892 	bl	800dbc0 <xTaskResumeAll>
 800da9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d107      	bne.n	800dab4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800daa4:	4b06      	ldr	r3, [pc, #24]	; (800dac0 <vTaskDelay+0x64>)
 800daa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daaa:	601a      	str	r2, [r3, #0]
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dab4:	bf00      	nop
 800dab6:	3710      	adds	r7, #16
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	2001287c 	.word	0x2001287c
 800dac0:	e000ed04 	.word	0xe000ed04

0800dac4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b08a      	sub	sp, #40	; 0x28
 800dac8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800daca:	2300      	movs	r3, #0
 800dacc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dace:	2300      	movs	r3, #0
 800dad0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dad2:	463a      	mov	r2, r7
 800dad4:	1d39      	adds	r1, r7, #4
 800dad6:	f107 0308 	add.w	r3, r7, #8
 800dada:	4618      	mov	r0, r3
 800dadc:	f7ff f832 	bl	800cb44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dae0:	6839      	ldr	r1, [r7, #0]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	68ba      	ldr	r2, [r7, #8]
 800dae6:	9202      	str	r2, [sp, #8]
 800dae8:	9301      	str	r3, [sp, #4]
 800daea:	2300      	movs	r3, #0
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	2300      	movs	r3, #0
 800daf0:	460a      	mov	r2, r1
 800daf2:	4924      	ldr	r1, [pc, #144]	; (800db84 <vTaskStartScheduler+0xc0>)
 800daf4:	4824      	ldr	r0, [pc, #144]	; (800db88 <vTaskStartScheduler+0xc4>)
 800daf6:	f7ff fdf9 	bl	800d6ec <xTaskCreateStatic>
 800dafa:	4603      	mov	r3, r0
 800dafc:	4a23      	ldr	r2, [pc, #140]	; (800db8c <vTaskStartScheduler+0xc8>)
 800dafe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800db00:	4b22      	ldr	r3, [pc, #136]	; (800db8c <vTaskStartScheduler+0xc8>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d002      	beq.n	800db0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800db08:	2301      	movs	r3, #1
 800db0a:	617b      	str	r3, [r7, #20]
 800db0c:	e001      	b.n	800db12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800db0e:	2300      	movs	r3, #0
 800db10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	2b01      	cmp	r3, #1
 800db16:	d102      	bne.n	800db1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800db18:	f000 fd36 	bl	800e588 <xTimerCreateTimerTask>
 800db1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	2b01      	cmp	r3, #1
 800db22:	d11b      	bne.n	800db5c <vTaskStartScheduler+0x98>
	__asm volatile
 800db24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db28:	f383 8811 	msr	BASEPRI, r3
 800db2c:	f3bf 8f6f 	isb	sy
 800db30:	f3bf 8f4f 	dsb	sy
 800db34:	613b      	str	r3, [r7, #16]
}
 800db36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db38:	4b15      	ldr	r3, [pc, #84]	; (800db90 <vTaskStartScheduler+0xcc>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	3354      	adds	r3, #84	; 0x54
 800db3e:	4a15      	ldr	r2, [pc, #84]	; (800db94 <vTaskStartScheduler+0xd0>)
 800db40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db42:	4b15      	ldr	r3, [pc, #84]	; (800db98 <vTaskStartScheduler+0xd4>)
 800db44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800db4a:	4b14      	ldr	r3, [pc, #80]	; (800db9c <vTaskStartScheduler+0xd8>)
 800db4c:	2201      	movs	r2, #1
 800db4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800db50:	4b13      	ldr	r3, [pc, #76]	; (800dba0 <vTaskStartScheduler+0xdc>)
 800db52:	2200      	movs	r2, #0
 800db54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800db56:	f001 f8f3 	bl	800ed40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800db5a:	e00e      	b.n	800db7a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db62:	d10a      	bne.n	800db7a <vTaskStartScheduler+0xb6>
	__asm volatile
 800db64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	60fb      	str	r3, [r7, #12]
}
 800db76:	bf00      	nop
 800db78:	e7fe      	b.n	800db78 <vTaskStartScheduler+0xb4>
}
 800db7a:	bf00      	nop
 800db7c:	3718      	adds	r7, #24
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	0801cc08 	.word	0x0801cc08
 800db88:	0800e215 	.word	0x0800e215
 800db8c:	20012878 	.word	0x20012878
 800db90:	20012380 	.word	0x20012380
 800db94:	20000c10 	.word	0x20000c10
 800db98:	20012874 	.word	0x20012874
 800db9c:	20012860 	.word	0x20012860
 800dba0:	20012858 	.word	0x20012858

0800dba4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dba4:	b480      	push	{r7}
 800dba6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dba8:	4b04      	ldr	r3, [pc, #16]	; (800dbbc <vTaskSuspendAll+0x18>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	3301      	adds	r3, #1
 800dbae:	4a03      	ldr	r2, [pc, #12]	; (800dbbc <vTaskSuspendAll+0x18>)
 800dbb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dbb2:	bf00      	nop
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr
 800dbbc:	2001287c 	.word	0x2001287c

0800dbc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dbce:	4b42      	ldr	r3, [pc, #264]	; (800dcd8 <xTaskResumeAll+0x118>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d10a      	bne.n	800dbec <xTaskResumeAll+0x2c>
	__asm volatile
 800dbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbda:	f383 8811 	msr	BASEPRI, r3
 800dbde:	f3bf 8f6f 	isb	sy
 800dbe2:	f3bf 8f4f 	dsb	sy
 800dbe6:	603b      	str	r3, [r7, #0]
}
 800dbe8:	bf00      	nop
 800dbea:	e7fe      	b.n	800dbea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dbec:	f001 f94a 	bl	800ee84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dbf0:	4b39      	ldr	r3, [pc, #228]	; (800dcd8 <xTaskResumeAll+0x118>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	3b01      	subs	r3, #1
 800dbf6:	4a38      	ldr	r2, [pc, #224]	; (800dcd8 <xTaskResumeAll+0x118>)
 800dbf8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbfa:	4b37      	ldr	r3, [pc, #220]	; (800dcd8 <xTaskResumeAll+0x118>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d162      	bne.n	800dcc8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dc02:	4b36      	ldr	r3, [pc, #216]	; (800dcdc <xTaskResumeAll+0x11c>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d05e      	beq.n	800dcc8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc0a:	e02f      	b.n	800dc6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc0c:	4b34      	ldr	r3, [pc, #208]	; (800dce0 <xTaskResumeAll+0x120>)
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	3318      	adds	r3, #24
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7ff f851 	bl	800ccc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	3304      	adds	r3, #4
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7ff f84c 	bl	800ccc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc2c:	4b2d      	ldr	r3, [pc, #180]	; (800dce4 <xTaskResumeAll+0x124>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d903      	bls.n	800dc3c <xTaskResumeAll+0x7c>
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc38:	4a2a      	ldr	r2, [pc, #168]	; (800dce4 <xTaskResumeAll+0x124>)
 800dc3a:	6013      	str	r3, [r2, #0]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc40:	4613      	mov	r3, r2
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	4413      	add	r3, r2
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	4a27      	ldr	r2, [pc, #156]	; (800dce8 <xTaskResumeAll+0x128>)
 800dc4a:	441a      	add	r2, r3
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	3304      	adds	r3, #4
 800dc50:	4619      	mov	r1, r3
 800dc52:	4610      	mov	r0, r2
 800dc54:	f7fe ffd7 	bl	800cc06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc5c:	4b23      	ldr	r3, [pc, #140]	; (800dcec <xTaskResumeAll+0x12c>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d302      	bcc.n	800dc6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dc66:	4b22      	ldr	r3, [pc, #136]	; (800dcf0 <xTaskResumeAll+0x130>)
 800dc68:	2201      	movs	r2, #1
 800dc6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc6c:	4b1c      	ldr	r3, [pc, #112]	; (800dce0 <xTaskResumeAll+0x120>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d1cb      	bne.n	800dc0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d001      	beq.n	800dc7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc7a:	f000 fb85 	bl	800e388 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dc7e:	4b1d      	ldr	r3, [pc, #116]	; (800dcf4 <xTaskResumeAll+0x134>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d010      	beq.n	800dcac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc8a:	f000 f847 	bl	800dd1c <xTaskIncrementTick>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d002      	beq.n	800dc9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dc94:	4b16      	ldr	r3, [pc, #88]	; (800dcf0 <xTaskResumeAll+0x130>)
 800dc96:	2201      	movs	r2, #1
 800dc98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d1f1      	bne.n	800dc8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dca6:	4b13      	ldr	r3, [pc, #76]	; (800dcf4 <xTaskResumeAll+0x134>)
 800dca8:	2200      	movs	r2, #0
 800dcaa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dcac:	4b10      	ldr	r3, [pc, #64]	; (800dcf0 <xTaskResumeAll+0x130>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d009      	beq.n	800dcc8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dcb8:	4b0f      	ldr	r3, [pc, #60]	; (800dcf8 <xTaskResumeAll+0x138>)
 800dcba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcbe:	601a      	str	r2, [r3, #0]
 800dcc0:	f3bf 8f4f 	dsb	sy
 800dcc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dcc8:	f001 f90c 	bl	800eee4 <vPortExitCritical>

	return xAlreadyYielded;
 800dccc:	68bb      	ldr	r3, [r7, #8]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	2001287c 	.word	0x2001287c
 800dcdc:	20012854 	.word	0x20012854
 800dce0:	20012814 	.word	0x20012814
 800dce4:	2001285c 	.word	0x2001285c
 800dce8:	20012384 	.word	0x20012384
 800dcec:	20012380 	.word	0x20012380
 800dcf0:	20012868 	.word	0x20012868
 800dcf4:	20012864 	.word	0x20012864
 800dcf8:	e000ed04 	.word	0xe000ed04

0800dcfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dd02:	4b05      	ldr	r3, [pc, #20]	; (800dd18 <xTaskGetTickCount+0x1c>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dd08:	687b      	ldr	r3, [r7, #4]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	370c      	adds	r7, #12
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	20012858 	.word	0x20012858

0800dd1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b086      	sub	sp, #24
 800dd20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd22:	2300      	movs	r3, #0
 800dd24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd26:	4b4f      	ldr	r3, [pc, #316]	; (800de64 <xTaskIncrementTick+0x148>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f040 808f 	bne.w	800de4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd30:	4b4d      	ldr	r3, [pc, #308]	; (800de68 <xTaskIncrementTick+0x14c>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	3301      	adds	r3, #1
 800dd36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd38:	4a4b      	ldr	r2, [pc, #300]	; (800de68 <xTaskIncrementTick+0x14c>)
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d120      	bne.n	800dd86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd44:	4b49      	ldr	r3, [pc, #292]	; (800de6c <xTaskIncrementTick+0x150>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00a      	beq.n	800dd64 <xTaskIncrementTick+0x48>
	__asm volatile
 800dd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd52:	f383 8811 	msr	BASEPRI, r3
 800dd56:	f3bf 8f6f 	isb	sy
 800dd5a:	f3bf 8f4f 	dsb	sy
 800dd5e:	603b      	str	r3, [r7, #0]
}
 800dd60:	bf00      	nop
 800dd62:	e7fe      	b.n	800dd62 <xTaskIncrementTick+0x46>
 800dd64:	4b41      	ldr	r3, [pc, #260]	; (800de6c <xTaskIncrementTick+0x150>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	60fb      	str	r3, [r7, #12]
 800dd6a:	4b41      	ldr	r3, [pc, #260]	; (800de70 <xTaskIncrementTick+0x154>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a3f      	ldr	r2, [pc, #252]	; (800de6c <xTaskIncrementTick+0x150>)
 800dd70:	6013      	str	r3, [r2, #0]
 800dd72:	4a3f      	ldr	r2, [pc, #252]	; (800de70 <xTaskIncrementTick+0x154>)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6013      	str	r3, [r2, #0]
 800dd78:	4b3e      	ldr	r3, [pc, #248]	; (800de74 <xTaskIncrementTick+0x158>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	4a3d      	ldr	r2, [pc, #244]	; (800de74 <xTaskIncrementTick+0x158>)
 800dd80:	6013      	str	r3, [r2, #0]
 800dd82:	f000 fb01 	bl	800e388 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd86:	4b3c      	ldr	r3, [pc, #240]	; (800de78 <xTaskIncrementTick+0x15c>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	693a      	ldr	r2, [r7, #16]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d349      	bcc.n	800de24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd90:	4b36      	ldr	r3, [pc, #216]	; (800de6c <xTaskIncrementTick+0x150>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d104      	bne.n	800dda4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd9a:	4b37      	ldr	r3, [pc, #220]	; (800de78 <xTaskIncrementTick+0x15c>)
 800dd9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dda0:	601a      	str	r2, [r3, #0]
					break;
 800dda2:	e03f      	b.n	800de24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dda4:	4b31      	ldr	r3, [pc, #196]	; (800de6c <xTaskIncrementTick+0x150>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	685b      	ldr	r3, [r3, #4]
 800ddb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ddb4:	693a      	ldr	r2, [r7, #16]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d203      	bcs.n	800ddc4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ddbc:	4a2e      	ldr	r2, [pc, #184]	; (800de78 <xTaskIncrementTick+0x15c>)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ddc2:	e02f      	b.n	800de24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	3304      	adds	r3, #4
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7fe ff79 	bl	800ccc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d004      	beq.n	800dde0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	3318      	adds	r3, #24
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fe ff70 	bl	800ccc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde4:	4b25      	ldr	r3, [pc, #148]	; (800de7c <xTaskIncrementTick+0x160>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d903      	bls.n	800ddf4 <xTaskIncrementTick+0xd8>
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf0:	4a22      	ldr	r2, [pc, #136]	; (800de7c <xTaskIncrementTick+0x160>)
 800ddf2:	6013      	str	r3, [r2, #0]
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf8:	4613      	mov	r3, r2
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	4413      	add	r3, r2
 800ddfe:	009b      	lsls	r3, r3, #2
 800de00:	4a1f      	ldr	r2, [pc, #124]	; (800de80 <xTaskIncrementTick+0x164>)
 800de02:	441a      	add	r2, r3
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	3304      	adds	r3, #4
 800de08:	4619      	mov	r1, r3
 800de0a:	4610      	mov	r0, r2
 800de0c:	f7fe fefb 	bl	800cc06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de14:	4b1b      	ldr	r3, [pc, #108]	; (800de84 <xTaskIncrementTick+0x168>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d3b8      	bcc.n	800dd90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800de1e:	2301      	movs	r3, #1
 800de20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de22:	e7b5      	b.n	800dd90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de24:	4b17      	ldr	r3, [pc, #92]	; (800de84 <xTaskIncrementTick+0x168>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de2a:	4915      	ldr	r1, [pc, #84]	; (800de80 <xTaskIncrementTick+0x164>)
 800de2c:	4613      	mov	r3, r2
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	4413      	add	r3, r2
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	440b      	add	r3, r1
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d901      	bls.n	800de40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800de3c:	2301      	movs	r3, #1
 800de3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de40:	4b11      	ldr	r3, [pc, #68]	; (800de88 <xTaskIncrementTick+0x16c>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d007      	beq.n	800de58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800de48:	2301      	movs	r3, #1
 800de4a:	617b      	str	r3, [r7, #20]
 800de4c:	e004      	b.n	800de58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800de4e:	4b0f      	ldr	r3, [pc, #60]	; (800de8c <xTaskIncrementTick+0x170>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	3301      	adds	r3, #1
 800de54:	4a0d      	ldr	r2, [pc, #52]	; (800de8c <xTaskIncrementTick+0x170>)
 800de56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800de58:	697b      	ldr	r3, [r7, #20]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3718      	adds	r7, #24
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	2001287c 	.word	0x2001287c
 800de68:	20012858 	.word	0x20012858
 800de6c:	2001280c 	.word	0x2001280c
 800de70:	20012810 	.word	0x20012810
 800de74:	2001286c 	.word	0x2001286c
 800de78:	20012874 	.word	0x20012874
 800de7c:	2001285c 	.word	0x2001285c
 800de80:	20012384 	.word	0x20012384
 800de84:	20012380 	.word	0x20012380
 800de88:	20012868 	.word	0x20012868
 800de8c:	20012864 	.word	0x20012864

0800de90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de90:	b480      	push	{r7}
 800de92:	b085      	sub	sp, #20
 800de94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de96:	4b2a      	ldr	r3, [pc, #168]	; (800df40 <vTaskSwitchContext+0xb0>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d003      	beq.n	800dea6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de9e:	4b29      	ldr	r3, [pc, #164]	; (800df44 <vTaskSwitchContext+0xb4>)
 800dea0:	2201      	movs	r2, #1
 800dea2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dea4:	e046      	b.n	800df34 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800dea6:	4b27      	ldr	r3, [pc, #156]	; (800df44 <vTaskSwitchContext+0xb4>)
 800dea8:	2200      	movs	r2, #0
 800deaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deac:	4b26      	ldr	r3, [pc, #152]	; (800df48 <vTaskSwitchContext+0xb8>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	60fb      	str	r3, [r7, #12]
 800deb2:	e010      	b.n	800ded6 <vTaskSwitchContext+0x46>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d10a      	bne.n	800ded0 <vTaskSwitchContext+0x40>
	__asm volatile
 800deba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800debe:	f383 8811 	msr	BASEPRI, r3
 800dec2:	f3bf 8f6f 	isb	sy
 800dec6:	f3bf 8f4f 	dsb	sy
 800deca:	607b      	str	r3, [r7, #4]
}
 800decc:	bf00      	nop
 800dece:	e7fe      	b.n	800dece <vTaskSwitchContext+0x3e>
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	3b01      	subs	r3, #1
 800ded4:	60fb      	str	r3, [r7, #12]
 800ded6:	491d      	ldr	r1, [pc, #116]	; (800df4c <vTaskSwitchContext+0xbc>)
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	4613      	mov	r3, r2
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	4413      	add	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	440b      	add	r3, r1
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d0e4      	beq.n	800deb4 <vTaskSwitchContext+0x24>
 800deea:	68fa      	ldr	r2, [r7, #12]
 800deec:	4613      	mov	r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	4413      	add	r3, r2
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	4a15      	ldr	r2, [pc, #84]	; (800df4c <vTaskSwitchContext+0xbc>)
 800def6:	4413      	add	r3, r2
 800def8:	60bb      	str	r3, [r7, #8]
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	685a      	ldr	r2, [r3, #4]
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	605a      	str	r2, [r3, #4]
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	685a      	ldr	r2, [r3, #4]
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	3308      	adds	r3, #8
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d104      	bne.n	800df1a <vTaskSwitchContext+0x8a>
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	685a      	ldr	r2, [r3, #4]
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	605a      	str	r2, [r3, #4]
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	4a0b      	ldr	r2, [pc, #44]	; (800df50 <vTaskSwitchContext+0xc0>)
 800df22:	6013      	str	r3, [r2, #0]
 800df24:	4a08      	ldr	r2, [pc, #32]	; (800df48 <vTaskSwitchContext+0xb8>)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df2a:	4b09      	ldr	r3, [pc, #36]	; (800df50 <vTaskSwitchContext+0xc0>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	3354      	adds	r3, #84	; 0x54
 800df30:	4a08      	ldr	r2, [pc, #32]	; (800df54 <vTaskSwitchContext+0xc4>)
 800df32:	6013      	str	r3, [r2, #0]
}
 800df34:	bf00      	nop
 800df36:	3714      	adds	r7, #20
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr
 800df40:	2001287c 	.word	0x2001287c
 800df44:	20012868 	.word	0x20012868
 800df48:	2001285c 	.word	0x2001285c
 800df4c:	20012384 	.word	0x20012384
 800df50:	20012380 	.word	0x20012380
 800df54:	20000c10 	.word	0x20000c10

0800df58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d10a      	bne.n	800df7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800df68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6c:	f383 8811 	msr	BASEPRI, r3
 800df70:	f3bf 8f6f 	isb	sy
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	60fb      	str	r3, [r7, #12]
}
 800df7a:	bf00      	nop
 800df7c:	e7fe      	b.n	800df7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df7e:	4b07      	ldr	r3, [pc, #28]	; (800df9c <vTaskPlaceOnEventList+0x44>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	3318      	adds	r3, #24
 800df84:	4619      	mov	r1, r3
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f7fe fe61 	bl	800cc4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df8c:	2101      	movs	r1, #1
 800df8e:	6838      	ldr	r0, [r7, #0]
 800df90:	f000 faa6 	bl	800e4e0 <prvAddCurrentTaskToDelayedList>
}
 800df94:	bf00      	nop
 800df96:	3710      	adds	r7, #16
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	20012380 	.word	0x20012380

0800dfa0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d10a      	bne.n	800dfc8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb6:	f383 8811 	msr	BASEPRI, r3
 800dfba:	f3bf 8f6f 	isb	sy
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	617b      	str	r3, [r7, #20]
}
 800dfc4:	bf00      	nop
 800dfc6:	e7fe      	b.n	800dfc6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfc8:	4b0a      	ldr	r3, [pc, #40]	; (800dff4 <vTaskPlaceOnEventListRestricted+0x54>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	3318      	adds	r3, #24
 800dfce:	4619      	mov	r1, r3
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	f7fe fe18 	bl	800cc06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d002      	beq.n	800dfe2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dfdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfe0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dfe2:	6879      	ldr	r1, [r7, #4]
 800dfe4:	68b8      	ldr	r0, [r7, #8]
 800dfe6:	f000 fa7b 	bl	800e4e0 <prvAddCurrentTaskToDelayedList>
	}
 800dfea:	bf00      	nop
 800dfec:	3718      	adds	r7, #24
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	20012380 	.word	0x20012380

0800dff8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	68db      	ldr	r3, [r3, #12]
 800e006:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10a      	bne.n	800e024 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e012:	f383 8811 	msr	BASEPRI, r3
 800e016:	f3bf 8f6f 	isb	sy
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	60fb      	str	r3, [r7, #12]
}
 800e020:	bf00      	nop
 800e022:	e7fe      	b.n	800e022 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	3318      	adds	r3, #24
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fe fe49 	bl	800ccc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e02e:	4b1e      	ldr	r3, [pc, #120]	; (800e0a8 <xTaskRemoveFromEventList+0xb0>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d11d      	bne.n	800e072 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	3304      	adds	r3, #4
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fe fe40 	bl	800ccc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e044:	4b19      	ldr	r3, [pc, #100]	; (800e0ac <xTaskRemoveFromEventList+0xb4>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d903      	bls.n	800e054 <xTaskRemoveFromEventList+0x5c>
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e050:	4a16      	ldr	r2, [pc, #88]	; (800e0ac <xTaskRemoveFromEventList+0xb4>)
 800e052:	6013      	str	r3, [r2, #0]
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e058:	4613      	mov	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4413      	add	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	4a13      	ldr	r2, [pc, #76]	; (800e0b0 <xTaskRemoveFromEventList+0xb8>)
 800e062:	441a      	add	r2, r3
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	3304      	adds	r3, #4
 800e068:	4619      	mov	r1, r3
 800e06a:	4610      	mov	r0, r2
 800e06c:	f7fe fdcb 	bl	800cc06 <vListInsertEnd>
 800e070:	e005      	b.n	800e07e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	3318      	adds	r3, #24
 800e076:	4619      	mov	r1, r3
 800e078:	480e      	ldr	r0, [pc, #56]	; (800e0b4 <xTaskRemoveFromEventList+0xbc>)
 800e07a:	f7fe fdc4 	bl	800cc06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e082:	4b0d      	ldr	r3, [pc, #52]	; (800e0b8 <xTaskRemoveFromEventList+0xc0>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e088:	429a      	cmp	r2, r3
 800e08a:	d905      	bls.n	800e098 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e08c:	2301      	movs	r3, #1
 800e08e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e090:	4b0a      	ldr	r3, [pc, #40]	; (800e0bc <xTaskRemoveFromEventList+0xc4>)
 800e092:	2201      	movs	r2, #1
 800e094:	601a      	str	r2, [r3, #0]
 800e096:	e001      	b.n	800e09c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e098:	2300      	movs	r3, #0
 800e09a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e09c:	697b      	ldr	r3, [r7, #20]
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3718      	adds	r7, #24
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	2001287c 	.word	0x2001287c
 800e0ac:	2001285c 	.word	0x2001285c
 800e0b0:	20012384 	.word	0x20012384
 800e0b4:	20012814 	.word	0x20012814
 800e0b8:	20012380 	.word	0x20012380
 800e0bc:	20012868 	.word	0x20012868

0800e0c0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d10a      	bne.n	800e0e4 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800e0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d2:	f383 8811 	msr	BASEPRI, r3
 800e0d6:	f3bf 8f6f 	isb	sy
 800e0da:	f3bf 8f4f 	dsb	sy
 800e0de:	60fb      	str	r3, [r7, #12]
}
 800e0e0:	bf00      	nop
 800e0e2:	e7fe      	b.n	800e0e2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800e0e4:	f000 fece 	bl	800ee84 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0e8:	4b06      	ldr	r3, [pc, #24]	; (800e104 <vTaskSetTimeOutState+0x44>)
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800e0f0:	4b05      	ldr	r3, [pc, #20]	; (800e108 <vTaskSetTimeOutState+0x48>)
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800e0f8:	f000 fef4 	bl	800eee4 <vPortExitCritical>
}
 800e0fc:	bf00      	nop
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	2001286c 	.word	0x2001286c
 800e108:	20012858 	.word	0x20012858

0800e10c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e114:	4b06      	ldr	r3, [pc, #24]	; (800e130 <vTaskInternalSetTimeOutState+0x24>)
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e11c:	4b05      	ldr	r3, [pc, #20]	; (800e134 <vTaskInternalSetTimeOutState+0x28>)
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	605a      	str	r2, [r3, #4]
}
 800e124:	bf00      	nop
 800e126:	370c      	adds	r7, #12
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr
 800e130:	2001286c 	.word	0x2001286c
 800e134:	20012858 	.word	0x20012858

0800e138 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b088      	sub	sp, #32
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d10a      	bne.n	800e15e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14c:	f383 8811 	msr	BASEPRI, r3
 800e150:	f3bf 8f6f 	isb	sy
 800e154:	f3bf 8f4f 	dsb	sy
 800e158:	613b      	str	r3, [r7, #16]
}
 800e15a:	bf00      	nop
 800e15c:	e7fe      	b.n	800e15c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10a      	bne.n	800e17a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e168:	f383 8811 	msr	BASEPRI, r3
 800e16c:	f3bf 8f6f 	isb	sy
 800e170:	f3bf 8f4f 	dsb	sy
 800e174:	60fb      	str	r3, [r7, #12]
}
 800e176:	bf00      	nop
 800e178:	e7fe      	b.n	800e178 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e17a:	f000 fe83 	bl	800ee84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e17e:	4b1d      	ldr	r3, [pc, #116]	; (800e1f4 <xTaskCheckForTimeOut+0xbc>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	69ba      	ldr	r2, [r7, #24]
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e196:	d102      	bne.n	800e19e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e198:	2300      	movs	r3, #0
 800e19a:	61fb      	str	r3, [r7, #28]
 800e19c:	e023      	b.n	800e1e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	4b15      	ldr	r3, [pc, #84]	; (800e1f8 <xTaskCheckForTimeOut+0xc0>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d007      	beq.n	800e1ba <xTaskCheckForTimeOut+0x82>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	69ba      	ldr	r2, [r7, #24]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d302      	bcc.n	800e1ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	61fb      	str	r3, [r7, #28]
 800e1b8:	e015      	b.n	800e1e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	697a      	ldr	r2, [r7, #20]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d20b      	bcs.n	800e1dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	1ad2      	subs	r2, r2, r3
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7ff ff9b 	bl	800e10c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	61fb      	str	r3, [r7, #28]
 800e1da:	e004      	b.n	800e1e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e1e6:	f000 fe7d 	bl	800eee4 <vPortExitCritical>

	return xReturn;
 800e1ea:	69fb      	ldr	r3, [r7, #28]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3720      	adds	r7, #32
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	20012858 	.word	0x20012858
 800e1f8:	2001286c 	.word	0x2001286c

0800e1fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e200:	4b03      	ldr	r3, [pc, #12]	; (800e210 <vTaskMissedYield+0x14>)
 800e202:	2201      	movs	r2, #1
 800e204:	601a      	str	r2, [r3, #0]
}
 800e206:	bf00      	nop
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr
 800e210:	20012868 	.word	0x20012868

0800e214 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e21c:	f000 f852 	bl	800e2c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e220:	4b06      	ldr	r3, [pc, #24]	; (800e23c <prvIdleTask+0x28>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d9f9      	bls.n	800e21c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e228:	4b05      	ldr	r3, [pc, #20]	; (800e240 <prvIdleTask+0x2c>)
 800e22a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e22e:	601a      	str	r2, [r3, #0]
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e238:	e7f0      	b.n	800e21c <prvIdleTask+0x8>
 800e23a:	bf00      	nop
 800e23c:	20012384 	.word	0x20012384
 800e240:	e000ed04 	.word	0xe000ed04

0800e244 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e24a:	2300      	movs	r3, #0
 800e24c:	607b      	str	r3, [r7, #4]
 800e24e:	e00c      	b.n	800e26a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	4613      	mov	r3, r2
 800e254:	009b      	lsls	r3, r3, #2
 800e256:	4413      	add	r3, r2
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	4a12      	ldr	r2, [pc, #72]	; (800e2a4 <prvInitialiseTaskLists+0x60>)
 800e25c:	4413      	add	r3, r2
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fe fca4 	bl	800cbac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	3301      	adds	r3, #1
 800e268:	607b      	str	r3, [r7, #4]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b37      	cmp	r3, #55	; 0x37
 800e26e:	d9ef      	bls.n	800e250 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e270:	480d      	ldr	r0, [pc, #52]	; (800e2a8 <prvInitialiseTaskLists+0x64>)
 800e272:	f7fe fc9b 	bl	800cbac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e276:	480d      	ldr	r0, [pc, #52]	; (800e2ac <prvInitialiseTaskLists+0x68>)
 800e278:	f7fe fc98 	bl	800cbac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e27c:	480c      	ldr	r0, [pc, #48]	; (800e2b0 <prvInitialiseTaskLists+0x6c>)
 800e27e:	f7fe fc95 	bl	800cbac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e282:	480c      	ldr	r0, [pc, #48]	; (800e2b4 <prvInitialiseTaskLists+0x70>)
 800e284:	f7fe fc92 	bl	800cbac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e288:	480b      	ldr	r0, [pc, #44]	; (800e2b8 <prvInitialiseTaskLists+0x74>)
 800e28a:	f7fe fc8f 	bl	800cbac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e28e:	4b0b      	ldr	r3, [pc, #44]	; (800e2bc <prvInitialiseTaskLists+0x78>)
 800e290:	4a05      	ldr	r2, [pc, #20]	; (800e2a8 <prvInitialiseTaskLists+0x64>)
 800e292:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e294:	4b0a      	ldr	r3, [pc, #40]	; (800e2c0 <prvInitialiseTaskLists+0x7c>)
 800e296:	4a05      	ldr	r2, [pc, #20]	; (800e2ac <prvInitialiseTaskLists+0x68>)
 800e298:	601a      	str	r2, [r3, #0]
}
 800e29a:	bf00      	nop
 800e29c:	3708      	adds	r7, #8
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	20012384 	.word	0x20012384
 800e2a8:	200127e4 	.word	0x200127e4
 800e2ac:	200127f8 	.word	0x200127f8
 800e2b0:	20012814 	.word	0x20012814
 800e2b4:	20012828 	.word	0x20012828
 800e2b8:	20012840 	.word	0x20012840
 800e2bc:	2001280c 	.word	0x2001280c
 800e2c0:	20012810 	.word	0x20012810

0800e2c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2ca:	e019      	b.n	800e300 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e2cc:	f000 fdda 	bl	800ee84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2d0:	4b10      	ldr	r3, [pc, #64]	; (800e314 <prvCheckTasksWaitingTermination+0x50>)
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	3304      	adds	r3, #4
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7fe fcef 	bl	800ccc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e2e2:	4b0d      	ldr	r3, [pc, #52]	; (800e318 <prvCheckTasksWaitingTermination+0x54>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	4a0b      	ldr	r2, [pc, #44]	; (800e318 <prvCheckTasksWaitingTermination+0x54>)
 800e2ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e2ec:	4b0b      	ldr	r3, [pc, #44]	; (800e31c <prvCheckTasksWaitingTermination+0x58>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	4a0a      	ldr	r2, [pc, #40]	; (800e31c <prvCheckTasksWaitingTermination+0x58>)
 800e2f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e2f6:	f000 fdf5 	bl	800eee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 f810 	bl	800e320 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e300:	4b06      	ldr	r3, [pc, #24]	; (800e31c <prvCheckTasksWaitingTermination+0x58>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1e1      	bne.n	800e2cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e308:	bf00      	nop
 800e30a:	bf00      	nop
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	20012828 	.word	0x20012828
 800e318:	20012854 	.word	0x20012854
 800e31c:	2001283c 	.word	0x2001283c

0800e320 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	3354      	adds	r3, #84	; 0x54
 800e32c:	4618      	mov	r0, r3
 800e32e:	f00d fab9 	bl	801b8a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d108      	bne.n	800e34e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e340:	4618      	mov	r0, r3
 800e342:	f000 ff8d 	bl	800f260 <vPortFree>
				vPortFree( pxTCB );
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 ff8a 	bl	800f260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e34c:	e018      	b.n	800e380 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e354:	2b01      	cmp	r3, #1
 800e356:	d103      	bne.n	800e360 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 ff81 	bl	800f260 <vPortFree>
	}
 800e35e:	e00f      	b.n	800e380 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e366:	2b02      	cmp	r3, #2
 800e368:	d00a      	beq.n	800e380 <prvDeleteTCB+0x60>
	__asm volatile
 800e36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36e:	f383 8811 	msr	BASEPRI, r3
 800e372:	f3bf 8f6f 	isb	sy
 800e376:	f3bf 8f4f 	dsb	sy
 800e37a:	60fb      	str	r3, [r7, #12]
}
 800e37c:	bf00      	nop
 800e37e:	e7fe      	b.n	800e37e <prvDeleteTCB+0x5e>
	}
 800e380:	bf00      	nop
 800e382:	3710      	adds	r7, #16
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e38e:	4b0c      	ldr	r3, [pc, #48]	; (800e3c0 <prvResetNextTaskUnblockTime+0x38>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d104      	bne.n	800e3a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e398:	4b0a      	ldr	r3, [pc, #40]	; (800e3c4 <prvResetNextTaskUnblockTime+0x3c>)
 800e39a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e39e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e3a0:	e008      	b.n	800e3b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3a2:	4b07      	ldr	r3, [pc, #28]	; (800e3c0 <prvResetNextTaskUnblockTime+0x38>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	68db      	ldr	r3, [r3, #12]
 800e3aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	4a04      	ldr	r2, [pc, #16]	; (800e3c4 <prvResetNextTaskUnblockTime+0x3c>)
 800e3b2:	6013      	str	r3, [r2, #0]
}
 800e3b4:	bf00      	nop
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr
 800e3c0:	2001280c 	.word	0x2001280c
 800e3c4:	20012874 	.word	0x20012874

0800e3c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e3ce:	4b0b      	ldr	r3, [pc, #44]	; (800e3fc <xTaskGetSchedulerState+0x34>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d102      	bne.n	800e3dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	607b      	str	r3, [r7, #4]
 800e3da:	e008      	b.n	800e3ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3dc:	4b08      	ldr	r3, [pc, #32]	; (800e400 <xTaskGetSchedulerState+0x38>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d102      	bne.n	800e3ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	607b      	str	r3, [r7, #4]
 800e3e8:	e001      	b.n	800e3ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e3ee:	687b      	ldr	r3, [r7, #4]
	}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	370c      	adds	r7, #12
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	20012860 	.word	0x20012860
 800e400:	2001287c 	.word	0x2001287c

0800e404 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e404:	b580      	push	{r7, lr}
 800e406:	b086      	sub	sp, #24
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e410:	2300      	movs	r3, #0
 800e412:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d056      	beq.n	800e4c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e41a:	4b2e      	ldr	r3, [pc, #184]	; (800e4d4 <xTaskPriorityDisinherit+0xd0>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	693a      	ldr	r2, [r7, #16]
 800e420:	429a      	cmp	r2, r3
 800e422:	d00a      	beq.n	800e43a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e428:	f383 8811 	msr	BASEPRI, r3
 800e42c:	f3bf 8f6f 	isb	sy
 800e430:	f3bf 8f4f 	dsb	sy
 800e434:	60fb      	str	r3, [r7, #12]
}
 800e436:	bf00      	nop
 800e438:	e7fe      	b.n	800e438 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d10a      	bne.n	800e458 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e446:	f383 8811 	msr	BASEPRI, r3
 800e44a:	f3bf 8f6f 	isb	sy
 800e44e:	f3bf 8f4f 	dsb	sy
 800e452:	60bb      	str	r3, [r7, #8]
}
 800e454:	bf00      	nop
 800e456:	e7fe      	b.n	800e456 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e45c:	1e5a      	subs	r2, r3, #1
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d02c      	beq.n	800e4c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e472:	2b00      	cmp	r3, #0
 800e474:	d128      	bne.n	800e4c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	3304      	adds	r3, #4
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7fe fc20 	bl	800ccc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e48c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e498:	4b0f      	ldr	r3, [pc, #60]	; (800e4d8 <xTaskPriorityDisinherit+0xd4>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d903      	bls.n	800e4a8 <xTaskPriorityDisinherit+0xa4>
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4a4:	4a0c      	ldr	r2, [pc, #48]	; (800e4d8 <xTaskPriorityDisinherit+0xd4>)
 800e4a6:	6013      	str	r3, [r2, #0]
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ac:	4613      	mov	r3, r2
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	4413      	add	r3, r2
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	4a09      	ldr	r2, [pc, #36]	; (800e4dc <xTaskPriorityDisinherit+0xd8>)
 800e4b6:	441a      	add	r2, r3
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	3304      	adds	r3, #4
 800e4bc:	4619      	mov	r1, r3
 800e4be:	4610      	mov	r0, r2
 800e4c0:	f7fe fba1 	bl	800cc06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e4c8:	697b      	ldr	r3, [r7, #20]
	}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3718      	adds	r7, #24
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	20012380 	.word	0x20012380
 800e4d8:	2001285c 	.word	0x2001285c
 800e4dc:	20012384 	.word	0x20012384

0800e4e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e4ea:	4b21      	ldr	r3, [pc, #132]	; (800e570 <prvAddCurrentTaskToDelayedList+0x90>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4f0:	4b20      	ldr	r3, [pc, #128]	; (800e574 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	3304      	adds	r3, #4
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fe fbe2 	bl	800ccc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e502:	d10a      	bne.n	800e51a <prvAddCurrentTaskToDelayedList+0x3a>
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d007      	beq.n	800e51a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e50a:	4b1a      	ldr	r3, [pc, #104]	; (800e574 <prvAddCurrentTaskToDelayedList+0x94>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	3304      	adds	r3, #4
 800e510:	4619      	mov	r1, r3
 800e512:	4819      	ldr	r0, [pc, #100]	; (800e578 <prvAddCurrentTaskToDelayedList+0x98>)
 800e514:	f7fe fb77 	bl	800cc06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e518:	e026      	b.n	800e568 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e51a:	68fa      	ldr	r2, [r7, #12]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	4413      	add	r3, r2
 800e520:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e522:	4b14      	ldr	r3, [pc, #80]	; (800e574 <prvAddCurrentTaskToDelayedList+0x94>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	68ba      	ldr	r2, [r7, #8]
 800e528:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e52a:	68ba      	ldr	r2, [r7, #8]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d209      	bcs.n	800e546 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e532:	4b12      	ldr	r3, [pc, #72]	; (800e57c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	4b0f      	ldr	r3, [pc, #60]	; (800e574 <prvAddCurrentTaskToDelayedList+0x94>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	3304      	adds	r3, #4
 800e53c:	4619      	mov	r1, r3
 800e53e:	4610      	mov	r0, r2
 800e540:	f7fe fb85 	bl	800cc4e <vListInsert>
}
 800e544:	e010      	b.n	800e568 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e546:	4b0e      	ldr	r3, [pc, #56]	; (800e580 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	4b0a      	ldr	r3, [pc, #40]	; (800e574 <prvAddCurrentTaskToDelayedList+0x94>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	3304      	adds	r3, #4
 800e550:	4619      	mov	r1, r3
 800e552:	4610      	mov	r0, r2
 800e554:	f7fe fb7b 	bl	800cc4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e558:	4b0a      	ldr	r3, [pc, #40]	; (800e584 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	68ba      	ldr	r2, [r7, #8]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d202      	bcs.n	800e568 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e562:	4a08      	ldr	r2, [pc, #32]	; (800e584 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	6013      	str	r3, [r2, #0]
}
 800e568:	bf00      	nop
 800e56a:	3710      	adds	r7, #16
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	20012858 	.word	0x20012858
 800e574:	20012380 	.word	0x20012380
 800e578:	20012840 	.word	0x20012840
 800e57c:	20012810 	.word	0x20012810
 800e580:	2001280c 	.word	0x2001280c
 800e584:	20012874 	.word	0x20012874

0800e588 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b08a      	sub	sp, #40	; 0x28
 800e58c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e58e:	2300      	movs	r3, #0
 800e590:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e592:	f000 fb07 	bl	800eba4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e596:	4b1c      	ldr	r3, [pc, #112]	; (800e608 <xTimerCreateTimerTask+0x80>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d021      	beq.n	800e5e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e5a6:	1d3a      	adds	r2, r7, #4
 800e5a8:	f107 0108 	add.w	r1, r7, #8
 800e5ac:	f107 030c 	add.w	r3, r7, #12
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fe fae1 	bl	800cb78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e5b6:	6879      	ldr	r1, [r7, #4]
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	68fa      	ldr	r2, [r7, #12]
 800e5bc:	9202      	str	r2, [sp, #8]
 800e5be:	9301      	str	r3, [sp, #4]
 800e5c0:	2302      	movs	r3, #2
 800e5c2:	9300      	str	r3, [sp, #0]
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	460a      	mov	r2, r1
 800e5c8:	4910      	ldr	r1, [pc, #64]	; (800e60c <xTimerCreateTimerTask+0x84>)
 800e5ca:	4811      	ldr	r0, [pc, #68]	; (800e610 <xTimerCreateTimerTask+0x88>)
 800e5cc:	f7ff f88e 	bl	800d6ec <xTaskCreateStatic>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	4a10      	ldr	r2, [pc, #64]	; (800e614 <xTimerCreateTimerTask+0x8c>)
 800e5d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e5d6:	4b0f      	ldr	r3, [pc, #60]	; (800e614 <xTimerCreateTimerTask+0x8c>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d001      	beq.n	800e5e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d10a      	bne.n	800e5fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ec:	f383 8811 	msr	BASEPRI, r3
 800e5f0:	f3bf 8f6f 	isb	sy
 800e5f4:	f3bf 8f4f 	dsb	sy
 800e5f8:	613b      	str	r3, [r7, #16]
}
 800e5fa:	bf00      	nop
 800e5fc:	e7fe      	b.n	800e5fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e5fe:	697b      	ldr	r3, [r7, #20]
}
 800e600:	4618      	mov	r0, r3
 800e602:	3718      	adds	r7, #24
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}
 800e608:	200128b0 	.word	0x200128b0
 800e60c:	0801cc10 	.word	0x0801cc10
 800e610:	0800e74d 	.word	0x0800e74d
 800e614:	200128b4 	.word	0x200128b4

0800e618 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b08a      	sub	sp, #40	; 0x28
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	607a      	str	r2, [r7, #4]
 800e624:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e626:	2300      	movs	r3, #0
 800e628:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d10a      	bne.n	800e646 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e634:	f383 8811 	msr	BASEPRI, r3
 800e638:	f3bf 8f6f 	isb	sy
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	623b      	str	r3, [r7, #32]
}
 800e642:	bf00      	nop
 800e644:	e7fe      	b.n	800e644 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e646:	4b1a      	ldr	r3, [pc, #104]	; (800e6b0 <xTimerGenericCommand+0x98>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d02a      	beq.n	800e6a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	2b05      	cmp	r3, #5
 800e65e:	dc18      	bgt.n	800e692 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e660:	f7ff feb2 	bl	800e3c8 <xTaskGetSchedulerState>
 800e664:	4603      	mov	r3, r0
 800e666:	2b02      	cmp	r3, #2
 800e668:	d109      	bne.n	800e67e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e66a:	4b11      	ldr	r3, [pc, #68]	; (800e6b0 <xTimerGenericCommand+0x98>)
 800e66c:	6818      	ldr	r0, [r3, #0]
 800e66e:	f107 0110 	add.w	r1, r7, #16
 800e672:	2300      	movs	r3, #0
 800e674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e676:	f7fe fc51 	bl	800cf1c <xQueueGenericSend>
 800e67a:	6278      	str	r0, [r7, #36]	; 0x24
 800e67c:	e012      	b.n	800e6a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e67e:	4b0c      	ldr	r3, [pc, #48]	; (800e6b0 <xTimerGenericCommand+0x98>)
 800e680:	6818      	ldr	r0, [r3, #0]
 800e682:	f107 0110 	add.w	r1, r7, #16
 800e686:	2300      	movs	r3, #0
 800e688:	2200      	movs	r2, #0
 800e68a:	f7fe fc47 	bl	800cf1c <xQueueGenericSend>
 800e68e:	6278      	str	r0, [r7, #36]	; 0x24
 800e690:	e008      	b.n	800e6a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e692:	4b07      	ldr	r3, [pc, #28]	; (800e6b0 <xTimerGenericCommand+0x98>)
 800e694:	6818      	ldr	r0, [r3, #0]
 800e696:	f107 0110 	add.w	r1, r7, #16
 800e69a:	2300      	movs	r3, #0
 800e69c:	683a      	ldr	r2, [r7, #0]
 800e69e:	f7fe fd3b 	bl	800d118 <xQueueGenericSendFromISR>
 800e6a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3728      	adds	r7, #40	; 0x28
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	200128b0 	.word	0x200128b0

0800e6b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b088      	sub	sp, #32
 800e6b8:	af02      	add	r7, sp, #8
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6be:	4b22      	ldr	r3, [pc, #136]	; (800e748 <prvProcessExpiredTimer+0x94>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	68db      	ldr	r3, [r3, #12]
 800e6c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	3304      	adds	r3, #4
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7fe faf7 	bl	800ccc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6d8:	f003 0304 	and.w	r3, r3, #4
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d022      	beq.n	800e726 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	699a      	ldr	r2, [r3, #24]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	18d1      	adds	r1, r2, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	683a      	ldr	r2, [r7, #0]
 800e6ec:	6978      	ldr	r0, [r7, #20]
 800e6ee:	f000 f8d1 	bl	800e894 <prvInsertTimerInActiveList>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d01f      	beq.n	800e738 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	9300      	str	r3, [sp, #0]
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	2100      	movs	r1, #0
 800e702:	6978      	ldr	r0, [r7, #20]
 800e704:	f7ff ff88 	bl	800e618 <xTimerGenericCommand>
 800e708:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d113      	bne.n	800e738 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e714:	f383 8811 	msr	BASEPRI, r3
 800e718:	f3bf 8f6f 	isb	sy
 800e71c:	f3bf 8f4f 	dsb	sy
 800e720:	60fb      	str	r3, [r7, #12]
}
 800e722:	bf00      	nop
 800e724:	e7fe      	b.n	800e724 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e72c:	f023 0301 	bic.w	r3, r3, #1
 800e730:	b2da      	uxtb	r2, r3
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	6a1b      	ldr	r3, [r3, #32]
 800e73c:	6978      	ldr	r0, [r7, #20]
 800e73e:	4798      	blx	r3
}
 800e740:	bf00      	nop
 800e742:	3718      	adds	r7, #24
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	200128a8 	.word	0x200128a8

0800e74c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e754:	f107 0308 	add.w	r3, r7, #8
 800e758:	4618      	mov	r0, r3
 800e75a:	f000 f857 	bl	800e80c <prvGetNextExpireTime>
 800e75e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	4619      	mov	r1, r3
 800e764:	68f8      	ldr	r0, [r7, #12]
 800e766:	f000 f803 	bl	800e770 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e76a:	f000 f8d5 	bl	800e918 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e76e:	e7f1      	b.n	800e754 <prvTimerTask+0x8>

0800e770 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e77a:	f7ff fa13 	bl	800dba4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e77e:	f107 0308 	add.w	r3, r7, #8
 800e782:	4618      	mov	r0, r3
 800e784:	f000 f866 	bl	800e854 <prvSampleTimeNow>
 800e788:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d130      	bne.n	800e7f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d10a      	bne.n	800e7ac <prvProcessTimerOrBlockTask+0x3c>
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d806      	bhi.n	800e7ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e79e:	f7ff fa0f 	bl	800dbc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e7a2:	68f9      	ldr	r1, [r7, #12]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7ff ff85 	bl	800e6b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e7aa:	e024      	b.n	800e7f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d008      	beq.n	800e7c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e7b2:	4b13      	ldr	r3, [pc, #76]	; (800e800 <prvProcessTimerOrBlockTask+0x90>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d101      	bne.n	800e7c0 <prvProcessTimerOrBlockTask+0x50>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e000      	b.n	800e7c2 <prvProcessTimerOrBlockTask+0x52>
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e7c4:	4b0f      	ldr	r3, [pc, #60]	; (800e804 <prvProcessTimerOrBlockTask+0x94>)
 800e7c6:	6818      	ldr	r0, [r3, #0]
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	1ad3      	subs	r3, r2, r3
 800e7ce:	683a      	ldr	r2, [r7, #0]
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	f7fe ff57 	bl	800d684 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e7d6:	f7ff f9f3 	bl	800dbc0 <xTaskResumeAll>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10a      	bne.n	800e7f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e7e0:	4b09      	ldr	r3, [pc, #36]	; (800e808 <prvProcessTimerOrBlockTask+0x98>)
 800e7e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7e6:	601a      	str	r2, [r3, #0]
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	f3bf 8f6f 	isb	sy
}
 800e7f0:	e001      	b.n	800e7f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e7f2:	f7ff f9e5 	bl	800dbc0 <xTaskResumeAll>
}
 800e7f6:	bf00      	nop
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	200128ac 	.word	0x200128ac
 800e804:	200128b0 	.word	0x200128b0
 800e808:	e000ed04 	.word	0xe000ed04

0800e80c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e80c:	b480      	push	{r7}
 800e80e:	b085      	sub	sp, #20
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e814:	4b0e      	ldr	r3, [pc, #56]	; (800e850 <prvGetNextExpireTime+0x44>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d101      	bne.n	800e822 <prvGetNextExpireTime+0x16>
 800e81e:	2201      	movs	r2, #1
 800e820:	e000      	b.n	800e824 <prvGetNextExpireTime+0x18>
 800e822:	2200      	movs	r2, #0
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d105      	bne.n	800e83c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e830:	4b07      	ldr	r3, [pc, #28]	; (800e850 <prvGetNextExpireTime+0x44>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	60fb      	str	r3, [r7, #12]
 800e83a:	e001      	b.n	800e840 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e83c:	2300      	movs	r3, #0
 800e83e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e840:	68fb      	ldr	r3, [r7, #12]
}
 800e842:	4618      	mov	r0, r3
 800e844:	3714      	adds	r7, #20
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop
 800e850:	200128a8 	.word	0x200128a8

0800e854 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e85c:	f7ff fa4e 	bl	800dcfc <xTaskGetTickCount>
 800e860:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e862:	4b0b      	ldr	r3, [pc, #44]	; (800e890 <prvSampleTimeNow+0x3c>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	68fa      	ldr	r2, [r7, #12]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d205      	bcs.n	800e878 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e86c:	f000 f936 	bl	800eadc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2201      	movs	r2, #1
 800e874:	601a      	str	r2, [r3, #0]
 800e876:	e002      	b.n	800e87e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e87e:	4a04      	ldr	r2, [pc, #16]	; (800e890 <prvSampleTimeNow+0x3c>)
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e884:	68fb      	ldr	r3, [r7, #12]
}
 800e886:	4618      	mov	r0, r3
 800e888:	3710      	adds	r7, #16
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	200128b8 	.word	0x200128b8

0800e894 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
 800e8a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	68ba      	ldr	r2, [r7, #8]
 800e8aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e8b2:	68ba      	ldr	r2, [r7, #8]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d812      	bhi.n	800e8e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	1ad2      	subs	r2, r2, r3
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	699b      	ldr	r3, [r3, #24]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d302      	bcc.n	800e8ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	617b      	str	r3, [r7, #20]
 800e8cc:	e01b      	b.n	800e906 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e8ce:	4b10      	ldr	r3, [pc, #64]	; (800e910 <prvInsertTimerInActiveList+0x7c>)
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	4610      	mov	r0, r2
 800e8da:	f7fe f9b8 	bl	800cc4e <vListInsert>
 800e8de:	e012      	b.n	800e906 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d206      	bcs.n	800e8f6 <prvInsertTimerInActiveList+0x62>
 800e8e8:	68ba      	ldr	r2, [r7, #8]
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d302      	bcc.n	800e8f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	617b      	str	r3, [r7, #20]
 800e8f4:	e007      	b.n	800e906 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8f6:	4b07      	ldr	r3, [pc, #28]	; (800e914 <prvInsertTimerInActiveList+0x80>)
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	3304      	adds	r3, #4
 800e8fe:	4619      	mov	r1, r3
 800e900:	4610      	mov	r0, r2
 800e902:	f7fe f9a4 	bl	800cc4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e906:	697b      	ldr	r3, [r7, #20]
}
 800e908:	4618      	mov	r0, r3
 800e90a:	3718      	adds	r7, #24
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	200128ac 	.word	0x200128ac
 800e914:	200128a8 	.word	0x200128a8

0800e918 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b08e      	sub	sp, #56	; 0x38
 800e91c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e91e:	e0ca      	b.n	800eab6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2b00      	cmp	r3, #0
 800e924:	da18      	bge.n	800e958 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e926:	1d3b      	adds	r3, r7, #4
 800e928:	3304      	adds	r3, #4
 800e92a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10a      	bne.n	800e948 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e936:	f383 8811 	msr	BASEPRI, r3
 800e93a:	f3bf 8f6f 	isb	sy
 800e93e:	f3bf 8f4f 	dsb	sy
 800e942:	61fb      	str	r3, [r7, #28]
}
 800e944:	bf00      	nop
 800e946:	e7fe      	b.n	800e946 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e94e:	6850      	ldr	r0, [r2, #4]
 800e950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e952:	6892      	ldr	r2, [r2, #8]
 800e954:	4611      	mov	r1, r2
 800e956:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	f2c0 80aa 	blt.w	800eab4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e966:	695b      	ldr	r3, [r3, #20]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d004      	beq.n	800e976 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96e:	3304      	adds	r3, #4
 800e970:	4618      	mov	r0, r3
 800e972:	f7fe f9a5 	bl	800ccc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e976:	463b      	mov	r3, r7
 800e978:	4618      	mov	r0, r3
 800e97a:	f7ff ff6b 	bl	800e854 <prvSampleTimeNow>
 800e97e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2b09      	cmp	r3, #9
 800e984:	f200 8097 	bhi.w	800eab6 <prvProcessReceivedCommands+0x19e>
 800e988:	a201      	add	r2, pc, #4	; (adr r2, 800e990 <prvProcessReceivedCommands+0x78>)
 800e98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e98e:	bf00      	nop
 800e990:	0800e9b9 	.word	0x0800e9b9
 800e994:	0800e9b9 	.word	0x0800e9b9
 800e998:	0800e9b9 	.word	0x0800e9b9
 800e99c:	0800ea2d 	.word	0x0800ea2d
 800e9a0:	0800ea41 	.word	0x0800ea41
 800e9a4:	0800ea8b 	.word	0x0800ea8b
 800e9a8:	0800e9b9 	.word	0x0800e9b9
 800e9ac:	0800e9b9 	.word	0x0800e9b9
 800e9b0:	0800ea2d 	.word	0x0800ea2d
 800e9b4:	0800ea41 	.word	0x0800ea41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9be:	f043 0301 	orr.w	r3, r3, #1
 800e9c2:	b2da      	uxtb	r2, r3
 800e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e9ca:	68ba      	ldr	r2, [r7, #8]
 800e9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ce:	699b      	ldr	r3, [r3, #24]
 800e9d0:	18d1      	adds	r1, r2, r3
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9d8:	f7ff ff5c 	bl	800e894 <prvInsertTimerInActiveList>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d069      	beq.n	800eab6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e4:	6a1b      	ldr	r3, [r3, #32]
 800e9e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9f0:	f003 0304 	and.w	r3, r3, #4
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d05e      	beq.n	800eab6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e9f8:	68ba      	ldr	r2, [r7, #8]
 800e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fc:	699b      	ldr	r3, [r3, #24]
 800e9fe:	441a      	add	r2, r3
 800ea00:	2300      	movs	r3, #0
 800ea02:	9300      	str	r3, [sp, #0]
 800ea04:	2300      	movs	r3, #0
 800ea06:	2100      	movs	r1, #0
 800ea08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea0a:	f7ff fe05 	bl	800e618 <xTimerGenericCommand>
 800ea0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ea10:	6a3b      	ldr	r3, [r7, #32]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d14f      	bne.n	800eab6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ea16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea1a:	f383 8811 	msr	BASEPRI, r3
 800ea1e:	f3bf 8f6f 	isb	sy
 800ea22:	f3bf 8f4f 	dsb	sy
 800ea26:	61bb      	str	r3, [r7, #24]
}
 800ea28:	bf00      	nop
 800ea2a:	e7fe      	b.n	800ea2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea32:	f023 0301 	bic.w	r3, r3, #1
 800ea36:	b2da      	uxtb	r2, r3
 800ea38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ea3e:	e03a      	b.n	800eab6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea46:	f043 0301 	orr.w	r3, r3, #1
 800ea4a:	b2da      	uxtb	r2, r3
 800ea4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ea52:	68ba      	ldr	r2, [r7, #8]
 800ea54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ea58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5a:	699b      	ldr	r3, [r3, #24]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d10a      	bne.n	800ea76 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ea60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea64:	f383 8811 	msr	BASEPRI, r3
 800ea68:	f3bf 8f6f 	isb	sy
 800ea6c:	f3bf 8f4f 	dsb	sy
 800ea70:	617b      	str	r3, [r7, #20]
}
 800ea72:	bf00      	nop
 800ea74:	e7fe      	b.n	800ea74 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	699a      	ldr	r2, [r3, #24]
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7c:	18d1      	adds	r1, r2, r3
 800ea7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea84:	f7ff ff06 	bl	800e894 <prvInsertTimerInActiveList>
					break;
 800ea88:	e015      	b.n	800eab6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea90:	f003 0302 	and.w	r3, r3, #2
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d103      	bne.n	800eaa0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ea98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea9a:	f000 fbe1 	bl	800f260 <vPortFree>
 800ea9e:	e00a      	b.n	800eab6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eaa6:	f023 0301 	bic.w	r3, r3, #1
 800eaaa:	b2da      	uxtb	r2, r3
 800eaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eab2:	e000      	b.n	800eab6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800eab4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eab6:	4b08      	ldr	r3, [pc, #32]	; (800ead8 <prvProcessReceivedCommands+0x1c0>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	1d39      	adds	r1, r7, #4
 800eabc:	2200      	movs	r2, #0
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fe fbc6 	bl	800d250 <xQueueReceive>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f47f af2a 	bne.w	800e920 <prvProcessReceivedCommands+0x8>
	}
}
 800eacc:	bf00      	nop
 800eace:	bf00      	nop
 800ead0:	3730      	adds	r7, #48	; 0x30
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	200128b0 	.word	0x200128b0

0800eadc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b088      	sub	sp, #32
 800eae0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eae2:	e048      	b.n	800eb76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eae4:	4b2d      	ldr	r3, [pc, #180]	; (800eb9c <prvSwitchTimerLists+0xc0>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaee:	4b2b      	ldr	r3, [pc, #172]	; (800eb9c <prvSwitchTimerLists+0xc0>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	68db      	ldr	r3, [r3, #12]
 800eaf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	3304      	adds	r3, #4
 800eafc:	4618      	mov	r0, r3
 800eafe:	f7fe f8df 	bl	800ccc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6a1b      	ldr	r3, [r3, #32]
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb10:	f003 0304 	and.w	r3, r3, #4
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d02e      	beq.n	800eb76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	699b      	ldr	r3, [r3, #24]
 800eb1c:	693a      	ldr	r2, [r7, #16]
 800eb1e:	4413      	add	r3, r2
 800eb20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eb22:	68ba      	ldr	r2, [r7, #8]
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d90e      	bls.n	800eb48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	68ba      	ldr	r2, [r7, #8]
 800eb2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	68fa      	ldr	r2, [r7, #12]
 800eb34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb36:	4b19      	ldr	r3, [pc, #100]	; (800eb9c <prvSwitchTimerLists+0xc0>)
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	3304      	adds	r3, #4
 800eb3e:	4619      	mov	r1, r3
 800eb40:	4610      	mov	r0, r2
 800eb42:	f7fe f884 	bl	800cc4e <vListInsert>
 800eb46:	e016      	b.n	800eb76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb48:	2300      	movs	r3, #0
 800eb4a:	9300      	str	r3, [sp, #0]
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	693a      	ldr	r2, [r7, #16]
 800eb50:	2100      	movs	r1, #0
 800eb52:	68f8      	ldr	r0, [r7, #12]
 800eb54:	f7ff fd60 	bl	800e618 <xTimerGenericCommand>
 800eb58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d10a      	bne.n	800eb76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb64:	f383 8811 	msr	BASEPRI, r3
 800eb68:	f3bf 8f6f 	isb	sy
 800eb6c:	f3bf 8f4f 	dsb	sy
 800eb70:	603b      	str	r3, [r7, #0]
}
 800eb72:	bf00      	nop
 800eb74:	e7fe      	b.n	800eb74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb76:	4b09      	ldr	r3, [pc, #36]	; (800eb9c <prvSwitchTimerLists+0xc0>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d1b1      	bne.n	800eae4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eb80:	4b06      	ldr	r3, [pc, #24]	; (800eb9c <prvSwitchTimerLists+0xc0>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eb86:	4b06      	ldr	r3, [pc, #24]	; (800eba0 <prvSwitchTimerLists+0xc4>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	4a04      	ldr	r2, [pc, #16]	; (800eb9c <prvSwitchTimerLists+0xc0>)
 800eb8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eb8e:	4a04      	ldr	r2, [pc, #16]	; (800eba0 <prvSwitchTimerLists+0xc4>)
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	6013      	str	r3, [r2, #0]
}
 800eb94:	bf00      	nop
 800eb96:	3718      	adds	r7, #24
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	200128a8 	.word	0x200128a8
 800eba0:	200128ac 	.word	0x200128ac

0800eba4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ebaa:	f000 f96b 	bl	800ee84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ebae:	4b15      	ldr	r3, [pc, #84]	; (800ec04 <prvCheckForValidListAndQueue+0x60>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d120      	bne.n	800ebf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ebb6:	4814      	ldr	r0, [pc, #80]	; (800ec08 <prvCheckForValidListAndQueue+0x64>)
 800ebb8:	f7fd fff8 	bl	800cbac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ebbc:	4813      	ldr	r0, [pc, #76]	; (800ec0c <prvCheckForValidListAndQueue+0x68>)
 800ebbe:	f7fd fff5 	bl	800cbac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ebc2:	4b13      	ldr	r3, [pc, #76]	; (800ec10 <prvCheckForValidListAndQueue+0x6c>)
 800ebc4:	4a10      	ldr	r2, [pc, #64]	; (800ec08 <prvCheckForValidListAndQueue+0x64>)
 800ebc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ebc8:	4b12      	ldr	r3, [pc, #72]	; (800ec14 <prvCheckForValidListAndQueue+0x70>)
 800ebca:	4a10      	ldr	r2, [pc, #64]	; (800ec0c <prvCheckForValidListAndQueue+0x68>)
 800ebcc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ebce:	2300      	movs	r3, #0
 800ebd0:	9300      	str	r3, [sp, #0]
 800ebd2:	4b11      	ldr	r3, [pc, #68]	; (800ec18 <prvCheckForValidListAndQueue+0x74>)
 800ebd4:	4a11      	ldr	r2, [pc, #68]	; (800ec1c <prvCheckForValidListAndQueue+0x78>)
 800ebd6:	2110      	movs	r1, #16
 800ebd8:	200a      	movs	r0, #10
 800ebda:	f7fe f903 	bl	800cde4 <xQueueGenericCreateStatic>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	4a08      	ldr	r2, [pc, #32]	; (800ec04 <prvCheckForValidListAndQueue+0x60>)
 800ebe2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ebe4:	4b07      	ldr	r3, [pc, #28]	; (800ec04 <prvCheckForValidListAndQueue+0x60>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d005      	beq.n	800ebf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ebec:	4b05      	ldr	r3, [pc, #20]	; (800ec04 <prvCheckForValidListAndQueue+0x60>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	490b      	ldr	r1, [pc, #44]	; (800ec20 <prvCheckForValidListAndQueue+0x7c>)
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7fe fd1c 	bl	800d630 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ebf8:	f000 f974 	bl	800eee4 <vPortExitCritical>
}
 800ebfc:	bf00      	nop
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	200128b0 	.word	0x200128b0
 800ec08:	20012880 	.word	0x20012880
 800ec0c:	20012894 	.word	0x20012894
 800ec10:	200128a8 	.word	0x200128a8
 800ec14:	200128ac 	.word	0x200128ac
 800ec18:	2001295c 	.word	0x2001295c
 800ec1c:	200128bc 	.word	0x200128bc
 800ec20:	0801cc18 	.word	0x0801cc18

0800ec24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	3b04      	subs	r3, #4
 800ec34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ec3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	3b04      	subs	r3, #4
 800ec42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	f023 0201 	bic.w	r2, r3, #1
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	3b04      	subs	r3, #4
 800ec52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ec54:	4a0c      	ldr	r2, [pc, #48]	; (800ec88 <pxPortInitialiseStack+0x64>)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	3b14      	subs	r3, #20
 800ec5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	3b04      	subs	r3, #4
 800ec6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f06f 0202 	mvn.w	r2, #2
 800ec72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	3b20      	subs	r3, #32
 800ec78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3714      	adds	r7, #20
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr
 800ec88:	0800ec8d 	.word	0x0800ec8d

0800ec8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b085      	sub	sp, #20
 800ec90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec92:	2300      	movs	r3, #0
 800ec94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec96:	4b12      	ldr	r3, [pc, #72]	; (800ece0 <prvTaskExitError+0x54>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec9e:	d00a      	beq.n	800ecb6 <prvTaskExitError+0x2a>
	__asm volatile
 800eca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca4:	f383 8811 	msr	BASEPRI, r3
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	60fb      	str	r3, [r7, #12]
}
 800ecb2:	bf00      	nop
 800ecb4:	e7fe      	b.n	800ecb4 <prvTaskExitError+0x28>
	__asm volatile
 800ecb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	60bb      	str	r3, [r7, #8]
}
 800ecc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ecca:	bf00      	nop
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d0fc      	beq.n	800eccc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ecd2:	bf00      	nop
 800ecd4:	bf00      	nop
 800ecd6:	3714      	adds	r7, #20
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr
 800ece0:	2000009c 	.word	0x2000009c
	...

0800ecf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ecf0:	4b07      	ldr	r3, [pc, #28]	; (800ed10 <pxCurrentTCBConst2>)
 800ecf2:	6819      	ldr	r1, [r3, #0]
 800ecf4:	6808      	ldr	r0, [r1, #0]
 800ecf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfa:	f380 8809 	msr	PSP, r0
 800ecfe:	f3bf 8f6f 	isb	sy
 800ed02:	f04f 0000 	mov.w	r0, #0
 800ed06:	f380 8811 	msr	BASEPRI, r0
 800ed0a:	4770      	bx	lr
 800ed0c:	f3af 8000 	nop.w

0800ed10 <pxCurrentTCBConst2>:
 800ed10:	20012380 	.word	0x20012380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ed14:	bf00      	nop
 800ed16:	bf00      	nop

0800ed18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ed18:	4808      	ldr	r0, [pc, #32]	; (800ed3c <prvPortStartFirstTask+0x24>)
 800ed1a:	6800      	ldr	r0, [r0, #0]
 800ed1c:	6800      	ldr	r0, [r0, #0]
 800ed1e:	f380 8808 	msr	MSP, r0
 800ed22:	f04f 0000 	mov.w	r0, #0
 800ed26:	f380 8814 	msr	CONTROL, r0
 800ed2a:	b662      	cpsie	i
 800ed2c:	b661      	cpsie	f
 800ed2e:	f3bf 8f4f 	dsb	sy
 800ed32:	f3bf 8f6f 	isb	sy
 800ed36:	df00      	svc	0
 800ed38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ed3a:	bf00      	nop
 800ed3c:	e000ed08 	.word	0xe000ed08

0800ed40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ed46:	4b46      	ldr	r3, [pc, #280]	; (800ee60 <xPortStartScheduler+0x120>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4a46      	ldr	r2, [pc, #280]	; (800ee64 <xPortStartScheduler+0x124>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d10a      	bne.n	800ed66 <xPortStartScheduler+0x26>
	__asm volatile
 800ed50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed54:	f383 8811 	msr	BASEPRI, r3
 800ed58:	f3bf 8f6f 	isb	sy
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	613b      	str	r3, [r7, #16]
}
 800ed62:	bf00      	nop
 800ed64:	e7fe      	b.n	800ed64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ed66:	4b3e      	ldr	r3, [pc, #248]	; (800ee60 <xPortStartScheduler+0x120>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4a3f      	ldr	r2, [pc, #252]	; (800ee68 <xPortStartScheduler+0x128>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d10a      	bne.n	800ed86 <xPortStartScheduler+0x46>
	__asm volatile
 800ed70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed74:	f383 8811 	msr	BASEPRI, r3
 800ed78:	f3bf 8f6f 	isb	sy
 800ed7c:	f3bf 8f4f 	dsb	sy
 800ed80:	60fb      	str	r3, [r7, #12]
}
 800ed82:	bf00      	nop
 800ed84:	e7fe      	b.n	800ed84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ed86:	4b39      	ldr	r3, [pc, #228]	; (800ee6c <xPortStartScheduler+0x12c>)
 800ed88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	22ff      	movs	r2, #255	; 0xff
 800ed96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eda0:	78fb      	ldrb	r3, [r7, #3]
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eda8:	b2da      	uxtb	r2, r3
 800edaa:	4b31      	ldr	r3, [pc, #196]	; (800ee70 <xPortStartScheduler+0x130>)
 800edac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800edae:	4b31      	ldr	r3, [pc, #196]	; (800ee74 <xPortStartScheduler+0x134>)
 800edb0:	2207      	movs	r2, #7
 800edb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800edb4:	e009      	b.n	800edca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800edb6:	4b2f      	ldr	r3, [pc, #188]	; (800ee74 <xPortStartScheduler+0x134>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	3b01      	subs	r3, #1
 800edbc:	4a2d      	ldr	r2, [pc, #180]	; (800ee74 <xPortStartScheduler+0x134>)
 800edbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800edc0:	78fb      	ldrb	r3, [r7, #3]
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	005b      	lsls	r3, r3, #1
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800edca:	78fb      	ldrb	r3, [r7, #3]
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edd2:	2b80      	cmp	r3, #128	; 0x80
 800edd4:	d0ef      	beq.n	800edb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800edd6:	4b27      	ldr	r3, [pc, #156]	; (800ee74 <xPortStartScheduler+0x134>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	f1c3 0307 	rsb	r3, r3, #7
 800edde:	2b04      	cmp	r3, #4
 800ede0:	d00a      	beq.n	800edf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ede2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede6:	f383 8811 	msr	BASEPRI, r3
 800edea:	f3bf 8f6f 	isb	sy
 800edee:	f3bf 8f4f 	dsb	sy
 800edf2:	60bb      	str	r3, [r7, #8]
}
 800edf4:	bf00      	nop
 800edf6:	e7fe      	b.n	800edf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800edf8:	4b1e      	ldr	r3, [pc, #120]	; (800ee74 <xPortStartScheduler+0x134>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	021b      	lsls	r3, r3, #8
 800edfe:	4a1d      	ldr	r2, [pc, #116]	; (800ee74 <xPortStartScheduler+0x134>)
 800ee00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ee02:	4b1c      	ldr	r3, [pc, #112]	; (800ee74 <xPortStartScheduler+0x134>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ee0a:	4a1a      	ldr	r2, [pc, #104]	; (800ee74 <xPortStartScheduler+0x134>)
 800ee0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	b2da      	uxtb	r2, r3
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ee16:	4b18      	ldr	r3, [pc, #96]	; (800ee78 <xPortStartScheduler+0x138>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	4a17      	ldr	r2, [pc, #92]	; (800ee78 <xPortStartScheduler+0x138>)
 800ee1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ee20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ee22:	4b15      	ldr	r3, [pc, #84]	; (800ee78 <xPortStartScheduler+0x138>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4a14      	ldr	r2, [pc, #80]	; (800ee78 <xPortStartScheduler+0x138>)
 800ee28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ee2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ee2e:	f000 f8dd 	bl	800efec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ee32:	4b12      	ldr	r3, [pc, #72]	; (800ee7c <xPortStartScheduler+0x13c>)
 800ee34:	2200      	movs	r2, #0
 800ee36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ee38:	f000 f8fc 	bl	800f034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ee3c:	4b10      	ldr	r3, [pc, #64]	; (800ee80 <xPortStartScheduler+0x140>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a0f      	ldr	r2, [pc, #60]	; (800ee80 <xPortStartScheduler+0x140>)
 800ee42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ee46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ee48:	f7ff ff66 	bl	800ed18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ee4c:	f7ff f820 	bl	800de90 <vTaskSwitchContext>
	prvTaskExitError();
 800ee50:	f7ff ff1c 	bl	800ec8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3718      	adds	r7, #24
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	e000ed00 	.word	0xe000ed00
 800ee64:	410fc271 	.word	0x410fc271
 800ee68:	410fc270 	.word	0x410fc270
 800ee6c:	e000e400 	.word	0xe000e400
 800ee70:	200129ac 	.word	0x200129ac
 800ee74:	200129b0 	.word	0x200129b0
 800ee78:	e000ed20 	.word	0xe000ed20
 800ee7c:	2000009c 	.word	0x2000009c
 800ee80:	e000ef34 	.word	0xe000ef34

0800ee84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
	__asm volatile
 800ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8e:	f383 8811 	msr	BASEPRI, r3
 800ee92:	f3bf 8f6f 	isb	sy
 800ee96:	f3bf 8f4f 	dsb	sy
 800ee9a:	607b      	str	r3, [r7, #4]
}
 800ee9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ee9e:	4b0f      	ldr	r3, [pc, #60]	; (800eedc <vPortEnterCritical+0x58>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	3301      	adds	r3, #1
 800eea4:	4a0d      	ldr	r2, [pc, #52]	; (800eedc <vPortEnterCritical+0x58>)
 800eea6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eea8:	4b0c      	ldr	r3, [pc, #48]	; (800eedc <vPortEnterCritical+0x58>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d10f      	bne.n	800eed0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eeb0:	4b0b      	ldr	r3, [pc, #44]	; (800eee0 <vPortEnterCritical+0x5c>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d00a      	beq.n	800eed0 <vPortEnterCritical+0x4c>
	__asm volatile
 800eeba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eebe:	f383 8811 	msr	BASEPRI, r3
 800eec2:	f3bf 8f6f 	isb	sy
 800eec6:	f3bf 8f4f 	dsb	sy
 800eeca:	603b      	str	r3, [r7, #0]
}
 800eecc:	bf00      	nop
 800eece:	e7fe      	b.n	800eece <vPortEnterCritical+0x4a>
	}
}
 800eed0:	bf00      	nop
 800eed2:	370c      	adds	r7, #12
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr
 800eedc:	2000009c 	.word	0x2000009c
 800eee0:	e000ed04 	.word	0xe000ed04

0800eee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eee4:	b480      	push	{r7}
 800eee6:	b083      	sub	sp, #12
 800eee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eeea:	4b12      	ldr	r3, [pc, #72]	; (800ef34 <vPortExitCritical+0x50>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d10a      	bne.n	800ef08 <vPortExitCritical+0x24>
	__asm volatile
 800eef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef6:	f383 8811 	msr	BASEPRI, r3
 800eefa:	f3bf 8f6f 	isb	sy
 800eefe:	f3bf 8f4f 	dsb	sy
 800ef02:	607b      	str	r3, [r7, #4]
}
 800ef04:	bf00      	nop
 800ef06:	e7fe      	b.n	800ef06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ef08:	4b0a      	ldr	r3, [pc, #40]	; (800ef34 <vPortExitCritical+0x50>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	4a09      	ldr	r2, [pc, #36]	; (800ef34 <vPortExitCritical+0x50>)
 800ef10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ef12:	4b08      	ldr	r3, [pc, #32]	; (800ef34 <vPortExitCritical+0x50>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d105      	bne.n	800ef26 <vPortExitCritical+0x42>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	f383 8811 	msr	BASEPRI, r3
}
 800ef24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ef26:	bf00      	nop
 800ef28:	370c      	adds	r7, #12
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	2000009c 	.word	0x2000009c
	...

0800ef40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ef40:	f3ef 8009 	mrs	r0, PSP
 800ef44:	f3bf 8f6f 	isb	sy
 800ef48:	4b15      	ldr	r3, [pc, #84]	; (800efa0 <pxCurrentTCBConst>)
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	f01e 0f10 	tst.w	lr, #16
 800ef50:	bf08      	it	eq
 800ef52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ef56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5a:	6010      	str	r0, [r2, #0]
 800ef5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ef60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ef64:	f380 8811 	msr	BASEPRI, r0
 800ef68:	f3bf 8f4f 	dsb	sy
 800ef6c:	f3bf 8f6f 	isb	sy
 800ef70:	f7fe ff8e 	bl	800de90 <vTaskSwitchContext>
 800ef74:	f04f 0000 	mov.w	r0, #0
 800ef78:	f380 8811 	msr	BASEPRI, r0
 800ef7c:	bc09      	pop	{r0, r3}
 800ef7e:	6819      	ldr	r1, [r3, #0]
 800ef80:	6808      	ldr	r0, [r1, #0]
 800ef82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef86:	f01e 0f10 	tst.w	lr, #16
 800ef8a:	bf08      	it	eq
 800ef8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef90:	f380 8809 	msr	PSP, r0
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	f3af 8000 	nop.w

0800efa0 <pxCurrentTCBConst>:
 800efa0:	20012380 	.word	0x20012380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800efa4:	bf00      	nop
 800efa6:	bf00      	nop

0800efa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
	__asm volatile
 800efae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb2:	f383 8811 	msr	BASEPRI, r3
 800efb6:	f3bf 8f6f 	isb	sy
 800efba:	f3bf 8f4f 	dsb	sy
 800efbe:	607b      	str	r3, [r7, #4]
}
 800efc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800efc2:	f7fe feab 	bl	800dd1c <xTaskIncrementTick>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d003      	beq.n	800efd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800efcc:	4b06      	ldr	r3, [pc, #24]	; (800efe8 <xPortSysTickHandler+0x40>)
 800efce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efd2:	601a      	str	r2, [r3, #0]
 800efd4:	2300      	movs	r3, #0
 800efd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	f383 8811 	msr	BASEPRI, r3
}
 800efde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800efe0:	bf00      	nop
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	e000ed04 	.word	0xe000ed04

0800efec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800efec:	b480      	push	{r7}
 800efee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eff0:	4b0b      	ldr	r3, [pc, #44]	; (800f020 <vPortSetupTimerInterrupt+0x34>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eff6:	4b0b      	ldr	r3, [pc, #44]	; (800f024 <vPortSetupTimerInterrupt+0x38>)
 800eff8:	2200      	movs	r2, #0
 800effa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800effc:	4b0a      	ldr	r3, [pc, #40]	; (800f028 <vPortSetupTimerInterrupt+0x3c>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a0a      	ldr	r2, [pc, #40]	; (800f02c <vPortSetupTimerInterrupt+0x40>)
 800f002:	fba2 2303 	umull	r2, r3, r2, r3
 800f006:	099b      	lsrs	r3, r3, #6
 800f008:	4a09      	ldr	r2, [pc, #36]	; (800f030 <vPortSetupTimerInterrupt+0x44>)
 800f00a:	3b01      	subs	r3, #1
 800f00c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f00e:	4b04      	ldr	r3, [pc, #16]	; (800f020 <vPortSetupTimerInterrupt+0x34>)
 800f010:	2207      	movs	r2, #7
 800f012:	601a      	str	r2, [r3, #0]
}
 800f014:	bf00      	nop
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	e000e010 	.word	0xe000e010
 800f024:	e000e018 	.word	0xe000e018
 800f028:	20000004 	.word	0x20000004
 800f02c:	10624dd3 	.word	0x10624dd3
 800f030:	e000e014 	.word	0xe000e014

0800f034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f044 <vPortEnableVFP+0x10>
 800f038:	6801      	ldr	r1, [r0, #0]
 800f03a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f03e:	6001      	str	r1, [r0, #0]
 800f040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f042:	bf00      	nop
 800f044:	e000ed88 	.word	0xe000ed88

0800f048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f048:	b480      	push	{r7}
 800f04a:	b085      	sub	sp, #20
 800f04c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f04e:	f3ef 8305 	mrs	r3, IPSR
 800f052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2b0f      	cmp	r3, #15
 800f058:	d914      	bls.n	800f084 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f05a:	4a17      	ldr	r2, [pc, #92]	; (800f0b8 <vPortValidateInterruptPriority+0x70>)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	4413      	add	r3, r2
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f064:	4b15      	ldr	r3, [pc, #84]	; (800f0bc <vPortValidateInterruptPriority+0x74>)
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	7afa      	ldrb	r2, [r7, #11]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d20a      	bcs.n	800f084 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	607b      	str	r3, [r7, #4]
}
 800f080:	bf00      	nop
 800f082:	e7fe      	b.n	800f082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f084:	4b0e      	ldr	r3, [pc, #56]	; (800f0c0 <vPortValidateInterruptPriority+0x78>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f08c:	4b0d      	ldr	r3, [pc, #52]	; (800f0c4 <vPortValidateInterruptPriority+0x7c>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	429a      	cmp	r2, r3
 800f092:	d90a      	bls.n	800f0aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f098:	f383 8811 	msr	BASEPRI, r3
 800f09c:	f3bf 8f6f 	isb	sy
 800f0a0:	f3bf 8f4f 	dsb	sy
 800f0a4:	603b      	str	r3, [r7, #0]
}
 800f0a6:	bf00      	nop
 800f0a8:	e7fe      	b.n	800f0a8 <vPortValidateInterruptPriority+0x60>
	}
 800f0aa:	bf00      	nop
 800f0ac:	3714      	adds	r7, #20
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr
 800f0b6:	bf00      	nop
 800f0b8:	e000e3f0 	.word	0xe000e3f0
 800f0bc:	200129ac 	.word	0x200129ac
 800f0c0:	e000ed0c 	.word	0xe000ed0c
 800f0c4:	200129b0 	.word	0x200129b0

0800f0c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b08a      	sub	sp, #40	; 0x28
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f0d4:	f7fe fd66 	bl	800dba4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f0d8:	4b5b      	ldr	r3, [pc, #364]	; (800f248 <pvPortMalloc+0x180>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d101      	bne.n	800f0e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f0e0:	f000 f920 	bl	800f324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f0e4:	4b59      	ldr	r3, [pc, #356]	; (800f24c <pvPortMalloc+0x184>)
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	4013      	ands	r3, r2
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f040 8093 	bne.w	800f218 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d01d      	beq.n	800f134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f0f8:	2208      	movs	r2, #8
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f003 0307 	and.w	r3, r3, #7
 800f106:	2b00      	cmp	r3, #0
 800f108:	d014      	beq.n	800f134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f023 0307 	bic.w	r3, r3, #7
 800f110:	3308      	adds	r3, #8
 800f112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f003 0307 	and.w	r3, r3, #7
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00a      	beq.n	800f134 <pvPortMalloc+0x6c>
	__asm volatile
 800f11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f122:	f383 8811 	msr	BASEPRI, r3
 800f126:	f3bf 8f6f 	isb	sy
 800f12a:	f3bf 8f4f 	dsb	sy
 800f12e:	617b      	str	r3, [r7, #20]
}
 800f130:	bf00      	nop
 800f132:	e7fe      	b.n	800f132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d06e      	beq.n	800f218 <pvPortMalloc+0x150>
 800f13a:	4b45      	ldr	r3, [pc, #276]	; (800f250 <pvPortMalloc+0x188>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	429a      	cmp	r2, r3
 800f142:	d869      	bhi.n	800f218 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f144:	4b43      	ldr	r3, [pc, #268]	; (800f254 <pvPortMalloc+0x18c>)
 800f146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f148:	4b42      	ldr	r3, [pc, #264]	; (800f254 <pvPortMalloc+0x18c>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f14e:	e004      	b.n	800f15a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	429a      	cmp	r2, r3
 800f162:	d903      	bls.n	800f16c <pvPortMalloc+0xa4>
 800f164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d1f1      	bne.n	800f150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f16c:	4b36      	ldr	r3, [pc, #216]	; (800f248 <pvPortMalloc+0x180>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f172:	429a      	cmp	r2, r3
 800f174:	d050      	beq.n	800f218 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f176:	6a3b      	ldr	r3, [r7, #32]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2208      	movs	r2, #8
 800f17c:	4413      	add	r3, r2
 800f17e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	6a3b      	ldr	r3, [r7, #32]
 800f186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18a:	685a      	ldr	r2, [r3, #4]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	1ad2      	subs	r2, r2, r3
 800f190:	2308      	movs	r3, #8
 800f192:	005b      	lsls	r3, r3, #1
 800f194:	429a      	cmp	r2, r3
 800f196:	d91f      	bls.n	800f1d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	4413      	add	r3, r2
 800f19e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1a0:	69bb      	ldr	r3, [r7, #24]
 800f1a2:	f003 0307 	and.w	r3, r3, #7
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d00a      	beq.n	800f1c0 <pvPortMalloc+0xf8>
	__asm volatile
 800f1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ae:	f383 8811 	msr	BASEPRI, r3
 800f1b2:	f3bf 8f6f 	isb	sy
 800f1b6:	f3bf 8f4f 	dsb	sy
 800f1ba:	613b      	str	r3, [r7, #16]
}
 800f1bc:	bf00      	nop
 800f1be:	e7fe      	b.n	800f1be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c2:	685a      	ldr	r2, [r3, #4]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	1ad2      	subs	r2, r2, r3
 800f1c8:	69bb      	ldr	r3, [r7, #24]
 800f1ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f1d2:	69b8      	ldr	r0, [r7, #24]
 800f1d4:	f000 f908 	bl	800f3e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f1d8:	4b1d      	ldr	r3, [pc, #116]	; (800f250 <pvPortMalloc+0x188>)
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	1ad3      	subs	r3, r2, r3
 800f1e2:	4a1b      	ldr	r2, [pc, #108]	; (800f250 <pvPortMalloc+0x188>)
 800f1e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f1e6:	4b1a      	ldr	r3, [pc, #104]	; (800f250 <pvPortMalloc+0x188>)
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	4b1b      	ldr	r3, [pc, #108]	; (800f258 <pvPortMalloc+0x190>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d203      	bcs.n	800f1fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f1f2:	4b17      	ldr	r3, [pc, #92]	; (800f250 <pvPortMalloc+0x188>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4a18      	ldr	r2, [pc, #96]	; (800f258 <pvPortMalloc+0x190>)
 800f1f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fc:	685a      	ldr	r2, [r3, #4]
 800f1fe:	4b13      	ldr	r3, [pc, #76]	; (800f24c <pvPortMalloc+0x184>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	431a      	orrs	r2, r3
 800f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20a:	2200      	movs	r2, #0
 800f20c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f20e:	4b13      	ldr	r3, [pc, #76]	; (800f25c <pvPortMalloc+0x194>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	3301      	adds	r3, #1
 800f214:	4a11      	ldr	r2, [pc, #68]	; (800f25c <pvPortMalloc+0x194>)
 800f216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f218:	f7fe fcd2 	bl	800dbc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	f003 0307 	and.w	r3, r3, #7
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00a      	beq.n	800f23c <pvPortMalloc+0x174>
	__asm volatile
 800f226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f22a:	f383 8811 	msr	BASEPRI, r3
 800f22e:	f3bf 8f6f 	isb	sy
 800f232:	f3bf 8f4f 	dsb	sy
 800f236:	60fb      	str	r3, [r7, #12]
}
 800f238:	bf00      	nop
 800f23a:	e7fe      	b.n	800f23a <pvPortMalloc+0x172>
	return pvReturn;
 800f23c:	69fb      	ldr	r3, [r7, #28]
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3728      	adds	r7, #40	; 0x28
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	200165bc 	.word	0x200165bc
 800f24c:	200165d0 	.word	0x200165d0
 800f250:	200165c0 	.word	0x200165c0
 800f254:	200165b4 	.word	0x200165b4
 800f258:	200165c4 	.word	0x200165c4
 800f25c:	200165c8 	.word	0x200165c8

0800f260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b086      	sub	sp, #24
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d04d      	beq.n	800f30e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f272:	2308      	movs	r3, #8
 800f274:	425b      	negs	r3, r3
 800f276:	697a      	ldr	r2, [r7, #20]
 800f278:	4413      	add	r3, r2
 800f27a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	685a      	ldr	r2, [r3, #4]
 800f284:	4b24      	ldr	r3, [pc, #144]	; (800f318 <vPortFree+0xb8>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	4013      	ands	r3, r2
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d10a      	bne.n	800f2a4 <vPortFree+0x44>
	__asm volatile
 800f28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f292:	f383 8811 	msr	BASEPRI, r3
 800f296:	f3bf 8f6f 	isb	sy
 800f29a:	f3bf 8f4f 	dsb	sy
 800f29e:	60fb      	str	r3, [r7, #12]
}
 800f2a0:	bf00      	nop
 800f2a2:	e7fe      	b.n	800f2a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d00a      	beq.n	800f2c2 <vPortFree+0x62>
	__asm volatile
 800f2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b0:	f383 8811 	msr	BASEPRI, r3
 800f2b4:	f3bf 8f6f 	isb	sy
 800f2b8:	f3bf 8f4f 	dsb	sy
 800f2bc:	60bb      	str	r3, [r7, #8]
}
 800f2be:	bf00      	nop
 800f2c0:	e7fe      	b.n	800f2c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	685a      	ldr	r2, [r3, #4]
 800f2c6:	4b14      	ldr	r3, [pc, #80]	; (800f318 <vPortFree+0xb8>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4013      	ands	r3, r2
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d01e      	beq.n	800f30e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d11a      	bne.n	800f30e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f2d8:	693b      	ldr	r3, [r7, #16]
 800f2da:	685a      	ldr	r2, [r3, #4]
 800f2dc:	4b0e      	ldr	r3, [pc, #56]	; (800f318 <vPortFree+0xb8>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	43db      	mvns	r3, r3
 800f2e2:	401a      	ands	r2, r3
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f2e8:	f7fe fc5c 	bl	800dba4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	685a      	ldr	r2, [r3, #4]
 800f2f0:	4b0a      	ldr	r3, [pc, #40]	; (800f31c <vPortFree+0xbc>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	4a09      	ldr	r2, [pc, #36]	; (800f31c <vPortFree+0xbc>)
 800f2f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f2fa:	6938      	ldr	r0, [r7, #16]
 800f2fc:	f000 f874 	bl	800f3e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f300:	4b07      	ldr	r3, [pc, #28]	; (800f320 <vPortFree+0xc0>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	3301      	adds	r3, #1
 800f306:	4a06      	ldr	r2, [pc, #24]	; (800f320 <vPortFree+0xc0>)
 800f308:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f30a:	f7fe fc59 	bl	800dbc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f30e:	bf00      	nop
 800f310:	3718      	adds	r7, #24
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	200165d0 	.word	0x200165d0
 800f31c:	200165c0 	.word	0x200165c0
 800f320:	200165cc 	.word	0x200165cc

0800f324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f324:	b480      	push	{r7}
 800f326:	b085      	sub	sp, #20
 800f328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f32a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f32e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f330:	4b27      	ldr	r3, [pc, #156]	; (800f3d0 <prvHeapInit+0xac>)
 800f332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f003 0307 	and.w	r3, r3, #7
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00c      	beq.n	800f358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	3307      	adds	r3, #7
 800f342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f023 0307 	bic.w	r3, r3, #7
 800f34a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f34c:	68ba      	ldr	r2, [r7, #8]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	1ad3      	subs	r3, r2, r3
 800f352:	4a1f      	ldr	r2, [pc, #124]	; (800f3d0 <prvHeapInit+0xac>)
 800f354:	4413      	add	r3, r2
 800f356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f35c:	4a1d      	ldr	r2, [pc, #116]	; (800f3d4 <prvHeapInit+0xb0>)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f362:	4b1c      	ldr	r3, [pc, #112]	; (800f3d4 <prvHeapInit+0xb0>)
 800f364:	2200      	movs	r2, #0
 800f366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	4413      	add	r3, r2
 800f36e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f370:	2208      	movs	r2, #8
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	1a9b      	subs	r3, r3, r2
 800f376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f023 0307 	bic.w	r3, r3, #7
 800f37e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	4a15      	ldr	r2, [pc, #84]	; (800f3d8 <prvHeapInit+0xb4>)
 800f384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f386:	4b14      	ldr	r3, [pc, #80]	; (800f3d8 <prvHeapInit+0xb4>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	2200      	movs	r2, #0
 800f38c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f38e:	4b12      	ldr	r3, [pc, #72]	; (800f3d8 <prvHeapInit+0xb4>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2200      	movs	r2, #0
 800f394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	1ad2      	subs	r2, r2, r3
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f3a4:	4b0c      	ldr	r3, [pc, #48]	; (800f3d8 <prvHeapInit+0xb4>)
 800f3a6:	681a      	ldr	r2, [r3, #0]
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	4a0a      	ldr	r2, [pc, #40]	; (800f3dc <prvHeapInit+0xb8>)
 800f3b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	4a09      	ldr	r2, [pc, #36]	; (800f3e0 <prvHeapInit+0xbc>)
 800f3ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f3bc:	4b09      	ldr	r3, [pc, #36]	; (800f3e4 <prvHeapInit+0xc0>)
 800f3be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f3c2:	601a      	str	r2, [r3, #0]
}
 800f3c4:	bf00      	nop
 800f3c6:	3714      	adds	r7, #20
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr
 800f3d0:	200129b4 	.word	0x200129b4
 800f3d4:	200165b4 	.word	0x200165b4
 800f3d8:	200165bc 	.word	0x200165bc
 800f3dc:	200165c4 	.word	0x200165c4
 800f3e0:	200165c0 	.word	0x200165c0
 800f3e4:	200165d0 	.word	0x200165d0

0800f3e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b085      	sub	sp, #20
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f3f0:	4b28      	ldr	r3, [pc, #160]	; (800f494 <prvInsertBlockIntoFreeList+0xac>)
 800f3f2:	60fb      	str	r3, [r7, #12]
 800f3f4:	e002      	b.n	800f3fc <prvInsertBlockIntoFreeList+0x14>
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	60fb      	str	r3, [r7, #12]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	687a      	ldr	r2, [r7, #4]
 800f402:	429a      	cmp	r2, r3
 800f404:	d8f7      	bhi.n	800f3f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	68ba      	ldr	r2, [r7, #8]
 800f410:	4413      	add	r3, r2
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	429a      	cmp	r2, r3
 800f416:	d108      	bne.n	800f42a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	685a      	ldr	r2, [r3, #4]
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	441a      	add	r2, r3
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	441a      	add	r2, r3
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d118      	bne.n	800f470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	4b15      	ldr	r3, [pc, #84]	; (800f498 <prvInsertBlockIntoFreeList+0xb0>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	429a      	cmp	r2, r3
 800f448:	d00d      	beq.n	800f466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	685a      	ldr	r2, [r3, #4]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	441a      	add	r2, r3
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	601a      	str	r2, [r3, #0]
 800f464:	e008      	b.n	800f478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f466:	4b0c      	ldr	r3, [pc, #48]	; (800f498 <prvInsertBlockIntoFreeList+0xb0>)
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	601a      	str	r2, [r3, #0]
 800f46e:	e003      	b.n	800f478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681a      	ldr	r2, [r3, #0]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d002      	beq.n	800f486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f486:	bf00      	nop
 800f488:	3714      	adds	r7, #20
 800f48a:	46bd      	mov	sp, r7
 800f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop
 800f494:	200165b4 	.word	0x200165b4
 800f498:	200165bc 	.word	0x200165bc

0800f49c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	4912      	ldr	r1, [pc, #72]	; (800f4ec <MX_USB_DEVICE_Init+0x50>)
 800f4a4:	4812      	ldr	r0, [pc, #72]	; (800f4f0 <MX_USB_DEVICE_Init+0x54>)
 800f4a6:	f7fb ff1f 	bl	800b2e8 <USBD_Init>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d001      	beq.n	800f4b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f4b0:	f7f2 fbbc 	bl	8001c2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f4b4:	490f      	ldr	r1, [pc, #60]	; (800f4f4 <MX_USB_DEVICE_Init+0x58>)
 800f4b6:	480e      	ldr	r0, [pc, #56]	; (800f4f0 <MX_USB_DEVICE_Init+0x54>)
 800f4b8:	f7fb ff46 	bl	800b348 <USBD_RegisterClass>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d001      	beq.n	800f4c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f4c2:	f7f2 fbb3 	bl	8001c2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f4c6:	490c      	ldr	r1, [pc, #48]	; (800f4f8 <MX_USB_DEVICE_Init+0x5c>)
 800f4c8:	4809      	ldr	r0, [pc, #36]	; (800f4f0 <MX_USB_DEVICE_Init+0x54>)
 800f4ca:	f7fb fe7d 	bl	800b1c8 <USBD_CDC_RegisterInterface>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d001      	beq.n	800f4d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f4d4:	f7f2 fbaa 	bl	8001c2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f4d8:	4805      	ldr	r0, [pc, #20]	; (800f4f0 <MX_USB_DEVICE_Init+0x54>)
 800f4da:	f7fb ff6b 	bl	800b3b4 <USBD_Start>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d001      	beq.n	800f4e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f4e4:	f7f2 fba2 	bl	8001c2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f4e8:	bf00      	nop
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	200000b4 	.word	0x200000b4
 800f4f0:	200165d4 	.word	0x200165d4
 800f4f4:	2000001c 	.word	0x2000001c
 800f4f8:	200000a0 	.word	0x200000a0

0800f4fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f500:	2200      	movs	r2, #0
 800f502:	4905      	ldr	r1, [pc, #20]	; (800f518 <CDC_Init_FS+0x1c>)
 800f504:	4805      	ldr	r0, [pc, #20]	; (800f51c <CDC_Init_FS+0x20>)
 800f506:	f7fb fe79 	bl	800b1fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f50a:	4905      	ldr	r1, [pc, #20]	; (800f520 <CDC_Init_FS+0x24>)
 800f50c:	4803      	ldr	r0, [pc, #12]	; (800f51c <CDC_Init_FS+0x20>)
 800f50e:	f7fb fe97 	bl	800b240 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f512:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f514:	4618      	mov	r0, r3
 800f516:	bd80      	pop	{r7, pc}
 800f518:	200170b0 	.word	0x200170b0
 800f51c:	200165d4 	.word	0x200165d4
 800f520:	200168b0 	.word	0x200168b0

0800f524 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f524:	b480      	push	{r7}
 800f526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f528:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	4603      	mov	r3, r0
 800f53c:	6039      	str	r1, [r7, #0]
 800f53e:	71fb      	strb	r3, [r7, #7]
 800f540:	4613      	mov	r3, r2
 800f542:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f544:	79fb      	ldrb	r3, [r7, #7]
 800f546:	2b23      	cmp	r3, #35	; 0x23
 800f548:	d84a      	bhi.n	800f5e0 <CDC_Control_FS+0xac>
 800f54a:	a201      	add	r2, pc, #4	; (adr r2, 800f550 <CDC_Control_FS+0x1c>)
 800f54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f550:	0800f5e1 	.word	0x0800f5e1
 800f554:	0800f5e1 	.word	0x0800f5e1
 800f558:	0800f5e1 	.word	0x0800f5e1
 800f55c:	0800f5e1 	.word	0x0800f5e1
 800f560:	0800f5e1 	.word	0x0800f5e1
 800f564:	0800f5e1 	.word	0x0800f5e1
 800f568:	0800f5e1 	.word	0x0800f5e1
 800f56c:	0800f5e1 	.word	0x0800f5e1
 800f570:	0800f5e1 	.word	0x0800f5e1
 800f574:	0800f5e1 	.word	0x0800f5e1
 800f578:	0800f5e1 	.word	0x0800f5e1
 800f57c:	0800f5e1 	.word	0x0800f5e1
 800f580:	0800f5e1 	.word	0x0800f5e1
 800f584:	0800f5e1 	.word	0x0800f5e1
 800f588:	0800f5e1 	.word	0x0800f5e1
 800f58c:	0800f5e1 	.word	0x0800f5e1
 800f590:	0800f5e1 	.word	0x0800f5e1
 800f594:	0800f5e1 	.word	0x0800f5e1
 800f598:	0800f5e1 	.word	0x0800f5e1
 800f59c:	0800f5e1 	.word	0x0800f5e1
 800f5a0:	0800f5e1 	.word	0x0800f5e1
 800f5a4:	0800f5e1 	.word	0x0800f5e1
 800f5a8:	0800f5e1 	.word	0x0800f5e1
 800f5ac:	0800f5e1 	.word	0x0800f5e1
 800f5b0:	0800f5e1 	.word	0x0800f5e1
 800f5b4:	0800f5e1 	.word	0x0800f5e1
 800f5b8:	0800f5e1 	.word	0x0800f5e1
 800f5bc:	0800f5e1 	.word	0x0800f5e1
 800f5c0:	0800f5e1 	.word	0x0800f5e1
 800f5c4:	0800f5e1 	.word	0x0800f5e1
 800f5c8:	0800f5e1 	.word	0x0800f5e1
 800f5cc:	0800f5e1 	.word	0x0800f5e1
 800f5d0:	0800f5e1 	.word	0x0800f5e1
 800f5d4:	0800f5e1 	.word	0x0800f5e1
 800f5d8:	0800f5e1 	.word	0x0800f5e1
 800f5dc:	0800f5e1 	.word	0x0800f5e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f5e0:	bf00      	nop
  }

  return (USBD_OK);
 800f5e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	370c      	adds	r7, #12
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ee:	4770      	bx	lr

0800f5f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b082      	sub	sp, #8
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f5fa:	6879      	ldr	r1, [r7, #4]
 800f5fc:	4805      	ldr	r0, [pc, #20]	; (800f614 <CDC_Receive_FS+0x24>)
 800f5fe:	f7fb fe1f 	bl	800b240 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f602:	4804      	ldr	r0, [pc, #16]	; (800f614 <CDC_Receive_FS+0x24>)
 800f604:	f7fb fe3a 	bl	800b27c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f608:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3708      	adds	r7, #8
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	200165d4 	.word	0x200165d4

0800f618 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f618:	b480      	push	{r7}
 800f61a:	b087      	sub	sp, #28
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	4613      	mov	r3, r2
 800f624:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f626:	2300      	movs	r3, #0
 800f628:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f62a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f62e:	4618      	mov	r0, r3
 800f630:	371c      	adds	r7, #28
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr
	...

0800f63c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b083      	sub	sp, #12
 800f640:	af00      	add	r7, sp, #0
 800f642:	4603      	mov	r3, r0
 800f644:	6039      	str	r1, [r7, #0]
 800f646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	2212      	movs	r2, #18
 800f64c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f64e:	4b03      	ldr	r3, [pc, #12]	; (800f65c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f650:	4618      	mov	r0, r3
 800f652:	370c      	adds	r7, #12
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	200000d0 	.word	0x200000d0

0800f660 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	4603      	mov	r3, r0
 800f668:	6039      	str	r1, [r7, #0]
 800f66a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	2204      	movs	r2, #4
 800f670:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f672:	4b03      	ldr	r3, [pc, #12]	; (800f680 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f674:	4618      	mov	r0, r3
 800f676:	370c      	adds	r7, #12
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr
 800f680:	200000e4 	.word	0x200000e4

0800f684 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
 800f68a:	4603      	mov	r3, r0
 800f68c:	6039      	str	r1, [r7, #0]
 800f68e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f690:	79fb      	ldrb	r3, [r7, #7]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d105      	bne.n	800f6a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f696:	683a      	ldr	r2, [r7, #0]
 800f698:	4907      	ldr	r1, [pc, #28]	; (800f6b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f69a:	4808      	ldr	r0, [pc, #32]	; (800f6bc <USBD_FS_ProductStrDescriptor+0x38>)
 800f69c:	f7fd f836 	bl	800c70c <USBD_GetString>
 800f6a0:	e004      	b.n	800f6ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6a2:	683a      	ldr	r2, [r7, #0]
 800f6a4:	4904      	ldr	r1, [pc, #16]	; (800f6b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f6a6:	4805      	ldr	r0, [pc, #20]	; (800f6bc <USBD_FS_ProductStrDescriptor+0x38>)
 800f6a8:	f7fd f830 	bl	800c70c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6ac:	4b02      	ldr	r3, [pc, #8]	; (800f6b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3708      	adds	r7, #8
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	200178b0 	.word	0x200178b0
 800f6bc:	0801cc20 	.word	0x0801cc20

0800f6c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	6039      	str	r1, [r7, #0]
 800f6ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f6cc:	683a      	ldr	r2, [r7, #0]
 800f6ce:	4904      	ldr	r1, [pc, #16]	; (800f6e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f6d0:	4804      	ldr	r0, [pc, #16]	; (800f6e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f6d2:	f7fd f81b 	bl	800c70c <USBD_GetString>
  return USBD_StrDesc;
 800f6d6:	4b02      	ldr	r3, [pc, #8]	; (800f6e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3708      	adds	r7, #8
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	200178b0 	.word	0x200178b0
 800f6e4:	0801cc2c 	.word	0x0801cc2c

0800f6e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	6039      	str	r1, [r7, #0]
 800f6f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	221a      	movs	r2, #26
 800f6f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f6fa:	f000 f843 	bl	800f784 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f6fe:	4b02      	ldr	r3, [pc, #8]	; (800f708 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f700:	4618      	mov	r0, r3
 800f702:	3708      	adds	r7, #8
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	200000e8 	.word	0x200000e8

0800f70c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b082      	sub	sp, #8
 800f710:	af00      	add	r7, sp, #0
 800f712:	4603      	mov	r3, r0
 800f714:	6039      	str	r1, [r7, #0]
 800f716:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f718:	79fb      	ldrb	r3, [r7, #7]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d105      	bne.n	800f72a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f71e:	683a      	ldr	r2, [r7, #0]
 800f720:	4907      	ldr	r1, [pc, #28]	; (800f740 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f722:	4808      	ldr	r0, [pc, #32]	; (800f744 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f724:	f7fc fff2 	bl	800c70c <USBD_GetString>
 800f728:	e004      	b.n	800f734 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f72a:	683a      	ldr	r2, [r7, #0]
 800f72c:	4904      	ldr	r1, [pc, #16]	; (800f740 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f72e:	4805      	ldr	r0, [pc, #20]	; (800f744 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f730:	f7fc ffec 	bl	800c70c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f734:	4b02      	ldr	r3, [pc, #8]	; (800f740 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f736:	4618      	mov	r0, r3
 800f738:	3708      	adds	r7, #8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	200178b0 	.word	0x200178b0
 800f744:	0801cc34 	.word	0x0801cc34

0800f748 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	4603      	mov	r3, r0
 800f750:	6039      	str	r1, [r7, #0]
 800f752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f754:	79fb      	ldrb	r3, [r7, #7]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d105      	bne.n	800f766 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f75a:	683a      	ldr	r2, [r7, #0]
 800f75c:	4907      	ldr	r1, [pc, #28]	; (800f77c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f75e:	4808      	ldr	r0, [pc, #32]	; (800f780 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f760:	f7fc ffd4 	bl	800c70c <USBD_GetString>
 800f764:	e004      	b.n	800f770 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f766:	683a      	ldr	r2, [r7, #0]
 800f768:	4904      	ldr	r1, [pc, #16]	; (800f77c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f76a:	4805      	ldr	r0, [pc, #20]	; (800f780 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f76c:	f7fc ffce 	bl	800c70c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f770:	4b02      	ldr	r3, [pc, #8]	; (800f77c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f772:	4618      	mov	r0, r3
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	200178b0 	.word	0x200178b0
 800f780:	0801cc40 	.word	0x0801cc40

0800f784 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f78a:	4b0f      	ldr	r3, [pc, #60]	; (800f7c8 <Get_SerialNum+0x44>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f790:	4b0e      	ldr	r3, [pc, #56]	; (800f7cc <Get_SerialNum+0x48>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f796:	4b0e      	ldr	r3, [pc, #56]	; (800f7d0 <Get_SerialNum+0x4c>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d009      	beq.n	800f7be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f7aa:	2208      	movs	r2, #8
 800f7ac:	4909      	ldr	r1, [pc, #36]	; (800f7d4 <Get_SerialNum+0x50>)
 800f7ae:	68f8      	ldr	r0, [r7, #12]
 800f7b0:	f000 f814 	bl	800f7dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f7b4:	2204      	movs	r2, #4
 800f7b6:	4908      	ldr	r1, [pc, #32]	; (800f7d8 <Get_SerialNum+0x54>)
 800f7b8:	68b8      	ldr	r0, [r7, #8]
 800f7ba:	f000 f80f 	bl	800f7dc <IntToUnicode>
  }
}
 800f7be:	bf00      	nop
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	1fff7a10 	.word	0x1fff7a10
 800f7cc:	1fff7a14 	.word	0x1fff7a14
 800f7d0:	1fff7a18 	.word	0x1fff7a18
 800f7d4:	200000ea 	.word	0x200000ea
 800f7d8:	200000fa 	.word	0x200000fa

0800f7dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b087      	sub	sp, #28
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	4613      	mov	r3, r2
 800f7e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	75fb      	strb	r3, [r7, #23]
 800f7f2:	e027      	b.n	800f844 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	0f1b      	lsrs	r3, r3, #28
 800f7f8:	2b09      	cmp	r3, #9
 800f7fa:	d80b      	bhi.n	800f814 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	0f1b      	lsrs	r3, r3, #28
 800f800:	b2da      	uxtb	r2, r3
 800f802:	7dfb      	ldrb	r3, [r7, #23]
 800f804:	005b      	lsls	r3, r3, #1
 800f806:	4619      	mov	r1, r3
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	440b      	add	r3, r1
 800f80c:	3230      	adds	r2, #48	; 0x30
 800f80e:	b2d2      	uxtb	r2, r2
 800f810:	701a      	strb	r2, [r3, #0]
 800f812:	e00a      	b.n	800f82a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	0f1b      	lsrs	r3, r3, #28
 800f818:	b2da      	uxtb	r2, r3
 800f81a:	7dfb      	ldrb	r3, [r7, #23]
 800f81c:	005b      	lsls	r3, r3, #1
 800f81e:	4619      	mov	r1, r3
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	440b      	add	r3, r1
 800f824:	3237      	adds	r2, #55	; 0x37
 800f826:	b2d2      	uxtb	r2, r2
 800f828:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	011b      	lsls	r3, r3, #4
 800f82e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f830:	7dfb      	ldrb	r3, [r7, #23]
 800f832:	005b      	lsls	r3, r3, #1
 800f834:	3301      	adds	r3, #1
 800f836:	68ba      	ldr	r2, [r7, #8]
 800f838:	4413      	add	r3, r2
 800f83a:	2200      	movs	r2, #0
 800f83c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f83e:	7dfb      	ldrb	r3, [r7, #23]
 800f840:	3301      	adds	r3, #1
 800f842:	75fb      	strb	r3, [r7, #23]
 800f844:	7dfa      	ldrb	r2, [r7, #23]
 800f846:	79fb      	ldrb	r3, [r7, #7]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d3d3      	bcc.n	800f7f4 <IntToUnicode+0x18>
  }
}
 800f84c:	bf00      	nop
 800f84e:	bf00      	nop
 800f850:	371c      	adds	r7, #28
 800f852:	46bd      	mov	sp, r7
 800f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f858:	4770      	bx	lr
	...

0800f85c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b08a      	sub	sp, #40	; 0x28
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f864:	f107 0314 	add.w	r3, r7, #20
 800f868:	2200      	movs	r2, #0
 800f86a:	601a      	str	r2, [r3, #0]
 800f86c:	605a      	str	r2, [r3, #4]
 800f86e:	609a      	str	r2, [r3, #8]
 800f870:	60da      	str	r2, [r3, #12]
 800f872:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f87c:	d13a      	bne.n	800f8f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f87e:	2300      	movs	r3, #0
 800f880:	613b      	str	r3, [r7, #16]
 800f882:	4b1e      	ldr	r3, [pc, #120]	; (800f8fc <HAL_PCD_MspInit+0xa0>)
 800f884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f886:	4a1d      	ldr	r2, [pc, #116]	; (800f8fc <HAL_PCD_MspInit+0xa0>)
 800f888:	f043 0301 	orr.w	r3, r3, #1
 800f88c:	6313      	str	r3, [r2, #48]	; 0x30
 800f88e:	4b1b      	ldr	r3, [pc, #108]	; (800f8fc <HAL_PCD_MspInit+0xa0>)
 800f890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f892:	f003 0301 	and.w	r3, r3, #1
 800f896:	613b      	str	r3, [r7, #16]
 800f898:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f89a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f89e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8a0:	2302      	movs	r3, #2
 800f8a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8a8:	2303      	movs	r3, #3
 800f8aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f8ac:	230a      	movs	r3, #10
 800f8ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8b0:	f107 0314 	add.w	r3, r7, #20
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	4812      	ldr	r0, [pc, #72]	; (800f900 <HAL_PCD_MspInit+0xa4>)
 800f8b8:	f7f4 fbce 	bl	8004058 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f8bc:	4b0f      	ldr	r3, [pc, #60]	; (800f8fc <HAL_PCD_MspInit+0xa0>)
 800f8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8c0:	4a0e      	ldr	r2, [pc, #56]	; (800f8fc <HAL_PCD_MspInit+0xa0>)
 800f8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8c6:	6353      	str	r3, [r2, #52]	; 0x34
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	60fb      	str	r3, [r7, #12]
 800f8cc:	4b0b      	ldr	r3, [pc, #44]	; (800f8fc <HAL_PCD_MspInit+0xa0>)
 800f8ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8d0:	4a0a      	ldr	r2, [pc, #40]	; (800f8fc <HAL_PCD_MspInit+0xa0>)
 800f8d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f8d6:	6453      	str	r3, [r2, #68]	; 0x44
 800f8d8:	4b08      	ldr	r3, [pc, #32]	; (800f8fc <HAL_PCD_MspInit+0xa0>)
 800f8da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8e0:	60fb      	str	r3, [r7, #12]
 800f8e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	2105      	movs	r1, #5
 800f8e8:	2043      	movs	r0, #67	; 0x43
 800f8ea:	f7f3 ff6d 	bl	80037c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f8ee:	2043      	movs	r0, #67	; 0x43
 800f8f0:	f7f3 ff86 	bl	8003800 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f8f4:	bf00      	nop
 800f8f6:	3728      	adds	r7, #40	; 0x28
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}
 800f8fc:	40023800 	.word	0x40023800
 800f900:	40020000 	.word	0x40020000

0800f904 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f918:	4619      	mov	r1, r3
 800f91a:	4610      	mov	r0, r2
 800f91c:	f7fb fd97 	bl	800b44e <USBD_LL_SetupStage>
}
 800f920:	bf00      	nop
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	460b      	mov	r3, r1
 800f932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f93a:	78fa      	ldrb	r2, [r7, #3]
 800f93c:	6879      	ldr	r1, [r7, #4]
 800f93e:	4613      	mov	r3, r2
 800f940:	00db      	lsls	r3, r3, #3
 800f942:	4413      	add	r3, r2
 800f944:	009b      	lsls	r3, r3, #2
 800f946:	440b      	add	r3, r1
 800f948:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f94c:	681a      	ldr	r2, [r3, #0]
 800f94e:	78fb      	ldrb	r3, [r7, #3]
 800f950:	4619      	mov	r1, r3
 800f952:	f7fb fdd1 	bl	800b4f8 <USBD_LL_DataOutStage>
}
 800f956:	bf00      	nop
 800f958:	3708      	adds	r7, #8
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b082      	sub	sp, #8
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
 800f966:	460b      	mov	r3, r1
 800f968:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f970:	78fa      	ldrb	r2, [r7, #3]
 800f972:	6879      	ldr	r1, [r7, #4]
 800f974:	4613      	mov	r3, r2
 800f976:	00db      	lsls	r3, r3, #3
 800f978:	4413      	add	r3, r2
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	440b      	add	r3, r1
 800f97e:	334c      	adds	r3, #76	; 0x4c
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	78fb      	ldrb	r3, [r7, #3]
 800f984:	4619      	mov	r1, r3
 800f986:	f7fb fe6a 	bl	800b65e <USBD_LL_DataInStage>
}
 800f98a:	bf00      	nop
 800f98c:	3708      	adds	r7, #8
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}

0800f992 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f992:	b580      	push	{r7, lr}
 800f994:	b082      	sub	sp, #8
 800f996:	af00      	add	r7, sp, #0
 800f998:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7fb ff9e 	bl	800b8e2 <USBD_LL_SOF>
}
 800f9a6:	bf00      	nop
 800f9a8:	3708      	adds	r7, #8
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	b084      	sub	sp, #16
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	68db      	ldr	r3, [r3, #12]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d102      	bne.n	800f9c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	73fb      	strb	r3, [r7, #15]
 800f9c6:	e008      	b.n	800f9da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	2b02      	cmp	r3, #2
 800f9ce:	d102      	bne.n	800f9d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	73fb      	strb	r3, [r7, #15]
 800f9d4:	e001      	b.n	800f9da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f9d6:	f7f2 f929 	bl	8001c2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9e0:	7bfa      	ldrb	r2, [r7, #15]
 800f9e2:	4611      	mov	r1, r2
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7fb ff3e 	bl	800b866 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7fb fee6 	bl	800b7c2 <USBD_LL_Reset>
}
 800f9f6:	bf00      	nop
 800f9f8:	3710      	adds	r7, #16
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
	...

0800fa00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7fb ff39 	bl	800b886 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	687a      	ldr	r2, [r7, #4]
 800fa20:	6812      	ldr	r2, [r2, #0]
 800fa22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa26:	f043 0301 	orr.w	r3, r3, #1
 800fa2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6a1b      	ldr	r3, [r3, #32]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d005      	beq.n	800fa40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa34:	4b04      	ldr	r3, [pc, #16]	; (800fa48 <HAL_PCD_SuspendCallback+0x48>)
 800fa36:	691b      	ldr	r3, [r3, #16]
 800fa38:	4a03      	ldr	r2, [pc, #12]	; (800fa48 <HAL_PCD_SuspendCallback+0x48>)
 800fa3a:	f043 0306 	orr.w	r3, r3, #6
 800fa3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fa40:	bf00      	nop
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	e000ed00 	.word	0xe000ed00

0800fa4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fb ff29 	bl	800b8b2 <USBD_LL_Resume>
}
 800fa60:	bf00      	nop
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	460b      	mov	r3, r1
 800fa72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa7a:	78fa      	ldrb	r2, [r7, #3]
 800fa7c:	4611      	mov	r1, r2
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7fb ff81 	bl	800b986 <USBD_LL_IsoOUTIncomplete>
}
 800fa84:	bf00      	nop
 800fa86:	3708      	adds	r7, #8
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b082      	sub	sp, #8
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	460b      	mov	r3, r1
 800fa96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa9e:	78fa      	ldrb	r2, [r7, #3]
 800faa0:	4611      	mov	r1, r2
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7fb ff3d 	bl	800b922 <USBD_LL_IsoINIncomplete>
}
 800faa8:	bf00      	nop
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7fb ff93 	bl	800b9ea <USBD_LL_DevConnected>
}
 800fac4:	bf00      	nop
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fada:	4618      	mov	r0, r3
 800fadc:	f7fb ff90 	bl	800ba00 <USBD_LL_DevDisconnected>
}
 800fae0:	bf00      	nop
 800fae2:	3708      	adds	r7, #8
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d13c      	bne.n	800fb72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800faf8:	4a20      	ldr	r2, [pc, #128]	; (800fb7c <USBD_LL_Init+0x94>)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	4a1e      	ldr	r2, [pc, #120]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb04:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fb08:	4b1c      	ldr	r3, [pc, #112]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fb0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fb10:	4b1a      	ldr	r3, [pc, #104]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb12:	2204      	movs	r2, #4
 800fb14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fb16:	4b19      	ldr	r3, [pc, #100]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb18:	2202      	movs	r2, #2
 800fb1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fb1c:	4b17      	ldr	r3, [pc, #92]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb1e:	2200      	movs	r2, #0
 800fb20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fb22:	4b16      	ldr	r3, [pc, #88]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb24:	2202      	movs	r2, #2
 800fb26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fb28:	4b14      	ldr	r3, [pc, #80]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fb2e:	4b13      	ldr	r3, [pc, #76]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb30:	2200      	movs	r2, #0
 800fb32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fb34:	4b11      	ldr	r3, [pc, #68]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb36:	2200      	movs	r2, #0
 800fb38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fb3a:	4b10      	ldr	r3, [pc, #64]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fb40:	4b0e      	ldr	r3, [pc, #56]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb42:	2200      	movs	r2, #0
 800fb44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fb46:	480d      	ldr	r0, [pc, #52]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb48:	f7f4 fd80 	bl	800464c <HAL_PCD_Init>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d001      	beq.n	800fb56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fb52:	f7f2 f86b 	bl	8001c2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fb56:	2180      	movs	r1, #128	; 0x80
 800fb58:	4808      	ldr	r0, [pc, #32]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb5a:	f7f5 ffd8 	bl	8005b0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fb5e:	2240      	movs	r2, #64	; 0x40
 800fb60:	2100      	movs	r1, #0
 800fb62:	4806      	ldr	r0, [pc, #24]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb64:	f7f5 ff8c 	bl	8005a80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fb68:	2280      	movs	r2, #128	; 0x80
 800fb6a:	2101      	movs	r1, #1
 800fb6c:	4803      	ldr	r0, [pc, #12]	; (800fb7c <USBD_LL_Init+0x94>)
 800fb6e:	f7f5 ff87 	bl	8005a80 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fb72:	2300      	movs	r3, #0
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3708      	adds	r7, #8
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	20017ab0 	.word	0x20017ab0

0800fb80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7f4 fe75 	bl	8004886 <HAL_PCD_Start>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fba0:	7bfb      	ldrb	r3, [r7, #15]
 800fba2:	4618      	mov	r0, r3
 800fba4:	f000 f942 	bl	800fe2c <USBD_Get_USB_Status>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbac:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}

0800fbb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fbb6:	b580      	push	{r7, lr}
 800fbb8:	b084      	sub	sp, #16
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
 800fbbe:	4608      	mov	r0, r1
 800fbc0:	4611      	mov	r1, r2
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	70fb      	strb	r3, [r7, #3]
 800fbc8:	460b      	mov	r3, r1
 800fbca:	70bb      	strb	r3, [r7, #2]
 800fbcc:	4613      	mov	r3, r2
 800fbce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fbde:	78bb      	ldrb	r3, [r7, #2]
 800fbe0:	883a      	ldrh	r2, [r7, #0]
 800fbe2:	78f9      	ldrb	r1, [r7, #3]
 800fbe4:	f7f5 fb46 	bl	8005274 <HAL_PCD_EP_Open>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbec:	7bfb      	ldrb	r3, [r7, #15]
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f000 f91c 	bl	800fe2c <USBD_Get_USB_Status>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3710      	adds	r7, #16
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b084      	sub	sp, #16
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
 800fc0a:	460b      	mov	r3, r1
 800fc0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc12:	2300      	movs	r3, #0
 800fc14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc1c:	78fa      	ldrb	r2, [r7, #3]
 800fc1e:	4611      	mov	r1, r2
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7f5 fb8f 	bl	8005344 <HAL_PCD_EP_Close>
 800fc26:	4603      	mov	r3, r0
 800fc28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc2a:	7bfb      	ldrb	r3, [r7, #15]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f000 f8fd 	bl	800fe2c <USBD_Get_USB_Status>
 800fc32:	4603      	mov	r3, r0
 800fc34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc36:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3710      	adds	r7, #16
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b084      	sub	sp, #16
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	460b      	mov	r3, r1
 800fc4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc50:	2300      	movs	r3, #0
 800fc52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc5a:	78fa      	ldrb	r2, [r7, #3]
 800fc5c:	4611      	mov	r1, r2
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7f5 fc67 	bl	8005532 <HAL_PCD_EP_SetStall>
 800fc64:	4603      	mov	r3, r0
 800fc66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc68:	7bfb      	ldrb	r3, [r7, #15]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f000 f8de 	bl	800fe2c <USBD_Get_USB_Status>
 800fc70:	4603      	mov	r3, r0
 800fc72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc74:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b084      	sub	sp, #16
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
 800fc86:	460b      	mov	r3, r1
 800fc88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc98:	78fa      	ldrb	r2, [r7, #3]
 800fc9a:	4611      	mov	r1, r2
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7f5 fcac 	bl	80055fa <HAL_PCD_EP_ClrStall>
 800fca2:	4603      	mov	r3, r0
 800fca4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fca6:	7bfb      	ldrb	r3, [r7, #15]
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f000 f8bf 	bl	800fe2c <USBD_Get_USB_Status>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3710      	adds	r7, #16
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b085      	sub	sp, #20
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	460b      	mov	r3, r1
 800fcc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fcd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	da0b      	bge.n	800fcf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fcd8:	78fb      	ldrb	r3, [r7, #3]
 800fcda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fcde:	68f9      	ldr	r1, [r7, #12]
 800fce0:	4613      	mov	r3, r2
 800fce2:	00db      	lsls	r3, r3, #3
 800fce4:	4413      	add	r3, r2
 800fce6:	009b      	lsls	r3, r3, #2
 800fce8:	440b      	add	r3, r1
 800fcea:	333e      	adds	r3, #62	; 0x3e
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	e00b      	b.n	800fd08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fcf0:	78fb      	ldrb	r3, [r7, #3]
 800fcf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fcf6:	68f9      	ldr	r1, [r7, #12]
 800fcf8:	4613      	mov	r3, r2
 800fcfa:	00db      	lsls	r3, r3, #3
 800fcfc:	4413      	add	r3, r2
 800fcfe:	009b      	lsls	r3, r3, #2
 800fd00:	440b      	add	r3, r1
 800fd02:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fd06:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd08:	4618      	mov	r0, r3
 800fd0a:	3714      	adds	r7, #20
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr

0800fd14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	460b      	mov	r3, r1
 800fd1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd20:	2300      	movs	r3, #0
 800fd22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd24:	2300      	movs	r3, #0
 800fd26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd2e:	78fa      	ldrb	r2, [r7, #3]
 800fd30:	4611      	mov	r1, r2
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7f5 fa79 	bl	800522a <HAL_PCD_SetAddress>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd3c:	7bfb      	ldrb	r3, [r7, #15]
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f000 f874 	bl	800fe2c <USBD_Get_USB_Status>
 800fd44:	4603      	mov	r3, r0
 800fd46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd48:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3710      	adds	r7, #16
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}

0800fd52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd52:	b580      	push	{r7, lr}
 800fd54:	b086      	sub	sp, #24
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	60f8      	str	r0, [r7, #12]
 800fd5a:	607a      	str	r2, [r7, #4]
 800fd5c:	603b      	str	r3, [r7, #0]
 800fd5e:	460b      	mov	r3, r1
 800fd60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd62:	2300      	movs	r3, #0
 800fd64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd66:	2300      	movs	r3, #0
 800fd68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fd70:	7af9      	ldrb	r1, [r7, #11]
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	f7f5 fb92 	bl	800549e <HAL_PCD_EP_Transmit>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd7e:	7dfb      	ldrb	r3, [r7, #23]
 800fd80:	4618      	mov	r0, r3
 800fd82:	f000 f853 	bl	800fe2c <USBD_Get_USB_Status>
 800fd86:	4603      	mov	r3, r0
 800fd88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd8a:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3718      	adds	r7, #24
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b086      	sub	sp, #24
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	60f8      	str	r0, [r7, #12]
 800fd9c:	607a      	str	r2, [r7, #4]
 800fd9e:	603b      	str	r3, [r7, #0]
 800fda0:	460b      	mov	r3, r1
 800fda2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fda4:	2300      	movs	r3, #0
 800fda6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fdb2:	7af9      	ldrb	r1, [r7, #11]
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	f7f5 fb0e 	bl	80053d8 <HAL_PCD_EP_Receive>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdc0:	7dfb      	ldrb	r3, [r7, #23]
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f000 f832 	bl	800fe2c <USBD_Get_USB_Status>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fdcc:	7dbb      	ldrb	r3, [r7, #22]
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3718      	adds	r7, #24
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}

0800fdd6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fdd6:	b580      	push	{r7, lr}
 800fdd8:	b082      	sub	sp, #8
 800fdda:	af00      	add	r7, sp, #0
 800fddc:	6078      	str	r0, [r7, #4]
 800fdde:	460b      	mov	r3, r1
 800fde0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fde8:	78fa      	ldrb	r2, [r7, #3]
 800fdea:	4611      	mov	r1, r2
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7f5 fb3e 	bl	800546e <HAL_PCD_EP_GetRxCount>
 800fdf2:	4603      	mov	r3, r0
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b083      	sub	sp, #12
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fe04:	4b03      	ldr	r3, [pc, #12]	; (800fe14 <USBD_static_malloc+0x18>)
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	370c      	adds	r7, #12
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr
 800fe12:	bf00      	nop
 800fe14:	20017fbc 	.word	0x20017fbc

0800fe18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]

}
 800fe20:	bf00      	nop
 800fe22:	370c      	adds	r7, #12
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr

0800fe2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b085      	sub	sp, #20
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	4603      	mov	r3, r0
 800fe34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe36:	2300      	movs	r3, #0
 800fe38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fe3a:	79fb      	ldrb	r3, [r7, #7]
 800fe3c:	2b03      	cmp	r3, #3
 800fe3e:	d817      	bhi.n	800fe70 <USBD_Get_USB_Status+0x44>
 800fe40:	a201      	add	r2, pc, #4	; (adr r2, 800fe48 <USBD_Get_USB_Status+0x1c>)
 800fe42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe46:	bf00      	nop
 800fe48:	0800fe59 	.word	0x0800fe59
 800fe4c:	0800fe5f 	.word	0x0800fe5f
 800fe50:	0800fe65 	.word	0x0800fe65
 800fe54:	0800fe6b 	.word	0x0800fe6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe5c:	e00b      	b.n	800fe76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe5e:	2303      	movs	r3, #3
 800fe60:	73fb      	strb	r3, [r7, #15]
    break;
 800fe62:	e008      	b.n	800fe76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe64:	2301      	movs	r3, #1
 800fe66:	73fb      	strb	r3, [r7, #15]
    break;
 800fe68:	e005      	b.n	800fe76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe6a:	2303      	movs	r3, #3
 800fe6c:	73fb      	strb	r3, [r7, #15]
    break;
 800fe6e:	e002      	b.n	800fe76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fe70:	2303      	movs	r3, #3
 800fe72:	73fb      	strb	r3, [r7, #15]
    break;
 800fe74:	bf00      	nop
  }
  return usb_status;
 800fe76:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3714      	adds	r7, #20
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr

0800fe84 <rcl_get_zero_initialized_publisher>:
 800fe84:	4b01      	ldr	r3, [pc, #4]	; (800fe8c <rcl_get_zero_initialized_publisher+0x8>)
 800fe86:	6818      	ldr	r0, [r3, #0]
 800fe88:	4770      	bx	lr
 800fe8a:	bf00      	nop
 800fe8c:	0801ccc4 	.word	0x0801ccc4

0800fe90 <rcl_publisher_init>:
 800fe90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe94:	b088      	sub	sp, #32
 800fe96:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800fe98:	2d00      	cmp	r5, #0
 800fe9a:	d069      	beq.n	800ff70 <rcl_publisher_init+0xe0>
 800fe9c:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800fea0:	4604      	mov	r4, r0
 800fea2:	4648      	mov	r0, r9
 800fea4:	460e      	mov	r6, r1
 800fea6:	4690      	mov	r8, r2
 800fea8:	461f      	mov	r7, r3
 800feaa:	f000 f9d5 	bl	8010258 <rcutils_allocator_is_valid>
 800feae:	2800      	cmp	r0, #0
 800feb0:	d05e      	beq.n	800ff70 <rcl_publisher_init+0xe0>
 800feb2:	2c00      	cmp	r4, #0
 800feb4:	d05c      	beq.n	800ff70 <rcl_publisher_init+0xe0>
 800feb6:	f8d4 a000 	ldr.w	sl, [r4]
 800feba:	f1ba 0f00 	cmp.w	sl, #0
 800febe:	d004      	beq.n	800feca <rcl_publisher_init+0x3a>
 800fec0:	2764      	movs	r7, #100	; 0x64
 800fec2:	4638      	mov	r0, r7
 800fec4:	b008      	add	sp, #32
 800fec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feca:	4630      	mov	r0, r6
 800fecc:	f006 fee8 	bl	8016ca0 <rcl_node_is_valid>
 800fed0:	2800      	cmp	r0, #0
 800fed2:	d052      	beq.n	800ff7a <rcl_publisher_init+0xea>
 800fed4:	f1b8 0f00 	cmp.w	r8, #0
 800fed8:	d04a      	beq.n	800ff70 <rcl_publisher_init+0xe0>
 800feda:	2f00      	cmp	r7, #0
 800fedc:	d048      	beq.n	800ff70 <rcl_publisher_init+0xe0>
 800fede:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800fee2:	aa07      	add	r2, sp, #28
 800fee4:	9205      	str	r2, [sp, #20]
 800fee6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800feea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800feee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fef2:	f8cd a01c 	str.w	sl, [sp, #28]
 800fef6:	4639      	mov	r1, r7
 800fef8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800fefc:	4630      	mov	r0, r6
 800fefe:	f006 ff23 	bl	8016d48 <rcl_node_resolve_name>
 800ff02:	4607      	mov	r7, r0
 800ff04:	2800      	cmp	r0, #0
 800ff06:	d14f      	bne.n	800ffa8 <rcl_publisher_init+0x118>
 800ff08:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800ff0a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800ff0c:	20c8      	movs	r0, #200	; 0xc8
 800ff0e:	4798      	blx	r3
 800ff10:	6020      	str	r0, [r4, #0]
 800ff12:	2800      	cmp	r0, #0
 800ff14:	d04e      	beq.n	800ffb4 <rcl_publisher_init+0x124>
 800ff16:	4630      	mov	r0, r6
 800ff18:	f006 fee4 	bl	8016ce4 <rcl_node_get_rmw_handle>
 800ff1c:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800ff20:	9300      	str	r3, [sp, #0]
 800ff22:	9a07      	ldr	r2, [sp, #28]
 800ff24:	6827      	ldr	r7, [r4, #0]
 800ff26:	462b      	mov	r3, r5
 800ff28:	4641      	mov	r1, r8
 800ff2a:	f000 fa53 	bl	80103d4 <rmw_create_publisher>
 800ff2e:	6823      	ldr	r3, [r4, #0]
 800ff30:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800ff34:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800ff38:	b370      	cbz	r0, 800ff98 <rcl_publisher_init+0x108>
 800ff3a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800ff3e:	f000 fb29 	bl	8010594 <rmw_publisher_get_actual_qos>
 800ff42:	6823      	ldr	r3, [r4, #0]
 800ff44:	4607      	mov	r7, r0
 800ff46:	b9d0      	cbnz	r0, 800ff7e <rcl_publisher_init+0xee>
 800ff48:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800ff4c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800ff50:	4629      	mov	r1, r5
 800ff52:	2270      	movs	r2, #112	; 0x70
 800ff54:	4618      	mov	r0, r3
 800ff56:	f00b faff 	bl	801b558 <memcpy>
 800ff5a:	6832      	ldr	r2, [r6, #0]
 800ff5c:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800ff60:	9807      	ldr	r0, [sp, #28]
 800ff62:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800ff64:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800ff66:	4798      	blx	r3
 800ff68:	4638      	mov	r0, r7
 800ff6a:	b008      	add	sp, #32
 800ff6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff70:	270b      	movs	r7, #11
 800ff72:	4638      	mov	r0, r7
 800ff74:	b008      	add	sp, #32
 800ff76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff7a:	27c8      	movs	r7, #200	; 0xc8
 800ff7c:	e7a1      	b.n	800fec2 <rcl_publisher_init+0x32>
 800ff7e:	b18b      	cbz	r3, 800ffa4 <rcl_publisher_init+0x114>
 800ff80:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800ff84:	b142      	cbz	r2, 800ff98 <rcl_publisher_init+0x108>
 800ff86:	4630      	mov	r0, r6
 800ff88:	f006 feac 	bl	8016ce4 <rcl_node_get_rmw_handle>
 800ff8c:	6823      	ldr	r3, [r4, #0]
 800ff8e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800ff92:	f000 fb01 	bl	8010598 <rmw_destroy_publisher>
 800ff96:	6823      	ldr	r3, [r4, #0]
 800ff98:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800ff9a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	4790      	blx	r2
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	6023      	str	r3, [r4, #0]
 800ffa4:	2701      	movs	r7, #1
 800ffa6:	e7db      	b.n	800ff60 <rcl_publisher_init+0xd0>
 800ffa8:	2867      	cmp	r0, #103	; 0x67
 800ffaa:	d0d9      	beq.n	800ff60 <rcl_publisher_init+0xd0>
 800ffac:	2869      	cmp	r0, #105	; 0x69
 800ffae:	d003      	beq.n	800ffb8 <rcl_publisher_init+0x128>
 800ffb0:	280a      	cmp	r0, #10
 800ffb2:	d1f7      	bne.n	800ffa4 <rcl_publisher_init+0x114>
 800ffb4:	270a      	movs	r7, #10
 800ffb6:	e7d3      	b.n	800ff60 <rcl_publisher_init+0xd0>
 800ffb8:	2767      	movs	r7, #103	; 0x67
 800ffba:	e7d1      	b.n	800ff60 <rcl_publisher_init+0xd0>

0800ffbc <rcl_publisher_get_default_options>:
 800ffbc:	b570      	push	{r4, r5, r6, lr}
 800ffbe:	4d14      	ldr	r5, [pc, #80]	; (8010010 <rcl_publisher_get_default_options+0x54>)
 800ffc0:	4914      	ldr	r1, [pc, #80]	; (8010014 <rcl_publisher_get_default_options+0x58>)
 800ffc2:	b088      	sub	sp, #32
 800ffc4:	4604      	mov	r4, r0
 800ffc6:	2250      	movs	r2, #80	; 0x50
 800ffc8:	4628      	mov	r0, r5
 800ffca:	f00b fac5 	bl	801b558 <memcpy>
 800ffce:	a802      	add	r0, sp, #8
 800ffd0:	f000 f934 	bl	801023c <rcutils_get_default_allocator>
 800ffd4:	f10d 0c08 	add.w	ip, sp, #8
 800ffd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ffdc:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800ffe0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ffe4:	466e      	mov	r6, sp
 800ffe6:	f8dc 3000 	ldr.w	r3, [ip]
 800ffea:	f8ce 3000 	str.w	r3, [lr]
 800ffee:	4630      	mov	r0, r6
 800fff0:	f000 f972 	bl	80102d8 <rmw_get_default_publisher_options>
 800fff4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fff8:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800fffc:	e883 0003 	stmia.w	r3, {r0, r1}
 8010000:	2270      	movs	r2, #112	; 0x70
 8010002:	4629      	mov	r1, r5
 8010004:	4620      	mov	r0, r4
 8010006:	f00b faa7 	bl	801b558 <memcpy>
 801000a:	4620      	mov	r0, r4
 801000c:	b008      	add	sp, #32
 801000e:	bd70      	pop	{r4, r5, r6, pc}
 8010010:	200181e0 	.word	0x200181e0
 8010014:	0801ccc8 	.word	0x0801ccc8

08010018 <rcl_publish>:
 8010018:	b1f8      	cbz	r0, 801005a <rcl_publish+0x42>
 801001a:	6803      	ldr	r3, [r0, #0]
 801001c:	b570      	push	{r4, r5, r6, lr}
 801001e:	4604      	mov	r4, r0
 8010020:	b1b3      	cbz	r3, 8010050 <rcl_publish+0x38>
 8010022:	4616      	mov	r6, r2
 8010024:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8010028:	b192      	cbz	r2, 8010050 <rcl_publish+0x38>
 801002a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 801002e:	460d      	mov	r5, r1
 8010030:	f006 fa5c 	bl	80164ec <rcl_context_is_valid>
 8010034:	b160      	cbz	r0, 8010050 <rcl_publish+0x38>
 8010036:	6823      	ldr	r3, [r4, #0]
 8010038:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 801003c:	b140      	cbz	r0, 8010050 <rcl_publish+0x38>
 801003e:	b155      	cbz	r5, 8010056 <rcl_publish+0x3e>
 8010040:	4632      	mov	r2, r6
 8010042:	4629      	mov	r1, r5
 8010044:	f000 f966 	bl	8010314 <rmw_publish>
 8010048:	3800      	subs	r0, #0
 801004a:	bf18      	it	ne
 801004c:	2001      	movne	r0, #1
 801004e:	bd70      	pop	{r4, r5, r6, pc}
 8010050:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8010054:	bd70      	pop	{r4, r5, r6, pc}
 8010056:	200b      	movs	r0, #11
 8010058:	bd70      	pop	{r4, r5, r6, pc}
 801005a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801005e:	4770      	bx	lr

08010060 <rclc_support_init>:
 8010060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010064:	b086      	sub	sp, #24
 8010066:	b3b8      	cbz	r0, 80100d8 <rclc_support_init+0x78>
 8010068:	461c      	mov	r4, r3
 801006a:	b3ab      	cbz	r3, 80100d8 <rclc_support_init+0x78>
 801006c:	460f      	mov	r7, r1
 801006e:	4690      	mov	r8, r2
 8010070:	4606      	mov	r6, r0
 8010072:	f006 fba5 	bl	80167c0 <rcl_get_zero_initialized_init_options>
 8010076:	f104 030c 	add.w	r3, r4, #12
 801007a:	9005      	str	r0, [sp, #20]
 801007c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010080:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010084:	a805      	add	r0, sp, #20
 8010086:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801008a:	f006 fb9b 	bl	80167c4 <rcl_init_options_init>
 801008e:	4605      	mov	r5, r0
 8010090:	b9e0      	cbnz	r0, 80100cc <rclc_support_init+0x6c>
 8010092:	ad02      	add	r5, sp, #8
 8010094:	4628      	mov	r0, r5
 8010096:	f006 fa1f 	bl	80164d8 <rcl_get_zero_initialized_context>
 801009a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801009e:	4633      	mov	r3, r6
 80100a0:	e886 0003 	stmia.w	r6, {r0, r1}
 80100a4:	aa05      	add	r2, sp, #20
 80100a6:	4641      	mov	r1, r8
 80100a8:	4638      	mov	r0, r7
 80100aa:	f006 fa85 	bl	80165b8 <rcl_init>
 80100ae:	4605      	mov	r5, r0
 80100b0:	b9b8      	cbnz	r0, 80100e2 <rclc_support_init+0x82>
 80100b2:	60b4      	str	r4, [r6, #8]
 80100b4:	4622      	mov	r2, r4
 80100b6:	f106 010c 	add.w	r1, r6, #12
 80100ba:	2003      	movs	r0, #3
 80100bc:	f007 f800 	bl	80170c0 <rcl_clock_init>
 80100c0:	4605      	mov	r5, r0
 80100c2:	b970      	cbnz	r0, 80100e2 <rclc_support_init+0x82>
 80100c4:	a805      	add	r0, sp, #20
 80100c6:	f006 fbe3 	bl	8016890 <rcl_init_options_fini>
 80100ca:	b108      	cbz	r0, 80100d0 <rclc_support_init+0x70>
 80100cc:	f000 f8e8 	bl	80102a0 <rcutils_reset_error>
 80100d0:	4628      	mov	r0, r5
 80100d2:	b006      	add	sp, #24
 80100d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100d8:	250b      	movs	r5, #11
 80100da:	4628      	mov	r0, r5
 80100dc:	b006      	add	sp, #24
 80100de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100e2:	f000 f8dd 	bl	80102a0 <rcutils_reset_error>
 80100e6:	a805      	add	r0, sp, #20
 80100e8:	f006 fbd2 	bl	8016890 <rcl_init_options_fini>
 80100ec:	2800      	cmp	r0, #0
 80100ee:	d0ef      	beq.n	80100d0 <rclc_support_init+0x70>
 80100f0:	e7ec      	b.n	80100cc <rclc_support_init+0x6c>
 80100f2:	bf00      	nop

080100f4 <rclc_node_init_default>:
 80100f4:	b3b8      	cbz	r0, 8010166 <rclc_node_init_default+0x72>
 80100f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100fa:	460d      	mov	r5, r1
 80100fc:	b0a1      	sub	sp, #132	; 0x84
 80100fe:	b329      	cbz	r1, 801014c <rclc_node_init_default+0x58>
 8010100:	4616      	mov	r6, r2
 8010102:	b31a      	cbz	r2, 801014c <rclc_node_init_default+0x58>
 8010104:	461f      	mov	r7, r3
 8010106:	b30b      	cbz	r3, 801014c <rclc_node_init_default+0x58>
 8010108:	f10d 0810 	add.w	r8, sp, #16
 801010c:	4604      	mov	r4, r0
 801010e:	4640      	mov	r0, r8
 8010110:	f006 fc76 	bl	8016a00 <rcl_get_zero_initialized_node>
 8010114:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010118:	f10d 0918 	add.w	r9, sp, #24
 801011c:	e884 0003 	stmia.w	r4, {r0, r1}
 8010120:	4648      	mov	r0, r9
 8010122:	f006 fde5 	bl	8016cf0 <rcl_node_get_default_options>
 8010126:	4640      	mov	r0, r8
 8010128:	f006 fc6a 	bl	8016a00 <rcl_get_zero_initialized_node>
 801012c:	f8cd 9000 	str.w	r9, [sp]
 8010130:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010134:	463b      	mov	r3, r7
 8010136:	e884 0003 	stmia.w	r4, {r0, r1}
 801013a:	4632      	mov	r2, r6
 801013c:	4629      	mov	r1, r5
 801013e:	4620      	mov	r0, r4
 8010140:	f006 fc68 	bl	8016a14 <rcl_node_init>
 8010144:	b930      	cbnz	r0, 8010154 <rclc_node_init_default+0x60>
 8010146:	b021      	add	sp, #132	; 0x84
 8010148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801014c:	200b      	movs	r0, #11
 801014e:	b021      	add	sp, #132	; 0x84
 8010150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010154:	9003      	str	r0, [sp, #12]
 8010156:	f000 f8a3 	bl	80102a0 <rcutils_reset_error>
 801015a:	f000 f8a1 	bl	80102a0 <rcutils_reset_error>
 801015e:	9803      	ldr	r0, [sp, #12]
 8010160:	b021      	add	sp, #132	; 0x84
 8010162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010166:	200b      	movs	r0, #11
 8010168:	4770      	bx	lr
 801016a:	bf00      	nop

0801016c <rclc_publisher_init_default>:
 801016c:	b368      	cbz	r0, 80101ca <rclc_publisher_init_default+0x5e>
 801016e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010172:	460d      	mov	r5, r1
 8010174:	b0a0      	sub	sp, #128	; 0x80
 8010176:	b321      	cbz	r1, 80101c2 <rclc_publisher_init_default+0x56>
 8010178:	4616      	mov	r6, r2
 801017a:	b312      	cbz	r2, 80101c2 <rclc_publisher_init_default+0x56>
 801017c:	461f      	mov	r7, r3
 801017e:	b303      	cbz	r3, 80101c2 <rclc_publisher_init_default+0x56>
 8010180:	4604      	mov	r4, r0
 8010182:	f7ff fe7f 	bl	800fe84 <rcl_get_zero_initialized_publisher>
 8010186:	f10d 0810 	add.w	r8, sp, #16
 801018a:	6020      	str	r0, [r4, #0]
 801018c:	4640      	mov	r0, r8
 801018e:	f7ff ff15 	bl	800ffbc <rcl_publisher_get_default_options>
 8010192:	490f      	ldr	r1, [pc, #60]	; (80101d0 <rclc_publisher_init_default+0x64>)
 8010194:	2250      	movs	r2, #80	; 0x50
 8010196:	4640      	mov	r0, r8
 8010198:	f00b f9de 	bl	801b558 <memcpy>
 801019c:	f8cd 8000 	str.w	r8, [sp]
 80101a0:	463b      	mov	r3, r7
 80101a2:	4632      	mov	r2, r6
 80101a4:	4629      	mov	r1, r5
 80101a6:	4620      	mov	r0, r4
 80101a8:	f7ff fe72 	bl	800fe90 <rcl_publisher_init>
 80101ac:	b910      	cbnz	r0, 80101b4 <rclc_publisher_init_default+0x48>
 80101ae:	b020      	add	sp, #128	; 0x80
 80101b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101b4:	9003      	str	r0, [sp, #12]
 80101b6:	f000 f873 	bl	80102a0 <rcutils_reset_error>
 80101ba:	9803      	ldr	r0, [sp, #12]
 80101bc:	b020      	add	sp, #128	; 0x80
 80101be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101c2:	200b      	movs	r0, #11
 80101c4:	b020      	add	sp, #128	; 0x80
 80101c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101ca:	200b      	movs	r0, #11
 80101cc:	4770      	bx	lr
 80101ce:	bf00      	nop
 80101d0:	0801cd18 	.word	0x0801cd18

080101d4 <__default_zero_allocate>:
 80101d4:	f00a bfba 	b.w	801b14c <calloc>

080101d8 <__default_reallocate>:
 80101d8:	f00b bb4e 	b.w	801b878 <realloc>

080101dc <__default_deallocate>:
 80101dc:	f00b b9b4 	b.w	801b548 <free>

080101e0 <__default_allocate>:
 80101e0:	f00b b9aa 	b.w	801b538 <malloc>

080101e4 <rcutils_get_zero_initialized_allocator>:
 80101e4:	b510      	push	{r4, lr}
 80101e6:	4c05      	ldr	r4, [pc, #20]	; (80101fc <rcutils_get_zero_initialized_allocator+0x18>)
 80101e8:	4686      	mov	lr, r0
 80101ea:	4684      	mov	ip, r0
 80101ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80101ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80101f2:	6823      	ldr	r3, [r4, #0]
 80101f4:	f8cc 3000 	str.w	r3, [ip]
 80101f8:	4670      	mov	r0, lr
 80101fa:	bd10      	pop	{r4, pc}
 80101fc:	0801cd68 	.word	0x0801cd68

08010200 <rcutils_set_default_allocator>:
 8010200:	b1a8      	cbz	r0, 801022e <rcutils_set_default_allocator+0x2e>
 8010202:	6802      	ldr	r2, [r0, #0]
 8010204:	b1a2      	cbz	r2, 8010230 <rcutils_set_default_allocator+0x30>
 8010206:	6841      	ldr	r1, [r0, #4]
 8010208:	b1a1      	cbz	r1, 8010234 <rcutils_set_default_allocator+0x34>
 801020a:	b410      	push	{r4}
 801020c:	68c4      	ldr	r4, [r0, #12]
 801020e:	b164      	cbz	r4, 801022a <rcutils_set_default_allocator+0x2a>
 8010210:	6880      	ldr	r0, [r0, #8]
 8010212:	b138      	cbz	r0, 8010224 <rcutils_set_default_allocator+0x24>
 8010214:	4b08      	ldr	r3, [pc, #32]	; (8010238 <rcutils_set_default_allocator+0x38>)
 8010216:	601a      	str	r2, [r3, #0]
 8010218:	2200      	movs	r2, #0
 801021a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 801021e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8010222:	2001      	movs	r0, #1
 8010224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010228:	4770      	bx	lr
 801022a:	4620      	mov	r0, r4
 801022c:	e7fa      	b.n	8010224 <rcutils_set_default_allocator+0x24>
 801022e:	4770      	bx	lr
 8010230:	4610      	mov	r0, r2
 8010232:	4770      	bx	lr
 8010234:	4608      	mov	r0, r1
 8010236:	4770      	bx	lr
 8010238:	20000104 	.word	0x20000104

0801023c <rcutils_get_default_allocator>:
 801023c:	b510      	push	{r4, lr}
 801023e:	4c05      	ldr	r4, [pc, #20]	; (8010254 <rcutils_get_default_allocator+0x18>)
 8010240:	4686      	mov	lr, r0
 8010242:	4684      	mov	ip, r0
 8010244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010246:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801024a:	6823      	ldr	r3, [r4, #0]
 801024c:	f8cc 3000 	str.w	r3, [ip]
 8010250:	4670      	mov	r0, lr
 8010252:	bd10      	pop	{r4, pc}
 8010254:	20000104 	.word	0x20000104

08010258 <rcutils_allocator_is_valid>:
 8010258:	b158      	cbz	r0, 8010272 <rcutils_allocator_is_valid+0x1a>
 801025a:	6803      	ldr	r3, [r0, #0]
 801025c:	b143      	cbz	r3, 8010270 <rcutils_allocator_is_valid+0x18>
 801025e:	6843      	ldr	r3, [r0, #4]
 8010260:	b133      	cbz	r3, 8010270 <rcutils_allocator_is_valid+0x18>
 8010262:	68c3      	ldr	r3, [r0, #12]
 8010264:	b123      	cbz	r3, 8010270 <rcutils_allocator_is_valid+0x18>
 8010266:	6880      	ldr	r0, [r0, #8]
 8010268:	3800      	subs	r0, #0
 801026a:	bf18      	it	ne
 801026c:	2001      	movne	r0, #1
 801026e:	4770      	bx	lr
 8010270:	4618      	mov	r0, r3
 8010272:	4770      	bx	lr

08010274 <rcutils_get_error_string>:
 8010274:	4b06      	ldr	r3, [pc, #24]	; (8010290 <rcutils_get_error_string+0x1c>)
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	b13b      	cbz	r3, 801028a <rcutils_get_error_string+0x16>
 801027a:	4b06      	ldr	r3, [pc, #24]	; (8010294 <rcutils_get_error_string+0x20>)
 801027c:	781a      	ldrb	r2, [r3, #0]
 801027e:	b90a      	cbnz	r2, 8010284 <rcutils_get_error_string+0x10>
 8010280:	2201      	movs	r2, #1
 8010282:	701a      	strb	r2, [r3, #0]
 8010284:	4b04      	ldr	r3, [pc, #16]	; (8010298 <rcutils_get_error_string+0x24>)
 8010286:	7818      	ldrb	r0, [r3, #0]
 8010288:	4770      	bx	lr
 801028a:	4b04      	ldr	r3, [pc, #16]	; (801029c <rcutils_get_error_string+0x28>)
 801028c:	7818      	ldrb	r0, [r3, #0]
 801028e:	4770      	bx	lr
 8010290:	20018250 	.word	0x20018250
 8010294:	20018269 	.word	0x20018269
 8010298:	20018268 	.word	0x20018268
 801029c:	0801cfa8 	.word	0x0801cfa8

080102a0 <rcutils_reset_error>:
 80102a0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80102c0 <rcutils_reset_error+0x20>
 80102a4:	4a08      	ldr	r2, [pc, #32]	; (80102c8 <rcutils_reset_error+0x28>)
 80102a6:	4809      	ldr	r0, [pc, #36]	; (80102cc <rcutils_reset_error+0x2c>)
 80102a8:	4909      	ldr	r1, [pc, #36]	; (80102d0 <rcutils_reset_error+0x30>)
 80102aa:	2300      	movs	r3, #0
 80102ac:	8013      	strh	r3, [r2, #0]
 80102ae:	ed82 7b02 	vstr	d7, [r2, #8]
 80102b2:	4a08      	ldr	r2, [pc, #32]	; (80102d4 <rcutils_reset_error+0x34>)
 80102b4:	7003      	strb	r3, [r0, #0]
 80102b6:	700b      	strb	r3, [r1, #0]
 80102b8:	7013      	strb	r3, [r2, #0]
 80102ba:	4770      	bx	lr
 80102bc:	f3af 8000 	nop.w
	...
 80102c8:	20018258 	.word	0x20018258
 80102cc:	20018269 	.word	0x20018269
 80102d0:	20018268 	.word	0x20018268
 80102d4:	20018250 	.word	0x20018250

080102d8 <rmw_get_default_publisher_options>:
 80102d8:	2200      	movs	r2, #0
 80102da:	6002      	str	r2, [r0, #0]
 80102dc:	7102      	strb	r2, [r0, #4]
 80102de:	4770      	bx	lr

080102e0 <rmw_uros_set_custom_transport>:
 80102e0:	b470      	push	{r4, r5, r6}
 80102e2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80102e6:	b162      	cbz	r2, 8010302 <rmw_uros_set_custom_transport+0x22>
 80102e8:	b15b      	cbz	r3, 8010302 <rmw_uros_set_custom_transport+0x22>
 80102ea:	b155      	cbz	r5, 8010302 <rmw_uros_set_custom_transport+0x22>
 80102ec:	b14e      	cbz	r6, 8010302 <rmw_uros_set_custom_transport+0x22>
 80102ee:	4c06      	ldr	r4, [pc, #24]	; (8010308 <rmw_uros_set_custom_transport+0x28>)
 80102f0:	7020      	strb	r0, [r4, #0]
 80102f2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80102f6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80102fa:	6166      	str	r6, [r4, #20]
 80102fc:	2000      	movs	r0, #0
 80102fe:	bc70      	pop	{r4, r5, r6}
 8010300:	4770      	bx	lr
 8010302:	200b      	movs	r0, #11
 8010304:	bc70      	pop	{r4, r5, r6}
 8010306:	4770      	bx	lr
 8010308:	2001826c 	.word	0x2001826c

0801030c <flush_session>:
 801030c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 801030e:	f004 ba6d 	b.w	80147ec <uxr_run_session_until_confirm_delivery>
 8010312:	bf00      	nop

08010314 <rmw_publish>:
 8010314:	2800      	cmp	r0, #0
 8010316:	d053      	beq.n	80103c0 <rmw_publish+0xac>
 8010318:	b570      	push	{r4, r5, r6, lr}
 801031a:	460d      	mov	r5, r1
 801031c:	b08e      	sub	sp, #56	; 0x38
 801031e:	2900      	cmp	r1, #0
 8010320:	d04b      	beq.n	80103ba <rmw_publish+0xa6>
 8010322:	4604      	mov	r4, r0
 8010324:	6800      	ldr	r0, [r0, #0]
 8010326:	f000 fc3b 	bl	8010ba0 <is_uxrce_rmw_identifier_valid>
 801032a:	2800      	cmp	r0, #0
 801032c:	d045      	beq.n	80103ba <rmw_publish+0xa6>
 801032e:	6866      	ldr	r6, [r4, #4]
 8010330:	2e00      	cmp	r6, #0
 8010332:	d042      	beq.n	80103ba <rmw_publish+0xa6>
 8010334:	69b4      	ldr	r4, [r6, #24]
 8010336:	4628      	mov	r0, r5
 8010338:	6923      	ldr	r3, [r4, #16]
 801033a:	4798      	blx	r3
 801033c:	69f3      	ldr	r3, [r6, #28]
 801033e:	9005      	str	r0, [sp, #20]
 8010340:	b113      	cbz	r3, 8010348 <rmw_publish+0x34>
 8010342:	a805      	add	r0, sp, #20
 8010344:	4798      	blx	r3
 8010346:	9805      	ldr	r0, [sp, #20]
 8010348:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801034c:	691b      	ldr	r3, [r3, #16]
 801034e:	9000      	str	r0, [sp, #0]
 8010350:	6972      	ldr	r2, [r6, #20]
 8010352:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8010354:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010358:	ab06      	add	r3, sp, #24
 801035a:	f005 f833 	bl	80153c4 <uxr_prepare_output_stream>
 801035e:	b1d8      	cbz	r0, 8010398 <rmw_publish+0x84>
 8010360:	68a3      	ldr	r3, [r4, #8]
 8010362:	a906      	add	r1, sp, #24
 8010364:	4628      	mov	r0, r5
 8010366:	4798      	blx	r3
 8010368:	6a33      	ldr	r3, [r6, #32]
 801036a:	4604      	mov	r4, r0
 801036c:	b10b      	cbz	r3, 8010372 <rmw_publish+0x5e>
 801036e:	a806      	add	r0, sp, #24
 8010370:	4798      	blx	r3
 8010372:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8010376:	2b01      	cmp	r3, #1
 8010378:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801037c:	d022      	beq.n	80103c4 <rmw_publish+0xb0>
 801037e:	6918      	ldr	r0, [r3, #16]
 8010380:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8010382:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010386:	f004 fa31 	bl	80147ec <uxr_run_session_until_confirm_delivery>
 801038a:	4020      	ands	r0, r4
 801038c:	b2c4      	uxtb	r4, r0
 801038e:	f084 0001 	eor.w	r0, r4, #1
 8010392:	b2c0      	uxtb	r0, r0
 8010394:	b00e      	add	sp, #56	; 0x38
 8010396:	bd70      	pop	{r4, r5, r6, pc}
 8010398:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801039c:	6918      	ldr	r0, [r3, #16]
 801039e:	9b05      	ldr	r3, [sp, #20]
 80103a0:	9300      	str	r3, [sp, #0]
 80103a2:	4b0b      	ldr	r3, [pc, #44]	; (80103d0 <rmw_publish+0xbc>)
 80103a4:	9301      	str	r3, [sp, #4]
 80103a6:	9602      	str	r6, [sp, #8]
 80103a8:	6972      	ldr	r2, [r6, #20]
 80103aa:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80103ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80103b0:	ab06      	add	r3, sp, #24
 80103b2:	f005 f837 	bl	8015424 <uxr_prepare_output_stream_fragmented>
 80103b6:	2800      	cmp	r0, #0
 80103b8:	d1d2      	bne.n	8010360 <rmw_publish+0x4c>
 80103ba:	2001      	movs	r0, #1
 80103bc:	b00e      	add	sp, #56	; 0x38
 80103be:	bd70      	pop	{r4, r5, r6, pc}
 80103c0:	2001      	movs	r0, #1
 80103c2:	4770      	bx	lr
 80103c4:	6918      	ldr	r0, [r3, #16]
 80103c6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80103ca:	f003 fe89 	bl	80140e0 <uxr_flash_output_streams>
 80103ce:	e7de      	b.n	801038e <rmw_publish+0x7a>
 80103d0:	0801030d 	.word	0x0801030d

080103d4 <rmw_create_publisher>:
 80103d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d8:	b087      	sub	sp, #28
 80103da:	2800      	cmp	r0, #0
 80103dc:	f000 80cf 	beq.w	801057e <rmw_create_publisher+0x1aa>
 80103e0:	460e      	mov	r6, r1
 80103e2:	2900      	cmp	r1, #0
 80103e4:	f000 80cb 	beq.w	801057e <rmw_create_publisher+0x1aa>
 80103e8:	4604      	mov	r4, r0
 80103ea:	6800      	ldr	r0, [r0, #0]
 80103ec:	4615      	mov	r5, r2
 80103ee:	4698      	mov	r8, r3
 80103f0:	f000 fbd6 	bl	8010ba0 <is_uxrce_rmw_identifier_valid>
 80103f4:	2800      	cmp	r0, #0
 80103f6:	f000 80c2 	beq.w	801057e <rmw_create_publisher+0x1aa>
 80103fa:	2d00      	cmp	r5, #0
 80103fc:	f000 80bf 	beq.w	801057e <rmw_create_publisher+0x1aa>
 8010400:	782b      	ldrb	r3, [r5, #0]
 8010402:	2b00      	cmp	r3, #0
 8010404:	f000 80bb 	beq.w	801057e <rmw_create_publisher+0x1aa>
 8010408:	f1b8 0f00 	cmp.w	r8, #0
 801040c:	f000 80b7 	beq.w	801057e <rmw_create_publisher+0x1aa>
 8010410:	485d      	ldr	r0, [pc, #372]	; (8010588 <rmw_create_publisher+0x1b4>)
 8010412:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010416:	f007 fbcb 	bl	8017bb0 <get_memory>
 801041a:	2800      	cmp	r0, #0
 801041c:	f000 80af 	beq.w	801057e <rmw_create_publisher+0x1aa>
 8010420:	6884      	ldr	r4, [r0, #8]
 8010422:	2300      	movs	r3, #0
 8010424:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8010428:	f007 fbe6 	bl	8017bf8 <rmw_get_implementation_identifier>
 801042c:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8010430:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8010434:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8010438:	4628      	mov	r0, r5
 801043a:	f7ef fed3 	bl	80001e4 <strlen>
 801043e:	3001      	adds	r0, #1
 8010440:	283c      	cmp	r0, #60	; 0x3c
 8010442:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8010446:	f200 8097 	bhi.w	8010578 <rmw_create_publisher+0x1a4>
 801044a:	4a50      	ldr	r2, [pc, #320]	; (801058c <rmw_create_publisher+0x1b8>)
 801044c:	462b      	mov	r3, r5
 801044e:	213c      	movs	r1, #60	; 0x3c
 8010450:	4650      	mov	r0, sl
 8010452:	f00b fa93 	bl	801b97c <sniprintf>
 8010456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801045a:	67e3      	str	r3, [r4, #124]	; 0x7c
 801045c:	4641      	mov	r1, r8
 801045e:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8010462:	2250      	movs	r2, #80	; 0x50
 8010464:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8010468:	f00b f876 	bl	801b558 <memcpy>
 801046c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8010470:	4947      	ldr	r1, [pc, #284]	; (8010590 <rmw_create_publisher+0x1bc>)
 8010472:	2b02      	cmp	r3, #2
 8010474:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010478:	bf0c      	ite	eq
 801047a:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 801047e:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8010482:	67a3      	str	r3, [r4, #120]	; 0x78
 8010484:	2300      	movs	r3, #0
 8010486:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801048a:	4630      	mov	r0, r6
 801048c:	f000 fb96 	bl	8010bbc <get_message_typesupport_handle>
 8010490:	2800      	cmp	r0, #0
 8010492:	d071      	beq.n	8010578 <rmw_create_publisher+0x1a4>
 8010494:	6842      	ldr	r2, [r0, #4]
 8010496:	61a2      	str	r2, [r4, #24]
 8010498:	2a00      	cmp	r2, #0
 801049a:	d06d      	beq.n	8010578 <rmw_create_publisher+0x1a4>
 801049c:	4629      	mov	r1, r5
 801049e:	4643      	mov	r3, r8
 80104a0:	4648      	mov	r0, r9
 80104a2:	f007 fe0f 	bl	80180c4 <create_topic>
 80104a6:	6260      	str	r0, [r4, #36]	; 0x24
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d065      	beq.n	8010578 <rmw_create_publisher+0x1a4>
 80104ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80104b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104b4:	2103      	movs	r1, #3
 80104b6:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 80104ba:	1c42      	adds	r2, r0, #1
 80104bc:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 80104c0:	f003 fcc0 	bl	8013e44 <uxr_object_id>
 80104c4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80104c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80104cc:	6120      	str	r0, [r4, #16]
 80104ce:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80104d2:	6910      	ldr	r0, [r2, #16]
 80104d4:	2506      	movs	r5, #6
 80104d6:	9500      	str	r5, [sp, #0]
 80104d8:	6819      	ldr	r1, [r3, #0]
 80104da:	6922      	ldr	r2, [r4, #16]
 80104dc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80104e0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80104e4:	f003 fc08 	bl	8013cf8 <uxr_buffer_create_publisher_bin>
 80104e8:	4602      	mov	r2, r0
 80104ea:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80104ee:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80104f2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80104f6:	f000 fad3 	bl	8010aa0 <run_xrce_session>
 80104fa:	b3c8      	cbz	r0, 8010570 <rmw_create_publisher+0x19c>
 80104fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010500:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8010504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010508:	2105      	movs	r1, #5
 801050a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 801050e:	1c42      	adds	r2, r0, #1
 8010510:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8010514:	f003 fc96 	bl	8013e44 <uxr_object_id>
 8010518:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801051c:	6160      	str	r0, [r4, #20]
 801051e:	691e      	ldr	r6, [r3, #16]
 8010520:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010524:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8010528:	f10d 0a10 	add.w	sl, sp, #16
 801052c:	4641      	mov	r1, r8
 801052e:	4650      	mov	r0, sl
 8010530:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 8010534:	f000 fad0 	bl	8010ad8 <convert_qos_profile>
 8010538:	9503      	str	r5, [sp, #12]
 801053a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801053e:	9001      	str	r0, [sp, #4]
 8010540:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010544:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010548:	9300      	str	r3, [sp, #0]
 801054a:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 801054e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010552:	f8d8 1000 	ldr.w	r1, [r8]
 8010556:	4630      	mov	r0, r6
 8010558:	f003 fbfe 	bl	8013d58 <uxr_buffer_create_datawriter_bin>
 801055c:	4602      	mov	r2, r0
 801055e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010562:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010566:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801056a:	f000 fa99 	bl	8010aa0 <run_xrce_session>
 801056e:	b938      	cbnz	r0, 8010580 <rmw_create_publisher+0x1ac>
 8010570:	4805      	ldr	r0, [pc, #20]	; (8010588 <rmw_create_publisher+0x1b4>)
 8010572:	4621      	mov	r1, r4
 8010574:	f007 fb2c 	bl	8017bd0 <put_memory>
 8010578:	4638      	mov	r0, r7
 801057a:	f000 f9dd 	bl	8010938 <rmw_uxrce_fini_publisher_memory>
 801057e:	2700      	movs	r7, #0
 8010580:	4638      	mov	r0, r7
 8010582:	b007      	add	sp, #28
 8010584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010588:	2001cb64 	.word	0x2001cb64
 801058c:	0801cdb0 	.word	0x0801cdb0
 8010590:	0801cd7c 	.word	0x0801cd7c

08010594 <rmw_publisher_get_actual_qos>:
 8010594:	2000      	movs	r0, #0
 8010596:	4770      	bx	lr

08010598 <rmw_destroy_publisher>:
 8010598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801059a:	b128      	cbz	r0, 80105a8 <rmw_destroy_publisher+0x10>
 801059c:	4604      	mov	r4, r0
 801059e:	6800      	ldr	r0, [r0, #0]
 80105a0:	460d      	mov	r5, r1
 80105a2:	f000 fafd 	bl	8010ba0 <is_uxrce_rmw_identifier_valid>
 80105a6:	b910      	cbnz	r0, 80105ae <rmw_destroy_publisher+0x16>
 80105a8:	2401      	movs	r4, #1
 80105aa:	4620      	mov	r0, r4
 80105ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105ae:	6863      	ldr	r3, [r4, #4]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d0f9      	beq.n	80105a8 <rmw_destroy_publisher+0x10>
 80105b4:	2d00      	cmp	r5, #0
 80105b6:	d0f7      	beq.n	80105a8 <rmw_destroy_publisher+0x10>
 80105b8:	6828      	ldr	r0, [r5, #0]
 80105ba:	f000 faf1 	bl	8010ba0 <is_uxrce_rmw_identifier_valid>
 80105be:	2800      	cmp	r0, #0
 80105c0:	d0f2      	beq.n	80105a8 <rmw_destroy_publisher+0x10>
 80105c2:	686c      	ldr	r4, [r5, #4]
 80105c4:	2c00      	cmp	r4, #0
 80105c6:	d0ef      	beq.n	80105a8 <rmw_destroy_publisher+0x10>
 80105c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80105ca:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 80105ce:	f007 fddd 	bl	801818c <destroy_topic>
 80105d2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80105d6:	6962      	ldr	r2, [r4, #20]
 80105d8:	6918      	ldr	r0, [r3, #16]
 80105da:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80105de:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80105e2:	6819      	ldr	r1, [r3, #0]
 80105e4:	f003 fad4 	bl	8013b90 <uxr_buffer_delete_entity>
 80105e8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80105ec:	6922      	ldr	r2, [r4, #16]
 80105ee:	691b      	ldr	r3, [r3, #16]
 80105f0:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 80105f4:	4604      	mov	r4, r0
 80105f6:	6809      	ldr	r1, [r1, #0]
 80105f8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80105fc:	f003 fac8 	bl	8013b90 <uxr_buffer_delete_entity>
 8010600:	693e      	ldr	r6, [r7, #16]
 8010602:	4622      	mov	r2, r4
 8010604:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8010608:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 801060c:	4604      	mov	r4, r0
 801060e:	4630      	mov	r0, r6
 8010610:	f000 fa46 	bl	8010aa0 <run_xrce_session>
 8010614:	693e      	ldr	r6, [r7, #16]
 8010616:	4622      	mov	r2, r4
 8010618:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 801061c:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8010620:	4604      	mov	r4, r0
 8010622:	4630      	mov	r0, r6
 8010624:	f000 fa3c 	bl	8010aa0 <run_xrce_session>
 8010628:	b12c      	cbz	r4, 8010636 <rmw_destroy_publisher+0x9e>
 801062a:	b120      	cbz	r0, 8010636 <rmw_destroy_publisher+0x9e>
 801062c:	2400      	movs	r4, #0
 801062e:	4628      	mov	r0, r5
 8010630:	f000 f982 	bl	8010938 <rmw_uxrce_fini_publisher_memory>
 8010634:	e7b9      	b.n	80105aa <rmw_destroy_publisher+0x12>
 8010636:	2402      	movs	r4, #2
 8010638:	e7f9      	b.n	801062e <rmw_destroy_publisher+0x96>
 801063a:	bf00      	nop

0801063c <rmw_uxrce_init_service_memory>:
 801063c:	b1e2      	cbz	r2, 8010678 <rmw_uxrce_init_service_memory+0x3c>
 801063e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010642:	7b05      	ldrb	r5, [r0, #12]
 8010644:	4606      	mov	r6, r0
 8010646:	b9ad      	cbnz	r5, 8010674 <rmw_uxrce_init_service_memory+0x38>
 8010648:	23c8      	movs	r3, #200	; 0xc8
 801064a:	e9c0 5500 	strd	r5, r5, [r0]
 801064e:	6083      	str	r3, [r0, #8]
 8010650:	f240 1301 	movw	r3, #257	; 0x101
 8010654:	4617      	mov	r7, r2
 8010656:	8183      	strh	r3, [r0, #12]
 8010658:	460c      	mov	r4, r1
 801065a:	46a8      	mov	r8, r5
 801065c:	4621      	mov	r1, r4
 801065e:	4630      	mov	r0, r6
 8010660:	3501      	adds	r5, #1
 8010662:	f007 fab5 	bl	8017bd0 <put_memory>
 8010666:	42af      	cmp	r7, r5
 8010668:	60a4      	str	r4, [r4, #8]
 801066a:	f884 800c 	strb.w	r8, [r4, #12]
 801066e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8010672:	d1f3      	bne.n	801065c <rmw_uxrce_init_service_memory+0x20>
 8010674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop

0801067c <rmw_uxrce_init_client_memory>:
 801067c:	b1e2      	cbz	r2, 80106b8 <rmw_uxrce_init_client_memory+0x3c>
 801067e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010682:	7b05      	ldrb	r5, [r0, #12]
 8010684:	4606      	mov	r6, r0
 8010686:	b9ad      	cbnz	r5, 80106b4 <rmw_uxrce_init_client_memory+0x38>
 8010688:	23c8      	movs	r3, #200	; 0xc8
 801068a:	e9c0 5500 	strd	r5, r5, [r0]
 801068e:	6083      	str	r3, [r0, #8]
 8010690:	f240 1301 	movw	r3, #257	; 0x101
 8010694:	4617      	mov	r7, r2
 8010696:	8183      	strh	r3, [r0, #12]
 8010698:	460c      	mov	r4, r1
 801069a:	46a8      	mov	r8, r5
 801069c:	4621      	mov	r1, r4
 801069e:	4630      	mov	r0, r6
 80106a0:	3501      	adds	r5, #1
 80106a2:	f007 fa95 	bl	8017bd0 <put_memory>
 80106a6:	42af      	cmp	r7, r5
 80106a8:	60a4      	str	r4, [r4, #8]
 80106aa:	f884 800c 	strb.w	r8, [r4, #12]
 80106ae:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80106b2:	d1f3      	bne.n	801069c <rmw_uxrce_init_client_memory+0x20>
 80106b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106b8:	4770      	bx	lr
 80106ba:	bf00      	nop

080106bc <rmw_uxrce_init_publisher_memory>:
 80106bc:	b1e2      	cbz	r2, 80106f8 <rmw_uxrce_init_publisher_memory+0x3c>
 80106be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c2:	7b05      	ldrb	r5, [r0, #12]
 80106c4:	4606      	mov	r6, r0
 80106c6:	b9ad      	cbnz	r5, 80106f4 <rmw_uxrce_init_publisher_memory+0x38>
 80106c8:	23d8      	movs	r3, #216	; 0xd8
 80106ca:	e9c0 5500 	strd	r5, r5, [r0]
 80106ce:	6083      	str	r3, [r0, #8]
 80106d0:	f240 1301 	movw	r3, #257	; 0x101
 80106d4:	4617      	mov	r7, r2
 80106d6:	8183      	strh	r3, [r0, #12]
 80106d8:	460c      	mov	r4, r1
 80106da:	46a8      	mov	r8, r5
 80106dc:	4621      	mov	r1, r4
 80106de:	4630      	mov	r0, r6
 80106e0:	3501      	adds	r5, #1
 80106e2:	f007 fa75 	bl	8017bd0 <put_memory>
 80106e6:	42af      	cmp	r7, r5
 80106e8:	60a4      	str	r4, [r4, #8]
 80106ea:	f884 800c 	strb.w	r8, [r4, #12]
 80106ee:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80106f2:	d1f3      	bne.n	80106dc <rmw_uxrce_init_publisher_memory+0x20>
 80106f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106f8:	4770      	bx	lr
 80106fa:	bf00      	nop

080106fc <rmw_uxrce_init_subscription_memory>:
 80106fc:	b1e2      	cbz	r2, 8010738 <rmw_uxrce_init_subscription_memory+0x3c>
 80106fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010702:	7b05      	ldrb	r5, [r0, #12]
 8010704:	4606      	mov	r6, r0
 8010706:	b9ad      	cbnz	r5, 8010734 <rmw_uxrce_init_subscription_memory+0x38>
 8010708:	23d8      	movs	r3, #216	; 0xd8
 801070a:	e9c0 5500 	strd	r5, r5, [r0]
 801070e:	6083      	str	r3, [r0, #8]
 8010710:	f240 1301 	movw	r3, #257	; 0x101
 8010714:	4617      	mov	r7, r2
 8010716:	8183      	strh	r3, [r0, #12]
 8010718:	460c      	mov	r4, r1
 801071a:	46a8      	mov	r8, r5
 801071c:	4621      	mov	r1, r4
 801071e:	4630      	mov	r0, r6
 8010720:	3501      	adds	r5, #1
 8010722:	f007 fa55 	bl	8017bd0 <put_memory>
 8010726:	42af      	cmp	r7, r5
 8010728:	60a4      	str	r4, [r4, #8]
 801072a:	f884 800c 	strb.w	r8, [r4, #12]
 801072e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8010732:	d1f3      	bne.n	801071c <rmw_uxrce_init_subscription_memory+0x20>
 8010734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010738:	4770      	bx	lr
 801073a:	bf00      	nop

0801073c <rmw_uxrce_init_node_memory>:
 801073c:	b1e2      	cbz	r2, 8010778 <rmw_uxrce_init_node_memory+0x3c>
 801073e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010742:	7b05      	ldrb	r5, [r0, #12]
 8010744:	4606      	mov	r6, r0
 8010746:	b9ad      	cbnz	r5, 8010774 <rmw_uxrce_init_node_memory+0x38>
 8010748:	23a4      	movs	r3, #164	; 0xa4
 801074a:	e9c0 5500 	strd	r5, r5, [r0]
 801074e:	6083      	str	r3, [r0, #8]
 8010750:	f240 1301 	movw	r3, #257	; 0x101
 8010754:	4617      	mov	r7, r2
 8010756:	8183      	strh	r3, [r0, #12]
 8010758:	460c      	mov	r4, r1
 801075a:	46a8      	mov	r8, r5
 801075c:	4621      	mov	r1, r4
 801075e:	4630      	mov	r0, r6
 8010760:	3501      	adds	r5, #1
 8010762:	f007 fa35 	bl	8017bd0 <put_memory>
 8010766:	42af      	cmp	r7, r5
 8010768:	60a4      	str	r4, [r4, #8]
 801076a:	f884 800c 	strb.w	r8, [r4, #12]
 801076e:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8010772:	d1f3      	bne.n	801075c <rmw_uxrce_init_node_memory+0x20>
 8010774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop

0801077c <rmw_uxrce_init_session_memory>:
 801077c:	b1ea      	cbz	r2, 80107ba <rmw_uxrce_init_session_memory+0x3e>
 801077e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010782:	7b05      	ldrb	r5, [r0, #12]
 8010784:	4606      	mov	r6, r0
 8010786:	b9b5      	cbnz	r5, 80107b6 <rmw_uxrce_init_session_memory+0x3a>
 8010788:	e9c0 5500 	strd	r5, r5, [r0]
 801078c:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8010790:	f240 1301 	movw	r3, #257	; 0x101
 8010794:	4617      	mov	r7, r2
 8010796:	f8c0 8008 	str.w	r8, [r0, #8]
 801079a:	460c      	mov	r4, r1
 801079c:	8183      	strh	r3, [r0, #12]
 801079e:	46a9      	mov	r9, r5
 80107a0:	4621      	mov	r1, r4
 80107a2:	4630      	mov	r0, r6
 80107a4:	3501      	adds	r5, #1
 80107a6:	f007 fa13 	bl	8017bd0 <put_memory>
 80107aa:	42af      	cmp	r7, r5
 80107ac:	60a4      	str	r4, [r4, #8]
 80107ae:	f884 900c 	strb.w	r9, [r4, #12]
 80107b2:	4444      	add	r4, r8
 80107b4:	d1f4      	bne.n	80107a0 <rmw_uxrce_init_session_memory+0x24>
 80107b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107ba:	4770      	bx	lr

080107bc <rmw_uxrce_init_topic_memory>:
 80107bc:	b1e2      	cbz	r2, 80107f8 <rmw_uxrce_init_topic_memory+0x3c>
 80107be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107c2:	7b05      	ldrb	r5, [r0, #12]
 80107c4:	4606      	mov	r6, r0
 80107c6:	b9ad      	cbnz	r5, 80107f4 <rmw_uxrce_init_topic_memory+0x38>
 80107c8:	231c      	movs	r3, #28
 80107ca:	e9c0 5500 	strd	r5, r5, [r0]
 80107ce:	6083      	str	r3, [r0, #8]
 80107d0:	f240 1301 	movw	r3, #257	; 0x101
 80107d4:	4617      	mov	r7, r2
 80107d6:	8183      	strh	r3, [r0, #12]
 80107d8:	460c      	mov	r4, r1
 80107da:	46a8      	mov	r8, r5
 80107dc:	4621      	mov	r1, r4
 80107de:	4630      	mov	r0, r6
 80107e0:	3501      	adds	r5, #1
 80107e2:	f007 f9f5 	bl	8017bd0 <put_memory>
 80107e6:	42af      	cmp	r7, r5
 80107e8:	60a4      	str	r4, [r4, #8]
 80107ea:	f884 800c 	strb.w	r8, [r4, #12]
 80107ee:	f104 041c 	add.w	r4, r4, #28
 80107f2:	d1f3      	bne.n	80107dc <rmw_uxrce_init_topic_memory+0x20>
 80107f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107f8:	4770      	bx	lr
 80107fa:	bf00      	nop

080107fc <rmw_uxrce_init_static_input_buffer_memory>:
 80107fc:	b1ea      	cbz	r2, 801083a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80107fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010802:	7b05      	ldrb	r5, [r0, #12]
 8010804:	4606      	mov	r6, r0
 8010806:	b9b5      	cbnz	r5, 8010836 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8010808:	f44f 6304 	mov.w	r3, #2112	; 0x840
 801080c:	e9c0 5500 	strd	r5, r5, [r0]
 8010810:	6083      	str	r3, [r0, #8]
 8010812:	f240 1301 	movw	r3, #257	; 0x101
 8010816:	4617      	mov	r7, r2
 8010818:	8183      	strh	r3, [r0, #12]
 801081a:	460c      	mov	r4, r1
 801081c:	46a8      	mov	r8, r5
 801081e:	4621      	mov	r1, r4
 8010820:	4630      	mov	r0, r6
 8010822:	3501      	adds	r5, #1
 8010824:	f007 f9d4 	bl	8017bd0 <put_memory>
 8010828:	42af      	cmp	r7, r5
 801082a:	60a4      	str	r4, [r4, #8]
 801082c:	f884 800c 	strb.w	r8, [r4, #12]
 8010830:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8010834:	d1f3      	bne.n	801081e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801083a:	4770      	bx	lr

0801083c <rmw_uxrce_init_init_options_impl_memory>:
 801083c:	b1e2      	cbz	r2, 8010878 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801083e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010842:	7b05      	ldrb	r5, [r0, #12]
 8010844:	4606      	mov	r6, r0
 8010846:	b9ad      	cbnz	r5, 8010874 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010848:	232c      	movs	r3, #44	; 0x2c
 801084a:	e9c0 5500 	strd	r5, r5, [r0]
 801084e:	6083      	str	r3, [r0, #8]
 8010850:	f240 1301 	movw	r3, #257	; 0x101
 8010854:	4617      	mov	r7, r2
 8010856:	8183      	strh	r3, [r0, #12]
 8010858:	460c      	mov	r4, r1
 801085a:	46a8      	mov	r8, r5
 801085c:	4621      	mov	r1, r4
 801085e:	4630      	mov	r0, r6
 8010860:	3501      	adds	r5, #1
 8010862:	f007 f9b5 	bl	8017bd0 <put_memory>
 8010866:	42af      	cmp	r7, r5
 8010868:	60a4      	str	r4, [r4, #8]
 801086a:	f884 800c 	strb.w	r8, [r4, #12]
 801086e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8010872:	d1f3      	bne.n	801085c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8010874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010878:	4770      	bx	lr
 801087a:	bf00      	nop

0801087c <rmw_uxrce_init_wait_set_memory>:
 801087c:	b1e2      	cbz	r2, 80108b8 <rmw_uxrce_init_wait_set_memory+0x3c>
 801087e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010882:	7b05      	ldrb	r5, [r0, #12]
 8010884:	4606      	mov	r6, r0
 8010886:	b9ad      	cbnz	r5, 80108b4 <rmw_uxrce_init_wait_set_memory+0x38>
 8010888:	231c      	movs	r3, #28
 801088a:	e9c0 5500 	strd	r5, r5, [r0]
 801088e:	6083      	str	r3, [r0, #8]
 8010890:	f240 1301 	movw	r3, #257	; 0x101
 8010894:	4617      	mov	r7, r2
 8010896:	8183      	strh	r3, [r0, #12]
 8010898:	460c      	mov	r4, r1
 801089a:	46a8      	mov	r8, r5
 801089c:	4621      	mov	r1, r4
 801089e:	4630      	mov	r0, r6
 80108a0:	3501      	adds	r5, #1
 80108a2:	f007 f995 	bl	8017bd0 <put_memory>
 80108a6:	42af      	cmp	r7, r5
 80108a8:	60a4      	str	r4, [r4, #8]
 80108aa:	f884 800c 	strb.w	r8, [r4, #12]
 80108ae:	f104 041c 	add.w	r4, r4, #28
 80108b2:	d1f3      	bne.n	801089c <rmw_uxrce_init_wait_set_memory+0x20>
 80108b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop

080108bc <rmw_uxrce_init_guard_condition_memory>:
 80108bc:	b1e2      	cbz	r2, 80108f8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80108be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c2:	7b05      	ldrb	r5, [r0, #12]
 80108c4:	4606      	mov	r6, r0
 80108c6:	b9ad      	cbnz	r5, 80108f4 <rmw_uxrce_init_guard_condition_memory+0x38>
 80108c8:	2320      	movs	r3, #32
 80108ca:	e9c0 5500 	strd	r5, r5, [r0]
 80108ce:	6083      	str	r3, [r0, #8]
 80108d0:	f240 1301 	movw	r3, #257	; 0x101
 80108d4:	4617      	mov	r7, r2
 80108d6:	8183      	strh	r3, [r0, #12]
 80108d8:	460c      	mov	r4, r1
 80108da:	46a8      	mov	r8, r5
 80108dc:	4621      	mov	r1, r4
 80108de:	4630      	mov	r0, r6
 80108e0:	3501      	adds	r5, #1
 80108e2:	f007 f975 	bl	8017bd0 <put_memory>
 80108e6:	42af      	cmp	r7, r5
 80108e8:	60a4      	str	r4, [r4, #8]
 80108ea:	f884 800c 	strb.w	r8, [r4, #12]
 80108ee:	f104 0420 	add.w	r4, r4, #32
 80108f2:	d1f3      	bne.n	80108dc <rmw_uxrce_init_guard_condition_memory+0x20>
 80108f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108f8:	4770      	bx	lr
 80108fa:	bf00      	nop

080108fc <rmw_uxrce_fini_session_memory>:
 80108fc:	4601      	mov	r1, r0
 80108fe:	4801      	ldr	r0, [pc, #4]	; (8010904 <rmw_uxrce_fini_session_memory+0x8>)
 8010900:	f007 b966 	b.w	8017bd0 <put_memory>
 8010904:	2001cb84 	.word	0x2001cb84

08010908 <rmw_uxrce_fini_node_memory>:
 8010908:	b538      	push	{r3, r4, r5, lr}
 801090a:	4604      	mov	r4, r0
 801090c:	6800      	ldr	r0, [r0, #0]
 801090e:	b128      	cbz	r0, 801091c <rmw_uxrce_fini_node_memory+0x14>
 8010910:	4b07      	ldr	r3, [pc, #28]	; (8010930 <rmw_uxrce_fini_node_memory+0x28>)
 8010912:	6819      	ldr	r1, [r3, #0]
 8010914:	f7ef fc5c 	bl	80001d0 <strcmp>
 8010918:	b940      	cbnz	r0, 801092c <rmw_uxrce_fini_node_memory+0x24>
 801091a:	6020      	str	r0, [r4, #0]
 801091c:	6861      	ldr	r1, [r4, #4]
 801091e:	b129      	cbz	r1, 801092c <rmw_uxrce_fini_node_memory+0x24>
 8010920:	2500      	movs	r5, #0
 8010922:	4804      	ldr	r0, [pc, #16]	; (8010934 <rmw_uxrce_fini_node_memory+0x2c>)
 8010924:	610d      	str	r5, [r1, #16]
 8010926:	f007 f953 	bl	8017bd0 <put_memory>
 801092a:	6065      	str	r5, [r4, #4]
 801092c:	bd38      	pop	{r3, r4, r5, pc}
 801092e:	bf00      	nop
 8010930:	0801dacc 	.word	0x0801dacc
 8010934:	2001cb54 	.word	0x2001cb54

08010938 <rmw_uxrce_fini_publisher_memory>:
 8010938:	b510      	push	{r4, lr}
 801093a:	4604      	mov	r4, r0
 801093c:	6800      	ldr	r0, [r0, #0]
 801093e:	b128      	cbz	r0, 801094c <rmw_uxrce_fini_publisher_memory+0x14>
 8010940:	4b06      	ldr	r3, [pc, #24]	; (801095c <rmw_uxrce_fini_publisher_memory+0x24>)
 8010942:	6819      	ldr	r1, [r3, #0]
 8010944:	f7ef fc44 	bl	80001d0 <strcmp>
 8010948:	b938      	cbnz	r0, 801095a <rmw_uxrce_fini_publisher_memory+0x22>
 801094a:	6020      	str	r0, [r4, #0]
 801094c:	6861      	ldr	r1, [r4, #4]
 801094e:	b121      	cbz	r1, 801095a <rmw_uxrce_fini_publisher_memory+0x22>
 8010950:	4803      	ldr	r0, [pc, #12]	; (8010960 <rmw_uxrce_fini_publisher_memory+0x28>)
 8010952:	f007 f93d 	bl	8017bd0 <put_memory>
 8010956:	2300      	movs	r3, #0
 8010958:	6063      	str	r3, [r4, #4]
 801095a:	bd10      	pop	{r4, pc}
 801095c:	0801dacc 	.word	0x0801dacc
 8010960:	2001cb64 	.word	0x2001cb64

08010964 <rmw_uxrce_fini_subscription_memory>:
 8010964:	b510      	push	{r4, lr}
 8010966:	4604      	mov	r4, r0
 8010968:	6800      	ldr	r0, [r0, #0]
 801096a:	b128      	cbz	r0, 8010978 <rmw_uxrce_fini_subscription_memory+0x14>
 801096c:	4b06      	ldr	r3, [pc, #24]	; (8010988 <rmw_uxrce_fini_subscription_memory+0x24>)
 801096e:	6819      	ldr	r1, [r3, #0]
 8010970:	f7ef fc2e 	bl	80001d0 <strcmp>
 8010974:	b938      	cbnz	r0, 8010986 <rmw_uxrce_fini_subscription_memory+0x22>
 8010976:	6020      	str	r0, [r4, #0]
 8010978:	6861      	ldr	r1, [r4, #4]
 801097a:	b121      	cbz	r1, 8010986 <rmw_uxrce_fini_subscription_memory+0x22>
 801097c:	4803      	ldr	r0, [pc, #12]	; (801098c <rmw_uxrce_fini_subscription_memory+0x28>)
 801097e:	f007 f927 	bl	8017bd0 <put_memory>
 8010982:	2300      	movs	r3, #0
 8010984:	6063      	str	r3, [r4, #4]
 8010986:	bd10      	pop	{r4, pc}
 8010988:	0801dacc 	.word	0x0801dacc
 801098c:	2001cba4 	.word	0x2001cba4

08010990 <rmw_uxrce_fini_service_memory>:
 8010990:	b510      	push	{r4, lr}
 8010992:	4604      	mov	r4, r0
 8010994:	6800      	ldr	r0, [r0, #0]
 8010996:	b128      	cbz	r0, 80109a4 <rmw_uxrce_fini_service_memory+0x14>
 8010998:	4b06      	ldr	r3, [pc, #24]	; (80109b4 <rmw_uxrce_fini_service_memory+0x24>)
 801099a:	6819      	ldr	r1, [r3, #0]
 801099c:	f7ef fc18 	bl	80001d0 <strcmp>
 80109a0:	b938      	cbnz	r0, 80109b2 <rmw_uxrce_fini_service_memory+0x22>
 80109a2:	6020      	str	r0, [r4, #0]
 80109a4:	6861      	ldr	r1, [r4, #4]
 80109a6:	b121      	cbz	r1, 80109b2 <rmw_uxrce_fini_service_memory+0x22>
 80109a8:	4803      	ldr	r0, [pc, #12]	; (80109b8 <rmw_uxrce_fini_service_memory+0x28>)
 80109aa:	f007 f911 	bl	8017bd0 <put_memory>
 80109ae:	2300      	movs	r3, #0
 80109b0:	6063      	str	r3, [r4, #4]
 80109b2:	bd10      	pop	{r4, pc}
 80109b4:	0801dacc 	.word	0x0801dacc
 80109b8:	2001cb74 	.word	0x2001cb74

080109bc <rmw_uxrce_fini_client_memory>:
 80109bc:	b510      	push	{r4, lr}
 80109be:	4604      	mov	r4, r0
 80109c0:	6800      	ldr	r0, [r0, #0]
 80109c2:	b128      	cbz	r0, 80109d0 <rmw_uxrce_fini_client_memory+0x14>
 80109c4:	4b06      	ldr	r3, [pc, #24]	; (80109e0 <rmw_uxrce_fini_client_memory+0x24>)
 80109c6:	6819      	ldr	r1, [r3, #0]
 80109c8:	f7ef fc02 	bl	80001d0 <strcmp>
 80109cc:	b938      	cbnz	r0, 80109de <rmw_uxrce_fini_client_memory+0x22>
 80109ce:	6020      	str	r0, [r4, #0]
 80109d0:	6861      	ldr	r1, [r4, #4]
 80109d2:	b121      	cbz	r1, 80109de <rmw_uxrce_fini_client_memory+0x22>
 80109d4:	4803      	ldr	r0, [pc, #12]	; (80109e4 <rmw_uxrce_fini_client_memory+0x28>)
 80109d6:	f007 f8fb 	bl	8017bd0 <put_memory>
 80109da:	2300      	movs	r3, #0
 80109dc:	6063      	str	r3, [r4, #4]
 80109de:	bd10      	pop	{r4, pc}
 80109e0:	0801dacc 	.word	0x0801dacc
 80109e4:	20018288 	.word	0x20018288

080109e8 <rmw_uxrce_fini_topic_memory>:
 80109e8:	b510      	push	{r4, lr}
 80109ea:	4604      	mov	r4, r0
 80109ec:	4621      	mov	r1, r4
 80109ee:	4803      	ldr	r0, [pc, #12]	; (80109fc <rmw_uxrce_fini_topic_memory+0x14>)
 80109f0:	f007 f8ee 	bl	8017bd0 <put_memory>
 80109f4:	2300      	movs	r3, #0
 80109f6:	61a3      	str	r3, [r4, #24]
 80109f8:	bd10      	pop	{r4, pc}
 80109fa:	bf00      	nop
 80109fc:	2001cbb4 	.word	0x2001cbb4

08010a00 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010a00:	b082      	sub	sp, #8
 8010a02:	b530      	push	{r4, r5, lr}
 8010a04:	4925      	ldr	r1, [pc, #148]	; (8010a9c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8010a06:	680d      	ldr	r5, [r1, #0]
 8010a08:	ac03      	add	r4, sp, #12
 8010a0a:	e884 000c 	stmia.w	r4, {r2, r3}
 8010a0e:	461c      	mov	r4, r3
 8010a10:	2d00      	cmp	r5, #0
 8010a12:	d041      	beq.n	8010a98 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8010a14:	462b      	mov	r3, r5
 8010a16:	2100      	movs	r1, #0
 8010a18:	689a      	ldr	r2, [r3, #8]
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8010a20:	4290      	cmp	r0, r2
 8010a22:	bf08      	it	eq
 8010a24:	3101      	addeq	r1, #1
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d1f6      	bne.n	8010a18 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010a2a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010a2e:	2b02      	cmp	r3, #2
 8010a30:	d029      	beq.n	8010a86 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010a32:	d907      	bls.n	8010a44 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010a34:	2b03      	cmp	r3, #3
 8010a36:	d005      	beq.n	8010a44 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010a38:	2100      	movs	r1, #0
 8010a3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a3e:	4608      	mov	r0, r1
 8010a40:	b002      	add	sp, #8
 8010a42:	4770      	bx	lr
 8010a44:	b314      	cbz	r4, 8010a8c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010a46:	428c      	cmp	r4, r1
 8010a48:	d820      	bhi.n	8010a8c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010a4a:	2d00      	cmp	r5, #0
 8010a4c:	d0f4      	beq.n	8010a38 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010a4e:	2100      	movs	r1, #0
 8010a50:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8010a54:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8010a58:	e002      	b.n	8010a60 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8010a5a:	686d      	ldr	r5, [r5, #4]
 8010a5c:	2d00      	cmp	r5, #0
 8010a5e:	d0ec      	beq.n	8010a3a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010a60:	68ab      	ldr	r3, [r5, #8]
 8010a62:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8010a66:	4290      	cmp	r0, r2
 8010a68:	d1f7      	bne.n	8010a5a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010a6a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8010a6e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8010a72:	4562      	cmp	r2, ip
 8010a74:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010a78:	eb73 0e04 	sbcs.w	lr, r3, r4
 8010a7c:	daed      	bge.n	8010a5a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010a7e:	4694      	mov	ip, r2
 8010a80:	461c      	mov	r4, r3
 8010a82:	4629      	mov	r1, r5
 8010a84:	e7e9      	b.n	8010a5a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010a86:	b10c      	cbz	r4, 8010a8c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010a88:	428c      	cmp	r4, r1
 8010a8a:	d9d5      	bls.n	8010a38 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a90:	4802      	ldr	r0, [pc, #8]	; (8010a9c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8010a92:	b002      	add	sp, #8
 8010a94:	f007 b88c 	b.w	8017bb0 <get_memory>
 8010a98:	4629      	mov	r1, r5
 8010a9a:	e7c6      	b.n	8010a2a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010a9c:	2001cb94 	.word	0x2001cb94

08010aa0 <run_xrce_session>:
 8010aa0:	b510      	push	{r4, lr}
 8010aa2:	788c      	ldrb	r4, [r1, #2]
 8010aa4:	b086      	sub	sp, #24
 8010aa6:	2c01      	cmp	r4, #1
 8010aa8:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010aac:	d00c      	beq.n	8010ac8 <run_xrce_session+0x28>
 8010aae:	4619      	mov	r1, r3
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	9300      	str	r3, [sp, #0]
 8010ab4:	f10d 020e 	add.w	r2, sp, #14
 8010ab8:	f10d 0317 	add.w	r3, sp, #23
 8010abc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010ac0:	f003 feba 	bl	8014838 <uxr_run_session_until_all_status>
 8010ac4:	b006      	add	sp, #24
 8010ac6:	bd10      	pop	{r4, pc}
 8010ac8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010acc:	f003 fb08 	bl	80140e0 <uxr_flash_output_streams>
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	b006      	add	sp, #24
 8010ad4:	bd10      	pop	{r4, pc}
 8010ad6:	bf00      	nop

08010ad8 <convert_qos_profile>:
 8010ad8:	7a4a      	ldrb	r2, [r1, #9]
 8010ada:	f891 c008 	ldrb.w	ip, [r1, #8]
 8010ade:	2a02      	cmp	r2, #2
 8010ae0:	bf18      	it	ne
 8010ae2:	2200      	movne	r2, #0
 8010ae4:	7002      	strb	r2, [r0, #0]
 8010ae6:	780a      	ldrb	r2, [r1, #0]
 8010ae8:	8889      	ldrh	r1, [r1, #4]
 8010aea:	8081      	strh	r1, [r0, #4]
 8010aec:	f1ac 0c02 	sub.w	ip, ip, #2
 8010af0:	f1a2 0202 	sub.w	r2, r2, #2
 8010af4:	fabc fc8c 	clz	ip, ip
 8010af8:	fab2 f282 	clz	r2, r2
 8010afc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8010b00:	0952      	lsrs	r2, r2, #5
 8010b02:	f880 c001 	strb.w	ip, [r0, #1]
 8010b06:	7082      	strb	r2, [r0, #2]
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop

08010b0c <generate_type_name>:
 8010b0c:	b530      	push	{r4, r5, lr}
 8010b0e:	2300      	movs	r3, #0
 8010b10:	700b      	strb	r3, [r1, #0]
 8010b12:	6803      	ldr	r3, [r0, #0]
 8010b14:	b087      	sub	sp, #28
 8010b16:	4614      	mov	r4, r2
 8010b18:	b1d3      	cbz	r3, 8010b50 <generate_type_name+0x44>
 8010b1a:	4a0f      	ldr	r2, [pc, #60]	; (8010b58 <generate_type_name+0x4c>)
 8010b1c:	4615      	mov	r5, r2
 8010b1e:	9203      	str	r2, [sp, #12]
 8010b20:	9500      	str	r5, [sp, #0]
 8010b22:	6842      	ldr	r2, [r0, #4]
 8010b24:	480d      	ldr	r0, [pc, #52]	; (8010b5c <generate_type_name+0x50>)
 8010b26:	9001      	str	r0, [sp, #4]
 8010b28:	4608      	mov	r0, r1
 8010b2a:	490d      	ldr	r1, [pc, #52]	; (8010b60 <generate_type_name+0x54>)
 8010b2c:	9204      	str	r2, [sp, #16]
 8010b2e:	9105      	str	r1, [sp, #20]
 8010b30:	9102      	str	r1, [sp, #8]
 8010b32:	4a0c      	ldr	r2, [pc, #48]	; (8010b64 <generate_type_name+0x58>)
 8010b34:	4621      	mov	r1, r4
 8010b36:	f00a ff21 	bl	801b97c <sniprintf>
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	db05      	blt.n	8010b4a <generate_type_name+0x3e>
 8010b3e:	4284      	cmp	r4, r0
 8010b40:	bfd4      	ite	le
 8010b42:	2000      	movle	r0, #0
 8010b44:	2001      	movgt	r0, #1
 8010b46:	b007      	add	sp, #28
 8010b48:	bd30      	pop	{r4, r5, pc}
 8010b4a:	2000      	movs	r0, #0
 8010b4c:	b007      	add	sp, #28
 8010b4e:	bd30      	pop	{r4, r5, pc}
 8010b50:	4b05      	ldr	r3, [pc, #20]	; (8010b68 <generate_type_name+0x5c>)
 8010b52:	4a01      	ldr	r2, [pc, #4]	; (8010b58 <generate_type_name+0x4c>)
 8010b54:	461d      	mov	r5, r3
 8010b56:	e7e2      	b.n	8010b1e <generate_type_name+0x12>
 8010b58:	0801cda0 	.word	0x0801cda0
 8010b5c:	0801cdb8 	.word	0x0801cdb8
 8010b60:	0801cdb4 	.word	0x0801cdb4
 8010b64:	0801cda4 	.word	0x0801cda4
 8010b68:	0801ddb8 	.word	0x0801ddb8

08010b6c <generate_topic_name>:
 8010b6c:	b510      	push	{r4, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	4614      	mov	r4, r2
 8010b72:	9000      	str	r0, [sp, #0]
 8010b74:	4b08      	ldr	r3, [pc, #32]	; (8010b98 <generate_topic_name+0x2c>)
 8010b76:	4a09      	ldr	r2, [pc, #36]	; (8010b9c <generate_topic_name+0x30>)
 8010b78:	4608      	mov	r0, r1
 8010b7a:	4621      	mov	r1, r4
 8010b7c:	f00a fefe 	bl	801b97c <sniprintf>
 8010b80:	2800      	cmp	r0, #0
 8010b82:	db05      	blt.n	8010b90 <generate_topic_name+0x24>
 8010b84:	4284      	cmp	r4, r0
 8010b86:	bfd4      	ite	le
 8010b88:	2000      	movle	r0, #0
 8010b8a:	2001      	movgt	r0, #1
 8010b8c:	b002      	add	sp, #8
 8010b8e:	bd10      	pop	{r4, pc}
 8010b90:	2000      	movs	r0, #0
 8010b92:	b002      	add	sp, #8
 8010b94:	bd10      	pop	{r4, pc}
 8010b96:	bf00      	nop
 8010b98:	0801cdc4 	.word	0x0801cdc4
 8010b9c:	0801cdbc 	.word	0x0801cdbc

08010ba0 <is_uxrce_rmw_identifier_valid>:
 8010ba0:	b510      	push	{r4, lr}
 8010ba2:	4604      	mov	r4, r0
 8010ba4:	b140      	cbz	r0, 8010bb8 <is_uxrce_rmw_identifier_valid+0x18>
 8010ba6:	f007 f827 	bl	8017bf8 <rmw_get_implementation_identifier>
 8010baa:	4601      	mov	r1, r0
 8010bac:	4620      	mov	r0, r4
 8010bae:	f7ef fb0f 	bl	80001d0 <strcmp>
 8010bb2:	fab0 f080 	clz	r0, r0
 8010bb6:	0940      	lsrs	r0, r0, #5
 8010bb8:	bd10      	pop	{r4, pc}
 8010bba:	bf00      	nop

08010bbc <get_message_typesupport_handle>:
 8010bbc:	6883      	ldr	r3, [r0, #8]
 8010bbe:	4718      	bx	r3

08010bc0 <get_message_typesupport_handle_function>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	6800      	ldr	r0, [r0, #0]
 8010bc6:	f7ef fb03 	bl	80001d0 <strcmp>
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	bf0c      	ite	eq
 8010bce:	4620      	moveq	r0, r4
 8010bd0:	2000      	movne	r0, #0
 8010bd2:	bd10      	pop	{r4, pc}

08010bd4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8010bd4:	4b04      	ldr	r3, [pc, #16]	; (8010be8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 8010bd6:	681a      	ldr	r2, [r3, #0]
 8010bd8:	b10a      	cbz	r2, 8010bde <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0xa>
 8010bda:	4803      	ldr	r0, [pc, #12]	; (8010be8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 8010bdc:	4770      	bx	lr
 8010bde:	4a03      	ldr	r2, [pc, #12]	; (8010bec <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x18>)
 8010be0:	4801      	ldr	r0, [pc, #4]	; (8010be8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 8010be2:	6812      	ldr	r2, [r2, #0]
 8010be4:	601a      	str	r2, [r3, #0]
 8010be6:	4770      	bx	lr
 8010be8:	20000120 	.word	0x20000120
 8010bec:	20000b20 	.word	0x20000b20

08010bf0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8010bf0:	4a02      	ldr	r2, [pc, #8]	; (8010bfc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0xc>)
 8010bf2:	4b03      	ldr	r3, [pc, #12]	; (8010c00 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x10>)
 8010bf4:	6812      	ldr	r2, [r2, #0]
 8010bf6:	601a      	str	r2, [r3, #0]
 8010bf8:	4770      	bx	lr
 8010bfa:	bf00      	nop
 8010bfc:	20000b20 	.word	0x20000b20
 8010c00:	20000120 	.word	0x20000120

08010c04 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8010c04:	4b04      	ldr	r3, [pc, #16]	; (8010c18 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 8010c06:	681a      	ldr	r2, [r3, #0]
 8010c08:	b10a      	cbz	r2, 8010c0e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xa>
 8010c0a:	4803      	ldr	r0, [pc, #12]	; (8010c18 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 8010c0c:	4770      	bx	lr
 8010c0e:	4a03      	ldr	r2, [pc, #12]	; (8010c1c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x18>)
 8010c10:	4801      	ldr	r0, [pc, #4]	; (8010c18 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 8010c12:	6812      	ldr	r2, [r2, #0]
 8010c14:	601a      	str	r2, [r3, #0]
 8010c16:	4770      	bx	lr
 8010c18:	20000134 	.word	0x20000134
 8010c1c:	20000b20 	.word	0x20000b20

08010c20 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8010c20:	4a02      	ldr	r2, [pc, #8]	; (8010c2c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xc>)
 8010c22:	4b03      	ldr	r3, [pc, #12]	; (8010c30 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x10>)
 8010c24:	6812      	ldr	r2, [r2, #0]
 8010c26:	601a      	str	r2, [r3, #0]
 8010c28:	4770      	bx	lr
 8010c2a:	bf00      	nop
 8010c2c:	20000b20 	.word	0x20000b20
 8010c30:	20000134 	.word	0x20000134

08010c34 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__size_function__BatteryState__cell_voltage>:
 8010c34:	6840      	ldr	r0, [r0, #4]
 8010c36:	4770      	bx	lr

08010c38 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_const_function__BatteryState__cell_voltage>:
 8010c38:	6800      	ldr	r0, [r0, #0]
 8010c3a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010c3e:	4770      	bx	lr

08010c40 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__fetch_function__BatteryState__cell_voltage>:
 8010c40:	6803      	ldr	r3, [r0, #0]
 8010c42:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010c46:	680b      	ldr	r3, [r1, #0]
 8010c48:	6013      	str	r3, [r2, #0]
 8010c4a:	4770      	bx	lr

08010c4c <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__assign_function__BatteryState__cell_voltage>:
 8010c4c:	6803      	ldr	r3, [r0, #0]
 8010c4e:	6812      	ldr	r2, [r2, #0]
 8010c50:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010c54:	600a      	str	r2, [r1, #0]
 8010c56:	4770      	bx	lr

08010c58 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__BatteryState_init_function>:
 8010c58:	f007 bd1c 	b.w	8018694 <sensor_msgs__msg__BatteryState__init>

08010c5c <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__BatteryState_fini_function>:
 8010c5c:	f007 bd8a 	b.w	8018774 <sensor_msgs__msg__BatteryState__fini>

08010c60 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__resize_function__BatteryState__cell_voltage>:
 8010c60:	b510      	push	{r4, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	4604      	mov	r4, r0
 8010c66:	9101      	str	r1, [sp, #4]
 8010c68:	f007 fca6 	bl	80185b8 <rosidl_runtime_c__float__Sequence__fini>
 8010c6c:	9901      	ldr	r1, [sp, #4]
 8010c6e:	4620      	mov	r0, r4
 8010c70:	b002      	add	sp, #8
 8010c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c76:	f007 bc87 	b.w	8018588 <rosidl_runtime_c__float__Sequence__init>
 8010c7a:	bf00      	nop

08010c7c <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__size_function__BatteryState__cell_temperature>:
 8010c7c:	6840      	ldr	r0, [r0, #4]
 8010c7e:	4770      	bx	lr

08010c80 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_const_function__BatteryState__cell_temperature>:
 8010c80:	6800      	ldr	r0, [r0, #0]
 8010c82:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010c86:	4770      	bx	lr

08010c88 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_function__BatteryState__cell_temperature>:
 8010c88:	6800      	ldr	r0, [r0, #0]
 8010c8a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010c8e:	4770      	bx	lr

08010c90 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_function__BatteryState__cell_voltage>:
 8010c90:	6800      	ldr	r0, [r0, #0]
 8010c92:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010c96:	4770      	bx	lr

08010c98 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__fetch_function__BatteryState__cell_temperature>:
 8010c98:	6803      	ldr	r3, [r0, #0]
 8010c9a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010c9e:	680b      	ldr	r3, [r1, #0]
 8010ca0:	6013      	str	r3, [r2, #0]
 8010ca2:	4770      	bx	lr

08010ca4 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__assign_function__BatteryState__cell_temperature>:
 8010ca4:	6803      	ldr	r3, [r0, #0]
 8010ca6:	6812      	ldr	r2, [r2, #0]
 8010ca8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010cac:	600a      	str	r2, [r1, #0]
 8010cae:	4770      	bx	lr

08010cb0 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__resize_function__BatteryState__cell_temperature>:
 8010cb0:	b510      	push	{r4, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	9101      	str	r1, [sp, #4]
 8010cb8:	f007 fc7e 	bl	80185b8 <rosidl_runtime_c__float__Sequence__fini>
 8010cbc:	9901      	ldr	r1, [sp, #4]
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	b002      	add	sp, #8
 8010cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cc6:	f007 bc5f 	b.w	8018588 <rosidl_runtime_c__float__Sequence__init>
 8010cca:	bf00      	nop

08010ccc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8010ccc:	b508      	push	{r3, lr}
 8010cce:	f000 fb81 	bl	80113d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010cd2:	4b06      	ldr	r3, [pc, #24]	; (8010cec <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 8010cd4:	4906      	ldr	r1, [pc, #24]	; (8010cf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x24>)
 8010cd6:	681a      	ldr	r2, [r3, #0]
 8010cd8:	60c8      	str	r0, [r1, #12]
 8010cda:	b10a      	cbz	r2, 8010ce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>
 8010cdc:	4803      	ldr	r0, [pc, #12]	; (8010cec <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 8010cde:	bd08      	pop	{r3, pc}
 8010ce0:	4a04      	ldr	r2, [pc, #16]	; (8010cf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x28>)
 8010ce2:	4802      	ldr	r0, [pc, #8]	; (8010cec <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 8010ce4:	6812      	ldr	r2, [r2, #0]
 8010ce6:	601a      	str	r2, [r3, #0]
 8010ce8:	bd08      	pop	{r3, pc}
 8010cea:	bf00      	nop
 8010cec:	20000500 	.word	0x20000500
 8010cf0:	20000140 	.word	0x20000140
 8010cf4:	20000b24 	.word	0x20000b24

08010cf8 <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_init_function>:
 8010cf8:	f007 bd54 	b.w	80187a4 <sensor_msgs__msg__Temperature__init>

08010cfc <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_fini_function>:
 8010cfc:	f007 bd64 	b.w	80187c8 <sensor_msgs__msg__Temperature__fini>

08010d00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8010d00:	b508      	push	{r3, lr}
 8010d02:	f000 fb67 	bl	80113d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010d06:	4b06      	ldr	r3, [pc, #24]	; (8010d20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 8010d08:	4906      	ldr	r1, [pc, #24]	; (8010d24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x24>)
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	60c8      	str	r0, [r1, #12]
 8010d0e:	b10a      	cbz	r2, 8010d14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>
 8010d10:	4803      	ldr	r0, [pc, #12]	; (8010d20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 8010d12:	bd08      	pop	{r3, pc}
 8010d14:	4a04      	ldr	r2, [pc, #16]	; (8010d28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x28>)
 8010d16:	4802      	ldr	r0, [pc, #8]	; (8010d20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 8010d18:	6812      	ldr	r2, [r2, #0]
 8010d1a:	601a      	str	r2, [r3, #0]
 8010d1c:	bd08      	pop	{r3, pc}
 8010d1e:	bf00      	nop
 8010d20:	200005c0 	.word	0x200005c0
 8010d24:	2000050c 	.word	0x2000050c
 8010d28:	20000b24 	.word	0x20000b24

08010d2c <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>:
 8010d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d30:	460e      	mov	r6, r1
 8010d32:	4607      	mov	r7, r0
 8010d34:	f000 fd0c 	bl	8011750 <get_serialized_size_std_msgs__msg__Header>
 8010d38:	1835      	adds	r5, r6, r0
 8010d3a:	2104      	movs	r1, #4
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	f002 fe0b 	bl	8013958 <ucdr_alignment>
 8010d42:	1d04      	adds	r4, r0, #4
 8010d44:	442c      	add	r4, r5
 8010d46:	2104      	movs	r1, #4
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f002 fe05 	bl	8013958 <ucdr_alignment>
 8010d4e:	1d05      	adds	r5, r0, #4
 8010d50:	442c      	add	r4, r5
 8010d52:	2104      	movs	r1, #4
 8010d54:	4620      	mov	r0, r4
 8010d56:	f002 fdff 	bl	8013958 <ucdr_alignment>
 8010d5a:	1d05      	adds	r5, r0, #4
 8010d5c:	4425      	add	r5, r4
 8010d5e:	2104      	movs	r1, #4
 8010d60:	4628      	mov	r0, r5
 8010d62:	f002 fdf9 	bl	8013958 <ucdr_alignment>
 8010d66:	3004      	adds	r0, #4
 8010d68:	4405      	add	r5, r0
 8010d6a:	2104      	movs	r1, #4
 8010d6c:	4628      	mov	r0, r5
 8010d6e:	f002 fdf3 	bl	8013958 <ucdr_alignment>
 8010d72:	3004      	adds	r0, #4
 8010d74:	1944      	adds	r4, r0, r5
 8010d76:	2104      	movs	r1, #4
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f002 fded 	bl	8013958 <ucdr_alignment>
 8010d7e:	1d05      	adds	r5, r0, #4
 8010d80:	4425      	add	r5, r4
 8010d82:	2104      	movs	r1, #4
 8010d84:	4628      	mov	r0, r5
 8010d86:	f002 fde7 	bl	8013958 <ucdr_alignment>
 8010d8a:	3004      	adds	r0, #4
 8010d8c:	4405      	add	r5, r0
 8010d8e:	2101      	movs	r1, #1
 8010d90:	4628      	mov	r0, r5
 8010d92:	f002 fde1 	bl	8013958 <ucdr_alignment>
 8010d96:	3001      	adds	r0, #1
 8010d98:	1944      	adds	r4, r0, r5
 8010d9a:	2101      	movs	r1, #1
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f002 fddb 	bl	8013958 <ucdr_alignment>
 8010da2:	1c45      	adds	r5, r0, #1
 8010da4:	4425      	add	r5, r4
 8010da6:	2101      	movs	r1, #1
 8010da8:	4628      	mov	r0, r5
 8010daa:	f002 fdd5 	bl	8013958 <ucdr_alignment>
 8010dae:	3001      	adds	r0, #1
 8010db0:	4405      	add	r5, r0
 8010db2:	2101      	movs	r1, #1
 8010db4:	4628      	mov	r0, r5
 8010db6:	f002 fdcf 	bl	8013958 <ucdr_alignment>
 8010dba:	3001      	adds	r0, #1
 8010dbc:	1944      	adds	r4, r0, r5
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	2104      	movs	r1, #4
 8010dc2:	f8d7 8038 	ldr.w	r8, [r7, #56]	; 0x38
 8010dc6:	f002 fdc7 	bl	8013958 <ucdr_alignment>
 8010dca:	1d05      	adds	r5, r0, #4
 8010dcc:	442c      	add	r4, r5
 8010dce:	f1b8 0f00 	cmp.w	r8, #0
 8010dd2:	d11e      	bne.n	8010e12 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xe6>
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	2104      	movs	r1, #4
 8010dd8:	f8d7 8044 	ldr.w	r8, [r7, #68]	; 0x44
 8010ddc:	f002 fdbc 	bl	8013958 <ucdr_alignment>
 8010de0:	4404      	add	r4, r0
 8010de2:	3404      	adds	r4, #4
 8010de4:	f1b8 0f00 	cmp.w	r8, #0
 8010de8:	d11b      	bne.n	8010e22 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xf6>
 8010dea:	2104      	movs	r1, #4
 8010dec:	4620      	mov	r0, r4
 8010dee:	f002 fdb3 	bl	8013958 <ucdr_alignment>
 8010df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010df4:	3305      	adds	r3, #5
 8010df6:	441c      	add	r4, r3
 8010df8:	4404      	add	r4, r0
 8010dfa:	2104      	movs	r1, #4
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f002 fdab 	bl	8013958 <ucdr_alignment>
 8010e02:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010e04:	f1c6 0605 	rsb	r6, r6, #5
 8010e08:	440e      	add	r6, r1
 8010e0a:	4430      	add	r0, r6
 8010e0c:	4420      	add	r0, r4
 8010e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e12:	4620      	mov	r0, r4
 8010e14:	2104      	movs	r1, #4
 8010e16:	f002 fd9f 	bl	8013958 <ucdr_alignment>
 8010e1a:	eb04 0588 	add.w	r5, r4, r8, lsl #2
 8010e1e:	1944      	adds	r4, r0, r5
 8010e20:	e7d8      	b.n	8010dd4 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xa8>
 8010e22:	4620      	mov	r0, r4
 8010e24:	2104      	movs	r1, #4
 8010e26:	f002 fd97 	bl	8013958 <ucdr_alignment>
 8010e2a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8010e2e:	4404      	add	r4, r0
 8010e30:	e7db      	b.n	8010dea <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xbe>
 8010e32:	bf00      	nop

08010e34 <get_serialized_size_sensor_msgs__msg__BatteryState>:
 8010e34:	b108      	cbz	r0, 8010e3a <get_serialized_size_sensor_msgs__msg__BatteryState+0x6>
 8010e36:	f7ff bf79 	b.w	8010d2c <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>
 8010e3a:	4770      	bx	lr

08010e3c <_BatteryState__get_serialized_size>:
 8010e3c:	b110      	cbz	r0, 8010e44 <_BatteryState__get_serialized_size+0x8>
 8010e3e:	2100      	movs	r1, #0
 8010e40:	f7ff bf74 	b.w	8010d2c <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>
 8010e44:	4770      	bx	lr
 8010e46:	bf00      	nop

08010e48 <_BatteryState__cdr_deserialize>:
 8010e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e4a:	460c      	mov	r4, r1
 8010e4c:	b083      	sub	sp, #12
 8010e4e:	2900      	cmp	r1, #0
 8010e50:	f000 80a1 	beq.w	8010f96 <_BatteryState__cdr_deserialize+0x14e>
 8010e54:	4605      	mov	r5, r0
 8010e56:	f000 fcfd 	bl	8011854 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010e5a:	6843      	ldr	r3, [r0, #4]
 8010e5c:	4621      	mov	r1, r4
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	4628      	mov	r0, r5
 8010e62:	4798      	blx	r3
 8010e64:	f104 0114 	add.w	r1, r4, #20
 8010e68:	4628      	mov	r0, r5
 8010e6a:	f002 f8c1 	bl	8012ff0 <ucdr_deserialize_float>
 8010e6e:	f104 0118 	add.w	r1, r4, #24
 8010e72:	4628      	mov	r0, r5
 8010e74:	f002 f8bc 	bl	8012ff0 <ucdr_deserialize_float>
 8010e78:	f104 011c 	add.w	r1, r4, #28
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	f002 f8b7 	bl	8012ff0 <ucdr_deserialize_float>
 8010e82:	f104 0120 	add.w	r1, r4, #32
 8010e86:	4628      	mov	r0, r5
 8010e88:	f002 f8b2 	bl	8012ff0 <ucdr_deserialize_float>
 8010e8c:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8010e90:	4628      	mov	r0, r5
 8010e92:	f002 f8ad 	bl	8012ff0 <ucdr_deserialize_float>
 8010e96:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	f002 f8a8 	bl	8012ff0 <ucdr_deserialize_float>
 8010ea0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	f002 f8a3 	bl	8012ff0 <ucdr_deserialize_float>
 8010eaa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8010eae:	4628      	mov	r0, r5
 8010eb0:	f000 fe94 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8010eb4:	f104 0131 	add.w	r1, r4, #49	; 0x31
 8010eb8:	4628      	mov	r0, r5
 8010eba:	f000 fe8f 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8010ebe:	f104 0132 	add.w	r1, r4, #50	; 0x32
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	f000 fe8a 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8010ec8:	f104 0133 	add.w	r1, r4, #51	; 0x33
 8010ecc:	4628      	mov	r0, r5
 8010ece:	f000 fe57 	bl	8011b80 <ucdr_deserialize_bool>
 8010ed2:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8010ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ed6:	ab01      	add	r3, sp, #4
 8010ed8:	4632      	mov	r2, r6
 8010eda:	4628      	mov	r0, r5
 8010edc:	f002 fe12 	bl	8013b04 <ucdr_deserialize_sequence_float>
 8010ee0:	9b01      	ldr	r3, [sp, #4]
 8010ee2:	bb40      	cbnz	r0, 8010f36 <_BatteryState__cdr_deserialize+0xee>
 8010ee4:	429e      	cmp	r6, r3
 8010ee6:	d35e      	bcc.n	8010fa6 <_BatteryState__cdr_deserialize+0x15e>
 8010ee8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8010eea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010eec:	ab01      	add	r3, sp, #4
 8010eee:	4632      	mov	r2, r6
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	f002 fe07 	bl	8013b04 <ucdr_deserialize_sequence_float>
 8010ef6:	9b01      	ldr	r3, [sp, #4]
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	d03c      	beq.n	8010f76 <_BatteryState__cdr_deserialize+0x12e>
 8010efc:	6463      	str	r3, [r4, #68]	; 0x44
 8010efe:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8010f00:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8010f02:	ab01      	add	r3, sp, #4
 8010f04:	4632      	mov	r2, r6
 8010f06:	4628      	mov	r0, r5
 8010f08:	f002 fda4 	bl	8013a54 <ucdr_deserialize_sequence_char>
 8010f0c:	9b01      	ldr	r3, [sp, #4]
 8010f0e:	b320      	cbz	r0, 8010f5a <_BatteryState__cdr_deserialize+0x112>
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d146      	bne.n	8010fa2 <_BatteryState__cdr_deserialize+0x15a>
 8010f14:	6523      	str	r3, [r4, #80]	; 0x50
 8010f16:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8010f18:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010f1a:	ab01      	add	r3, sp, #4
 8010f1c:	463a      	mov	r2, r7
 8010f1e:	4628      	mov	r0, r5
 8010f20:	f002 fd98 	bl	8013a54 <ucdr_deserialize_sequence_char>
 8010f24:	9b01      	ldr	r3, [sp, #4]
 8010f26:	4606      	mov	r6, r0
 8010f28:	b138      	cbz	r0, 8010f3a <_BatteryState__cdr_deserialize+0xf2>
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d137      	bne.n	8010f9e <_BatteryState__cdr_deserialize+0x156>
 8010f2e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8010f30:	4630      	mov	r0, r6
 8010f32:	b003      	add	sp, #12
 8010f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f36:	63a3      	str	r3, [r4, #56]	; 0x38
 8010f38:	e7d6      	b.n	8010ee8 <_BatteryState__cdr_deserialize+0xa0>
 8010f3a:	429f      	cmp	r7, r3
 8010f3c:	d2f8      	bcs.n	8010f30 <_BatteryState__cdr_deserialize+0xe8>
 8010f3e:	2101      	movs	r1, #1
 8010f40:	75a8      	strb	r0, [r5, #22]
 8010f42:	7569      	strb	r1, [r5, #21]
 8010f44:	4628      	mov	r0, r5
 8010f46:	65e6      	str	r6, [r4, #92]	; 0x5c
 8010f48:	f002 fd1c 	bl	8013984 <ucdr_align_to>
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	9901      	ldr	r1, [sp, #4]
 8010f50:	f002 fd4e 	bl	80139f0 <ucdr_advance_buffer>
 8010f54:	4630      	mov	r0, r6
 8010f56:	b003      	add	sp, #12
 8010f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f5a:	429e      	cmp	r6, r3
 8010f5c:	d2db      	bcs.n	8010f16 <_BatteryState__cdr_deserialize+0xce>
 8010f5e:	2101      	movs	r1, #1
 8010f60:	75a8      	strb	r0, [r5, #22]
 8010f62:	7569      	strb	r1, [r5, #21]
 8010f64:	6520      	str	r0, [r4, #80]	; 0x50
 8010f66:	4628      	mov	r0, r5
 8010f68:	f002 fd0c 	bl	8013984 <ucdr_align_to>
 8010f6c:	9901      	ldr	r1, [sp, #4]
 8010f6e:	4628      	mov	r0, r5
 8010f70:	f002 fd3e 	bl	80139f0 <ucdr_advance_buffer>
 8010f74:	e7cf      	b.n	8010f16 <_BatteryState__cdr_deserialize+0xce>
 8010f76:	429e      	cmp	r6, r3
 8010f78:	d2c1      	bcs.n	8010efe <_BatteryState__cdr_deserialize+0xb6>
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	75a8      	strb	r0, [r5, #22]
 8010f7e:	756b      	strb	r3, [r5, #21]
 8010f80:	2104      	movs	r1, #4
 8010f82:	6460      	str	r0, [r4, #68]	; 0x44
 8010f84:	4628      	mov	r0, r5
 8010f86:	f002 fcfd 	bl	8013984 <ucdr_align_to>
 8010f8a:	9901      	ldr	r1, [sp, #4]
 8010f8c:	4628      	mov	r0, r5
 8010f8e:	0089      	lsls	r1, r1, #2
 8010f90:	f002 fd2e 	bl	80139f0 <ucdr_advance_buffer>
 8010f94:	e7b3      	b.n	8010efe <_BatteryState__cdr_deserialize+0xb6>
 8010f96:	460e      	mov	r6, r1
 8010f98:	4630      	mov	r0, r6
 8010f9a:	b003      	add	sp, #12
 8010f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f9e:	3b01      	subs	r3, #1
 8010fa0:	e7c5      	b.n	8010f2e <_BatteryState__cdr_deserialize+0xe6>
 8010fa2:	3b01      	subs	r3, #1
 8010fa4:	e7b6      	b.n	8010f14 <_BatteryState__cdr_deserialize+0xcc>
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	75a8      	strb	r0, [r5, #22]
 8010faa:	756b      	strb	r3, [r5, #21]
 8010fac:	2104      	movs	r1, #4
 8010fae:	63a0      	str	r0, [r4, #56]	; 0x38
 8010fb0:	4628      	mov	r0, r5
 8010fb2:	f002 fce7 	bl	8013984 <ucdr_align_to>
 8010fb6:	9901      	ldr	r1, [sp, #4]
 8010fb8:	4628      	mov	r0, r5
 8010fba:	0089      	lsls	r1, r1, #2
 8010fbc:	f002 fd18 	bl	80139f0 <ucdr_advance_buffer>
 8010fc0:	e792      	b.n	8010ee8 <_BatteryState__cdr_deserialize+0xa0>
 8010fc2:	bf00      	nop

08010fc4 <_BatteryState__cdr_serialize>:
 8010fc4:	2800      	cmp	r0, #0
 8010fc6:	d065      	beq.n	8011094 <_BatteryState__cdr_serialize+0xd0>
 8010fc8:	b570      	push	{r4, r5, r6, lr}
 8010fca:	4604      	mov	r4, r0
 8010fcc:	460d      	mov	r5, r1
 8010fce:	f000 fc41 	bl	8011854 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010fd2:	6843      	ldr	r3, [r0, #4]
 8010fd4:	4629      	mov	r1, r5
 8010fd6:	689b      	ldr	r3, [r3, #8]
 8010fd8:	4620      	mov	r0, r4
 8010fda:	4798      	blx	r3
 8010fdc:	ed94 0a05 	vldr	s0, [r4, #20]
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	f001 fed3 	bl	8012d8c <ucdr_serialize_float>
 8010fe6:	ed94 0a06 	vldr	s0, [r4, #24]
 8010fea:	4628      	mov	r0, r5
 8010fec:	f001 fece 	bl	8012d8c <ucdr_serialize_float>
 8010ff0:	ed94 0a07 	vldr	s0, [r4, #28]
 8010ff4:	4628      	mov	r0, r5
 8010ff6:	f001 fec9 	bl	8012d8c <ucdr_serialize_float>
 8010ffa:	ed94 0a08 	vldr	s0, [r4, #32]
 8010ffe:	4628      	mov	r0, r5
 8011000:	f001 fec4 	bl	8012d8c <ucdr_serialize_float>
 8011004:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8011008:	4628      	mov	r0, r5
 801100a:	f001 febf 	bl	8012d8c <ucdr_serialize_float>
 801100e:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8011012:	4628      	mov	r0, r5
 8011014:	f001 feba 	bl	8012d8c <ucdr_serialize_float>
 8011018:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 801101c:	4628      	mov	r0, r5
 801101e:	f001 feb5 	bl	8012d8c <ucdr_serialize_float>
 8011022:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8011026:	4628      	mov	r0, r5
 8011028:	f000 fdc2 	bl	8011bb0 <ucdr_serialize_uint8_t>
 801102c:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8011030:	4628      	mov	r0, r5
 8011032:	f000 fdbd 	bl	8011bb0 <ucdr_serialize_uint8_t>
 8011036:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 801103a:	4628      	mov	r0, r5
 801103c:	f000 fdb8 	bl	8011bb0 <ucdr_serialize_uint8_t>
 8011040:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 8011044:	4628      	mov	r0, r5
 8011046:	f000 fd85 	bl	8011b54 <ucdr_serialize_bool>
 801104a:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 801104e:	4628      	mov	r0, r5
 8011050:	f002 fd46 	bl	8013ae0 <ucdr_serialize_sequence_float>
 8011054:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
 8011058:	4628      	mov	r0, r5
 801105a:	f002 fd41 	bl	8013ae0 <ucdr_serialize_sequence_float>
 801105e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8011060:	b1ae      	cbz	r6, 801108e <_BatteryState__cdr_serialize+0xca>
 8011062:	4630      	mov	r0, r6
 8011064:	f7ef f8be 	bl	80001e4 <strlen>
 8011068:	1c42      	adds	r2, r0, #1
 801106a:	6520      	str	r0, [r4, #80]	; 0x50
 801106c:	4631      	mov	r1, r6
 801106e:	4628      	mov	r0, r5
 8011070:	f002 fcde 	bl	8013a30 <ucdr_serialize_sequence_char>
 8011074:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8011076:	b176      	cbz	r6, 8011096 <_BatteryState__cdr_serialize+0xd2>
 8011078:	4630      	mov	r0, r6
 801107a:	f7ef f8b3 	bl	80001e4 <strlen>
 801107e:	4631      	mov	r1, r6
 8011080:	65e0      	str	r0, [r4, #92]	; 0x5c
 8011082:	1c42      	adds	r2, r0, #1
 8011084:	4628      	mov	r0, r5
 8011086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801108a:	f002 bcd1 	b.w	8013a30 <ucdr_serialize_sequence_char>
 801108e:	4632      	mov	r2, r6
 8011090:	4630      	mov	r0, r6
 8011092:	e7ea      	b.n	801106a <_BatteryState__cdr_serialize+0xa6>
 8011094:	4770      	bx	lr
 8011096:	4630      	mov	r0, r6
 8011098:	65e0      	str	r0, [r4, #92]	; 0x5c
 801109a:	4632      	mov	r2, r6
 801109c:	4631      	mov	r1, r6
 801109e:	4628      	mov	r0, r5
 80110a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110a4:	f002 bcc4 	b.w	8013a30 <ucdr_serialize_sequence_char>

080110a8 <max_serialized_size_sensor_msgs__msg__BatteryState>:
 80110a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110ac:	f04f 0801 	mov.w	r8, #1
 80110b0:	f880 8000 	strb.w	r8, [r0]
 80110b4:	460c      	mov	r4, r1
 80110b6:	4607      	mov	r7, r0
 80110b8:	f000 fbc2 	bl	8011840 <max_serialized_size_std_msgs__msg__Header>
 80110bc:	1825      	adds	r5, r4, r0
 80110be:	2104      	movs	r1, #4
 80110c0:	4628      	mov	r0, r5
 80110c2:	f002 fc49 	bl	8013958 <ucdr_alignment>
 80110c6:	1d06      	adds	r6, r0, #4
 80110c8:	4435      	add	r5, r6
 80110ca:	2104      	movs	r1, #4
 80110cc:	4628      	mov	r0, r5
 80110ce:	f002 fc43 	bl	8013958 <ucdr_alignment>
 80110d2:	1d06      	adds	r6, r0, #4
 80110d4:	442e      	add	r6, r5
 80110d6:	2104      	movs	r1, #4
 80110d8:	4630      	mov	r0, r6
 80110da:	f002 fc3d 	bl	8013958 <ucdr_alignment>
 80110de:	3004      	adds	r0, #4
 80110e0:	4406      	add	r6, r0
 80110e2:	2104      	movs	r1, #4
 80110e4:	4630      	mov	r0, r6
 80110e6:	f002 fc37 	bl	8013958 <ucdr_alignment>
 80110ea:	3004      	adds	r0, #4
 80110ec:	1985      	adds	r5, r0, r6
 80110ee:	2104      	movs	r1, #4
 80110f0:	4628      	mov	r0, r5
 80110f2:	f002 fc31 	bl	8013958 <ucdr_alignment>
 80110f6:	1d06      	adds	r6, r0, #4
 80110f8:	442e      	add	r6, r5
 80110fa:	2104      	movs	r1, #4
 80110fc:	4630      	mov	r0, r6
 80110fe:	f002 fc2b 	bl	8013958 <ucdr_alignment>
 8011102:	3004      	adds	r0, #4
 8011104:	4406      	add	r6, r0
 8011106:	2104      	movs	r1, #4
 8011108:	4630      	mov	r0, r6
 801110a:	f002 fc25 	bl	8013958 <ucdr_alignment>
 801110e:	3004      	adds	r0, #4
 8011110:	1985      	adds	r5, r0, r6
 8011112:	4641      	mov	r1, r8
 8011114:	4628      	mov	r0, r5
 8011116:	f002 fc1f 	bl	8013958 <ucdr_alignment>
 801111a:	eb00 0608 	add.w	r6, r0, r8
 801111e:	442e      	add	r6, r5
 8011120:	4641      	mov	r1, r8
 8011122:	4630      	mov	r0, r6
 8011124:	f002 fc18 	bl	8013958 <ucdr_alignment>
 8011128:	eb00 0508 	add.w	r5, r0, r8
 801112c:	442e      	add	r6, r5
 801112e:	4641      	mov	r1, r8
 8011130:	4630      	mov	r0, r6
 8011132:	f002 fc11 	bl	8013958 <ucdr_alignment>
 8011136:	eb00 0508 	add.w	r5, r0, r8
 801113a:	4435      	add	r5, r6
 801113c:	4641      	mov	r1, r8
 801113e:	4628      	mov	r0, r5
 8011140:	f002 fc0a 	bl	8013958 <ucdr_alignment>
 8011144:	eba8 0404 	sub.w	r4, r8, r4
 8011148:	2300      	movs	r3, #0
 801114a:	4420      	add	r0, r4
 801114c:	703b      	strb	r3, [r7, #0]
 801114e:	4428      	add	r0, r5
 8011150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011154 <_BatteryState__max_serialized_size>:
 8011154:	b500      	push	{lr}
 8011156:	b083      	sub	sp, #12
 8011158:	2100      	movs	r1, #0
 801115a:	f10d 0007 	add.w	r0, sp, #7
 801115e:	f7ff ffa3 	bl	80110a8 <max_serialized_size_sensor_msgs__msg__BatteryState>
 8011162:	b003      	add	sp, #12
 8011164:	f85d fb04 	ldr.w	pc, [sp], #4

08011168 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8011168:	4800      	ldr	r0, [pc, #0]	; (801116c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x4>)
 801116a:	4770      	bx	lr
 801116c:	200005cc 	.word	0x200005cc

08011170 <get_serialized_size_sensor_msgs__msg__Temperature>:
 8011170:	b538      	push	{r3, r4, r5, lr}
 8011172:	b188      	cbz	r0, 8011198 <get_serialized_size_sensor_msgs__msg__Temperature+0x28>
 8011174:	460d      	mov	r5, r1
 8011176:	f000 faeb 	bl	8011750 <get_serialized_size_std_msgs__msg__Header>
 801117a:	182c      	adds	r4, r5, r0
 801117c:	2108      	movs	r1, #8
 801117e:	4620      	mov	r0, r4
 8011180:	f002 fbea 	bl	8013958 <ucdr_alignment>
 8011184:	3008      	adds	r0, #8
 8011186:	4404      	add	r4, r0
 8011188:	2108      	movs	r1, #8
 801118a:	4620      	mov	r0, r4
 801118c:	f002 fbe4 	bl	8013958 <ucdr_alignment>
 8011190:	f1c5 0508 	rsb	r5, r5, #8
 8011194:	4428      	add	r0, r5
 8011196:	4420      	add	r0, r4
 8011198:	bd38      	pop	{r3, r4, r5, pc}
 801119a:	bf00      	nop

0801119c <_Temperature__cdr_deserialize>:
 801119c:	b538      	push	{r3, r4, r5, lr}
 801119e:	460c      	mov	r4, r1
 80111a0:	b199      	cbz	r1, 80111ca <_Temperature__cdr_deserialize+0x2e>
 80111a2:	4605      	mov	r5, r0
 80111a4:	f000 fb56 	bl	8011854 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80111a8:	6843      	ldr	r3, [r0, #4]
 80111aa:	4621      	mov	r1, r4
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	4628      	mov	r0, r5
 80111b0:	4798      	blx	r3
 80111b2:	f104 0118 	add.w	r1, r4, #24
 80111b6:	4628      	mov	r0, r5
 80111b8:	f002 f9e2 	bl	8013580 <ucdr_deserialize_double>
 80111bc:	f104 0120 	add.w	r1, r4, #32
 80111c0:	4628      	mov	r0, r5
 80111c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111c6:	f002 b9db 	b.w	8013580 <ucdr_deserialize_double>
 80111ca:	4608      	mov	r0, r1
 80111cc:	bd38      	pop	{r3, r4, r5, pc}
 80111ce:	bf00      	nop

080111d0 <_Temperature__cdr_serialize>:
 80111d0:	b1a8      	cbz	r0, 80111fe <_Temperature__cdr_serialize+0x2e>
 80111d2:	b538      	push	{r3, r4, r5, lr}
 80111d4:	460d      	mov	r5, r1
 80111d6:	4604      	mov	r4, r0
 80111d8:	f000 fb3c 	bl	8011854 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80111dc:	6843      	ldr	r3, [r0, #4]
 80111de:	4629      	mov	r1, r5
 80111e0:	689b      	ldr	r3, [r3, #8]
 80111e2:	4620      	mov	r0, r4
 80111e4:	4798      	blx	r3
 80111e6:	ed94 0b06 	vldr	d0, [r4, #24]
 80111ea:	4628      	mov	r0, r5
 80111ec:	f002 f826 	bl	801323c <ucdr_serialize_double>
 80111f0:	ed94 0b08 	vldr	d0, [r4, #32]
 80111f4:	4628      	mov	r0, r5
 80111f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111fa:	f002 b81f 	b.w	801323c <ucdr_serialize_double>
 80111fe:	4770      	bx	lr

08011200 <_Temperature__get_serialized_size>:
 8011200:	b188      	cbz	r0, 8011226 <_Temperature__get_serialized_size+0x26>
 8011202:	b510      	push	{r4, lr}
 8011204:	2100      	movs	r1, #0
 8011206:	f000 faa3 	bl	8011750 <get_serialized_size_std_msgs__msg__Header>
 801120a:	2108      	movs	r1, #8
 801120c:	4604      	mov	r4, r0
 801120e:	f002 fba3 	bl	8013958 <ucdr_alignment>
 8011212:	4420      	add	r0, r4
 8011214:	f100 0408 	add.w	r4, r0, #8
 8011218:	2108      	movs	r1, #8
 801121a:	4620      	mov	r0, r4
 801121c:	f002 fb9c 	bl	8013958 <ucdr_alignment>
 8011220:	3008      	adds	r0, #8
 8011222:	4420      	add	r0, r4
 8011224:	bd10      	pop	{r4, pc}
 8011226:	4770      	bx	lr

08011228 <_Temperature__max_serialized_size>:
 8011228:	b510      	push	{r4, lr}
 801122a:	b082      	sub	sp, #8
 801122c:	2301      	movs	r3, #1
 801122e:	2100      	movs	r1, #0
 8011230:	f10d 0007 	add.w	r0, sp, #7
 8011234:	f88d 3007 	strb.w	r3, [sp, #7]
 8011238:	f000 fb02 	bl	8011840 <max_serialized_size_std_msgs__msg__Header>
 801123c:	2108      	movs	r1, #8
 801123e:	4604      	mov	r4, r0
 8011240:	f002 fb8a 	bl	8013958 <ucdr_alignment>
 8011244:	4420      	add	r0, r4
 8011246:	f100 0408 	add.w	r4, r0, #8
 801124a:	2108      	movs	r1, #8
 801124c:	4620      	mov	r0, r4
 801124e:	f002 fb83 	bl	8013958 <ucdr_alignment>
 8011252:	3008      	adds	r0, #8
 8011254:	4420      	add	r0, r4
 8011256:	b002      	add	sp, #8
 8011258:	bd10      	pop	{r4, pc}
 801125a:	bf00      	nop

0801125c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 801125c:	4800      	ldr	r0, [pc, #0]	; (8011260 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x4>)
 801125e:	4770      	bx	lr
 8011260:	200005f4 	.word	0x200005f4

08011264 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 8011264:	4b04      	ldr	r3, [pc, #16]	; (8011278 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8011266:	681a      	ldr	r2, [r3, #0]
 8011268:	b10a      	cbz	r2, 801126e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xa>
 801126a:	4803      	ldr	r0, [pc, #12]	; (8011278 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 801126c:	4770      	bx	lr
 801126e:	4a03      	ldr	r2, [pc, #12]	; (801127c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x18>)
 8011270:	4801      	ldr	r0, [pc, #4]	; (8011278 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8011272:	6812      	ldr	r2, [r2, #0]
 8011274:	601a      	str	r2, [r3, #0]
 8011276:	4770      	bx	lr
 8011278:	20000624 	.word	0x20000624
 801127c:	20000b20 	.word	0x20000b20

08011280 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 8011280:	4a02      	ldr	r2, [pc, #8]	; (801128c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xc>)
 8011282:	4b03      	ldr	r3, [pc, #12]	; (8011290 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x10>)
 8011284:	6812      	ldr	r2, [r2, #0]
 8011286:	601a      	str	r2, [r3, #0]
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop
 801128c:	20000b20 	.word	0x20000b20
 8011290:	20000624 	.word	0x20000624

08011294 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 8011294:	4b04      	ldr	r3, [pc, #16]	; (80112a8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	b10a      	cbz	r2, 801129e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xa>
 801129a:	4803      	ldr	r0, [pc, #12]	; (80112a8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 801129c:	4770      	bx	lr
 801129e:	4a03      	ldr	r2, [pc, #12]	; (80112ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x18>)
 80112a0:	4801      	ldr	r0, [pc, #4]	; (80112a8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 80112a2:	6812      	ldr	r2, [r2, #0]
 80112a4:	601a      	str	r2, [r3, #0]
 80112a6:	4770      	bx	lr
 80112a8:	20000638 	.word	0x20000638
 80112ac:	20000b20 	.word	0x20000b20

080112b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 80112b0:	4a02      	ldr	r2, [pc, #8]	; (80112bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xc>)
 80112b2:	4b03      	ldr	r3, [pc, #12]	; (80112c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x10>)
 80112b4:	6812      	ldr	r2, [r2, #0]
 80112b6:	601a      	str	r2, [r3, #0]
 80112b8:	4770      	bx	lr
 80112ba:	bf00      	nop
 80112bc:	20000b20 	.word	0x20000b20
 80112c0:	20000638 	.word	0x20000638

080112c4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80112c4:	4b04      	ldr	r3, [pc, #16]	; (80112d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	b10a      	cbz	r2, 80112ce <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80112ca:	4803      	ldr	r0, [pc, #12]	; (80112d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80112cc:	4770      	bx	lr
 80112ce:	4a03      	ldr	r2, [pc, #12]	; (80112dc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80112d0:	4801      	ldr	r0, [pc, #4]	; (80112d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80112d2:	6812      	ldr	r2, [r2, #0]
 80112d4:	601a      	str	r2, [r3, #0]
 80112d6:	4770      	bx	lr
 80112d8:	2000064c 	.word	0x2000064c
 80112dc:	20000b20 	.word	0x20000b20

080112e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80112e0:	4a02      	ldr	r2, [pc, #8]	; (80112ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 80112e2:	4b03      	ldr	r3, [pc, #12]	; (80112f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 80112e4:	6812      	ldr	r2, [r2, #0]
 80112e6:	601a      	str	r2, [r3, #0]
 80112e8:	4770      	bx	lr
 80112ea:	bf00      	nop
 80112ec:	20000b20 	.word	0x20000b20
 80112f0:	2000064c 	.word	0x2000064c

080112f4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 80112f4:	4b04      	ldr	r3, [pc, #16]	; (8011308 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 80112f6:	681a      	ldr	r2, [r3, #0]
 80112f8:	b10a      	cbz	r2, 80112fe <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0xa>
 80112fa:	4803      	ldr	r0, [pc, #12]	; (8011308 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 80112fc:	4770      	bx	lr
 80112fe:	4a03      	ldr	r2, [pc, #12]	; (801130c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x18>)
 8011300:	4801      	ldr	r0, [pc, #4]	; (8011308 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011302:	6812      	ldr	r2, [r2, #0]
 8011304:	601a      	str	r2, [r3, #0]
 8011306:	4770      	bx	lr
 8011308:	20000660 	.word	0x20000660
 801130c:	20000b20 	.word	0x20000b20

08011310 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8011310:	4a02      	ldr	r2, [pc, #8]	; (801131c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0xc>)
 8011312:	4b03      	ldr	r3, [pc, #12]	; (8011320 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x10>)
 8011314:	6812      	ldr	r2, [r2, #0]
 8011316:	601a      	str	r2, [r3, #0]
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	20000b20 	.word	0x20000b20
 8011320:	20000660 	.word	0x20000660

08011324 <std_msgs__msg__ColorRGBA__rosidl_typesupport_introspection_c__ColorRGBA_init_function>:
 8011324:	f007 ba54 	b.w	80187d0 <std_msgs__msg__ColorRGBA__init>

08011328 <std_msgs__msg__ColorRGBA__rosidl_typesupport_introspection_c__ColorRGBA_fini_function>:
 8011328:	f007 ba56 	b.w	80187d8 <std_msgs__msg__ColorRGBA__fini>

0801132c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 801132c:	4b04      	ldr	r3, [pc, #16]	; (8011340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	b10a      	cbz	r2, 8011336 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xa>
 8011332:	4803      	ldr	r0, [pc, #12]	; (8011340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8011334:	4770      	bx	lr
 8011336:	4a03      	ldr	r2, [pc, #12]	; (8011344 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x18>)
 8011338:	4801      	ldr	r0, [pc, #4]	; (8011340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 801133a:	6812      	ldr	r2, [r2, #0]
 801133c:	601a      	str	r2, [r3, #0]
 801133e:	4770      	bx	lr
 8011340:	2000075c 	.word	0x2000075c
 8011344:	20000b24 	.word	0x20000b24

08011348 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 8011348:	6840      	ldr	r0, [r0, #4]
 801134a:	4770      	bx	lr

0801134c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 801134c:	6800      	ldr	r0, [r0, #0]
 801134e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011352:	4770      	bx	lr

08011354 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 8011354:	6803      	ldr	r3, [r0, #0]
 8011356:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801135a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801135e:	e9c2 0100 	strd	r0, r1, [r2]
 8011362:	4770      	bx	lr

08011364 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 8011364:	6803      	ldr	r3, [r0, #0]
 8011366:	ed92 7b00 	vldr	d7, [r2]
 801136a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801136e:	ed81 7b00 	vstr	d7, [r1]
 8011372:	4770      	bx	lr

08011374 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 8011374:	f007 ba32 	b.w	80187dc <std_msgs__msg__Float64MultiArray__init>

08011378 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 8011378:	f007 ba54 	b.w	8018824 <std_msgs__msg__Float64MultiArray__fini>

0801137c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 801137c:	b510      	push	{r4, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	4604      	mov	r4, r0
 8011382:	9101      	str	r1, [sp, #4]
 8011384:	f007 f944 	bl	8018610 <rosidl_runtime_c__double__Sequence__fini>
 8011388:	9901      	ldr	r1, [sp, #4]
 801138a:	4620      	mov	r0, r4
 801138c:	b002      	add	sp, #8
 801138e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011392:	f007 b925 	b.w	80185e0 <rosidl_runtime_c__double__Sequence__init>
 8011396:	bf00      	nop

08011398 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 8011398:	6800      	ldr	r0, [r0, #0]
 801139a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801139e:	4770      	bx	lr

080113a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 80113a0:	b508      	push	{r3, lr}
 80113a2:	f000 f895 	bl	80114d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 80113a6:	4b06      	ldr	r3, [pc, #24]	; (80113c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80113a8:	4906      	ldr	r1, [pc, #24]	; (80113c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 80113aa:	681a      	ldr	r2, [r3, #0]
 80113ac:	60c8      	str	r0, [r1, #12]
 80113ae:	b10a      	cbz	r2, 80113b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 80113b0:	4803      	ldr	r0, [pc, #12]	; (80113c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80113b2:	bd08      	pop	{r3, pc}
 80113b4:	4a04      	ldr	r2, [pc, #16]	; (80113c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 80113b6:	4802      	ldr	r0, [pc, #8]	; (80113c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 80113b8:	6812      	ldr	r2, [r2, #0]
 80113ba:	601a      	str	r2, [r3, #0]
 80113bc:	bd08      	pop	{r3, pc}
 80113be:	bf00      	nop
 80113c0:	200007e0 	.word	0x200007e0
 80113c4:	20000768 	.word	0x20000768
 80113c8:	20000b24 	.word	0x20000b24

080113cc <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80113cc:	f007 ba36 	b.w	801883c <std_msgs__msg__Header__init>

080113d0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80113d0:	f007 ba58 	b.w	8018884 <std_msgs__msg__Header__fini>

080113d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80113d4:	b508      	push	{r3, lr}
 80113d6:	f000 fb47 	bl	8011a68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80113da:	4b06      	ldr	r3, [pc, #24]	; (80113f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80113dc:	4906      	ldr	r1, [pc, #24]	; (80113f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80113de:	681a      	ldr	r2, [r3, #0]
 80113e0:	60c8      	str	r0, [r1, #12]
 80113e2:	b10a      	cbz	r2, 80113e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80113e4:	4803      	ldr	r0, [pc, #12]	; (80113f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80113e6:	bd08      	pop	{r3, pc}
 80113e8:	4a04      	ldr	r2, [pc, #16]	; (80113fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80113ea:	4802      	ldr	r0, [pc, #8]	; (80113f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80113ec:	6812      	ldr	r2, [r2, #0]
 80113ee:	601a      	str	r2, [r3, #0]
 80113f0:	bd08      	pop	{r3, pc}
 80113f2:	bf00      	nop
 80113f4:	20000864 	.word	0x20000864
 80113f8:	200007ec 	.word	0x200007ec
 80113fc:	20000b24 	.word	0x20000b24

08011400 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8011400:	f007 ba4c 	b.w	801889c <std_msgs__msg__Int32__init>

08011404 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8011404:	f007 ba4e 	b.w	80188a4 <std_msgs__msg__Int32__fini>

08011408 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8011408:	4b04      	ldr	r3, [pc, #16]	; (801141c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801140a:	681a      	ldr	r2, [r3, #0]
 801140c:	b10a      	cbz	r2, 8011412 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801140e:	4803      	ldr	r0, [pc, #12]	; (801141c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011410:	4770      	bx	lr
 8011412:	4a03      	ldr	r2, [pc, #12]	; (8011420 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8011414:	4801      	ldr	r0, [pc, #4]	; (801141c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011416:	6812      	ldr	r2, [r2, #0]
 8011418:	601a      	str	r2, [r3, #0]
 801141a:	4770      	bx	lr
 801141c:	200008ac 	.word	0x200008ac
 8011420:	20000b24 	.word	0x20000b24

08011424 <std_msgs__msg__Int64__rosidl_typesupport_introspection_c__Int64_init_function>:
 8011424:	f007 ba40 	b.w	80188a8 <std_msgs__msg__Int64__init>

08011428 <std_msgs__msg__Int64__rosidl_typesupport_introspection_c__Int64_fini_function>:
 8011428:	f007 ba42 	b.w	80188b0 <std_msgs__msg__Int64__fini>

0801142c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 801142c:	4b04      	ldr	r3, [pc, #16]	; (8011440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	b10a      	cbz	r2, 8011436 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0xa>
 8011432:	4803      	ldr	r0, [pc, #12]	; (8011440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011434:	4770      	bx	lr
 8011436:	4a03      	ldr	r2, [pc, #12]	; (8011444 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x18>)
 8011438:	4801      	ldr	r0, [pc, #4]	; (8011440 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 801143a:	6812      	ldr	r2, [r2, #0]
 801143c:	601a      	str	r2, [r3, #0]
 801143e:	4770      	bx	lr
 8011440:	200008f4 	.word	0x200008f4
 8011444:	20000b24 	.word	0x20000b24

08011448 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 8011448:	6840      	ldr	r0, [r0, #4]
 801144a:	4770      	bx	lr

0801144c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 801144c:	6800      	ldr	r0, [r0, #0]
 801144e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011452:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8011456:	4770      	bx	lr

08011458 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 8011458:	6803      	ldr	r3, [r0, #0]
 801145a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801145e:	b500      	push	{lr}
 8011460:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 8011464:	4694      	mov	ip, r2
 8011466:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801146a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801146e:	f8de 3000 	ldr.w	r3, [lr]
 8011472:	f8cc 3000 	str.w	r3, [ip]
 8011476:	f85d fb04 	ldr.w	pc, [sp], #4
 801147a:	bf00      	nop

0801147c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 801147c:	6803      	ldr	r3, [r0, #0]
 801147e:	b500      	push	{lr}
 8011480:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011484:	4696      	mov	lr, r2
 8011486:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 801148a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801148e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011492:	f8de 3000 	ldr.w	r3, [lr]
 8011496:	f8cc 3000 	str.w	r3, [ip]
 801149a:	f85d fb04 	ldr.w	pc, [sp], #4
 801149e:	bf00      	nop

080114a0 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 80114a0:	f007 ba92 	b.w	80189c8 <std_msgs__msg__MultiArrayLayout__init>

080114a4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 80114a4:	f007 baa2 	b.w	80189ec <std_msgs__msg__MultiArrayLayout__fini>

080114a8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 80114a8:	b510      	push	{r4, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	4604      	mov	r4, r0
 80114ae:	9101      	str	r1, [sp, #4]
 80114b0:	f007 fa62 	bl	8018978 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 80114b4:	9901      	ldr	r1, [sp, #4]
 80114b6:	4620      	mov	r0, r4
 80114b8:	b002      	add	sp, #8
 80114ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114be:	f007 ba57 	b.w	8018970 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 80114c2:	bf00      	nop

080114c4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 80114c4:	6800      	ldr	r0, [r0, #0]
 80114c6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80114ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80114ce:	4770      	bx	lr

080114d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 80114d0:	b508      	push	{r3, lr}
 80114d2:	f007 fa93 	bl	80189fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 80114d6:	4b06      	ldr	r3, [pc, #24]	; (80114f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80114d8:	4906      	ldr	r1, [pc, #24]	; (80114f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	60c8      	str	r0, [r1, #12]
 80114de:	b10a      	cbz	r2, 80114e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 80114e0:	4803      	ldr	r0, [pc, #12]	; (80114f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80114e2:	bd08      	pop	{r3, pc}
 80114e4:	4a04      	ldr	r2, [pc, #16]	; (80114f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 80114e6:	4802      	ldr	r0, [pc, #8]	; (80114f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 80114e8:	6812      	ldr	r2, [r2, #0]
 80114ea:	601a      	str	r2, [r3, #0]
 80114ec:	bd08      	pop	{r3, pc}
 80114ee:	bf00      	nop
 80114f0:	20000978 	.word	0x20000978
 80114f4:	20000900 	.word	0x20000900
 80114f8:	20000b24 	.word	0x20000b24

080114fc <get_serialized_size_std_msgs__msg__ColorRGBA>:
 80114fc:	b1e0      	cbz	r0, 8011538 <get_serialized_size_std_msgs__msg__ColorRGBA+0x3c>
 80114fe:	b570      	push	{r4, r5, r6, lr}
 8011500:	460d      	mov	r5, r1
 8011502:	4628      	mov	r0, r5
 8011504:	2104      	movs	r1, #4
 8011506:	f002 fa27 	bl	8013958 <ucdr_alignment>
 801150a:	1d2b      	adds	r3, r5, #4
 801150c:	181e      	adds	r6, r3, r0
 801150e:	2104      	movs	r1, #4
 8011510:	4630      	mov	r0, r6
 8011512:	f002 fa21 	bl	8013958 <ucdr_alignment>
 8011516:	1d04      	adds	r4, r0, #4
 8011518:	4434      	add	r4, r6
 801151a:	2104      	movs	r1, #4
 801151c:	4620      	mov	r0, r4
 801151e:	f002 fa1b 	bl	8013958 <ucdr_alignment>
 8011522:	3004      	adds	r0, #4
 8011524:	4404      	add	r4, r0
 8011526:	2104      	movs	r1, #4
 8011528:	4620      	mov	r0, r4
 801152a:	f002 fa15 	bl	8013958 <ucdr_alignment>
 801152e:	f1c5 0504 	rsb	r5, r5, #4
 8011532:	4428      	add	r0, r5
 8011534:	4420      	add	r0, r4
 8011536:	bd70      	pop	{r4, r5, r6, pc}
 8011538:	4770      	bx	lr
 801153a:	bf00      	nop

0801153c <_ColorRGBA__cdr_deserialize>:
 801153c:	b538      	push	{r3, r4, r5, lr}
 801153e:	460c      	mov	r4, r1
 8011540:	b191      	cbz	r1, 8011568 <_ColorRGBA__cdr_deserialize+0x2c>
 8011542:	4605      	mov	r5, r0
 8011544:	f001 fd54 	bl	8012ff0 <ucdr_deserialize_float>
 8011548:	1d21      	adds	r1, r4, #4
 801154a:	4628      	mov	r0, r5
 801154c:	f001 fd50 	bl	8012ff0 <ucdr_deserialize_float>
 8011550:	f104 0108 	add.w	r1, r4, #8
 8011554:	4628      	mov	r0, r5
 8011556:	f001 fd4b 	bl	8012ff0 <ucdr_deserialize_float>
 801155a:	f104 010c 	add.w	r1, r4, #12
 801155e:	4628      	mov	r0, r5
 8011560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011564:	f001 bd44 	b.w	8012ff0 <ucdr_deserialize_float>
 8011568:	4608      	mov	r0, r1
 801156a:	bd38      	pop	{r3, r4, r5, pc}

0801156c <_ColorRGBA__cdr_serialize>:
 801156c:	b1c0      	cbz	r0, 80115a0 <_ColorRGBA__cdr_serialize+0x34>
 801156e:	b538      	push	{r3, r4, r5, lr}
 8011570:	ed90 0a00 	vldr	s0, [r0]
 8011574:	460d      	mov	r5, r1
 8011576:	4604      	mov	r4, r0
 8011578:	4608      	mov	r0, r1
 801157a:	f001 fc07 	bl	8012d8c <ucdr_serialize_float>
 801157e:	ed94 0a01 	vldr	s0, [r4, #4]
 8011582:	4628      	mov	r0, r5
 8011584:	f001 fc02 	bl	8012d8c <ucdr_serialize_float>
 8011588:	ed94 0a02 	vldr	s0, [r4, #8]
 801158c:	4628      	mov	r0, r5
 801158e:	f001 fbfd 	bl	8012d8c <ucdr_serialize_float>
 8011592:	ed94 0a03 	vldr	s0, [r4, #12]
 8011596:	4628      	mov	r0, r5
 8011598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801159c:	f001 bbf6 	b.w	8012d8c <ucdr_serialize_float>
 80115a0:	4770      	bx	lr
 80115a2:	bf00      	nop

080115a4 <_ColorRGBA__get_serialized_size>:
 80115a4:	b1c0      	cbz	r0, 80115d8 <_ColorRGBA__get_serialized_size+0x34>
 80115a6:	b538      	push	{r3, r4, r5, lr}
 80115a8:	2104      	movs	r1, #4
 80115aa:	2000      	movs	r0, #0
 80115ac:	f002 f9d4 	bl	8013958 <ucdr_alignment>
 80115b0:	1d05      	adds	r5, r0, #4
 80115b2:	2104      	movs	r1, #4
 80115b4:	4628      	mov	r0, r5
 80115b6:	f002 f9cf 	bl	8013958 <ucdr_alignment>
 80115ba:	1d04      	adds	r4, r0, #4
 80115bc:	442c      	add	r4, r5
 80115be:	2104      	movs	r1, #4
 80115c0:	4620      	mov	r0, r4
 80115c2:	f002 f9c9 	bl	8013958 <ucdr_alignment>
 80115c6:	3004      	adds	r0, #4
 80115c8:	4404      	add	r4, r0
 80115ca:	2104      	movs	r1, #4
 80115cc:	4620      	mov	r0, r4
 80115ce:	f002 f9c3 	bl	8013958 <ucdr_alignment>
 80115d2:	3004      	adds	r0, #4
 80115d4:	4420      	add	r0, r4
 80115d6:	bd38      	pop	{r3, r4, r5, pc}
 80115d8:	4770      	bx	lr
 80115da:	bf00      	nop

080115dc <_ColorRGBA__max_serialized_size>:
 80115dc:	b538      	push	{r3, r4, r5, lr}
 80115de:	2104      	movs	r1, #4
 80115e0:	2000      	movs	r0, #0
 80115e2:	f002 f9b9 	bl	8013958 <ucdr_alignment>
 80115e6:	1d05      	adds	r5, r0, #4
 80115e8:	2104      	movs	r1, #4
 80115ea:	4628      	mov	r0, r5
 80115ec:	f002 f9b4 	bl	8013958 <ucdr_alignment>
 80115f0:	1d04      	adds	r4, r0, #4
 80115f2:	442c      	add	r4, r5
 80115f4:	2104      	movs	r1, #4
 80115f6:	4620      	mov	r0, r4
 80115f8:	f002 f9ae 	bl	8013958 <ucdr_alignment>
 80115fc:	3004      	adds	r0, #4
 80115fe:	4404      	add	r4, r0
 8011600:	2104      	movs	r1, #4
 8011602:	4620      	mov	r0, r4
 8011604:	f002 f9a8 	bl	8013958 <ucdr_alignment>
 8011608:	3004      	adds	r0, #4
 801160a:	4420      	add	r0, r4
 801160c:	bd38      	pop	{r3, r4, r5, pc}
 801160e:	bf00      	nop

08011610 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 8011610:	4800      	ldr	r0, [pc, #0]	; (8011614 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x4>)
 8011612:	4770      	bx	lr
 8011614:	20000984 	.word	0x20000984

08011618 <_Float64MultiArray__max_serialized_size>:
 8011618:	b500      	push	{lr}
 801161a:	b083      	sub	sp, #12
 801161c:	2301      	movs	r3, #1
 801161e:	2100      	movs	r1, #0
 8011620:	f10d 0007 	add.w	r0, sp, #7
 8011624:	f88d 3007 	strb.w	r3, [sp, #7]
 8011628:	f000 fa0c 	bl	8011a44 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 801162c:	b003      	add	sp, #12
 801162e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011632:	bf00      	nop

08011634 <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 8011634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011636:	4604      	mov	r4, r0
 8011638:	b160      	cbz	r0, 8011654 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 801163a:	460d      	mov	r5, r1
 801163c:	f000 f9a6 	bl	801198c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8011640:	182e      	adds	r6, r5, r0
 8011642:	4630      	mov	r0, r6
 8011644:	2104      	movs	r1, #4
 8011646:	6967      	ldr	r7, [r4, #20]
 8011648:	f002 f986 	bl	8013958 <ucdr_alignment>
 801164c:	1d03      	adds	r3, r0, #4
 801164e:	441e      	add	r6, r3
 8011650:	b90f      	cbnz	r7, 8011656 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 8011652:	1b70      	subs	r0, r6, r5
 8011654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011656:	4630      	mov	r0, r6
 8011658:	2108      	movs	r1, #8
 801165a:	f002 f97d 	bl	8013958 <ucdr_alignment>
 801165e:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8011662:	181e      	adds	r6, r3, r0
 8011664:	1b70      	subs	r0, r6, r5
 8011666:	e7f5      	b.n	8011654 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

08011668 <_Float64MultiArray__cdr_deserialize>:
 8011668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801166a:	460c      	mov	r4, r1
 801166c:	b083      	sub	sp, #12
 801166e:	b1d1      	cbz	r1, 80116a6 <_Float64MultiArray__cdr_deserialize+0x3e>
 8011670:	4606      	mov	r6, r0
 8011672:	f000 f9f1 	bl	8011a58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8011676:	6843      	ldr	r3, [r0, #4]
 8011678:	4621      	mov	r1, r4
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	4630      	mov	r0, r6
 801167e:	4798      	blx	r3
 8011680:	69a7      	ldr	r7, [r4, #24]
 8011682:	6921      	ldr	r1, [r4, #16]
 8011684:	ab01      	add	r3, sp, #4
 8011686:	463a      	mov	r2, r7
 8011688:	4630      	mov	r0, r6
 801168a:	f002 fa67 	bl	8013b5c <ucdr_deserialize_sequence_double>
 801168e:	9b01      	ldr	r3, [sp, #4]
 8011690:	4605      	mov	r5, r0
 8011692:	b920      	cbnz	r0, 801169e <_Float64MultiArray__cdr_deserialize+0x36>
 8011694:	429f      	cmp	r7, r3
 8011696:	d30a      	bcc.n	80116ae <_Float64MultiArray__cdr_deserialize+0x46>
 8011698:	4628      	mov	r0, r5
 801169a:	b003      	add	sp, #12
 801169c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801169e:	4628      	mov	r0, r5
 80116a0:	6163      	str	r3, [r4, #20]
 80116a2:	b003      	add	sp, #12
 80116a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116a6:	460d      	mov	r5, r1
 80116a8:	4628      	mov	r0, r5
 80116aa:	b003      	add	sp, #12
 80116ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116ae:	2301      	movs	r3, #1
 80116b0:	75b0      	strb	r0, [r6, #22]
 80116b2:	7573      	strb	r3, [r6, #21]
 80116b4:	4630      	mov	r0, r6
 80116b6:	6165      	str	r5, [r4, #20]
 80116b8:	2108      	movs	r1, #8
 80116ba:	f002 f963 	bl	8013984 <ucdr_align_to>
 80116be:	9901      	ldr	r1, [sp, #4]
 80116c0:	4630      	mov	r0, r6
 80116c2:	00c9      	lsls	r1, r1, #3
 80116c4:	f002 f994 	bl	80139f0 <ucdr_advance_buffer>
 80116c8:	4628      	mov	r0, r5
 80116ca:	b003      	add	sp, #12
 80116cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116ce:	bf00      	nop

080116d0 <_Float64MultiArray__cdr_serialize>:
 80116d0:	b180      	cbz	r0, 80116f4 <_Float64MultiArray__cdr_serialize+0x24>
 80116d2:	b538      	push	{r3, r4, r5, lr}
 80116d4:	460d      	mov	r5, r1
 80116d6:	4604      	mov	r4, r0
 80116d8:	f000 f9be 	bl	8011a58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 80116dc:	6843      	ldr	r3, [r0, #4]
 80116de:	4629      	mov	r1, r5
 80116e0:	689b      	ldr	r3, [r3, #8]
 80116e2:	4620      	mov	r0, r4
 80116e4:	4798      	blx	r3
 80116e6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 80116ea:	4628      	mov	r0, r5
 80116ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116f0:	f002 ba22 	b.w	8013b38 <ucdr_serialize_sequence_double>
 80116f4:	4770      	bx	lr
 80116f6:	bf00      	nop

080116f8 <_Float64MultiArray__get_serialized_size>:
 80116f8:	b570      	push	{r4, r5, r6, lr}
 80116fa:	4604      	mov	r4, r0
 80116fc:	b150      	cbz	r0, 8011714 <_Float64MultiArray__get_serialized_size+0x1c>
 80116fe:	2100      	movs	r1, #0
 8011700:	f000 f944 	bl	801198c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8011704:	2104      	movs	r1, #4
 8011706:	6966      	ldr	r6, [r4, #20]
 8011708:	4605      	mov	r5, r0
 801170a:	f002 f925 	bl	8013958 <ucdr_alignment>
 801170e:	4428      	add	r0, r5
 8011710:	1d04      	adds	r4, r0, #4
 8011712:	b90e      	cbnz	r6, 8011718 <_Float64MultiArray__get_serialized_size+0x20>
 8011714:	4620      	mov	r0, r4
 8011716:	bd70      	pop	{r4, r5, r6, pc}
 8011718:	4620      	mov	r0, r4
 801171a:	2108      	movs	r1, #8
 801171c:	f002 f91c 	bl	8013958 <ucdr_alignment>
 8011720:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8011724:	4404      	add	r4, r0
 8011726:	4620      	mov	r0, r4
 8011728:	bd70      	pop	{r4, r5, r6, pc}
 801172a:	bf00      	nop

0801172c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 801172c:	4800      	ldr	r0, [pc, #0]	; (8011730 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 801172e:	4770      	bx	lr
 8011730:	200009ac 	.word	0x200009ac

08011734 <_Header__max_serialized_size>:
 8011734:	b500      	push	{lr}
 8011736:	b083      	sub	sp, #12
 8011738:	2301      	movs	r3, #1
 801173a:	2100      	movs	r1, #0
 801173c:	f10d 0007 	add.w	r0, sp, #7
 8011740:	f88d 3007 	strb.w	r3, [sp, #7]
 8011744:	f000 f9ee 	bl	8011b24 <max_serialized_size_builtin_interfaces__msg__Time>
 8011748:	b003      	add	sp, #12
 801174a:	f85d fb04 	ldr.w	pc, [sp], #4
 801174e:	bf00      	nop

08011750 <get_serialized_size_std_msgs__msg__Header>:
 8011750:	b570      	push	{r4, r5, r6, lr}
 8011752:	4605      	mov	r5, r0
 8011754:	b168      	cbz	r0, 8011772 <get_serialized_size_std_msgs__msg__Header+0x22>
 8011756:	460c      	mov	r4, r1
 8011758:	f000 f994 	bl	8011a84 <get_serialized_size_builtin_interfaces__msg__Time>
 801175c:	1826      	adds	r6, r4, r0
 801175e:	2104      	movs	r1, #4
 8011760:	4630      	mov	r0, r6
 8011762:	f002 f8f9 	bl	8013958 <ucdr_alignment>
 8011766:	68e9      	ldr	r1, [r5, #12]
 8011768:	f1c4 0405 	rsb	r4, r4, #5
 801176c:	440c      	add	r4, r1
 801176e:	4404      	add	r4, r0
 8011770:	19a0      	adds	r0, r4, r6
 8011772:	bd70      	pop	{r4, r5, r6, pc}

08011774 <_Header__cdr_deserialize>:
 8011774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011776:	460c      	mov	r4, r1
 8011778:	b083      	sub	sp, #12
 801177a:	b1e1      	cbz	r1, 80117b6 <_Header__cdr_deserialize+0x42>
 801177c:	4606      	mov	r6, r0
 801177e:	f000 f9e5 	bl	8011b4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011782:	6843      	ldr	r3, [r0, #4]
 8011784:	4621      	mov	r1, r4
 8011786:	68db      	ldr	r3, [r3, #12]
 8011788:	4630      	mov	r0, r6
 801178a:	4798      	blx	r3
 801178c:	6927      	ldr	r7, [r4, #16]
 801178e:	68a1      	ldr	r1, [r4, #8]
 8011790:	ab01      	add	r3, sp, #4
 8011792:	463a      	mov	r2, r7
 8011794:	4630      	mov	r0, r6
 8011796:	f002 f95d 	bl	8013a54 <ucdr_deserialize_sequence_char>
 801179a:	9b01      	ldr	r3, [sp, #4]
 801179c:	4605      	mov	r5, r0
 801179e:	b920      	cbnz	r0, 80117aa <_Header__cdr_deserialize+0x36>
 80117a0:	429f      	cmp	r7, r3
 80117a2:	d30c      	bcc.n	80117be <_Header__cdr_deserialize+0x4a>
 80117a4:	4628      	mov	r0, r5
 80117a6:	b003      	add	sp, #12
 80117a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117aa:	b103      	cbz	r3, 80117ae <_Header__cdr_deserialize+0x3a>
 80117ac:	3b01      	subs	r3, #1
 80117ae:	4628      	mov	r0, r5
 80117b0:	60e3      	str	r3, [r4, #12]
 80117b2:	b003      	add	sp, #12
 80117b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117b6:	460d      	mov	r5, r1
 80117b8:	4628      	mov	r0, r5
 80117ba:	b003      	add	sp, #12
 80117bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117be:	2101      	movs	r1, #1
 80117c0:	75b0      	strb	r0, [r6, #22]
 80117c2:	7571      	strb	r1, [r6, #21]
 80117c4:	4630      	mov	r0, r6
 80117c6:	60e5      	str	r5, [r4, #12]
 80117c8:	f002 f8dc 	bl	8013984 <ucdr_align_to>
 80117cc:	4630      	mov	r0, r6
 80117ce:	9901      	ldr	r1, [sp, #4]
 80117d0:	f002 f90e 	bl	80139f0 <ucdr_advance_buffer>
 80117d4:	4628      	mov	r0, r5
 80117d6:	b003      	add	sp, #12
 80117d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117da:	bf00      	nop

080117dc <_Header__cdr_serialize>:
 80117dc:	b1f8      	cbz	r0, 801181e <_Header__cdr_serialize+0x42>
 80117de:	b570      	push	{r4, r5, r6, lr}
 80117e0:	4604      	mov	r4, r0
 80117e2:	460d      	mov	r5, r1
 80117e4:	f000 f9b2 	bl	8011b4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80117e8:	6843      	ldr	r3, [r0, #4]
 80117ea:	4629      	mov	r1, r5
 80117ec:	689b      	ldr	r3, [r3, #8]
 80117ee:	4620      	mov	r0, r4
 80117f0:	4798      	blx	r3
 80117f2:	68a6      	ldr	r6, [r4, #8]
 80117f4:	b156      	cbz	r6, 801180c <_Header__cdr_serialize+0x30>
 80117f6:	4630      	mov	r0, r6
 80117f8:	f7ee fcf4 	bl	80001e4 <strlen>
 80117fc:	4631      	mov	r1, r6
 80117fe:	60e0      	str	r0, [r4, #12]
 8011800:	1c42      	adds	r2, r0, #1
 8011802:	4628      	mov	r0, r5
 8011804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011808:	f002 b912 	b.w	8013a30 <ucdr_serialize_sequence_char>
 801180c:	4630      	mov	r0, r6
 801180e:	60e0      	str	r0, [r4, #12]
 8011810:	4632      	mov	r2, r6
 8011812:	4631      	mov	r1, r6
 8011814:	4628      	mov	r0, r5
 8011816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801181a:	f002 b909 	b.w	8013a30 <ucdr_serialize_sequence_char>
 801181e:	4770      	bx	lr

08011820 <_Header__get_serialized_size>:
 8011820:	b538      	push	{r3, r4, r5, lr}
 8011822:	4604      	mov	r4, r0
 8011824:	b150      	cbz	r0, 801183c <_Header__get_serialized_size+0x1c>
 8011826:	2100      	movs	r1, #0
 8011828:	f000 f92c 	bl	8011a84 <get_serialized_size_builtin_interfaces__msg__Time>
 801182c:	2104      	movs	r1, #4
 801182e:	4605      	mov	r5, r0
 8011830:	f002 f892 	bl	8013958 <ucdr_alignment>
 8011834:	68e2      	ldr	r2, [r4, #12]
 8011836:	3205      	adds	r2, #5
 8011838:	1953      	adds	r3, r2, r5
 801183a:	4418      	add	r0, r3
 801183c:	bd38      	pop	{r3, r4, r5, pc}
 801183e:	bf00      	nop

08011840 <max_serialized_size_std_msgs__msg__Header>:
 8011840:	b510      	push	{r4, lr}
 8011842:	2301      	movs	r3, #1
 8011844:	4604      	mov	r4, r0
 8011846:	7003      	strb	r3, [r0, #0]
 8011848:	f000 f96c 	bl	8011b24 <max_serialized_size_builtin_interfaces__msg__Time>
 801184c:	2300      	movs	r3, #0
 801184e:	7023      	strb	r3, [r4, #0]
 8011850:	bd10      	pop	{r4, pc}
 8011852:	bf00      	nop

08011854 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011854:	4800      	ldr	r0, [pc, #0]	; (8011858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8011856:	4770      	bx	lr
 8011858:	200009d4 	.word	0x200009d4

0801185c <_Int32__max_serialized_size>:
 801185c:	b508      	push	{r3, lr}
 801185e:	2104      	movs	r1, #4
 8011860:	2000      	movs	r0, #0
 8011862:	f002 f879 	bl	8013958 <ucdr_alignment>
 8011866:	3004      	adds	r0, #4
 8011868:	bd08      	pop	{r3, pc}
 801186a:	bf00      	nop

0801186c <_Int32__cdr_deserialize>:
 801186c:	b109      	cbz	r1, 8011872 <_Int32__cdr_deserialize+0x6>
 801186e:	f001 b867 	b.w	8012940 <ucdr_deserialize_int32_t>
 8011872:	4608      	mov	r0, r1
 8011874:	4770      	bx	lr
 8011876:	bf00      	nop

08011878 <get_serialized_size_std_msgs__msg__Int32>:
 8011878:	b138      	cbz	r0, 801188a <get_serialized_size_std_msgs__msg__Int32+0x12>
 801187a:	b508      	push	{r3, lr}
 801187c:	460b      	mov	r3, r1
 801187e:	4618      	mov	r0, r3
 8011880:	2104      	movs	r1, #4
 8011882:	f002 f869 	bl	8013958 <ucdr_alignment>
 8011886:	3004      	adds	r0, #4
 8011888:	bd08      	pop	{r3, pc}
 801188a:	4770      	bx	lr

0801188c <_Int32__cdr_serialize>:
 801188c:	460a      	mov	r2, r1
 801188e:	b118      	cbz	r0, 8011898 <_Int32__cdr_serialize+0xc>
 8011890:	6801      	ldr	r1, [r0, #0]
 8011892:	4610      	mov	r0, r2
 8011894:	f000 bfbc 	b.w	8012810 <ucdr_serialize_int32_t>
 8011898:	4770      	bx	lr
 801189a:	bf00      	nop

0801189c <_Int32__get_serialized_size>:
 801189c:	b130      	cbz	r0, 80118ac <_Int32__get_serialized_size+0x10>
 801189e:	b508      	push	{r3, lr}
 80118a0:	2104      	movs	r1, #4
 80118a2:	2000      	movs	r0, #0
 80118a4:	f002 f858 	bl	8013958 <ucdr_alignment>
 80118a8:	3004      	adds	r0, #4
 80118aa:	bd08      	pop	{r3, pc}
 80118ac:	4770      	bx	lr
 80118ae:	bf00      	nop

080118b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80118b0:	4800      	ldr	r0, [pc, #0]	; (80118b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 80118b2:	4770      	bx	lr
 80118b4:	200009fc 	.word	0x200009fc

080118b8 <_Int64__max_serialized_size>:
 80118b8:	b508      	push	{r3, lr}
 80118ba:	2108      	movs	r1, #8
 80118bc:	2000      	movs	r0, #0
 80118be:	f002 f84b 	bl	8013958 <ucdr_alignment>
 80118c2:	3008      	adds	r0, #8
 80118c4:	bd08      	pop	{r3, pc}
 80118c6:	bf00      	nop

080118c8 <_Int64__cdr_deserialize>:
 80118c8:	b109      	cbz	r1, 80118ce <_Int64__cdr_deserialize+0x6>
 80118ca:	f001 b999 	b.w	8012c00 <ucdr_deserialize_int64_t>
 80118ce:	4608      	mov	r0, r1
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop

080118d4 <_Int64__get_serialized_size>:
 80118d4:	b130      	cbz	r0, 80118e4 <_Int64__get_serialized_size+0x10>
 80118d6:	b508      	push	{r3, lr}
 80118d8:	2108      	movs	r1, #8
 80118da:	2000      	movs	r0, #0
 80118dc:	f002 f83c 	bl	8013958 <ucdr_alignment>
 80118e0:	3008      	adds	r0, #8
 80118e2:	bd08      	pop	{r3, pc}
 80118e4:	4770      	bx	lr
 80118e6:	bf00      	nop

080118e8 <_Int64__cdr_serialize>:
 80118e8:	b120      	cbz	r0, 80118f4 <_Int64__cdr_serialize+0xc>
 80118ea:	e9d0 2300 	ldrd	r2, r3, [r0]
 80118ee:	4608      	mov	r0, r1
 80118f0:	f001 b8b6 	b.w	8012a60 <ucdr_serialize_int64_t>
 80118f4:	4770      	bx	lr
 80118f6:	bf00      	nop

080118f8 <get_serialized_size_std_msgs__msg__Int64>:
 80118f8:	b138      	cbz	r0, 801190a <get_serialized_size_std_msgs__msg__Int64+0x12>
 80118fa:	b508      	push	{r3, lr}
 80118fc:	460b      	mov	r3, r1
 80118fe:	4618      	mov	r0, r3
 8011900:	2108      	movs	r1, #8
 8011902:	f002 f829 	bl	8013958 <ucdr_alignment>
 8011906:	3008      	adds	r0, #8
 8011908:	bd08      	pop	{r3, pc}
 801190a:	4770      	bx	lr

0801190c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 801190c:	4800      	ldr	r0, [pc, #0]	; (8011910 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int64+0x4>)
 801190e:	4770      	bx	lr
 8011910:	20000a24 	.word	0x20000a24

08011914 <_MultiArrayLayout__max_serialized_size>:
 8011914:	b508      	push	{r3, lr}
 8011916:	2104      	movs	r1, #4
 8011918:	2000      	movs	r0, #0
 801191a:	f002 f81d 	bl	8013958 <ucdr_alignment>
 801191e:	3004      	adds	r0, #4
 8011920:	bd08      	pop	{r3, pc}
 8011922:	bf00      	nop

08011924 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 8011924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011928:	4689      	mov	r9, r1
 801192a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801192e:	4607      	mov	r7, r0
 8011930:	2104      	movs	r1, #4
 8011932:	4648      	mov	r0, r9
 8011934:	f002 f810 	bl	8013958 <ucdr_alignment>
 8011938:	f109 0304 	add.w	r3, r9, #4
 801193c:	18c6      	adds	r6, r0, r3
 801193e:	f1b8 0f00 	cmp.w	r8, #0
 8011942:	d018      	beq.n	8011976 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 8011944:	2500      	movs	r5, #0
 8011946:	f007 f8f7 	bl	8018b38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 801194a:	683a      	ldr	r2, [r7, #0]
 801194c:	6843      	ldr	r3, [r0, #4]
 801194e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8011952:	4631      	mov	r1, r6
 8011954:	695b      	ldr	r3, [r3, #20]
 8011956:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801195a:	4798      	blx	r3
 801195c:	4604      	mov	r4, r0
 801195e:	2c04      	cmp	r4, #4
 8011960:	4621      	mov	r1, r4
 8011962:	4630      	mov	r0, r6
 8011964:	bf28      	it	cs
 8011966:	2104      	movcs	r1, #4
 8011968:	f001 fff6 	bl	8013958 <ucdr_alignment>
 801196c:	3501      	adds	r5, #1
 801196e:	4404      	add	r4, r0
 8011970:	45a8      	cmp	r8, r5
 8011972:	4426      	add	r6, r4
 8011974:	d1e7      	bne.n	8011946 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 8011976:	2104      	movs	r1, #4
 8011978:	4630      	mov	r0, r6
 801197a:	f001 ffed 	bl	8013958 <ucdr_alignment>
 801197e:	f1c9 0904 	rsb	r9, r9, #4
 8011982:	444e      	add	r6, r9
 8011984:	4430      	add	r0, r6
 8011986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801198a:	bf00      	nop

0801198c <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 801198c:	b108      	cbz	r0, 8011992 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 801198e:	f7ff bfc9 	b.w	8011924 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8011992:	4770      	bx	lr

08011994 <_MultiArrayLayout__get_serialized_size>:
 8011994:	b110      	cbz	r0, 801199c <_MultiArrayLayout__get_serialized_size+0x8>
 8011996:	2100      	movs	r1, #0
 8011998:	f7ff bfc4 	b.w	8011924 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 801199c:	4770      	bx	lr
 801199e:	bf00      	nop

080119a0 <_MultiArrayLayout__cdr_deserialize>:
 80119a0:	b349      	cbz	r1, 80119f6 <_MultiArrayLayout__cdr_deserialize+0x56>
 80119a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119a4:	460e      	mov	r6, r1
 80119a6:	b083      	sub	sp, #12
 80119a8:	a901      	add	r1, sp, #4
 80119aa:	4607      	mov	r7, r0
 80119ac:	f000 fc46 	bl	801223c <ucdr_deserialize_uint32_t>
 80119b0:	9b01      	ldr	r3, [sp, #4]
 80119b2:	68b2      	ldr	r2, [r6, #8]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d31b      	bcc.n	80119f0 <_MultiArrayLayout__cdr_deserialize+0x50>
 80119b8:	6073      	str	r3, [r6, #4]
 80119ba:	b18b      	cbz	r3, 80119e0 <_MultiArrayLayout__cdr_deserialize+0x40>
 80119bc:	2400      	movs	r4, #0
 80119be:	4625      	mov	r5, r4
 80119c0:	e002      	b.n	80119c8 <_MultiArrayLayout__cdr_deserialize+0x28>
 80119c2:	9b01      	ldr	r3, [sp, #4]
 80119c4:	429d      	cmp	r5, r3
 80119c6:	d20b      	bcs.n	80119e0 <_MultiArrayLayout__cdr_deserialize+0x40>
 80119c8:	f007 f8b6 	bl	8018b38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 80119cc:	6831      	ldr	r1, [r6, #0]
 80119ce:	6843      	ldr	r3, [r0, #4]
 80119d0:	4421      	add	r1, r4
 80119d2:	68db      	ldr	r3, [r3, #12]
 80119d4:	4638      	mov	r0, r7
 80119d6:	4798      	blx	r3
 80119d8:	3501      	adds	r5, #1
 80119da:	3414      	adds	r4, #20
 80119dc:	2800      	cmp	r0, #0
 80119de:	d1f0      	bne.n	80119c2 <_MultiArrayLayout__cdr_deserialize+0x22>
 80119e0:	f106 010c 	add.w	r1, r6, #12
 80119e4:	4638      	mov	r0, r7
 80119e6:	b003      	add	sp, #12
 80119e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80119ec:	f000 bc26 	b.w	801223c <ucdr_deserialize_uint32_t>
 80119f0:	2000      	movs	r0, #0
 80119f2:	b003      	add	sp, #12
 80119f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119f6:	2000      	movs	r0, #0
 80119f8:	4770      	bx	lr
 80119fa:	bf00      	nop

080119fc <_MultiArrayLayout__cdr_serialize>:
 80119fc:	b308      	cbz	r0, 8011a42 <_MultiArrayLayout__cdr_serialize+0x46>
 80119fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a00:	6847      	ldr	r7, [r0, #4]
 8011a02:	460e      	mov	r6, r1
 8011a04:	4605      	mov	r5, r0
 8011a06:	4608      	mov	r0, r1
 8011a08:	4639      	mov	r1, r7
 8011a0a:	f000 fae7 	bl	8011fdc <ucdr_serialize_uint32_t>
 8011a0e:	b190      	cbz	r0, 8011a36 <_MultiArrayLayout__cdr_serialize+0x3a>
 8011a10:	b18f      	cbz	r7, 8011a36 <_MultiArrayLayout__cdr_serialize+0x3a>
 8011a12:	2400      	movs	r4, #0
 8011a14:	e001      	b.n	8011a1a <_MultiArrayLayout__cdr_serialize+0x1e>
 8011a16:	42a7      	cmp	r7, r4
 8011a18:	d00d      	beq.n	8011a36 <_MultiArrayLayout__cdr_serialize+0x3a>
 8011a1a:	f007 f88d 	bl	8018b38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8011a1e:	682a      	ldr	r2, [r5, #0]
 8011a20:	6843      	ldr	r3, [r0, #4]
 8011a22:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8011a26:	689b      	ldr	r3, [r3, #8]
 8011a28:	4631      	mov	r1, r6
 8011a2a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8011a2e:	3401      	adds	r4, #1
 8011a30:	4798      	blx	r3
 8011a32:	2800      	cmp	r0, #0
 8011a34:	d1ef      	bne.n	8011a16 <_MultiArrayLayout__cdr_serialize+0x1a>
 8011a36:	68e9      	ldr	r1, [r5, #12]
 8011a38:	4630      	mov	r0, r6
 8011a3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011a3e:	f000 bacd 	b.w	8011fdc <ucdr_serialize_uint32_t>
 8011a42:	4770      	bx	lr

08011a44 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8011a44:	b508      	push	{r3, lr}
 8011a46:	4603      	mov	r3, r0
 8011a48:	2200      	movs	r2, #0
 8011a4a:	4608      	mov	r0, r1
 8011a4c:	701a      	strb	r2, [r3, #0]
 8011a4e:	2104      	movs	r1, #4
 8011a50:	f001 ff82 	bl	8013958 <ucdr_alignment>
 8011a54:	3004      	adds	r0, #4
 8011a56:	bd08      	pop	{r3, pc}

08011a58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8011a58:	4800      	ldr	r0, [pc, #0]	; (8011a5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 8011a5a:	4770      	bx	lr
 8011a5c:	20000a4c 	.word	0x20000a4c

08011a60 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8011a60:	f007 b86e 	b.w	8018b40 <builtin_interfaces__msg__Time__init>

08011a64 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8011a64:	f007 b870 	b.w	8018b48 <builtin_interfaces__msg__Time__fini>

08011a68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011a68:	4b04      	ldr	r3, [pc, #16]	; (8011a7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011a6a:	681a      	ldr	r2, [r3, #0]
 8011a6c:	b10a      	cbz	r2, 8011a72 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8011a6e:	4803      	ldr	r0, [pc, #12]	; (8011a7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011a70:	4770      	bx	lr
 8011a72:	4a03      	ldr	r2, [pc, #12]	; (8011a80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8011a74:	4801      	ldr	r0, [pc, #4]	; (8011a7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011a76:	6812      	ldr	r2, [r2, #0]
 8011a78:	601a      	str	r2, [r3, #0]
 8011a7a:	4770      	bx	lr
 8011a7c:	20000aec 	.word	0x20000aec
 8011a80:	20000b24 	.word	0x20000b24

08011a84 <get_serialized_size_builtin_interfaces__msg__Time>:
 8011a84:	b180      	cbz	r0, 8011aa8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8011a86:	b538      	push	{r3, r4, r5, lr}
 8011a88:	460d      	mov	r5, r1
 8011a8a:	4628      	mov	r0, r5
 8011a8c:	2104      	movs	r1, #4
 8011a8e:	f001 ff63 	bl	8013958 <ucdr_alignment>
 8011a92:	1d2b      	adds	r3, r5, #4
 8011a94:	181c      	adds	r4, r3, r0
 8011a96:	2104      	movs	r1, #4
 8011a98:	4620      	mov	r0, r4
 8011a9a:	f001 ff5d 	bl	8013958 <ucdr_alignment>
 8011a9e:	f1c5 0504 	rsb	r5, r5, #4
 8011aa2:	4428      	add	r0, r5
 8011aa4:	4420      	add	r0, r4
 8011aa6:	bd38      	pop	{r3, r4, r5, pc}
 8011aa8:	4770      	bx	lr
 8011aaa:	bf00      	nop

08011aac <_Time__cdr_deserialize>:
 8011aac:	b538      	push	{r3, r4, r5, lr}
 8011aae:	460c      	mov	r4, r1
 8011ab0:	b141      	cbz	r1, 8011ac4 <_Time__cdr_deserialize+0x18>
 8011ab2:	4605      	mov	r5, r0
 8011ab4:	f000 ff44 	bl	8012940 <ucdr_deserialize_int32_t>
 8011ab8:	1d21      	adds	r1, r4, #4
 8011aba:	4628      	mov	r0, r5
 8011abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ac0:	f000 bbbc 	b.w	801223c <ucdr_deserialize_uint32_t>
 8011ac4:	4608      	mov	r0, r1
 8011ac6:	bd38      	pop	{r3, r4, r5, pc}

08011ac8 <_Time__cdr_serialize>:
 8011ac8:	b160      	cbz	r0, 8011ae4 <_Time__cdr_serialize+0x1c>
 8011aca:	b538      	push	{r3, r4, r5, lr}
 8011acc:	460d      	mov	r5, r1
 8011ace:	4604      	mov	r4, r0
 8011ad0:	6801      	ldr	r1, [r0, #0]
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	f000 fe9c 	bl	8012810 <ucdr_serialize_int32_t>
 8011ad8:	6861      	ldr	r1, [r4, #4]
 8011ada:	4628      	mov	r0, r5
 8011adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ae0:	f000 ba7c 	b.w	8011fdc <ucdr_serialize_uint32_t>
 8011ae4:	4770      	bx	lr
 8011ae6:	bf00      	nop

08011ae8 <_Time__get_serialized_size>:
 8011ae8:	b160      	cbz	r0, 8011b04 <_Time__get_serialized_size+0x1c>
 8011aea:	b510      	push	{r4, lr}
 8011aec:	2104      	movs	r1, #4
 8011aee:	2000      	movs	r0, #0
 8011af0:	f001 ff32 	bl	8013958 <ucdr_alignment>
 8011af4:	1d04      	adds	r4, r0, #4
 8011af6:	2104      	movs	r1, #4
 8011af8:	4620      	mov	r0, r4
 8011afa:	f001 ff2d 	bl	8013958 <ucdr_alignment>
 8011afe:	3004      	adds	r0, #4
 8011b00:	4420      	add	r0, r4
 8011b02:	bd10      	pop	{r4, pc}
 8011b04:	4770      	bx	lr
 8011b06:	bf00      	nop

08011b08 <_Time__max_serialized_size>:
 8011b08:	b510      	push	{r4, lr}
 8011b0a:	2104      	movs	r1, #4
 8011b0c:	2000      	movs	r0, #0
 8011b0e:	f001 ff23 	bl	8013958 <ucdr_alignment>
 8011b12:	1d04      	adds	r4, r0, #4
 8011b14:	2104      	movs	r1, #4
 8011b16:	4620      	mov	r0, r4
 8011b18:	f001 ff1e 	bl	8013958 <ucdr_alignment>
 8011b1c:	3004      	adds	r0, #4
 8011b1e:	4420      	add	r0, r4
 8011b20:	bd10      	pop	{r4, pc}
 8011b22:	bf00      	nop

08011b24 <max_serialized_size_builtin_interfaces__msg__Time>:
 8011b24:	b538      	push	{r3, r4, r5, lr}
 8011b26:	460c      	mov	r4, r1
 8011b28:	2301      	movs	r3, #1
 8011b2a:	7003      	strb	r3, [r0, #0]
 8011b2c:	2104      	movs	r1, #4
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f001 ff12 	bl	8013958 <ucdr_alignment>
 8011b34:	1d25      	adds	r5, r4, #4
 8011b36:	4405      	add	r5, r0
 8011b38:	2104      	movs	r1, #4
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	f001 ff0c 	bl	8013958 <ucdr_alignment>
 8011b40:	f1c4 0404 	rsb	r4, r4, #4
 8011b44:	4420      	add	r0, r4
 8011b46:	4428      	add	r0, r5
 8011b48:	bd38      	pop	{r3, r4, r5, pc}
 8011b4a:	bf00      	nop

08011b4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011b4c:	4800      	ldr	r0, [pc, #0]	; (8011b50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8011b4e:	4770      	bx	lr
 8011b50:	20000af8 	.word	0x20000af8

08011b54 <ucdr_serialize_bool>:
 8011b54:	b538      	push	{r3, r4, r5, lr}
 8011b56:	460d      	mov	r5, r1
 8011b58:	2101      	movs	r1, #1
 8011b5a:	4604      	mov	r4, r0
 8011b5c:	f001 feb0 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8011b60:	b148      	cbz	r0, 8011b76 <ucdr_serialize_bool+0x22>
 8011b62:	68a3      	ldr	r3, [r4, #8]
 8011b64:	701d      	strb	r5, [r3, #0]
 8011b66:	68a2      	ldr	r2, [r4, #8]
 8011b68:	6923      	ldr	r3, [r4, #16]
 8011b6a:	2101      	movs	r1, #1
 8011b6c:	440a      	add	r2, r1
 8011b6e:	440b      	add	r3, r1
 8011b70:	60a2      	str	r2, [r4, #8]
 8011b72:	6123      	str	r3, [r4, #16]
 8011b74:	7561      	strb	r1, [r4, #21]
 8011b76:	7da0      	ldrb	r0, [r4, #22]
 8011b78:	f080 0001 	eor.w	r0, r0, #1
 8011b7c:	bd38      	pop	{r3, r4, r5, pc}
 8011b7e:	bf00      	nop

08011b80 <ucdr_deserialize_bool>:
 8011b80:	b538      	push	{r3, r4, r5, lr}
 8011b82:	460d      	mov	r5, r1
 8011b84:	2101      	movs	r1, #1
 8011b86:	4604      	mov	r4, r0
 8011b88:	f001 fe9a 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8011b8c:	b160      	cbz	r0, 8011ba8 <ucdr_deserialize_bool+0x28>
 8011b8e:	68a2      	ldr	r2, [r4, #8]
 8011b90:	6923      	ldr	r3, [r4, #16]
 8011b92:	f812 1b01 	ldrb.w	r1, [r2], #1
 8011b96:	3900      	subs	r1, #0
 8011b98:	bf18      	it	ne
 8011b9a:	2101      	movne	r1, #1
 8011b9c:	7029      	strb	r1, [r5, #0]
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	2101      	movs	r1, #1
 8011ba2:	60a2      	str	r2, [r4, #8]
 8011ba4:	6123      	str	r3, [r4, #16]
 8011ba6:	7561      	strb	r1, [r4, #21]
 8011ba8:	7da0      	ldrb	r0, [r4, #22]
 8011baa:	f080 0001 	eor.w	r0, r0, #1
 8011bae:	bd38      	pop	{r3, r4, r5, pc}

08011bb0 <ucdr_serialize_uint8_t>:
 8011bb0:	b538      	push	{r3, r4, r5, lr}
 8011bb2:	460d      	mov	r5, r1
 8011bb4:	2101      	movs	r1, #1
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	f001 fe82 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8011bbc:	b148      	cbz	r0, 8011bd2 <ucdr_serialize_uint8_t+0x22>
 8011bbe:	68a3      	ldr	r3, [r4, #8]
 8011bc0:	701d      	strb	r5, [r3, #0]
 8011bc2:	68a2      	ldr	r2, [r4, #8]
 8011bc4:	6923      	ldr	r3, [r4, #16]
 8011bc6:	2101      	movs	r1, #1
 8011bc8:	440a      	add	r2, r1
 8011bca:	440b      	add	r3, r1
 8011bcc:	60a2      	str	r2, [r4, #8]
 8011bce:	6123      	str	r3, [r4, #16]
 8011bd0:	7561      	strb	r1, [r4, #21]
 8011bd2:	7da0      	ldrb	r0, [r4, #22]
 8011bd4:	f080 0001 	eor.w	r0, r0, #1
 8011bd8:	bd38      	pop	{r3, r4, r5, pc}
 8011bda:	bf00      	nop

08011bdc <ucdr_deserialize_uint8_t>:
 8011bdc:	b538      	push	{r3, r4, r5, lr}
 8011bde:	460d      	mov	r5, r1
 8011be0:	2101      	movs	r1, #1
 8011be2:	4604      	mov	r4, r0
 8011be4:	f001 fe6c 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8011be8:	b150      	cbz	r0, 8011c00 <ucdr_deserialize_uint8_t+0x24>
 8011bea:	68a3      	ldr	r3, [r4, #8]
 8011bec:	781b      	ldrb	r3, [r3, #0]
 8011bee:	702b      	strb	r3, [r5, #0]
 8011bf0:	68a2      	ldr	r2, [r4, #8]
 8011bf2:	6923      	ldr	r3, [r4, #16]
 8011bf4:	2101      	movs	r1, #1
 8011bf6:	440a      	add	r2, r1
 8011bf8:	440b      	add	r3, r1
 8011bfa:	60a2      	str	r2, [r4, #8]
 8011bfc:	6123      	str	r3, [r4, #16]
 8011bfe:	7561      	strb	r1, [r4, #21]
 8011c00:	7da0      	ldrb	r0, [r4, #22]
 8011c02:	f080 0001 	eor.w	r0, r0, #1
 8011c06:	bd38      	pop	{r3, r4, r5, pc}

08011c08 <ucdr_serialize_uint16_t>:
 8011c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c0c:	b082      	sub	sp, #8
 8011c0e:	460b      	mov	r3, r1
 8011c10:	2102      	movs	r1, #2
 8011c12:	4604      	mov	r4, r0
 8011c14:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011c18:	f001 fea6 	bl	8013968 <ucdr_buffer_alignment>
 8011c1c:	4601      	mov	r1, r0
 8011c1e:	4620      	mov	r0, r4
 8011c20:	7d67      	ldrb	r7, [r4, #21]
 8011c22:	f001 fee5 	bl	80139f0 <ucdr_advance_buffer>
 8011c26:	2102      	movs	r1, #2
 8011c28:	4620      	mov	r0, r4
 8011c2a:	f001 fe3d 	bl	80138a8 <ucdr_check_buffer_available_for>
 8011c2e:	bb78      	cbnz	r0, 8011c90 <ucdr_serialize_uint16_t+0x88>
 8011c30:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011c34:	42ab      	cmp	r3, r5
 8011c36:	d926      	bls.n	8011c86 <ucdr_serialize_uint16_t+0x7e>
 8011c38:	1b5e      	subs	r6, r3, r5
 8011c3a:	60a3      	str	r3, [r4, #8]
 8011c3c:	6923      	ldr	r3, [r4, #16]
 8011c3e:	f1c6 0802 	rsb	r8, r6, #2
 8011c42:	4433      	add	r3, r6
 8011c44:	6123      	str	r3, [r4, #16]
 8011c46:	4641      	mov	r1, r8
 8011c48:	4620      	mov	r0, r4
 8011c4a:	f001 fe39 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8011c4e:	2800      	cmp	r0, #0
 8011c50:	d03b      	beq.n	8011cca <ucdr_serialize_uint16_t+0xc2>
 8011c52:	7d23      	ldrb	r3, [r4, #20]
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	d04a      	beq.n	8011cee <ucdr_serialize_uint16_t+0xe6>
 8011c58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011c5c:	702b      	strb	r3, [r5, #0]
 8011c5e:	2e00      	cmp	r6, #0
 8011c60:	d040      	beq.n	8011ce4 <ucdr_serialize_uint16_t+0xdc>
 8011c62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011c66:	706b      	strb	r3, [r5, #1]
 8011c68:	6923      	ldr	r3, [r4, #16]
 8011c6a:	68a2      	ldr	r2, [r4, #8]
 8011c6c:	7da0      	ldrb	r0, [r4, #22]
 8011c6e:	3302      	adds	r3, #2
 8011c70:	1b9e      	subs	r6, r3, r6
 8011c72:	4442      	add	r2, r8
 8011c74:	2302      	movs	r3, #2
 8011c76:	f080 0001 	eor.w	r0, r0, #1
 8011c7a:	60a2      	str	r2, [r4, #8]
 8011c7c:	6126      	str	r6, [r4, #16]
 8011c7e:	7563      	strb	r3, [r4, #21]
 8011c80:	b002      	add	sp, #8
 8011c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c86:	2102      	movs	r1, #2
 8011c88:	4620      	mov	r0, r4
 8011c8a:	f001 fe19 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8011c8e:	b190      	cbz	r0, 8011cb6 <ucdr_serialize_uint16_t+0xae>
 8011c90:	7d23      	ldrb	r3, [r4, #20]
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	68a3      	ldr	r3, [r4, #8]
 8011c96:	d014      	beq.n	8011cc2 <ucdr_serialize_uint16_t+0xba>
 8011c98:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011c9c:	701a      	strb	r2, [r3, #0]
 8011c9e:	68a3      	ldr	r3, [r4, #8]
 8011ca0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011ca4:	705a      	strb	r2, [r3, #1]
 8011ca6:	68a2      	ldr	r2, [r4, #8]
 8011ca8:	6923      	ldr	r3, [r4, #16]
 8011caa:	3202      	adds	r2, #2
 8011cac:	3302      	adds	r3, #2
 8011cae:	2102      	movs	r1, #2
 8011cb0:	60a2      	str	r2, [r4, #8]
 8011cb2:	6123      	str	r3, [r4, #16]
 8011cb4:	7561      	strb	r1, [r4, #21]
 8011cb6:	7da0      	ldrb	r0, [r4, #22]
 8011cb8:	f080 0001 	eor.w	r0, r0, #1
 8011cbc:	b002      	add	sp, #8
 8011cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cc2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011cc6:	801a      	strh	r2, [r3, #0]
 8011cc8:	e7ed      	b.n	8011ca6 <ucdr_serialize_uint16_t+0x9e>
 8011cca:	68a2      	ldr	r2, [r4, #8]
 8011ccc:	6923      	ldr	r3, [r4, #16]
 8011cce:	7da0      	ldrb	r0, [r4, #22]
 8011cd0:	7567      	strb	r7, [r4, #21]
 8011cd2:	1b92      	subs	r2, r2, r6
 8011cd4:	1b9b      	subs	r3, r3, r6
 8011cd6:	f080 0001 	eor.w	r0, r0, #1
 8011cda:	60a2      	str	r2, [r4, #8]
 8011cdc:	6123      	str	r3, [r4, #16]
 8011cde:	b002      	add	sp, #8
 8011ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ce4:	68a3      	ldr	r3, [r4, #8]
 8011ce6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011cea:	701a      	strb	r2, [r3, #0]
 8011cec:	e7bc      	b.n	8011c68 <ucdr_serialize_uint16_t+0x60>
 8011cee:	4628      	mov	r0, r5
 8011cf0:	f10d 0506 	add.w	r5, sp, #6
 8011cf4:	4629      	mov	r1, r5
 8011cf6:	4632      	mov	r2, r6
 8011cf8:	f009 fc2e 	bl	801b558 <memcpy>
 8011cfc:	68a0      	ldr	r0, [r4, #8]
 8011cfe:	4642      	mov	r2, r8
 8011d00:	19a9      	adds	r1, r5, r6
 8011d02:	f009 fc29 	bl	801b558 <memcpy>
 8011d06:	e7af      	b.n	8011c68 <ucdr_serialize_uint16_t+0x60>

08011d08 <ucdr_serialize_endian_uint16_t>:
 8011d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d0c:	b083      	sub	sp, #12
 8011d0e:	460d      	mov	r5, r1
 8011d10:	2102      	movs	r1, #2
 8011d12:	4604      	mov	r4, r0
 8011d14:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011d18:	f001 fe26 	bl	8013968 <ucdr_buffer_alignment>
 8011d1c:	4601      	mov	r1, r0
 8011d1e:	4620      	mov	r0, r4
 8011d20:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011d24:	f001 fe64 	bl	80139f0 <ucdr_advance_buffer>
 8011d28:	2102      	movs	r1, #2
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	f001 fdbc 	bl	80138a8 <ucdr_check_buffer_available_for>
 8011d30:	bb70      	cbnz	r0, 8011d90 <ucdr_serialize_endian_uint16_t+0x88>
 8011d32:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011d36:	42be      	cmp	r6, r7
 8011d38:	d925      	bls.n	8011d86 <ucdr_serialize_endian_uint16_t+0x7e>
 8011d3a:	6923      	ldr	r3, [r4, #16]
 8011d3c:	60a6      	str	r6, [r4, #8]
 8011d3e:	1bf6      	subs	r6, r6, r7
 8011d40:	4433      	add	r3, r6
 8011d42:	f1c6 0902 	rsb	r9, r6, #2
 8011d46:	6123      	str	r3, [r4, #16]
 8011d48:	4649      	mov	r1, r9
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	f001 fdb8 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8011d50:	2800      	cmp	r0, #0
 8011d52:	d039      	beq.n	8011dc8 <ucdr_serialize_endian_uint16_t+0xc0>
 8011d54:	2d01      	cmp	r5, #1
 8011d56:	d04a      	beq.n	8011dee <ucdr_serialize_endian_uint16_t+0xe6>
 8011d58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011d5c:	703b      	strb	r3, [r7, #0]
 8011d5e:	2e00      	cmp	r6, #0
 8011d60:	d040      	beq.n	8011de4 <ucdr_serialize_endian_uint16_t+0xdc>
 8011d62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011d66:	707b      	strb	r3, [r7, #1]
 8011d68:	6923      	ldr	r3, [r4, #16]
 8011d6a:	68a2      	ldr	r2, [r4, #8]
 8011d6c:	7da0      	ldrb	r0, [r4, #22]
 8011d6e:	3302      	adds	r3, #2
 8011d70:	444a      	add	r2, r9
 8011d72:	1b9b      	subs	r3, r3, r6
 8011d74:	2102      	movs	r1, #2
 8011d76:	f080 0001 	eor.w	r0, r0, #1
 8011d7a:	60a2      	str	r2, [r4, #8]
 8011d7c:	6123      	str	r3, [r4, #16]
 8011d7e:	7561      	strb	r1, [r4, #21]
 8011d80:	b003      	add	sp, #12
 8011d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d86:	2102      	movs	r1, #2
 8011d88:	4620      	mov	r0, r4
 8011d8a:	f001 fd99 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8011d8e:	b188      	cbz	r0, 8011db4 <ucdr_serialize_endian_uint16_t+0xac>
 8011d90:	2d01      	cmp	r5, #1
 8011d92:	68a3      	ldr	r3, [r4, #8]
 8011d94:	d014      	beq.n	8011dc0 <ucdr_serialize_endian_uint16_t+0xb8>
 8011d96:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011d9a:	701a      	strb	r2, [r3, #0]
 8011d9c:	68a3      	ldr	r3, [r4, #8]
 8011d9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011da2:	705a      	strb	r2, [r3, #1]
 8011da4:	68a2      	ldr	r2, [r4, #8]
 8011da6:	6923      	ldr	r3, [r4, #16]
 8011da8:	3202      	adds	r2, #2
 8011daa:	3302      	adds	r3, #2
 8011dac:	2102      	movs	r1, #2
 8011dae:	60a2      	str	r2, [r4, #8]
 8011db0:	6123      	str	r3, [r4, #16]
 8011db2:	7561      	strb	r1, [r4, #21]
 8011db4:	7da0      	ldrb	r0, [r4, #22]
 8011db6:	f080 0001 	eor.w	r0, r0, #1
 8011dba:	b003      	add	sp, #12
 8011dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dc0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011dc4:	801a      	strh	r2, [r3, #0]
 8011dc6:	e7ed      	b.n	8011da4 <ucdr_serialize_endian_uint16_t+0x9c>
 8011dc8:	68a2      	ldr	r2, [r4, #8]
 8011dca:	6923      	ldr	r3, [r4, #16]
 8011dcc:	7da0      	ldrb	r0, [r4, #22]
 8011dce:	f884 8015 	strb.w	r8, [r4, #21]
 8011dd2:	1b92      	subs	r2, r2, r6
 8011dd4:	1b9b      	subs	r3, r3, r6
 8011dd6:	f080 0001 	eor.w	r0, r0, #1
 8011dda:	60a2      	str	r2, [r4, #8]
 8011ddc:	6123      	str	r3, [r4, #16]
 8011dde:	b003      	add	sp, #12
 8011de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011de4:	68a3      	ldr	r3, [r4, #8]
 8011de6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011dea:	701a      	strb	r2, [r3, #0]
 8011dec:	e7bc      	b.n	8011d68 <ucdr_serialize_endian_uint16_t+0x60>
 8011dee:	f10d 0506 	add.w	r5, sp, #6
 8011df2:	4629      	mov	r1, r5
 8011df4:	4632      	mov	r2, r6
 8011df6:	4638      	mov	r0, r7
 8011df8:	f009 fbae 	bl	801b558 <memcpy>
 8011dfc:	68a0      	ldr	r0, [r4, #8]
 8011dfe:	464a      	mov	r2, r9
 8011e00:	19a9      	adds	r1, r5, r6
 8011e02:	f009 fba9 	bl	801b558 <memcpy>
 8011e06:	e7af      	b.n	8011d68 <ucdr_serialize_endian_uint16_t+0x60>

08011e08 <ucdr_deserialize_uint16_t>:
 8011e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e0c:	460d      	mov	r5, r1
 8011e0e:	2102      	movs	r1, #2
 8011e10:	4604      	mov	r4, r0
 8011e12:	f001 fda9 	bl	8013968 <ucdr_buffer_alignment>
 8011e16:	4601      	mov	r1, r0
 8011e18:	4620      	mov	r0, r4
 8011e1a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011e1e:	f001 fde7 	bl	80139f0 <ucdr_advance_buffer>
 8011e22:	2102      	movs	r1, #2
 8011e24:	4620      	mov	r0, r4
 8011e26:	f001 fd3f 	bl	80138a8 <ucdr_check_buffer_available_for>
 8011e2a:	bb60      	cbnz	r0, 8011e86 <ucdr_deserialize_uint16_t+0x7e>
 8011e2c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011e30:	42be      	cmp	r6, r7
 8011e32:	d923      	bls.n	8011e7c <ucdr_deserialize_uint16_t+0x74>
 8011e34:	6923      	ldr	r3, [r4, #16]
 8011e36:	60a6      	str	r6, [r4, #8]
 8011e38:	1bf6      	subs	r6, r6, r7
 8011e3a:	4433      	add	r3, r6
 8011e3c:	f1c6 0902 	rsb	r9, r6, #2
 8011e40:	6123      	str	r3, [r4, #16]
 8011e42:	4649      	mov	r1, r9
 8011e44:	4620      	mov	r0, r4
 8011e46:	f001 fd3b 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8011e4a:	2800      	cmp	r0, #0
 8011e4c:	d034      	beq.n	8011eb8 <ucdr_deserialize_uint16_t+0xb0>
 8011e4e:	7d23      	ldrb	r3, [r4, #20]
 8011e50:	2b01      	cmp	r3, #1
 8011e52:	d042      	beq.n	8011eda <ucdr_deserialize_uint16_t+0xd2>
 8011e54:	787b      	ldrb	r3, [r7, #1]
 8011e56:	702b      	strb	r3, [r5, #0]
 8011e58:	2e00      	cmp	r6, #0
 8011e5a:	d03a      	beq.n	8011ed2 <ucdr_deserialize_uint16_t+0xca>
 8011e5c:	783b      	ldrb	r3, [r7, #0]
 8011e5e:	706b      	strb	r3, [r5, #1]
 8011e60:	6923      	ldr	r3, [r4, #16]
 8011e62:	68a2      	ldr	r2, [r4, #8]
 8011e64:	7da0      	ldrb	r0, [r4, #22]
 8011e66:	2102      	movs	r1, #2
 8011e68:	3302      	adds	r3, #2
 8011e6a:	444a      	add	r2, r9
 8011e6c:	1b9b      	subs	r3, r3, r6
 8011e6e:	7561      	strb	r1, [r4, #21]
 8011e70:	60a2      	str	r2, [r4, #8]
 8011e72:	6123      	str	r3, [r4, #16]
 8011e74:	f080 0001 	eor.w	r0, r0, #1
 8011e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e7c:	2102      	movs	r1, #2
 8011e7e:	4620      	mov	r0, r4
 8011e80:	f001 fd1e 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8011e84:	b180      	cbz	r0, 8011ea8 <ucdr_deserialize_uint16_t+0xa0>
 8011e86:	7d23      	ldrb	r3, [r4, #20]
 8011e88:	2b01      	cmp	r3, #1
 8011e8a:	68a3      	ldr	r3, [r4, #8]
 8011e8c:	d011      	beq.n	8011eb2 <ucdr_deserialize_uint16_t+0xaa>
 8011e8e:	785b      	ldrb	r3, [r3, #1]
 8011e90:	702b      	strb	r3, [r5, #0]
 8011e92:	68a3      	ldr	r3, [r4, #8]
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	706b      	strb	r3, [r5, #1]
 8011e98:	68a2      	ldr	r2, [r4, #8]
 8011e9a:	6923      	ldr	r3, [r4, #16]
 8011e9c:	3202      	adds	r2, #2
 8011e9e:	3302      	adds	r3, #2
 8011ea0:	2102      	movs	r1, #2
 8011ea2:	60a2      	str	r2, [r4, #8]
 8011ea4:	6123      	str	r3, [r4, #16]
 8011ea6:	7561      	strb	r1, [r4, #21]
 8011ea8:	7da0      	ldrb	r0, [r4, #22]
 8011eaa:	f080 0001 	eor.w	r0, r0, #1
 8011eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eb2:	881b      	ldrh	r3, [r3, #0]
 8011eb4:	802b      	strh	r3, [r5, #0]
 8011eb6:	e7ef      	b.n	8011e98 <ucdr_deserialize_uint16_t+0x90>
 8011eb8:	68a2      	ldr	r2, [r4, #8]
 8011eba:	6923      	ldr	r3, [r4, #16]
 8011ebc:	7da0      	ldrb	r0, [r4, #22]
 8011ebe:	f884 8015 	strb.w	r8, [r4, #21]
 8011ec2:	1b92      	subs	r2, r2, r6
 8011ec4:	1b9b      	subs	r3, r3, r6
 8011ec6:	60a2      	str	r2, [r4, #8]
 8011ec8:	6123      	str	r3, [r4, #16]
 8011eca:	f080 0001 	eor.w	r0, r0, #1
 8011ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ed2:	68a3      	ldr	r3, [r4, #8]
 8011ed4:	781b      	ldrb	r3, [r3, #0]
 8011ed6:	706b      	strb	r3, [r5, #1]
 8011ed8:	e7c2      	b.n	8011e60 <ucdr_deserialize_uint16_t+0x58>
 8011eda:	4639      	mov	r1, r7
 8011edc:	4632      	mov	r2, r6
 8011ede:	4628      	mov	r0, r5
 8011ee0:	f009 fb3a 	bl	801b558 <memcpy>
 8011ee4:	68a1      	ldr	r1, [r4, #8]
 8011ee6:	464a      	mov	r2, r9
 8011ee8:	19a8      	adds	r0, r5, r6
 8011eea:	f009 fb35 	bl	801b558 <memcpy>
 8011eee:	e7b7      	b.n	8011e60 <ucdr_deserialize_uint16_t+0x58>

08011ef0 <ucdr_deserialize_endian_uint16_t>:
 8011ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ef4:	460e      	mov	r6, r1
 8011ef6:	2102      	movs	r1, #2
 8011ef8:	4604      	mov	r4, r0
 8011efa:	4615      	mov	r5, r2
 8011efc:	f001 fd34 	bl	8013968 <ucdr_buffer_alignment>
 8011f00:	4601      	mov	r1, r0
 8011f02:	4620      	mov	r0, r4
 8011f04:	f894 9015 	ldrb.w	r9, [r4, #21]
 8011f08:	f001 fd72 	bl	80139f0 <ucdr_advance_buffer>
 8011f0c:	2102      	movs	r1, #2
 8011f0e:	4620      	mov	r0, r4
 8011f10:	f001 fcca 	bl	80138a8 <ucdr_check_buffer_available_for>
 8011f14:	bb70      	cbnz	r0, 8011f74 <ucdr_deserialize_endian_uint16_t+0x84>
 8011f16:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8011f1a:	4547      	cmp	r7, r8
 8011f1c:	d925      	bls.n	8011f6a <ucdr_deserialize_endian_uint16_t+0x7a>
 8011f1e:	6923      	ldr	r3, [r4, #16]
 8011f20:	60a7      	str	r7, [r4, #8]
 8011f22:	eba7 0708 	sub.w	r7, r7, r8
 8011f26:	443b      	add	r3, r7
 8011f28:	f1c7 0a02 	rsb	sl, r7, #2
 8011f2c:	6123      	str	r3, [r4, #16]
 8011f2e:	4651      	mov	r1, sl
 8011f30:	4620      	mov	r0, r4
 8011f32:	f001 fcc5 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8011f36:	2800      	cmp	r0, #0
 8011f38:	d034      	beq.n	8011fa4 <ucdr_deserialize_endian_uint16_t+0xb4>
 8011f3a:	2e01      	cmp	r6, #1
 8011f3c:	d043      	beq.n	8011fc6 <ucdr_deserialize_endian_uint16_t+0xd6>
 8011f3e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011f42:	702b      	strb	r3, [r5, #0]
 8011f44:	2f00      	cmp	r7, #0
 8011f46:	d03a      	beq.n	8011fbe <ucdr_deserialize_endian_uint16_t+0xce>
 8011f48:	f898 3000 	ldrb.w	r3, [r8]
 8011f4c:	706b      	strb	r3, [r5, #1]
 8011f4e:	6923      	ldr	r3, [r4, #16]
 8011f50:	68a2      	ldr	r2, [r4, #8]
 8011f52:	7da0      	ldrb	r0, [r4, #22]
 8011f54:	2102      	movs	r1, #2
 8011f56:	3302      	adds	r3, #2
 8011f58:	4452      	add	r2, sl
 8011f5a:	1bdb      	subs	r3, r3, r7
 8011f5c:	7561      	strb	r1, [r4, #21]
 8011f5e:	60a2      	str	r2, [r4, #8]
 8011f60:	6123      	str	r3, [r4, #16]
 8011f62:	f080 0001 	eor.w	r0, r0, #1
 8011f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f6a:	2102      	movs	r1, #2
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	f001 fca7 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8011f72:	b178      	cbz	r0, 8011f94 <ucdr_deserialize_endian_uint16_t+0xa4>
 8011f74:	2e01      	cmp	r6, #1
 8011f76:	68a3      	ldr	r3, [r4, #8]
 8011f78:	d011      	beq.n	8011f9e <ucdr_deserialize_endian_uint16_t+0xae>
 8011f7a:	785b      	ldrb	r3, [r3, #1]
 8011f7c:	702b      	strb	r3, [r5, #0]
 8011f7e:	68a3      	ldr	r3, [r4, #8]
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	706b      	strb	r3, [r5, #1]
 8011f84:	68a2      	ldr	r2, [r4, #8]
 8011f86:	6923      	ldr	r3, [r4, #16]
 8011f88:	3202      	adds	r2, #2
 8011f8a:	3302      	adds	r3, #2
 8011f8c:	2102      	movs	r1, #2
 8011f8e:	60a2      	str	r2, [r4, #8]
 8011f90:	6123      	str	r3, [r4, #16]
 8011f92:	7561      	strb	r1, [r4, #21]
 8011f94:	7da0      	ldrb	r0, [r4, #22]
 8011f96:	f080 0001 	eor.w	r0, r0, #1
 8011f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f9e:	881b      	ldrh	r3, [r3, #0]
 8011fa0:	802b      	strh	r3, [r5, #0]
 8011fa2:	e7ef      	b.n	8011f84 <ucdr_deserialize_endian_uint16_t+0x94>
 8011fa4:	68a2      	ldr	r2, [r4, #8]
 8011fa6:	6923      	ldr	r3, [r4, #16]
 8011fa8:	7da0      	ldrb	r0, [r4, #22]
 8011faa:	f884 9015 	strb.w	r9, [r4, #21]
 8011fae:	1bd2      	subs	r2, r2, r7
 8011fb0:	1bdb      	subs	r3, r3, r7
 8011fb2:	60a2      	str	r2, [r4, #8]
 8011fb4:	6123      	str	r3, [r4, #16]
 8011fb6:	f080 0001 	eor.w	r0, r0, #1
 8011fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fbe:	68a3      	ldr	r3, [r4, #8]
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	706b      	strb	r3, [r5, #1]
 8011fc4:	e7c3      	b.n	8011f4e <ucdr_deserialize_endian_uint16_t+0x5e>
 8011fc6:	4641      	mov	r1, r8
 8011fc8:	463a      	mov	r2, r7
 8011fca:	4628      	mov	r0, r5
 8011fcc:	f009 fac4 	bl	801b558 <memcpy>
 8011fd0:	68a1      	ldr	r1, [r4, #8]
 8011fd2:	4652      	mov	r2, sl
 8011fd4:	19e8      	adds	r0, r5, r7
 8011fd6:	f009 fabf 	bl	801b558 <memcpy>
 8011fda:	e7b8      	b.n	8011f4e <ucdr_deserialize_endian_uint16_t+0x5e>

08011fdc <ucdr_serialize_uint32_t>:
 8011fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fe0:	b082      	sub	sp, #8
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	9101      	str	r1, [sp, #4]
 8011fe6:	2104      	movs	r1, #4
 8011fe8:	f001 fcbe 	bl	8013968 <ucdr_buffer_alignment>
 8011fec:	4601      	mov	r1, r0
 8011fee:	4620      	mov	r0, r4
 8011ff0:	7d67      	ldrb	r7, [r4, #21]
 8011ff2:	f001 fcfd 	bl	80139f0 <ucdr_advance_buffer>
 8011ff6:	2104      	movs	r1, #4
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	f001 fc55 	bl	80138a8 <ucdr_check_buffer_available_for>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d139      	bne.n	8012076 <ucdr_serialize_uint32_t+0x9a>
 8012002:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012006:	42ab      	cmp	r3, r5
 8012008:	d930      	bls.n	801206c <ucdr_serialize_uint32_t+0x90>
 801200a:	1b5e      	subs	r6, r3, r5
 801200c:	60a3      	str	r3, [r4, #8]
 801200e:	6923      	ldr	r3, [r4, #16]
 8012010:	f1c6 0804 	rsb	r8, r6, #4
 8012014:	4433      	add	r3, r6
 8012016:	6123      	str	r3, [r4, #16]
 8012018:	4641      	mov	r1, r8
 801201a:	4620      	mov	r0, r4
 801201c:	f001 fc50 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012020:	2800      	cmp	r0, #0
 8012022:	d04c      	beq.n	80120be <ucdr_serialize_uint32_t+0xe2>
 8012024:	7d23      	ldrb	r3, [r4, #20]
 8012026:	2b01      	cmp	r3, #1
 8012028:	d063      	beq.n	80120f2 <ucdr_serialize_uint32_t+0x116>
 801202a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801202e:	702b      	strb	r3, [r5, #0]
 8012030:	2e00      	cmp	r6, #0
 8012032:	d051      	beq.n	80120d8 <ucdr_serialize_uint32_t+0xfc>
 8012034:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012038:	706b      	strb	r3, [r5, #1]
 801203a:	2e01      	cmp	r6, #1
 801203c:	d050      	beq.n	80120e0 <ucdr_serialize_uint32_t+0x104>
 801203e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012042:	70ab      	strb	r3, [r5, #2]
 8012044:	2e02      	cmp	r6, #2
 8012046:	d04f      	beq.n	80120e8 <ucdr_serialize_uint32_t+0x10c>
 8012048:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801204c:	70eb      	strb	r3, [r5, #3]
 801204e:	6923      	ldr	r3, [r4, #16]
 8012050:	68a2      	ldr	r2, [r4, #8]
 8012052:	7da0      	ldrb	r0, [r4, #22]
 8012054:	3304      	adds	r3, #4
 8012056:	1b9e      	subs	r6, r3, r6
 8012058:	4442      	add	r2, r8
 801205a:	2304      	movs	r3, #4
 801205c:	f080 0001 	eor.w	r0, r0, #1
 8012060:	60a2      	str	r2, [r4, #8]
 8012062:	6126      	str	r6, [r4, #16]
 8012064:	7563      	strb	r3, [r4, #21]
 8012066:	b002      	add	sp, #8
 8012068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801206c:	2104      	movs	r1, #4
 801206e:	4620      	mov	r0, r4
 8012070:	f001 fc26 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012074:	b1d0      	cbz	r0, 80120ac <ucdr_serialize_uint32_t+0xd0>
 8012076:	7d23      	ldrb	r3, [r4, #20]
 8012078:	2b01      	cmp	r3, #1
 801207a:	68a3      	ldr	r3, [r4, #8]
 801207c:	d01c      	beq.n	80120b8 <ucdr_serialize_uint32_t+0xdc>
 801207e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012082:	701a      	strb	r2, [r3, #0]
 8012084:	68a3      	ldr	r3, [r4, #8]
 8012086:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801208a:	705a      	strb	r2, [r3, #1]
 801208c:	68a3      	ldr	r3, [r4, #8]
 801208e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012092:	709a      	strb	r2, [r3, #2]
 8012094:	68a3      	ldr	r3, [r4, #8]
 8012096:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801209a:	70da      	strb	r2, [r3, #3]
 801209c:	68a2      	ldr	r2, [r4, #8]
 801209e:	6923      	ldr	r3, [r4, #16]
 80120a0:	3204      	adds	r2, #4
 80120a2:	3304      	adds	r3, #4
 80120a4:	2104      	movs	r1, #4
 80120a6:	60a2      	str	r2, [r4, #8]
 80120a8:	6123      	str	r3, [r4, #16]
 80120aa:	7561      	strb	r1, [r4, #21]
 80120ac:	7da0      	ldrb	r0, [r4, #22]
 80120ae:	f080 0001 	eor.w	r0, r0, #1
 80120b2:	b002      	add	sp, #8
 80120b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120b8:	9a01      	ldr	r2, [sp, #4]
 80120ba:	601a      	str	r2, [r3, #0]
 80120bc:	e7ee      	b.n	801209c <ucdr_serialize_uint32_t+0xc0>
 80120be:	68a2      	ldr	r2, [r4, #8]
 80120c0:	6923      	ldr	r3, [r4, #16]
 80120c2:	7da0      	ldrb	r0, [r4, #22]
 80120c4:	7567      	strb	r7, [r4, #21]
 80120c6:	1b92      	subs	r2, r2, r6
 80120c8:	1b9b      	subs	r3, r3, r6
 80120ca:	f080 0001 	eor.w	r0, r0, #1
 80120ce:	60a2      	str	r2, [r4, #8]
 80120d0:	6123      	str	r3, [r4, #16]
 80120d2:	b002      	add	sp, #8
 80120d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120d8:	68a3      	ldr	r3, [r4, #8]
 80120da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80120de:	701a      	strb	r2, [r3, #0]
 80120e0:	68a3      	ldr	r3, [r4, #8]
 80120e2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80120e6:	701a      	strb	r2, [r3, #0]
 80120e8:	68a3      	ldr	r3, [r4, #8]
 80120ea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80120ee:	701a      	strb	r2, [r3, #0]
 80120f0:	e7ad      	b.n	801204e <ucdr_serialize_uint32_t+0x72>
 80120f2:	4628      	mov	r0, r5
 80120f4:	ad01      	add	r5, sp, #4
 80120f6:	4629      	mov	r1, r5
 80120f8:	4632      	mov	r2, r6
 80120fa:	f009 fa2d 	bl	801b558 <memcpy>
 80120fe:	68a0      	ldr	r0, [r4, #8]
 8012100:	4642      	mov	r2, r8
 8012102:	19a9      	adds	r1, r5, r6
 8012104:	f009 fa28 	bl	801b558 <memcpy>
 8012108:	e7a1      	b.n	801204e <ucdr_serialize_uint32_t+0x72>
 801210a:	bf00      	nop

0801210c <ucdr_serialize_endian_uint32_t>:
 801210c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012110:	b083      	sub	sp, #12
 8012112:	460d      	mov	r5, r1
 8012114:	2104      	movs	r1, #4
 8012116:	4604      	mov	r4, r0
 8012118:	9201      	str	r2, [sp, #4]
 801211a:	f001 fc25 	bl	8013968 <ucdr_buffer_alignment>
 801211e:	4601      	mov	r1, r0
 8012120:	4620      	mov	r0, r4
 8012122:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012126:	f001 fc63 	bl	80139f0 <ucdr_advance_buffer>
 801212a:	2104      	movs	r1, #4
 801212c:	4620      	mov	r0, r4
 801212e:	f001 fbbb 	bl	80138a8 <ucdr_check_buffer_available_for>
 8012132:	2800      	cmp	r0, #0
 8012134:	d138      	bne.n	80121a8 <ucdr_serialize_endian_uint32_t+0x9c>
 8012136:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801213a:	42b7      	cmp	r7, r6
 801213c:	d92f      	bls.n	801219e <ucdr_serialize_endian_uint32_t+0x92>
 801213e:	6923      	ldr	r3, [r4, #16]
 8012140:	60a7      	str	r7, [r4, #8]
 8012142:	1bbf      	subs	r7, r7, r6
 8012144:	443b      	add	r3, r7
 8012146:	f1c7 0904 	rsb	r9, r7, #4
 801214a:	6123      	str	r3, [r4, #16]
 801214c:	4649      	mov	r1, r9
 801214e:	4620      	mov	r0, r4
 8012150:	f001 fbb6 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012154:	2800      	cmp	r0, #0
 8012156:	d04a      	beq.n	80121ee <ucdr_serialize_endian_uint32_t+0xe2>
 8012158:	2d01      	cmp	r5, #1
 801215a:	d063      	beq.n	8012224 <ucdr_serialize_endian_uint32_t+0x118>
 801215c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012160:	7033      	strb	r3, [r6, #0]
 8012162:	2f00      	cmp	r7, #0
 8012164:	d051      	beq.n	801220a <ucdr_serialize_endian_uint32_t+0xfe>
 8012166:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801216a:	7073      	strb	r3, [r6, #1]
 801216c:	2f01      	cmp	r7, #1
 801216e:	d050      	beq.n	8012212 <ucdr_serialize_endian_uint32_t+0x106>
 8012170:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012174:	70b3      	strb	r3, [r6, #2]
 8012176:	2f02      	cmp	r7, #2
 8012178:	d04f      	beq.n	801221a <ucdr_serialize_endian_uint32_t+0x10e>
 801217a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801217e:	70f3      	strb	r3, [r6, #3]
 8012180:	6923      	ldr	r3, [r4, #16]
 8012182:	68a2      	ldr	r2, [r4, #8]
 8012184:	7da0      	ldrb	r0, [r4, #22]
 8012186:	3304      	adds	r3, #4
 8012188:	444a      	add	r2, r9
 801218a:	1bdb      	subs	r3, r3, r7
 801218c:	2104      	movs	r1, #4
 801218e:	f080 0001 	eor.w	r0, r0, #1
 8012192:	60a2      	str	r2, [r4, #8]
 8012194:	6123      	str	r3, [r4, #16]
 8012196:	7561      	strb	r1, [r4, #21]
 8012198:	b003      	add	sp, #12
 801219a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801219e:	2104      	movs	r1, #4
 80121a0:	4620      	mov	r0, r4
 80121a2:	f001 fb8d 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 80121a6:	b1c8      	cbz	r0, 80121dc <ucdr_serialize_endian_uint32_t+0xd0>
 80121a8:	2d01      	cmp	r5, #1
 80121aa:	68a3      	ldr	r3, [r4, #8]
 80121ac:	d01c      	beq.n	80121e8 <ucdr_serialize_endian_uint32_t+0xdc>
 80121ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80121b2:	701a      	strb	r2, [r3, #0]
 80121b4:	68a3      	ldr	r3, [r4, #8]
 80121b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121ba:	705a      	strb	r2, [r3, #1]
 80121bc:	68a3      	ldr	r3, [r4, #8]
 80121be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80121c2:	709a      	strb	r2, [r3, #2]
 80121c4:	68a3      	ldr	r3, [r4, #8]
 80121c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80121ca:	70da      	strb	r2, [r3, #3]
 80121cc:	68a2      	ldr	r2, [r4, #8]
 80121ce:	6923      	ldr	r3, [r4, #16]
 80121d0:	3204      	adds	r2, #4
 80121d2:	3304      	adds	r3, #4
 80121d4:	2104      	movs	r1, #4
 80121d6:	60a2      	str	r2, [r4, #8]
 80121d8:	6123      	str	r3, [r4, #16]
 80121da:	7561      	strb	r1, [r4, #21]
 80121dc:	7da0      	ldrb	r0, [r4, #22]
 80121de:	f080 0001 	eor.w	r0, r0, #1
 80121e2:	b003      	add	sp, #12
 80121e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121e8:	9a01      	ldr	r2, [sp, #4]
 80121ea:	601a      	str	r2, [r3, #0]
 80121ec:	e7ee      	b.n	80121cc <ucdr_serialize_endian_uint32_t+0xc0>
 80121ee:	68a2      	ldr	r2, [r4, #8]
 80121f0:	6923      	ldr	r3, [r4, #16]
 80121f2:	7da0      	ldrb	r0, [r4, #22]
 80121f4:	f884 8015 	strb.w	r8, [r4, #21]
 80121f8:	1bd2      	subs	r2, r2, r7
 80121fa:	1bdb      	subs	r3, r3, r7
 80121fc:	f080 0001 	eor.w	r0, r0, #1
 8012200:	60a2      	str	r2, [r4, #8]
 8012202:	6123      	str	r3, [r4, #16]
 8012204:	b003      	add	sp, #12
 8012206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801220a:	68a3      	ldr	r3, [r4, #8]
 801220c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012210:	701a      	strb	r2, [r3, #0]
 8012212:	68a3      	ldr	r3, [r4, #8]
 8012214:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012218:	701a      	strb	r2, [r3, #0]
 801221a:	68a3      	ldr	r3, [r4, #8]
 801221c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012220:	701a      	strb	r2, [r3, #0]
 8012222:	e7ad      	b.n	8012180 <ucdr_serialize_endian_uint32_t+0x74>
 8012224:	ad01      	add	r5, sp, #4
 8012226:	4629      	mov	r1, r5
 8012228:	463a      	mov	r2, r7
 801222a:	4630      	mov	r0, r6
 801222c:	f009 f994 	bl	801b558 <memcpy>
 8012230:	68a0      	ldr	r0, [r4, #8]
 8012232:	464a      	mov	r2, r9
 8012234:	19e9      	adds	r1, r5, r7
 8012236:	f009 f98f 	bl	801b558 <memcpy>
 801223a:	e7a1      	b.n	8012180 <ucdr_serialize_endian_uint32_t+0x74>

0801223c <ucdr_deserialize_uint32_t>:
 801223c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012240:	460d      	mov	r5, r1
 8012242:	2104      	movs	r1, #4
 8012244:	4604      	mov	r4, r0
 8012246:	f001 fb8f 	bl	8013968 <ucdr_buffer_alignment>
 801224a:	4601      	mov	r1, r0
 801224c:	4620      	mov	r0, r4
 801224e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012252:	f001 fbcd 	bl	80139f0 <ucdr_advance_buffer>
 8012256:	2104      	movs	r1, #4
 8012258:	4620      	mov	r0, r4
 801225a:	f001 fb25 	bl	80138a8 <ucdr_check_buffer_available_for>
 801225e:	2800      	cmp	r0, #0
 8012260:	d138      	bne.n	80122d4 <ucdr_deserialize_uint32_t+0x98>
 8012262:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012266:	42b7      	cmp	r7, r6
 8012268:	d92f      	bls.n	80122ca <ucdr_deserialize_uint32_t+0x8e>
 801226a:	6923      	ldr	r3, [r4, #16]
 801226c:	60a7      	str	r7, [r4, #8]
 801226e:	1bbf      	subs	r7, r7, r6
 8012270:	443b      	add	r3, r7
 8012272:	f1c7 0904 	rsb	r9, r7, #4
 8012276:	6123      	str	r3, [r4, #16]
 8012278:	4649      	mov	r1, r9
 801227a:	4620      	mov	r0, r4
 801227c:	f001 fb20 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012280:	2800      	cmp	r0, #0
 8012282:	d046      	beq.n	8012312 <ucdr_deserialize_uint32_t+0xd6>
 8012284:	7d23      	ldrb	r3, [r4, #20]
 8012286:	2b01      	cmp	r3, #1
 8012288:	d05c      	beq.n	8012344 <ucdr_deserialize_uint32_t+0x108>
 801228a:	78f3      	ldrb	r3, [r6, #3]
 801228c:	702b      	strb	r3, [r5, #0]
 801228e:	2f00      	cmp	r7, #0
 8012290:	d04c      	beq.n	801232c <ucdr_deserialize_uint32_t+0xf0>
 8012292:	78b3      	ldrb	r3, [r6, #2]
 8012294:	706b      	strb	r3, [r5, #1]
 8012296:	2f01      	cmp	r7, #1
 8012298:	f105 0302 	add.w	r3, r5, #2
 801229c:	d04a      	beq.n	8012334 <ucdr_deserialize_uint32_t+0xf8>
 801229e:	7873      	ldrb	r3, [r6, #1]
 80122a0:	70ab      	strb	r3, [r5, #2]
 80122a2:	2f02      	cmp	r7, #2
 80122a4:	f105 0303 	add.w	r3, r5, #3
 80122a8:	d048      	beq.n	801233c <ucdr_deserialize_uint32_t+0x100>
 80122aa:	7833      	ldrb	r3, [r6, #0]
 80122ac:	70eb      	strb	r3, [r5, #3]
 80122ae:	6923      	ldr	r3, [r4, #16]
 80122b0:	68a2      	ldr	r2, [r4, #8]
 80122b2:	7da0      	ldrb	r0, [r4, #22]
 80122b4:	2104      	movs	r1, #4
 80122b6:	3304      	adds	r3, #4
 80122b8:	444a      	add	r2, r9
 80122ba:	1bdb      	subs	r3, r3, r7
 80122bc:	7561      	strb	r1, [r4, #21]
 80122be:	60a2      	str	r2, [r4, #8]
 80122c0:	6123      	str	r3, [r4, #16]
 80122c2:	f080 0001 	eor.w	r0, r0, #1
 80122c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122ca:	2104      	movs	r1, #4
 80122cc:	4620      	mov	r0, r4
 80122ce:	f001 faf7 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 80122d2:	b1b0      	cbz	r0, 8012302 <ucdr_deserialize_uint32_t+0xc6>
 80122d4:	7d23      	ldrb	r3, [r4, #20]
 80122d6:	2b01      	cmp	r3, #1
 80122d8:	68a3      	ldr	r3, [r4, #8]
 80122da:	d017      	beq.n	801230c <ucdr_deserialize_uint32_t+0xd0>
 80122dc:	78db      	ldrb	r3, [r3, #3]
 80122de:	702b      	strb	r3, [r5, #0]
 80122e0:	68a3      	ldr	r3, [r4, #8]
 80122e2:	789b      	ldrb	r3, [r3, #2]
 80122e4:	706b      	strb	r3, [r5, #1]
 80122e6:	68a3      	ldr	r3, [r4, #8]
 80122e8:	785b      	ldrb	r3, [r3, #1]
 80122ea:	70ab      	strb	r3, [r5, #2]
 80122ec:	68a3      	ldr	r3, [r4, #8]
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	70eb      	strb	r3, [r5, #3]
 80122f2:	68a2      	ldr	r2, [r4, #8]
 80122f4:	6923      	ldr	r3, [r4, #16]
 80122f6:	3204      	adds	r2, #4
 80122f8:	3304      	adds	r3, #4
 80122fa:	2104      	movs	r1, #4
 80122fc:	60a2      	str	r2, [r4, #8]
 80122fe:	6123      	str	r3, [r4, #16]
 8012300:	7561      	strb	r1, [r4, #21]
 8012302:	7da0      	ldrb	r0, [r4, #22]
 8012304:	f080 0001 	eor.w	r0, r0, #1
 8012308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	602b      	str	r3, [r5, #0]
 8012310:	e7ef      	b.n	80122f2 <ucdr_deserialize_uint32_t+0xb6>
 8012312:	68a2      	ldr	r2, [r4, #8]
 8012314:	6923      	ldr	r3, [r4, #16]
 8012316:	7da0      	ldrb	r0, [r4, #22]
 8012318:	f884 8015 	strb.w	r8, [r4, #21]
 801231c:	1bd2      	subs	r2, r2, r7
 801231e:	1bdb      	subs	r3, r3, r7
 8012320:	60a2      	str	r2, [r4, #8]
 8012322:	6123      	str	r3, [r4, #16]
 8012324:	f080 0001 	eor.w	r0, r0, #1
 8012328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801232c:	68a3      	ldr	r3, [r4, #8]
 801232e:	789b      	ldrb	r3, [r3, #2]
 8012330:	706b      	strb	r3, [r5, #1]
 8012332:	1cab      	adds	r3, r5, #2
 8012334:	68a2      	ldr	r2, [r4, #8]
 8012336:	7852      	ldrb	r2, [r2, #1]
 8012338:	f803 2b01 	strb.w	r2, [r3], #1
 801233c:	68a2      	ldr	r2, [r4, #8]
 801233e:	7812      	ldrb	r2, [r2, #0]
 8012340:	701a      	strb	r2, [r3, #0]
 8012342:	e7b4      	b.n	80122ae <ucdr_deserialize_uint32_t+0x72>
 8012344:	4631      	mov	r1, r6
 8012346:	463a      	mov	r2, r7
 8012348:	4628      	mov	r0, r5
 801234a:	f009 f905 	bl	801b558 <memcpy>
 801234e:	68a1      	ldr	r1, [r4, #8]
 8012350:	464a      	mov	r2, r9
 8012352:	19e8      	adds	r0, r5, r7
 8012354:	f009 f900 	bl	801b558 <memcpy>
 8012358:	e7a9      	b.n	80122ae <ucdr_deserialize_uint32_t+0x72>
 801235a:	bf00      	nop

0801235c <ucdr_deserialize_endian_uint32_t>:
 801235c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012360:	460e      	mov	r6, r1
 8012362:	2104      	movs	r1, #4
 8012364:	4604      	mov	r4, r0
 8012366:	4615      	mov	r5, r2
 8012368:	f001 fafe 	bl	8013968 <ucdr_buffer_alignment>
 801236c:	4601      	mov	r1, r0
 801236e:	4620      	mov	r0, r4
 8012370:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012374:	f001 fb3c 	bl	80139f0 <ucdr_advance_buffer>
 8012378:	2104      	movs	r1, #4
 801237a:	4620      	mov	r0, r4
 801237c:	f001 fa94 	bl	80138a8 <ucdr_check_buffer_available_for>
 8012380:	2800      	cmp	r0, #0
 8012382:	d13c      	bne.n	80123fe <ucdr_deserialize_endian_uint32_t+0xa2>
 8012384:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012388:	42bb      	cmp	r3, r7
 801238a:	d933      	bls.n	80123f4 <ucdr_deserialize_endian_uint32_t+0x98>
 801238c:	eba3 0807 	sub.w	r8, r3, r7
 8012390:	60a3      	str	r3, [r4, #8]
 8012392:	6923      	ldr	r3, [r4, #16]
 8012394:	f1c8 0a04 	rsb	sl, r8, #4
 8012398:	4443      	add	r3, r8
 801239a:	6123      	str	r3, [r4, #16]
 801239c:	4651      	mov	r1, sl
 801239e:	4620      	mov	r0, r4
 80123a0:	f001 fa8e 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 80123a4:	2800      	cmp	r0, #0
 80123a6:	d048      	beq.n	801243a <ucdr_deserialize_endian_uint32_t+0xde>
 80123a8:	2e01      	cmp	r6, #1
 80123aa:	d061      	beq.n	8012470 <ucdr_deserialize_endian_uint32_t+0x114>
 80123ac:	78fb      	ldrb	r3, [r7, #3]
 80123ae:	702b      	strb	r3, [r5, #0]
 80123b0:	f1b8 0f00 	cmp.w	r8, #0
 80123b4:	d050      	beq.n	8012458 <ucdr_deserialize_endian_uint32_t+0xfc>
 80123b6:	78bb      	ldrb	r3, [r7, #2]
 80123b8:	706b      	strb	r3, [r5, #1]
 80123ba:	f1b8 0f01 	cmp.w	r8, #1
 80123be:	f105 0302 	add.w	r3, r5, #2
 80123c2:	d04d      	beq.n	8012460 <ucdr_deserialize_endian_uint32_t+0x104>
 80123c4:	787b      	ldrb	r3, [r7, #1]
 80123c6:	70ab      	strb	r3, [r5, #2]
 80123c8:	f1b8 0f02 	cmp.w	r8, #2
 80123cc:	f105 0303 	add.w	r3, r5, #3
 80123d0:	d04a      	beq.n	8012468 <ucdr_deserialize_endian_uint32_t+0x10c>
 80123d2:	783b      	ldrb	r3, [r7, #0]
 80123d4:	70eb      	strb	r3, [r5, #3]
 80123d6:	6923      	ldr	r3, [r4, #16]
 80123d8:	68a2      	ldr	r2, [r4, #8]
 80123da:	7da0      	ldrb	r0, [r4, #22]
 80123dc:	2104      	movs	r1, #4
 80123de:	3304      	adds	r3, #4
 80123e0:	4452      	add	r2, sl
 80123e2:	eba3 0308 	sub.w	r3, r3, r8
 80123e6:	7561      	strb	r1, [r4, #21]
 80123e8:	60a2      	str	r2, [r4, #8]
 80123ea:	6123      	str	r3, [r4, #16]
 80123ec:	f080 0001 	eor.w	r0, r0, #1
 80123f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f4:	2104      	movs	r1, #4
 80123f6:	4620      	mov	r0, r4
 80123f8:	f001 fa62 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 80123fc:	b1a8      	cbz	r0, 801242a <ucdr_deserialize_endian_uint32_t+0xce>
 80123fe:	2e01      	cmp	r6, #1
 8012400:	68a3      	ldr	r3, [r4, #8]
 8012402:	d017      	beq.n	8012434 <ucdr_deserialize_endian_uint32_t+0xd8>
 8012404:	78db      	ldrb	r3, [r3, #3]
 8012406:	702b      	strb	r3, [r5, #0]
 8012408:	68a3      	ldr	r3, [r4, #8]
 801240a:	789b      	ldrb	r3, [r3, #2]
 801240c:	706b      	strb	r3, [r5, #1]
 801240e:	68a3      	ldr	r3, [r4, #8]
 8012410:	785b      	ldrb	r3, [r3, #1]
 8012412:	70ab      	strb	r3, [r5, #2]
 8012414:	68a3      	ldr	r3, [r4, #8]
 8012416:	781b      	ldrb	r3, [r3, #0]
 8012418:	70eb      	strb	r3, [r5, #3]
 801241a:	68a2      	ldr	r2, [r4, #8]
 801241c:	6923      	ldr	r3, [r4, #16]
 801241e:	3204      	adds	r2, #4
 8012420:	3304      	adds	r3, #4
 8012422:	2104      	movs	r1, #4
 8012424:	60a2      	str	r2, [r4, #8]
 8012426:	6123      	str	r3, [r4, #16]
 8012428:	7561      	strb	r1, [r4, #21]
 801242a:	7da0      	ldrb	r0, [r4, #22]
 801242c:	f080 0001 	eor.w	r0, r0, #1
 8012430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	602b      	str	r3, [r5, #0]
 8012438:	e7ef      	b.n	801241a <ucdr_deserialize_endian_uint32_t+0xbe>
 801243a:	68a2      	ldr	r2, [r4, #8]
 801243c:	6923      	ldr	r3, [r4, #16]
 801243e:	7da0      	ldrb	r0, [r4, #22]
 8012440:	f884 9015 	strb.w	r9, [r4, #21]
 8012444:	eba2 0208 	sub.w	r2, r2, r8
 8012448:	eba3 0308 	sub.w	r3, r3, r8
 801244c:	60a2      	str	r2, [r4, #8]
 801244e:	6123      	str	r3, [r4, #16]
 8012450:	f080 0001 	eor.w	r0, r0, #1
 8012454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012458:	68a3      	ldr	r3, [r4, #8]
 801245a:	789b      	ldrb	r3, [r3, #2]
 801245c:	706b      	strb	r3, [r5, #1]
 801245e:	1cab      	adds	r3, r5, #2
 8012460:	68a2      	ldr	r2, [r4, #8]
 8012462:	7852      	ldrb	r2, [r2, #1]
 8012464:	f803 2b01 	strb.w	r2, [r3], #1
 8012468:	68a2      	ldr	r2, [r4, #8]
 801246a:	7812      	ldrb	r2, [r2, #0]
 801246c:	701a      	strb	r2, [r3, #0]
 801246e:	e7b2      	b.n	80123d6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8012470:	4639      	mov	r1, r7
 8012472:	4642      	mov	r2, r8
 8012474:	4628      	mov	r0, r5
 8012476:	f009 f86f 	bl	801b558 <memcpy>
 801247a:	68a1      	ldr	r1, [r4, #8]
 801247c:	4652      	mov	r2, sl
 801247e:	eb05 0008 	add.w	r0, r5, r8
 8012482:	f009 f869 	bl	801b558 <memcpy>
 8012486:	e7a6      	b.n	80123d6 <ucdr_deserialize_endian_uint32_t+0x7a>

08012488 <ucdr_serialize_uint64_t>:
 8012488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801248c:	2108      	movs	r1, #8
 801248e:	b082      	sub	sp, #8
 8012490:	4604      	mov	r4, r0
 8012492:	e9cd 2300 	strd	r2, r3, [sp]
 8012496:	f001 fa67 	bl	8013968 <ucdr_buffer_alignment>
 801249a:	4601      	mov	r1, r0
 801249c:	4620      	mov	r0, r4
 801249e:	7d67      	ldrb	r7, [r4, #21]
 80124a0:	f001 faa6 	bl	80139f0 <ucdr_advance_buffer>
 80124a4:	2108      	movs	r1, #8
 80124a6:	4620      	mov	r0, r4
 80124a8:	f001 f9fe 	bl	80138a8 <ucdr_check_buffer_available_for>
 80124ac:	2800      	cmp	r0, #0
 80124ae:	d14e      	bne.n	801254e <ucdr_serialize_uint64_t+0xc6>
 80124b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80124b4:	42ab      	cmp	r3, r5
 80124b6:	d945      	bls.n	8012544 <ucdr_serialize_uint64_t+0xbc>
 80124b8:	1b5e      	subs	r6, r3, r5
 80124ba:	60a3      	str	r3, [r4, #8]
 80124bc:	6923      	ldr	r3, [r4, #16]
 80124be:	f1c6 0808 	rsb	r8, r6, #8
 80124c2:	4433      	add	r3, r6
 80124c4:	6123      	str	r3, [r4, #16]
 80124c6:	4641      	mov	r1, r8
 80124c8:	4620      	mov	r0, r4
 80124ca:	f001 f9f9 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 80124ce:	2800      	cmp	r0, #0
 80124d0:	d074      	beq.n	80125bc <ucdr_serialize_uint64_t+0x134>
 80124d2:	7d23      	ldrb	r3, [r4, #20]
 80124d4:	2b01      	cmp	r3, #1
 80124d6:	f000 809b 	beq.w	8012610 <ucdr_serialize_uint64_t+0x188>
 80124da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80124de:	702b      	strb	r3, [r5, #0]
 80124e0:	2e00      	cmp	r6, #0
 80124e2:	d078      	beq.n	80125d6 <ucdr_serialize_uint64_t+0x14e>
 80124e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80124e8:	706b      	strb	r3, [r5, #1]
 80124ea:	2e01      	cmp	r6, #1
 80124ec:	d077      	beq.n	80125de <ucdr_serialize_uint64_t+0x156>
 80124ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80124f2:	70ab      	strb	r3, [r5, #2]
 80124f4:	2e02      	cmp	r6, #2
 80124f6:	d076      	beq.n	80125e6 <ucdr_serialize_uint64_t+0x15e>
 80124f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80124fc:	70eb      	strb	r3, [r5, #3]
 80124fe:	2e03      	cmp	r6, #3
 8012500:	d075      	beq.n	80125ee <ucdr_serialize_uint64_t+0x166>
 8012502:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012506:	712b      	strb	r3, [r5, #4]
 8012508:	2e04      	cmp	r6, #4
 801250a:	d074      	beq.n	80125f6 <ucdr_serialize_uint64_t+0x16e>
 801250c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012510:	716b      	strb	r3, [r5, #5]
 8012512:	2e05      	cmp	r6, #5
 8012514:	d073      	beq.n	80125fe <ucdr_serialize_uint64_t+0x176>
 8012516:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801251a:	71ab      	strb	r3, [r5, #6]
 801251c:	2e06      	cmp	r6, #6
 801251e:	d072      	beq.n	8012606 <ucdr_serialize_uint64_t+0x17e>
 8012520:	f89d 3000 	ldrb.w	r3, [sp]
 8012524:	71eb      	strb	r3, [r5, #7]
 8012526:	6923      	ldr	r3, [r4, #16]
 8012528:	68a2      	ldr	r2, [r4, #8]
 801252a:	7da0      	ldrb	r0, [r4, #22]
 801252c:	3308      	adds	r3, #8
 801252e:	1b9e      	subs	r6, r3, r6
 8012530:	4442      	add	r2, r8
 8012532:	2308      	movs	r3, #8
 8012534:	f080 0001 	eor.w	r0, r0, #1
 8012538:	60a2      	str	r2, [r4, #8]
 801253a:	6126      	str	r6, [r4, #16]
 801253c:	7563      	strb	r3, [r4, #21]
 801253e:	b002      	add	sp, #8
 8012540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012544:	2108      	movs	r1, #8
 8012546:	4620      	mov	r0, r4
 8012548:	f001 f9ba 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 801254c:	b350      	cbz	r0, 80125a4 <ucdr_serialize_uint64_t+0x11c>
 801254e:	7d23      	ldrb	r3, [r4, #20]
 8012550:	2b01      	cmp	r3, #1
 8012552:	d02d      	beq.n	80125b0 <ucdr_serialize_uint64_t+0x128>
 8012554:	68a3      	ldr	r3, [r4, #8]
 8012556:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801255a:	701a      	strb	r2, [r3, #0]
 801255c:	68a3      	ldr	r3, [r4, #8]
 801255e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012562:	705a      	strb	r2, [r3, #1]
 8012564:	68a3      	ldr	r3, [r4, #8]
 8012566:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801256a:	709a      	strb	r2, [r3, #2]
 801256c:	68a3      	ldr	r3, [r4, #8]
 801256e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012572:	70da      	strb	r2, [r3, #3]
 8012574:	68a3      	ldr	r3, [r4, #8]
 8012576:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801257a:	711a      	strb	r2, [r3, #4]
 801257c:	68a3      	ldr	r3, [r4, #8]
 801257e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012582:	715a      	strb	r2, [r3, #5]
 8012584:	68a3      	ldr	r3, [r4, #8]
 8012586:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801258a:	719a      	strb	r2, [r3, #6]
 801258c:	68a3      	ldr	r3, [r4, #8]
 801258e:	f89d 2000 	ldrb.w	r2, [sp]
 8012592:	71da      	strb	r2, [r3, #7]
 8012594:	68a2      	ldr	r2, [r4, #8]
 8012596:	6923      	ldr	r3, [r4, #16]
 8012598:	3208      	adds	r2, #8
 801259a:	3308      	adds	r3, #8
 801259c:	2108      	movs	r1, #8
 801259e:	60a2      	str	r2, [r4, #8]
 80125a0:	6123      	str	r3, [r4, #16]
 80125a2:	7561      	strb	r1, [r4, #21]
 80125a4:	7da0      	ldrb	r0, [r4, #22]
 80125a6:	f080 0001 	eor.w	r0, r0, #1
 80125aa:	b002      	add	sp, #8
 80125ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125b0:	466b      	mov	r3, sp
 80125b2:	cb03      	ldmia	r3!, {r0, r1}
 80125b4:	68a3      	ldr	r3, [r4, #8]
 80125b6:	6018      	str	r0, [r3, #0]
 80125b8:	6059      	str	r1, [r3, #4]
 80125ba:	e7eb      	b.n	8012594 <ucdr_serialize_uint64_t+0x10c>
 80125bc:	68a2      	ldr	r2, [r4, #8]
 80125be:	6923      	ldr	r3, [r4, #16]
 80125c0:	7da0      	ldrb	r0, [r4, #22]
 80125c2:	7567      	strb	r7, [r4, #21]
 80125c4:	1b92      	subs	r2, r2, r6
 80125c6:	1b9b      	subs	r3, r3, r6
 80125c8:	f080 0001 	eor.w	r0, r0, #1
 80125cc:	60a2      	str	r2, [r4, #8]
 80125ce:	6123      	str	r3, [r4, #16]
 80125d0:	b002      	add	sp, #8
 80125d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d6:	68a3      	ldr	r3, [r4, #8]
 80125d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125dc:	701a      	strb	r2, [r3, #0]
 80125de:	68a3      	ldr	r3, [r4, #8]
 80125e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125e4:	701a      	strb	r2, [r3, #0]
 80125e6:	68a3      	ldr	r3, [r4, #8]
 80125e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125ec:	701a      	strb	r2, [r3, #0]
 80125ee:	68a3      	ldr	r3, [r4, #8]
 80125f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80125f4:	701a      	strb	r2, [r3, #0]
 80125f6:	68a3      	ldr	r3, [r4, #8]
 80125f8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80125fc:	701a      	strb	r2, [r3, #0]
 80125fe:	68a3      	ldr	r3, [r4, #8]
 8012600:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012604:	701a      	strb	r2, [r3, #0]
 8012606:	68a3      	ldr	r3, [r4, #8]
 8012608:	f89d 2000 	ldrb.w	r2, [sp]
 801260c:	701a      	strb	r2, [r3, #0]
 801260e:	e78a      	b.n	8012526 <ucdr_serialize_uint64_t+0x9e>
 8012610:	4628      	mov	r0, r5
 8012612:	466d      	mov	r5, sp
 8012614:	4629      	mov	r1, r5
 8012616:	4632      	mov	r2, r6
 8012618:	f008 ff9e 	bl	801b558 <memcpy>
 801261c:	68a0      	ldr	r0, [r4, #8]
 801261e:	4642      	mov	r2, r8
 8012620:	19a9      	adds	r1, r5, r6
 8012622:	f008 ff99 	bl	801b558 <memcpy>
 8012626:	e77e      	b.n	8012526 <ucdr_serialize_uint64_t+0x9e>

08012628 <ucdr_serialize_int16_t>:
 8012628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801262c:	b082      	sub	sp, #8
 801262e:	460b      	mov	r3, r1
 8012630:	2102      	movs	r1, #2
 8012632:	4604      	mov	r4, r0
 8012634:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012638:	f001 f996 	bl	8013968 <ucdr_buffer_alignment>
 801263c:	4601      	mov	r1, r0
 801263e:	4620      	mov	r0, r4
 8012640:	7d67      	ldrb	r7, [r4, #21]
 8012642:	f001 f9d5 	bl	80139f0 <ucdr_advance_buffer>
 8012646:	2102      	movs	r1, #2
 8012648:	4620      	mov	r0, r4
 801264a:	f001 f92d 	bl	80138a8 <ucdr_check_buffer_available_for>
 801264e:	bb78      	cbnz	r0, 80126b0 <ucdr_serialize_int16_t+0x88>
 8012650:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012654:	42ab      	cmp	r3, r5
 8012656:	d926      	bls.n	80126a6 <ucdr_serialize_int16_t+0x7e>
 8012658:	1b5e      	subs	r6, r3, r5
 801265a:	60a3      	str	r3, [r4, #8]
 801265c:	6923      	ldr	r3, [r4, #16]
 801265e:	f1c6 0802 	rsb	r8, r6, #2
 8012662:	4433      	add	r3, r6
 8012664:	6123      	str	r3, [r4, #16]
 8012666:	4641      	mov	r1, r8
 8012668:	4620      	mov	r0, r4
 801266a:	f001 f929 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 801266e:	2800      	cmp	r0, #0
 8012670:	d03b      	beq.n	80126ea <ucdr_serialize_int16_t+0xc2>
 8012672:	7d23      	ldrb	r3, [r4, #20]
 8012674:	2b01      	cmp	r3, #1
 8012676:	d04a      	beq.n	801270e <ucdr_serialize_int16_t+0xe6>
 8012678:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801267c:	702b      	strb	r3, [r5, #0]
 801267e:	2e00      	cmp	r6, #0
 8012680:	d040      	beq.n	8012704 <ucdr_serialize_int16_t+0xdc>
 8012682:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012686:	706b      	strb	r3, [r5, #1]
 8012688:	6923      	ldr	r3, [r4, #16]
 801268a:	68a2      	ldr	r2, [r4, #8]
 801268c:	7da0      	ldrb	r0, [r4, #22]
 801268e:	3302      	adds	r3, #2
 8012690:	1b9e      	subs	r6, r3, r6
 8012692:	4442      	add	r2, r8
 8012694:	2302      	movs	r3, #2
 8012696:	f080 0001 	eor.w	r0, r0, #1
 801269a:	60a2      	str	r2, [r4, #8]
 801269c:	6126      	str	r6, [r4, #16]
 801269e:	7563      	strb	r3, [r4, #21]
 80126a0:	b002      	add	sp, #8
 80126a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126a6:	2102      	movs	r1, #2
 80126a8:	4620      	mov	r0, r4
 80126aa:	f001 f909 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 80126ae:	b190      	cbz	r0, 80126d6 <ucdr_serialize_int16_t+0xae>
 80126b0:	7d23      	ldrb	r3, [r4, #20]
 80126b2:	2b01      	cmp	r3, #1
 80126b4:	68a3      	ldr	r3, [r4, #8]
 80126b6:	d014      	beq.n	80126e2 <ucdr_serialize_int16_t+0xba>
 80126b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80126bc:	701a      	strb	r2, [r3, #0]
 80126be:	68a3      	ldr	r3, [r4, #8]
 80126c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80126c4:	705a      	strb	r2, [r3, #1]
 80126c6:	68a2      	ldr	r2, [r4, #8]
 80126c8:	6923      	ldr	r3, [r4, #16]
 80126ca:	3202      	adds	r2, #2
 80126cc:	3302      	adds	r3, #2
 80126ce:	2102      	movs	r1, #2
 80126d0:	60a2      	str	r2, [r4, #8]
 80126d2:	6123      	str	r3, [r4, #16]
 80126d4:	7561      	strb	r1, [r4, #21]
 80126d6:	7da0      	ldrb	r0, [r4, #22]
 80126d8:	f080 0001 	eor.w	r0, r0, #1
 80126dc:	b002      	add	sp, #8
 80126de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80126e6:	801a      	strh	r2, [r3, #0]
 80126e8:	e7ed      	b.n	80126c6 <ucdr_serialize_int16_t+0x9e>
 80126ea:	68a2      	ldr	r2, [r4, #8]
 80126ec:	6923      	ldr	r3, [r4, #16]
 80126ee:	7da0      	ldrb	r0, [r4, #22]
 80126f0:	7567      	strb	r7, [r4, #21]
 80126f2:	1b92      	subs	r2, r2, r6
 80126f4:	1b9b      	subs	r3, r3, r6
 80126f6:	f080 0001 	eor.w	r0, r0, #1
 80126fa:	60a2      	str	r2, [r4, #8]
 80126fc:	6123      	str	r3, [r4, #16]
 80126fe:	b002      	add	sp, #8
 8012700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012704:	68a3      	ldr	r3, [r4, #8]
 8012706:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801270a:	701a      	strb	r2, [r3, #0]
 801270c:	e7bc      	b.n	8012688 <ucdr_serialize_int16_t+0x60>
 801270e:	4628      	mov	r0, r5
 8012710:	f10d 0506 	add.w	r5, sp, #6
 8012714:	4629      	mov	r1, r5
 8012716:	4632      	mov	r2, r6
 8012718:	f008 ff1e 	bl	801b558 <memcpy>
 801271c:	68a0      	ldr	r0, [r4, #8]
 801271e:	4642      	mov	r2, r8
 8012720:	19a9      	adds	r1, r5, r6
 8012722:	f008 ff19 	bl	801b558 <memcpy>
 8012726:	e7af      	b.n	8012688 <ucdr_serialize_int16_t+0x60>

08012728 <ucdr_deserialize_int16_t>:
 8012728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801272c:	460d      	mov	r5, r1
 801272e:	2102      	movs	r1, #2
 8012730:	4604      	mov	r4, r0
 8012732:	f001 f919 	bl	8013968 <ucdr_buffer_alignment>
 8012736:	4601      	mov	r1, r0
 8012738:	4620      	mov	r0, r4
 801273a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801273e:	f001 f957 	bl	80139f0 <ucdr_advance_buffer>
 8012742:	2102      	movs	r1, #2
 8012744:	4620      	mov	r0, r4
 8012746:	f001 f8af 	bl	80138a8 <ucdr_check_buffer_available_for>
 801274a:	bb60      	cbnz	r0, 80127a6 <ucdr_deserialize_int16_t+0x7e>
 801274c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012750:	42be      	cmp	r6, r7
 8012752:	d923      	bls.n	801279c <ucdr_deserialize_int16_t+0x74>
 8012754:	6923      	ldr	r3, [r4, #16]
 8012756:	60a6      	str	r6, [r4, #8]
 8012758:	1bf6      	subs	r6, r6, r7
 801275a:	4433      	add	r3, r6
 801275c:	f1c6 0902 	rsb	r9, r6, #2
 8012760:	6123      	str	r3, [r4, #16]
 8012762:	4649      	mov	r1, r9
 8012764:	4620      	mov	r0, r4
 8012766:	f001 f8ab 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 801276a:	2800      	cmp	r0, #0
 801276c:	d034      	beq.n	80127d8 <ucdr_deserialize_int16_t+0xb0>
 801276e:	7d23      	ldrb	r3, [r4, #20]
 8012770:	2b01      	cmp	r3, #1
 8012772:	d042      	beq.n	80127fa <ucdr_deserialize_int16_t+0xd2>
 8012774:	787b      	ldrb	r3, [r7, #1]
 8012776:	702b      	strb	r3, [r5, #0]
 8012778:	2e00      	cmp	r6, #0
 801277a:	d03a      	beq.n	80127f2 <ucdr_deserialize_int16_t+0xca>
 801277c:	783b      	ldrb	r3, [r7, #0]
 801277e:	706b      	strb	r3, [r5, #1]
 8012780:	6923      	ldr	r3, [r4, #16]
 8012782:	68a2      	ldr	r2, [r4, #8]
 8012784:	7da0      	ldrb	r0, [r4, #22]
 8012786:	2102      	movs	r1, #2
 8012788:	3302      	adds	r3, #2
 801278a:	444a      	add	r2, r9
 801278c:	1b9b      	subs	r3, r3, r6
 801278e:	7561      	strb	r1, [r4, #21]
 8012790:	60a2      	str	r2, [r4, #8]
 8012792:	6123      	str	r3, [r4, #16]
 8012794:	f080 0001 	eor.w	r0, r0, #1
 8012798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801279c:	2102      	movs	r1, #2
 801279e:	4620      	mov	r0, r4
 80127a0:	f001 f88e 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 80127a4:	b180      	cbz	r0, 80127c8 <ucdr_deserialize_int16_t+0xa0>
 80127a6:	7d23      	ldrb	r3, [r4, #20]
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	68a3      	ldr	r3, [r4, #8]
 80127ac:	d011      	beq.n	80127d2 <ucdr_deserialize_int16_t+0xaa>
 80127ae:	785b      	ldrb	r3, [r3, #1]
 80127b0:	702b      	strb	r3, [r5, #0]
 80127b2:	68a3      	ldr	r3, [r4, #8]
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	706b      	strb	r3, [r5, #1]
 80127b8:	68a2      	ldr	r2, [r4, #8]
 80127ba:	6923      	ldr	r3, [r4, #16]
 80127bc:	3202      	adds	r2, #2
 80127be:	3302      	adds	r3, #2
 80127c0:	2102      	movs	r1, #2
 80127c2:	60a2      	str	r2, [r4, #8]
 80127c4:	6123      	str	r3, [r4, #16]
 80127c6:	7561      	strb	r1, [r4, #21]
 80127c8:	7da0      	ldrb	r0, [r4, #22]
 80127ca:	f080 0001 	eor.w	r0, r0, #1
 80127ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127d2:	881b      	ldrh	r3, [r3, #0]
 80127d4:	802b      	strh	r3, [r5, #0]
 80127d6:	e7ef      	b.n	80127b8 <ucdr_deserialize_int16_t+0x90>
 80127d8:	68a2      	ldr	r2, [r4, #8]
 80127da:	6923      	ldr	r3, [r4, #16]
 80127dc:	7da0      	ldrb	r0, [r4, #22]
 80127de:	f884 8015 	strb.w	r8, [r4, #21]
 80127e2:	1b92      	subs	r2, r2, r6
 80127e4:	1b9b      	subs	r3, r3, r6
 80127e6:	60a2      	str	r2, [r4, #8]
 80127e8:	6123      	str	r3, [r4, #16]
 80127ea:	f080 0001 	eor.w	r0, r0, #1
 80127ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127f2:	68a3      	ldr	r3, [r4, #8]
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	706b      	strb	r3, [r5, #1]
 80127f8:	e7c2      	b.n	8012780 <ucdr_deserialize_int16_t+0x58>
 80127fa:	4639      	mov	r1, r7
 80127fc:	4632      	mov	r2, r6
 80127fe:	4628      	mov	r0, r5
 8012800:	f008 feaa 	bl	801b558 <memcpy>
 8012804:	68a1      	ldr	r1, [r4, #8]
 8012806:	464a      	mov	r2, r9
 8012808:	19a8      	adds	r0, r5, r6
 801280a:	f008 fea5 	bl	801b558 <memcpy>
 801280e:	e7b7      	b.n	8012780 <ucdr_deserialize_int16_t+0x58>

08012810 <ucdr_serialize_int32_t>:
 8012810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012814:	b082      	sub	sp, #8
 8012816:	4604      	mov	r4, r0
 8012818:	9101      	str	r1, [sp, #4]
 801281a:	2104      	movs	r1, #4
 801281c:	f001 f8a4 	bl	8013968 <ucdr_buffer_alignment>
 8012820:	4601      	mov	r1, r0
 8012822:	4620      	mov	r0, r4
 8012824:	7d67      	ldrb	r7, [r4, #21]
 8012826:	f001 f8e3 	bl	80139f0 <ucdr_advance_buffer>
 801282a:	2104      	movs	r1, #4
 801282c:	4620      	mov	r0, r4
 801282e:	f001 f83b 	bl	80138a8 <ucdr_check_buffer_available_for>
 8012832:	2800      	cmp	r0, #0
 8012834:	d139      	bne.n	80128aa <ucdr_serialize_int32_t+0x9a>
 8012836:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801283a:	42ab      	cmp	r3, r5
 801283c:	d930      	bls.n	80128a0 <ucdr_serialize_int32_t+0x90>
 801283e:	1b5e      	subs	r6, r3, r5
 8012840:	60a3      	str	r3, [r4, #8]
 8012842:	6923      	ldr	r3, [r4, #16]
 8012844:	f1c6 0804 	rsb	r8, r6, #4
 8012848:	4433      	add	r3, r6
 801284a:	6123      	str	r3, [r4, #16]
 801284c:	4641      	mov	r1, r8
 801284e:	4620      	mov	r0, r4
 8012850:	f001 f836 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012854:	2800      	cmp	r0, #0
 8012856:	d04c      	beq.n	80128f2 <ucdr_serialize_int32_t+0xe2>
 8012858:	7d23      	ldrb	r3, [r4, #20]
 801285a:	2b01      	cmp	r3, #1
 801285c:	d063      	beq.n	8012926 <ucdr_serialize_int32_t+0x116>
 801285e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012862:	702b      	strb	r3, [r5, #0]
 8012864:	2e00      	cmp	r6, #0
 8012866:	d051      	beq.n	801290c <ucdr_serialize_int32_t+0xfc>
 8012868:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801286c:	706b      	strb	r3, [r5, #1]
 801286e:	2e01      	cmp	r6, #1
 8012870:	d050      	beq.n	8012914 <ucdr_serialize_int32_t+0x104>
 8012872:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012876:	70ab      	strb	r3, [r5, #2]
 8012878:	2e02      	cmp	r6, #2
 801287a:	d04f      	beq.n	801291c <ucdr_serialize_int32_t+0x10c>
 801287c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012880:	70eb      	strb	r3, [r5, #3]
 8012882:	6923      	ldr	r3, [r4, #16]
 8012884:	68a2      	ldr	r2, [r4, #8]
 8012886:	7da0      	ldrb	r0, [r4, #22]
 8012888:	3304      	adds	r3, #4
 801288a:	1b9e      	subs	r6, r3, r6
 801288c:	4442      	add	r2, r8
 801288e:	2304      	movs	r3, #4
 8012890:	f080 0001 	eor.w	r0, r0, #1
 8012894:	60a2      	str	r2, [r4, #8]
 8012896:	6126      	str	r6, [r4, #16]
 8012898:	7563      	strb	r3, [r4, #21]
 801289a:	b002      	add	sp, #8
 801289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128a0:	2104      	movs	r1, #4
 80128a2:	4620      	mov	r0, r4
 80128a4:	f001 f80c 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 80128a8:	b1d0      	cbz	r0, 80128e0 <ucdr_serialize_int32_t+0xd0>
 80128aa:	7d23      	ldrb	r3, [r4, #20]
 80128ac:	2b01      	cmp	r3, #1
 80128ae:	68a3      	ldr	r3, [r4, #8]
 80128b0:	d01c      	beq.n	80128ec <ucdr_serialize_int32_t+0xdc>
 80128b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80128b6:	701a      	strb	r2, [r3, #0]
 80128b8:	68a3      	ldr	r3, [r4, #8]
 80128ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80128be:	705a      	strb	r2, [r3, #1]
 80128c0:	68a3      	ldr	r3, [r4, #8]
 80128c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80128c6:	709a      	strb	r2, [r3, #2]
 80128c8:	68a3      	ldr	r3, [r4, #8]
 80128ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80128ce:	70da      	strb	r2, [r3, #3]
 80128d0:	68a2      	ldr	r2, [r4, #8]
 80128d2:	6923      	ldr	r3, [r4, #16]
 80128d4:	3204      	adds	r2, #4
 80128d6:	3304      	adds	r3, #4
 80128d8:	2104      	movs	r1, #4
 80128da:	60a2      	str	r2, [r4, #8]
 80128dc:	6123      	str	r3, [r4, #16]
 80128de:	7561      	strb	r1, [r4, #21]
 80128e0:	7da0      	ldrb	r0, [r4, #22]
 80128e2:	f080 0001 	eor.w	r0, r0, #1
 80128e6:	b002      	add	sp, #8
 80128e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128ec:	9a01      	ldr	r2, [sp, #4]
 80128ee:	601a      	str	r2, [r3, #0]
 80128f0:	e7ee      	b.n	80128d0 <ucdr_serialize_int32_t+0xc0>
 80128f2:	68a2      	ldr	r2, [r4, #8]
 80128f4:	6923      	ldr	r3, [r4, #16]
 80128f6:	7da0      	ldrb	r0, [r4, #22]
 80128f8:	7567      	strb	r7, [r4, #21]
 80128fa:	1b92      	subs	r2, r2, r6
 80128fc:	1b9b      	subs	r3, r3, r6
 80128fe:	f080 0001 	eor.w	r0, r0, #1
 8012902:	60a2      	str	r2, [r4, #8]
 8012904:	6123      	str	r3, [r4, #16]
 8012906:	b002      	add	sp, #8
 8012908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801290c:	68a3      	ldr	r3, [r4, #8]
 801290e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012912:	701a      	strb	r2, [r3, #0]
 8012914:	68a3      	ldr	r3, [r4, #8]
 8012916:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801291a:	701a      	strb	r2, [r3, #0]
 801291c:	68a3      	ldr	r3, [r4, #8]
 801291e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012922:	701a      	strb	r2, [r3, #0]
 8012924:	e7ad      	b.n	8012882 <ucdr_serialize_int32_t+0x72>
 8012926:	4628      	mov	r0, r5
 8012928:	ad01      	add	r5, sp, #4
 801292a:	4629      	mov	r1, r5
 801292c:	4632      	mov	r2, r6
 801292e:	f008 fe13 	bl	801b558 <memcpy>
 8012932:	68a0      	ldr	r0, [r4, #8]
 8012934:	4642      	mov	r2, r8
 8012936:	19a9      	adds	r1, r5, r6
 8012938:	f008 fe0e 	bl	801b558 <memcpy>
 801293c:	e7a1      	b.n	8012882 <ucdr_serialize_int32_t+0x72>
 801293e:	bf00      	nop

08012940 <ucdr_deserialize_int32_t>:
 8012940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012944:	460d      	mov	r5, r1
 8012946:	2104      	movs	r1, #4
 8012948:	4604      	mov	r4, r0
 801294a:	f001 f80d 	bl	8013968 <ucdr_buffer_alignment>
 801294e:	4601      	mov	r1, r0
 8012950:	4620      	mov	r0, r4
 8012952:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012956:	f001 f84b 	bl	80139f0 <ucdr_advance_buffer>
 801295a:	2104      	movs	r1, #4
 801295c:	4620      	mov	r0, r4
 801295e:	f000 ffa3 	bl	80138a8 <ucdr_check_buffer_available_for>
 8012962:	2800      	cmp	r0, #0
 8012964:	d138      	bne.n	80129d8 <ucdr_deserialize_int32_t+0x98>
 8012966:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801296a:	42b7      	cmp	r7, r6
 801296c:	d92f      	bls.n	80129ce <ucdr_deserialize_int32_t+0x8e>
 801296e:	6923      	ldr	r3, [r4, #16]
 8012970:	60a7      	str	r7, [r4, #8]
 8012972:	1bbf      	subs	r7, r7, r6
 8012974:	443b      	add	r3, r7
 8012976:	f1c7 0904 	rsb	r9, r7, #4
 801297a:	6123      	str	r3, [r4, #16]
 801297c:	4649      	mov	r1, r9
 801297e:	4620      	mov	r0, r4
 8012980:	f000 ff9e 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012984:	2800      	cmp	r0, #0
 8012986:	d046      	beq.n	8012a16 <ucdr_deserialize_int32_t+0xd6>
 8012988:	7d23      	ldrb	r3, [r4, #20]
 801298a:	2b01      	cmp	r3, #1
 801298c:	d05c      	beq.n	8012a48 <ucdr_deserialize_int32_t+0x108>
 801298e:	78f3      	ldrb	r3, [r6, #3]
 8012990:	702b      	strb	r3, [r5, #0]
 8012992:	2f00      	cmp	r7, #0
 8012994:	d04c      	beq.n	8012a30 <ucdr_deserialize_int32_t+0xf0>
 8012996:	78b3      	ldrb	r3, [r6, #2]
 8012998:	706b      	strb	r3, [r5, #1]
 801299a:	2f01      	cmp	r7, #1
 801299c:	f105 0302 	add.w	r3, r5, #2
 80129a0:	d04a      	beq.n	8012a38 <ucdr_deserialize_int32_t+0xf8>
 80129a2:	7873      	ldrb	r3, [r6, #1]
 80129a4:	70ab      	strb	r3, [r5, #2]
 80129a6:	2f02      	cmp	r7, #2
 80129a8:	f105 0303 	add.w	r3, r5, #3
 80129ac:	d048      	beq.n	8012a40 <ucdr_deserialize_int32_t+0x100>
 80129ae:	7833      	ldrb	r3, [r6, #0]
 80129b0:	70eb      	strb	r3, [r5, #3]
 80129b2:	6923      	ldr	r3, [r4, #16]
 80129b4:	68a2      	ldr	r2, [r4, #8]
 80129b6:	7da0      	ldrb	r0, [r4, #22]
 80129b8:	2104      	movs	r1, #4
 80129ba:	3304      	adds	r3, #4
 80129bc:	444a      	add	r2, r9
 80129be:	1bdb      	subs	r3, r3, r7
 80129c0:	7561      	strb	r1, [r4, #21]
 80129c2:	60a2      	str	r2, [r4, #8]
 80129c4:	6123      	str	r3, [r4, #16]
 80129c6:	f080 0001 	eor.w	r0, r0, #1
 80129ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129ce:	2104      	movs	r1, #4
 80129d0:	4620      	mov	r0, r4
 80129d2:	f000 ff75 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 80129d6:	b1b0      	cbz	r0, 8012a06 <ucdr_deserialize_int32_t+0xc6>
 80129d8:	7d23      	ldrb	r3, [r4, #20]
 80129da:	2b01      	cmp	r3, #1
 80129dc:	68a3      	ldr	r3, [r4, #8]
 80129de:	d017      	beq.n	8012a10 <ucdr_deserialize_int32_t+0xd0>
 80129e0:	78db      	ldrb	r3, [r3, #3]
 80129e2:	702b      	strb	r3, [r5, #0]
 80129e4:	68a3      	ldr	r3, [r4, #8]
 80129e6:	789b      	ldrb	r3, [r3, #2]
 80129e8:	706b      	strb	r3, [r5, #1]
 80129ea:	68a3      	ldr	r3, [r4, #8]
 80129ec:	785b      	ldrb	r3, [r3, #1]
 80129ee:	70ab      	strb	r3, [r5, #2]
 80129f0:	68a3      	ldr	r3, [r4, #8]
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	70eb      	strb	r3, [r5, #3]
 80129f6:	68a2      	ldr	r2, [r4, #8]
 80129f8:	6923      	ldr	r3, [r4, #16]
 80129fa:	3204      	adds	r2, #4
 80129fc:	3304      	adds	r3, #4
 80129fe:	2104      	movs	r1, #4
 8012a00:	60a2      	str	r2, [r4, #8]
 8012a02:	6123      	str	r3, [r4, #16]
 8012a04:	7561      	strb	r1, [r4, #21]
 8012a06:	7da0      	ldrb	r0, [r4, #22]
 8012a08:	f080 0001 	eor.w	r0, r0, #1
 8012a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	602b      	str	r3, [r5, #0]
 8012a14:	e7ef      	b.n	80129f6 <ucdr_deserialize_int32_t+0xb6>
 8012a16:	68a2      	ldr	r2, [r4, #8]
 8012a18:	6923      	ldr	r3, [r4, #16]
 8012a1a:	7da0      	ldrb	r0, [r4, #22]
 8012a1c:	f884 8015 	strb.w	r8, [r4, #21]
 8012a20:	1bd2      	subs	r2, r2, r7
 8012a22:	1bdb      	subs	r3, r3, r7
 8012a24:	60a2      	str	r2, [r4, #8]
 8012a26:	6123      	str	r3, [r4, #16]
 8012a28:	f080 0001 	eor.w	r0, r0, #1
 8012a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a30:	68a3      	ldr	r3, [r4, #8]
 8012a32:	789b      	ldrb	r3, [r3, #2]
 8012a34:	706b      	strb	r3, [r5, #1]
 8012a36:	1cab      	adds	r3, r5, #2
 8012a38:	68a2      	ldr	r2, [r4, #8]
 8012a3a:	7852      	ldrb	r2, [r2, #1]
 8012a3c:	f803 2b01 	strb.w	r2, [r3], #1
 8012a40:	68a2      	ldr	r2, [r4, #8]
 8012a42:	7812      	ldrb	r2, [r2, #0]
 8012a44:	701a      	strb	r2, [r3, #0]
 8012a46:	e7b4      	b.n	80129b2 <ucdr_deserialize_int32_t+0x72>
 8012a48:	4631      	mov	r1, r6
 8012a4a:	463a      	mov	r2, r7
 8012a4c:	4628      	mov	r0, r5
 8012a4e:	f008 fd83 	bl	801b558 <memcpy>
 8012a52:	68a1      	ldr	r1, [r4, #8]
 8012a54:	464a      	mov	r2, r9
 8012a56:	19e8      	adds	r0, r5, r7
 8012a58:	f008 fd7e 	bl	801b558 <memcpy>
 8012a5c:	e7a9      	b.n	80129b2 <ucdr_deserialize_int32_t+0x72>
 8012a5e:	bf00      	nop

08012a60 <ucdr_serialize_int64_t>:
 8012a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a64:	2108      	movs	r1, #8
 8012a66:	b082      	sub	sp, #8
 8012a68:	4604      	mov	r4, r0
 8012a6a:	e9cd 2300 	strd	r2, r3, [sp]
 8012a6e:	f000 ff7b 	bl	8013968 <ucdr_buffer_alignment>
 8012a72:	4601      	mov	r1, r0
 8012a74:	4620      	mov	r0, r4
 8012a76:	7d67      	ldrb	r7, [r4, #21]
 8012a78:	f000 ffba 	bl	80139f0 <ucdr_advance_buffer>
 8012a7c:	2108      	movs	r1, #8
 8012a7e:	4620      	mov	r0, r4
 8012a80:	f000 ff12 	bl	80138a8 <ucdr_check_buffer_available_for>
 8012a84:	2800      	cmp	r0, #0
 8012a86:	d14e      	bne.n	8012b26 <ucdr_serialize_int64_t+0xc6>
 8012a88:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012a8c:	42ab      	cmp	r3, r5
 8012a8e:	d945      	bls.n	8012b1c <ucdr_serialize_int64_t+0xbc>
 8012a90:	1b5e      	subs	r6, r3, r5
 8012a92:	60a3      	str	r3, [r4, #8]
 8012a94:	6923      	ldr	r3, [r4, #16]
 8012a96:	f1c6 0808 	rsb	r8, r6, #8
 8012a9a:	4433      	add	r3, r6
 8012a9c:	6123      	str	r3, [r4, #16]
 8012a9e:	4641      	mov	r1, r8
 8012aa0:	4620      	mov	r0, r4
 8012aa2:	f000 ff0d 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012aa6:	2800      	cmp	r0, #0
 8012aa8:	d074      	beq.n	8012b94 <ucdr_serialize_int64_t+0x134>
 8012aaa:	7d23      	ldrb	r3, [r4, #20]
 8012aac:	2b01      	cmp	r3, #1
 8012aae:	f000 809b 	beq.w	8012be8 <ucdr_serialize_int64_t+0x188>
 8012ab2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012ab6:	702b      	strb	r3, [r5, #0]
 8012ab8:	2e00      	cmp	r6, #0
 8012aba:	d078      	beq.n	8012bae <ucdr_serialize_int64_t+0x14e>
 8012abc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012ac0:	706b      	strb	r3, [r5, #1]
 8012ac2:	2e01      	cmp	r6, #1
 8012ac4:	d077      	beq.n	8012bb6 <ucdr_serialize_int64_t+0x156>
 8012ac6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012aca:	70ab      	strb	r3, [r5, #2]
 8012acc:	2e02      	cmp	r6, #2
 8012ace:	d076      	beq.n	8012bbe <ucdr_serialize_int64_t+0x15e>
 8012ad0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012ad4:	70eb      	strb	r3, [r5, #3]
 8012ad6:	2e03      	cmp	r6, #3
 8012ad8:	d075      	beq.n	8012bc6 <ucdr_serialize_int64_t+0x166>
 8012ada:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012ade:	712b      	strb	r3, [r5, #4]
 8012ae0:	2e04      	cmp	r6, #4
 8012ae2:	d074      	beq.n	8012bce <ucdr_serialize_int64_t+0x16e>
 8012ae4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012ae8:	716b      	strb	r3, [r5, #5]
 8012aea:	2e05      	cmp	r6, #5
 8012aec:	d073      	beq.n	8012bd6 <ucdr_serialize_int64_t+0x176>
 8012aee:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012af2:	71ab      	strb	r3, [r5, #6]
 8012af4:	2e06      	cmp	r6, #6
 8012af6:	d072      	beq.n	8012bde <ucdr_serialize_int64_t+0x17e>
 8012af8:	f89d 3000 	ldrb.w	r3, [sp]
 8012afc:	71eb      	strb	r3, [r5, #7]
 8012afe:	6923      	ldr	r3, [r4, #16]
 8012b00:	68a2      	ldr	r2, [r4, #8]
 8012b02:	7da0      	ldrb	r0, [r4, #22]
 8012b04:	3308      	adds	r3, #8
 8012b06:	1b9e      	subs	r6, r3, r6
 8012b08:	4442      	add	r2, r8
 8012b0a:	2308      	movs	r3, #8
 8012b0c:	f080 0001 	eor.w	r0, r0, #1
 8012b10:	60a2      	str	r2, [r4, #8]
 8012b12:	6126      	str	r6, [r4, #16]
 8012b14:	7563      	strb	r3, [r4, #21]
 8012b16:	b002      	add	sp, #8
 8012b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b1c:	2108      	movs	r1, #8
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f000 fece 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012b24:	b350      	cbz	r0, 8012b7c <ucdr_serialize_int64_t+0x11c>
 8012b26:	7d23      	ldrb	r3, [r4, #20]
 8012b28:	2b01      	cmp	r3, #1
 8012b2a:	d02d      	beq.n	8012b88 <ucdr_serialize_int64_t+0x128>
 8012b2c:	68a3      	ldr	r3, [r4, #8]
 8012b2e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012b32:	701a      	strb	r2, [r3, #0]
 8012b34:	68a3      	ldr	r3, [r4, #8]
 8012b36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012b3a:	705a      	strb	r2, [r3, #1]
 8012b3c:	68a3      	ldr	r3, [r4, #8]
 8012b3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012b42:	709a      	strb	r2, [r3, #2]
 8012b44:	68a3      	ldr	r3, [r4, #8]
 8012b46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012b4a:	70da      	strb	r2, [r3, #3]
 8012b4c:	68a3      	ldr	r3, [r4, #8]
 8012b4e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012b52:	711a      	strb	r2, [r3, #4]
 8012b54:	68a3      	ldr	r3, [r4, #8]
 8012b56:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012b5a:	715a      	strb	r2, [r3, #5]
 8012b5c:	68a3      	ldr	r3, [r4, #8]
 8012b5e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012b62:	719a      	strb	r2, [r3, #6]
 8012b64:	68a3      	ldr	r3, [r4, #8]
 8012b66:	f89d 2000 	ldrb.w	r2, [sp]
 8012b6a:	71da      	strb	r2, [r3, #7]
 8012b6c:	68a2      	ldr	r2, [r4, #8]
 8012b6e:	6923      	ldr	r3, [r4, #16]
 8012b70:	3208      	adds	r2, #8
 8012b72:	3308      	adds	r3, #8
 8012b74:	2108      	movs	r1, #8
 8012b76:	60a2      	str	r2, [r4, #8]
 8012b78:	6123      	str	r3, [r4, #16]
 8012b7a:	7561      	strb	r1, [r4, #21]
 8012b7c:	7da0      	ldrb	r0, [r4, #22]
 8012b7e:	f080 0001 	eor.w	r0, r0, #1
 8012b82:	b002      	add	sp, #8
 8012b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b88:	466b      	mov	r3, sp
 8012b8a:	cb03      	ldmia	r3!, {r0, r1}
 8012b8c:	68a3      	ldr	r3, [r4, #8]
 8012b8e:	6018      	str	r0, [r3, #0]
 8012b90:	6059      	str	r1, [r3, #4]
 8012b92:	e7eb      	b.n	8012b6c <ucdr_serialize_int64_t+0x10c>
 8012b94:	68a2      	ldr	r2, [r4, #8]
 8012b96:	6923      	ldr	r3, [r4, #16]
 8012b98:	7da0      	ldrb	r0, [r4, #22]
 8012b9a:	7567      	strb	r7, [r4, #21]
 8012b9c:	1b92      	subs	r2, r2, r6
 8012b9e:	1b9b      	subs	r3, r3, r6
 8012ba0:	f080 0001 	eor.w	r0, r0, #1
 8012ba4:	60a2      	str	r2, [r4, #8]
 8012ba6:	6123      	str	r3, [r4, #16]
 8012ba8:	b002      	add	sp, #8
 8012baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bae:	68a3      	ldr	r3, [r4, #8]
 8012bb0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012bb4:	701a      	strb	r2, [r3, #0]
 8012bb6:	68a3      	ldr	r3, [r4, #8]
 8012bb8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012bbc:	701a      	strb	r2, [r3, #0]
 8012bbe:	68a3      	ldr	r3, [r4, #8]
 8012bc0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012bc4:	701a      	strb	r2, [r3, #0]
 8012bc6:	68a3      	ldr	r3, [r4, #8]
 8012bc8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012bcc:	701a      	strb	r2, [r3, #0]
 8012bce:	68a3      	ldr	r3, [r4, #8]
 8012bd0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012bd4:	701a      	strb	r2, [r3, #0]
 8012bd6:	68a3      	ldr	r3, [r4, #8]
 8012bd8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012bdc:	701a      	strb	r2, [r3, #0]
 8012bde:	68a3      	ldr	r3, [r4, #8]
 8012be0:	f89d 2000 	ldrb.w	r2, [sp]
 8012be4:	701a      	strb	r2, [r3, #0]
 8012be6:	e78a      	b.n	8012afe <ucdr_serialize_int64_t+0x9e>
 8012be8:	4628      	mov	r0, r5
 8012bea:	466d      	mov	r5, sp
 8012bec:	4629      	mov	r1, r5
 8012bee:	4632      	mov	r2, r6
 8012bf0:	f008 fcb2 	bl	801b558 <memcpy>
 8012bf4:	68a0      	ldr	r0, [r4, #8]
 8012bf6:	4642      	mov	r2, r8
 8012bf8:	19a9      	adds	r1, r5, r6
 8012bfa:	f008 fcad 	bl	801b558 <memcpy>
 8012bfe:	e77e      	b.n	8012afe <ucdr_serialize_int64_t+0x9e>

08012c00 <ucdr_deserialize_int64_t>:
 8012c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c04:	460d      	mov	r5, r1
 8012c06:	2108      	movs	r1, #8
 8012c08:	4604      	mov	r4, r0
 8012c0a:	f000 fead 	bl	8013968 <ucdr_buffer_alignment>
 8012c0e:	4601      	mov	r1, r0
 8012c10:	4620      	mov	r0, r4
 8012c12:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012c16:	f000 feeb 	bl	80139f0 <ucdr_advance_buffer>
 8012c1a:	2108      	movs	r1, #8
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	f000 fe43 	bl	80138a8 <ucdr_check_buffer_available_for>
 8012c22:	2800      	cmp	r0, #0
 8012c24:	d151      	bne.n	8012cca <ucdr_deserialize_int64_t+0xca>
 8012c26:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012c2a:	42be      	cmp	r6, r7
 8012c2c:	d948      	bls.n	8012cc0 <ucdr_deserialize_int64_t+0xc0>
 8012c2e:	6923      	ldr	r3, [r4, #16]
 8012c30:	60a6      	str	r6, [r4, #8]
 8012c32:	1bf6      	subs	r6, r6, r7
 8012c34:	4433      	add	r3, r6
 8012c36:	f1c6 0808 	rsb	r8, r6, #8
 8012c3a:	6123      	str	r3, [r4, #16]
 8012c3c:	4641      	mov	r1, r8
 8012c3e:	4620      	mov	r0, r4
 8012c40:	f000 fe3e 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012c44:	2800      	cmp	r0, #0
 8012c46:	d06d      	beq.n	8012d24 <ucdr_deserialize_int64_t+0x124>
 8012c48:	7d23      	ldrb	r3, [r4, #20]
 8012c4a:	2b01      	cmp	r3, #1
 8012c4c:	f000 8093 	beq.w	8012d76 <ucdr_deserialize_int64_t+0x176>
 8012c50:	79fb      	ldrb	r3, [r7, #7]
 8012c52:	702b      	strb	r3, [r5, #0]
 8012c54:	2e00      	cmp	r6, #0
 8012c56:	d072      	beq.n	8012d3e <ucdr_deserialize_int64_t+0x13e>
 8012c58:	79bb      	ldrb	r3, [r7, #6]
 8012c5a:	706b      	strb	r3, [r5, #1]
 8012c5c:	2e01      	cmp	r6, #1
 8012c5e:	f105 0302 	add.w	r3, r5, #2
 8012c62:	d070      	beq.n	8012d46 <ucdr_deserialize_int64_t+0x146>
 8012c64:	797b      	ldrb	r3, [r7, #5]
 8012c66:	70ab      	strb	r3, [r5, #2]
 8012c68:	2e02      	cmp	r6, #2
 8012c6a:	f105 0303 	add.w	r3, r5, #3
 8012c6e:	d06e      	beq.n	8012d4e <ucdr_deserialize_int64_t+0x14e>
 8012c70:	793b      	ldrb	r3, [r7, #4]
 8012c72:	70eb      	strb	r3, [r5, #3]
 8012c74:	2e03      	cmp	r6, #3
 8012c76:	f105 0304 	add.w	r3, r5, #4
 8012c7a:	d06c      	beq.n	8012d56 <ucdr_deserialize_int64_t+0x156>
 8012c7c:	78fb      	ldrb	r3, [r7, #3]
 8012c7e:	712b      	strb	r3, [r5, #4]
 8012c80:	2e04      	cmp	r6, #4
 8012c82:	f105 0305 	add.w	r3, r5, #5
 8012c86:	d06a      	beq.n	8012d5e <ucdr_deserialize_int64_t+0x15e>
 8012c88:	78bb      	ldrb	r3, [r7, #2]
 8012c8a:	716b      	strb	r3, [r5, #5]
 8012c8c:	2e05      	cmp	r6, #5
 8012c8e:	f105 0306 	add.w	r3, r5, #6
 8012c92:	d068      	beq.n	8012d66 <ucdr_deserialize_int64_t+0x166>
 8012c94:	787b      	ldrb	r3, [r7, #1]
 8012c96:	71ab      	strb	r3, [r5, #6]
 8012c98:	2e06      	cmp	r6, #6
 8012c9a:	f105 0307 	add.w	r3, r5, #7
 8012c9e:	d066      	beq.n	8012d6e <ucdr_deserialize_int64_t+0x16e>
 8012ca0:	783b      	ldrb	r3, [r7, #0]
 8012ca2:	71eb      	strb	r3, [r5, #7]
 8012ca4:	6923      	ldr	r3, [r4, #16]
 8012ca6:	68a2      	ldr	r2, [r4, #8]
 8012ca8:	7da0      	ldrb	r0, [r4, #22]
 8012caa:	3308      	adds	r3, #8
 8012cac:	1b9e      	subs	r6, r3, r6
 8012cae:	2308      	movs	r3, #8
 8012cb0:	4442      	add	r2, r8
 8012cb2:	7563      	strb	r3, [r4, #21]
 8012cb4:	60a2      	str	r2, [r4, #8]
 8012cb6:	6126      	str	r6, [r4, #16]
 8012cb8:	f080 0001 	eor.w	r0, r0, #1
 8012cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cc0:	2108      	movs	r1, #8
 8012cc2:	4620      	mov	r0, r4
 8012cc4:	f000 fdfc 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012cc8:	b310      	cbz	r0, 8012d10 <ucdr_deserialize_int64_t+0x110>
 8012cca:	7d23      	ldrb	r3, [r4, #20]
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	68a3      	ldr	r3, [r4, #8]
 8012cd0:	d023      	beq.n	8012d1a <ucdr_deserialize_int64_t+0x11a>
 8012cd2:	79db      	ldrb	r3, [r3, #7]
 8012cd4:	702b      	strb	r3, [r5, #0]
 8012cd6:	68a3      	ldr	r3, [r4, #8]
 8012cd8:	799b      	ldrb	r3, [r3, #6]
 8012cda:	706b      	strb	r3, [r5, #1]
 8012cdc:	68a3      	ldr	r3, [r4, #8]
 8012cde:	795b      	ldrb	r3, [r3, #5]
 8012ce0:	70ab      	strb	r3, [r5, #2]
 8012ce2:	68a3      	ldr	r3, [r4, #8]
 8012ce4:	791b      	ldrb	r3, [r3, #4]
 8012ce6:	70eb      	strb	r3, [r5, #3]
 8012ce8:	68a3      	ldr	r3, [r4, #8]
 8012cea:	78db      	ldrb	r3, [r3, #3]
 8012cec:	712b      	strb	r3, [r5, #4]
 8012cee:	68a3      	ldr	r3, [r4, #8]
 8012cf0:	789b      	ldrb	r3, [r3, #2]
 8012cf2:	716b      	strb	r3, [r5, #5]
 8012cf4:	68a3      	ldr	r3, [r4, #8]
 8012cf6:	785b      	ldrb	r3, [r3, #1]
 8012cf8:	71ab      	strb	r3, [r5, #6]
 8012cfa:	68a3      	ldr	r3, [r4, #8]
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	71eb      	strb	r3, [r5, #7]
 8012d00:	68a2      	ldr	r2, [r4, #8]
 8012d02:	6923      	ldr	r3, [r4, #16]
 8012d04:	3208      	adds	r2, #8
 8012d06:	3308      	adds	r3, #8
 8012d08:	2108      	movs	r1, #8
 8012d0a:	60a2      	str	r2, [r4, #8]
 8012d0c:	6123      	str	r3, [r4, #16]
 8012d0e:	7561      	strb	r1, [r4, #21]
 8012d10:	7da0      	ldrb	r0, [r4, #22]
 8012d12:	f080 0001 	eor.w	r0, r0, #1
 8012d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d1a:	681a      	ldr	r2, [r3, #0]
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	606b      	str	r3, [r5, #4]
 8012d20:	602a      	str	r2, [r5, #0]
 8012d22:	e7ed      	b.n	8012d00 <ucdr_deserialize_int64_t+0x100>
 8012d24:	68a2      	ldr	r2, [r4, #8]
 8012d26:	6923      	ldr	r3, [r4, #16]
 8012d28:	7da0      	ldrb	r0, [r4, #22]
 8012d2a:	f884 9015 	strb.w	r9, [r4, #21]
 8012d2e:	1b92      	subs	r2, r2, r6
 8012d30:	1b9b      	subs	r3, r3, r6
 8012d32:	60a2      	str	r2, [r4, #8]
 8012d34:	6123      	str	r3, [r4, #16]
 8012d36:	f080 0001 	eor.w	r0, r0, #1
 8012d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d3e:	68a3      	ldr	r3, [r4, #8]
 8012d40:	799b      	ldrb	r3, [r3, #6]
 8012d42:	706b      	strb	r3, [r5, #1]
 8012d44:	1cab      	adds	r3, r5, #2
 8012d46:	68a2      	ldr	r2, [r4, #8]
 8012d48:	7952      	ldrb	r2, [r2, #5]
 8012d4a:	f803 2b01 	strb.w	r2, [r3], #1
 8012d4e:	68a2      	ldr	r2, [r4, #8]
 8012d50:	7912      	ldrb	r2, [r2, #4]
 8012d52:	f803 2b01 	strb.w	r2, [r3], #1
 8012d56:	68a2      	ldr	r2, [r4, #8]
 8012d58:	78d2      	ldrb	r2, [r2, #3]
 8012d5a:	f803 2b01 	strb.w	r2, [r3], #1
 8012d5e:	68a2      	ldr	r2, [r4, #8]
 8012d60:	7892      	ldrb	r2, [r2, #2]
 8012d62:	f803 2b01 	strb.w	r2, [r3], #1
 8012d66:	68a2      	ldr	r2, [r4, #8]
 8012d68:	7852      	ldrb	r2, [r2, #1]
 8012d6a:	f803 2b01 	strb.w	r2, [r3], #1
 8012d6e:	68a2      	ldr	r2, [r4, #8]
 8012d70:	7812      	ldrb	r2, [r2, #0]
 8012d72:	701a      	strb	r2, [r3, #0]
 8012d74:	e796      	b.n	8012ca4 <ucdr_deserialize_int64_t+0xa4>
 8012d76:	4639      	mov	r1, r7
 8012d78:	4632      	mov	r2, r6
 8012d7a:	4628      	mov	r0, r5
 8012d7c:	f008 fbec 	bl	801b558 <memcpy>
 8012d80:	68a1      	ldr	r1, [r4, #8]
 8012d82:	4642      	mov	r2, r8
 8012d84:	19a8      	adds	r0, r5, r6
 8012d86:	f008 fbe7 	bl	801b558 <memcpy>
 8012d8a:	e78b      	b.n	8012ca4 <ucdr_deserialize_int64_t+0xa4>

08012d8c <ucdr_serialize_float>:
 8012d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d90:	2104      	movs	r1, #4
 8012d92:	b082      	sub	sp, #8
 8012d94:	4604      	mov	r4, r0
 8012d96:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012d9a:	f000 fde5 	bl	8013968 <ucdr_buffer_alignment>
 8012d9e:	4601      	mov	r1, r0
 8012da0:	4620      	mov	r0, r4
 8012da2:	7d67      	ldrb	r7, [r4, #21]
 8012da4:	f000 fe24 	bl	80139f0 <ucdr_advance_buffer>
 8012da8:	2104      	movs	r1, #4
 8012daa:	4620      	mov	r0, r4
 8012dac:	f000 fd7c 	bl	80138a8 <ucdr_check_buffer_available_for>
 8012db0:	2800      	cmp	r0, #0
 8012db2:	d139      	bne.n	8012e28 <ucdr_serialize_float+0x9c>
 8012db4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012db8:	42ab      	cmp	r3, r5
 8012dba:	d930      	bls.n	8012e1e <ucdr_serialize_float+0x92>
 8012dbc:	1b5e      	subs	r6, r3, r5
 8012dbe:	60a3      	str	r3, [r4, #8]
 8012dc0:	6923      	ldr	r3, [r4, #16]
 8012dc2:	f1c6 0804 	rsb	r8, r6, #4
 8012dc6:	4433      	add	r3, r6
 8012dc8:	6123      	str	r3, [r4, #16]
 8012dca:	4641      	mov	r1, r8
 8012dcc:	4620      	mov	r0, r4
 8012dce:	f000 fd77 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012dd2:	2800      	cmp	r0, #0
 8012dd4:	d04c      	beq.n	8012e70 <ucdr_serialize_float+0xe4>
 8012dd6:	7d23      	ldrb	r3, [r4, #20]
 8012dd8:	2b01      	cmp	r3, #1
 8012dda:	d063      	beq.n	8012ea4 <ucdr_serialize_float+0x118>
 8012ddc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012de0:	702b      	strb	r3, [r5, #0]
 8012de2:	2e00      	cmp	r6, #0
 8012de4:	d051      	beq.n	8012e8a <ucdr_serialize_float+0xfe>
 8012de6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012dea:	706b      	strb	r3, [r5, #1]
 8012dec:	2e01      	cmp	r6, #1
 8012dee:	d050      	beq.n	8012e92 <ucdr_serialize_float+0x106>
 8012df0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012df4:	70ab      	strb	r3, [r5, #2]
 8012df6:	2e02      	cmp	r6, #2
 8012df8:	d04f      	beq.n	8012e9a <ucdr_serialize_float+0x10e>
 8012dfa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012dfe:	70eb      	strb	r3, [r5, #3]
 8012e00:	6923      	ldr	r3, [r4, #16]
 8012e02:	68a2      	ldr	r2, [r4, #8]
 8012e04:	7da0      	ldrb	r0, [r4, #22]
 8012e06:	3304      	adds	r3, #4
 8012e08:	1b9e      	subs	r6, r3, r6
 8012e0a:	4442      	add	r2, r8
 8012e0c:	2304      	movs	r3, #4
 8012e0e:	f080 0001 	eor.w	r0, r0, #1
 8012e12:	60a2      	str	r2, [r4, #8]
 8012e14:	6126      	str	r6, [r4, #16]
 8012e16:	7563      	strb	r3, [r4, #21]
 8012e18:	b002      	add	sp, #8
 8012e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e1e:	2104      	movs	r1, #4
 8012e20:	4620      	mov	r0, r4
 8012e22:	f000 fd4d 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012e26:	b1d0      	cbz	r0, 8012e5e <ucdr_serialize_float+0xd2>
 8012e28:	7d23      	ldrb	r3, [r4, #20]
 8012e2a:	2b01      	cmp	r3, #1
 8012e2c:	68a3      	ldr	r3, [r4, #8]
 8012e2e:	d01c      	beq.n	8012e6a <ucdr_serialize_float+0xde>
 8012e30:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012e34:	701a      	strb	r2, [r3, #0]
 8012e36:	68a3      	ldr	r3, [r4, #8]
 8012e38:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012e3c:	705a      	strb	r2, [r3, #1]
 8012e3e:	68a3      	ldr	r3, [r4, #8]
 8012e40:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012e44:	709a      	strb	r2, [r3, #2]
 8012e46:	68a3      	ldr	r3, [r4, #8]
 8012e48:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012e4c:	70da      	strb	r2, [r3, #3]
 8012e4e:	68a2      	ldr	r2, [r4, #8]
 8012e50:	6923      	ldr	r3, [r4, #16]
 8012e52:	3204      	adds	r2, #4
 8012e54:	3304      	adds	r3, #4
 8012e56:	2104      	movs	r1, #4
 8012e58:	60a2      	str	r2, [r4, #8]
 8012e5a:	6123      	str	r3, [r4, #16]
 8012e5c:	7561      	strb	r1, [r4, #21]
 8012e5e:	7da0      	ldrb	r0, [r4, #22]
 8012e60:	f080 0001 	eor.w	r0, r0, #1
 8012e64:	b002      	add	sp, #8
 8012e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e6a:	9a01      	ldr	r2, [sp, #4]
 8012e6c:	601a      	str	r2, [r3, #0]
 8012e6e:	e7ee      	b.n	8012e4e <ucdr_serialize_float+0xc2>
 8012e70:	68a2      	ldr	r2, [r4, #8]
 8012e72:	6923      	ldr	r3, [r4, #16]
 8012e74:	7da0      	ldrb	r0, [r4, #22]
 8012e76:	7567      	strb	r7, [r4, #21]
 8012e78:	1b92      	subs	r2, r2, r6
 8012e7a:	1b9b      	subs	r3, r3, r6
 8012e7c:	f080 0001 	eor.w	r0, r0, #1
 8012e80:	60a2      	str	r2, [r4, #8]
 8012e82:	6123      	str	r3, [r4, #16]
 8012e84:	b002      	add	sp, #8
 8012e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e8a:	68a3      	ldr	r3, [r4, #8]
 8012e8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012e90:	701a      	strb	r2, [r3, #0]
 8012e92:	68a3      	ldr	r3, [r4, #8]
 8012e94:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012e98:	701a      	strb	r2, [r3, #0]
 8012e9a:	68a3      	ldr	r3, [r4, #8]
 8012e9c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012ea0:	701a      	strb	r2, [r3, #0]
 8012ea2:	e7ad      	b.n	8012e00 <ucdr_serialize_float+0x74>
 8012ea4:	4628      	mov	r0, r5
 8012ea6:	ad01      	add	r5, sp, #4
 8012ea8:	4629      	mov	r1, r5
 8012eaa:	4632      	mov	r2, r6
 8012eac:	f008 fb54 	bl	801b558 <memcpy>
 8012eb0:	68a0      	ldr	r0, [r4, #8]
 8012eb2:	4642      	mov	r2, r8
 8012eb4:	19a9      	adds	r1, r5, r6
 8012eb6:	f008 fb4f 	bl	801b558 <memcpy>
 8012eba:	e7a1      	b.n	8012e00 <ucdr_serialize_float+0x74>

08012ebc <ucdr_serialize_endian_float>:
 8012ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ec0:	460d      	mov	r5, r1
 8012ec2:	b083      	sub	sp, #12
 8012ec4:	2104      	movs	r1, #4
 8012ec6:	4604      	mov	r4, r0
 8012ec8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012ecc:	f000 fd4c 	bl	8013968 <ucdr_buffer_alignment>
 8012ed0:	4601      	mov	r1, r0
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012ed8:	f000 fd8a 	bl	80139f0 <ucdr_advance_buffer>
 8012edc:	2104      	movs	r1, #4
 8012ede:	4620      	mov	r0, r4
 8012ee0:	f000 fce2 	bl	80138a8 <ucdr_check_buffer_available_for>
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	d138      	bne.n	8012f5a <ucdr_serialize_endian_float+0x9e>
 8012ee8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012eec:	42b7      	cmp	r7, r6
 8012eee:	d92f      	bls.n	8012f50 <ucdr_serialize_endian_float+0x94>
 8012ef0:	6923      	ldr	r3, [r4, #16]
 8012ef2:	60a7      	str	r7, [r4, #8]
 8012ef4:	1bbf      	subs	r7, r7, r6
 8012ef6:	443b      	add	r3, r7
 8012ef8:	f1c7 0904 	rsb	r9, r7, #4
 8012efc:	6123      	str	r3, [r4, #16]
 8012efe:	4649      	mov	r1, r9
 8012f00:	4620      	mov	r0, r4
 8012f02:	f000 fcdd 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012f06:	2800      	cmp	r0, #0
 8012f08:	d04a      	beq.n	8012fa0 <ucdr_serialize_endian_float+0xe4>
 8012f0a:	2d01      	cmp	r5, #1
 8012f0c:	d063      	beq.n	8012fd6 <ucdr_serialize_endian_float+0x11a>
 8012f0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012f12:	7033      	strb	r3, [r6, #0]
 8012f14:	2f00      	cmp	r7, #0
 8012f16:	d051      	beq.n	8012fbc <ucdr_serialize_endian_float+0x100>
 8012f18:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012f1c:	7073      	strb	r3, [r6, #1]
 8012f1e:	2f01      	cmp	r7, #1
 8012f20:	d050      	beq.n	8012fc4 <ucdr_serialize_endian_float+0x108>
 8012f22:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012f26:	70b3      	strb	r3, [r6, #2]
 8012f28:	2f02      	cmp	r7, #2
 8012f2a:	d04f      	beq.n	8012fcc <ucdr_serialize_endian_float+0x110>
 8012f2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012f30:	70f3      	strb	r3, [r6, #3]
 8012f32:	6923      	ldr	r3, [r4, #16]
 8012f34:	68a2      	ldr	r2, [r4, #8]
 8012f36:	7da0      	ldrb	r0, [r4, #22]
 8012f38:	3304      	adds	r3, #4
 8012f3a:	444a      	add	r2, r9
 8012f3c:	1bdb      	subs	r3, r3, r7
 8012f3e:	2104      	movs	r1, #4
 8012f40:	f080 0001 	eor.w	r0, r0, #1
 8012f44:	60a2      	str	r2, [r4, #8]
 8012f46:	6123      	str	r3, [r4, #16]
 8012f48:	7561      	strb	r1, [r4, #21]
 8012f4a:	b003      	add	sp, #12
 8012f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f50:	2104      	movs	r1, #4
 8012f52:	4620      	mov	r0, r4
 8012f54:	f000 fcb4 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8012f58:	b1c8      	cbz	r0, 8012f8e <ucdr_serialize_endian_float+0xd2>
 8012f5a:	2d01      	cmp	r5, #1
 8012f5c:	68a3      	ldr	r3, [r4, #8]
 8012f5e:	d01c      	beq.n	8012f9a <ucdr_serialize_endian_float+0xde>
 8012f60:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012f64:	701a      	strb	r2, [r3, #0]
 8012f66:	68a3      	ldr	r3, [r4, #8]
 8012f68:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012f6c:	705a      	strb	r2, [r3, #1]
 8012f6e:	68a3      	ldr	r3, [r4, #8]
 8012f70:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012f74:	709a      	strb	r2, [r3, #2]
 8012f76:	68a3      	ldr	r3, [r4, #8]
 8012f78:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012f7c:	70da      	strb	r2, [r3, #3]
 8012f7e:	68a2      	ldr	r2, [r4, #8]
 8012f80:	6923      	ldr	r3, [r4, #16]
 8012f82:	3204      	adds	r2, #4
 8012f84:	3304      	adds	r3, #4
 8012f86:	2104      	movs	r1, #4
 8012f88:	60a2      	str	r2, [r4, #8]
 8012f8a:	6123      	str	r3, [r4, #16]
 8012f8c:	7561      	strb	r1, [r4, #21]
 8012f8e:	7da0      	ldrb	r0, [r4, #22]
 8012f90:	f080 0001 	eor.w	r0, r0, #1
 8012f94:	b003      	add	sp, #12
 8012f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f9a:	9a01      	ldr	r2, [sp, #4]
 8012f9c:	601a      	str	r2, [r3, #0]
 8012f9e:	e7ee      	b.n	8012f7e <ucdr_serialize_endian_float+0xc2>
 8012fa0:	68a2      	ldr	r2, [r4, #8]
 8012fa2:	6923      	ldr	r3, [r4, #16]
 8012fa4:	7da0      	ldrb	r0, [r4, #22]
 8012fa6:	f884 8015 	strb.w	r8, [r4, #21]
 8012faa:	1bd2      	subs	r2, r2, r7
 8012fac:	1bdb      	subs	r3, r3, r7
 8012fae:	f080 0001 	eor.w	r0, r0, #1
 8012fb2:	60a2      	str	r2, [r4, #8]
 8012fb4:	6123      	str	r3, [r4, #16]
 8012fb6:	b003      	add	sp, #12
 8012fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fbc:	68a3      	ldr	r3, [r4, #8]
 8012fbe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012fc2:	701a      	strb	r2, [r3, #0]
 8012fc4:	68a3      	ldr	r3, [r4, #8]
 8012fc6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012fca:	701a      	strb	r2, [r3, #0]
 8012fcc:	68a3      	ldr	r3, [r4, #8]
 8012fce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012fd2:	701a      	strb	r2, [r3, #0]
 8012fd4:	e7ad      	b.n	8012f32 <ucdr_serialize_endian_float+0x76>
 8012fd6:	ad01      	add	r5, sp, #4
 8012fd8:	4629      	mov	r1, r5
 8012fda:	463a      	mov	r2, r7
 8012fdc:	4630      	mov	r0, r6
 8012fde:	f008 fabb 	bl	801b558 <memcpy>
 8012fe2:	68a0      	ldr	r0, [r4, #8]
 8012fe4:	464a      	mov	r2, r9
 8012fe6:	19e9      	adds	r1, r5, r7
 8012fe8:	f008 fab6 	bl	801b558 <memcpy>
 8012fec:	e7a1      	b.n	8012f32 <ucdr_serialize_endian_float+0x76>
 8012fee:	bf00      	nop

08012ff0 <ucdr_deserialize_float>:
 8012ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ff4:	460d      	mov	r5, r1
 8012ff6:	2104      	movs	r1, #4
 8012ff8:	4604      	mov	r4, r0
 8012ffa:	f000 fcb5 	bl	8013968 <ucdr_buffer_alignment>
 8012ffe:	4601      	mov	r1, r0
 8013000:	4620      	mov	r0, r4
 8013002:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013006:	f000 fcf3 	bl	80139f0 <ucdr_advance_buffer>
 801300a:	2104      	movs	r1, #4
 801300c:	4620      	mov	r0, r4
 801300e:	f000 fc4b 	bl	80138a8 <ucdr_check_buffer_available_for>
 8013012:	2800      	cmp	r0, #0
 8013014:	d138      	bne.n	8013088 <ucdr_deserialize_float+0x98>
 8013016:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801301a:	42b7      	cmp	r7, r6
 801301c:	d92f      	bls.n	801307e <ucdr_deserialize_float+0x8e>
 801301e:	6923      	ldr	r3, [r4, #16]
 8013020:	60a7      	str	r7, [r4, #8]
 8013022:	1bbf      	subs	r7, r7, r6
 8013024:	443b      	add	r3, r7
 8013026:	f1c7 0904 	rsb	r9, r7, #4
 801302a:	6123      	str	r3, [r4, #16]
 801302c:	4649      	mov	r1, r9
 801302e:	4620      	mov	r0, r4
 8013030:	f000 fc46 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8013034:	2800      	cmp	r0, #0
 8013036:	d046      	beq.n	80130c6 <ucdr_deserialize_float+0xd6>
 8013038:	7d23      	ldrb	r3, [r4, #20]
 801303a:	2b01      	cmp	r3, #1
 801303c:	d05c      	beq.n	80130f8 <ucdr_deserialize_float+0x108>
 801303e:	78f3      	ldrb	r3, [r6, #3]
 8013040:	702b      	strb	r3, [r5, #0]
 8013042:	2f00      	cmp	r7, #0
 8013044:	d04c      	beq.n	80130e0 <ucdr_deserialize_float+0xf0>
 8013046:	78b3      	ldrb	r3, [r6, #2]
 8013048:	706b      	strb	r3, [r5, #1]
 801304a:	2f01      	cmp	r7, #1
 801304c:	f105 0302 	add.w	r3, r5, #2
 8013050:	d04a      	beq.n	80130e8 <ucdr_deserialize_float+0xf8>
 8013052:	7873      	ldrb	r3, [r6, #1]
 8013054:	70ab      	strb	r3, [r5, #2]
 8013056:	2f02      	cmp	r7, #2
 8013058:	f105 0303 	add.w	r3, r5, #3
 801305c:	d048      	beq.n	80130f0 <ucdr_deserialize_float+0x100>
 801305e:	7833      	ldrb	r3, [r6, #0]
 8013060:	70eb      	strb	r3, [r5, #3]
 8013062:	6923      	ldr	r3, [r4, #16]
 8013064:	68a2      	ldr	r2, [r4, #8]
 8013066:	7da0      	ldrb	r0, [r4, #22]
 8013068:	2104      	movs	r1, #4
 801306a:	3304      	adds	r3, #4
 801306c:	444a      	add	r2, r9
 801306e:	1bdb      	subs	r3, r3, r7
 8013070:	7561      	strb	r1, [r4, #21]
 8013072:	60a2      	str	r2, [r4, #8]
 8013074:	6123      	str	r3, [r4, #16]
 8013076:	f080 0001 	eor.w	r0, r0, #1
 801307a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801307e:	2104      	movs	r1, #4
 8013080:	4620      	mov	r0, r4
 8013082:	f000 fc1d 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8013086:	b1b0      	cbz	r0, 80130b6 <ucdr_deserialize_float+0xc6>
 8013088:	7d23      	ldrb	r3, [r4, #20]
 801308a:	2b01      	cmp	r3, #1
 801308c:	68a3      	ldr	r3, [r4, #8]
 801308e:	d017      	beq.n	80130c0 <ucdr_deserialize_float+0xd0>
 8013090:	78db      	ldrb	r3, [r3, #3]
 8013092:	702b      	strb	r3, [r5, #0]
 8013094:	68a3      	ldr	r3, [r4, #8]
 8013096:	789b      	ldrb	r3, [r3, #2]
 8013098:	706b      	strb	r3, [r5, #1]
 801309a:	68a3      	ldr	r3, [r4, #8]
 801309c:	785b      	ldrb	r3, [r3, #1]
 801309e:	70ab      	strb	r3, [r5, #2]
 80130a0:	68a3      	ldr	r3, [r4, #8]
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	70eb      	strb	r3, [r5, #3]
 80130a6:	68a2      	ldr	r2, [r4, #8]
 80130a8:	6923      	ldr	r3, [r4, #16]
 80130aa:	3204      	adds	r2, #4
 80130ac:	3304      	adds	r3, #4
 80130ae:	2104      	movs	r1, #4
 80130b0:	60a2      	str	r2, [r4, #8]
 80130b2:	6123      	str	r3, [r4, #16]
 80130b4:	7561      	strb	r1, [r4, #21]
 80130b6:	7da0      	ldrb	r0, [r4, #22]
 80130b8:	f080 0001 	eor.w	r0, r0, #1
 80130bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	602b      	str	r3, [r5, #0]
 80130c4:	e7ef      	b.n	80130a6 <ucdr_deserialize_float+0xb6>
 80130c6:	68a2      	ldr	r2, [r4, #8]
 80130c8:	6923      	ldr	r3, [r4, #16]
 80130ca:	7da0      	ldrb	r0, [r4, #22]
 80130cc:	f884 8015 	strb.w	r8, [r4, #21]
 80130d0:	1bd2      	subs	r2, r2, r7
 80130d2:	1bdb      	subs	r3, r3, r7
 80130d4:	60a2      	str	r2, [r4, #8]
 80130d6:	6123      	str	r3, [r4, #16]
 80130d8:	f080 0001 	eor.w	r0, r0, #1
 80130dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130e0:	68a3      	ldr	r3, [r4, #8]
 80130e2:	789b      	ldrb	r3, [r3, #2]
 80130e4:	706b      	strb	r3, [r5, #1]
 80130e6:	1cab      	adds	r3, r5, #2
 80130e8:	68a2      	ldr	r2, [r4, #8]
 80130ea:	7852      	ldrb	r2, [r2, #1]
 80130ec:	f803 2b01 	strb.w	r2, [r3], #1
 80130f0:	68a2      	ldr	r2, [r4, #8]
 80130f2:	7812      	ldrb	r2, [r2, #0]
 80130f4:	701a      	strb	r2, [r3, #0]
 80130f6:	e7b4      	b.n	8013062 <ucdr_deserialize_float+0x72>
 80130f8:	4631      	mov	r1, r6
 80130fa:	463a      	mov	r2, r7
 80130fc:	4628      	mov	r0, r5
 80130fe:	f008 fa2b 	bl	801b558 <memcpy>
 8013102:	68a1      	ldr	r1, [r4, #8]
 8013104:	464a      	mov	r2, r9
 8013106:	19e8      	adds	r0, r5, r7
 8013108:	f008 fa26 	bl	801b558 <memcpy>
 801310c:	e7a9      	b.n	8013062 <ucdr_deserialize_float+0x72>
 801310e:	bf00      	nop

08013110 <ucdr_deserialize_endian_float>:
 8013110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013114:	460e      	mov	r6, r1
 8013116:	2104      	movs	r1, #4
 8013118:	4604      	mov	r4, r0
 801311a:	4615      	mov	r5, r2
 801311c:	f000 fc24 	bl	8013968 <ucdr_buffer_alignment>
 8013120:	4601      	mov	r1, r0
 8013122:	4620      	mov	r0, r4
 8013124:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013128:	f000 fc62 	bl	80139f0 <ucdr_advance_buffer>
 801312c:	2104      	movs	r1, #4
 801312e:	4620      	mov	r0, r4
 8013130:	f000 fbba 	bl	80138a8 <ucdr_check_buffer_available_for>
 8013134:	2800      	cmp	r0, #0
 8013136:	d13c      	bne.n	80131b2 <ucdr_deserialize_endian_float+0xa2>
 8013138:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801313c:	42bb      	cmp	r3, r7
 801313e:	d933      	bls.n	80131a8 <ucdr_deserialize_endian_float+0x98>
 8013140:	eba3 0807 	sub.w	r8, r3, r7
 8013144:	60a3      	str	r3, [r4, #8]
 8013146:	6923      	ldr	r3, [r4, #16]
 8013148:	f1c8 0a04 	rsb	sl, r8, #4
 801314c:	4443      	add	r3, r8
 801314e:	6123      	str	r3, [r4, #16]
 8013150:	4651      	mov	r1, sl
 8013152:	4620      	mov	r0, r4
 8013154:	f000 fbb4 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8013158:	2800      	cmp	r0, #0
 801315a:	d048      	beq.n	80131ee <ucdr_deserialize_endian_float+0xde>
 801315c:	2e01      	cmp	r6, #1
 801315e:	d061      	beq.n	8013224 <ucdr_deserialize_endian_float+0x114>
 8013160:	78fb      	ldrb	r3, [r7, #3]
 8013162:	702b      	strb	r3, [r5, #0]
 8013164:	f1b8 0f00 	cmp.w	r8, #0
 8013168:	d050      	beq.n	801320c <ucdr_deserialize_endian_float+0xfc>
 801316a:	78bb      	ldrb	r3, [r7, #2]
 801316c:	706b      	strb	r3, [r5, #1]
 801316e:	f1b8 0f01 	cmp.w	r8, #1
 8013172:	f105 0302 	add.w	r3, r5, #2
 8013176:	d04d      	beq.n	8013214 <ucdr_deserialize_endian_float+0x104>
 8013178:	787b      	ldrb	r3, [r7, #1]
 801317a:	70ab      	strb	r3, [r5, #2]
 801317c:	f1b8 0f02 	cmp.w	r8, #2
 8013180:	f105 0303 	add.w	r3, r5, #3
 8013184:	d04a      	beq.n	801321c <ucdr_deserialize_endian_float+0x10c>
 8013186:	783b      	ldrb	r3, [r7, #0]
 8013188:	70eb      	strb	r3, [r5, #3]
 801318a:	6923      	ldr	r3, [r4, #16]
 801318c:	68a2      	ldr	r2, [r4, #8]
 801318e:	7da0      	ldrb	r0, [r4, #22]
 8013190:	2104      	movs	r1, #4
 8013192:	3304      	adds	r3, #4
 8013194:	4452      	add	r2, sl
 8013196:	eba3 0308 	sub.w	r3, r3, r8
 801319a:	7561      	strb	r1, [r4, #21]
 801319c:	60a2      	str	r2, [r4, #8]
 801319e:	6123      	str	r3, [r4, #16]
 80131a0:	f080 0001 	eor.w	r0, r0, #1
 80131a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131a8:	2104      	movs	r1, #4
 80131aa:	4620      	mov	r0, r4
 80131ac:	f000 fb88 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 80131b0:	b1a8      	cbz	r0, 80131de <ucdr_deserialize_endian_float+0xce>
 80131b2:	2e01      	cmp	r6, #1
 80131b4:	68a3      	ldr	r3, [r4, #8]
 80131b6:	d017      	beq.n	80131e8 <ucdr_deserialize_endian_float+0xd8>
 80131b8:	78db      	ldrb	r3, [r3, #3]
 80131ba:	702b      	strb	r3, [r5, #0]
 80131bc:	68a3      	ldr	r3, [r4, #8]
 80131be:	789b      	ldrb	r3, [r3, #2]
 80131c0:	706b      	strb	r3, [r5, #1]
 80131c2:	68a3      	ldr	r3, [r4, #8]
 80131c4:	785b      	ldrb	r3, [r3, #1]
 80131c6:	70ab      	strb	r3, [r5, #2]
 80131c8:	68a3      	ldr	r3, [r4, #8]
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	70eb      	strb	r3, [r5, #3]
 80131ce:	68a2      	ldr	r2, [r4, #8]
 80131d0:	6923      	ldr	r3, [r4, #16]
 80131d2:	3204      	adds	r2, #4
 80131d4:	3304      	adds	r3, #4
 80131d6:	2104      	movs	r1, #4
 80131d8:	60a2      	str	r2, [r4, #8]
 80131da:	6123      	str	r3, [r4, #16]
 80131dc:	7561      	strb	r1, [r4, #21]
 80131de:	7da0      	ldrb	r0, [r4, #22]
 80131e0:	f080 0001 	eor.w	r0, r0, #1
 80131e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	602b      	str	r3, [r5, #0]
 80131ec:	e7ef      	b.n	80131ce <ucdr_deserialize_endian_float+0xbe>
 80131ee:	68a2      	ldr	r2, [r4, #8]
 80131f0:	6923      	ldr	r3, [r4, #16]
 80131f2:	7da0      	ldrb	r0, [r4, #22]
 80131f4:	f884 9015 	strb.w	r9, [r4, #21]
 80131f8:	eba2 0208 	sub.w	r2, r2, r8
 80131fc:	eba3 0308 	sub.w	r3, r3, r8
 8013200:	60a2      	str	r2, [r4, #8]
 8013202:	6123      	str	r3, [r4, #16]
 8013204:	f080 0001 	eor.w	r0, r0, #1
 8013208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801320c:	68a3      	ldr	r3, [r4, #8]
 801320e:	789b      	ldrb	r3, [r3, #2]
 8013210:	706b      	strb	r3, [r5, #1]
 8013212:	1cab      	adds	r3, r5, #2
 8013214:	68a2      	ldr	r2, [r4, #8]
 8013216:	7852      	ldrb	r2, [r2, #1]
 8013218:	f803 2b01 	strb.w	r2, [r3], #1
 801321c:	68a2      	ldr	r2, [r4, #8]
 801321e:	7812      	ldrb	r2, [r2, #0]
 8013220:	701a      	strb	r2, [r3, #0]
 8013222:	e7b2      	b.n	801318a <ucdr_deserialize_endian_float+0x7a>
 8013224:	4639      	mov	r1, r7
 8013226:	4642      	mov	r2, r8
 8013228:	4628      	mov	r0, r5
 801322a:	f008 f995 	bl	801b558 <memcpy>
 801322e:	68a1      	ldr	r1, [r4, #8]
 8013230:	4652      	mov	r2, sl
 8013232:	eb05 0008 	add.w	r0, r5, r8
 8013236:	f008 f98f 	bl	801b558 <memcpy>
 801323a:	e7a6      	b.n	801318a <ucdr_deserialize_endian_float+0x7a>

0801323c <ucdr_serialize_double>:
 801323c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013240:	2108      	movs	r1, #8
 8013242:	b082      	sub	sp, #8
 8013244:	4604      	mov	r4, r0
 8013246:	ed8d 0b00 	vstr	d0, [sp]
 801324a:	f000 fb8d 	bl	8013968 <ucdr_buffer_alignment>
 801324e:	4601      	mov	r1, r0
 8013250:	4620      	mov	r0, r4
 8013252:	7d67      	ldrb	r7, [r4, #21]
 8013254:	f000 fbcc 	bl	80139f0 <ucdr_advance_buffer>
 8013258:	2108      	movs	r1, #8
 801325a:	4620      	mov	r0, r4
 801325c:	f000 fb24 	bl	80138a8 <ucdr_check_buffer_available_for>
 8013260:	2800      	cmp	r0, #0
 8013262:	d14e      	bne.n	8013302 <ucdr_serialize_double+0xc6>
 8013264:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013268:	42ab      	cmp	r3, r5
 801326a:	d945      	bls.n	80132f8 <ucdr_serialize_double+0xbc>
 801326c:	1b5e      	subs	r6, r3, r5
 801326e:	60a3      	str	r3, [r4, #8]
 8013270:	6923      	ldr	r3, [r4, #16]
 8013272:	f1c6 0808 	rsb	r8, r6, #8
 8013276:	4433      	add	r3, r6
 8013278:	6123      	str	r3, [r4, #16]
 801327a:	4641      	mov	r1, r8
 801327c:	4620      	mov	r0, r4
 801327e:	f000 fb1f 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8013282:	2800      	cmp	r0, #0
 8013284:	d074      	beq.n	8013370 <ucdr_serialize_double+0x134>
 8013286:	7d23      	ldrb	r3, [r4, #20]
 8013288:	2b01      	cmp	r3, #1
 801328a:	f000 809b 	beq.w	80133c4 <ucdr_serialize_double+0x188>
 801328e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013292:	702b      	strb	r3, [r5, #0]
 8013294:	2e00      	cmp	r6, #0
 8013296:	d078      	beq.n	801338a <ucdr_serialize_double+0x14e>
 8013298:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801329c:	706b      	strb	r3, [r5, #1]
 801329e:	2e01      	cmp	r6, #1
 80132a0:	d077      	beq.n	8013392 <ucdr_serialize_double+0x156>
 80132a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80132a6:	70ab      	strb	r3, [r5, #2]
 80132a8:	2e02      	cmp	r6, #2
 80132aa:	d076      	beq.n	801339a <ucdr_serialize_double+0x15e>
 80132ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80132b0:	70eb      	strb	r3, [r5, #3]
 80132b2:	2e03      	cmp	r6, #3
 80132b4:	d075      	beq.n	80133a2 <ucdr_serialize_double+0x166>
 80132b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80132ba:	712b      	strb	r3, [r5, #4]
 80132bc:	2e04      	cmp	r6, #4
 80132be:	d074      	beq.n	80133aa <ucdr_serialize_double+0x16e>
 80132c0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80132c4:	716b      	strb	r3, [r5, #5]
 80132c6:	2e05      	cmp	r6, #5
 80132c8:	d073      	beq.n	80133b2 <ucdr_serialize_double+0x176>
 80132ca:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80132ce:	71ab      	strb	r3, [r5, #6]
 80132d0:	2e06      	cmp	r6, #6
 80132d2:	d072      	beq.n	80133ba <ucdr_serialize_double+0x17e>
 80132d4:	f89d 3000 	ldrb.w	r3, [sp]
 80132d8:	71eb      	strb	r3, [r5, #7]
 80132da:	6923      	ldr	r3, [r4, #16]
 80132dc:	68a2      	ldr	r2, [r4, #8]
 80132de:	7da0      	ldrb	r0, [r4, #22]
 80132e0:	3308      	adds	r3, #8
 80132e2:	1b9e      	subs	r6, r3, r6
 80132e4:	4442      	add	r2, r8
 80132e6:	2308      	movs	r3, #8
 80132e8:	f080 0001 	eor.w	r0, r0, #1
 80132ec:	60a2      	str	r2, [r4, #8]
 80132ee:	6126      	str	r6, [r4, #16]
 80132f0:	7563      	strb	r3, [r4, #21]
 80132f2:	b002      	add	sp, #8
 80132f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132f8:	2108      	movs	r1, #8
 80132fa:	4620      	mov	r0, r4
 80132fc:	f000 fae0 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8013300:	b350      	cbz	r0, 8013358 <ucdr_serialize_double+0x11c>
 8013302:	7d23      	ldrb	r3, [r4, #20]
 8013304:	2b01      	cmp	r3, #1
 8013306:	d02d      	beq.n	8013364 <ucdr_serialize_double+0x128>
 8013308:	68a3      	ldr	r3, [r4, #8]
 801330a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801330e:	701a      	strb	r2, [r3, #0]
 8013310:	68a3      	ldr	r3, [r4, #8]
 8013312:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013316:	705a      	strb	r2, [r3, #1]
 8013318:	68a3      	ldr	r3, [r4, #8]
 801331a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801331e:	709a      	strb	r2, [r3, #2]
 8013320:	68a3      	ldr	r3, [r4, #8]
 8013322:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013326:	70da      	strb	r2, [r3, #3]
 8013328:	68a3      	ldr	r3, [r4, #8]
 801332a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801332e:	711a      	strb	r2, [r3, #4]
 8013330:	68a3      	ldr	r3, [r4, #8]
 8013332:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013336:	715a      	strb	r2, [r3, #5]
 8013338:	68a3      	ldr	r3, [r4, #8]
 801333a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801333e:	719a      	strb	r2, [r3, #6]
 8013340:	68a3      	ldr	r3, [r4, #8]
 8013342:	f89d 2000 	ldrb.w	r2, [sp]
 8013346:	71da      	strb	r2, [r3, #7]
 8013348:	68a2      	ldr	r2, [r4, #8]
 801334a:	6923      	ldr	r3, [r4, #16]
 801334c:	3208      	adds	r2, #8
 801334e:	3308      	adds	r3, #8
 8013350:	2108      	movs	r1, #8
 8013352:	60a2      	str	r2, [r4, #8]
 8013354:	6123      	str	r3, [r4, #16]
 8013356:	7561      	strb	r1, [r4, #21]
 8013358:	7da0      	ldrb	r0, [r4, #22]
 801335a:	f080 0001 	eor.w	r0, r0, #1
 801335e:	b002      	add	sp, #8
 8013360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013364:	466b      	mov	r3, sp
 8013366:	cb03      	ldmia	r3!, {r0, r1}
 8013368:	68a3      	ldr	r3, [r4, #8]
 801336a:	6018      	str	r0, [r3, #0]
 801336c:	6059      	str	r1, [r3, #4]
 801336e:	e7eb      	b.n	8013348 <ucdr_serialize_double+0x10c>
 8013370:	68a2      	ldr	r2, [r4, #8]
 8013372:	6923      	ldr	r3, [r4, #16]
 8013374:	7da0      	ldrb	r0, [r4, #22]
 8013376:	7567      	strb	r7, [r4, #21]
 8013378:	1b92      	subs	r2, r2, r6
 801337a:	1b9b      	subs	r3, r3, r6
 801337c:	f080 0001 	eor.w	r0, r0, #1
 8013380:	60a2      	str	r2, [r4, #8]
 8013382:	6123      	str	r3, [r4, #16]
 8013384:	b002      	add	sp, #8
 8013386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801338a:	68a3      	ldr	r3, [r4, #8]
 801338c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013390:	701a      	strb	r2, [r3, #0]
 8013392:	68a3      	ldr	r3, [r4, #8]
 8013394:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013398:	701a      	strb	r2, [r3, #0]
 801339a:	68a3      	ldr	r3, [r4, #8]
 801339c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80133a0:	701a      	strb	r2, [r3, #0]
 80133a2:	68a3      	ldr	r3, [r4, #8]
 80133a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80133a8:	701a      	strb	r2, [r3, #0]
 80133aa:	68a3      	ldr	r3, [r4, #8]
 80133ac:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80133b0:	701a      	strb	r2, [r3, #0]
 80133b2:	68a3      	ldr	r3, [r4, #8]
 80133b4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80133b8:	701a      	strb	r2, [r3, #0]
 80133ba:	68a3      	ldr	r3, [r4, #8]
 80133bc:	f89d 2000 	ldrb.w	r2, [sp]
 80133c0:	701a      	strb	r2, [r3, #0]
 80133c2:	e78a      	b.n	80132da <ucdr_serialize_double+0x9e>
 80133c4:	4628      	mov	r0, r5
 80133c6:	466d      	mov	r5, sp
 80133c8:	4629      	mov	r1, r5
 80133ca:	4632      	mov	r2, r6
 80133cc:	f008 f8c4 	bl	801b558 <memcpy>
 80133d0:	68a0      	ldr	r0, [r4, #8]
 80133d2:	4642      	mov	r2, r8
 80133d4:	19a9      	adds	r1, r5, r6
 80133d6:	f008 f8bf 	bl	801b558 <memcpy>
 80133da:	e77e      	b.n	80132da <ucdr_serialize_double+0x9e>

080133dc <ucdr_serialize_endian_double>:
 80133dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133e0:	460e      	mov	r6, r1
 80133e2:	b083      	sub	sp, #12
 80133e4:	2108      	movs	r1, #8
 80133e6:	4604      	mov	r4, r0
 80133e8:	ed8d 0b00 	vstr	d0, [sp]
 80133ec:	f000 fabc 	bl	8013968 <ucdr_buffer_alignment>
 80133f0:	4601      	mov	r1, r0
 80133f2:	4620      	mov	r0, r4
 80133f4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80133f8:	f000 fafa 	bl	80139f0 <ucdr_advance_buffer>
 80133fc:	2108      	movs	r1, #8
 80133fe:	4620      	mov	r0, r4
 8013400:	f000 fa52 	bl	80138a8 <ucdr_check_buffer_available_for>
 8013404:	2800      	cmp	r0, #0
 8013406:	d14d      	bne.n	80134a4 <ucdr_serialize_endian_double+0xc8>
 8013408:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 801340c:	42bd      	cmp	r5, r7
 801340e:	d944      	bls.n	801349a <ucdr_serialize_endian_double+0xbe>
 8013410:	6923      	ldr	r3, [r4, #16]
 8013412:	60a5      	str	r5, [r4, #8]
 8013414:	1bed      	subs	r5, r5, r7
 8013416:	442b      	add	r3, r5
 8013418:	f1c5 0908 	rsb	r9, r5, #8
 801341c:	6123      	str	r3, [r4, #16]
 801341e:	4649      	mov	r1, r9
 8013420:	4620      	mov	r0, r4
 8013422:	f000 fa4d 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8013426:	2800      	cmp	r0, #0
 8013428:	d072      	beq.n	8013510 <ucdr_serialize_endian_double+0x134>
 801342a:	2e01      	cmp	r6, #1
 801342c:	f000 809b 	beq.w	8013566 <ucdr_serialize_endian_double+0x18a>
 8013430:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013434:	703b      	strb	r3, [r7, #0]
 8013436:	2d00      	cmp	r5, #0
 8013438:	d078      	beq.n	801352c <ucdr_serialize_endian_double+0x150>
 801343a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801343e:	707b      	strb	r3, [r7, #1]
 8013440:	2d01      	cmp	r5, #1
 8013442:	d077      	beq.n	8013534 <ucdr_serialize_endian_double+0x158>
 8013444:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013448:	70bb      	strb	r3, [r7, #2]
 801344a:	2d02      	cmp	r5, #2
 801344c:	d076      	beq.n	801353c <ucdr_serialize_endian_double+0x160>
 801344e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013452:	70fb      	strb	r3, [r7, #3]
 8013454:	2d03      	cmp	r5, #3
 8013456:	d075      	beq.n	8013544 <ucdr_serialize_endian_double+0x168>
 8013458:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801345c:	713b      	strb	r3, [r7, #4]
 801345e:	2d04      	cmp	r5, #4
 8013460:	d074      	beq.n	801354c <ucdr_serialize_endian_double+0x170>
 8013462:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013466:	717b      	strb	r3, [r7, #5]
 8013468:	2d05      	cmp	r5, #5
 801346a:	d073      	beq.n	8013554 <ucdr_serialize_endian_double+0x178>
 801346c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013470:	71bb      	strb	r3, [r7, #6]
 8013472:	2d06      	cmp	r5, #6
 8013474:	d072      	beq.n	801355c <ucdr_serialize_endian_double+0x180>
 8013476:	f89d 3000 	ldrb.w	r3, [sp]
 801347a:	71fb      	strb	r3, [r7, #7]
 801347c:	6923      	ldr	r3, [r4, #16]
 801347e:	68a2      	ldr	r2, [r4, #8]
 8013480:	7da0      	ldrb	r0, [r4, #22]
 8013482:	3308      	adds	r3, #8
 8013484:	1b5d      	subs	r5, r3, r5
 8013486:	444a      	add	r2, r9
 8013488:	2308      	movs	r3, #8
 801348a:	f080 0001 	eor.w	r0, r0, #1
 801348e:	60a2      	str	r2, [r4, #8]
 8013490:	6125      	str	r5, [r4, #16]
 8013492:	7563      	strb	r3, [r4, #21]
 8013494:	b003      	add	sp, #12
 8013496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801349a:	2108      	movs	r1, #8
 801349c:	4620      	mov	r0, r4
 801349e:	f000 fa0f 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 80134a2:	b348      	cbz	r0, 80134f8 <ucdr_serialize_endian_double+0x11c>
 80134a4:	2e01      	cmp	r6, #1
 80134a6:	d02d      	beq.n	8013504 <ucdr_serialize_endian_double+0x128>
 80134a8:	68a3      	ldr	r3, [r4, #8]
 80134aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80134ae:	701a      	strb	r2, [r3, #0]
 80134b0:	68a3      	ldr	r3, [r4, #8]
 80134b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80134b6:	705a      	strb	r2, [r3, #1]
 80134b8:	68a3      	ldr	r3, [r4, #8]
 80134ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80134be:	709a      	strb	r2, [r3, #2]
 80134c0:	68a3      	ldr	r3, [r4, #8]
 80134c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80134c6:	70da      	strb	r2, [r3, #3]
 80134c8:	68a3      	ldr	r3, [r4, #8]
 80134ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80134ce:	711a      	strb	r2, [r3, #4]
 80134d0:	68a3      	ldr	r3, [r4, #8]
 80134d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80134d6:	715a      	strb	r2, [r3, #5]
 80134d8:	68a3      	ldr	r3, [r4, #8]
 80134da:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80134de:	719a      	strb	r2, [r3, #6]
 80134e0:	68a3      	ldr	r3, [r4, #8]
 80134e2:	f89d 2000 	ldrb.w	r2, [sp]
 80134e6:	71da      	strb	r2, [r3, #7]
 80134e8:	68a2      	ldr	r2, [r4, #8]
 80134ea:	6923      	ldr	r3, [r4, #16]
 80134ec:	3208      	adds	r2, #8
 80134ee:	3308      	adds	r3, #8
 80134f0:	2108      	movs	r1, #8
 80134f2:	60a2      	str	r2, [r4, #8]
 80134f4:	6123      	str	r3, [r4, #16]
 80134f6:	7561      	strb	r1, [r4, #21]
 80134f8:	7da0      	ldrb	r0, [r4, #22]
 80134fa:	f080 0001 	eor.w	r0, r0, #1
 80134fe:	b003      	add	sp, #12
 8013500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013504:	466b      	mov	r3, sp
 8013506:	cb03      	ldmia	r3!, {r0, r1}
 8013508:	68a3      	ldr	r3, [r4, #8]
 801350a:	6018      	str	r0, [r3, #0]
 801350c:	6059      	str	r1, [r3, #4]
 801350e:	e7eb      	b.n	80134e8 <ucdr_serialize_endian_double+0x10c>
 8013510:	68a2      	ldr	r2, [r4, #8]
 8013512:	6923      	ldr	r3, [r4, #16]
 8013514:	7da0      	ldrb	r0, [r4, #22]
 8013516:	f884 8015 	strb.w	r8, [r4, #21]
 801351a:	1b52      	subs	r2, r2, r5
 801351c:	1b5b      	subs	r3, r3, r5
 801351e:	f080 0001 	eor.w	r0, r0, #1
 8013522:	60a2      	str	r2, [r4, #8]
 8013524:	6123      	str	r3, [r4, #16]
 8013526:	b003      	add	sp, #12
 8013528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801352c:	68a3      	ldr	r3, [r4, #8]
 801352e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013532:	701a      	strb	r2, [r3, #0]
 8013534:	68a3      	ldr	r3, [r4, #8]
 8013536:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801353a:	701a      	strb	r2, [r3, #0]
 801353c:	68a3      	ldr	r3, [r4, #8]
 801353e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013542:	701a      	strb	r2, [r3, #0]
 8013544:	68a3      	ldr	r3, [r4, #8]
 8013546:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801354a:	701a      	strb	r2, [r3, #0]
 801354c:	68a3      	ldr	r3, [r4, #8]
 801354e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013552:	701a      	strb	r2, [r3, #0]
 8013554:	68a3      	ldr	r3, [r4, #8]
 8013556:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801355a:	701a      	strb	r2, [r3, #0]
 801355c:	68a3      	ldr	r3, [r4, #8]
 801355e:	f89d 2000 	ldrb.w	r2, [sp]
 8013562:	701a      	strb	r2, [r3, #0]
 8013564:	e78a      	b.n	801347c <ucdr_serialize_endian_double+0xa0>
 8013566:	466e      	mov	r6, sp
 8013568:	4631      	mov	r1, r6
 801356a:	462a      	mov	r2, r5
 801356c:	4638      	mov	r0, r7
 801356e:	f007 fff3 	bl	801b558 <memcpy>
 8013572:	68a0      	ldr	r0, [r4, #8]
 8013574:	464a      	mov	r2, r9
 8013576:	1971      	adds	r1, r6, r5
 8013578:	f007 ffee 	bl	801b558 <memcpy>
 801357c:	e77e      	b.n	801347c <ucdr_serialize_endian_double+0xa0>
 801357e:	bf00      	nop

08013580 <ucdr_deserialize_double>:
 8013580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013584:	460d      	mov	r5, r1
 8013586:	2108      	movs	r1, #8
 8013588:	4604      	mov	r4, r0
 801358a:	f000 f9ed 	bl	8013968 <ucdr_buffer_alignment>
 801358e:	4601      	mov	r1, r0
 8013590:	4620      	mov	r0, r4
 8013592:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013596:	f000 fa2b 	bl	80139f0 <ucdr_advance_buffer>
 801359a:	2108      	movs	r1, #8
 801359c:	4620      	mov	r0, r4
 801359e:	f000 f983 	bl	80138a8 <ucdr_check_buffer_available_for>
 80135a2:	2800      	cmp	r0, #0
 80135a4:	d151      	bne.n	801364a <ucdr_deserialize_double+0xca>
 80135a6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80135aa:	42be      	cmp	r6, r7
 80135ac:	d948      	bls.n	8013640 <ucdr_deserialize_double+0xc0>
 80135ae:	6923      	ldr	r3, [r4, #16]
 80135b0:	60a6      	str	r6, [r4, #8]
 80135b2:	1bf6      	subs	r6, r6, r7
 80135b4:	4433      	add	r3, r6
 80135b6:	f1c6 0808 	rsb	r8, r6, #8
 80135ba:	6123      	str	r3, [r4, #16]
 80135bc:	4641      	mov	r1, r8
 80135be:	4620      	mov	r0, r4
 80135c0:	f000 f97e 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 80135c4:	2800      	cmp	r0, #0
 80135c6:	d06d      	beq.n	80136a4 <ucdr_deserialize_double+0x124>
 80135c8:	7d23      	ldrb	r3, [r4, #20]
 80135ca:	2b01      	cmp	r3, #1
 80135cc:	f000 8093 	beq.w	80136f6 <ucdr_deserialize_double+0x176>
 80135d0:	79fb      	ldrb	r3, [r7, #7]
 80135d2:	702b      	strb	r3, [r5, #0]
 80135d4:	2e00      	cmp	r6, #0
 80135d6:	d072      	beq.n	80136be <ucdr_deserialize_double+0x13e>
 80135d8:	79bb      	ldrb	r3, [r7, #6]
 80135da:	706b      	strb	r3, [r5, #1]
 80135dc:	2e01      	cmp	r6, #1
 80135de:	f105 0302 	add.w	r3, r5, #2
 80135e2:	d070      	beq.n	80136c6 <ucdr_deserialize_double+0x146>
 80135e4:	797b      	ldrb	r3, [r7, #5]
 80135e6:	70ab      	strb	r3, [r5, #2]
 80135e8:	2e02      	cmp	r6, #2
 80135ea:	f105 0303 	add.w	r3, r5, #3
 80135ee:	d06e      	beq.n	80136ce <ucdr_deserialize_double+0x14e>
 80135f0:	793b      	ldrb	r3, [r7, #4]
 80135f2:	70eb      	strb	r3, [r5, #3]
 80135f4:	2e03      	cmp	r6, #3
 80135f6:	f105 0304 	add.w	r3, r5, #4
 80135fa:	d06c      	beq.n	80136d6 <ucdr_deserialize_double+0x156>
 80135fc:	78fb      	ldrb	r3, [r7, #3]
 80135fe:	712b      	strb	r3, [r5, #4]
 8013600:	2e04      	cmp	r6, #4
 8013602:	f105 0305 	add.w	r3, r5, #5
 8013606:	d06a      	beq.n	80136de <ucdr_deserialize_double+0x15e>
 8013608:	78bb      	ldrb	r3, [r7, #2]
 801360a:	716b      	strb	r3, [r5, #5]
 801360c:	2e05      	cmp	r6, #5
 801360e:	f105 0306 	add.w	r3, r5, #6
 8013612:	d068      	beq.n	80136e6 <ucdr_deserialize_double+0x166>
 8013614:	787b      	ldrb	r3, [r7, #1]
 8013616:	71ab      	strb	r3, [r5, #6]
 8013618:	2e06      	cmp	r6, #6
 801361a:	f105 0307 	add.w	r3, r5, #7
 801361e:	d066      	beq.n	80136ee <ucdr_deserialize_double+0x16e>
 8013620:	783b      	ldrb	r3, [r7, #0]
 8013622:	71eb      	strb	r3, [r5, #7]
 8013624:	6923      	ldr	r3, [r4, #16]
 8013626:	68a2      	ldr	r2, [r4, #8]
 8013628:	7da0      	ldrb	r0, [r4, #22]
 801362a:	3308      	adds	r3, #8
 801362c:	1b9e      	subs	r6, r3, r6
 801362e:	2308      	movs	r3, #8
 8013630:	4442      	add	r2, r8
 8013632:	7563      	strb	r3, [r4, #21]
 8013634:	60a2      	str	r2, [r4, #8]
 8013636:	6126      	str	r6, [r4, #16]
 8013638:	f080 0001 	eor.w	r0, r0, #1
 801363c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013640:	2108      	movs	r1, #8
 8013642:	4620      	mov	r0, r4
 8013644:	f000 f93c 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8013648:	b310      	cbz	r0, 8013690 <ucdr_deserialize_double+0x110>
 801364a:	7d23      	ldrb	r3, [r4, #20]
 801364c:	2b01      	cmp	r3, #1
 801364e:	68a3      	ldr	r3, [r4, #8]
 8013650:	d023      	beq.n	801369a <ucdr_deserialize_double+0x11a>
 8013652:	79db      	ldrb	r3, [r3, #7]
 8013654:	702b      	strb	r3, [r5, #0]
 8013656:	68a3      	ldr	r3, [r4, #8]
 8013658:	799b      	ldrb	r3, [r3, #6]
 801365a:	706b      	strb	r3, [r5, #1]
 801365c:	68a3      	ldr	r3, [r4, #8]
 801365e:	795b      	ldrb	r3, [r3, #5]
 8013660:	70ab      	strb	r3, [r5, #2]
 8013662:	68a3      	ldr	r3, [r4, #8]
 8013664:	791b      	ldrb	r3, [r3, #4]
 8013666:	70eb      	strb	r3, [r5, #3]
 8013668:	68a3      	ldr	r3, [r4, #8]
 801366a:	78db      	ldrb	r3, [r3, #3]
 801366c:	712b      	strb	r3, [r5, #4]
 801366e:	68a3      	ldr	r3, [r4, #8]
 8013670:	789b      	ldrb	r3, [r3, #2]
 8013672:	716b      	strb	r3, [r5, #5]
 8013674:	68a3      	ldr	r3, [r4, #8]
 8013676:	785b      	ldrb	r3, [r3, #1]
 8013678:	71ab      	strb	r3, [r5, #6]
 801367a:	68a3      	ldr	r3, [r4, #8]
 801367c:	781b      	ldrb	r3, [r3, #0]
 801367e:	71eb      	strb	r3, [r5, #7]
 8013680:	68a2      	ldr	r2, [r4, #8]
 8013682:	6923      	ldr	r3, [r4, #16]
 8013684:	3208      	adds	r2, #8
 8013686:	3308      	adds	r3, #8
 8013688:	2108      	movs	r1, #8
 801368a:	60a2      	str	r2, [r4, #8]
 801368c:	6123      	str	r3, [r4, #16]
 801368e:	7561      	strb	r1, [r4, #21]
 8013690:	7da0      	ldrb	r0, [r4, #22]
 8013692:	f080 0001 	eor.w	r0, r0, #1
 8013696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801369a:	681a      	ldr	r2, [r3, #0]
 801369c:	685b      	ldr	r3, [r3, #4]
 801369e:	606b      	str	r3, [r5, #4]
 80136a0:	602a      	str	r2, [r5, #0]
 80136a2:	e7ed      	b.n	8013680 <ucdr_deserialize_double+0x100>
 80136a4:	68a2      	ldr	r2, [r4, #8]
 80136a6:	6923      	ldr	r3, [r4, #16]
 80136a8:	7da0      	ldrb	r0, [r4, #22]
 80136aa:	f884 9015 	strb.w	r9, [r4, #21]
 80136ae:	1b92      	subs	r2, r2, r6
 80136b0:	1b9b      	subs	r3, r3, r6
 80136b2:	60a2      	str	r2, [r4, #8]
 80136b4:	6123      	str	r3, [r4, #16]
 80136b6:	f080 0001 	eor.w	r0, r0, #1
 80136ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136be:	68a3      	ldr	r3, [r4, #8]
 80136c0:	799b      	ldrb	r3, [r3, #6]
 80136c2:	706b      	strb	r3, [r5, #1]
 80136c4:	1cab      	adds	r3, r5, #2
 80136c6:	68a2      	ldr	r2, [r4, #8]
 80136c8:	7952      	ldrb	r2, [r2, #5]
 80136ca:	f803 2b01 	strb.w	r2, [r3], #1
 80136ce:	68a2      	ldr	r2, [r4, #8]
 80136d0:	7912      	ldrb	r2, [r2, #4]
 80136d2:	f803 2b01 	strb.w	r2, [r3], #1
 80136d6:	68a2      	ldr	r2, [r4, #8]
 80136d8:	78d2      	ldrb	r2, [r2, #3]
 80136da:	f803 2b01 	strb.w	r2, [r3], #1
 80136de:	68a2      	ldr	r2, [r4, #8]
 80136e0:	7892      	ldrb	r2, [r2, #2]
 80136e2:	f803 2b01 	strb.w	r2, [r3], #1
 80136e6:	68a2      	ldr	r2, [r4, #8]
 80136e8:	7852      	ldrb	r2, [r2, #1]
 80136ea:	f803 2b01 	strb.w	r2, [r3], #1
 80136ee:	68a2      	ldr	r2, [r4, #8]
 80136f0:	7812      	ldrb	r2, [r2, #0]
 80136f2:	701a      	strb	r2, [r3, #0]
 80136f4:	e796      	b.n	8013624 <ucdr_deserialize_double+0xa4>
 80136f6:	4639      	mov	r1, r7
 80136f8:	4632      	mov	r2, r6
 80136fa:	4628      	mov	r0, r5
 80136fc:	f007 ff2c 	bl	801b558 <memcpy>
 8013700:	68a1      	ldr	r1, [r4, #8]
 8013702:	4642      	mov	r2, r8
 8013704:	19a8      	adds	r0, r5, r6
 8013706:	f007 ff27 	bl	801b558 <memcpy>
 801370a:	e78b      	b.n	8013624 <ucdr_deserialize_double+0xa4>

0801370c <ucdr_deserialize_endian_double>:
 801370c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013710:	460f      	mov	r7, r1
 8013712:	2108      	movs	r1, #8
 8013714:	4604      	mov	r4, r0
 8013716:	4615      	mov	r5, r2
 8013718:	f000 f926 	bl	8013968 <ucdr_buffer_alignment>
 801371c:	4601      	mov	r1, r0
 801371e:	4620      	mov	r0, r4
 8013720:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013724:	f000 f964 	bl	80139f0 <ucdr_advance_buffer>
 8013728:	2108      	movs	r1, #8
 801372a:	4620      	mov	r0, r4
 801372c:	f000 f8bc 	bl	80138a8 <ucdr_check_buffer_available_for>
 8013730:	2800      	cmp	r0, #0
 8013732:	d159      	bne.n	80137e8 <ucdr_deserialize_endian_double+0xdc>
 8013734:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 8013738:	4546      	cmp	r6, r8
 801373a:	d950      	bls.n	80137de <ucdr_deserialize_endian_double+0xd2>
 801373c:	6923      	ldr	r3, [r4, #16]
 801373e:	60a6      	str	r6, [r4, #8]
 8013740:	eba6 0608 	sub.w	r6, r6, r8
 8013744:	4433      	add	r3, r6
 8013746:	f1c6 0a08 	rsb	sl, r6, #8
 801374a:	6123      	str	r3, [r4, #16]
 801374c:	4651      	mov	r1, sl
 801374e:	4620      	mov	r0, r4
 8013750:	f000 f8b6 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 8013754:	2800      	cmp	r0, #0
 8013756:	d073      	beq.n	8013840 <ucdr_deserialize_endian_double+0x134>
 8013758:	2f01      	cmp	r7, #1
 801375a:	f000 809a 	beq.w	8013892 <ucdr_deserialize_endian_double+0x186>
 801375e:	f898 3007 	ldrb.w	r3, [r8, #7]
 8013762:	702b      	strb	r3, [r5, #0]
 8013764:	2e00      	cmp	r6, #0
 8013766:	d078      	beq.n	801385a <ucdr_deserialize_endian_double+0x14e>
 8013768:	f898 3006 	ldrb.w	r3, [r8, #6]
 801376c:	706b      	strb	r3, [r5, #1]
 801376e:	2e01      	cmp	r6, #1
 8013770:	f105 0302 	add.w	r3, r5, #2
 8013774:	d075      	beq.n	8013862 <ucdr_deserialize_endian_double+0x156>
 8013776:	f898 3005 	ldrb.w	r3, [r8, #5]
 801377a:	70ab      	strb	r3, [r5, #2]
 801377c:	2e02      	cmp	r6, #2
 801377e:	f105 0303 	add.w	r3, r5, #3
 8013782:	d072      	beq.n	801386a <ucdr_deserialize_endian_double+0x15e>
 8013784:	f898 3004 	ldrb.w	r3, [r8, #4]
 8013788:	70eb      	strb	r3, [r5, #3]
 801378a:	2e03      	cmp	r6, #3
 801378c:	f105 0304 	add.w	r3, r5, #4
 8013790:	d06f      	beq.n	8013872 <ucdr_deserialize_endian_double+0x166>
 8013792:	f898 3003 	ldrb.w	r3, [r8, #3]
 8013796:	712b      	strb	r3, [r5, #4]
 8013798:	2e04      	cmp	r6, #4
 801379a:	f105 0305 	add.w	r3, r5, #5
 801379e:	d06c      	beq.n	801387a <ucdr_deserialize_endian_double+0x16e>
 80137a0:	f898 3002 	ldrb.w	r3, [r8, #2]
 80137a4:	716b      	strb	r3, [r5, #5]
 80137a6:	2e05      	cmp	r6, #5
 80137a8:	f105 0306 	add.w	r3, r5, #6
 80137ac:	d069      	beq.n	8013882 <ucdr_deserialize_endian_double+0x176>
 80137ae:	f898 3001 	ldrb.w	r3, [r8, #1]
 80137b2:	71ab      	strb	r3, [r5, #6]
 80137b4:	2e06      	cmp	r6, #6
 80137b6:	f105 0307 	add.w	r3, r5, #7
 80137ba:	d066      	beq.n	801388a <ucdr_deserialize_endian_double+0x17e>
 80137bc:	f898 3000 	ldrb.w	r3, [r8]
 80137c0:	71eb      	strb	r3, [r5, #7]
 80137c2:	6923      	ldr	r3, [r4, #16]
 80137c4:	68a2      	ldr	r2, [r4, #8]
 80137c6:	7da0      	ldrb	r0, [r4, #22]
 80137c8:	3308      	adds	r3, #8
 80137ca:	1b9e      	subs	r6, r3, r6
 80137cc:	2308      	movs	r3, #8
 80137ce:	4452      	add	r2, sl
 80137d0:	7563      	strb	r3, [r4, #21]
 80137d2:	60a2      	str	r2, [r4, #8]
 80137d4:	6126      	str	r6, [r4, #16]
 80137d6:	f080 0001 	eor.w	r0, r0, #1
 80137da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137de:	2108      	movs	r1, #8
 80137e0:	4620      	mov	r0, r4
 80137e2:	f000 f86d 	bl	80138c0 <ucdr_check_final_buffer_behavior>
 80137e6:	b308      	cbz	r0, 801382c <ucdr_deserialize_endian_double+0x120>
 80137e8:	2f01      	cmp	r7, #1
 80137ea:	68a3      	ldr	r3, [r4, #8]
 80137ec:	d023      	beq.n	8013836 <ucdr_deserialize_endian_double+0x12a>
 80137ee:	79db      	ldrb	r3, [r3, #7]
 80137f0:	702b      	strb	r3, [r5, #0]
 80137f2:	68a3      	ldr	r3, [r4, #8]
 80137f4:	799b      	ldrb	r3, [r3, #6]
 80137f6:	706b      	strb	r3, [r5, #1]
 80137f8:	68a3      	ldr	r3, [r4, #8]
 80137fa:	795b      	ldrb	r3, [r3, #5]
 80137fc:	70ab      	strb	r3, [r5, #2]
 80137fe:	68a3      	ldr	r3, [r4, #8]
 8013800:	791b      	ldrb	r3, [r3, #4]
 8013802:	70eb      	strb	r3, [r5, #3]
 8013804:	68a3      	ldr	r3, [r4, #8]
 8013806:	78db      	ldrb	r3, [r3, #3]
 8013808:	712b      	strb	r3, [r5, #4]
 801380a:	68a3      	ldr	r3, [r4, #8]
 801380c:	789b      	ldrb	r3, [r3, #2]
 801380e:	716b      	strb	r3, [r5, #5]
 8013810:	68a3      	ldr	r3, [r4, #8]
 8013812:	785b      	ldrb	r3, [r3, #1]
 8013814:	71ab      	strb	r3, [r5, #6]
 8013816:	68a3      	ldr	r3, [r4, #8]
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	71eb      	strb	r3, [r5, #7]
 801381c:	68a2      	ldr	r2, [r4, #8]
 801381e:	6923      	ldr	r3, [r4, #16]
 8013820:	3208      	adds	r2, #8
 8013822:	3308      	adds	r3, #8
 8013824:	2108      	movs	r1, #8
 8013826:	60a2      	str	r2, [r4, #8]
 8013828:	6123      	str	r3, [r4, #16]
 801382a:	7561      	strb	r1, [r4, #21]
 801382c:	7da0      	ldrb	r0, [r4, #22]
 801382e:	f080 0001 	eor.w	r0, r0, #1
 8013832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013836:	681a      	ldr	r2, [r3, #0]
 8013838:	685b      	ldr	r3, [r3, #4]
 801383a:	606b      	str	r3, [r5, #4]
 801383c:	602a      	str	r2, [r5, #0]
 801383e:	e7ed      	b.n	801381c <ucdr_deserialize_endian_double+0x110>
 8013840:	68a2      	ldr	r2, [r4, #8]
 8013842:	6923      	ldr	r3, [r4, #16]
 8013844:	7da0      	ldrb	r0, [r4, #22]
 8013846:	f884 9015 	strb.w	r9, [r4, #21]
 801384a:	1b92      	subs	r2, r2, r6
 801384c:	1b9b      	subs	r3, r3, r6
 801384e:	60a2      	str	r2, [r4, #8]
 8013850:	6123      	str	r3, [r4, #16]
 8013852:	f080 0001 	eor.w	r0, r0, #1
 8013856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801385a:	68a3      	ldr	r3, [r4, #8]
 801385c:	799b      	ldrb	r3, [r3, #6]
 801385e:	706b      	strb	r3, [r5, #1]
 8013860:	1cab      	adds	r3, r5, #2
 8013862:	68a2      	ldr	r2, [r4, #8]
 8013864:	7952      	ldrb	r2, [r2, #5]
 8013866:	f803 2b01 	strb.w	r2, [r3], #1
 801386a:	68a2      	ldr	r2, [r4, #8]
 801386c:	7912      	ldrb	r2, [r2, #4]
 801386e:	f803 2b01 	strb.w	r2, [r3], #1
 8013872:	68a2      	ldr	r2, [r4, #8]
 8013874:	78d2      	ldrb	r2, [r2, #3]
 8013876:	f803 2b01 	strb.w	r2, [r3], #1
 801387a:	68a2      	ldr	r2, [r4, #8]
 801387c:	7892      	ldrb	r2, [r2, #2]
 801387e:	f803 2b01 	strb.w	r2, [r3], #1
 8013882:	68a2      	ldr	r2, [r4, #8]
 8013884:	7852      	ldrb	r2, [r2, #1]
 8013886:	f803 2b01 	strb.w	r2, [r3], #1
 801388a:	68a2      	ldr	r2, [r4, #8]
 801388c:	7812      	ldrb	r2, [r2, #0]
 801388e:	701a      	strb	r2, [r3, #0]
 8013890:	e797      	b.n	80137c2 <ucdr_deserialize_endian_double+0xb6>
 8013892:	4641      	mov	r1, r8
 8013894:	4632      	mov	r2, r6
 8013896:	4628      	mov	r0, r5
 8013898:	f007 fe5e 	bl	801b558 <memcpy>
 801389c:	68a1      	ldr	r1, [r4, #8]
 801389e:	4652      	mov	r2, sl
 80138a0:	19a8      	adds	r0, r5, r6
 80138a2:	f007 fe59 	bl	801b558 <memcpy>
 80138a6:	e78c      	b.n	80137c2 <ucdr_deserialize_endian_double+0xb6>

080138a8 <ucdr_check_buffer_available_for>:
 80138a8:	7d83      	ldrb	r3, [r0, #22]
 80138aa:	b93b      	cbnz	r3, 80138bc <ucdr_check_buffer_available_for+0x14>
 80138ac:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80138b0:	4419      	add	r1, r3
 80138b2:	4288      	cmp	r0, r1
 80138b4:	bf34      	ite	cc
 80138b6:	2000      	movcc	r0, #0
 80138b8:	2001      	movcs	r0, #1
 80138ba:	4770      	bx	lr
 80138bc:	2000      	movs	r0, #0
 80138be:	4770      	bx	lr

080138c0 <ucdr_check_final_buffer_behavior>:
 80138c0:	7d83      	ldrb	r3, [r0, #22]
 80138c2:	b943      	cbnz	r3, 80138d6 <ucdr_check_final_buffer_behavior+0x16>
 80138c4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80138c8:	4291      	cmp	r1, r2
 80138ca:	b510      	push	{r4, lr}
 80138cc:	4604      	mov	r4, r0
 80138ce:	d205      	bcs.n	80138dc <ucdr_check_final_buffer_behavior+0x1c>
 80138d0:	2301      	movs	r3, #1
 80138d2:	4618      	mov	r0, r3
 80138d4:	bd10      	pop	{r4, pc}
 80138d6:	2300      	movs	r3, #0
 80138d8:	4618      	mov	r0, r3
 80138da:	4770      	bx	lr
 80138dc:	6982      	ldr	r2, [r0, #24]
 80138de:	b13a      	cbz	r2, 80138f0 <ucdr_check_final_buffer_behavior+0x30>
 80138e0:	69c1      	ldr	r1, [r0, #28]
 80138e2:	4790      	blx	r2
 80138e4:	f080 0301 	eor.w	r3, r0, #1
 80138e8:	b2db      	uxtb	r3, r3
 80138ea:	75a0      	strb	r0, [r4, #22]
 80138ec:	4618      	mov	r0, r3
 80138ee:	bd10      	pop	{r4, pc}
 80138f0:	2001      	movs	r0, #1
 80138f2:	75a0      	strb	r0, [r4, #22]
 80138f4:	e7fa      	b.n	80138ec <ucdr_check_final_buffer_behavior+0x2c>
 80138f6:	bf00      	nop

080138f8 <ucdr_set_on_full_buffer_callback>:
 80138f8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80138fc:	4770      	bx	lr
 80138fe:	bf00      	nop

08013900 <ucdr_init_buffer_origin_offset_endian>:
 8013900:	b410      	push	{r4}
 8013902:	9c01      	ldr	r4, [sp, #4]
 8013904:	6001      	str	r1, [r0, #0]
 8013906:	440a      	add	r2, r1
 8013908:	6042      	str	r2, [r0, #4]
 801390a:	190a      	adds	r2, r1, r4
 801390c:	441c      	add	r4, r3
 801390e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8013912:	6082      	str	r2, [r0, #8]
 8013914:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013918:	7503      	strb	r3, [r0, #20]
 801391a:	2200      	movs	r2, #0
 801391c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013924:	7542      	strb	r2, [r0, #21]
 8013926:	7582      	strb	r2, [r0, #22]
 8013928:	4770      	bx	lr
 801392a:	bf00      	nop

0801392c <ucdr_init_buffer_origin_offset>:
 801392c:	b510      	push	{r4, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	9c04      	ldr	r4, [sp, #16]
 8013932:	9400      	str	r4, [sp, #0]
 8013934:	2401      	movs	r4, #1
 8013936:	9401      	str	r4, [sp, #4]
 8013938:	f7ff ffe2 	bl	8013900 <ucdr_init_buffer_origin_offset_endian>
 801393c:	b002      	add	sp, #8
 801393e:	bd10      	pop	{r4, pc}

08013940 <ucdr_init_buffer_origin>:
 8013940:	b510      	push	{r4, lr}
 8013942:	b082      	sub	sp, #8
 8013944:	2400      	movs	r4, #0
 8013946:	9400      	str	r4, [sp, #0]
 8013948:	f7ff fff0 	bl	801392c <ucdr_init_buffer_origin_offset>
 801394c:	b002      	add	sp, #8
 801394e:	bd10      	pop	{r4, pc}

08013950 <ucdr_init_buffer>:
 8013950:	2300      	movs	r3, #0
 8013952:	f7ff bff5 	b.w	8013940 <ucdr_init_buffer_origin>
 8013956:	bf00      	nop

08013958 <ucdr_alignment>:
 8013958:	fbb0 f3f1 	udiv	r3, r0, r1
 801395c:	fb03 0011 	mls	r0, r3, r1, r0
 8013960:	1a08      	subs	r0, r1, r0
 8013962:	3901      	subs	r1, #1
 8013964:	4008      	ands	r0, r1
 8013966:	4770      	bx	lr

08013968 <ucdr_buffer_alignment>:
 8013968:	7d43      	ldrb	r3, [r0, #21]
 801396a:	428b      	cmp	r3, r1
 801396c:	d208      	bcs.n	8013980 <ucdr_buffer_alignment+0x18>
 801396e:	6900      	ldr	r0, [r0, #16]
 8013970:	fbb0 f3f1 	udiv	r3, r0, r1
 8013974:	fb01 0013 	mls	r0, r1, r3, r0
 8013978:	1a08      	subs	r0, r1, r0
 801397a:	3901      	subs	r1, #1
 801397c:	4008      	ands	r0, r1
 801397e:	4770      	bx	lr
 8013980:	2000      	movs	r0, #0
 8013982:	4770      	bx	lr

08013984 <ucdr_align_to>:
 8013984:	b538      	push	{r3, r4, r5, lr}
 8013986:	4604      	mov	r4, r0
 8013988:	460d      	mov	r5, r1
 801398a:	f7ff ffed 	bl	8013968 <ucdr_buffer_alignment>
 801398e:	68a3      	ldr	r3, [r4, #8]
 8013990:	6921      	ldr	r1, [r4, #16]
 8013992:	7565      	strb	r5, [r4, #21]
 8013994:	181a      	adds	r2, r3, r0
 8013996:	6863      	ldr	r3, [r4, #4]
 8013998:	4293      	cmp	r3, r2
 801399a:	4408      	add	r0, r1
 801399c:	bf28      	it	cs
 801399e:	4613      	movcs	r3, r2
 80139a0:	6120      	str	r0, [r4, #16]
 80139a2:	60a3      	str	r3, [r4, #8]
 80139a4:	bd38      	pop	{r3, r4, r5, pc}
 80139a6:	bf00      	nop

080139a8 <ucdr_buffer_length>:
 80139a8:	6882      	ldr	r2, [r0, #8]
 80139aa:	6800      	ldr	r0, [r0, #0]
 80139ac:	1a10      	subs	r0, r2, r0
 80139ae:	4770      	bx	lr

080139b0 <ucdr_buffer_remaining>:
 80139b0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80139b4:	1a10      	subs	r0, r2, r0
 80139b6:	4770      	bx	lr

080139b8 <ucdr_check_final_buffer_behavior_array>:
 80139b8:	b538      	push	{r3, r4, r5, lr}
 80139ba:	7d83      	ldrb	r3, [r0, #22]
 80139bc:	b963      	cbnz	r3, 80139d8 <ucdr_check_final_buffer_behavior_array+0x20>
 80139be:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80139c2:	429a      	cmp	r2, r3
 80139c4:	4604      	mov	r4, r0
 80139c6:	460d      	mov	r5, r1
 80139c8:	d308      	bcc.n	80139dc <ucdr_check_final_buffer_behavior_array+0x24>
 80139ca:	b139      	cbz	r1, 80139dc <ucdr_check_final_buffer_behavior_array+0x24>
 80139cc:	6983      	ldr	r3, [r0, #24]
 80139ce:	b163      	cbz	r3, 80139ea <ucdr_check_final_buffer_behavior_array+0x32>
 80139d0:	69c1      	ldr	r1, [r0, #28]
 80139d2:	4798      	blx	r3
 80139d4:	75a0      	strb	r0, [r4, #22]
 80139d6:	b108      	cbz	r0, 80139dc <ucdr_check_final_buffer_behavior_array+0x24>
 80139d8:	2000      	movs	r0, #0
 80139da:	bd38      	pop	{r3, r4, r5, pc}
 80139dc:	4620      	mov	r0, r4
 80139de:	f7ff ffe7 	bl	80139b0 <ucdr_buffer_remaining>
 80139e2:	42a8      	cmp	r0, r5
 80139e4:	bf28      	it	cs
 80139e6:	4628      	movcs	r0, r5
 80139e8:	bd38      	pop	{r3, r4, r5, pc}
 80139ea:	2301      	movs	r3, #1
 80139ec:	7583      	strb	r3, [r0, #22]
 80139ee:	e7f3      	b.n	80139d8 <ucdr_check_final_buffer_behavior_array+0x20>

080139f0 <ucdr_advance_buffer>:
 80139f0:	b538      	push	{r3, r4, r5, lr}
 80139f2:	4604      	mov	r4, r0
 80139f4:	460d      	mov	r5, r1
 80139f6:	f7ff ff57 	bl	80138a8 <ucdr_check_buffer_available_for>
 80139fa:	b178      	cbz	r0, 8013a1c <ucdr_advance_buffer+0x2c>
 80139fc:	6923      	ldr	r3, [r4, #16]
 80139fe:	68a2      	ldr	r2, [r4, #8]
 8013a00:	442b      	add	r3, r5
 8013a02:	6123      	str	r3, [r4, #16]
 8013a04:	2301      	movs	r3, #1
 8013a06:	442a      	add	r2, r5
 8013a08:	7563      	strb	r3, [r4, #21]
 8013a0a:	60a2      	str	r2, [r4, #8]
 8013a0c:	bd38      	pop	{r3, r4, r5, pc}
 8013a0e:	68a2      	ldr	r2, [r4, #8]
 8013a10:	6923      	ldr	r3, [r4, #16]
 8013a12:	4402      	add	r2, r0
 8013a14:	4403      	add	r3, r0
 8013a16:	1a2d      	subs	r5, r5, r0
 8013a18:	60a2      	str	r2, [r4, #8]
 8013a1a:	6123      	str	r3, [r4, #16]
 8013a1c:	4629      	mov	r1, r5
 8013a1e:	2201      	movs	r2, #1
 8013a20:	4620      	mov	r0, r4
 8013a22:	f7ff ffc9 	bl	80139b8 <ucdr_check_final_buffer_behavior_array>
 8013a26:	2800      	cmp	r0, #0
 8013a28:	d1f1      	bne.n	8013a0e <ucdr_advance_buffer+0x1e>
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	7563      	strb	r3, [r4, #21]
 8013a2e:	bd38      	pop	{r3, r4, r5, pc}

08013a30 <ucdr_serialize_sequence_char>:
 8013a30:	b570      	push	{r4, r5, r6, lr}
 8013a32:	4615      	mov	r5, r2
 8013a34:	460e      	mov	r6, r1
 8013a36:	7d01      	ldrb	r1, [r0, #20]
 8013a38:	4604      	mov	r4, r0
 8013a3a:	f7fe fb67 	bl	801210c <ucdr_serialize_endian_uint32_t>
 8013a3e:	b90d      	cbnz	r5, 8013a44 <ucdr_serialize_sequence_char+0x14>
 8013a40:	2001      	movs	r0, #1
 8013a42:	bd70      	pop	{r4, r5, r6, pc}
 8013a44:	7d21      	ldrb	r1, [r4, #20]
 8013a46:	462b      	mov	r3, r5
 8013a48:	4632      	mov	r2, r6
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a50:	f005 b87c 	b.w	8018b4c <ucdr_serialize_endian_array_char>

08013a54 <ucdr_deserialize_sequence_char>:
 8013a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a58:	461d      	mov	r5, r3
 8013a5a:	4616      	mov	r6, r2
 8013a5c:	460f      	mov	r7, r1
 8013a5e:	461a      	mov	r2, r3
 8013a60:	7d01      	ldrb	r1, [r0, #20]
 8013a62:	4604      	mov	r4, r0
 8013a64:	f7fe fc7a 	bl	801235c <ucdr_deserialize_endian_uint32_t>
 8013a68:	682b      	ldr	r3, [r5, #0]
 8013a6a:	429e      	cmp	r6, r3
 8013a6c:	bf3c      	itt	cc
 8013a6e:	2201      	movcc	r2, #1
 8013a70:	75a2      	strbcc	r2, [r4, #22]
 8013a72:	b913      	cbnz	r3, 8013a7a <ucdr_deserialize_sequence_char+0x26>
 8013a74:	2001      	movs	r0, #1
 8013a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a7a:	7d21      	ldrb	r1, [r4, #20]
 8013a7c:	463a      	mov	r2, r7
 8013a7e:	4620      	mov	r0, r4
 8013a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a84:	f005 b894 	b.w	8018bb0 <ucdr_deserialize_endian_array_char>

08013a88 <ucdr_serialize_sequence_uint8_t>:
 8013a88:	b570      	push	{r4, r5, r6, lr}
 8013a8a:	4615      	mov	r5, r2
 8013a8c:	460e      	mov	r6, r1
 8013a8e:	7d01      	ldrb	r1, [r0, #20]
 8013a90:	4604      	mov	r4, r0
 8013a92:	f7fe fb3b 	bl	801210c <ucdr_serialize_endian_uint32_t>
 8013a96:	b90d      	cbnz	r5, 8013a9c <ucdr_serialize_sequence_uint8_t+0x14>
 8013a98:	2001      	movs	r0, #1
 8013a9a:	bd70      	pop	{r4, r5, r6, pc}
 8013a9c:	7d21      	ldrb	r1, [r4, #20]
 8013a9e:	462b      	mov	r3, r5
 8013aa0:	4632      	mov	r2, r6
 8013aa2:	4620      	mov	r0, r4
 8013aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013aa8:	f005 b8e6 	b.w	8018c78 <ucdr_serialize_endian_array_uint8_t>

08013aac <ucdr_deserialize_sequence_uint8_t>:
 8013aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ab0:	461d      	mov	r5, r3
 8013ab2:	4616      	mov	r6, r2
 8013ab4:	460f      	mov	r7, r1
 8013ab6:	461a      	mov	r2, r3
 8013ab8:	7d01      	ldrb	r1, [r0, #20]
 8013aba:	4604      	mov	r4, r0
 8013abc:	f7fe fc4e 	bl	801235c <ucdr_deserialize_endian_uint32_t>
 8013ac0:	682b      	ldr	r3, [r5, #0]
 8013ac2:	429e      	cmp	r6, r3
 8013ac4:	bf3c      	itt	cc
 8013ac6:	2201      	movcc	r2, #1
 8013ac8:	75a2      	strbcc	r2, [r4, #22]
 8013aca:	b913      	cbnz	r3, 8013ad2 <ucdr_deserialize_sequence_uint8_t+0x26>
 8013acc:	2001      	movs	r0, #1
 8013ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ad2:	7d21      	ldrb	r1, [r4, #20]
 8013ad4:	463a      	mov	r2, r7
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013adc:	f005 b930 	b.w	8018d40 <ucdr_deserialize_endian_array_uint8_t>

08013ae0 <ucdr_serialize_sequence_float>:
 8013ae0:	b570      	push	{r4, r5, r6, lr}
 8013ae2:	4615      	mov	r5, r2
 8013ae4:	460e      	mov	r6, r1
 8013ae6:	7d01      	ldrb	r1, [r0, #20]
 8013ae8:	4604      	mov	r4, r0
 8013aea:	f7fe fb0f 	bl	801210c <ucdr_serialize_endian_uint32_t>
 8013aee:	b90d      	cbnz	r5, 8013af4 <ucdr_serialize_sequence_float+0x14>
 8013af0:	2001      	movs	r0, #1
 8013af2:	bd70      	pop	{r4, r5, r6, pc}
 8013af4:	7d21      	ldrb	r1, [r4, #20]
 8013af6:	462b      	mov	r3, r5
 8013af8:	4632      	mov	r2, r6
 8013afa:	4620      	mov	r0, r4
 8013afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b00:	f005 b950 	b.w	8018da4 <ucdr_serialize_endian_array_float>

08013b04 <ucdr_deserialize_sequence_float>:
 8013b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b08:	461d      	mov	r5, r3
 8013b0a:	4616      	mov	r6, r2
 8013b0c:	460f      	mov	r7, r1
 8013b0e:	461a      	mov	r2, r3
 8013b10:	7d01      	ldrb	r1, [r0, #20]
 8013b12:	4604      	mov	r4, r0
 8013b14:	f7fe fc22 	bl	801235c <ucdr_deserialize_endian_uint32_t>
 8013b18:	682b      	ldr	r3, [r5, #0]
 8013b1a:	429e      	cmp	r6, r3
 8013b1c:	bf3c      	itt	cc
 8013b1e:	2201      	movcc	r2, #1
 8013b20:	75a2      	strbcc	r2, [r4, #22]
 8013b22:	b913      	cbnz	r3, 8013b2a <ucdr_deserialize_sequence_float+0x26>
 8013b24:	2001      	movs	r0, #1
 8013b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b2a:	7d21      	ldrb	r1, [r4, #20]
 8013b2c:	463a      	mov	r2, r7
 8013b2e:	4620      	mov	r0, r4
 8013b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b34:	f005 b98a 	b.w	8018e4c <ucdr_deserialize_endian_array_float>

08013b38 <ucdr_serialize_sequence_double>:
 8013b38:	b570      	push	{r4, r5, r6, lr}
 8013b3a:	4615      	mov	r5, r2
 8013b3c:	460e      	mov	r6, r1
 8013b3e:	7d01      	ldrb	r1, [r0, #20]
 8013b40:	4604      	mov	r4, r0
 8013b42:	f7fe fae3 	bl	801210c <ucdr_serialize_endian_uint32_t>
 8013b46:	b90d      	cbnz	r5, 8013b4c <ucdr_serialize_sequence_double+0x14>
 8013b48:	2001      	movs	r0, #1
 8013b4a:	bd70      	pop	{r4, r5, r6, pc}
 8013b4c:	7d21      	ldrb	r1, [r4, #20]
 8013b4e:	462b      	mov	r3, r5
 8013b50:	4632      	mov	r2, r6
 8013b52:	4620      	mov	r0, r4
 8013b54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b58:	f005 b9ce 	b.w	8018ef8 <ucdr_serialize_endian_array_double>

08013b5c <ucdr_deserialize_sequence_double>:
 8013b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b60:	461d      	mov	r5, r3
 8013b62:	4616      	mov	r6, r2
 8013b64:	460f      	mov	r7, r1
 8013b66:	461a      	mov	r2, r3
 8013b68:	7d01      	ldrb	r1, [r0, #20]
 8013b6a:	4604      	mov	r4, r0
 8013b6c:	f7fe fbf6 	bl	801235c <ucdr_deserialize_endian_uint32_t>
 8013b70:	682b      	ldr	r3, [r5, #0]
 8013b72:	429e      	cmp	r6, r3
 8013b74:	bf3c      	itt	cc
 8013b76:	2201      	movcc	r2, #1
 8013b78:	75a2      	strbcc	r2, [r4, #22]
 8013b7a:	b913      	cbnz	r3, 8013b82 <ucdr_deserialize_sequence_double+0x26>
 8013b7c:	2001      	movs	r0, #1
 8013b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b82:	7d21      	ldrb	r1, [r4, #20]
 8013b84:	463a      	mov	r2, r7
 8013b86:	4620      	mov	r0, r4
 8013b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b8c:	f005 ba08 	b.w	8018fa0 <ucdr_deserialize_endian_array_double>

08013b90 <uxr_buffer_delete_entity>:
 8013b90:	b510      	push	{r4, lr}
 8013b92:	2300      	movs	r3, #0
 8013b94:	b08e      	sub	sp, #56	; 0x38
 8013b96:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8013b9a:	2303      	movs	r3, #3
 8013b9c:	9300      	str	r3, [sp, #0]
 8013b9e:	2204      	movs	r2, #4
 8013ba0:	ab06      	add	r3, sp, #24
 8013ba2:	4604      	mov	r4, r0
 8013ba4:	9103      	str	r1, [sp, #12]
 8013ba6:	f001 f86f 	bl	8014c88 <uxr_prepare_stream_to_write_submessage>
 8013baa:	b918      	cbnz	r0, 8013bb4 <uxr_buffer_delete_entity+0x24>
 8013bac:	4604      	mov	r4, r0
 8013bae:	4620      	mov	r0, r4
 8013bb0:	b00e      	add	sp, #56	; 0x38
 8013bb2:	bd10      	pop	{r4, pc}
 8013bb4:	9902      	ldr	r1, [sp, #8]
 8013bb6:	aa05      	add	r2, sp, #20
 8013bb8:	4620      	mov	r0, r4
 8013bba:	f001 f99b 	bl	8014ef4 <uxr_init_base_object_request>
 8013bbe:	a905      	add	r1, sp, #20
 8013bc0:	4604      	mov	r4, r0
 8013bc2:	a806      	add	r0, sp, #24
 8013bc4:	f002 fb00 	bl	80161c8 <uxr_serialize_DELETE_Payload>
 8013bc8:	4620      	mov	r0, r4
 8013bca:	b00e      	add	sp, #56	; 0x38
 8013bcc:	bd10      	pop	{r4, pc}
 8013bce:	bf00      	nop

08013bd0 <uxr_common_create_entity>:
 8013bd0:	b510      	push	{r4, lr}
 8013bd2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013bd6:	b08c      	sub	sp, #48	; 0x30
 8013bd8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013bdc:	f1bc 0f01 	cmp.w	ip, #1
 8013be0:	bf0c      	ite	eq
 8013be2:	f003 0201 	andeq.w	r2, r3, #1
 8013be6:	2200      	movne	r2, #0
 8013be8:	330e      	adds	r3, #14
 8013bea:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8013bee:	9101      	str	r1, [sp, #4]
 8013bf0:	441a      	add	r2, r3
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	9300      	str	r3, [sp, #0]
 8013bf6:	9903      	ldr	r1, [sp, #12]
 8013bf8:	ab04      	add	r3, sp, #16
 8013bfa:	b292      	uxth	r2, r2
 8013bfc:	4604      	mov	r4, r0
 8013bfe:	f001 f843 	bl	8014c88 <uxr_prepare_stream_to_write_submessage>
 8013c02:	b918      	cbnz	r0, 8013c0c <uxr_common_create_entity+0x3c>
 8013c04:	4604      	mov	r4, r0
 8013c06:	4620      	mov	r0, r4
 8013c08:	b00c      	add	sp, #48	; 0x30
 8013c0a:	bd10      	pop	{r4, pc}
 8013c0c:	9902      	ldr	r1, [sp, #8]
 8013c0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c10:	4620      	mov	r0, r4
 8013c12:	f001 f96f 	bl	8014ef4 <uxr_init_base_object_request>
 8013c16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013c18:	4604      	mov	r4, r0
 8013c1a:	a804      	add	r0, sp, #16
 8013c1c:	f002 fa30 	bl	8016080 <uxr_serialize_CREATE_Payload>
 8013c20:	4620      	mov	r0, r4
 8013c22:	b00c      	add	sp, #48	; 0x30
 8013c24:	bd10      	pop	{r4, pc}
 8013c26:	bf00      	nop

08013c28 <uxr_buffer_create_participant_bin>:
 8013c28:	b570      	push	{r4, r5, r6, lr}
 8013c2a:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8013c2e:	ac11      	add	r4, sp, #68	; 0x44
 8013c30:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8013c34:	2303      	movs	r3, #3
 8013c36:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013c3a:	7223      	strb	r3, [r4, #8]
 8013c3c:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8013c3e:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8013c42:	2201      	movs	r2, #1
 8013c44:	2100      	movs	r1, #0
 8013c46:	4605      	mov	r5, r0
 8013c48:	7122      	strb	r2, [r4, #4]
 8013c4a:	f88d 1014 	strb.w	r1, [sp, #20]
 8013c4e:	b1cb      	cbz	r3, 8013c84 <uxr_buffer_create_participant_bin+0x5c>
 8013c50:	f88d 201c 	strb.w	r2, [sp, #28]
 8013c54:	9308      	str	r3, [sp, #32]
 8013c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c5a:	a915      	add	r1, sp, #84	; 0x54
 8013c5c:	a809      	add	r0, sp, #36	; 0x24
 8013c5e:	f7ff fe77 	bl	8013950 <ucdr_init_buffer>
 8013c62:	a905      	add	r1, sp, #20
 8013c64:	a809      	add	r0, sp, #36	; 0x24
 8013c66:	f001 fed9 	bl	8015a1c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8013c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c6c:	9600      	str	r6, [sp, #0]
 8013c6e:	9401      	str	r4, [sp, #4]
 8013c70:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013c74:	60e3      	str	r3, [r4, #12]
 8013c76:	4628      	mov	r0, r5
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	f7ff ffa9 	bl	8013bd0 <uxr_common_create_entity>
 8013c7e:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8013c82:	bd70      	pop	{r4, r5, r6, pc}
 8013c84:	f88d 301c 	strb.w	r3, [sp, #28]
 8013c88:	e7e5      	b.n	8013c56 <uxr_buffer_create_participant_bin+0x2e>
 8013c8a:	bf00      	nop

08013c8c <uxr_buffer_create_topic_bin>:
 8013c8c:	b570      	push	{r4, r5, r6, lr}
 8013c8e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8013c92:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013c96:	9105      	str	r1, [sp, #20]
 8013c98:	4605      	mov	r5, r0
 8013c9a:	a997      	add	r1, sp, #604	; 0x25c
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	2302      	movs	r3, #2
 8013ca0:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8013ca4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8013ca8:	f000 f8ee 	bl	8013e88 <uxr_object_id_to_raw>
 8013cac:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8013cae:	9306      	str	r3, [sp, #24]
 8013cb0:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8013cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8013cb4:	2303      	movs	r3, #3
 8013cb6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8013cba:	2301      	movs	r3, #1
 8013cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013cc0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013cc4:	a917      	add	r1, sp, #92	; 0x5c
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	a80b      	add	r0, sp, #44	; 0x2c
 8013cca:	f88d 301c 	strb.w	r3, [sp, #28]
 8013cce:	f7ff fe3f 	bl	8013950 <ucdr_init_buffer>
 8013cd2:	a906      	add	r1, sp, #24
 8013cd4:	a80b      	add	r0, sp, #44	; 0x2c
 8013cd6:	f001 fec3 	bl	8015a60 <uxr_serialize_OBJK_Topic_Binary>
 8013cda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cdc:	9316      	str	r3, [sp, #88]	; 0x58
 8013cde:	ac13      	add	r4, sp, #76	; 0x4c
 8013ce0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013ce4:	9600      	str	r6, [sp, #0]
 8013ce6:	9401      	str	r4, [sp, #4]
 8013ce8:	b29b      	uxth	r3, r3
 8013cea:	4628      	mov	r0, r5
 8013cec:	f7ff ff70 	bl	8013bd0 <uxr_common_create_entity>
 8013cf0:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8013cf4:	bd70      	pop	{r4, r5, r6, pc}
 8013cf6:	bf00      	nop

08013cf8 <uxr_buffer_create_publisher_bin>:
 8013cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cfa:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8013cfe:	4605      	mov	r5, r0
 8013d00:	9105      	str	r1, [sp, #20]
 8013d02:	4618      	mov	r0, r3
 8013d04:	2603      	movs	r6, #3
 8013d06:	a992      	add	r1, sp, #584	; 0x248
 8013d08:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013d0c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8013d10:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8013d14:	f000 f8b8 	bl	8013e88 <uxr_object_id_to_raw>
 8013d18:	2300      	movs	r3, #0
 8013d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013d1e:	a912      	add	r1, sp, #72	; 0x48
 8013d20:	a806      	add	r0, sp, #24
 8013d22:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8013d26:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8013d2a:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8013d2e:	f7ff fe0f 	bl	8013950 <ucdr_init_buffer>
 8013d32:	a993      	add	r1, sp, #588	; 0x24c
 8013d34:	a806      	add	r0, sp, #24
 8013d36:	f001 ff47 	bl	8015bc8 <uxr_serialize_OBJK_Publisher_Binary>
 8013d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d3c:	9311      	str	r3, [sp, #68]	; 0x44
 8013d3e:	ac0e      	add	r4, sp, #56	; 0x38
 8013d40:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013d44:	9700      	str	r7, [sp, #0]
 8013d46:	9401      	str	r4, [sp, #4]
 8013d48:	b29b      	uxth	r3, r3
 8013d4a:	4628      	mov	r0, r5
 8013d4c:	f7ff ff40 	bl	8013bd0 <uxr_common_create_entity>
 8013d50:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8013d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d56:	bf00      	nop

08013d58 <uxr_buffer_create_datawriter_bin>:
 8013d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d5c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013d60:	ac1d      	add	r4, sp, #116	; 0x74
 8013d62:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013d66:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8013d6a:	9105      	str	r1, [sp, #20]
 8013d6c:	4606      	mov	r6, r0
 8013d6e:	a9a1      	add	r1, sp, #644	; 0x284
 8013d70:	4618      	mov	r0, r3
 8013d72:	2305      	movs	r3, #5
 8013d74:	7123      	strb	r3, [r4, #4]
 8013d76:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8013d7a:	2703      	movs	r7, #3
 8013d7c:	f000 f884 	bl	8013e88 <uxr_object_id_to_raw>
 8013d80:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8013d82:	7227      	strb	r7, [r4, #8]
 8013d84:	a90e      	add	r1, sp, #56	; 0x38
 8013d86:	f000 f87f 	bl	8013e88 <uxr_object_id_to_raw>
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8013d90:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8013d94:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8013d98:	3d00      	subs	r5, #0
 8013d9a:	bf18      	it	ne
 8013d9c:	2501      	movne	r5, #1
 8013d9e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8013da2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8013da6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8013daa:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013dae:	2301      	movs	r3, #1
 8013db0:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8013db4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013db8:	bb8a      	cbnz	r2, 8013e1e <uxr_buffer_create_datawriter_bin+0xc6>
 8013dba:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013dbe:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8013dc2:	f04f 0c13 	mov.w	ip, #19
 8013dc6:	250b      	movs	r5, #11
 8013dc8:	2221      	movs	r2, #33	; 0x21
 8013dca:	2111      	movs	r1, #17
 8013dcc:	2009      	movs	r0, #9
 8013dce:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8013dd2:	b923      	cbnz	r3, 8013dde <uxr_buffer_create_datawriter_bin+0x86>
 8013dd4:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8013dd8:	4672      	mov	r2, lr
 8013dda:	4661      	mov	r1, ip
 8013ddc:	4628      	mov	r0, r5
 8013dde:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8013de2:	2b01      	cmp	r3, #1
 8013de4:	d025      	beq.n	8013e32 <uxr_buffer_create_datawriter_bin+0xda>
 8013de6:	2b03      	cmp	r3, #3
 8013de8:	d029      	beq.n	8013e3e <uxr_buffer_create_datawriter_bin+0xe6>
 8013dea:	b32b      	cbz	r3, 8013e38 <uxr_buffer_create_datawriter_bin+0xe0>
 8013dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013df0:	a921      	add	r1, sp, #132	; 0x84
 8013df2:	a806      	add	r0, sp, #24
 8013df4:	f7ff fdac 	bl	8013950 <ucdr_init_buffer>
 8013df8:	a90e      	add	r1, sp, #56	; 0x38
 8013dfa:	a806      	add	r0, sp, #24
 8013dfc:	f001 ff5a 	bl	8015cb4 <uxr_serialize_OBJK_DataWriter_Binary>
 8013e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e02:	f8cd 8000 	str.w	r8, [sp]
 8013e06:	9401      	str	r4, [sp, #4]
 8013e08:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013e0c:	60e3      	str	r3, [r4, #12]
 8013e0e:	4630      	mov	r0, r6
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	f7ff fedd 	bl	8013bd0 <uxr_common_create_entity>
 8013e16:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e1e:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8013e22:	f04f 0c12 	mov.w	ip, #18
 8013e26:	250a      	movs	r5, #10
 8013e28:	2220      	movs	r2, #32
 8013e2a:	2110      	movs	r1, #16
 8013e2c:	2008      	movs	r0, #8
 8013e2e:	2702      	movs	r7, #2
 8013e30:	e7cd      	b.n	8013dce <uxr_buffer_create_datawriter_bin+0x76>
 8013e32:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8013e36:	e7d9      	b.n	8013dec <uxr_buffer_create_datawriter_bin+0x94>
 8013e38:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8013e3c:	e7d6      	b.n	8013dec <uxr_buffer_create_datawriter_bin+0x94>
 8013e3e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8013e42:	e7d3      	b.n	8013dec <uxr_buffer_create_datawriter_bin+0x94>

08013e44 <uxr_object_id>:
 8013e44:	b082      	sub	sp, #8
 8013e46:	2300      	movs	r3, #0
 8013e48:	f88d 1006 	strb.w	r1, [sp, #6]
 8013e4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013e50:	f360 030f 	bfi	r3, r0, #0, #16
 8013e54:	f362 431f 	bfi	r3, r2, #16, #16
 8013e58:	4618      	mov	r0, r3
 8013e5a:	b002      	add	sp, #8
 8013e5c:	4770      	bx	lr
 8013e5e:	bf00      	nop

08013e60 <uxr_object_id_from_raw>:
 8013e60:	7843      	ldrb	r3, [r0, #1]
 8013e62:	7801      	ldrb	r1, [r0, #0]
 8013e64:	b082      	sub	sp, #8
 8013e66:	f003 020f 	and.w	r2, r3, #15
 8013e6a:	f88d 2006 	strb.w	r2, [sp, #6]
 8013e6e:	091b      	lsrs	r3, r3, #4
 8013e70:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013e74:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8013e78:	2000      	movs	r0, #0
 8013e7a:	f363 000f 	bfi	r0, r3, #0, #16
 8013e7e:	f362 401f 	bfi	r0, r2, #16, #16
 8013e82:	b002      	add	sp, #8
 8013e84:	4770      	bx	lr
 8013e86:	bf00      	nop

08013e88 <uxr_object_id_to_raw>:
 8013e88:	4602      	mov	r2, r0
 8013e8a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8013e8e:	b082      	sub	sp, #8
 8013e90:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8013e94:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8013e98:	f881 c000 	strb.w	ip, [r1]
 8013e9c:	7048      	strb	r0, [r1, #1]
 8013e9e:	b002      	add	sp, #8
 8013ea0:	4770      	bx	lr
 8013ea2:	bf00      	nop

08013ea4 <on_get_fragmentation_info>:
 8013ea4:	b500      	push	{lr}
 8013ea6:	b08b      	sub	sp, #44	; 0x2c
 8013ea8:	4601      	mov	r1, r0
 8013eaa:	2204      	movs	r2, #4
 8013eac:	a802      	add	r0, sp, #8
 8013eae:	f7ff fd4f 	bl	8013950 <ucdr_init_buffer>
 8013eb2:	f10d 0305 	add.w	r3, sp, #5
 8013eb6:	f10d 0206 	add.w	r2, sp, #6
 8013eba:	a901      	add	r1, sp, #4
 8013ebc:	a802      	add	r0, sp, #8
 8013ebe:	f001 f99b 	bl	80151f8 <uxr_read_submessage_header>
 8013ec2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013ec6:	2b0d      	cmp	r3, #13
 8013ec8:	d003      	beq.n	8013ed2 <on_get_fragmentation_info+0x2e>
 8013eca:	2000      	movs	r0, #0
 8013ecc:	b00b      	add	sp, #44	; 0x2c
 8013ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ed2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013ed6:	f013 0f02 	tst.w	r3, #2
 8013eda:	bf14      	ite	ne
 8013edc:	2002      	movne	r0, #2
 8013ede:	2001      	moveq	r0, #1
 8013ee0:	b00b      	add	sp, #44	; 0x2c
 8013ee2:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ee6:	bf00      	nop

08013ee8 <read_submessage_get_info>:
 8013ee8:	b570      	push	{r4, r5, r6, lr}
 8013eea:	2500      	movs	r5, #0
 8013eec:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8013ef0:	4604      	mov	r4, r0
 8013ef2:	f44f 7224 	mov.w	r2, #656	; 0x290
 8013ef6:	460e      	mov	r6, r1
 8013ef8:	a810      	add	r0, sp, #64	; 0x40
 8013efa:	4629      	mov	r1, r5
 8013efc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8013f00:	f007 fb38 	bl	801b574 <memset>
 8013f04:	a903      	add	r1, sp, #12
 8013f06:	4630      	mov	r0, r6
 8013f08:	f002 f94a 	bl	80161a0 <uxr_deserialize_GET_INFO_Payload>
 8013f0c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013f10:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013f14:	4620      	mov	r0, r4
 8013f16:	f000 ffe5 	bl	8014ee4 <uxr_session_header_offset>
 8013f1a:	462b      	mov	r3, r5
 8013f1c:	9000      	str	r0, [sp, #0]
 8013f1e:	220c      	movs	r2, #12
 8013f20:	a905      	add	r1, sp, #20
 8013f22:	a808      	add	r0, sp, #32
 8013f24:	f7ff fd02 	bl	801392c <ucdr_init_buffer_origin_offset>
 8013f28:	a910      	add	r1, sp, #64	; 0x40
 8013f2a:	a808      	add	r0, sp, #32
 8013f2c:	f002 f9aa 	bl	8016284 <uxr_serialize_INFO_Payload>
 8013f30:	9b08      	ldr	r3, [sp, #32]
 8013f32:	462a      	mov	r2, r5
 8013f34:	4629      	mov	r1, r5
 8013f36:	4620      	mov	r0, r4
 8013f38:	f000 ff7e 	bl	8014e38 <uxr_stamp_session_header>
 8013f3c:	a808      	add	r0, sp, #32
 8013f3e:	f7ff fd33 	bl	80139a8 <ucdr_buffer_length>
 8013f42:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013f44:	4602      	mov	r2, r0
 8013f46:	a905      	add	r1, sp, #20
 8013f48:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013f4c:	47a0      	blx	r4
 8013f4e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8013f52:	bd70      	pop	{r4, r5, r6, pc}

08013f54 <write_submessage_acknack.isra.0>:
 8013f54:	b570      	push	{r4, r5, r6, lr}
 8013f56:	b092      	sub	sp, #72	; 0x48
 8013f58:	4605      	mov	r5, r0
 8013f5a:	460e      	mov	r6, r1
 8013f5c:	4614      	mov	r4, r2
 8013f5e:	f000 ffc1 	bl	8014ee4 <uxr_session_header_offset>
 8013f62:	a905      	add	r1, sp, #20
 8013f64:	9000      	str	r0, [sp, #0]
 8013f66:	2300      	movs	r3, #0
 8013f68:	a80a      	add	r0, sp, #40	; 0x28
 8013f6a:	2211      	movs	r2, #17
 8013f6c:	f7ff fcde 	bl	801392c <ucdr_init_buffer_origin_offset>
 8013f70:	2218      	movs	r2, #24
 8013f72:	fb02 5404 	mla	r4, r2, r4, r5
 8013f76:	2300      	movs	r3, #0
 8013f78:	2205      	movs	r2, #5
 8013f7a:	3450      	adds	r4, #80	; 0x50
 8013f7c:	210a      	movs	r1, #10
 8013f7e:	a80a      	add	r0, sp, #40	; 0x28
 8013f80:	f001 f920 	bl	80151c4 <uxr_buffer_submessage_header>
 8013f84:	a903      	add	r1, sp, #12
 8013f86:	4620      	mov	r0, r4
 8013f88:	f005 fadc 	bl	8019544 <uxr_compute_acknack>
 8013f8c:	ba40      	rev16	r0, r0
 8013f8e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8013f92:	a903      	add	r1, sp, #12
 8013f94:	a80a      	add	r0, sp, #40	; 0x28
 8013f96:	f88d 6010 	strb.w	r6, [sp, #16]
 8013f9a:	f002 f9e3 	bl	8016364 <uxr_serialize_ACKNACK_Payload>
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fa2:	4611      	mov	r1, r2
 8013fa4:	4628      	mov	r0, r5
 8013fa6:	f000 ff47 	bl	8014e38 <uxr_stamp_session_header>
 8013faa:	a80a      	add	r0, sp, #40	; 0x28
 8013fac:	f7ff fcfc 	bl	80139a8 <ucdr_buffer_length>
 8013fb0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8013fb2:	4602      	mov	r2, r0
 8013fb4:	a905      	add	r1, sp, #20
 8013fb6:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013fba:	47a0      	blx	r4
 8013fbc:	b012      	add	sp, #72	; 0x48
 8013fbe:	bd70      	pop	{r4, r5, r6, pc}

08013fc0 <uxr_init_session>:
 8013fc0:	b510      	push	{r4, lr}
 8013fc2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8013ff8 <uxr_init_session+0x38>
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8013fcc:	4604      	mov	r4, r0
 8013fce:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8013fd2:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8013fd6:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8013fda:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8013fde:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8013fe2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8013fe6:	2181      	movs	r1, #129	; 0x81
 8013fe8:	f000 fe92 	bl	8014d10 <uxr_init_session_info>
 8013fec:	f104 0008 	add.w	r0, r4, #8
 8013ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ff4:	f001 b802 	b.w	8014ffc <uxr_init_stream_storage>
	...

08014000 <uxr_set_status_callback>:
 8014000:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8014004:	4770      	bx	lr
 8014006:	bf00      	nop

08014008 <uxr_set_topic_callback>:
 8014008:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 801400c:	4770      	bx	lr
 801400e:	bf00      	nop

08014010 <uxr_set_request_callback>:
 8014010:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8014014:	4770      	bx	lr
 8014016:	bf00      	nop

08014018 <uxr_set_reply_callback>:
 8014018:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801401c:	4770      	bx	lr
 801401e:	bf00      	nop

08014020 <uxr_create_output_best_effort_stream>:
 8014020:	b510      	push	{r4, lr}
 8014022:	b084      	sub	sp, #16
 8014024:	e9cd 2100 	strd	r2, r1, [sp]
 8014028:	4604      	mov	r4, r0
 801402a:	f000 ff5b 	bl	8014ee4 <uxr_session_header_offset>
 801402e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8014032:	4603      	mov	r3, r0
 8014034:	f104 0008 	add.w	r0, r4, #8
 8014038:	b004      	add	sp, #16
 801403a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801403e:	f001 b827 	b.w	8015090 <uxr_add_output_best_effort_buffer>
 8014042:	bf00      	nop

08014044 <uxr_create_output_reliable_stream>:
 8014044:	b510      	push	{r4, lr}
 8014046:	b088      	sub	sp, #32
 8014048:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801404c:	4604      	mov	r4, r0
 801404e:	9303      	str	r3, [sp, #12]
 8014050:	f000 ff48 	bl	8014ee4 <uxr_session_header_offset>
 8014054:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8014058:	9000      	str	r0, [sp, #0]
 801405a:	9905      	ldr	r1, [sp, #20]
 801405c:	f104 0008 	add.w	r0, r4, #8
 8014060:	f001 f82a 	bl	80150b8 <uxr_add_output_reliable_buffer>
 8014064:	2200      	movs	r2, #0
 8014066:	b2c3      	uxtb	r3, r0
 8014068:	f363 0207 	bfi	r2, r3, #0, #8
 801406c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014070:	f363 220f 	bfi	r2, r3, #8, #8
 8014074:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8014078:	f363 4217 	bfi	r2, r3, #16, #8
 801407c:	0e03      	lsrs	r3, r0, #24
 801407e:	f363 621f 	bfi	r2, r3, #24, #8
 8014082:	4610      	mov	r0, r2
 8014084:	b008      	add	sp, #32
 8014086:	bd10      	pop	{r4, pc}

08014088 <uxr_create_input_best_effort_stream>:
 8014088:	b082      	sub	sp, #8
 801408a:	3008      	adds	r0, #8
 801408c:	b002      	add	sp, #8
 801408e:	f001 b82d 	b.w	80150ec <uxr_add_input_best_effort_buffer>
 8014092:	bf00      	nop

08014094 <uxr_create_input_reliable_stream>:
 8014094:	b510      	push	{r4, lr}
 8014096:	b084      	sub	sp, #16
 8014098:	4c0b      	ldr	r4, [pc, #44]	; (80140c8 <uxr_create_input_reliable_stream+0x34>)
 801409a:	9400      	str	r4, [sp, #0]
 801409c:	3008      	adds	r0, #8
 801409e:	f001 f83b 	bl	8015118 <uxr_add_input_reliable_buffer>
 80140a2:	2200      	movs	r2, #0
 80140a4:	b2c3      	uxtb	r3, r0
 80140a6:	f363 0207 	bfi	r2, r3, #0, #8
 80140aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80140ae:	f363 220f 	bfi	r2, r3, #8, #8
 80140b2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80140b6:	f363 4217 	bfi	r2, r3, #16, #8
 80140ba:	0e03      	lsrs	r3, r0, #24
 80140bc:	f363 621f 	bfi	r2, r3, #24, #8
 80140c0:	4610      	mov	r0, r2
 80140c2:	b004      	add	sp, #16
 80140c4:	bd10      	pop	{r4, pc}
 80140c6:	bf00      	nop
 80140c8:	08013ea5 	.word	0x08013ea5

080140cc <uxr_epoch_nanos>:
 80140cc:	b510      	push	{r4, lr}
 80140ce:	4604      	mov	r4, r0
 80140d0:	f001 f8d8 	bl	8015284 <uxr_nanos>
 80140d4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80140d8:	1ac0      	subs	r0, r0, r3
 80140da:	eb61 0102 	sbc.w	r1, r1, r2
 80140de:	bd10      	pop	{r4, pc}

080140e0 <uxr_flash_output_streams>:
 80140e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140e4:	7e03      	ldrb	r3, [r0, #24]
 80140e6:	b084      	sub	sp, #16
 80140e8:	4604      	mov	r4, r0
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d035      	beq.n	801415a <uxr_flash_output_streams+0x7a>
 80140ee:	f04f 0900 	mov.w	r9, #0
 80140f2:	4648      	mov	r0, r9
 80140f4:	f10d 0802 	add.w	r8, sp, #2
 80140f8:	af03      	add	r7, sp, #12
 80140fa:	ae02      	add	r6, sp, #8
 80140fc:	e006      	b.n	801410c <uxr_flash_output_streams+0x2c>
 80140fe:	7e23      	ldrb	r3, [r4, #24]
 8014100:	f109 0901 	add.w	r9, r9, #1
 8014104:	fa5f f089 	uxtb.w	r0, r9
 8014108:	4283      	cmp	r3, r0
 801410a:	d926      	bls.n	801415a <uxr_flash_output_streams+0x7a>
 801410c:	2201      	movs	r2, #1
 801410e:	4611      	mov	r1, r2
 8014110:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8014114:	f000 ff1e 	bl	8014f54 <uxr_stream_id>
 8014118:	3508      	adds	r5, #8
 801411a:	4684      	mov	ip, r0
 801411c:	4643      	mov	r3, r8
 801411e:	463a      	mov	r2, r7
 8014120:	4631      	mov	r1, r6
 8014122:	4628      	mov	r0, r5
 8014124:	f8cd c004 	str.w	ip, [sp, #4]
 8014128:	f005 fa92 	bl	8019650 <uxr_prepare_best_effort_buffer_to_send>
 801412c:	2800      	cmp	r0, #0
 801412e:	d0e6      	beq.n	80140fe <uxr_flash_output_streams+0x1e>
 8014130:	9b02      	ldr	r3, [sp, #8]
 8014132:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014136:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801413a:	4620      	mov	r0, r4
 801413c:	f000 fe7c 	bl	8014e38 <uxr_stamp_session_header>
 8014140:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014142:	9a03      	ldr	r2, [sp, #12]
 8014144:	685d      	ldr	r5, [r3, #4]
 8014146:	6818      	ldr	r0, [r3, #0]
 8014148:	9902      	ldr	r1, [sp, #8]
 801414a:	47a8      	blx	r5
 801414c:	f109 0901 	add.w	r9, r9, #1
 8014150:	7e23      	ldrb	r3, [r4, #24]
 8014152:	fa5f f089 	uxtb.w	r0, r9
 8014156:	4283      	cmp	r3, r0
 8014158:	d8d8      	bhi.n	801410c <uxr_flash_output_streams+0x2c>
 801415a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801415e:	b38b      	cbz	r3, 80141c4 <uxr_flash_output_streams+0xe4>
 8014160:	f04f 0900 	mov.w	r9, #0
 8014164:	f10d 0802 	add.w	r8, sp, #2
 8014168:	af03      	add	r7, sp, #12
 801416a:	ae02      	add	r6, sp, #8
 801416c:	4648      	mov	r0, r9
 801416e:	2201      	movs	r2, #1
 8014170:	2102      	movs	r1, #2
 8014172:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8014176:	f000 feed 	bl	8014f54 <uxr_stream_id>
 801417a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801417e:	3520      	adds	r5, #32
 8014180:	9001      	str	r0, [sp, #4]
 8014182:	e00d      	b.n	80141a0 <uxr_flash_output_streams+0xc0>
 8014184:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014188:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801418c:	9b02      	ldr	r3, [sp, #8]
 801418e:	f000 fe53 	bl	8014e38 <uxr_stamp_session_header>
 8014192:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014194:	9a03      	ldr	r2, [sp, #12]
 8014196:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801419a:	9902      	ldr	r1, [sp, #8]
 801419c:	6818      	ldr	r0, [r3, #0]
 801419e:	47d0      	blx	sl
 80141a0:	4643      	mov	r3, r8
 80141a2:	463a      	mov	r2, r7
 80141a4:	4631      	mov	r1, r6
 80141a6:	4628      	mov	r0, r5
 80141a8:	f005 fc5e 	bl	8019a68 <uxr_prepare_next_reliable_buffer_to_send>
 80141ac:	4603      	mov	r3, r0
 80141ae:	4620      	mov	r0, r4
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d1e7      	bne.n	8014184 <uxr_flash_output_streams+0xa4>
 80141b4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80141b8:	f109 0901 	add.w	r9, r9, #1
 80141bc:	fa5f f089 	uxtb.w	r0, r9
 80141c0:	4283      	cmp	r3, r0
 80141c2:	d8d4      	bhi.n	801416e <uxr_flash_output_streams+0x8e>
 80141c4:	b004      	add	sp, #16
 80141c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141ca:	bf00      	nop

080141cc <read_submessage_info>:
 80141cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141d0:	460d      	mov	r5, r1
 80141d2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80141d6:	4669      	mov	r1, sp
 80141d8:	4607      	mov	r7, r0
 80141da:	4628      	mov	r0, r5
 80141dc:	f001 feee 	bl	8015fbc <uxr_deserialize_BaseObjectReply>
 80141e0:	a902      	add	r1, sp, #8
 80141e2:	4604      	mov	r4, r0
 80141e4:	4628      	mov	r0, r5
 80141e6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80141ea:	f7fd fcc9 	bl	8011b80 <ucdr_deserialize_bool>
 80141ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80141f2:	4004      	ands	r4, r0
 80141f4:	b2e4      	uxtb	r4, r4
 80141f6:	b95b      	cbnz	r3, 8014210 <read_submessage_info+0x44>
 80141f8:	a987      	add	r1, sp, #540	; 0x21c
 80141fa:	4628      	mov	r0, r5
 80141fc:	f7fd fcc0 	bl	8011b80 <ucdr_deserialize_bool>
 8014200:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8014204:	4606      	mov	r6, r0
 8014206:	b94b      	cbnz	r3, 801421c <read_submessage_info+0x50>
 8014208:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 801420c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014210:	a903      	add	r1, sp, #12
 8014212:	4628      	mov	r0, r5
 8014214:	f001 fd7a 	bl	8015d0c <uxr_deserialize_ObjectVariant>
 8014218:	4004      	ands	r4, r0
 801421a:	e7ed      	b.n	80141f8 <read_submessage_info+0x2c>
 801421c:	a988      	add	r1, sp, #544	; 0x220
 801421e:	4628      	mov	r0, r5
 8014220:	f7fd fcdc 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8014224:	4234      	tst	r4, r6
 8014226:	d0ef      	beq.n	8014208 <read_submessage_info+0x3c>
 8014228:	2800      	cmp	r0, #0
 801422a:	d0ed      	beq.n	8014208 <read_submessage_info+0x3c>
 801422c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8014230:	2b0d      	cmp	r3, #13
 8014232:	d1e9      	bne.n	8014208 <read_submessage_info+0x3c>
 8014234:	a98a      	add	r1, sp, #552	; 0x228
 8014236:	4628      	mov	r0, r5
 8014238:	f7fe fa76 	bl	8012728 <ucdr_deserialize_int16_t>
 801423c:	b140      	cbz	r0, 8014250 <read_submessage_info+0x84>
 801423e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8014242:	2b00      	cmp	r3, #0
 8014244:	dd07      	ble.n	8014256 <read_submessage_info+0x8a>
 8014246:	f1b8 0f00 	cmp.w	r8, #0
 801424a:	bf14      	ite	ne
 801424c:	2001      	movne	r0, #1
 801424e:	2002      	moveq	r0, #2
 8014250:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 8014254:	e7d8      	b.n	8014208 <read_submessage_info+0x3c>
 8014256:	2000      	movs	r0, #0
 8014258:	e7fa      	b.n	8014250 <read_submessage_info+0x84>
 801425a:	bf00      	nop

0801425c <read_submessage_list>:
 801425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014260:	b097      	sub	sp, #92	; 0x5c
 8014262:	4ec1      	ldr	r6, [pc, #772]	; (8014568 <read_submessage_list+0x30c>)
 8014264:	9209      	str	r2, [sp, #36]	; 0x24
 8014266:	4604      	mov	r4, r0
 8014268:	460d      	mov	r5, r1
 801426a:	f04f 0801 	mov.w	r8, #1
 801426e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8014272:	aa0c      	add	r2, sp, #48	; 0x30
 8014274:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8014278:	4628      	mov	r0, r5
 801427a:	f000 ffbd 	bl	80151f8 <uxr_read_submessage_header>
 801427e:	2800      	cmp	r0, #0
 8014280:	f000 813e 	beq.w	8014500 <read_submessage_list+0x2a4>
 8014284:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8014288:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 801428c:	3b02      	subs	r3, #2
 801428e:	2b0d      	cmp	r3, #13
 8014290:	d8ed      	bhi.n	801426e <read_submessage_list+0x12>
 8014292:	a101      	add	r1, pc, #4	; (adr r1, 8014298 <read_submessage_list+0x3c>)
 8014294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014298:	080144f7 	.word	0x080144f7
 801429c:	0801426f 	.word	0x0801426f
 80142a0:	080144e7 	.word	0x080144e7
 80142a4:	08014485 	.word	0x08014485
 80142a8:	0801447b 	.word	0x0801447b
 80142ac:	0801426f 	.word	0x0801426f
 80142b0:	0801426f 	.word	0x0801426f
 80142b4:	080143db 	.word	0x080143db
 80142b8:	0801436b 	.word	0x0801436b
 80142bc:	0801432b 	.word	0x0801432b
 80142c0:	0801426f 	.word	0x0801426f
 80142c4:	0801426f 	.word	0x0801426f
 80142c8:	0801426f 	.word	0x0801426f
 80142cc:	080142d1 	.word	0x080142d1
 80142d0:	a910      	add	r1, sp, #64	; 0x40
 80142d2:	4628      	mov	r0, r5
 80142d4:	f002 f896 	bl	8016404 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80142d8:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 80142dc:	f1b9 0f00 	cmp.w	r9, #0
 80142e0:	f000 8116 	beq.w	8014510 <read_submessage_list+0x2b4>
 80142e4:	f000 ffce 	bl	8015284 <uxr_nanos>
 80142e8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80142ea:	4602      	mov	r2, r0
 80142ec:	460b      	mov	r3, r1
 80142ee:	9814      	ldr	r0, [sp, #80]	; 0x50
 80142f0:	2100      	movs	r1, #0
 80142f2:	468c      	mov	ip, r1
 80142f4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80142f8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80142fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80142fe:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014300:	468c      	mov	ip, r1
 8014302:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8014306:	46e2      	mov	sl, ip
 8014308:	46bc      	mov	ip, r7
 801430a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 801430e:	fbc0 7106 	smlal	r7, r1, r0, r6
 8014312:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8014316:	e9cd 7100 	strd	r7, r1, [sp]
 801431a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801431e:	9106      	str	r1, [sp, #24]
 8014320:	4620      	mov	r0, r4
 8014322:	47c8      	blx	r9
 8014324:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 8014328:	e7a1      	b.n	801426e <read_submessage_list+0x12>
 801432a:	a910      	add	r1, sp, #64	; 0x40
 801432c:	4628      	mov	r0, r5
 801432e:	f002 f857 	bl	80163e0 <uxr_deserialize_HEARTBEAT_Payload>
 8014332:	2100      	movs	r1, #0
 8014334:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8014338:	f000 fe36 	bl	8014fa8 <uxr_stream_id_from_raw>
 801433c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8014340:	900f      	str	r0, [sp, #60]	; 0x3c
 8014342:	4639      	mov	r1, r7
 8014344:	f104 0008 	add.w	r0, r4, #8
 8014348:	f000 ff1c 	bl	8015184 <uxr_get_input_reliable_stream>
 801434c:	2800      	cmp	r0, #0
 801434e:	d08e      	beq.n	801426e <read_submessage_list+0x12>
 8014350:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8014354:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8014358:	f005 f8e8 	bl	801952c <uxr_process_heartbeat>
 801435c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8014360:	463a      	mov	r2, r7
 8014362:	4620      	mov	r0, r4
 8014364:	f7ff fdf6 	bl	8013f54 <write_submessage_acknack.isra.0>
 8014368:	e781      	b.n	801426e <read_submessage_list+0x12>
 801436a:	a910      	add	r1, sp, #64	; 0x40
 801436c:	4628      	mov	r0, r5
 801436e:	f002 f80f 	bl	8016390 <uxr_deserialize_ACKNACK_Payload>
 8014372:	2100      	movs	r1, #0
 8014374:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8014378:	f000 fe16 	bl	8014fa8 <uxr_stream_id_from_raw>
 801437c:	900d      	str	r0, [sp, #52]	; 0x34
 801437e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8014382:	f104 0008 	add.w	r0, r4, #8
 8014386:	f000 fee9 	bl	801515c <uxr_get_output_reliable_stream>
 801438a:	4607      	mov	r7, r0
 801438c:	2800      	cmp	r0, #0
 801438e:	f43f af6e 	beq.w	801426e <read_submessage_list+0x12>
 8014392:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8014396:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 801439a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801439e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80143a2:	b289      	uxth	r1, r1
 80143a4:	f005 fc0a 	bl	8019bbc <uxr_process_acknack>
 80143a8:	4638      	mov	r0, r7
 80143aa:	f005 fbc7 	bl	8019b3c <uxr_begin_output_nack_buffer_it>
 80143ae:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80143b2:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 80143b6:	e006      	b.n	80143c6 <read_submessage_list+0x16a>
 80143b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80143ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80143bc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80143c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80143c2:	6818      	ldr	r0, [r3, #0]
 80143c4:	47c8      	blx	r9
 80143c6:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 80143ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80143cc:	4651      	mov	r1, sl
 80143ce:	4638      	mov	r0, r7
 80143d0:	f005 fbb6 	bl	8019b40 <uxr_next_reliable_nack_buffer_to_send>
 80143d4:	2800      	cmp	r0, #0
 80143d6:	d1ef      	bne.n	80143b8 <read_submessage_list+0x15c>
 80143d8:	e749      	b.n	801426e <read_submessage_list+0x12>
 80143da:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80143de:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 80143e2:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80143e6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80143ea:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80143ee:	4651      	mov	r1, sl
 80143f0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80143f4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 80143f8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 80143fc:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8014400:	4628      	mov	r0, r5
 8014402:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8014406:	f001 fd23 	bl	8015e50 <uxr_deserialize_BaseObjectRequest>
 801440a:	4650      	mov	r0, sl
 801440c:	a90f      	add	r1, sp, #60	; 0x3c
 801440e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8014412:	f000 fd8d 	bl	8014f30 <uxr_parse_base_object_request>
 8014416:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 801441a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801441c:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8014420:	9110      	str	r1, [sp, #64]	; 0x40
 8014422:	3f04      	subs	r7, #4
 8014424:	f009 090e 	and.w	r9, r9, #14
 8014428:	b2bf      	uxth	r7, r7
 801442a:	f1bb 0f00 	cmp.w	fp, #0
 801442e:	d006      	beq.n	801443e <read_submessage_list+0x1e2>
 8014430:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8014434:	9300      	str	r3, [sp, #0]
 8014436:	4652      	mov	r2, sl
 8014438:	2300      	movs	r3, #0
 801443a:	4620      	mov	r0, r4
 801443c:	47d8      	blx	fp
 801443e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8014440:	b16a      	cbz	r2, 801445e <read_submessage_list+0x202>
 8014442:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8014444:	2100      	movs	r1, #0
 8014446:	3802      	subs	r0, #2
 8014448:	e002      	b.n	8014450 <read_submessage_list+0x1f4>
 801444a:	3101      	adds	r1, #1
 801444c:	4291      	cmp	r1, r2
 801444e:	d006      	beq.n	801445e <read_submessage_list+0x202>
 8014450:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8014454:	4553      	cmp	r3, sl
 8014456:	d1f8      	bne.n	801444a <read_submessage_list+0x1ee>
 8014458:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801445a:	2200      	movs	r2, #0
 801445c:	545a      	strb	r2, [r3, r1]
 801445e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8014462:	9102      	str	r1, [sp, #8]
 8014464:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014466:	9101      	str	r1, [sp, #4]
 8014468:	990d      	ldr	r1, [sp, #52]	; 0x34
 801446a:	9100      	str	r1, [sp, #0]
 801446c:	464b      	mov	r3, r9
 801446e:	463a      	mov	r2, r7
 8014470:	4629      	mov	r1, r5
 8014472:	4620      	mov	r0, r4
 8014474:	f005 fc26 	bl	8019cc4 <read_submessage_format>
 8014478:	e6f9      	b.n	801426e <read_submessage_list+0x12>
 801447a:	4629      	mov	r1, r5
 801447c:	4620      	mov	r0, r4
 801447e:	f7ff fea5 	bl	80141cc <read_submessage_info>
 8014482:	e6f4      	b.n	801426e <read_submessage_list+0x12>
 8014484:	2a00      	cmp	r2, #0
 8014486:	d03e      	beq.n	8014506 <read_submessage_list+0x2aa>
 8014488:	a910      	add	r1, sp, #64	; 0x40
 801448a:	4628      	mov	r0, r5
 801448c:	f001 fedc 	bl	8016248 <uxr_deserialize_STATUS_Payload>
 8014490:	a90e      	add	r1, sp, #56	; 0x38
 8014492:	aa0d      	add	r2, sp, #52	; 0x34
 8014494:	a810      	add	r0, sp, #64	; 0x40
 8014496:	f000 fd4b 	bl	8014f30 <uxr_parse_base_object_request>
 801449a:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 801449e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80144a0:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 80144a4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 80144a8:	910f      	str	r1, [sp, #60]	; 0x3c
 80144aa:	f1ba 0f00 	cmp.w	sl, #0
 80144ae:	d006      	beq.n	80144be <read_submessage_list+0x262>
 80144b0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80144b4:	9300      	str	r3, [sp, #0]
 80144b6:	463a      	mov	r2, r7
 80144b8:	464b      	mov	r3, r9
 80144ba:	4620      	mov	r0, r4
 80144bc:	47d0      	blx	sl
 80144be:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80144c0:	2a00      	cmp	r2, #0
 80144c2:	f43f aed4 	beq.w	801426e <read_submessage_list+0x12>
 80144c6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80144c8:	2100      	movs	r1, #0
 80144ca:	3802      	subs	r0, #2
 80144cc:	e003      	b.n	80144d6 <read_submessage_list+0x27a>
 80144ce:	3101      	adds	r1, #1
 80144d0:	4291      	cmp	r1, r2
 80144d2:	f43f aecc 	beq.w	801426e <read_submessage_list+0x12>
 80144d6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80144da:	42bb      	cmp	r3, r7
 80144dc:	d1f7      	bne.n	80144ce <read_submessage_list+0x272>
 80144de:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80144e0:	f803 9001 	strb.w	r9, [r3, r1]
 80144e4:	e6c3      	b.n	801426e <read_submessage_list+0x12>
 80144e6:	2a00      	cmp	r2, #0
 80144e8:	f47f aec1 	bne.w	801426e <read_submessage_list+0x12>
 80144ec:	4629      	mov	r1, r5
 80144ee:	4620      	mov	r0, r4
 80144f0:	f000 fc64 	bl	8014dbc <uxr_read_create_session_status>
 80144f4:	e6bb      	b.n	801426e <read_submessage_list+0x12>
 80144f6:	4629      	mov	r1, r5
 80144f8:	4620      	mov	r0, r4
 80144fa:	f7ff fcf5 	bl	8013ee8 <read_submessage_get_info>
 80144fe:	e6b6      	b.n	801426e <read_submessage_list+0x12>
 8014500:	b017      	add	sp, #92	; 0x5c
 8014502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014506:	4629      	mov	r1, r5
 8014508:	4620      	mov	r0, r4
 801450a:	f000 fc63 	bl	8014dd4 <uxr_read_delete_session_status>
 801450e:	e6ae      	b.n	801426e <read_submessage_list+0x12>
 8014510:	f000 feb8 	bl	8015284 <uxr_nanos>
 8014514:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014516:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014518:	464f      	mov	r7, r9
 801451a:	fbc3 2706 	smlal	r2, r7, r3, r6
 801451e:	1812      	adds	r2, r2, r0
 8014520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014522:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014524:	eb47 0101 	adc.w	r1, r7, r1
 8014528:	464f      	mov	r7, r9
 801452a:	fbc3 0706 	smlal	r0, r7, r3, r6
 801452e:	463b      	mov	r3, r7
 8014530:	4684      	mov	ip, r0
 8014532:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8014536:	fbc7 0906 	smlal	r0, r9, r7, r6
 801453a:	eb1c 0c00 	adds.w	ip, ip, r0
 801453e:	464f      	mov	r7, r9
 8014540:	eb43 0307 	adc.w	r3, r3, r7
 8014544:	ebb2 0c0c 	subs.w	ip, r2, ip
 8014548:	eb61 0303 	sbc.w	r3, r1, r3
 801454c:	0fda      	lsrs	r2, r3, #31
 801454e:	eb12 020c 	adds.w	r2, r2, ip
 8014552:	f143 0300 	adc.w	r3, r3, #0
 8014556:	0852      	lsrs	r2, r2, #1
 8014558:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 801455c:	105b      	asrs	r3, r3, #1
 801455e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 8014562:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8014566:	e6dd      	b.n	8014324 <read_submessage_list+0xc8>
 8014568:	3b9aca00 	.word	0x3b9aca00

0801456c <listen_message_reliably>:
 801456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014570:	1e0b      	subs	r3, r1, #0
 8014572:	b09d      	sub	sp, #116	; 0x74
 8014574:	bfb8      	it	lt
 8014576:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801457a:	4680      	mov	r8, r0
 801457c:	9305      	str	r3, [sp, #20]
 801457e:	f000 fe67 	bl	8015250 <uxr_millis>
 8014582:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8014586:	4681      	mov	r9, r0
 8014588:	2a00      	cmp	r2, #0
 801458a:	f000 80a1 	beq.w	80146d0 <listen_message_reliably+0x164>
 801458e:	2600      	movs	r6, #0
 8014590:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014594:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8014598:	9303      	str	r3, [sp, #12]
 801459a:	4630      	mov	r0, r6
 801459c:	460f      	mov	r7, r1
 801459e:	e00f      	b.n	80145c0 <listen_message_reliably+0x54>
 80145a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80145a4:	9903      	ldr	r1, [sp, #12]
 80145a6:	455a      	cmp	r2, fp
 80145a8:	f106 0601 	add.w	r6, r6, #1
 80145ac:	eb73 0101 	sbcs.w	r1, r3, r1
 80145b0:	b2f0      	uxtb	r0, r6
 80145b2:	da01      	bge.n	80145b8 <listen_message_reliably+0x4c>
 80145b4:	4693      	mov	fp, r2
 80145b6:	9303      	str	r3, [sp, #12]
 80145b8:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80145bc:	4283      	cmp	r3, r0
 80145be:	d960      	bls.n	8014682 <listen_message_reliably+0x116>
 80145c0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80145c4:	2102      	movs	r1, #2
 80145c6:	2201      	movs	r2, #1
 80145c8:	f000 fcc4 	bl	8014f54 <uxr_stream_id>
 80145cc:	00e4      	lsls	r4, r4, #3
 80145ce:	f104 0520 	add.w	r5, r4, #32
 80145d2:	4445      	add	r5, r8
 80145d4:	4601      	mov	r1, r0
 80145d6:	463b      	mov	r3, r7
 80145d8:	464a      	mov	r2, r9
 80145da:	4628      	mov	r0, r5
 80145dc:	9109      	str	r1, [sp, #36]	; 0x24
 80145de:	f005 fa83 	bl	8019ae8 <uxr_update_output_stream_heartbeat_timestamp>
 80145e2:	eb08 0304 	add.w	r3, r8, r4
 80145e6:	2800      	cmp	r0, #0
 80145e8:	d0da      	beq.n	80145a0 <listen_message_reliably+0x34>
 80145ea:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80145ee:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80145f2:	9304      	str	r3, [sp, #16]
 80145f4:	4640      	mov	r0, r8
 80145f6:	f000 fc75 	bl	8014ee4 <uxr_session_header_offset>
 80145fa:	3501      	adds	r5, #1
 80145fc:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8014600:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014604:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8014608:	2300      	movs	r3, #0
 801460a:	2211      	movs	r2, #17
 801460c:	9000      	str	r0, [sp, #0]
 801460e:	a90c      	add	r1, sp, #48	; 0x30
 8014610:	4650      	mov	r0, sl
 8014612:	f7ff f98b 	bl	801392c <ucdr_init_buffer_origin_offset>
 8014616:	2300      	movs	r3, #0
 8014618:	2205      	movs	r2, #5
 801461a:	210b      	movs	r1, #11
 801461c:	4650      	mov	r0, sl
 801461e:	f000 fdd1 	bl	80151c4 <uxr_buffer_submessage_header>
 8014622:	8968      	ldrh	r0, [r5, #10]
 8014624:	2101      	movs	r1, #1
 8014626:	f005 fc17 	bl	8019e58 <uxr_seq_num_add>
 801462a:	892b      	ldrh	r3, [r5, #8]
 801462c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8014630:	4602      	mov	r2, r0
 8014632:	9b04      	ldr	r3, [sp, #16]
 8014634:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8014638:	a90a      	add	r1, sp, #40	; 0x28
 801463a:	4650      	mov	r0, sl
 801463c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8014640:	f001 feba 	bl	80163b8 <uxr_serialize_HEARTBEAT_Payload>
 8014644:	2200      	movs	r2, #0
 8014646:	4611      	mov	r1, r2
 8014648:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801464a:	4640      	mov	r0, r8
 801464c:	f000 fbf4 	bl	8014e38 <uxr_stamp_session_header>
 8014650:	4650      	mov	r0, sl
 8014652:	f7ff f9a9 	bl	80139a8 <ucdr_buffer_length>
 8014656:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 801465a:	4602      	mov	r2, r0
 801465c:	a90c      	add	r1, sp, #48	; 0x30
 801465e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014662:	4444      	add	r4, r8
 8014664:	47a8      	blx	r5
 8014666:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801466a:	9903      	ldr	r1, [sp, #12]
 801466c:	455a      	cmp	r2, fp
 801466e:	f106 0601 	add.w	r6, r6, #1
 8014672:	eb73 0101 	sbcs.w	r1, r3, r1
 8014676:	b2f0      	uxtb	r0, r6
 8014678:	db9c      	blt.n	80145b4 <listen_message_reliably+0x48>
 801467a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801467e:	4283      	cmp	r3, r0
 8014680:	d89e      	bhi.n	80145c0 <listen_message_reliably+0x54>
 8014682:	9a03      	ldr	r2, [sp, #12]
 8014684:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014688:	429a      	cmp	r2, r3
 801468a:	bf08      	it	eq
 801468c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8014690:	d01e      	beq.n	80146d0 <listen_message_reliably+0x164>
 8014692:	ebab 0309 	sub.w	r3, fp, r9
 8014696:	9905      	ldr	r1, [sp, #20]
 8014698:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 801469c:	2b00      	cmp	r3, #0
 801469e:	bf08      	it	eq
 80146a0:	2301      	moveq	r3, #1
 80146a2:	4299      	cmp	r1, r3
 80146a4:	bfa8      	it	ge
 80146a6:	4619      	movge	r1, r3
 80146a8:	6894      	ldr	r4, [r2, #8]
 80146aa:	6810      	ldr	r0, [r2, #0]
 80146ac:	4689      	mov	r9, r1
 80146ae:	460b      	mov	r3, r1
 80146b0:	aa08      	add	r2, sp, #32
 80146b2:	a907      	add	r1, sp, #28
 80146b4:	47a0      	blx	r4
 80146b6:	b968      	cbnz	r0, 80146d4 <listen_message_reliably+0x168>
 80146b8:	9b05      	ldr	r3, [sp, #20]
 80146ba:	eba3 0309 	sub.w	r3, r3, r9
 80146be:	2b00      	cmp	r3, #0
 80146c0:	9305      	str	r3, [sp, #20]
 80146c2:	f73f af5c 	bgt.w	801457e <listen_message_reliably+0x12>
 80146c6:	4604      	mov	r4, r0
 80146c8:	4620      	mov	r0, r4
 80146ca:	b01d      	add	sp, #116	; 0x74
 80146cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146d0:	9b05      	ldr	r3, [sp, #20]
 80146d2:	e7e0      	b.n	8014696 <listen_message_reliably+0x12a>
 80146d4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80146d8:	4604      	mov	r4, r0
 80146da:	a80c      	add	r0, sp, #48	; 0x30
 80146dc:	f7ff f938 	bl	8013950 <ucdr_init_buffer>
 80146e0:	2500      	movs	r5, #0
 80146e2:	f10d 031a 	add.w	r3, sp, #26
 80146e6:	aa06      	add	r2, sp, #24
 80146e8:	a90c      	add	r1, sp, #48	; 0x30
 80146ea:	4640      	mov	r0, r8
 80146ec:	f88d 5018 	strb.w	r5, [sp, #24]
 80146f0:	f000 fbb6 	bl	8014e60 <uxr_read_session_header>
 80146f4:	b918      	cbnz	r0, 80146fe <listen_message_reliably+0x192>
 80146f6:	4620      	mov	r0, r4
 80146f8:	b01d      	add	sp, #116	; 0x74
 80146fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146fe:	4629      	mov	r1, r5
 8014700:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014704:	f000 fc50 	bl	8014fa8 <uxr_stream_id_from_raw>
 8014708:	f3c0 4507 	ubfx	r5, r0, #16, #8
 801470c:	2d01      	cmp	r5, #1
 801470e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8014712:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8014716:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801471a:	d04b      	beq.n	80147b4 <listen_message_reliably+0x248>
 801471c:	2d02      	cmp	r5, #2
 801471e:	d00f      	beq.n	8014740 <listen_message_reliably+0x1d4>
 8014720:	2d00      	cmp	r5, #0
 8014722:	d1e8      	bne.n	80146f6 <listen_message_reliably+0x18a>
 8014724:	4629      	mov	r1, r5
 8014726:	4628      	mov	r0, r5
 8014728:	f000 fc3e 	bl	8014fa8 <uxr_stream_id_from_raw>
 801472c:	a90c      	add	r1, sp, #48	; 0x30
 801472e:	4602      	mov	r2, r0
 8014730:	4640      	mov	r0, r8
 8014732:	920a      	str	r2, [sp, #40]	; 0x28
 8014734:	f7ff fd92 	bl	801425c <read_submessage_list>
 8014738:	4620      	mov	r0, r4
 801473a:	b01d      	add	sp, #116	; 0x74
 801473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014740:	4631      	mov	r1, r6
 8014742:	f108 0008 	add.w	r0, r8, #8
 8014746:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801474a:	f000 fd1b 	bl	8015184 <uxr_get_input_reliable_stream>
 801474e:	4607      	mov	r7, r0
 8014750:	b338      	cbz	r0, 80147a2 <listen_message_reliably+0x236>
 8014752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014754:	9203      	str	r2, [sp, #12]
 8014756:	a80c      	add	r0, sp, #48	; 0x30
 8014758:	f7ff f92a 	bl	80139b0 <ucdr_buffer_remaining>
 801475c:	4603      	mov	r3, r0
 801475e:	f10d 0019 	add.w	r0, sp, #25
 8014762:	9000      	str	r0, [sp, #0]
 8014764:	9a03      	ldr	r2, [sp, #12]
 8014766:	4651      	mov	r1, sl
 8014768:	4638      	mov	r0, r7
 801476a:	f004 fde5 	bl	8019338 <uxr_receive_reliable_message>
 801476e:	b1c0      	cbz	r0, 80147a2 <listen_message_reliably+0x236>
 8014770:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014774:	b393      	cbz	r3, 80147dc <listen_message_reliably+0x270>
 8014776:	ad14      	add	r5, sp, #80	; 0x50
 8014778:	f04f 0a02 	mov.w	sl, #2
 801477c:	e00a      	b.n	8014794 <listen_message_reliably+0x228>
 801477e:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8014782:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 8014786:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801478a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801478c:	4629      	mov	r1, r5
 801478e:	4640      	mov	r0, r8
 8014790:	f7ff fd64 	bl	801425c <read_submessage_list>
 8014794:	2204      	movs	r2, #4
 8014796:	4629      	mov	r1, r5
 8014798:	4638      	mov	r0, r7
 801479a:	f004 fe4d 	bl	8019438 <uxr_next_input_reliable_buffer_available>
 801479e:	2800      	cmp	r0, #0
 80147a0:	d1ed      	bne.n	801477e <listen_message_reliably+0x212>
 80147a2:	4640      	mov	r0, r8
 80147a4:	4632      	mov	r2, r6
 80147a6:	4649      	mov	r1, r9
 80147a8:	f7ff fbd4 	bl	8013f54 <write_submessage_acknack.isra.0>
 80147ac:	4620      	mov	r0, r4
 80147ae:	b01d      	add	sp, #116	; 0x74
 80147b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147b4:	4631      	mov	r1, r6
 80147b6:	f108 0008 	add.w	r0, r8, #8
 80147ba:	f000 fcd9 	bl	8015170 <uxr_get_input_best_effort_stream>
 80147be:	2800      	cmp	r0, #0
 80147c0:	d099      	beq.n	80146f6 <listen_message_reliably+0x18a>
 80147c2:	4651      	mov	r1, sl
 80147c4:	f004 fd24 	bl	8019210 <uxr_receive_best_effort_message>
 80147c8:	2800      	cmp	r0, #0
 80147ca:	d094      	beq.n	80146f6 <listen_message_reliably+0x18a>
 80147cc:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 80147d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147d2:	a90c      	add	r1, sp, #48	; 0x30
 80147d4:	4640      	mov	r0, r8
 80147d6:	f7ff fd41 	bl	801425c <read_submessage_list>
 80147da:	e78c      	b.n	80146f6 <listen_message_reliably+0x18a>
 80147dc:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 80147e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147e2:	a90c      	add	r1, sp, #48	; 0x30
 80147e4:	4640      	mov	r0, r8
 80147e6:	f7ff fd39 	bl	801425c <read_submessage_list>
 80147ea:	e7c4      	b.n	8014776 <listen_message_reliably+0x20a>

080147ec <uxr_run_session_until_confirm_delivery>:
 80147ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147f0:	4606      	mov	r6, r0
 80147f2:	460d      	mov	r5, r1
 80147f4:	f000 fd2c 	bl	8015250 <uxr_millis>
 80147f8:	4607      	mov	r7, r0
 80147fa:	4630      	mov	r0, r6
 80147fc:	f7ff fc70 	bl	80140e0 <uxr_flash_output_streams>
 8014800:	2d00      	cmp	r5, #0
 8014802:	f106 0808 	add.w	r8, r6, #8
 8014806:	bfa8      	it	ge
 8014808:	462c      	movge	r4, r5
 801480a:	da07      	bge.n	801481c <uxr_run_session_until_confirm_delivery+0x30>
 801480c:	e00e      	b.n	801482c <uxr_run_session_until_confirm_delivery+0x40>
 801480e:	f7ff fead 	bl	801456c <listen_message_reliably>
 8014812:	f000 fd1d 	bl	8015250 <uxr_millis>
 8014816:	1bc3      	subs	r3, r0, r7
 8014818:	1aec      	subs	r4, r5, r3
 801481a:	d407      	bmi.n	801482c <uxr_run_session_until_confirm_delivery+0x40>
 801481c:	4640      	mov	r0, r8
 801481e:	f000 fcbb 	bl	8015198 <uxr_output_streams_confirmed>
 8014822:	4603      	mov	r3, r0
 8014824:	4621      	mov	r1, r4
 8014826:	4630      	mov	r0, r6
 8014828:	2b00      	cmp	r3, #0
 801482a:	d0f0      	beq.n	801480e <uxr_run_session_until_confirm_delivery+0x22>
 801482c:	4640      	mov	r0, r8
 801482e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014832:	f000 bcb1 	b.w	8015198 <uxr_output_streams_confirmed>
 8014836:	bf00      	nop

08014838 <uxr_run_session_until_all_status>:
 8014838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801483c:	9c08      	ldr	r4, [sp, #32]
 801483e:	4606      	mov	r6, r0
 8014840:	460f      	mov	r7, r1
 8014842:	4691      	mov	r9, r2
 8014844:	461d      	mov	r5, r3
 8014846:	f7ff fc4b 	bl	80140e0 <uxr_flash_output_streams>
 801484a:	b124      	cbz	r4, 8014856 <uxr_run_session_until_all_status+0x1e>
 801484c:	4622      	mov	r2, r4
 801484e:	21ff      	movs	r1, #255	; 0xff
 8014850:	4628      	mov	r0, r5
 8014852:	f006 fe8f 	bl	801b574 <memset>
 8014856:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 801485a:	67f4      	str	r4, [r6, #124]	; 0x7c
 801485c:	f000 fcf8 	bl	8015250 <uxr_millis>
 8014860:	3d01      	subs	r5, #1
 8014862:	f1a9 0902 	sub.w	r9, r9, #2
 8014866:	4680      	mov	r8, r0
 8014868:	4639      	mov	r1, r7
 801486a:	4630      	mov	r0, r6
 801486c:	f7ff fe7e 	bl	801456c <listen_message_reliably>
 8014870:	f000 fcee 	bl	8015250 <uxr_millis>
 8014874:	eba0 0008 	sub.w	r0, r0, r8
 8014878:	1a39      	subs	r1, r7, r0
 801487a:	b344      	cbz	r4, 80148ce <uxr_run_session_until_all_status+0x96>
 801487c:	4628      	mov	r0, r5
 801487e:	46ac      	mov	ip, r5
 8014880:	2301      	movs	r3, #1
 8014882:	e002      	b.n	801488a <uxr_run_session_until_all_status+0x52>
 8014884:	42a3      	cmp	r3, r4
 8014886:	d20d      	bcs.n	80148a4 <uxr_run_session_until_all_status+0x6c>
 8014888:	3301      	adds	r3, #1
 801488a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801488e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8014892:	d1f7      	bne.n	8014884 <uxr_run_session_until_all_status+0x4c>
 8014894:	42a3      	cmp	r3, r4
 8014896:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 801489a:	d213      	bcs.n	80148c4 <uxr_run_session_until_all_status+0x8c>
 801489c:	2a00      	cmp	r2, #0
 801489e:	d0f3      	beq.n	8014888 <uxr_run_session_until_all_status+0x50>
 80148a0:	2900      	cmp	r1, #0
 80148a2:	dce2      	bgt.n	801486a <uxr_run_session_until_all_status+0x32>
 80148a4:	2300      	movs	r3, #0
 80148a6:	67f3      	str	r3, [r6, #124]	; 0x7c
 80148a8:	442c      	add	r4, r5
 80148aa:	e001      	b.n	80148b0 <uxr_run_session_until_all_status+0x78>
 80148ac:	2b01      	cmp	r3, #1
 80148ae:	d812      	bhi.n	80148d6 <uxr_run_session_until_all_status+0x9e>
 80148b0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80148b4:	4284      	cmp	r4, r0
 80148b6:	d1f9      	bne.n	80148ac <uxr_run_session_until_all_status+0x74>
 80148b8:	2b01      	cmp	r3, #1
 80148ba:	bf8c      	ite	hi
 80148bc:	2000      	movhi	r0, #0
 80148be:	2001      	movls	r0, #1
 80148c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148c4:	2900      	cmp	r1, #0
 80148c6:	dded      	ble.n	80148a4 <uxr_run_session_until_all_status+0x6c>
 80148c8:	2a00      	cmp	r2, #0
 80148ca:	d1ce      	bne.n	801486a <uxr_run_session_until_all_status+0x32>
 80148cc:	e7ea      	b.n	80148a4 <uxr_run_session_until_all_status+0x6c>
 80148ce:	67f4      	str	r4, [r6, #124]	; 0x7c
 80148d0:	2001      	movs	r0, #1
 80148d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148d6:	2000      	movs	r0, #0
 80148d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080148dc <wait_session_status>:
 80148dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148e0:	4604      	mov	r4, r0
 80148e2:	b09d      	sub	sp, #116	; 0x74
 80148e4:	20ff      	movs	r0, #255	; 0xff
 80148e6:	7160      	strb	r0, [r4, #5]
 80148e8:	9303      	str	r3, [sp, #12]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	f000 80b6 	beq.w	8014a5c <wait_session_status+0x180>
 80148f0:	468a      	mov	sl, r1
 80148f2:	4691      	mov	r9, r2
 80148f4:	f04f 0b00 	mov.w	fp, #0
 80148f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80148fa:	464a      	mov	r2, r9
 80148fc:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014900:	4651      	mov	r1, sl
 8014902:	47a8      	blx	r5
 8014904:	f000 fca4 	bl	8015250 <uxr_millis>
 8014908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801490c:	4605      	mov	r5, r0
 801490e:	e009      	b.n	8014924 <wait_session_status+0x48>
 8014910:	f000 fc9e 	bl	8015250 <uxr_millis>
 8014914:	1b40      	subs	r0, r0, r5
 8014916:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 801491a:	2b00      	cmp	r3, #0
 801491c:	dd40      	ble.n	80149a0 <wait_session_status+0xc4>
 801491e:	7960      	ldrb	r0, [r4, #5]
 8014920:	28ff      	cmp	r0, #255	; 0xff
 8014922:	d145      	bne.n	80149b0 <wait_session_status+0xd4>
 8014924:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8014926:	a908      	add	r1, sp, #32
 8014928:	6896      	ldr	r6, [r2, #8]
 801492a:	6810      	ldr	r0, [r2, #0]
 801492c:	aa09      	add	r2, sp, #36	; 0x24
 801492e:	47b0      	blx	r6
 8014930:	2800      	cmp	r0, #0
 8014932:	d0ed      	beq.n	8014910 <wait_session_status+0x34>
 8014934:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8014938:	a80c      	add	r0, sp, #48	; 0x30
 801493a:	f7ff f809 	bl	8013950 <ucdr_init_buffer>
 801493e:	2600      	movs	r6, #0
 8014940:	f10d 031e 	add.w	r3, sp, #30
 8014944:	aa07      	add	r2, sp, #28
 8014946:	a90c      	add	r1, sp, #48	; 0x30
 8014948:	4620      	mov	r0, r4
 801494a:	f88d 601c 	strb.w	r6, [sp, #28]
 801494e:	f000 fa87 	bl	8014e60 <uxr_read_session_header>
 8014952:	2800      	cmp	r0, #0
 8014954:	d0dc      	beq.n	8014910 <wait_session_status+0x34>
 8014956:	4631      	mov	r1, r6
 8014958:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801495c:	f000 fb24 	bl	8014fa8 <uxr_stream_id_from_raw>
 8014960:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8014964:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014968:	9302      	str	r3, [sp, #8]
 801496a:	2f01      	cmp	r7, #1
 801496c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8014970:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8014974:	d05c      	beq.n	8014a30 <wait_session_status+0x154>
 8014976:	2f02      	cmp	r7, #2
 8014978:	d020      	beq.n	80149bc <wait_session_status+0xe0>
 801497a:	2f00      	cmp	r7, #0
 801497c:	d1c8      	bne.n	8014910 <wait_session_status+0x34>
 801497e:	4639      	mov	r1, r7
 8014980:	4638      	mov	r0, r7
 8014982:	f000 fb11 	bl	8014fa8 <uxr_stream_id_from_raw>
 8014986:	a90c      	add	r1, sp, #48	; 0x30
 8014988:	4602      	mov	r2, r0
 801498a:	900b      	str	r0, [sp, #44]	; 0x2c
 801498c:	4620      	mov	r0, r4
 801498e:	f7ff fc65 	bl	801425c <read_submessage_list>
 8014992:	f000 fc5d 	bl	8015250 <uxr_millis>
 8014996:	1b40      	subs	r0, r0, r5
 8014998:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 801499c:	2b00      	cmp	r3, #0
 801499e:	dcbe      	bgt.n	801491e <wait_session_status+0x42>
 80149a0:	9b03      	ldr	r3, [sp, #12]
 80149a2:	7960      	ldrb	r0, [r4, #5]
 80149a4:	f10b 0b01 	add.w	fp, fp, #1
 80149a8:	455b      	cmp	r3, fp
 80149aa:	d001      	beq.n	80149b0 <wait_session_status+0xd4>
 80149ac:	28ff      	cmp	r0, #255	; 0xff
 80149ae:	d0a3      	beq.n	80148f8 <wait_session_status+0x1c>
 80149b0:	38ff      	subs	r0, #255	; 0xff
 80149b2:	bf18      	it	ne
 80149b4:	2001      	movne	r0, #1
 80149b6:	b01d      	add	sp, #116	; 0x74
 80149b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149bc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80149c0:	9304      	str	r3, [sp, #16]
 80149c2:	4631      	mov	r1, r6
 80149c4:	f104 0008 	add.w	r0, r4, #8
 80149c8:	f000 fbdc 	bl	8015184 <uxr_get_input_reliable_stream>
 80149cc:	4680      	mov	r8, r0
 80149ce:	b348      	cbz	r0, 8014a24 <wait_session_status+0x148>
 80149d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80149d2:	9205      	str	r2, [sp, #20]
 80149d4:	a80c      	add	r0, sp, #48	; 0x30
 80149d6:	f7fe ffeb 	bl	80139b0 <ucdr_buffer_remaining>
 80149da:	4603      	mov	r3, r0
 80149dc:	f10d 001d 	add.w	r0, sp, #29
 80149e0:	9000      	str	r0, [sp, #0]
 80149e2:	9a05      	ldr	r2, [sp, #20]
 80149e4:	9902      	ldr	r1, [sp, #8]
 80149e6:	4640      	mov	r0, r8
 80149e8:	f004 fca6 	bl	8019338 <uxr_receive_reliable_message>
 80149ec:	b1d0      	cbz	r0, 8014a24 <wait_session_status+0x148>
 80149ee:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d03a      	beq.n	8014a6c <wait_session_status+0x190>
 80149f6:	9f04      	ldr	r7, [sp, #16]
 80149f8:	e00a      	b.n	8014a10 <wait_session_status+0x134>
 80149fa:	f04f 0302 	mov.w	r3, #2
 80149fe:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8014a02:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8014a06:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8014a0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a0c:	f7ff fc26 	bl	801425c <read_submessage_list>
 8014a10:	a914      	add	r1, sp, #80	; 0x50
 8014a12:	2204      	movs	r2, #4
 8014a14:	4640      	mov	r0, r8
 8014a16:	f004 fd0f 	bl	8019438 <uxr_next_input_reliable_buffer_available>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	a914      	add	r1, sp, #80	; 0x50
 8014a1e:	4620      	mov	r0, r4
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d1ea      	bne.n	80149fa <wait_session_status+0x11e>
 8014a24:	9904      	ldr	r1, [sp, #16]
 8014a26:	4632      	mov	r2, r6
 8014a28:	4620      	mov	r0, r4
 8014a2a:	f7ff fa93 	bl	8013f54 <write_submessage_acknack.isra.0>
 8014a2e:	e76f      	b.n	8014910 <wait_session_status+0x34>
 8014a30:	4631      	mov	r1, r6
 8014a32:	f104 0008 	add.w	r0, r4, #8
 8014a36:	f000 fb9b 	bl	8015170 <uxr_get_input_best_effort_stream>
 8014a3a:	2800      	cmp	r0, #0
 8014a3c:	f43f af68 	beq.w	8014910 <wait_session_status+0x34>
 8014a40:	9902      	ldr	r1, [sp, #8]
 8014a42:	f004 fbe5 	bl	8019210 <uxr_receive_best_effort_message>
 8014a46:	2800      	cmp	r0, #0
 8014a48:	f43f af62 	beq.w	8014910 <wait_session_status+0x34>
 8014a4c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8014a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a52:	a90c      	add	r1, sp, #48	; 0x30
 8014a54:	4620      	mov	r0, r4
 8014a56:	f7ff fc01 	bl	801425c <read_submessage_list>
 8014a5a:	e759      	b.n	8014910 <wait_session_status+0x34>
 8014a5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014a5e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014a62:	47a0      	blx	r4
 8014a64:	2001      	movs	r0, #1
 8014a66:	b01d      	add	sp, #116	; 0x74
 8014a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a6c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8014a70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a72:	a90c      	add	r1, sp, #48	; 0x30
 8014a74:	4620      	mov	r0, r4
 8014a76:	f7ff fbf1 	bl	801425c <read_submessage_list>
 8014a7a:	e7bc      	b.n	80149f6 <wait_session_status+0x11a>

08014a7c <uxr_delete_session_retries>:
 8014a7c:	b530      	push	{r4, r5, lr}
 8014a7e:	b08f      	sub	sp, #60	; 0x3c
 8014a80:	4604      	mov	r4, r0
 8014a82:	460d      	mov	r5, r1
 8014a84:	f000 fa2e 	bl	8014ee4 <uxr_session_header_offset>
 8014a88:	2300      	movs	r3, #0
 8014a8a:	2210      	movs	r2, #16
 8014a8c:	9000      	str	r0, [sp, #0]
 8014a8e:	a902      	add	r1, sp, #8
 8014a90:	a806      	add	r0, sp, #24
 8014a92:	f7fe ff4b 	bl	801392c <ucdr_init_buffer_origin_offset>
 8014a96:	a906      	add	r1, sp, #24
 8014a98:	4620      	mov	r0, r4
 8014a9a:	f000 f973 	bl	8014d84 <uxr_buffer_delete_session>
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	4611      	mov	r1, r2
 8014aa2:	9b06      	ldr	r3, [sp, #24]
 8014aa4:	4620      	mov	r0, r4
 8014aa6:	f000 f9c7 	bl	8014e38 <uxr_stamp_session_header>
 8014aaa:	a806      	add	r0, sp, #24
 8014aac:	f7fe ff7c 	bl	80139a8 <ucdr_buffer_length>
 8014ab0:	462b      	mov	r3, r5
 8014ab2:	4602      	mov	r2, r0
 8014ab4:	a902      	add	r1, sp, #8
 8014ab6:	4620      	mov	r0, r4
 8014ab8:	f7ff ff10 	bl	80148dc <wait_session_status>
 8014abc:	b118      	cbz	r0, 8014ac6 <uxr_delete_session_retries+0x4a>
 8014abe:	7960      	ldrb	r0, [r4, #5]
 8014ac0:	fab0 f080 	clz	r0, r0
 8014ac4:	0940      	lsrs	r0, r0, #5
 8014ac6:	b00f      	add	sp, #60	; 0x3c
 8014ac8:	bd30      	pop	{r4, r5, pc}
 8014aca:	bf00      	nop

08014acc <uxr_create_session>:
 8014acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ad0:	f100 0b08 	add.w	fp, r0, #8
 8014ad4:	b0ab      	sub	sp, #172	; 0xac
 8014ad6:	4604      	mov	r4, r0
 8014ad8:	4658      	mov	r0, fp
 8014ada:	f000 fa99 	bl	8015010 <uxr_reset_stream_storage>
 8014ade:	4620      	mov	r0, r4
 8014ae0:	f000 fa00 	bl	8014ee4 <uxr_session_header_offset>
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	9000      	str	r0, [sp, #0]
 8014ae8:	221c      	movs	r2, #28
 8014aea:	a90b      	add	r1, sp, #44	; 0x2c
 8014aec:	a812      	add	r0, sp, #72	; 0x48
 8014aee:	f7fe ff1d 	bl	801392c <ucdr_init_buffer_origin_offset>
 8014af2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014af4:	8a1a      	ldrh	r2, [r3, #16]
 8014af6:	3a04      	subs	r2, #4
 8014af8:	b292      	uxth	r2, r2
 8014afa:	a912      	add	r1, sp, #72	; 0x48
 8014afc:	4620      	mov	r0, r4
 8014afe:	f000 f917 	bl	8014d30 <uxr_buffer_create_session>
 8014b02:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014b04:	4620      	mov	r0, r4
 8014b06:	f000 f983 	bl	8014e10 <uxr_stamp_create_session_header>
 8014b0a:	a812      	add	r0, sp, #72	; 0x48
 8014b0c:	f7fe ff4c 	bl	80139a8 <ucdr_buffer_length>
 8014b10:	23ff      	movs	r3, #255	; 0xff
 8014b12:	7163      	strb	r3, [r4, #5]
 8014b14:	230a      	movs	r3, #10
 8014b16:	46da      	mov	sl, fp
 8014b18:	9303      	str	r3, [sp, #12]
 8014b1a:	4683      	mov	fp, r0
 8014b1c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014b1e:	465a      	mov	r2, fp
 8014b20:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014b24:	a90b      	add	r1, sp, #44	; 0x2c
 8014b26:	47a8      	blx	r5
 8014b28:	f000 fb92 	bl	8015250 <uxr_millis>
 8014b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014b30:	4605      	mov	r5, r0
 8014b32:	e009      	b.n	8014b48 <uxr_create_session+0x7c>
 8014b34:	f000 fb8c 	bl	8015250 <uxr_millis>
 8014b38:	1b40      	subs	r0, r0, r5
 8014b3a:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	7962      	ldrb	r2, [r4, #5]
 8014b42:	dd38      	ble.n	8014bb6 <uxr_create_session+0xea>
 8014b44:	2aff      	cmp	r2, #255	; 0xff
 8014b46:	d13c      	bne.n	8014bc2 <uxr_create_session+0xf6>
 8014b48:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8014b4a:	a907      	add	r1, sp, #28
 8014b4c:	6896      	ldr	r6, [r2, #8]
 8014b4e:	6810      	ldr	r0, [r2, #0]
 8014b50:	aa08      	add	r2, sp, #32
 8014b52:	47b0      	blx	r6
 8014b54:	2800      	cmp	r0, #0
 8014b56:	d0ed      	beq.n	8014b34 <uxr_create_session+0x68>
 8014b58:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014b5c:	a81a      	add	r0, sp, #104	; 0x68
 8014b5e:	f7fe fef7 	bl	8013950 <ucdr_init_buffer>
 8014b62:	2600      	movs	r6, #0
 8014b64:	f10d 031a 	add.w	r3, sp, #26
 8014b68:	aa06      	add	r2, sp, #24
 8014b6a:	a91a      	add	r1, sp, #104	; 0x68
 8014b6c:	4620      	mov	r0, r4
 8014b6e:	f88d 6018 	strb.w	r6, [sp, #24]
 8014b72:	f000 f975 	bl	8014e60 <uxr_read_session_header>
 8014b76:	2800      	cmp	r0, #0
 8014b78:	d0dc      	beq.n	8014b34 <uxr_create_session+0x68>
 8014b7a:	4631      	mov	r1, r6
 8014b7c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014b80:	f000 fa12 	bl	8014fa8 <uxr_stream_id_from_raw>
 8014b84:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8014b88:	2e01      	cmp	r6, #1
 8014b8a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8014b8e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8014b92:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8014b96:	d053      	beq.n	8014c40 <uxr_create_session+0x174>
 8014b98:	2e02      	cmp	r6, #2
 8014b9a:	d018      	beq.n	8014bce <uxr_create_session+0x102>
 8014b9c:	2e00      	cmp	r6, #0
 8014b9e:	d1c9      	bne.n	8014b34 <uxr_create_session+0x68>
 8014ba0:	4631      	mov	r1, r6
 8014ba2:	4630      	mov	r0, r6
 8014ba4:	f000 fa00 	bl	8014fa8 <uxr_stream_id_from_raw>
 8014ba8:	a91a      	add	r1, sp, #104	; 0x68
 8014baa:	4602      	mov	r2, r0
 8014bac:	900a      	str	r0, [sp, #40]	; 0x28
 8014bae:	4620      	mov	r0, r4
 8014bb0:	f7ff fb54 	bl	801425c <read_submessage_list>
 8014bb4:	e7be      	b.n	8014b34 <uxr_create_session+0x68>
 8014bb6:	9b03      	ldr	r3, [sp, #12]
 8014bb8:	3b01      	subs	r3, #1
 8014bba:	9303      	str	r3, [sp, #12]
 8014bbc:	d001      	beq.n	8014bc2 <uxr_create_session+0xf6>
 8014bbe:	2aff      	cmp	r2, #255	; 0xff
 8014bc0:	d0ac      	beq.n	8014b1c <uxr_create_session+0x50>
 8014bc2:	2a00      	cmp	r2, #0
 8014bc4:	d051      	beq.n	8014c6a <uxr_create_session+0x19e>
 8014bc6:	2000      	movs	r0, #0
 8014bc8:	b02b      	add	sp, #172	; 0xac
 8014bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bce:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014bd2:	9304      	str	r3, [sp, #16]
 8014bd4:	4639      	mov	r1, r7
 8014bd6:	4650      	mov	r0, sl
 8014bd8:	f000 fad4 	bl	8015184 <uxr_get_input_reliable_stream>
 8014bdc:	4680      	mov	r8, r0
 8014bde:	b348      	cbz	r0, 8014c34 <uxr_create_session+0x168>
 8014be0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014be2:	9205      	str	r2, [sp, #20]
 8014be4:	a81a      	add	r0, sp, #104	; 0x68
 8014be6:	f7fe fee3 	bl	80139b0 <ucdr_buffer_remaining>
 8014bea:	4603      	mov	r3, r0
 8014bec:	f10d 0019 	add.w	r0, sp, #25
 8014bf0:	9000      	str	r0, [sp, #0]
 8014bf2:	9a05      	ldr	r2, [sp, #20]
 8014bf4:	4649      	mov	r1, r9
 8014bf6:	4640      	mov	r0, r8
 8014bf8:	f004 fb9e 	bl	8019338 <uxr_receive_reliable_message>
 8014bfc:	b1d0      	cbz	r0, 8014c34 <uxr_create_session+0x168>
 8014bfe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d038      	beq.n	8014c78 <uxr_create_session+0x1ac>
 8014c06:	9e04      	ldr	r6, [sp, #16]
 8014c08:	e00a      	b.n	8014c20 <uxr_create_session+0x154>
 8014c0a:	f04f 0302 	mov.w	r3, #2
 8014c0e:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 8014c12:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 8014c16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c1c:	f7ff fb1e 	bl	801425c <read_submessage_list>
 8014c20:	a922      	add	r1, sp, #136	; 0x88
 8014c22:	2204      	movs	r2, #4
 8014c24:	4640      	mov	r0, r8
 8014c26:	f004 fc07 	bl	8019438 <uxr_next_input_reliable_buffer_available>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	a922      	add	r1, sp, #136	; 0x88
 8014c2e:	4620      	mov	r0, r4
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d1ea      	bne.n	8014c0a <uxr_create_session+0x13e>
 8014c34:	9904      	ldr	r1, [sp, #16]
 8014c36:	463a      	mov	r2, r7
 8014c38:	4620      	mov	r0, r4
 8014c3a:	f7ff f98b 	bl	8013f54 <write_submessage_acknack.isra.0>
 8014c3e:	e779      	b.n	8014b34 <uxr_create_session+0x68>
 8014c40:	4639      	mov	r1, r7
 8014c42:	4650      	mov	r0, sl
 8014c44:	f000 fa94 	bl	8015170 <uxr_get_input_best_effort_stream>
 8014c48:	2800      	cmp	r0, #0
 8014c4a:	f43f af73 	beq.w	8014b34 <uxr_create_session+0x68>
 8014c4e:	4649      	mov	r1, r9
 8014c50:	f004 fade 	bl	8019210 <uxr_receive_best_effort_message>
 8014c54:	2800      	cmp	r0, #0
 8014c56:	f43f af6d 	beq.w	8014b34 <uxr_create_session+0x68>
 8014c5a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c60:	a91a      	add	r1, sp, #104	; 0x68
 8014c62:	4620      	mov	r0, r4
 8014c64:	f7ff fafa 	bl	801425c <read_submessage_list>
 8014c68:	e764      	b.n	8014b34 <uxr_create_session+0x68>
 8014c6a:	4650      	mov	r0, sl
 8014c6c:	f000 f9d0 	bl	8015010 <uxr_reset_stream_storage>
 8014c70:	2001      	movs	r0, #1
 8014c72:	b02b      	add	sp, #172	; 0xac
 8014c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c78:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c7e:	a91a      	add	r1, sp, #104	; 0x68
 8014c80:	4620      	mov	r0, r4
 8014c82:	f7ff faeb 	bl	801425c <read_submessage_list>
 8014c86:	e7be      	b.n	8014c06 <uxr_create_session+0x13a>

08014c88 <uxr_prepare_stream_to_write_submessage>:
 8014c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c8c:	b082      	sub	sp, #8
 8014c8e:	4682      	mov	sl, r0
 8014c90:	4610      	mov	r0, r2
 8014c92:	4615      	mov	r5, r2
 8014c94:	461e      	mov	r6, r3
 8014c96:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8014c9a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8014c9e:	9101      	str	r1, [sp, #4]
 8014ca0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8014ca4:	f000 face 	bl	8015244 <uxr_submessage_padding>
 8014ca8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014cac:	f105 0904 	add.w	r9, r5, #4
 8014cb0:	2b01      	cmp	r3, #1
 8014cb2:	4481      	add	r9, r0
 8014cb4:	d01d      	beq.n	8014cf2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8014cb6:	2b02      	cmp	r3, #2
 8014cb8:	d116      	bne.n	8014ce8 <uxr_prepare_stream_to_write_submessage+0x60>
 8014cba:	4621      	mov	r1, r4
 8014cbc:	f10a 0008 	add.w	r0, sl, #8
 8014cc0:	f000 fa4c 	bl	801515c <uxr_get_output_reliable_stream>
 8014cc4:	4604      	mov	r4, r0
 8014cc6:	b158      	cbz	r0, 8014ce0 <uxr_prepare_stream_to_write_submessage+0x58>
 8014cc8:	4649      	mov	r1, r9
 8014cca:	4632      	mov	r2, r6
 8014ccc:	f004 fd70 	bl	80197b0 <uxr_prepare_reliable_buffer_to_write>
 8014cd0:	4604      	mov	r4, r0
 8014cd2:	b12c      	cbz	r4, 8014ce0 <uxr_prepare_stream_to_write_submessage+0x58>
 8014cd4:	4643      	mov	r3, r8
 8014cd6:	b2aa      	uxth	r2, r5
 8014cd8:	4639      	mov	r1, r7
 8014cda:	4630      	mov	r0, r6
 8014cdc:	f000 fa72 	bl	80151c4 <uxr_buffer_submessage_header>
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	b002      	add	sp, #8
 8014ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ce8:	2400      	movs	r4, #0
 8014cea:	4620      	mov	r0, r4
 8014cec:	b002      	add	sp, #8
 8014cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cf2:	4621      	mov	r1, r4
 8014cf4:	f10a 0008 	add.w	r0, sl, #8
 8014cf8:	f000 fa28 	bl	801514c <uxr_get_output_best_effort_stream>
 8014cfc:	4604      	mov	r4, r0
 8014cfe:	2800      	cmp	r0, #0
 8014d00:	d0ee      	beq.n	8014ce0 <uxr_prepare_stream_to_write_submessage+0x58>
 8014d02:	4649      	mov	r1, r9
 8014d04:	4632      	mov	r2, r6
 8014d06:	f004 fc83 	bl	8019610 <uxr_prepare_best_effort_buffer_to_write>
 8014d0a:	4604      	mov	r4, r0
 8014d0c:	e7e1      	b.n	8014cd2 <uxr_prepare_stream_to_write_submessage+0x4a>
 8014d0e:	bf00      	nop

08014d10 <uxr_init_session_info>:
 8014d10:	0e13      	lsrs	r3, r2, #24
 8014d12:	7043      	strb	r3, [r0, #1]
 8014d14:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8014d18:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014d1c:	7001      	strb	r1, [r0, #0]
 8014d1e:	70c3      	strb	r3, [r0, #3]
 8014d20:	2109      	movs	r1, #9
 8014d22:	23ff      	movs	r3, #255	; 0xff
 8014d24:	f880 c002 	strb.w	ip, [r0, #2]
 8014d28:	7102      	strb	r2, [r0, #4]
 8014d2a:	80c1      	strh	r1, [r0, #6]
 8014d2c:	7143      	strb	r3, [r0, #5]
 8014d2e:	4770      	bx	lr

08014d30 <uxr_buffer_create_session>:
 8014d30:	b530      	push	{r4, r5, lr}
 8014d32:	b089      	sub	sp, #36	; 0x24
 8014d34:	2300      	movs	r3, #0
 8014d36:	4d12      	ldr	r5, [pc, #72]	; (8014d80 <uxr_buffer_create_session+0x50>)
 8014d38:	9307      	str	r3, [sp, #28]
 8014d3a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014d3e:	2201      	movs	r2, #1
 8014d40:	9301      	str	r3, [sp, #4]
 8014d42:	80c2      	strh	r2, [r0, #6]
 8014d44:	f88d 2004 	strb.w	r2, [sp, #4]
 8014d48:	682a      	ldr	r2, [r5, #0]
 8014d4a:	9200      	str	r2, [sp, #0]
 8014d4c:	88aa      	ldrh	r2, [r5, #4]
 8014d4e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014d52:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8014d56:	9202      	str	r2, [sp, #8]
 8014d58:	460c      	mov	r4, r1
 8014d5a:	7802      	ldrb	r2, [r0, #0]
 8014d5c:	9303      	str	r3, [sp, #12]
 8014d5e:	4619      	mov	r1, r3
 8014d60:	f88d 200c 	strb.w	r2, [sp, #12]
 8014d64:	4620      	mov	r0, r4
 8014d66:	2210      	movs	r2, #16
 8014d68:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014d6c:	9306      	str	r3, [sp, #24]
 8014d6e:	f000 fa29 	bl	80151c4 <uxr_buffer_submessage_header>
 8014d72:	4669      	mov	r1, sp
 8014d74:	4620      	mov	r0, r4
 8014d76:	f001 f981 	bl	801607c <uxr_serialize_CREATE_CLIENT_Payload>
 8014d7a:	b009      	add	sp, #36	; 0x24
 8014d7c:	bd30      	pop	{r4, r5, pc}
 8014d7e:	bf00      	nop
 8014d80:	0801cc50 	.word	0x0801cc50

08014d84 <uxr_buffer_delete_session>:
 8014d84:	b510      	push	{r4, lr}
 8014d86:	4b0c      	ldr	r3, [pc, #48]	; (8014db8 <uxr_buffer_delete_session+0x34>)
 8014d88:	b082      	sub	sp, #8
 8014d8a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8014d8e:	f8ad c006 	strh.w	ip, [sp, #6]
 8014d92:	460c      	mov	r4, r1
 8014d94:	2202      	movs	r2, #2
 8014d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d9a:	80c2      	strh	r2, [r0, #6]
 8014d9c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014da0:	2204      	movs	r2, #4
 8014da2:	2300      	movs	r3, #0
 8014da4:	2103      	movs	r1, #3
 8014da6:	4620      	mov	r0, r4
 8014da8:	f000 fa0c 	bl	80151c4 <uxr_buffer_submessage_header>
 8014dac:	a901      	add	r1, sp, #4
 8014dae:	4620      	mov	r0, r4
 8014db0:	f001 fa0a 	bl	80161c8 <uxr_serialize_DELETE_Payload>
 8014db4:	b002      	add	sp, #8
 8014db6:	bd10      	pop	{r4, pc}
 8014db8:	0801cc50 	.word	0x0801cc50

08014dbc <uxr_read_create_session_status>:
 8014dbc:	b510      	push	{r4, lr}
 8014dbe:	b088      	sub	sp, #32
 8014dc0:	4604      	mov	r4, r0
 8014dc2:	4608      	mov	r0, r1
 8014dc4:	a901      	add	r1, sp, #4
 8014dc6:	f001 fa0f 	bl	80161e8 <uxr_deserialize_STATUS_AGENT_Payload>
 8014dca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014dce:	7163      	strb	r3, [r4, #5]
 8014dd0:	b008      	add	sp, #32
 8014dd2:	bd10      	pop	{r4, pc}

08014dd4 <uxr_read_delete_session_status>:
 8014dd4:	b510      	push	{r4, lr}
 8014dd6:	4604      	mov	r4, r0
 8014dd8:	b084      	sub	sp, #16
 8014dda:	4608      	mov	r0, r1
 8014ddc:	a902      	add	r1, sp, #8
 8014dde:	f001 fa33 	bl	8016248 <uxr_deserialize_STATUS_Payload>
 8014de2:	88e3      	ldrh	r3, [r4, #6]
 8014de4:	2b02      	cmp	r3, #2
 8014de6:	d001      	beq.n	8014dec <uxr_read_delete_session_status+0x18>
 8014de8:	b004      	add	sp, #16
 8014dea:	bd10      	pop	{r4, pc}
 8014dec:	f10d 000a 	add.w	r0, sp, #10
 8014df0:	f7ff f836 	bl	8013e60 <uxr_object_id_from_raw>
 8014df4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8014df8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8014dfc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014e00:	b29b      	uxth	r3, r3
 8014e02:	2b02      	cmp	r3, #2
 8014e04:	bf04      	itt	eq
 8014e06:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8014e0a:	7163      	strbeq	r3, [r4, #5]
 8014e0c:	b004      	add	sp, #16
 8014e0e:	bd10      	pop	{r4, pc}

08014e10 <uxr_stamp_create_session_header>:
 8014e10:	b510      	push	{r4, lr}
 8014e12:	2208      	movs	r2, #8
 8014e14:	b08a      	sub	sp, #40	; 0x28
 8014e16:	4604      	mov	r4, r0
 8014e18:	eb0d 0002 	add.w	r0, sp, r2
 8014e1c:	f7fe fd98 	bl	8013950 <ucdr_init_buffer>
 8014e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e24:	9400      	str	r4, [sp, #0]
 8014e26:	2300      	movs	r3, #0
 8014e28:	461a      	mov	r2, r3
 8014e2a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8014e2e:	a802      	add	r0, sp, #8
 8014e30:	f000 fbc2 	bl	80155b8 <uxr_serialize_message_header>
 8014e34:	b00a      	add	sp, #40	; 0x28
 8014e36:	bd10      	pop	{r4, pc}

08014e38 <uxr_stamp_session_header>:
 8014e38:	b530      	push	{r4, r5, lr}
 8014e3a:	b08d      	sub	sp, #52	; 0x34
 8014e3c:	4604      	mov	r4, r0
 8014e3e:	460d      	mov	r5, r1
 8014e40:	9203      	str	r2, [sp, #12]
 8014e42:	4619      	mov	r1, r3
 8014e44:	a804      	add	r0, sp, #16
 8014e46:	2208      	movs	r2, #8
 8014e48:	f7fe fd82 	bl	8013950 <ucdr_init_buffer>
 8014e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e50:	9b03      	ldr	r3, [sp, #12]
 8014e52:	9400      	str	r4, [sp, #0]
 8014e54:	462a      	mov	r2, r5
 8014e56:	a804      	add	r0, sp, #16
 8014e58:	f000 fbae 	bl	80155b8 <uxr_serialize_message_header>
 8014e5c:	b00d      	add	sp, #52	; 0x34
 8014e5e:	bd30      	pop	{r4, r5, pc}

08014e60 <uxr_read_session_header>:
 8014e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e64:	4607      	mov	r7, r0
 8014e66:	b084      	sub	sp, #16
 8014e68:	4608      	mov	r0, r1
 8014e6a:	460c      	mov	r4, r1
 8014e6c:	4615      	mov	r5, r2
 8014e6e:	461e      	mov	r6, r3
 8014e70:	f7fe fd9e 	bl	80139b0 <ucdr_buffer_remaining>
 8014e74:	2808      	cmp	r0, #8
 8014e76:	d803      	bhi.n	8014e80 <uxr_read_session_header+0x20>
 8014e78:	2000      	movs	r0, #0
 8014e7a:	b004      	add	sp, #16
 8014e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e80:	f10d 080c 	add.w	r8, sp, #12
 8014e84:	4633      	mov	r3, r6
 8014e86:	462a      	mov	r2, r5
 8014e88:	f8cd 8000 	str.w	r8, [sp]
 8014e8c:	4620      	mov	r0, r4
 8014e8e:	f10d 010b 	add.w	r1, sp, #11
 8014e92:	f000 fbaf 	bl	80155f4 <uxr_deserialize_message_header>
 8014e96:	783a      	ldrb	r2, [r7, #0]
 8014e98:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8014e9c:	4293      	cmp	r3, r2
 8014e9e:	d1eb      	bne.n	8014e78 <uxr_read_session_header+0x18>
 8014ea0:	061b      	lsls	r3, r3, #24
 8014ea2:	d41c      	bmi.n	8014ede <uxr_read_session_header+0x7e>
 8014ea4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014ea8:	787b      	ldrb	r3, [r7, #1]
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d003      	beq.n	8014eb6 <uxr_read_session_header+0x56>
 8014eae:	2001      	movs	r0, #1
 8014eb0:	f080 0001 	eor.w	r0, r0, #1
 8014eb4:	e7e1      	b.n	8014e7a <uxr_read_session_header+0x1a>
 8014eb6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8014eba:	78bb      	ldrb	r3, [r7, #2]
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	f107 0102 	add.w	r1, r7, #2
 8014ec2:	d1f4      	bne.n	8014eae <uxr_read_session_header+0x4e>
 8014ec4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8014ec8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	d1ee      	bne.n	8014eae <uxr_read_session_header+0x4e>
 8014ed0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8014ed4:	784b      	ldrb	r3, [r1, #1]
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	d1e9      	bne.n	8014eae <uxr_read_session_header+0x4e>
 8014eda:	2000      	movs	r0, #0
 8014edc:	e7e8      	b.n	8014eb0 <uxr_read_session_header+0x50>
 8014ede:	2001      	movs	r0, #1
 8014ee0:	e7cb      	b.n	8014e7a <uxr_read_session_header+0x1a>
 8014ee2:	bf00      	nop

08014ee4 <uxr_session_header_offset>:
 8014ee4:	f990 3000 	ldrsb.w	r3, [r0]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	bfac      	ite	ge
 8014eec:	2008      	movge	r0, #8
 8014eee:	2004      	movlt	r0, #4
 8014ef0:	4770      	bx	lr
 8014ef2:	bf00      	nop

08014ef4 <uxr_init_base_object_request>:
 8014ef4:	b510      	push	{r4, lr}
 8014ef6:	88c3      	ldrh	r3, [r0, #6]
 8014ef8:	b082      	sub	sp, #8
 8014efa:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8014efe:	9101      	str	r1, [sp, #4]
 8014f00:	f1a3 010a 	sub.w	r1, r3, #10
 8014f04:	b289      	uxth	r1, r1
 8014f06:	42a1      	cmp	r1, r4
 8014f08:	d80e      	bhi.n	8014f28 <uxr_init_base_object_request+0x34>
 8014f0a:	3301      	adds	r3, #1
 8014f0c:	b29c      	uxth	r4, r3
 8014f0e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014f12:	b2db      	uxtb	r3, r3
 8014f14:	80c4      	strh	r4, [r0, #6]
 8014f16:	9801      	ldr	r0, [sp, #4]
 8014f18:	7011      	strb	r1, [r2, #0]
 8014f1a:	7053      	strb	r3, [r2, #1]
 8014f1c:	1c91      	adds	r1, r2, #2
 8014f1e:	f7fe ffb3 	bl	8013e88 <uxr_object_id_to_raw>
 8014f22:	4620      	mov	r0, r4
 8014f24:	b002      	add	sp, #8
 8014f26:	bd10      	pop	{r4, pc}
 8014f28:	230a      	movs	r3, #10
 8014f2a:	2100      	movs	r1, #0
 8014f2c:	461c      	mov	r4, r3
 8014f2e:	e7f1      	b.n	8014f14 <uxr_init_base_object_request+0x20>

08014f30 <uxr_parse_base_object_request>:
 8014f30:	b570      	push	{r4, r5, r6, lr}
 8014f32:	4604      	mov	r4, r0
 8014f34:	3002      	adds	r0, #2
 8014f36:	460d      	mov	r5, r1
 8014f38:	4616      	mov	r6, r2
 8014f3a:	f7fe ff91 	bl	8013e60 <uxr_object_id_from_raw>
 8014f3e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8014f42:	8028      	strh	r0, [r5, #0]
 8014f44:	806b      	strh	r3, [r5, #2]
 8014f46:	7822      	ldrb	r2, [r4, #0]
 8014f48:	7863      	ldrb	r3, [r4, #1]
 8014f4a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014f4e:	8033      	strh	r3, [r6, #0]
 8014f50:	bd70      	pop	{r4, r5, r6, pc}
 8014f52:	bf00      	nop

08014f54 <uxr_stream_id>:
 8014f54:	2901      	cmp	r1, #1
 8014f56:	b082      	sub	sp, #8
 8014f58:	d01d      	beq.n	8014f96 <uxr_stream_id+0x42>
 8014f5a:	2902      	cmp	r1, #2
 8014f5c:	f04f 0c00 	mov.w	ip, #0
 8014f60:	d01e      	beq.n	8014fa0 <uxr_stream_id+0x4c>
 8014f62:	2300      	movs	r3, #0
 8014f64:	f36c 0307 	bfi	r3, ip, #0, #8
 8014f68:	f360 230f 	bfi	r3, r0, #8, #8
 8014f6c:	f361 4317 	bfi	r3, r1, #16, #8
 8014f70:	f362 631f 	bfi	r3, r2, #24, #8
 8014f74:	b2da      	uxtb	r2, r3
 8014f76:	2000      	movs	r0, #0
 8014f78:	f362 0007 	bfi	r0, r2, #0, #8
 8014f7c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014f80:	f362 200f 	bfi	r0, r2, #8, #8
 8014f84:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014f88:	f362 4017 	bfi	r0, r2, #16, #8
 8014f8c:	0e1b      	lsrs	r3, r3, #24
 8014f8e:	f363 601f 	bfi	r0, r3, #24, #8
 8014f92:	b002      	add	sp, #8
 8014f94:	4770      	bx	lr
 8014f96:	f100 0c01 	add.w	ip, r0, #1
 8014f9a:	fa5f fc8c 	uxtb.w	ip, ip
 8014f9e:	e7e0      	b.n	8014f62 <uxr_stream_id+0xe>
 8014fa0:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 8014fa4:	e7dd      	b.n	8014f62 <uxr_stream_id+0xe>
 8014fa6:	bf00      	nop

08014fa8 <uxr_stream_id_from_raw>:
 8014fa8:	b082      	sub	sp, #8
 8014faa:	b130      	cbz	r0, 8014fba <uxr_stream_id_from_raw+0x12>
 8014fac:	0603      	lsls	r3, r0, #24
 8014fae:	d420      	bmi.n	8014ff2 <uxr_stream_id_from_raw+0x4a>
 8014fb0:	1e42      	subs	r2, r0, #1
 8014fb2:	b2d2      	uxtb	r2, r2
 8014fb4:	f04f 0c01 	mov.w	ip, #1
 8014fb8:	e001      	b.n	8014fbe <uxr_stream_id_from_raw+0x16>
 8014fba:	4684      	mov	ip, r0
 8014fbc:	4602      	mov	r2, r0
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	f360 0307 	bfi	r3, r0, #0, #8
 8014fc4:	f362 230f 	bfi	r3, r2, #8, #8
 8014fc8:	f36c 4317 	bfi	r3, ip, #16, #8
 8014fcc:	f361 631f 	bfi	r3, r1, #24, #8
 8014fd0:	b2da      	uxtb	r2, r3
 8014fd2:	2000      	movs	r0, #0
 8014fd4:	f362 0007 	bfi	r0, r2, #0, #8
 8014fd8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014fdc:	f362 200f 	bfi	r0, r2, #8, #8
 8014fe0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014fe4:	f362 4017 	bfi	r0, r2, #16, #8
 8014fe8:	0e1b      	lsrs	r3, r3, #24
 8014fea:	f363 601f 	bfi	r0, r3, #24, #8
 8014fee:	b002      	add	sp, #8
 8014ff0:	4770      	bx	lr
 8014ff2:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8014ff6:	f04f 0c02 	mov.w	ip, #2
 8014ffa:	e7e0      	b.n	8014fbe <uxr_stream_id_from_raw+0x16>

08014ffc <uxr_init_stream_storage>:
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	7403      	strb	r3, [r0, #16]
 8015000:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8015004:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8015008:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 801500c:	4770      	bx	lr
 801500e:	bf00      	nop

08015010 <uxr_reset_stream_storage>:
 8015010:	b570      	push	{r4, r5, r6, lr}
 8015012:	7c03      	ldrb	r3, [r0, #16]
 8015014:	4604      	mov	r4, r0
 8015016:	b153      	cbz	r3, 801502e <uxr_reset_stream_storage+0x1e>
 8015018:	4606      	mov	r6, r0
 801501a:	2500      	movs	r5, #0
 801501c:	4630      	mov	r0, r6
 801501e:	f004 faf1 	bl	8019604 <uxr_reset_output_best_effort_stream>
 8015022:	7c23      	ldrb	r3, [r4, #16]
 8015024:	3501      	adds	r5, #1
 8015026:	42ab      	cmp	r3, r5
 8015028:	f106 0610 	add.w	r6, r6, #16
 801502c:	d8f6      	bhi.n	801501c <uxr_reset_stream_storage+0xc>
 801502e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015032:	b163      	cbz	r3, 801504e <uxr_reset_stream_storage+0x3e>
 8015034:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015038:	2500      	movs	r5, #0
 801503a:	4630      	mov	r0, r6
 801503c:	f004 f8e4 	bl	8019208 <uxr_reset_input_best_effort_stream>
 8015040:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015044:	3501      	adds	r5, #1
 8015046:	42ab      	cmp	r3, r5
 8015048:	f106 0602 	add.w	r6, r6, #2
 801504c:	d8f5      	bhi.n	801503a <uxr_reset_stream_storage+0x2a>
 801504e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8015052:	b163      	cbz	r3, 801506e <uxr_reset_stream_storage+0x5e>
 8015054:	f104 0618 	add.w	r6, r4, #24
 8015058:	2500      	movs	r5, #0
 801505a:	4630      	mov	r0, r6
 801505c:	f004 fb7e 	bl	801975c <uxr_reset_output_reliable_stream>
 8015060:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8015064:	3501      	adds	r5, #1
 8015066:	42ab      	cmp	r3, r5
 8015068:	f106 0628 	add.w	r6, r6, #40	; 0x28
 801506c:	d8f5      	bhi.n	801505a <uxr_reset_stream_storage+0x4a>
 801506e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8015072:	b163      	cbz	r3, 801508e <uxr_reset_stream_storage+0x7e>
 8015074:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8015078:	2500      	movs	r5, #0
 801507a:	4630      	mov	r0, r6
 801507c:	f004 f938 	bl	80192f0 <uxr_reset_input_reliable_stream>
 8015080:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8015084:	3501      	adds	r5, #1
 8015086:	42ab      	cmp	r3, r5
 8015088:	f106 0618 	add.w	r6, r6, #24
 801508c:	d8f5      	bhi.n	801507a <uxr_reset_stream_storage+0x6a>
 801508e:	bd70      	pop	{r4, r5, r6, pc}

08015090 <uxr_add_output_best_effort_buffer>:
 8015090:	b510      	push	{r4, lr}
 8015092:	7c04      	ldrb	r4, [r0, #16]
 8015094:	f104 0c01 	add.w	ip, r4, #1
 8015098:	b082      	sub	sp, #8
 801509a:	f880 c010 	strb.w	ip, [r0, #16]
 801509e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80150a2:	f004 faa5 	bl	80195f0 <uxr_init_output_best_effort_stream>
 80150a6:	2201      	movs	r2, #1
 80150a8:	4611      	mov	r1, r2
 80150aa:	4620      	mov	r0, r4
 80150ac:	b002      	add	sp, #8
 80150ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150b2:	f7ff bf4f 	b.w	8014f54 <uxr_stream_id>
 80150b6:	bf00      	nop

080150b8 <uxr_add_output_reliable_buffer>:
 80150b8:	b510      	push	{r4, lr}
 80150ba:	b084      	sub	sp, #16
 80150bc:	4684      	mov	ip, r0
 80150be:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80150c2:	9000      	str	r0, [sp, #0]
 80150c4:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 80150c8:	2028      	movs	r0, #40	; 0x28
 80150ca:	fb00 c004 	mla	r0, r0, r4, ip
 80150ce:	f104 0e01 	add.w	lr, r4, #1
 80150d2:	3018      	adds	r0, #24
 80150d4:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 80150d8:	f004 fb08 	bl	80196ec <uxr_init_output_reliable_stream>
 80150dc:	2201      	movs	r2, #1
 80150de:	2102      	movs	r1, #2
 80150e0:	4620      	mov	r0, r4
 80150e2:	b004      	add	sp, #16
 80150e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150e8:	f7ff bf34 	b.w	8014f54 <uxr_stream_id>

080150ec <uxr_add_input_best_effort_buffer>:
 80150ec:	b510      	push	{r4, lr}
 80150ee:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80150f2:	4603      	mov	r3, r0
 80150f4:	1c62      	adds	r2, r4, #1
 80150f6:	f104 0021 	add.w	r0, r4, #33	; 0x21
 80150fa:	b082      	sub	sp, #8
 80150fc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8015100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015104:	f004 f87c 	bl	8019200 <uxr_init_input_best_effort_stream>
 8015108:	2200      	movs	r2, #0
 801510a:	2101      	movs	r1, #1
 801510c:	4620      	mov	r0, r4
 801510e:	b002      	add	sp, #8
 8015110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015114:	f7ff bf1e 	b.w	8014f54 <uxr_stream_id>

08015118 <uxr_add_input_reliable_buffer>:
 8015118:	b510      	push	{r4, lr}
 801511a:	b084      	sub	sp, #16
 801511c:	4684      	mov	ip, r0
 801511e:	9806      	ldr	r0, [sp, #24]
 8015120:	9000      	str	r0, [sp, #0]
 8015122:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8015126:	2018      	movs	r0, #24
 8015128:	fb00 c004 	mla	r0, r0, r4, ip
 801512c:	f104 0e01 	add.w	lr, r4, #1
 8015130:	3048      	adds	r0, #72	; 0x48
 8015132:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8015136:	f004 f8af 	bl	8019298 <uxr_init_input_reliable_stream>
 801513a:	2200      	movs	r2, #0
 801513c:	2102      	movs	r1, #2
 801513e:	4620      	mov	r0, r4
 8015140:	b004      	add	sp, #16
 8015142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015146:	f7ff bf05 	b.w	8014f54 <uxr_stream_id>
 801514a:	bf00      	nop

0801514c <uxr_get_output_best_effort_stream>:
 801514c:	7c03      	ldrb	r3, [r0, #16]
 801514e:	428b      	cmp	r3, r1
 8015150:	bf8c      	ite	hi
 8015152:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8015156:	2000      	movls	r0, #0
 8015158:	4770      	bx	lr
 801515a:	bf00      	nop

0801515c <uxr_get_output_reliable_stream>:
 801515c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8015160:	428b      	cmp	r3, r1
 8015162:	bf83      	ittte	hi
 8015164:	2328      	movhi	r3, #40	; 0x28
 8015166:	fb03 0001 	mlahi	r0, r3, r1, r0
 801516a:	3018      	addhi	r0, #24
 801516c:	2000      	movls	r0, #0
 801516e:	4770      	bx	lr

08015170 <uxr_get_input_best_effort_stream>:
 8015170:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8015174:	428b      	cmp	r3, r1
 8015176:	bf86      	itte	hi
 8015178:	3121      	addhi	r1, #33	; 0x21
 801517a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801517e:	2000      	movls	r0, #0
 8015180:	4770      	bx	lr
 8015182:	bf00      	nop

08015184 <uxr_get_input_reliable_stream>:
 8015184:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8015188:	428b      	cmp	r3, r1
 801518a:	bf83      	ittte	hi
 801518c:	2318      	movhi	r3, #24
 801518e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8015192:	3048      	addhi	r0, #72	; 0x48
 8015194:	2000      	movls	r0, #0
 8015196:	4770      	bx	lr

08015198 <uxr_output_streams_confirmed>:
 8015198:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801519c:	b183      	cbz	r3, 80151c0 <uxr_output_streams_confirmed+0x28>
 801519e:	b570      	push	{r4, r5, r6, lr}
 80151a0:	4606      	mov	r6, r0
 80151a2:	f100 0518 	add.w	r5, r0, #24
 80151a6:	2400      	movs	r4, #0
 80151a8:	e001      	b.n	80151ae <uxr_output_streams_confirmed+0x16>
 80151aa:	3528      	adds	r5, #40	; 0x28
 80151ac:	b138      	cbz	r0, 80151be <uxr_output_streams_confirmed+0x26>
 80151ae:	4628      	mov	r0, r5
 80151b0:	f004 fd32 	bl	8019c18 <uxr_is_output_up_to_date>
 80151b4:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80151b8:	3401      	adds	r4, #1
 80151ba:	42a3      	cmp	r3, r4
 80151bc:	d8f5      	bhi.n	80151aa <uxr_output_streams_confirmed+0x12>
 80151be:	bd70      	pop	{r4, r5, r6, pc}
 80151c0:	2001      	movs	r0, #1
 80151c2:	4770      	bx	lr

080151c4 <uxr_buffer_submessage_header>:
 80151c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151c6:	4604      	mov	r4, r0
 80151c8:	460e      	mov	r6, r1
 80151ca:	2104      	movs	r1, #4
 80151cc:	4615      	mov	r5, r2
 80151ce:	461f      	mov	r7, r3
 80151d0:	f7fe fbd8 	bl	8013984 <ucdr_align_to>
 80151d4:	2301      	movs	r3, #1
 80151d6:	ea47 0203 	orr.w	r2, r7, r3
 80151da:	4631      	mov	r1, r6
 80151dc:	7523      	strb	r3, [r4, #20]
 80151de:	4620      	mov	r0, r4
 80151e0:	462b      	mov	r3, r5
 80151e2:	f000 fa27 	bl	8015634 <uxr_serialize_submessage_header>
 80151e6:	4620      	mov	r0, r4
 80151e8:	f7fe fbe2 	bl	80139b0 <ucdr_buffer_remaining>
 80151ec:	42a8      	cmp	r0, r5
 80151ee:	bf34      	ite	cc
 80151f0:	2000      	movcc	r0, #0
 80151f2:	2001      	movcs	r0, #1
 80151f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151f6:	bf00      	nop

080151f8 <uxr_read_submessage_header>:
 80151f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151fc:	4604      	mov	r4, r0
 80151fe:	460d      	mov	r5, r1
 8015200:	2104      	movs	r1, #4
 8015202:	4616      	mov	r6, r2
 8015204:	4698      	mov	r8, r3
 8015206:	f7fe fbbd 	bl	8013984 <ucdr_align_to>
 801520a:	4620      	mov	r0, r4
 801520c:	f7fe fbd0 	bl	80139b0 <ucdr_buffer_remaining>
 8015210:	2803      	cmp	r0, #3
 8015212:	bf8c      	ite	hi
 8015214:	2701      	movhi	r7, #1
 8015216:	2700      	movls	r7, #0
 8015218:	d802      	bhi.n	8015220 <uxr_read_submessage_header+0x28>
 801521a:	4638      	mov	r0, r7
 801521c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015220:	4633      	mov	r3, r6
 8015222:	4642      	mov	r2, r8
 8015224:	4620      	mov	r0, r4
 8015226:	4629      	mov	r1, r5
 8015228:	f000 fa18 	bl	801565c <uxr_deserialize_submessage_header>
 801522c:	f898 3000 	ldrb.w	r3, [r8]
 8015230:	f003 0201 	and.w	r2, r3, #1
 8015234:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8015238:	f888 3000 	strb.w	r3, [r8]
 801523c:	7522      	strb	r2, [r4, #20]
 801523e:	4638      	mov	r0, r7
 8015240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015244 <uxr_submessage_padding>:
 8015244:	f010 0003 	ands.w	r0, r0, #3
 8015248:	bf18      	it	ne
 801524a:	f1c0 0004 	rsbne	r0, r0, #4
 801524e:	4770      	bx	lr

08015250 <uxr_millis>:
 8015250:	b510      	push	{r4, lr}
 8015252:	b084      	sub	sp, #16
 8015254:	4669      	mov	r1, sp
 8015256:	2001      	movs	r0, #1
 8015258:	f7ec fdda 	bl	8001e10 <clock_gettime>
 801525c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8015260:	4906      	ldr	r1, [pc, #24]	; (801527c <uxr_millis+0x2c>)
 8015262:	fba0 0301 	umull	r0, r3, r0, r1
 8015266:	1900      	adds	r0, r0, r4
 8015268:	fb01 3102 	mla	r1, r1, r2, r3
 801526c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8015270:	4a03      	ldr	r2, [pc, #12]	; (8015280 <uxr_millis+0x30>)
 8015272:	2300      	movs	r3, #0
 8015274:	f7eb fa20 	bl	80006b8 <__aeabi_ldivmod>
 8015278:	b004      	add	sp, #16
 801527a:	bd10      	pop	{r4, pc}
 801527c:	3b9aca00 	.word	0x3b9aca00
 8015280:	000f4240 	.word	0x000f4240

08015284 <uxr_nanos>:
 8015284:	b510      	push	{r4, lr}
 8015286:	b084      	sub	sp, #16
 8015288:	4669      	mov	r1, sp
 801528a:	2001      	movs	r0, #1
 801528c:	f7ec fdc0 	bl	8001e10 <clock_gettime>
 8015290:	4a06      	ldr	r2, [pc, #24]	; (80152ac <uxr_nanos+0x28>)
 8015292:	9800      	ldr	r0, [sp, #0]
 8015294:	9902      	ldr	r1, [sp, #8]
 8015296:	9c01      	ldr	r4, [sp, #4]
 8015298:	fba0 0302 	umull	r0, r3, r0, r2
 801529c:	1840      	adds	r0, r0, r1
 801529e:	fb02 3304 	mla	r3, r2, r4, r3
 80152a2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80152a6:	b004      	add	sp, #16
 80152a8:	bd10      	pop	{r4, pc}
 80152aa:	bf00      	nop
 80152ac:	3b9aca00 	.word	0x3b9aca00

080152b0 <on_full_output_buffer_fragmented>:
 80152b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152b4:	460c      	mov	r4, r1
 80152b6:	b08a      	sub	sp, #40	; 0x28
 80152b8:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80152bc:	4606      	mov	r6, r0
 80152be:	f104 0008 	add.w	r0, r4, #8
 80152c2:	f7ff ff4b 	bl	801515c <uxr_get_output_reliable_stream>
 80152c6:	4605      	mov	r5, r0
 80152c8:	f004 fcb0 	bl	8019c2c <get_available_free_slots>
 80152cc:	b968      	cbnz	r0, 80152ea <on_full_output_buffer_fragmented+0x3a>
 80152ce:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80152d2:	4620      	mov	r0, r4
 80152d4:	4798      	blx	r3
 80152d6:	b918      	cbnz	r0, 80152e0 <on_full_output_buffer_fragmented+0x30>
 80152d8:	2001      	movs	r0, #1
 80152da:	b00a      	add	sp, #40	; 0x28
 80152dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152e0:	4628      	mov	r0, r5
 80152e2:	f004 fca3 	bl	8019c2c <get_available_free_slots>
 80152e6:	2800      	cmp	r0, #0
 80152e8:	d0f6      	beq.n	80152d8 <on_full_output_buffer_fragmented+0x28>
 80152ea:	8929      	ldrh	r1, [r5, #8]
 80152ec:	89eb      	ldrh	r3, [r5, #14]
 80152ee:	7b28      	ldrb	r0, [r5, #12]
 80152f0:	686a      	ldr	r2, [r5, #4]
 80152f2:	fbb2 f8f1 	udiv	r8, r2, r1
 80152f6:	fbb3 f2f1 	udiv	r2, r3, r1
 80152fa:	fb01 3112 	mls	r1, r1, r2, r3
 80152fe:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 8015302:	b289      	uxth	r1, r1
 8015304:	fb08 f101 	mul.w	r1, r8, r1
 8015308:	30fc      	adds	r0, #252	; 0xfc
 801530a:	f1a8 0804 	sub.w	r8, r8, #4
 801530e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8015312:	4440      	add	r0, r8
 8015314:	b287      	uxth	r7, r0
 8015316:	1bdb      	subs	r3, r3, r7
 8015318:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 801531c:	682b      	ldr	r3, [r5, #0]
 801531e:	3104      	adds	r1, #4
 8015320:	4419      	add	r1, r3
 8015322:	4642      	mov	r2, r8
 8015324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015328:	9300      	str	r3, [sp, #0]
 801532a:	a802      	add	r0, sp, #8
 801532c:	2300      	movs	r3, #0
 801532e:	f7fe fafd 	bl	801392c <ucdr_init_buffer_origin_offset>
 8015332:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8015336:	f102 0308 	add.w	r3, r2, #8
 801533a:	4543      	cmp	r3, r8
 801533c:	d928      	bls.n	8015390 <on_full_output_buffer_fragmented+0xe0>
 801533e:	463a      	mov	r2, r7
 8015340:	2300      	movs	r3, #0
 8015342:	210d      	movs	r1, #13
 8015344:	a802      	add	r0, sp, #8
 8015346:	f7ff ff3d 	bl	80151c4 <uxr_buffer_submessage_header>
 801534a:	8929      	ldrh	r1, [r5, #8]
 801534c:	89eb      	ldrh	r3, [r5, #14]
 801534e:	fbb3 f2f1 	udiv	r2, r3, r1
 8015352:	fb01 3312 	mls	r3, r1, r2, r3
 8015356:	b29b      	uxth	r3, r3
 8015358:	686a      	ldr	r2, [r5, #4]
 801535a:	fbb2 f2f1 	udiv	r2, r2, r1
 801535e:	fb02 f303 	mul.w	r3, r2, r3
 8015362:	682a      	ldr	r2, [r5, #0]
 8015364:	f842 8003 	str.w	r8, [r2, r3]
 8015368:	89e8      	ldrh	r0, [r5, #14]
 801536a:	2101      	movs	r1, #1
 801536c:	f004 fd74 	bl	8019e58 <uxr_seq_num_add>
 8015370:	9904      	ldr	r1, [sp, #16]
 8015372:	9a03      	ldr	r2, [sp, #12]
 8015374:	81e8      	strh	r0, [r5, #14]
 8015376:	1a52      	subs	r2, r2, r1
 8015378:	4630      	mov	r0, r6
 801537a:	f7fe fae9 	bl	8013950 <ucdr_init_buffer>
 801537e:	4630      	mov	r0, r6
 8015380:	490f      	ldr	r1, [pc, #60]	; (80153c0 <on_full_output_buffer_fragmented+0x110>)
 8015382:	4622      	mov	r2, r4
 8015384:	f7fe fab8 	bl	80138f8 <ucdr_set_on_full_buffer_callback>
 8015388:	2000      	movs	r0, #0
 801538a:	b00a      	add	sp, #40	; 0x28
 801538c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015390:	b292      	uxth	r2, r2
 8015392:	2302      	movs	r3, #2
 8015394:	210d      	movs	r1, #13
 8015396:	a802      	add	r0, sp, #8
 8015398:	f7ff ff14 	bl	80151c4 <uxr_buffer_submessage_header>
 801539c:	8928      	ldrh	r0, [r5, #8]
 801539e:	89eb      	ldrh	r3, [r5, #14]
 80153a0:	fbb3 f1f0 	udiv	r1, r3, r0
 80153a4:	fb00 3311 	mls	r3, r0, r1, r3
 80153a8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80153ac:	6869      	ldr	r1, [r5, #4]
 80153ae:	fbb1 f1f0 	udiv	r1, r1, r0
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	fb01 f303 	mul.w	r3, r1, r3
 80153b8:	6829      	ldr	r1, [r5, #0]
 80153ba:	3208      	adds	r2, #8
 80153bc:	50ca      	str	r2, [r1, r3]
 80153be:	e7d3      	b.n	8015368 <on_full_output_buffer_fragmented+0xb8>
 80153c0:	080152b1 	.word	0x080152b1

080153c4 <uxr_prepare_output_stream>:
 80153c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153c6:	b087      	sub	sp, #28
 80153c8:	2707      	movs	r7, #7
 80153ca:	9202      	str	r2, [sp, #8]
 80153cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153ce:	9103      	str	r1, [sp, #12]
 80153d0:	2500      	movs	r5, #0
 80153d2:	3204      	adds	r2, #4
 80153d4:	e9cd 7500 	strd	r7, r5, [sp]
 80153d8:	461c      	mov	r4, r3
 80153da:	4606      	mov	r6, r0
 80153dc:	f7ff fc54 	bl	8014c88 <uxr_prepare_stream_to_write_submessage>
 80153e0:	f080 0201 	eor.w	r2, r0, #1
 80153e4:	b2d2      	uxtb	r2, r2
 80153e6:	75a2      	strb	r2, [r4, #22]
 80153e8:	b112      	cbz	r2, 80153f0 <uxr_prepare_output_stream+0x2c>
 80153ea:	4628      	mov	r0, r5
 80153ec:	b007      	add	sp, #28
 80153ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153f0:	aa05      	add	r2, sp, #20
 80153f2:	9902      	ldr	r1, [sp, #8]
 80153f4:	4630      	mov	r0, r6
 80153f6:	f7ff fd7d 	bl	8014ef4 <uxr_init_base_object_request>
 80153fa:	a905      	add	r1, sp, #20
 80153fc:	4605      	mov	r5, r0
 80153fe:	4620      	mov	r0, r4
 8015400:	f000 ffa0 	bl	8016344 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015404:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8015408:	69a6      	ldr	r6, [r4, #24]
 801540a:	69e7      	ldr	r7, [r4, #28]
 801540c:	1a52      	subs	r2, r2, r1
 801540e:	4620      	mov	r0, r4
 8015410:	f7fe fa9e 	bl	8013950 <ucdr_init_buffer>
 8015414:	4620      	mov	r0, r4
 8015416:	463a      	mov	r2, r7
 8015418:	4631      	mov	r1, r6
 801541a:	f7fe fa6d 	bl	80138f8 <ucdr_set_on_full_buffer_callback>
 801541e:	4628      	mov	r0, r5
 8015420:	b007      	add	sp, #28
 8015422:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015424 <uxr_prepare_output_stream_fragmented>:
 8015424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015428:	b091      	sub	sp, #68	; 0x44
 801542a:	4605      	mov	r5, r0
 801542c:	9105      	str	r1, [sp, #20]
 801542e:	3008      	adds	r0, #8
 8015430:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015434:	461e      	mov	r6, r3
 8015436:	9204      	str	r2, [sp, #16]
 8015438:	f7ff fe90 	bl	801515c <uxr_get_output_reliable_stream>
 801543c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8015440:	2b01      	cmp	r3, #1
 8015442:	f000 8091 	beq.w	8015568 <uxr_prepare_output_stream_fragmented+0x144>
 8015446:	4604      	mov	r4, r0
 8015448:	2800      	cmp	r0, #0
 801544a:	f000 808d 	beq.w	8015568 <uxr_prepare_output_stream_fragmented+0x144>
 801544e:	f004 fbed 	bl	8019c2c <get_available_free_slots>
 8015452:	2800      	cmp	r0, #0
 8015454:	f000 8083 	beq.w	801555e <uxr_prepare_output_stream_fragmented+0x13a>
 8015458:	8922      	ldrh	r2, [r4, #8]
 801545a:	89e7      	ldrh	r7, [r4, #14]
 801545c:	fbb7 f9f2 	udiv	r9, r7, r2
 8015460:	fb02 7919 	mls	r9, r2, r9, r7
 8015464:	fa1f f989 	uxth.w	r9, r9
 8015468:	6863      	ldr	r3, [r4, #4]
 801546a:	fbb3 f2f2 	udiv	r2, r3, r2
 801546e:	6823      	ldr	r3, [r4, #0]
 8015470:	9203      	str	r2, [sp, #12]
 8015472:	fb02 f909 	mul.w	r9, r2, r9
 8015476:	f109 0904 	add.w	r9, r9, #4
 801547a:	4499      	add	r9, r3
 801547c:	7b23      	ldrb	r3, [r4, #12]
 801547e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015482:	4543      	cmp	r3, r8
 8015484:	f1a2 0b04 	sub.w	fp, r2, #4
 8015488:	d37a      	bcc.n	8015580 <uxr_prepare_output_stream_fragmented+0x15c>
 801548a:	f1ab 0a04 	sub.w	sl, fp, #4
 801548e:	ebaa 0a03 	sub.w	sl, sl, r3
 8015492:	465a      	mov	r2, fp
 8015494:	2300      	movs	r3, #0
 8015496:	4649      	mov	r1, r9
 8015498:	a808      	add	r0, sp, #32
 801549a:	f8cd 8000 	str.w	r8, [sp]
 801549e:	f7fe fa45 	bl	801392c <ucdr_init_buffer_origin_offset>
 80154a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80154a4:	fa1f fa8a 	uxth.w	sl, sl
 80154a8:	4652      	mov	r2, sl
 80154aa:	f103 0a08 	add.w	sl, r3, #8
 80154ae:	45da      	cmp	sl, fp
 80154b0:	bf34      	ite	cc
 80154b2:	2302      	movcc	r3, #2
 80154b4:	2300      	movcs	r3, #0
 80154b6:	210d      	movs	r1, #13
 80154b8:	a808      	add	r0, sp, #32
 80154ba:	f7ff fe83 	bl	80151c4 <uxr_buffer_submessage_header>
 80154be:	8921      	ldrh	r1, [r4, #8]
 80154c0:	fbb7 f2f1 	udiv	r2, r7, r1
 80154c4:	fb01 7212 	mls	r2, r1, r2, r7
 80154c8:	b292      	uxth	r2, r2
 80154ca:	6863      	ldr	r3, [r4, #4]
 80154cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80154d0:	fb02 f303 	mul.w	r3, r2, r3
 80154d4:	6822      	ldr	r2, [r4, #0]
 80154d6:	4638      	mov	r0, r7
 80154d8:	f842 b003 	str.w	fp, [r2, r3]
 80154dc:	2101      	movs	r1, #1
 80154de:	f004 fcbb 	bl	8019e58 <uxr_seq_num_add>
 80154e2:	9b03      	ldr	r3, [sp, #12]
 80154e4:	f108 0104 	add.w	r1, r8, #4
 80154e8:	f1a3 0208 	sub.w	r2, r3, #8
 80154ec:	eba2 0208 	sub.w	r2, r2, r8
 80154f0:	4449      	add	r1, r9
 80154f2:	4607      	mov	r7, r0
 80154f4:	4630      	mov	r0, r6
 80154f6:	f7fe fa2b 	bl	8013950 <ucdr_init_buffer>
 80154fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80154fc:	81e7      	strh	r7, [r4, #14]
 80154fe:	1d1a      	adds	r2, r3, #4
 8015500:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8015504:	bf28      	it	cs
 8015506:	2200      	movcs	r2, #0
 8015508:	2300      	movs	r3, #0
 801550a:	b292      	uxth	r2, r2
 801550c:	2107      	movs	r1, #7
 801550e:	4630      	mov	r0, r6
 8015510:	f7ff fe58 	bl	80151c4 <uxr_buffer_submessage_header>
 8015514:	9904      	ldr	r1, [sp, #16]
 8015516:	aa07      	add	r2, sp, #28
 8015518:	4628      	mov	r0, r5
 801551a:	f7ff fceb 	bl	8014ef4 <uxr_init_base_object_request>
 801551e:	4604      	mov	r4, r0
 8015520:	b318      	cbz	r0, 801556a <uxr_prepare_output_stream_fragmented+0x146>
 8015522:	a907      	add	r1, sp, #28
 8015524:	4630      	mov	r0, r6
 8015526:	f000 ff0d 	bl	8016344 <uxr_serialize_WRITE_DATA_Payload_Data>
 801552a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801552e:	4630      	mov	r0, r6
 8015530:	1a52      	subs	r2, r2, r1
 8015532:	f7fe fa0d 	bl	8013950 <ucdr_init_buffer>
 8015536:	9b05      	ldr	r3, [sp, #20]
 8015538:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801553c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801553e:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8015542:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015544:	491b      	ldr	r1, [pc, #108]	; (80155b4 <uxr_prepare_output_stream_fragmented+0x190>)
 8015546:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 801554a:	4630      	mov	r0, r6
 801554c:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8015550:	462a      	mov	r2, r5
 8015552:	f7fe f9d1 	bl	80138f8 <ucdr_set_on_full_buffer_callback>
 8015556:	4620      	mov	r0, r4
 8015558:	b011      	add	sp, #68	; 0x44
 801555a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801555e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015560:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015562:	4628      	mov	r0, r5
 8015564:	4798      	blx	r3
 8015566:	b920      	cbnz	r0, 8015572 <uxr_prepare_output_stream_fragmented+0x14e>
 8015568:	2400      	movs	r4, #0
 801556a:	4620      	mov	r0, r4
 801556c:	b011      	add	sp, #68	; 0x44
 801556e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015572:	4620      	mov	r0, r4
 8015574:	f004 fb5a 	bl	8019c2c <get_available_free_slots>
 8015578:	2800      	cmp	r0, #0
 801557a:	f47f af6d 	bne.w	8015458 <uxr_prepare_output_stream_fragmented+0x34>
 801557e:	e7f3      	b.n	8015568 <uxr_prepare_output_stream_fragmented+0x144>
 8015580:	4638      	mov	r0, r7
 8015582:	2101      	movs	r1, #1
 8015584:	f004 fc68 	bl	8019e58 <uxr_seq_num_add>
 8015588:	8921      	ldrh	r1, [r4, #8]
 801558a:	fbb0 f2f1 	udiv	r2, r0, r1
 801558e:	fb01 0912 	mls	r9, r1, r2, r0
 8015592:	fa1f f289 	uxth.w	r2, r9
 8015596:	6863      	ldr	r3, [r4, #4]
 8015598:	fbb3 f9f1 	udiv	r9, r3, r1
 801559c:	6823      	ldr	r3, [r4, #0]
 801559e:	fb02 f909 	mul.w	r9, r2, r9
 80155a2:	f109 0904 	add.w	r9, r9, #4
 80155a6:	4499      	add	r9, r3
 80155a8:	4607      	mov	r7, r0
 80155aa:	7b23      	ldrb	r3, [r4, #12]
 80155ac:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80155b0:	e76b      	b.n	801548a <uxr_prepare_output_stream_fragmented+0x66>
 80155b2:	bf00      	nop
 80155b4:	080152b1 	.word	0x080152b1

080155b8 <uxr_serialize_message_header>:
 80155b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155ba:	b083      	sub	sp, #12
 80155bc:	4616      	mov	r6, r2
 80155be:	4604      	mov	r4, r0
 80155c0:	9301      	str	r3, [sp, #4]
 80155c2:	460d      	mov	r5, r1
 80155c4:	9f08      	ldr	r7, [sp, #32]
 80155c6:	f7fc faf3 	bl	8011bb0 <ucdr_serialize_uint8_t>
 80155ca:	4631      	mov	r1, r6
 80155cc:	4620      	mov	r0, r4
 80155ce:	f7fc faef 	bl	8011bb0 <ucdr_serialize_uint8_t>
 80155d2:	9a01      	ldr	r2, [sp, #4]
 80155d4:	2101      	movs	r1, #1
 80155d6:	4620      	mov	r0, r4
 80155d8:	f7fc fb96 	bl	8011d08 <ucdr_serialize_endian_uint16_t>
 80155dc:	062b      	lsls	r3, r5, #24
 80155de:	d501      	bpl.n	80155e4 <uxr_serialize_message_header+0x2c>
 80155e0:	b003      	add	sp, #12
 80155e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155e4:	2204      	movs	r2, #4
 80155e6:	4639      	mov	r1, r7
 80155e8:	4620      	mov	r0, r4
 80155ea:	b003      	add	sp, #12
 80155ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80155f0:	f003 bb10 	b.w	8018c14 <ucdr_serialize_array_uint8_t>

080155f4 <uxr_deserialize_message_header>:
 80155f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155f6:	b083      	sub	sp, #12
 80155f8:	4616      	mov	r6, r2
 80155fa:	4604      	mov	r4, r0
 80155fc:	9301      	str	r3, [sp, #4]
 80155fe:	460d      	mov	r5, r1
 8015600:	9f08      	ldr	r7, [sp, #32]
 8015602:	f7fc faeb 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8015606:	4631      	mov	r1, r6
 8015608:	4620      	mov	r0, r4
 801560a:	f7fc fae7 	bl	8011bdc <ucdr_deserialize_uint8_t>
 801560e:	9a01      	ldr	r2, [sp, #4]
 8015610:	2101      	movs	r1, #1
 8015612:	4620      	mov	r0, r4
 8015614:	f7fc fc6c 	bl	8011ef0 <ucdr_deserialize_endian_uint16_t>
 8015618:	f995 3000 	ldrsb.w	r3, [r5]
 801561c:	2b00      	cmp	r3, #0
 801561e:	da01      	bge.n	8015624 <uxr_deserialize_message_header+0x30>
 8015620:	b003      	add	sp, #12
 8015622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015624:	2204      	movs	r2, #4
 8015626:	4639      	mov	r1, r7
 8015628:	4620      	mov	r0, r4
 801562a:	b003      	add	sp, #12
 801562c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015630:	f003 bb54 	b.w	8018cdc <ucdr_deserialize_array_uint8_t>

08015634 <uxr_serialize_submessage_header>:
 8015634:	b530      	push	{r4, r5, lr}
 8015636:	b083      	sub	sp, #12
 8015638:	4615      	mov	r5, r2
 801563a:	4604      	mov	r4, r0
 801563c:	9301      	str	r3, [sp, #4]
 801563e:	f7fc fab7 	bl	8011bb0 <ucdr_serialize_uint8_t>
 8015642:	4629      	mov	r1, r5
 8015644:	4620      	mov	r0, r4
 8015646:	f7fc fab3 	bl	8011bb0 <ucdr_serialize_uint8_t>
 801564a:	9a01      	ldr	r2, [sp, #4]
 801564c:	2101      	movs	r1, #1
 801564e:	4620      	mov	r0, r4
 8015650:	b003      	add	sp, #12
 8015652:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015656:	f7fc bb57 	b.w	8011d08 <ucdr_serialize_endian_uint16_t>
 801565a:	bf00      	nop

0801565c <uxr_deserialize_submessage_header>:
 801565c:	b530      	push	{r4, r5, lr}
 801565e:	b083      	sub	sp, #12
 8015660:	4615      	mov	r5, r2
 8015662:	4604      	mov	r4, r0
 8015664:	9301      	str	r3, [sp, #4]
 8015666:	f7fc fab9 	bl	8011bdc <ucdr_deserialize_uint8_t>
 801566a:	4629      	mov	r1, r5
 801566c:	4620      	mov	r0, r4
 801566e:	f7fc fab5 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8015672:	9a01      	ldr	r2, [sp, #4]
 8015674:	2101      	movs	r1, #1
 8015676:	4620      	mov	r0, r4
 8015678:	b003      	add	sp, #12
 801567a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801567e:	f7fc bc37 	b.w	8011ef0 <ucdr_deserialize_endian_uint16_t>
 8015682:	bf00      	nop

08015684 <uxr_serialize_CLIENT_Representation>:
 8015684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015688:	2204      	movs	r2, #4
 801568a:	460e      	mov	r6, r1
 801568c:	4605      	mov	r5, r0
 801568e:	f003 fac1 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8015692:	2202      	movs	r2, #2
 8015694:	4607      	mov	r7, r0
 8015696:	1d31      	adds	r1, r6, #4
 8015698:	4628      	mov	r0, r5
 801569a:	f003 fabb 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 801569e:	4038      	ands	r0, r7
 80156a0:	2202      	movs	r2, #2
 80156a2:	1db1      	adds	r1, r6, #6
 80156a4:	b2c7      	uxtb	r7, r0
 80156a6:	4628      	mov	r0, r5
 80156a8:	f003 fab4 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 80156ac:	2204      	movs	r2, #4
 80156ae:	4007      	ands	r7, r0
 80156b0:	f106 0108 	add.w	r1, r6, #8
 80156b4:	4628      	mov	r0, r5
 80156b6:	f003 faad 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 80156ba:	7b31      	ldrb	r1, [r6, #12]
 80156bc:	4007      	ands	r7, r0
 80156be:	4628      	mov	r0, r5
 80156c0:	f7fc fa76 	bl	8011bb0 <ucdr_serialize_uint8_t>
 80156c4:	7b71      	ldrb	r1, [r6, #13]
 80156c6:	4007      	ands	r7, r0
 80156c8:	4628      	mov	r0, r5
 80156ca:	f7fc fa43 	bl	8011b54 <ucdr_serialize_bool>
 80156ce:	7b73      	ldrb	r3, [r6, #13]
 80156d0:	ea07 0800 	and.w	r8, r7, r0
 80156d4:	b93b      	cbnz	r3, 80156e6 <uxr_serialize_CLIENT_Representation+0x62>
 80156d6:	8bb1      	ldrh	r1, [r6, #28]
 80156d8:	4628      	mov	r0, r5
 80156da:	f7fc fa95 	bl	8011c08 <ucdr_serialize_uint16_t>
 80156de:	ea08 0000 	and.w	r0, r8, r0
 80156e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156e6:	6931      	ldr	r1, [r6, #16]
 80156e8:	4628      	mov	r0, r5
 80156ea:	f7fc fc77 	bl	8011fdc <ucdr_serialize_uint32_t>
 80156ee:	6933      	ldr	r3, [r6, #16]
 80156f0:	b1e3      	cbz	r3, 801572c <uxr_serialize_CLIENT_Representation+0xa8>
 80156f2:	b1c0      	cbz	r0, 8015726 <uxr_serialize_CLIENT_Representation+0xa2>
 80156f4:	4637      	mov	r7, r6
 80156f6:	f04f 0900 	mov.w	r9, #0
 80156fa:	e001      	b.n	8015700 <uxr_serialize_CLIENT_Representation+0x7c>
 80156fc:	3708      	adds	r7, #8
 80156fe:	b194      	cbz	r4, 8015726 <uxr_serialize_CLIENT_Representation+0xa2>
 8015700:	6979      	ldr	r1, [r7, #20]
 8015702:	4628      	mov	r0, r5
 8015704:	f003 fca2 	bl	801904c <ucdr_serialize_string>
 8015708:	69b9      	ldr	r1, [r7, #24]
 801570a:	4604      	mov	r4, r0
 801570c:	4628      	mov	r0, r5
 801570e:	f003 fc9d 	bl	801904c <ucdr_serialize_string>
 8015712:	6933      	ldr	r3, [r6, #16]
 8015714:	f109 0901 	add.w	r9, r9, #1
 8015718:	4004      	ands	r4, r0
 801571a:	4599      	cmp	r9, r3
 801571c:	b2e4      	uxtb	r4, r4
 801571e:	d3ed      	bcc.n	80156fc <uxr_serialize_CLIENT_Representation+0x78>
 8015720:	ea08 0804 	and.w	r8, r8, r4
 8015724:	e7d7      	b.n	80156d6 <uxr_serialize_CLIENT_Representation+0x52>
 8015726:	f04f 0800 	mov.w	r8, #0
 801572a:	e7d4      	b.n	80156d6 <uxr_serialize_CLIENT_Representation+0x52>
 801572c:	ea08 0800 	and.w	r8, r8, r0
 8015730:	e7d1      	b.n	80156d6 <uxr_serialize_CLIENT_Representation+0x52>
 8015732:	bf00      	nop

08015734 <uxr_deserialize_CLIENT_Representation>:
 8015734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015738:	2204      	movs	r2, #4
 801573a:	460c      	mov	r4, r1
 801573c:	4605      	mov	r5, r0
 801573e:	f003 facd 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8015742:	2202      	movs	r2, #2
 8015744:	4607      	mov	r7, r0
 8015746:	1d21      	adds	r1, r4, #4
 8015748:	4628      	mov	r0, r5
 801574a:	f003 fac7 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 801574e:	4038      	ands	r0, r7
 8015750:	2202      	movs	r2, #2
 8015752:	1da1      	adds	r1, r4, #6
 8015754:	b2c6      	uxtb	r6, r0
 8015756:	4628      	mov	r0, r5
 8015758:	f003 fac0 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 801575c:	2204      	movs	r2, #4
 801575e:	4006      	ands	r6, r0
 8015760:	f104 0108 	add.w	r1, r4, #8
 8015764:	4628      	mov	r0, r5
 8015766:	f003 fab9 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 801576a:	f104 010c 	add.w	r1, r4, #12
 801576e:	4006      	ands	r6, r0
 8015770:	4628      	mov	r0, r5
 8015772:	f7fc fa33 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8015776:	f104 010d 	add.w	r1, r4, #13
 801577a:	ea06 0700 	and.w	r7, r6, r0
 801577e:	4628      	mov	r0, r5
 8015780:	f7fc f9fe 	bl	8011b80 <ucdr_deserialize_bool>
 8015784:	7b63      	ldrb	r3, [r4, #13]
 8015786:	4007      	ands	r7, r0
 8015788:	b93b      	cbnz	r3, 801579a <uxr_deserialize_CLIENT_Representation+0x66>
 801578a:	f104 011c 	add.w	r1, r4, #28
 801578e:	4628      	mov	r0, r5
 8015790:	f7fc fb3a 	bl	8011e08 <ucdr_deserialize_uint16_t>
 8015794:	4038      	ands	r0, r7
 8015796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801579a:	f104 0110 	add.w	r1, r4, #16
 801579e:	4628      	mov	r0, r5
 80157a0:	f7fc fd4c 	bl	801223c <ucdr_deserialize_uint32_t>
 80157a4:	6923      	ldr	r3, [r4, #16]
 80157a6:	2b01      	cmp	r3, #1
 80157a8:	d903      	bls.n	80157b2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80157aa:	2301      	movs	r3, #1
 80157ac:	75ab      	strb	r3, [r5, #22]
 80157ae:	2700      	movs	r7, #0
 80157b0:	e7eb      	b.n	801578a <uxr_deserialize_CLIENT_Representation+0x56>
 80157b2:	b30b      	cbz	r3, 80157f8 <uxr_deserialize_CLIENT_Representation+0xc4>
 80157b4:	2800      	cmp	r0, #0
 80157b6:	d0fa      	beq.n	80157ae <uxr_deserialize_CLIENT_Representation+0x7a>
 80157b8:	46a0      	mov	r8, r4
 80157ba:	f04f 0900 	mov.w	r9, #0
 80157be:	e001      	b.n	80157c4 <uxr_deserialize_CLIENT_Representation+0x90>
 80157c0:	2e00      	cmp	r6, #0
 80157c2:	d0f4      	beq.n	80157ae <uxr_deserialize_CLIENT_Representation+0x7a>
 80157c4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80157c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80157cc:	4628      	mov	r0, r5
 80157ce:	f003 fc4d 	bl	801906c <ucdr_deserialize_string>
 80157d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80157d6:	4606      	mov	r6, r0
 80157d8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80157dc:	4628      	mov	r0, r5
 80157de:	f003 fc45 	bl	801906c <ucdr_deserialize_string>
 80157e2:	6923      	ldr	r3, [r4, #16]
 80157e4:	f109 0901 	add.w	r9, r9, #1
 80157e8:	4006      	ands	r6, r0
 80157ea:	4599      	cmp	r9, r3
 80157ec:	f108 0808 	add.w	r8, r8, #8
 80157f0:	b2f6      	uxtb	r6, r6
 80157f2:	d3e5      	bcc.n	80157c0 <uxr_deserialize_CLIENT_Representation+0x8c>
 80157f4:	4037      	ands	r7, r6
 80157f6:	e7c8      	b.n	801578a <uxr_deserialize_CLIENT_Representation+0x56>
 80157f8:	4007      	ands	r7, r0
 80157fa:	e7c6      	b.n	801578a <uxr_deserialize_CLIENT_Representation+0x56>

080157fc <uxr_serialize_AGENT_Representation>:
 80157fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015800:	2204      	movs	r2, #4
 8015802:	460f      	mov	r7, r1
 8015804:	4605      	mov	r5, r0
 8015806:	f003 fa05 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 801580a:	2202      	movs	r2, #2
 801580c:	4604      	mov	r4, r0
 801580e:	1d39      	adds	r1, r7, #4
 8015810:	4628      	mov	r0, r5
 8015812:	f003 f9ff 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8015816:	4020      	ands	r0, r4
 8015818:	2202      	movs	r2, #2
 801581a:	1db9      	adds	r1, r7, #6
 801581c:	b2c4      	uxtb	r4, r0
 801581e:	4628      	mov	r0, r5
 8015820:	f003 f9f8 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8015824:	7a39      	ldrb	r1, [r7, #8]
 8015826:	4004      	ands	r4, r0
 8015828:	4628      	mov	r0, r5
 801582a:	f7fc f993 	bl	8011b54 <ucdr_serialize_bool>
 801582e:	7a3b      	ldrb	r3, [r7, #8]
 8015830:	ea00 0804 	and.w	r8, r0, r4
 8015834:	b913      	cbnz	r3, 801583c <uxr_serialize_AGENT_Representation+0x40>
 8015836:	4640      	mov	r0, r8
 8015838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801583c:	68f9      	ldr	r1, [r7, #12]
 801583e:	4628      	mov	r0, r5
 8015840:	f7fc fbcc 	bl	8011fdc <ucdr_serialize_uint32_t>
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	b303      	cbz	r3, 801588a <uxr_serialize_AGENT_Representation+0x8e>
 8015848:	b1d0      	cbz	r0, 8015880 <uxr_serialize_AGENT_Representation+0x84>
 801584a:	463e      	mov	r6, r7
 801584c:	f04f 0900 	mov.w	r9, #0
 8015850:	e001      	b.n	8015856 <uxr_serialize_AGENT_Representation+0x5a>
 8015852:	3608      	adds	r6, #8
 8015854:	b1a4      	cbz	r4, 8015880 <uxr_serialize_AGENT_Representation+0x84>
 8015856:	6931      	ldr	r1, [r6, #16]
 8015858:	4628      	mov	r0, r5
 801585a:	f003 fbf7 	bl	801904c <ucdr_serialize_string>
 801585e:	6971      	ldr	r1, [r6, #20]
 8015860:	4604      	mov	r4, r0
 8015862:	4628      	mov	r0, r5
 8015864:	f003 fbf2 	bl	801904c <ucdr_serialize_string>
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	f109 0901 	add.w	r9, r9, #1
 801586e:	4004      	ands	r4, r0
 8015870:	4599      	cmp	r9, r3
 8015872:	b2e4      	uxtb	r4, r4
 8015874:	d3ed      	bcc.n	8015852 <uxr_serialize_AGENT_Representation+0x56>
 8015876:	ea08 0804 	and.w	r8, r8, r4
 801587a:	4640      	mov	r0, r8
 801587c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015880:	f04f 0800 	mov.w	r8, #0
 8015884:	4640      	mov	r0, r8
 8015886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801588a:	ea08 0800 	and.w	r8, r8, r0
 801588e:	e7d2      	b.n	8015836 <uxr_serialize_AGENT_Representation+0x3a>

08015890 <uxr_serialize_DATAWRITER_Representation>:
 8015890:	b570      	push	{r4, r5, r6, lr}
 8015892:	460d      	mov	r5, r1
 8015894:	7809      	ldrb	r1, [r1, #0]
 8015896:	4606      	mov	r6, r0
 8015898:	f7fc f98a 	bl	8011bb0 <ucdr_serialize_uint8_t>
 801589c:	4604      	mov	r4, r0
 801589e:	b130      	cbz	r0, 80158ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 80158a0:	782b      	ldrb	r3, [r5, #0]
 80158a2:	2b02      	cmp	r3, #2
 80158a4:	d00c      	beq.n	80158c0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80158a6:	2b03      	cmp	r3, #3
 80158a8:	d010      	beq.n	80158cc <uxr_serialize_DATAWRITER_Representation+0x3c>
 80158aa:	2b01      	cmp	r3, #1
 80158ac:	d008      	beq.n	80158c0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80158ae:	2202      	movs	r2, #2
 80158b0:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80158b4:	4630      	mov	r0, r6
 80158b6:	f003 f9ad 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 80158ba:	4020      	ands	r0, r4
 80158bc:	b2c0      	uxtb	r0, r0
 80158be:	bd70      	pop	{r4, r5, r6, pc}
 80158c0:	6869      	ldr	r1, [r5, #4]
 80158c2:	4630      	mov	r0, r6
 80158c4:	f003 fbc2 	bl	801904c <ucdr_serialize_string>
 80158c8:	4604      	mov	r4, r0
 80158ca:	e7f0      	b.n	80158ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 80158cc:	4629      	mov	r1, r5
 80158ce:	4630      	mov	r0, r6
 80158d0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80158d4:	3104      	adds	r1, #4
 80158d6:	f7fe f8d7 	bl	8013a88 <ucdr_serialize_sequence_uint8_t>
 80158da:	4604      	mov	r4, r0
 80158dc:	e7e7      	b.n	80158ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 80158de:	bf00      	nop

080158e0 <uxr_serialize_ObjectVariant.part.0>:
 80158e0:	b570      	push	{r4, r5, r6, lr}
 80158e2:	780b      	ldrb	r3, [r1, #0]
 80158e4:	3b01      	subs	r3, #1
 80158e6:	460c      	mov	r4, r1
 80158e8:	4605      	mov	r5, r0
 80158ea:	2b0d      	cmp	r3, #13
 80158ec:	d854      	bhi.n	8015998 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80158ee:	e8df f003 	tbb	[pc, r3]
 80158f2:	0730      	.short	0x0730
 80158f4:	07071b1b 	.word	0x07071b1b
 80158f8:	0c530707 	.word	0x0c530707
 80158fc:	494e0c0c 	.word	0x494e0c0c
 8015900:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015904:	3104      	adds	r1, #4
 8015906:	f7ff bfc3 	b.w	8015890 <uxr_serialize_DATAWRITER_Representation>
 801590a:	7909      	ldrb	r1, [r1, #4]
 801590c:	f7fc f950 	bl	8011bb0 <ucdr_serialize_uint8_t>
 8015910:	b1e8      	cbz	r0, 801594e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8015912:	7923      	ldrb	r3, [r4, #4]
 8015914:	2b01      	cmp	r3, #1
 8015916:	d001      	beq.n	801591c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8015918:	2b02      	cmp	r3, #2
 801591a:	d13d      	bne.n	8015998 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801591c:	68a1      	ldr	r1, [r4, #8]
 801591e:	4628      	mov	r0, r5
 8015920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015924:	f003 bb92 	b.w	801904c <ucdr_serialize_string>
 8015928:	7909      	ldrb	r1, [r1, #4]
 801592a:	f7fc f941 	bl	8011bb0 <ucdr_serialize_uint8_t>
 801592e:	4606      	mov	r6, r0
 8015930:	b120      	cbz	r0, 801593c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015932:	7923      	ldrb	r3, [r4, #4]
 8015934:	2b02      	cmp	r3, #2
 8015936:	d039      	beq.n	80159ac <uxr_serialize_ObjectVariant.part.0+0xcc>
 8015938:	2b03      	cmp	r3, #3
 801593a:	d02f      	beq.n	801599c <uxr_serialize_ObjectVariant.part.0+0xbc>
 801593c:	2202      	movs	r2, #2
 801593e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8015942:	4628      	mov	r0, r5
 8015944:	f003 f966 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8015948:	4030      	ands	r0, r6
 801594a:	b2c0      	uxtb	r0, r0
 801594c:	bd70      	pop	{r4, r5, r6, pc}
 801594e:	2000      	movs	r0, #0
 8015950:	bd70      	pop	{r4, r5, r6, pc}
 8015952:	7909      	ldrb	r1, [r1, #4]
 8015954:	f7fc f92c 	bl	8011bb0 <ucdr_serialize_uint8_t>
 8015958:	4606      	mov	r6, r0
 801595a:	b158      	cbz	r0, 8015974 <uxr_serialize_ObjectVariant.part.0+0x94>
 801595c:	7923      	ldrb	r3, [r4, #4]
 801595e:	2b02      	cmp	r3, #2
 8015960:	d003      	beq.n	801596a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8015962:	2b03      	cmp	r3, #3
 8015964:	d028      	beq.n	80159b8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8015966:	2b01      	cmp	r3, #1
 8015968:	d104      	bne.n	8015974 <uxr_serialize_ObjectVariant.part.0+0x94>
 801596a:	68a1      	ldr	r1, [r4, #8]
 801596c:	4628      	mov	r0, r5
 801596e:	f003 fb6d 	bl	801904c <ucdr_serialize_string>
 8015972:	4606      	mov	r6, r0
 8015974:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8015978:	4628      	mov	r0, r5
 801597a:	f7fc fe55 	bl	8012628 <ucdr_serialize_int16_t>
 801597e:	4030      	ands	r0, r6
 8015980:	b2c0      	uxtb	r0, r0
 8015982:	bd70      	pop	{r4, r5, r6, pc}
 8015984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015988:	3104      	adds	r1, #4
 801598a:	f7ff be7b 	b.w	8015684 <uxr_serialize_CLIENT_Representation>
 801598e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015992:	3104      	adds	r1, #4
 8015994:	f7ff bf32 	b.w	80157fc <uxr_serialize_AGENT_Representation>
 8015998:	2001      	movs	r0, #1
 801599a:	bd70      	pop	{r4, r5, r6, pc}
 801599c:	68a2      	ldr	r2, [r4, #8]
 801599e:	f104 010c 	add.w	r1, r4, #12
 80159a2:	4628      	mov	r0, r5
 80159a4:	f7fe f870 	bl	8013a88 <ucdr_serialize_sequence_uint8_t>
 80159a8:	4606      	mov	r6, r0
 80159aa:	e7c7      	b.n	801593c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80159ac:	68a1      	ldr	r1, [r4, #8]
 80159ae:	4628      	mov	r0, r5
 80159b0:	f003 fb4c 	bl	801904c <ucdr_serialize_string>
 80159b4:	4606      	mov	r6, r0
 80159b6:	e7c1      	b.n	801593c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80159b8:	68a2      	ldr	r2, [r4, #8]
 80159ba:	f104 010c 	add.w	r1, r4, #12
 80159be:	4628      	mov	r0, r5
 80159c0:	f7fe f862 	bl	8013a88 <ucdr_serialize_sequence_uint8_t>
 80159c4:	4606      	mov	r6, r0
 80159c6:	e7d5      	b.n	8015974 <uxr_serialize_ObjectVariant.part.0+0x94>

080159c8 <uxr_deserialize_DATAWRITER_Representation>:
 80159c8:	b570      	push	{r4, r5, r6, lr}
 80159ca:	4606      	mov	r6, r0
 80159cc:	460d      	mov	r5, r1
 80159ce:	f7fc f905 	bl	8011bdc <ucdr_deserialize_uint8_t>
 80159d2:	4604      	mov	r4, r0
 80159d4:	b130      	cbz	r0, 80159e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80159d6:	782b      	ldrb	r3, [r5, #0]
 80159d8:	2b02      	cmp	r3, #2
 80159da:	d00c      	beq.n	80159f6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80159dc:	2b03      	cmp	r3, #3
 80159de:	d012      	beq.n	8015a06 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80159e0:	2b01      	cmp	r3, #1
 80159e2:	d008      	beq.n	80159f6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80159e4:	2202      	movs	r2, #2
 80159e6:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80159ea:	4630      	mov	r0, r6
 80159ec:	f003 f976 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 80159f0:	4020      	ands	r0, r4
 80159f2:	b2c0      	uxtb	r0, r0
 80159f4:	bd70      	pop	{r4, r5, r6, pc}
 80159f6:	6869      	ldr	r1, [r5, #4]
 80159f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80159fc:	4630      	mov	r0, r6
 80159fe:	f003 fb35 	bl	801906c <ucdr_deserialize_string>
 8015a02:	4604      	mov	r4, r0
 8015a04:	e7ee      	b.n	80159e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015a06:	1d2b      	adds	r3, r5, #4
 8015a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015a0c:	f105 0108 	add.w	r1, r5, #8
 8015a10:	4630      	mov	r0, r6
 8015a12:	f7fe f84b 	bl	8013aac <ucdr_deserialize_sequence_uint8_t>
 8015a16:	4604      	mov	r4, r0
 8015a18:	e7e4      	b.n	80159e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015a1a:	bf00      	nop

08015a1c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8015a1c:	b570      	push	{r4, r5, r6, lr}
 8015a1e:	460d      	mov	r5, r1
 8015a20:	7809      	ldrb	r1, [r1, #0]
 8015a22:	4606      	mov	r6, r0
 8015a24:	f7fc f896 	bl	8011b54 <ucdr_serialize_bool>
 8015a28:	782b      	ldrb	r3, [r5, #0]
 8015a2a:	4604      	mov	r4, r0
 8015a2c:	b94b      	cbnz	r3, 8015a42 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8015a2e:	7a29      	ldrb	r1, [r5, #8]
 8015a30:	4630      	mov	r0, r6
 8015a32:	f7fc f88f 	bl	8011b54 <ucdr_serialize_bool>
 8015a36:	7a2b      	ldrb	r3, [r5, #8]
 8015a38:	4004      	ands	r4, r0
 8015a3a:	b2e4      	uxtb	r4, r4
 8015a3c:	b943      	cbnz	r3, 8015a50 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8015a3e:	4620      	mov	r0, r4
 8015a40:	bd70      	pop	{r4, r5, r6, pc}
 8015a42:	6869      	ldr	r1, [r5, #4]
 8015a44:	4630      	mov	r0, r6
 8015a46:	f003 fb01 	bl	801904c <ucdr_serialize_string>
 8015a4a:	4004      	ands	r4, r0
 8015a4c:	b2e4      	uxtb	r4, r4
 8015a4e:	e7ee      	b.n	8015a2e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8015a50:	68e9      	ldr	r1, [r5, #12]
 8015a52:	4630      	mov	r0, r6
 8015a54:	f003 fafa 	bl	801904c <ucdr_serialize_string>
 8015a58:	4004      	ands	r4, r0
 8015a5a:	4620      	mov	r0, r4
 8015a5c:	bd70      	pop	{r4, r5, r6, pc}
 8015a5e:	bf00      	nop

08015a60 <uxr_serialize_OBJK_Topic_Binary>:
 8015a60:	b570      	push	{r4, r5, r6, lr}
 8015a62:	460d      	mov	r5, r1
 8015a64:	6809      	ldr	r1, [r1, #0]
 8015a66:	4606      	mov	r6, r0
 8015a68:	f003 faf0 	bl	801904c <ucdr_serialize_string>
 8015a6c:	7929      	ldrb	r1, [r5, #4]
 8015a6e:	4604      	mov	r4, r0
 8015a70:	4630      	mov	r0, r6
 8015a72:	f7fc f86f 	bl	8011b54 <ucdr_serialize_bool>
 8015a76:	792b      	ldrb	r3, [r5, #4]
 8015a78:	4004      	ands	r4, r0
 8015a7a:	b2e4      	uxtb	r4, r4
 8015a7c:	b943      	cbnz	r3, 8015a90 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8015a7e:	7b29      	ldrb	r1, [r5, #12]
 8015a80:	4630      	mov	r0, r6
 8015a82:	f7fc f867 	bl	8011b54 <ucdr_serialize_bool>
 8015a86:	7b2b      	ldrb	r3, [r5, #12]
 8015a88:	4004      	ands	r4, r0
 8015a8a:	b93b      	cbnz	r3, 8015a9c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8015a8c:	4620      	mov	r0, r4
 8015a8e:	bd70      	pop	{r4, r5, r6, pc}
 8015a90:	68a9      	ldr	r1, [r5, #8]
 8015a92:	4630      	mov	r0, r6
 8015a94:	f003 fada 	bl	801904c <ucdr_serialize_string>
 8015a98:	4004      	ands	r4, r0
 8015a9a:	e7f0      	b.n	8015a7e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8015a9c:	6929      	ldr	r1, [r5, #16]
 8015a9e:	4630      	mov	r0, r6
 8015aa0:	f003 fad4 	bl	801904c <ucdr_serialize_string>
 8015aa4:	4004      	ands	r4, r0
 8015aa6:	b2e4      	uxtb	r4, r4
 8015aa8:	4620      	mov	r0, r4
 8015aaa:	bd70      	pop	{r4, r5, r6, pc}

08015aac <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8015aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab0:	460c      	mov	r4, r1
 8015ab2:	7809      	ldrb	r1, [r1, #0]
 8015ab4:	4606      	mov	r6, r0
 8015ab6:	f7fc f84d 	bl	8011b54 <ucdr_serialize_bool>
 8015aba:	7823      	ldrb	r3, [r4, #0]
 8015abc:	4605      	mov	r5, r0
 8015abe:	b96b      	cbnz	r3, 8015adc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8015ac0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8015ac4:	4630      	mov	r0, r6
 8015ac6:	f7fc f845 	bl	8011b54 <ucdr_serialize_bool>
 8015aca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015ace:	4005      	ands	r5, r0
 8015ad0:	b2ed      	uxtb	r5, r5
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d169      	bne.n	8015baa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8015ad6:	4628      	mov	r0, r5
 8015ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015adc:	6861      	ldr	r1, [r4, #4]
 8015ade:	4630      	mov	r0, r6
 8015ae0:	f7fc fa7c 	bl	8011fdc <ucdr_serialize_uint32_t>
 8015ae4:	6863      	ldr	r3, [r4, #4]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d06b      	beq.n	8015bc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8015aea:	2800      	cmp	r0, #0
 8015aec:	d067      	beq.n	8015bbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015aee:	68a1      	ldr	r1, [r4, #8]
 8015af0:	4630      	mov	r0, r6
 8015af2:	f003 faab 	bl	801904c <ucdr_serialize_string>
 8015af6:	6863      	ldr	r3, [r4, #4]
 8015af8:	2b01      	cmp	r3, #1
 8015afa:	d953      	bls.n	8015ba4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015afc:	2800      	cmp	r0, #0
 8015afe:	d05e      	beq.n	8015bbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b00:	68e1      	ldr	r1, [r4, #12]
 8015b02:	4630      	mov	r0, r6
 8015b04:	f003 faa2 	bl	801904c <ucdr_serialize_string>
 8015b08:	6863      	ldr	r3, [r4, #4]
 8015b0a:	2b02      	cmp	r3, #2
 8015b0c:	d94a      	bls.n	8015ba4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b0e:	2800      	cmp	r0, #0
 8015b10:	d055      	beq.n	8015bbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b12:	6921      	ldr	r1, [r4, #16]
 8015b14:	4630      	mov	r0, r6
 8015b16:	f003 fa99 	bl	801904c <ucdr_serialize_string>
 8015b1a:	6863      	ldr	r3, [r4, #4]
 8015b1c:	2b03      	cmp	r3, #3
 8015b1e:	d941      	bls.n	8015ba4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b20:	2800      	cmp	r0, #0
 8015b22:	d04c      	beq.n	8015bbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b24:	6961      	ldr	r1, [r4, #20]
 8015b26:	4630      	mov	r0, r6
 8015b28:	f003 fa90 	bl	801904c <ucdr_serialize_string>
 8015b2c:	6863      	ldr	r3, [r4, #4]
 8015b2e:	2b04      	cmp	r3, #4
 8015b30:	d938      	bls.n	8015ba4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b32:	2800      	cmp	r0, #0
 8015b34:	d043      	beq.n	8015bbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b36:	69a1      	ldr	r1, [r4, #24]
 8015b38:	4630      	mov	r0, r6
 8015b3a:	f003 fa87 	bl	801904c <ucdr_serialize_string>
 8015b3e:	6863      	ldr	r3, [r4, #4]
 8015b40:	2b05      	cmp	r3, #5
 8015b42:	d92f      	bls.n	8015ba4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b44:	2800      	cmp	r0, #0
 8015b46:	d03a      	beq.n	8015bbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b48:	69e1      	ldr	r1, [r4, #28]
 8015b4a:	4630      	mov	r0, r6
 8015b4c:	f003 fa7e 	bl	801904c <ucdr_serialize_string>
 8015b50:	6863      	ldr	r3, [r4, #4]
 8015b52:	2b06      	cmp	r3, #6
 8015b54:	d926      	bls.n	8015ba4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b56:	b390      	cbz	r0, 8015bbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b58:	6a21      	ldr	r1, [r4, #32]
 8015b5a:	4630      	mov	r0, r6
 8015b5c:	f003 fa76 	bl	801904c <ucdr_serialize_string>
 8015b60:	6863      	ldr	r3, [r4, #4]
 8015b62:	2b07      	cmp	r3, #7
 8015b64:	d91e      	bls.n	8015ba4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b66:	b350      	cbz	r0, 8015bbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015b6a:	4630      	mov	r0, r6
 8015b6c:	f003 fa6e 	bl	801904c <ucdr_serialize_string>
 8015b70:	6863      	ldr	r3, [r4, #4]
 8015b72:	2b08      	cmp	r3, #8
 8015b74:	d916      	bls.n	8015ba4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b76:	b310      	cbz	r0, 8015bbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b78:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015b7a:	4630      	mov	r0, r6
 8015b7c:	f003 fa66 	bl	801904c <ucdr_serialize_string>
 8015b80:	6863      	ldr	r3, [r4, #4]
 8015b82:	2b09      	cmp	r3, #9
 8015b84:	d90e      	bls.n	8015ba4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b86:	b1d0      	cbz	r0, 8015bbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b88:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8015b8c:	2709      	movs	r7, #9
 8015b8e:	e000      	b.n	8015b92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8015b90:	b1a8      	cbz	r0, 8015bbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b92:	f858 1b04 	ldr.w	r1, [r8], #4
 8015b96:	4630      	mov	r0, r6
 8015b98:	f003 fa58 	bl	801904c <ucdr_serialize_string>
 8015b9c:	6862      	ldr	r2, [r4, #4]
 8015b9e:	3701      	adds	r7, #1
 8015ba0:	4297      	cmp	r7, r2
 8015ba2:	d3f5      	bcc.n	8015b90 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8015ba4:	4005      	ands	r5, r0
 8015ba6:	b2ed      	uxtb	r5, r5
 8015ba8:	e78a      	b.n	8015ac0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015baa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015bac:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015bb0:	4630      	mov	r0, r6
 8015bb2:	f7fd ff69 	bl	8013a88 <ucdr_serialize_sequence_uint8_t>
 8015bb6:	4005      	ands	r5, r0
 8015bb8:	4628      	mov	r0, r5
 8015bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bbe:	2500      	movs	r5, #0
 8015bc0:	e77e      	b.n	8015ac0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015bc2:	4028      	ands	r0, r5
 8015bc4:	b2c5      	uxtb	r5, r0
 8015bc6:	e77b      	b.n	8015ac0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08015bc8 <uxr_serialize_OBJK_Publisher_Binary>:
 8015bc8:	b570      	push	{r4, r5, r6, lr}
 8015bca:	460d      	mov	r5, r1
 8015bcc:	7809      	ldrb	r1, [r1, #0]
 8015bce:	4606      	mov	r6, r0
 8015bd0:	f7fb ffc0 	bl	8011b54 <ucdr_serialize_bool>
 8015bd4:	782b      	ldrb	r3, [r5, #0]
 8015bd6:	4604      	mov	r4, r0
 8015bd8:	b94b      	cbnz	r3, 8015bee <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8015bda:	7a29      	ldrb	r1, [r5, #8]
 8015bdc:	4630      	mov	r0, r6
 8015bde:	f7fb ffb9 	bl	8011b54 <ucdr_serialize_bool>
 8015be2:	7a2b      	ldrb	r3, [r5, #8]
 8015be4:	4004      	ands	r4, r0
 8015be6:	b2e4      	uxtb	r4, r4
 8015be8:	b943      	cbnz	r3, 8015bfc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8015bea:	4620      	mov	r0, r4
 8015bec:	bd70      	pop	{r4, r5, r6, pc}
 8015bee:	6869      	ldr	r1, [r5, #4]
 8015bf0:	4630      	mov	r0, r6
 8015bf2:	f003 fa2b 	bl	801904c <ucdr_serialize_string>
 8015bf6:	4004      	ands	r4, r0
 8015bf8:	b2e4      	uxtb	r4, r4
 8015bfa:	e7ee      	b.n	8015bda <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8015bfc:	f105 010c 	add.w	r1, r5, #12
 8015c00:	4630      	mov	r0, r6
 8015c02:	f7ff ff53 	bl	8015aac <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8015c06:	4004      	ands	r4, r0
 8015c08:	4620      	mov	r0, r4
 8015c0a:	bd70      	pop	{r4, r5, r6, pc}

08015c0c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8015c0c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8015c10:	4688      	mov	r8, r1
 8015c12:	8809      	ldrh	r1, [r1, #0]
 8015c14:	4681      	mov	r9, r0
 8015c16:	f7fb fff7 	bl	8011c08 <ucdr_serialize_uint16_t>
 8015c1a:	f898 1002 	ldrb.w	r1, [r8, #2]
 8015c1e:	4606      	mov	r6, r0
 8015c20:	4648      	mov	r0, r9
 8015c22:	f7fb ff97 	bl	8011b54 <ucdr_serialize_bool>
 8015c26:	f898 3002 	ldrb.w	r3, [r8, #2]
 8015c2a:	4006      	ands	r6, r0
 8015c2c:	b2f5      	uxtb	r5, r6
 8015c2e:	b9eb      	cbnz	r3, 8015c6c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8015c30:	f898 1006 	ldrb.w	r1, [r8, #6]
 8015c34:	4648      	mov	r0, r9
 8015c36:	f7fb ff8d 	bl	8011b54 <ucdr_serialize_bool>
 8015c3a:	f898 3006 	ldrb.w	r3, [r8, #6]
 8015c3e:	4005      	ands	r5, r0
 8015c40:	bb7b      	cbnz	r3, 8015ca2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8015c42:	f898 100c 	ldrb.w	r1, [r8, #12]
 8015c46:	4648      	mov	r0, r9
 8015c48:	f7fb ff84 	bl	8011b54 <ucdr_serialize_bool>
 8015c4c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8015c50:	4005      	ands	r5, r0
 8015c52:	b9f3      	cbnz	r3, 8015c92 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8015c54:	f898 1014 	ldrb.w	r1, [r8, #20]
 8015c58:	4648      	mov	r0, r9
 8015c5a:	f7fb ff7b 	bl	8011b54 <ucdr_serialize_bool>
 8015c5e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8015c62:	4005      	ands	r5, r0
 8015c64:	b94b      	cbnz	r3, 8015c7a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8015c66:	4628      	mov	r0, r5
 8015c68:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015c6c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8015c70:	4648      	mov	r0, r9
 8015c72:	f7fb ffc9 	bl	8011c08 <ucdr_serialize_uint16_t>
 8015c76:	4005      	ands	r5, r0
 8015c78:	e7da      	b.n	8015c30 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8015c7a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8015c7e:	f108 011c 	add.w	r1, r8, #28
 8015c82:	4648      	mov	r0, r9
 8015c84:	f7fd ff00 	bl	8013a88 <ucdr_serialize_sequence_uint8_t>
 8015c88:	4028      	ands	r0, r5
 8015c8a:	b2c5      	uxtb	r5, r0
 8015c8c:	4628      	mov	r0, r5
 8015c8e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015c92:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015c96:	4648      	mov	r0, r9
 8015c98:	f7fc f9a0 	bl	8011fdc <ucdr_serialize_uint32_t>
 8015c9c:	4028      	ands	r0, r5
 8015c9e:	b2c5      	uxtb	r5, r0
 8015ca0:	e7d8      	b.n	8015c54 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8015ca2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8015ca6:	4648      	mov	r0, r9
 8015ca8:	f7fc f998 	bl	8011fdc <ucdr_serialize_uint32_t>
 8015cac:	4028      	ands	r0, r5
 8015cae:	b2c5      	uxtb	r5, r0
 8015cb0:	e7c7      	b.n	8015c42 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8015cb2:	bf00      	nop

08015cb4 <uxr_serialize_OBJK_DataWriter_Binary>:
 8015cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cb6:	2202      	movs	r2, #2
 8015cb8:	460d      	mov	r5, r1
 8015cba:	4606      	mov	r6, r0
 8015cbc:	f002 ffaa 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8015cc0:	78a9      	ldrb	r1, [r5, #2]
 8015cc2:	4604      	mov	r4, r0
 8015cc4:	4630      	mov	r0, r6
 8015cc6:	f7fb ff45 	bl	8011b54 <ucdr_serialize_bool>
 8015cca:	78ab      	ldrb	r3, [r5, #2]
 8015ccc:	4004      	ands	r4, r0
 8015cce:	b2e4      	uxtb	r4, r4
 8015cd0:	b90b      	cbnz	r3, 8015cd6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8015cd2:	4620      	mov	r0, r4
 8015cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cd6:	f105 0108 	add.w	r1, r5, #8
 8015cda:	4630      	mov	r0, r6
 8015cdc:	f7ff ff96 	bl	8015c0c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015ce0:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8015ce4:	4607      	mov	r7, r0
 8015ce6:	4630      	mov	r0, r6
 8015ce8:	f7fb ff34 	bl	8011b54 <ucdr_serialize_bool>
 8015cec:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8015cf0:	4038      	ands	r0, r7
 8015cf2:	b2c7      	uxtb	r7, r0
 8015cf4:	b913      	cbnz	r3, 8015cfc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8015cf6:	403c      	ands	r4, r7
 8015cf8:	4620      	mov	r0, r4
 8015cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cfc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8015d00:	4630      	mov	r0, r6
 8015d02:	f7fc fbc1 	bl	8012488 <ucdr_serialize_uint64_t>
 8015d06:	4007      	ands	r7, r0
 8015d08:	e7f5      	b.n	8015cf6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8015d0a:	bf00      	nop

08015d0c <uxr_deserialize_ObjectVariant>:
 8015d0c:	b570      	push	{r4, r5, r6, lr}
 8015d0e:	4605      	mov	r5, r0
 8015d10:	460e      	mov	r6, r1
 8015d12:	f7fb ff63 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8015d16:	b168      	cbz	r0, 8015d34 <uxr_deserialize_ObjectVariant+0x28>
 8015d18:	7833      	ldrb	r3, [r6, #0]
 8015d1a:	3b01      	subs	r3, #1
 8015d1c:	4604      	mov	r4, r0
 8015d1e:	2b0d      	cmp	r3, #13
 8015d20:	d809      	bhi.n	8015d36 <uxr_deserialize_ObjectVariant+0x2a>
 8015d22:	e8df f003 	tbb	[pc, r3]
 8015d26:	0a41      	.short	0x0a41
 8015d28:	0a0a2323 	.word	0x0a0a2323
 8015d2c:	10080a0a 	.word	0x10080a0a
 8015d30:	565c1010 	.word	0x565c1010
 8015d34:	2400      	movs	r4, #0
 8015d36:	4620      	mov	r0, r4
 8015d38:	bd70      	pop	{r4, r5, r6, pc}
 8015d3a:	1d31      	adds	r1, r6, #4
 8015d3c:	4628      	mov	r0, r5
 8015d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d42:	f7ff be41 	b.w	80159c8 <uxr_deserialize_DATAWRITER_Representation>
 8015d46:	1d31      	adds	r1, r6, #4
 8015d48:	4628      	mov	r0, r5
 8015d4a:	f7fb ff47 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8015d4e:	2800      	cmp	r0, #0
 8015d50:	d0f0      	beq.n	8015d34 <uxr_deserialize_ObjectVariant+0x28>
 8015d52:	7933      	ldrb	r3, [r6, #4]
 8015d54:	2b01      	cmp	r3, #1
 8015d56:	d001      	beq.n	8015d5c <uxr_deserialize_ObjectVariant+0x50>
 8015d58:	2b02      	cmp	r3, #2
 8015d5a:	d1ec      	bne.n	8015d36 <uxr_deserialize_ObjectVariant+0x2a>
 8015d5c:	68b1      	ldr	r1, [r6, #8]
 8015d5e:	4628      	mov	r0, r5
 8015d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d68:	f003 b980 	b.w	801906c <ucdr_deserialize_string>
 8015d6c:	1d31      	adds	r1, r6, #4
 8015d6e:	4628      	mov	r0, r5
 8015d70:	f7fb ff34 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8015d74:	4604      	mov	r4, r0
 8015d76:	b170      	cbz	r0, 8015d96 <uxr_deserialize_ObjectVariant+0x8a>
 8015d78:	7933      	ldrb	r3, [r6, #4]
 8015d7a:	2b02      	cmp	r3, #2
 8015d7c:	d04c      	beq.n	8015e18 <uxr_deserialize_ObjectVariant+0x10c>
 8015d7e:	2b03      	cmp	r3, #3
 8015d80:	d109      	bne.n	8015d96 <uxr_deserialize_ObjectVariant+0x8a>
 8015d82:	f106 0308 	add.w	r3, r6, #8
 8015d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015d8a:	f106 010c 	add.w	r1, r6, #12
 8015d8e:	4628      	mov	r0, r5
 8015d90:	f7fd fe8c 	bl	8013aac <ucdr_deserialize_sequence_uint8_t>
 8015d94:	4604      	mov	r4, r0
 8015d96:	2202      	movs	r2, #2
 8015d98:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8015d9c:	4628      	mov	r0, r5
 8015d9e:	f002 ff9d 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8015da2:	4020      	ands	r0, r4
 8015da4:	b2c4      	uxtb	r4, r0
 8015da6:	e7c6      	b.n	8015d36 <uxr_deserialize_ObjectVariant+0x2a>
 8015da8:	1d31      	adds	r1, r6, #4
 8015daa:	4628      	mov	r0, r5
 8015dac:	f7fb ff16 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8015db0:	4604      	mov	r4, r0
 8015db2:	b130      	cbz	r0, 8015dc2 <uxr_deserialize_ObjectVariant+0xb6>
 8015db4:	7933      	ldrb	r3, [r6, #4]
 8015db6:	2b02      	cmp	r3, #2
 8015db8:	d036      	beq.n	8015e28 <uxr_deserialize_ObjectVariant+0x11c>
 8015dba:	2b03      	cmp	r3, #3
 8015dbc:	d03c      	beq.n	8015e38 <uxr_deserialize_ObjectVariant+0x12c>
 8015dbe:	2b01      	cmp	r3, #1
 8015dc0:	d032      	beq.n	8015e28 <uxr_deserialize_ObjectVariant+0x11c>
 8015dc2:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8015dc6:	4628      	mov	r0, r5
 8015dc8:	f7fc fcae 	bl	8012728 <ucdr_deserialize_int16_t>
 8015dcc:	4020      	ands	r0, r4
 8015dce:	b2c4      	uxtb	r4, r0
 8015dd0:	e7b1      	b.n	8015d36 <uxr_deserialize_ObjectVariant+0x2a>
 8015dd2:	1d31      	adds	r1, r6, #4
 8015dd4:	4628      	mov	r0, r5
 8015dd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015dda:	f7ff bcab 	b.w	8015734 <uxr_deserialize_CLIENT_Representation>
 8015dde:	2204      	movs	r2, #4
 8015de0:	18b1      	adds	r1, r6, r2
 8015de2:	4628      	mov	r0, r5
 8015de4:	f002 ff7a 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8015de8:	2202      	movs	r2, #2
 8015dea:	f106 0108 	add.w	r1, r6, #8
 8015dee:	4604      	mov	r4, r0
 8015df0:	4628      	mov	r0, r5
 8015df2:	f002 ff73 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8015df6:	2202      	movs	r2, #2
 8015df8:	4004      	ands	r4, r0
 8015dfa:	f106 010a 	add.w	r1, r6, #10
 8015dfe:	4628      	mov	r0, r5
 8015e00:	f002 ff6c 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8015e04:	b2e4      	uxtb	r4, r4
 8015e06:	4603      	mov	r3, r0
 8015e08:	f106 010c 	add.w	r1, r6, #12
 8015e0c:	4628      	mov	r0, r5
 8015e0e:	401c      	ands	r4, r3
 8015e10:	f7fb feb6 	bl	8011b80 <ucdr_deserialize_bool>
 8015e14:	4004      	ands	r4, r0
 8015e16:	e78e      	b.n	8015d36 <uxr_deserialize_ObjectVariant+0x2a>
 8015e18:	68b1      	ldr	r1, [r6, #8]
 8015e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015e1e:	4628      	mov	r0, r5
 8015e20:	f003 f924 	bl	801906c <ucdr_deserialize_string>
 8015e24:	4604      	mov	r4, r0
 8015e26:	e7b6      	b.n	8015d96 <uxr_deserialize_ObjectVariant+0x8a>
 8015e28:	68b1      	ldr	r1, [r6, #8]
 8015e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015e2e:	4628      	mov	r0, r5
 8015e30:	f003 f91c 	bl	801906c <ucdr_deserialize_string>
 8015e34:	4604      	mov	r4, r0
 8015e36:	e7c4      	b.n	8015dc2 <uxr_deserialize_ObjectVariant+0xb6>
 8015e38:	f106 0308 	add.w	r3, r6, #8
 8015e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015e40:	f106 010c 	add.w	r1, r6, #12
 8015e44:	4628      	mov	r0, r5
 8015e46:	f7fd fe31 	bl	8013aac <ucdr_deserialize_sequence_uint8_t>
 8015e4a:	4604      	mov	r4, r0
 8015e4c:	e7b9      	b.n	8015dc2 <uxr_deserialize_ObjectVariant+0xb6>
 8015e4e:	bf00      	nop

08015e50 <uxr_deserialize_BaseObjectRequest>:
 8015e50:	b570      	push	{r4, r5, r6, lr}
 8015e52:	2202      	movs	r2, #2
 8015e54:	4605      	mov	r5, r0
 8015e56:	460e      	mov	r6, r1
 8015e58:	f002 ff40 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8015e5c:	2202      	movs	r2, #2
 8015e5e:	4604      	mov	r4, r0
 8015e60:	18b1      	adds	r1, r6, r2
 8015e62:	4628      	mov	r0, r5
 8015e64:	f002 ff3a 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8015e68:	4020      	ands	r0, r4
 8015e6a:	b2c0      	uxtb	r0, r0
 8015e6c:	bd70      	pop	{r4, r5, r6, pc}
 8015e6e:	bf00      	nop

08015e70 <uxr_serialize_ActivityInfoVariant>:
 8015e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e74:	460d      	mov	r5, r1
 8015e76:	7809      	ldrb	r1, [r1, #0]
 8015e78:	4607      	mov	r7, r0
 8015e7a:	f7fb fe99 	bl	8011bb0 <ucdr_serialize_uint8_t>
 8015e7e:	4681      	mov	r9, r0
 8015e80:	b138      	cbz	r0, 8015e92 <uxr_serialize_ActivityInfoVariant+0x22>
 8015e82:	782b      	ldrb	r3, [r5, #0]
 8015e84:	2b06      	cmp	r3, #6
 8015e86:	f000 8082 	beq.w	8015f8e <uxr_serialize_ActivityInfoVariant+0x11e>
 8015e8a:	2b0d      	cmp	r3, #13
 8015e8c:	d016      	beq.n	8015ebc <uxr_serialize_ActivityInfoVariant+0x4c>
 8015e8e:	2b05      	cmp	r3, #5
 8015e90:	d002      	beq.n	8015e98 <uxr_serialize_ActivityInfoVariant+0x28>
 8015e92:	4648      	mov	r0, r9
 8015e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e98:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015e9c:	4638      	mov	r0, r7
 8015e9e:	f7fc fbc3 	bl	8012628 <ucdr_serialize_int16_t>
 8015ea2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8015ea6:	4681      	mov	r9, r0
 8015ea8:	4638      	mov	r0, r7
 8015eaa:	f7fc faed 	bl	8012488 <ucdr_serialize_uint64_t>
 8015eae:	ea09 0000 	and.w	r0, r9, r0
 8015eb2:	fa5f f980 	uxtb.w	r9, r0
 8015eb6:	4648      	mov	r0, r9
 8015eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ebc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015ec0:	4638      	mov	r0, r7
 8015ec2:	f7fc fbb1 	bl	8012628 <ucdr_serialize_int16_t>
 8015ec6:	68e9      	ldr	r1, [r5, #12]
 8015ec8:	4681      	mov	r9, r0
 8015eca:	4638      	mov	r0, r7
 8015ecc:	f7fc f886 	bl	8011fdc <ucdr_serialize_uint32_t>
 8015ed0:	68eb      	ldr	r3, [r5, #12]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d0eb      	beq.n	8015eae <uxr_serialize_ActivityInfoVariant+0x3e>
 8015ed6:	b320      	cbz	r0, 8015f22 <uxr_serialize_ActivityInfoVariant+0xb2>
 8015ed8:	f105 080c 	add.w	r8, r5, #12
 8015edc:	2600      	movs	r6, #0
 8015ede:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8015ee2:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8015ee6:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8015eea:	4638      	mov	r0, r7
 8015eec:	f7fb fe60 	bl	8011bb0 <ucdr_serialize_uint8_t>
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	d053      	beq.n	8015f9c <uxr_serialize_ActivityInfoVariant+0x12c>
 8015ef4:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8015ef8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015efc:	0074      	lsls	r4, r6, #1
 8015efe:	00c9      	lsls	r1, r1, #3
 8015f00:	2b03      	cmp	r3, #3
 8015f02:	d854      	bhi.n	8015fae <uxr_serialize_ActivityInfoVariant+0x13e>
 8015f04:	e8df f003 	tbb	[pc, r3]
 8015f08:	02102132 	.word	0x02102132
 8015f0c:	4441      	add	r1, r8
 8015f0e:	4638      	mov	r0, r7
 8015f10:	6889      	ldr	r1, [r1, #8]
 8015f12:	f003 f89b 	bl	801904c <ucdr_serialize_string>
 8015f16:	68ea      	ldr	r2, [r5, #12]
 8015f18:	3601      	adds	r6, #1
 8015f1a:	4296      	cmp	r6, r2
 8015f1c:	d242      	bcs.n	8015fa4 <uxr_serialize_ActivityInfoVariant+0x134>
 8015f1e:	2800      	cmp	r0, #0
 8015f20:	d1dd      	bne.n	8015ede <uxr_serialize_ActivityInfoVariant+0x6e>
 8015f22:	f04f 0900 	mov.w	r9, #0
 8015f26:	e7b4      	b.n	8015e92 <uxr_serialize_ActivityInfoVariant+0x22>
 8015f28:	3108      	adds	r1, #8
 8015f2a:	4441      	add	r1, r8
 8015f2c:	2210      	movs	r2, #16
 8015f2e:	4638      	mov	r0, r7
 8015f30:	f002 fe70 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8015f34:	4434      	add	r4, r6
 8015f36:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015f3a:	4604      	mov	r4, r0
 8015f3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015f3e:	4638      	mov	r0, r7
 8015f40:	f7fc f84c 	bl	8011fdc <ucdr_serialize_uint32_t>
 8015f44:	4020      	ands	r0, r4
 8015f46:	b2c0      	uxtb	r0, r0
 8015f48:	e7e5      	b.n	8015f16 <uxr_serialize_ActivityInfoVariant+0xa6>
 8015f4a:	3108      	adds	r1, #8
 8015f4c:	4441      	add	r1, r8
 8015f4e:	2204      	movs	r2, #4
 8015f50:	4638      	mov	r0, r7
 8015f52:	f002 fe5f 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8015f56:	4434      	add	r4, r6
 8015f58:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015f5c:	4604      	mov	r4, r0
 8015f5e:	8b19      	ldrh	r1, [r3, #24]
 8015f60:	4638      	mov	r0, r7
 8015f62:	f7fb fe51 	bl	8011c08 <ucdr_serialize_uint16_t>
 8015f66:	4020      	ands	r0, r4
 8015f68:	b2c0      	uxtb	r0, r0
 8015f6a:	e7d4      	b.n	8015f16 <uxr_serialize_ActivityInfoVariant+0xa6>
 8015f6c:	3108      	adds	r1, #8
 8015f6e:	4441      	add	r1, r8
 8015f70:	2202      	movs	r2, #2
 8015f72:	4638      	mov	r0, r7
 8015f74:	f002 fe4e 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8015f78:	4434      	add	r4, r6
 8015f7a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015f7e:	4604      	mov	r4, r0
 8015f80:	7d99      	ldrb	r1, [r3, #22]
 8015f82:	4638      	mov	r0, r7
 8015f84:	f7fb fe14 	bl	8011bb0 <ucdr_serialize_uint8_t>
 8015f88:	4020      	ands	r0, r4
 8015f8a:	b2c0      	uxtb	r0, r0
 8015f8c:	e7c3      	b.n	8015f16 <uxr_serialize_ActivityInfoVariant+0xa6>
 8015f8e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015f92:	4638      	mov	r0, r7
 8015f94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f98:	f7fc bb46 	b.w	8012628 <ucdr_serialize_int16_t>
 8015f9c:	68ea      	ldr	r2, [r5, #12]
 8015f9e:	3601      	adds	r6, #1
 8015fa0:	42b2      	cmp	r2, r6
 8015fa2:	d8be      	bhi.n	8015f22 <uxr_serialize_ActivityInfoVariant+0xb2>
 8015fa4:	ea09 0900 	and.w	r9, r9, r0
 8015fa8:	fa5f f989 	uxtb.w	r9, r9
 8015fac:	e771      	b.n	8015e92 <uxr_serialize_ActivityInfoVariant+0x22>
 8015fae:	68eb      	ldr	r3, [r5, #12]
 8015fb0:	3601      	adds	r6, #1
 8015fb2:	429e      	cmp	r6, r3
 8015fb4:	f10a 0a18 	add.w	sl, sl, #24
 8015fb8:	d395      	bcc.n	8015ee6 <uxr_serialize_ActivityInfoVariant+0x76>
 8015fba:	e76a      	b.n	8015e92 <uxr_serialize_ActivityInfoVariant+0x22>

08015fbc <uxr_deserialize_BaseObjectReply>:
 8015fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fc0:	2202      	movs	r2, #2
 8015fc2:	4606      	mov	r6, r0
 8015fc4:	460f      	mov	r7, r1
 8015fc6:	f002 fe89 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8015fca:	2202      	movs	r2, #2
 8015fcc:	18b9      	adds	r1, r7, r2
 8015fce:	4605      	mov	r5, r0
 8015fd0:	4630      	mov	r0, r6
 8015fd2:	f002 fe83 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8015fd6:	1d39      	adds	r1, r7, #4
 8015fd8:	4680      	mov	r8, r0
 8015fda:	4630      	mov	r0, r6
 8015fdc:	f7fb fdfe 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8015fe0:	1d79      	adds	r1, r7, #5
 8015fe2:	4604      	mov	r4, r0
 8015fe4:	4630      	mov	r0, r6
 8015fe6:	f7fb fdf9 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8015fea:	ea05 0508 	and.w	r5, r5, r8
 8015fee:	402c      	ands	r4, r5
 8015ff0:	4020      	ands	r0, r4
 8015ff2:	b2c0      	uxtb	r0, r0
 8015ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ff8 <uxr_serialize_ReadSpecification>:
 8015ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ffc:	460e      	mov	r6, r1
 8015ffe:	7809      	ldrb	r1, [r1, #0]
 8016000:	4607      	mov	r7, r0
 8016002:	f7fb fdd5 	bl	8011bb0 <ucdr_serialize_uint8_t>
 8016006:	7871      	ldrb	r1, [r6, #1]
 8016008:	4604      	mov	r4, r0
 801600a:	4638      	mov	r0, r7
 801600c:	f7fb fdd0 	bl	8011bb0 <ucdr_serialize_uint8_t>
 8016010:	78b1      	ldrb	r1, [r6, #2]
 8016012:	4004      	ands	r4, r0
 8016014:	4638      	mov	r0, r7
 8016016:	f7fb fd9d 	bl	8011b54 <ucdr_serialize_bool>
 801601a:	78b3      	ldrb	r3, [r6, #2]
 801601c:	b2e4      	uxtb	r4, r4
 801601e:	4004      	ands	r4, r0
 8016020:	b94b      	cbnz	r3, 8016036 <uxr_serialize_ReadSpecification+0x3e>
 8016022:	7a31      	ldrb	r1, [r6, #8]
 8016024:	4638      	mov	r0, r7
 8016026:	f7fb fd95 	bl	8011b54 <ucdr_serialize_bool>
 801602a:	7a33      	ldrb	r3, [r6, #8]
 801602c:	4004      	ands	r4, r0
 801602e:	b943      	cbnz	r3, 8016042 <uxr_serialize_ReadSpecification+0x4a>
 8016030:	4620      	mov	r0, r4
 8016032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016036:	6871      	ldr	r1, [r6, #4]
 8016038:	4638      	mov	r0, r7
 801603a:	f003 f807 	bl	801904c <ucdr_serialize_string>
 801603e:	4004      	ands	r4, r0
 8016040:	e7ef      	b.n	8016022 <uxr_serialize_ReadSpecification+0x2a>
 8016042:	8971      	ldrh	r1, [r6, #10]
 8016044:	4638      	mov	r0, r7
 8016046:	f7fb fddf 	bl	8011c08 <ucdr_serialize_uint16_t>
 801604a:	89b1      	ldrh	r1, [r6, #12]
 801604c:	4605      	mov	r5, r0
 801604e:	4638      	mov	r0, r7
 8016050:	f7fb fdda 	bl	8011c08 <ucdr_serialize_uint16_t>
 8016054:	89f1      	ldrh	r1, [r6, #14]
 8016056:	4005      	ands	r5, r0
 8016058:	4638      	mov	r0, r7
 801605a:	f7fb fdd5 	bl	8011c08 <ucdr_serialize_uint16_t>
 801605e:	8a31      	ldrh	r1, [r6, #16]
 8016060:	4680      	mov	r8, r0
 8016062:	4638      	mov	r0, r7
 8016064:	f7fb fdd0 	bl	8011c08 <ucdr_serialize_uint16_t>
 8016068:	b2ed      	uxtb	r5, r5
 801606a:	4025      	ands	r5, r4
 801606c:	ea08 0505 	and.w	r5, r8, r5
 8016070:	ea00 0405 	and.w	r4, r0, r5
 8016074:	4620      	mov	r0, r4
 8016076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801607a:	bf00      	nop

0801607c <uxr_serialize_CREATE_CLIENT_Payload>:
 801607c:	f7ff bb02 	b.w	8015684 <uxr_serialize_CLIENT_Representation>

08016080 <uxr_serialize_CREATE_Payload>:
 8016080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016082:	2202      	movs	r2, #2
 8016084:	4607      	mov	r7, r0
 8016086:	460e      	mov	r6, r1
 8016088:	f002 fdc4 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 801608c:	2202      	movs	r2, #2
 801608e:	18b1      	adds	r1, r6, r2
 8016090:	4605      	mov	r5, r0
 8016092:	4638      	mov	r0, r7
 8016094:	f002 fdbe 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8016098:	7931      	ldrb	r1, [r6, #4]
 801609a:	4604      	mov	r4, r0
 801609c:	4638      	mov	r0, r7
 801609e:	f7fb fd87 	bl	8011bb0 <ucdr_serialize_uint8_t>
 80160a2:	b170      	cbz	r0, 80160c2 <uxr_serialize_CREATE_Payload+0x42>
 80160a4:	7933      	ldrb	r3, [r6, #4]
 80160a6:	402c      	ands	r4, r5
 80160a8:	3b01      	subs	r3, #1
 80160aa:	b2e4      	uxtb	r4, r4
 80160ac:	2b0d      	cmp	r3, #13
 80160ae:	d809      	bhi.n	80160c4 <uxr_serialize_CREATE_Payload+0x44>
 80160b0:	e8df f003 	tbb	[pc, r3]
 80160b4:	23230a4c 	.word	0x23230a4c
 80160b8:	0a0a0a0a 	.word	0x0a0a0a0a
 80160bc:	12121208 	.word	0x12121208
 80160c0:	3e45      	.short	0x3e45
 80160c2:	2400      	movs	r4, #0
 80160c4:	4620      	mov	r0, r4
 80160c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160c8:	f106 0108 	add.w	r1, r6, #8
 80160cc:	4638      	mov	r0, r7
 80160ce:	f7ff fbdf 	bl	8015890 <uxr_serialize_DATAWRITER_Representation>
 80160d2:	4004      	ands	r4, r0
 80160d4:	4620      	mov	r0, r4
 80160d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160d8:	7a31      	ldrb	r1, [r6, #8]
 80160da:	4638      	mov	r0, r7
 80160dc:	f7fb fd68 	bl	8011bb0 <ucdr_serialize_uint8_t>
 80160e0:	2800      	cmp	r0, #0
 80160e2:	d0ee      	beq.n	80160c2 <uxr_serialize_CREATE_Payload+0x42>
 80160e4:	7a33      	ldrb	r3, [r6, #8]
 80160e6:	2b01      	cmp	r3, #1
 80160e8:	d001      	beq.n	80160ee <uxr_serialize_CREATE_Payload+0x6e>
 80160ea:	2b02      	cmp	r3, #2
 80160ec:	d1ea      	bne.n	80160c4 <uxr_serialize_CREATE_Payload+0x44>
 80160ee:	68f1      	ldr	r1, [r6, #12]
 80160f0:	4638      	mov	r0, r7
 80160f2:	f002 ffab 	bl	801904c <ucdr_serialize_string>
 80160f6:	4004      	ands	r4, r0
 80160f8:	e7e4      	b.n	80160c4 <uxr_serialize_CREATE_Payload+0x44>
 80160fa:	7a31      	ldrb	r1, [r6, #8]
 80160fc:	4638      	mov	r0, r7
 80160fe:	f7fb fd57 	bl	8011bb0 <ucdr_serialize_uint8_t>
 8016102:	4605      	mov	r5, r0
 8016104:	b158      	cbz	r0, 801611e <uxr_serialize_CREATE_Payload+0x9e>
 8016106:	7a33      	ldrb	r3, [r6, #8]
 8016108:	2b02      	cmp	r3, #2
 801610a:	d034      	beq.n	8016176 <uxr_serialize_CREATE_Payload+0xf6>
 801610c:	2b03      	cmp	r3, #3
 801610e:	d106      	bne.n	801611e <uxr_serialize_CREATE_Payload+0x9e>
 8016110:	68f2      	ldr	r2, [r6, #12]
 8016112:	f106 0110 	add.w	r1, r6, #16
 8016116:	4638      	mov	r0, r7
 8016118:	f7fd fcb6 	bl	8013a88 <ucdr_serialize_sequence_uint8_t>
 801611c:	4605      	mov	r5, r0
 801611e:	2202      	movs	r2, #2
 8016120:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8016124:	4638      	mov	r0, r7
 8016126:	f002 fd75 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 801612a:	4028      	ands	r0, r5
 801612c:	4004      	ands	r4, r0
 801612e:	e7c9      	b.n	80160c4 <uxr_serialize_CREATE_Payload+0x44>
 8016130:	f106 0108 	add.w	r1, r6, #8
 8016134:	4638      	mov	r0, r7
 8016136:	f7ff faa5 	bl	8015684 <uxr_serialize_CLIENT_Representation>
 801613a:	4004      	ands	r4, r0
 801613c:	e7c2      	b.n	80160c4 <uxr_serialize_CREATE_Payload+0x44>
 801613e:	f106 0108 	add.w	r1, r6, #8
 8016142:	4638      	mov	r0, r7
 8016144:	f7ff fb5a 	bl	80157fc <uxr_serialize_AGENT_Representation>
 8016148:	4004      	ands	r4, r0
 801614a:	e7bb      	b.n	80160c4 <uxr_serialize_CREATE_Payload+0x44>
 801614c:	7a31      	ldrb	r1, [r6, #8]
 801614e:	4638      	mov	r0, r7
 8016150:	f7fb fd2e 	bl	8011bb0 <ucdr_serialize_uint8_t>
 8016154:	4605      	mov	r5, r0
 8016156:	b130      	cbz	r0, 8016166 <uxr_serialize_CREATE_Payload+0xe6>
 8016158:	7a33      	ldrb	r3, [r6, #8]
 801615a:	2b02      	cmp	r3, #2
 801615c:	d011      	beq.n	8016182 <uxr_serialize_CREATE_Payload+0x102>
 801615e:	2b03      	cmp	r3, #3
 8016160:	d015      	beq.n	801618e <uxr_serialize_CREATE_Payload+0x10e>
 8016162:	2b01      	cmp	r3, #1
 8016164:	d00d      	beq.n	8016182 <uxr_serialize_CREATE_Payload+0x102>
 8016166:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801616a:	4638      	mov	r0, r7
 801616c:	f7fc fa5c 	bl	8012628 <ucdr_serialize_int16_t>
 8016170:	4028      	ands	r0, r5
 8016172:	4004      	ands	r4, r0
 8016174:	e7a6      	b.n	80160c4 <uxr_serialize_CREATE_Payload+0x44>
 8016176:	68f1      	ldr	r1, [r6, #12]
 8016178:	4638      	mov	r0, r7
 801617a:	f002 ff67 	bl	801904c <ucdr_serialize_string>
 801617e:	4605      	mov	r5, r0
 8016180:	e7cd      	b.n	801611e <uxr_serialize_CREATE_Payload+0x9e>
 8016182:	68f1      	ldr	r1, [r6, #12]
 8016184:	4638      	mov	r0, r7
 8016186:	f002 ff61 	bl	801904c <ucdr_serialize_string>
 801618a:	4605      	mov	r5, r0
 801618c:	e7eb      	b.n	8016166 <uxr_serialize_CREATE_Payload+0xe6>
 801618e:	68f2      	ldr	r2, [r6, #12]
 8016190:	f106 0110 	add.w	r1, r6, #16
 8016194:	4638      	mov	r0, r7
 8016196:	f7fd fc77 	bl	8013a88 <ucdr_serialize_sequence_uint8_t>
 801619a:	4605      	mov	r5, r0
 801619c:	e7e3      	b.n	8016166 <uxr_serialize_CREATE_Payload+0xe6>
 801619e:	bf00      	nop

080161a0 <uxr_deserialize_GET_INFO_Payload>:
 80161a0:	b570      	push	{r4, r5, r6, lr}
 80161a2:	2202      	movs	r2, #2
 80161a4:	4605      	mov	r5, r0
 80161a6:	460e      	mov	r6, r1
 80161a8:	f002 fd98 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 80161ac:	2202      	movs	r2, #2
 80161ae:	18b1      	adds	r1, r6, r2
 80161b0:	4604      	mov	r4, r0
 80161b2:	4628      	mov	r0, r5
 80161b4:	f002 fd92 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 80161b8:	1d31      	adds	r1, r6, #4
 80161ba:	4004      	ands	r4, r0
 80161bc:	4628      	mov	r0, r5
 80161be:	f7fc f83d 	bl	801223c <ucdr_deserialize_uint32_t>
 80161c2:	b2e4      	uxtb	r4, r4
 80161c4:	4020      	ands	r0, r4
 80161c6:	bd70      	pop	{r4, r5, r6, pc}

080161c8 <uxr_serialize_DELETE_Payload>:
 80161c8:	b570      	push	{r4, r5, r6, lr}
 80161ca:	2202      	movs	r2, #2
 80161cc:	4605      	mov	r5, r0
 80161ce:	460e      	mov	r6, r1
 80161d0:	f002 fd20 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 80161d4:	2202      	movs	r2, #2
 80161d6:	4604      	mov	r4, r0
 80161d8:	18b1      	adds	r1, r6, r2
 80161da:	4628      	mov	r0, r5
 80161dc:	f002 fd1a 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 80161e0:	4020      	ands	r0, r4
 80161e2:	b2c0      	uxtb	r0, r0
 80161e4:	bd70      	pop	{r4, r5, r6, pc}
 80161e6:	bf00      	nop

080161e8 <uxr_deserialize_STATUS_AGENT_Payload>:
 80161e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161ec:	4605      	mov	r5, r0
 80161ee:	460e      	mov	r6, r1
 80161f0:	f7fb fcf4 	bl	8011bdc <ucdr_deserialize_uint8_t>
 80161f4:	1c71      	adds	r1, r6, #1
 80161f6:	4604      	mov	r4, r0
 80161f8:	4628      	mov	r0, r5
 80161fa:	f7fb fcef 	bl	8011bdc <ucdr_deserialize_uint8_t>
 80161fe:	2204      	movs	r2, #4
 8016200:	18b1      	adds	r1, r6, r2
 8016202:	4680      	mov	r8, r0
 8016204:	4628      	mov	r0, r5
 8016206:	f002 fd69 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 801620a:	f106 0108 	add.w	r1, r6, #8
 801620e:	4607      	mov	r7, r0
 8016210:	2202      	movs	r2, #2
 8016212:	4628      	mov	r0, r5
 8016214:	f002 fd62 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8016218:	ea04 0308 	and.w	r3, r4, r8
 801621c:	b2db      	uxtb	r3, r3
 801621e:	ea03 0407 	and.w	r4, r3, r7
 8016222:	2202      	movs	r2, #2
 8016224:	4607      	mov	r7, r0
 8016226:	f106 010a 	add.w	r1, r6, #10
 801622a:	4628      	mov	r0, r5
 801622c:	f002 fd56 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8016230:	f106 010c 	add.w	r1, r6, #12
 8016234:	4603      	mov	r3, r0
 8016236:	4628      	mov	r0, r5
 8016238:	461d      	mov	r5, r3
 801623a:	f7fb fca1 	bl	8011b80 <ucdr_deserialize_bool>
 801623e:	403c      	ands	r4, r7
 8016240:	4025      	ands	r5, r4
 8016242:	4028      	ands	r0, r5
 8016244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016248 <uxr_deserialize_STATUS_Payload>:
 8016248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801624c:	2202      	movs	r2, #2
 801624e:	4606      	mov	r6, r0
 8016250:	460f      	mov	r7, r1
 8016252:	f002 fd43 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8016256:	2202      	movs	r2, #2
 8016258:	18b9      	adds	r1, r7, r2
 801625a:	4605      	mov	r5, r0
 801625c:	4630      	mov	r0, r6
 801625e:	f002 fd3d 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8016262:	1d39      	adds	r1, r7, #4
 8016264:	4680      	mov	r8, r0
 8016266:	4630      	mov	r0, r6
 8016268:	f7fb fcb8 	bl	8011bdc <ucdr_deserialize_uint8_t>
 801626c:	1d79      	adds	r1, r7, #5
 801626e:	4604      	mov	r4, r0
 8016270:	4630      	mov	r0, r6
 8016272:	f7fb fcb3 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8016276:	ea05 0508 	and.w	r5, r5, r8
 801627a:	402c      	ands	r4, r5
 801627c:	4020      	ands	r0, r4
 801627e:	b2c0      	uxtb	r0, r0
 8016280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016284 <uxr_serialize_INFO_Payload>:
 8016284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016288:	2202      	movs	r2, #2
 801628a:	460c      	mov	r4, r1
 801628c:	4605      	mov	r5, r0
 801628e:	f002 fcc1 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8016292:	2202      	movs	r2, #2
 8016294:	18a1      	adds	r1, r4, r2
 8016296:	4680      	mov	r8, r0
 8016298:	4628      	mov	r0, r5
 801629a:	f002 fcbb 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 801629e:	7921      	ldrb	r1, [r4, #4]
 80162a0:	4607      	mov	r7, r0
 80162a2:	4628      	mov	r0, r5
 80162a4:	f7fb fc84 	bl	8011bb0 <ucdr_serialize_uint8_t>
 80162a8:	7961      	ldrb	r1, [r4, #5]
 80162aa:	4606      	mov	r6, r0
 80162ac:	4628      	mov	r0, r5
 80162ae:	f7fb fc7f 	bl	8011bb0 <ucdr_serialize_uint8_t>
 80162b2:	ea08 0807 	and.w	r8, r8, r7
 80162b6:	ea06 0608 	and.w	r6, r6, r8
 80162ba:	4006      	ands	r6, r0
 80162bc:	7a21      	ldrb	r1, [r4, #8]
 80162be:	4628      	mov	r0, r5
 80162c0:	f7fb fc48 	bl	8011b54 <ucdr_serialize_bool>
 80162c4:	7a23      	ldrb	r3, [r4, #8]
 80162c6:	b2f7      	uxtb	r7, r6
 80162c8:	4606      	mov	r6, r0
 80162ca:	b96b      	cbnz	r3, 80162e8 <uxr_serialize_INFO_Payload+0x64>
 80162cc:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80162d0:	4628      	mov	r0, r5
 80162d2:	f7fb fc3f 	bl	8011b54 <ucdr_serialize_bool>
 80162d6:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80162da:	4030      	ands	r0, r6
 80162dc:	b2c6      	uxtb	r6, r0
 80162de:	b983      	cbnz	r3, 8016302 <uxr_serialize_INFO_Payload+0x7e>
 80162e0:	ea06 0007 	and.w	r0, r6, r7
 80162e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162e8:	7b21      	ldrb	r1, [r4, #12]
 80162ea:	4628      	mov	r0, r5
 80162ec:	f7fb fc60 	bl	8011bb0 <ucdr_serialize_uint8_t>
 80162f0:	b188      	cbz	r0, 8016316 <uxr_serialize_INFO_Payload+0x92>
 80162f2:	f104 010c 	add.w	r1, r4, #12
 80162f6:	4628      	mov	r0, r5
 80162f8:	f7ff faf2 	bl	80158e0 <uxr_serialize_ObjectVariant.part.0>
 80162fc:	4030      	ands	r0, r6
 80162fe:	b2c6      	uxtb	r6, r0
 8016300:	e7e4      	b.n	80162cc <uxr_serialize_INFO_Payload+0x48>
 8016302:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8016306:	4628      	mov	r0, r5
 8016308:	f7ff fdb2 	bl	8015e70 <uxr_serialize_ActivityInfoVariant>
 801630c:	4006      	ands	r6, r0
 801630e:	ea06 0007 	and.w	r0, r6, r7
 8016312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016316:	4606      	mov	r6, r0
 8016318:	e7d8      	b.n	80162cc <uxr_serialize_INFO_Payload+0x48>
 801631a:	bf00      	nop

0801631c <uxr_serialize_READ_DATA_Payload>:
 801631c:	b570      	push	{r4, r5, r6, lr}
 801631e:	2202      	movs	r2, #2
 8016320:	4605      	mov	r5, r0
 8016322:	460e      	mov	r6, r1
 8016324:	f002 fc76 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8016328:	2202      	movs	r2, #2
 801632a:	18b1      	adds	r1, r6, r2
 801632c:	4604      	mov	r4, r0
 801632e:	4628      	mov	r0, r5
 8016330:	f002 fc70 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8016334:	1d31      	adds	r1, r6, #4
 8016336:	4004      	ands	r4, r0
 8016338:	4628      	mov	r0, r5
 801633a:	f7ff fe5d 	bl	8015ff8 <uxr_serialize_ReadSpecification>
 801633e:	b2e4      	uxtb	r4, r4
 8016340:	4020      	ands	r0, r4
 8016342:	bd70      	pop	{r4, r5, r6, pc}

08016344 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8016344:	b570      	push	{r4, r5, r6, lr}
 8016346:	2202      	movs	r2, #2
 8016348:	4605      	mov	r5, r0
 801634a:	460e      	mov	r6, r1
 801634c:	f002 fc62 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8016350:	2202      	movs	r2, #2
 8016352:	4604      	mov	r4, r0
 8016354:	18b1      	adds	r1, r6, r2
 8016356:	4628      	mov	r0, r5
 8016358:	f002 fc5c 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 801635c:	4020      	ands	r0, r4
 801635e:	b2c0      	uxtb	r0, r0
 8016360:	bd70      	pop	{r4, r5, r6, pc}
 8016362:	bf00      	nop

08016364 <uxr_serialize_ACKNACK_Payload>:
 8016364:	b570      	push	{r4, r5, r6, lr}
 8016366:	460c      	mov	r4, r1
 8016368:	460e      	mov	r6, r1
 801636a:	f834 1b02 	ldrh.w	r1, [r4], #2
 801636e:	4605      	mov	r5, r0
 8016370:	f7fb fc4a 	bl	8011c08 <ucdr_serialize_uint16_t>
 8016374:	2202      	movs	r2, #2
 8016376:	4621      	mov	r1, r4
 8016378:	4604      	mov	r4, r0
 801637a:	4628      	mov	r0, r5
 801637c:	f002 fc4a 	bl	8018c14 <ucdr_serialize_array_uint8_t>
 8016380:	7931      	ldrb	r1, [r6, #4]
 8016382:	4004      	ands	r4, r0
 8016384:	4628      	mov	r0, r5
 8016386:	f7fb fc13 	bl	8011bb0 <ucdr_serialize_uint8_t>
 801638a:	b2e4      	uxtb	r4, r4
 801638c:	4020      	ands	r0, r4
 801638e:	bd70      	pop	{r4, r5, r6, pc}

08016390 <uxr_deserialize_ACKNACK_Payload>:
 8016390:	b570      	push	{r4, r5, r6, lr}
 8016392:	4605      	mov	r5, r0
 8016394:	460e      	mov	r6, r1
 8016396:	f7fb fd37 	bl	8011e08 <ucdr_deserialize_uint16_t>
 801639a:	2202      	movs	r2, #2
 801639c:	18b1      	adds	r1, r6, r2
 801639e:	4604      	mov	r4, r0
 80163a0:	4628      	mov	r0, r5
 80163a2:	f002 fc9b 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 80163a6:	1d31      	adds	r1, r6, #4
 80163a8:	4004      	ands	r4, r0
 80163aa:	4628      	mov	r0, r5
 80163ac:	f7fb fc16 	bl	8011bdc <ucdr_deserialize_uint8_t>
 80163b0:	b2e4      	uxtb	r4, r4
 80163b2:	4020      	ands	r0, r4
 80163b4:	bd70      	pop	{r4, r5, r6, pc}
 80163b6:	bf00      	nop

080163b8 <uxr_serialize_HEARTBEAT_Payload>:
 80163b8:	b570      	push	{r4, r5, r6, lr}
 80163ba:	460d      	mov	r5, r1
 80163bc:	8809      	ldrh	r1, [r1, #0]
 80163be:	4606      	mov	r6, r0
 80163c0:	f7fb fc22 	bl	8011c08 <ucdr_serialize_uint16_t>
 80163c4:	8869      	ldrh	r1, [r5, #2]
 80163c6:	4604      	mov	r4, r0
 80163c8:	4630      	mov	r0, r6
 80163ca:	f7fb fc1d 	bl	8011c08 <ucdr_serialize_uint16_t>
 80163ce:	7929      	ldrb	r1, [r5, #4]
 80163d0:	4004      	ands	r4, r0
 80163d2:	4630      	mov	r0, r6
 80163d4:	f7fb fbec 	bl	8011bb0 <ucdr_serialize_uint8_t>
 80163d8:	b2e4      	uxtb	r4, r4
 80163da:	4020      	ands	r0, r4
 80163dc:	bd70      	pop	{r4, r5, r6, pc}
 80163de:	bf00      	nop

080163e0 <uxr_deserialize_HEARTBEAT_Payload>:
 80163e0:	b570      	push	{r4, r5, r6, lr}
 80163e2:	4605      	mov	r5, r0
 80163e4:	460e      	mov	r6, r1
 80163e6:	f7fb fd0f 	bl	8011e08 <ucdr_deserialize_uint16_t>
 80163ea:	1cb1      	adds	r1, r6, #2
 80163ec:	4604      	mov	r4, r0
 80163ee:	4628      	mov	r0, r5
 80163f0:	f7fb fd0a 	bl	8011e08 <ucdr_deserialize_uint16_t>
 80163f4:	1d31      	adds	r1, r6, #4
 80163f6:	4004      	ands	r4, r0
 80163f8:	4628      	mov	r0, r5
 80163fa:	f7fb fbef 	bl	8011bdc <ucdr_deserialize_uint8_t>
 80163fe:	b2e4      	uxtb	r4, r4
 8016400:	4020      	ands	r0, r4
 8016402:	bd70      	pop	{r4, r5, r6, pc}

08016404 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8016404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016408:	4605      	mov	r5, r0
 801640a:	460e      	mov	r6, r1
 801640c:	f7fc fa98 	bl	8012940 <ucdr_deserialize_int32_t>
 8016410:	1d31      	adds	r1, r6, #4
 8016412:	4607      	mov	r7, r0
 8016414:	4628      	mov	r0, r5
 8016416:	f7fb ff11 	bl	801223c <ucdr_deserialize_uint32_t>
 801641a:	f106 0108 	add.w	r1, r6, #8
 801641e:	4680      	mov	r8, r0
 8016420:	4628      	mov	r0, r5
 8016422:	f7fc fa8d 	bl	8012940 <ucdr_deserialize_int32_t>
 8016426:	f106 010c 	add.w	r1, r6, #12
 801642a:	4604      	mov	r4, r0
 801642c:	4628      	mov	r0, r5
 801642e:	f7fb ff05 	bl	801223c <ucdr_deserialize_uint32_t>
 8016432:	ea07 0708 	and.w	r7, r7, r8
 8016436:	403c      	ands	r4, r7
 8016438:	f106 0110 	add.w	r1, r6, #16
 801643c:	4004      	ands	r4, r0
 801643e:	4628      	mov	r0, r5
 8016440:	f7fc fa7e 	bl	8012940 <ucdr_deserialize_int32_t>
 8016444:	f106 0114 	add.w	r1, r6, #20
 8016448:	4607      	mov	r7, r0
 801644a:	4628      	mov	r0, r5
 801644c:	f7fb fef6 	bl	801223c <ucdr_deserialize_uint32_t>
 8016450:	b2e4      	uxtb	r4, r4
 8016452:	403c      	ands	r4, r7
 8016454:	4020      	ands	r0, r4
 8016456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801645a:	bf00      	nop

0801645c <uxr_deserialize_SampleIdentity>:
 801645c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016460:	220c      	movs	r2, #12
 8016462:	4604      	mov	r4, r0
 8016464:	460d      	mov	r5, r1
 8016466:	f002 fc39 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 801646a:	2203      	movs	r2, #3
 801646c:	f105 010c 	add.w	r1, r5, #12
 8016470:	4607      	mov	r7, r0
 8016472:	4620      	mov	r0, r4
 8016474:	f002 fc32 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 8016478:	f105 010f 	add.w	r1, r5, #15
 801647c:	4680      	mov	r8, r0
 801647e:	4620      	mov	r0, r4
 8016480:	f7fb fbac 	bl	8011bdc <ucdr_deserialize_uint8_t>
 8016484:	f105 0110 	add.w	r1, r5, #16
 8016488:	4606      	mov	r6, r0
 801648a:	4620      	mov	r0, r4
 801648c:	f7fc fa58 	bl	8012940 <ucdr_deserialize_int32_t>
 8016490:	f105 0114 	add.w	r1, r5, #20
 8016494:	4603      	mov	r3, r0
 8016496:	4620      	mov	r0, r4
 8016498:	ea07 0708 	and.w	r7, r7, r8
 801649c:	461c      	mov	r4, r3
 801649e:	f7fb fecd 	bl	801223c <ucdr_deserialize_uint32_t>
 80164a2:	403e      	ands	r6, r7
 80164a4:	4034      	ands	r4, r6
 80164a6:	4020      	ands	r0, r4
 80164a8:	b2c0      	uxtb	r0, r0
 80164aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164ae:	bf00      	nop

080164b0 <rcl_convert_rmw_ret_to_rcl_ret>:
 80164b0:	280b      	cmp	r0, #11
 80164b2:	dc0d      	bgt.n	80164d0 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80164b4:	2800      	cmp	r0, #0
 80164b6:	db09      	blt.n	80164cc <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80164b8:	280b      	cmp	r0, #11
 80164ba:	d807      	bhi.n	80164cc <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80164bc:	e8df f000 	tbb	[pc, r0]
 80164c0:	07060607 	.word	0x07060607
 80164c4:	06060606 	.word	0x06060606
 80164c8:	07070606 	.word	0x07070606
 80164cc:	2001      	movs	r0, #1
 80164ce:	4770      	bx	lr
 80164d0:	28cb      	cmp	r0, #203	; 0xcb
 80164d2:	bf18      	it	ne
 80164d4:	2001      	movne	r0, #1
 80164d6:	4770      	bx	lr

080164d8 <rcl_get_zero_initialized_context>:
 80164d8:	4a03      	ldr	r2, [pc, #12]	; (80164e8 <rcl_get_zero_initialized_context+0x10>)
 80164da:	4603      	mov	r3, r0
 80164dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80164e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80164e4:	4618      	mov	r0, r3
 80164e6:	4770      	bx	lr
 80164e8:	0801d64c 	.word	0x0801d64c

080164ec <rcl_context_is_valid>:
 80164ec:	b118      	cbz	r0, 80164f6 <rcl_context_is_valid+0xa>
 80164ee:	6840      	ldr	r0, [r0, #4]
 80164f0:	3800      	subs	r0, #0
 80164f2:	bf18      	it	ne
 80164f4:	2001      	movne	r0, #1
 80164f6:	4770      	bx	lr

080164f8 <__cleanup_context>:
 80164f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164fc:	4606      	mov	r6, r0
 80164fe:	6800      	ldr	r0, [r0, #0]
 8016500:	2300      	movs	r3, #0
 8016502:	6073      	str	r3, [r6, #4]
 8016504:	2800      	cmp	r0, #0
 8016506:	d049      	beq.n	801659c <__cleanup_context+0xa4>
 8016508:	6947      	ldr	r7, [r0, #20]
 801650a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801650e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8016512:	b137      	cbz	r7, 8016522 <__cleanup_context+0x2a>
 8016514:	3014      	adds	r0, #20
 8016516:	f000 f9bb 	bl	8016890 <rcl_init_options_fini>
 801651a:	4607      	mov	r7, r0
 801651c:	2800      	cmp	r0, #0
 801651e:	d144      	bne.n	80165aa <__cleanup_context+0xb2>
 8016520:	6830      	ldr	r0, [r6, #0]
 8016522:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016524:	b143      	cbz	r3, 8016538 <__cleanup_context+0x40>
 8016526:	3028      	adds	r0, #40	; 0x28
 8016528:	f001 fd9a 	bl	8018060 <rmw_context_fini>
 801652c:	b118      	cbz	r0, 8016536 <__cleanup_context+0x3e>
 801652e:	2f00      	cmp	r7, #0
 8016530:	d03e      	beq.n	80165b0 <__cleanup_context+0xb8>
 8016532:	f7f9 feb5 	bl	80102a0 <rcutils_reset_error>
 8016536:	6830      	ldr	r0, [r6, #0]
 8016538:	6a03      	ldr	r3, [r0, #32]
 801653a:	b1db      	cbz	r3, 8016574 <__cleanup_context+0x7c>
 801653c:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8016540:	2a01      	cmp	r2, #1
 8016542:	f17c 0100 	sbcs.w	r1, ip, #0
 8016546:	db11      	blt.n	801656c <__cleanup_context+0x74>
 8016548:	2400      	movs	r4, #0
 801654a:	4625      	mov	r5, r4
 801654c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016550:	4649      	mov	r1, r9
 8016552:	b1b8      	cbz	r0, 8016584 <__cleanup_context+0x8c>
 8016554:	47c0      	blx	r8
 8016556:	6833      	ldr	r3, [r6, #0]
 8016558:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801655c:	3401      	adds	r4, #1
 801655e:	f145 0500 	adc.w	r5, r5, #0
 8016562:	4294      	cmp	r4, r2
 8016564:	eb75 010c 	sbcs.w	r1, r5, ip
 8016568:	6a1b      	ldr	r3, [r3, #32]
 801656a:	dbef      	blt.n	801654c <__cleanup_context+0x54>
 801656c:	4618      	mov	r0, r3
 801656e:	4649      	mov	r1, r9
 8016570:	47c0      	blx	r8
 8016572:	6830      	ldr	r0, [r6, #0]
 8016574:	4649      	mov	r1, r9
 8016576:	47c0      	blx	r8
 8016578:	2300      	movs	r3, #0
 801657a:	e9c6 3300 	strd	r3, r3, [r6]
 801657e:	4638      	mov	r0, r7
 8016580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016584:	3401      	adds	r4, #1
 8016586:	f145 0500 	adc.w	r5, r5, #0
 801658a:	4294      	cmp	r4, r2
 801658c:	eb75 010c 	sbcs.w	r1, r5, ip
 8016590:	dbdc      	blt.n	801654c <__cleanup_context+0x54>
 8016592:	4618      	mov	r0, r3
 8016594:	4649      	mov	r1, r9
 8016596:	47c0      	blx	r8
 8016598:	6830      	ldr	r0, [r6, #0]
 801659a:	e7eb      	b.n	8016574 <__cleanup_context+0x7c>
 801659c:	4607      	mov	r7, r0
 801659e:	2300      	movs	r3, #0
 80165a0:	e9c6 3300 	strd	r3, r3, [r6]
 80165a4:	4638      	mov	r0, r7
 80165a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165aa:	f7f9 fe79 	bl	80102a0 <rcutils_reset_error>
 80165ae:	e7b7      	b.n	8016520 <__cleanup_context+0x28>
 80165b0:	f7ff ff7e 	bl	80164b0 <rcl_convert_rmw_ret_to_rcl_ret>
 80165b4:	4607      	mov	r7, r0
 80165b6:	e7bc      	b.n	8016532 <__cleanup_context+0x3a>

080165b8 <rcl_init>:
 80165b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165bc:	1e05      	subs	r5, r0, #0
 80165be:	b09e      	sub	sp, #120	; 0x78
 80165c0:	460e      	mov	r6, r1
 80165c2:	4690      	mov	r8, r2
 80165c4:	461f      	mov	r7, r3
 80165c6:	f340 809c 	ble.w	8016702 <rcl_init+0x14a>
 80165ca:	2900      	cmp	r1, #0
 80165cc:	f000 809c 	beq.w	8016708 <rcl_init+0x150>
 80165d0:	f1a1 0e04 	sub.w	lr, r1, #4
 80165d4:	f04f 0c00 	mov.w	ip, #0
 80165d8:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80165dc:	f10c 0c01 	add.w	ip, ip, #1
 80165e0:	2c00      	cmp	r4, #0
 80165e2:	f000 8091 	beq.w	8016708 <rcl_init+0x150>
 80165e6:	4565      	cmp	r5, ip
 80165e8:	d1f6      	bne.n	80165d8 <rcl_init+0x20>
 80165ea:	f1b8 0f00 	cmp.w	r8, #0
 80165ee:	f000 808b 	beq.w	8016708 <rcl_init+0x150>
 80165f2:	f8d8 4000 	ldr.w	r4, [r8]
 80165f6:	2c00      	cmp	r4, #0
 80165f8:	f000 8086 	beq.w	8016708 <rcl_init+0x150>
 80165fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80165fe:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8016602:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016606:	6823      	ldr	r3, [r4, #0]
 8016608:	f8cc 3000 	str.w	r3, [ip]
 801660c:	a819      	add	r0, sp, #100	; 0x64
 801660e:	f7f9 fe23 	bl	8010258 <rcutils_allocator_is_valid>
 8016612:	2800      	cmp	r0, #0
 8016614:	d078      	beq.n	8016708 <rcl_init+0x150>
 8016616:	2f00      	cmp	r7, #0
 8016618:	d076      	beq.n	8016708 <rcl_init+0x150>
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d178      	bne.n	8016712 <rcl_init+0x15a>
 8016620:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8016624:	2178      	movs	r1, #120	; 0x78
 8016626:	2001      	movs	r0, #1
 8016628:	4798      	blx	r3
 801662a:	4604      	mov	r4, r0
 801662c:	6038      	str	r0, [r7, #0]
 801662e:	2800      	cmp	r0, #0
 8016630:	f000 80b6 	beq.w	80167a0 <rcl_init+0x1e8>
 8016634:	a802      	add	r0, sp, #8
 8016636:	f001 f957 	bl	80178e8 <rmw_get_zero_initialized_context>
 801663a:	a902      	add	r1, sp, #8
 801663c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016640:	2250      	movs	r2, #80	; 0x50
 8016642:	ac19      	add	r4, sp, #100	; 0x64
 8016644:	f004 ff88 	bl	801b558 <memcpy>
 8016648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801664a:	f8d7 e000 	ldr.w	lr, [r7]
 801664e:	46f4      	mov	ip, lr
 8016650:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016654:	6823      	ldr	r3, [r4, #0]
 8016656:	f8cc 3000 	str.w	r3, [ip]
 801665a:	f10e 0114 	add.w	r1, lr, #20
 801665e:	4640      	mov	r0, r8
 8016660:	f000 f940 	bl	80168e4 <rcl_init_options_copy>
 8016664:	4604      	mov	r4, r0
 8016666:	2800      	cmp	r0, #0
 8016668:	d144      	bne.n	80166f4 <rcl_init+0x13c>
 801666a:	f8d7 9000 	ldr.w	r9, [r7]
 801666e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8016672:	f8c9 0020 	str.w	r0, [r9, #32]
 8016676:	f8c9 5018 	str.w	r5, [r9, #24]
 801667a:	f8c9 801c 	str.w	r8, [r9, #28]
 801667e:	2d00      	cmp	r5, #0
 8016680:	d04e      	beq.n	8016720 <rcl_init+0x168>
 8016682:	2e00      	cmp	r6, #0
 8016684:	d04c      	beq.n	8016720 <rcl_init+0x168>
 8016686:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801668a:	2104      	movs	r1, #4
 801668c:	4628      	mov	r0, r5
 801668e:	4798      	blx	r3
 8016690:	f8c9 0020 	str.w	r0, [r9, #32]
 8016694:	f8d7 9000 	ldr.w	r9, [r7]
 8016698:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801669c:	46ca      	mov	sl, r9
 801669e:	b343      	cbz	r3, 80166f2 <rcl_init+0x13a>
 80166a0:	2d01      	cmp	r5, #1
 80166a2:	f178 0300 	sbcs.w	r3, r8, #0
 80166a6:	db3b      	blt.n	8016720 <rcl_init+0x168>
 80166a8:	2400      	movs	r4, #0
 80166aa:	3e04      	subs	r6, #4
 80166ac:	46a1      	mov	r9, r4
 80166ae:	e00b      	b.n	80166c8 <rcl_init+0x110>
 80166b0:	6831      	ldr	r1, [r6, #0]
 80166b2:	f004 ff51 	bl	801b558 <memcpy>
 80166b6:	3401      	adds	r4, #1
 80166b8:	f149 0900 	adc.w	r9, r9, #0
 80166bc:	45c8      	cmp	r8, r9
 80166be:	bf08      	it	eq
 80166c0:	42a5      	cmpeq	r5, r4
 80166c2:	d02b      	beq.n	801671c <rcl_init+0x164>
 80166c4:	f8d7 a000 	ldr.w	sl, [r7]
 80166c8:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80166cc:	f7e9 fd8a 	bl	80001e4 <strlen>
 80166d0:	1c42      	adds	r2, r0, #1
 80166d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80166d4:	991d      	ldr	r1, [sp, #116]	; 0x74
 80166d6:	f8da a020 	ldr.w	sl, [sl, #32]
 80166da:	9201      	str	r2, [sp, #4]
 80166dc:	4610      	mov	r0, r2
 80166de:	4798      	blx	r3
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80166e6:	6a1b      	ldr	r3, [r3, #32]
 80166e8:	9a01      	ldr	r2, [sp, #4]
 80166ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80166ee:	2800      	cmp	r0, #0
 80166f0:	d1de      	bne.n	80166b0 <rcl_init+0xf8>
 80166f2:	240a      	movs	r4, #10
 80166f4:	4638      	mov	r0, r7
 80166f6:	f7ff feff 	bl	80164f8 <__cleanup_context>
 80166fa:	4620      	mov	r0, r4
 80166fc:	b01e      	add	sp, #120	; 0x78
 80166fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016702:	2900      	cmp	r1, #0
 8016704:	f43f af71 	beq.w	80165ea <rcl_init+0x32>
 8016708:	240b      	movs	r4, #11
 801670a:	4620      	mov	r0, r4
 801670c:	b01e      	add	sp, #120	; 0x78
 801670e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016712:	2464      	movs	r4, #100	; 0x64
 8016714:	4620      	mov	r0, r4
 8016716:	b01e      	add	sp, #120	; 0x78
 8016718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801671c:	f8d7 9000 	ldr.w	r9, [r7]
 8016720:	4926      	ldr	r1, [pc, #152]	; (80167bc <rcl_init+0x204>)
 8016722:	680b      	ldr	r3, [r1, #0]
 8016724:	3301      	adds	r3, #1
 8016726:	d036      	beq.n	8016796 <rcl_init+0x1de>
 8016728:	600b      	str	r3, [r1, #0]
 801672a:	461a      	mov	r2, r3
 801672c:	2400      	movs	r4, #0
 801672e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8016732:	607b      	str	r3, [r7, #4]
 8016734:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016736:	3301      	adds	r3, #1
 8016738:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801673c:	d034      	beq.n	80167a8 <rcl_init+0x1f0>
 801673e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8016742:	b93b      	cbnz	r3, 8016754 <rcl_init+0x19c>
 8016744:	3030      	adds	r0, #48	; 0x30
 8016746:	f000 f939 	bl	80169bc <rcl_get_localhost_only>
 801674a:	4604      	mov	r4, r0
 801674c:	2800      	cmp	r0, #0
 801674e:	d1d1      	bne.n	80166f4 <rcl_init+0x13c>
 8016750:	683b      	ldr	r3, [r7, #0]
 8016752:	6958      	ldr	r0, [r3, #20]
 8016754:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8016756:	aa18      	add	r2, sp, #96	; 0x60
 8016758:	a917      	add	r1, sp, #92	; 0x5c
 801675a:	f000 fd81 	bl	8017260 <rcl_validate_enclave_name>
 801675e:	4604      	mov	r4, r0
 8016760:	2800      	cmp	r0, #0
 8016762:	d1c7      	bne.n	80166f4 <rcl_init+0x13c>
 8016764:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016766:	b9eb      	cbnz	r3, 80167a4 <rcl_init+0x1ec>
 8016768:	6839      	ldr	r1, [r7, #0]
 801676a:	694b      	ldr	r3, [r1, #20]
 801676c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801676e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8016772:	f000 fc3d 	bl	8016ff0 <rcl_get_security_options_from_environment>
 8016776:	4604      	mov	r4, r0
 8016778:	2800      	cmp	r0, #0
 801677a:	d1bb      	bne.n	80166f4 <rcl_init+0x13c>
 801677c:	6839      	ldr	r1, [r7, #0]
 801677e:	6948      	ldr	r0, [r1, #20]
 8016780:	3128      	adds	r1, #40	; 0x28
 8016782:	3018      	adds	r0, #24
 8016784:	f001 fb36 	bl	8017df4 <rmw_init>
 8016788:	4604      	mov	r4, r0
 801678a:	2800      	cmp	r0, #0
 801678c:	d0bd      	beq.n	801670a <rcl_init+0x152>
 801678e:	f7ff fe8f 	bl	80164b0 <rcl_convert_rmw_ret_to_rcl_ret>
 8016792:	4604      	mov	r4, r0
 8016794:	e7ae      	b.n	80166f4 <rcl_init+0x13c>
 8016796:	2201      	movs	r2, #1
 8016798:	461c      	mov	r4, r3
 801679a:	600a      	str	r2, [r1, #0]
 801679c:	4613      	mov	r3, r2
 801679e:	e7c6      	b.n	801672e <rcl_init+0x176>
 80167a0:	240a      	movs	r4, #10
 80167a2:	e7b2      	b.n	801670a <rcl_init+0x152>
 80167a4:	2401      	movs	r4, #1
 80167a6:	e7a5      	b.n	80166f4 <rcl_init+0x13c>
 80167a8:	3024      	adds	r0, #36	; 0x24
 80167aa:	f004 f807 	bl	801a7bc <rcl_get_default_domain_id>
 80167ae:	4604      	mov	r4, r0
 80167b0:	2800      	cmp	r0, #0
 80167b2:	d19f      	bne.n	80166f4 <rcl_init+0x13c>
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	6958      	ldr	r0, [r3, #20]
 80167b8:	e7c1      	b.n	801673e <rcl_init+0x186>
 80167ba:	bf00      	nop
 80167bc:	2001cbd4 	.word	0x2001cbd4

080167c0 <rcl_get_zero_initialized_init_options>:
 80167c0:	2000      	movs	r0, #0
 80167c2:	4770      	bx	lr

080167c4 <rcl_init_options_init>:
 80167c4:	b084      	sub	sp, #16
 80167c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167c8:	b097      	sub	sp, #92	; 0x5c
 80167ca:	ae1d      	add	r6, sp, #116	; 0x74
 80167cc:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80167d0:	2800      	cmp	r0, #0
 80167d2:	d058      	beq.n	8016886 <rcl_init_options_init+0xc2>
 80167d4:	6803      	ldr	r3, [r0, #0]
 80167d6:	4605      	mov	r5, r0
 80167d8:	b133      	cbz	r3, 80167e8 <rcl_init_options_init+0x24>
 80167da:	2464      	movs	r4, #100	; 0x64
 80167dc:	4620      	mov	r0, r4
 80167de:	b017      	add	sp, #92	; 0x5c
 80167e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80167e4:	b004      	add	sp, #16
 80167e6:	4770      	bx	lr
 80167e8:	4630      	mov	r0, r6
 80167ea:	f7f9 fd35 	bl	8010258 <rcutils_allocator_is_valid>
 80167ee:	2800      	cmp	r0, #0
 80167f0:	d049      	beq.n	8016886 <rcl_init_options_init+0xc2>
 80167f2:	46b4      	mov	ip, r6
 80167f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80167f8:	ac11      	add	r4, sp, #68	; 0x44
 80167fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80167fc:	f8dc 3000 	ldr.w	r3, [ip]
 8016800:	6023      	str	r3, [r4, #0]
 8016802:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016804:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016806:	2050      	movs	r0, #80	; 0x50
 8016808:	4798      	blx	r3
 801680a:	4604      	mov	r4, r0
 801680c:	6028      	str	r0, [r5, #0]
 801680e:	2800      	cmp	r0, #0
 8016810:	d03b      	beq.n	801688a <rcl_init_options_init+0xc6>
 8016812:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016816:	4686      	mov	lr, r0
 8016818:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801681c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016820:	f8dc 3000 	ldr.w	r3, [ip]
 8016824:	f8ce 3000 	str.w	r3, [lr]
 8016828:	a802      	add	r0, sp, #8
 801682a:	f001 f86d 	bl	8017908 <rmw_get_zero_initialized_init_options>
 801682e:	f10d 0e08 	add.w	lr, sp, #8
 8016832:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016836:	f104 0c18 	add.w	ip, r4, #24
 801683a:	682f      	ldr	r7, [r5, #0]
 801683c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016840:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016844:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016848:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801684c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016850:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016854:	ac20      	add	r4, sp, #128	; 0x80
 8016856:	e88c 0003 	stmia.w	ip, {r0, r1}
 801685a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801685e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016862:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8016866:	f107 0018 	add.w	r0, r7, #24
 801686a:	f001 f9cb 	bl	8017c04 <rmw_init_options_init>
 801686e:	4604      	mov	r4, r0
 8016870:	2800      	cmp	r0, #0
 8016872:	d0b3      	beq.n	80167dc <rcl_init_options_init+0x18>
 8016874:	9921      	ldr	r1, [sp, #132]	; 0x84
 8016876:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016878:	6828      	ldr	r0, [r5, #0]
 801687a:	4798      	blx	r3
 801687c:	4620      	mov	r0, r4
 801687e:	f7ff fe17 	bl	80164b0 <rcl_convert_rmw_ret_to_rcl_ret>
 8016882:	4604      	mov	r4, r0
 8016884:	e7aa      	b.n	80167dc <rcl_init_options_init+0x18>
 8016886:	240b      	movs	r4, #11
 8016888:	e7a8      	b.n	80167dc <rcl_init_options_init+0x18>
 801688a:	240a      	movs	r4, #10
 801688c:	e7a6      	b.n	80167dc <rcl_init_options_init+0x18>
 801688e:	bf00      	nop

08016890 <rcl_init_options_fini>:
 8016890:	b530      	push	{r4, r5, lr}
 8016892:	b087      	sub	sp, #28
 8016894:	b1f0      	cbz	r0, 80168d4 <rcl_init_options_fini+0x44>
 8016896:	6803      	ldr	r3, [r0, #0]
 8016898:	4604      	mov	r4, r0
 801689a:	b1db      	cbz	r3, 80168d4 <rcl_init_options_fini+0x44>
 801689c:	469c      	mov	ip, r3
 801689e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80168a2:	f10d 0e04 	add.w	lr, sp, #4
 80168a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80168aa:	f8dc 3000 	ldr.w	r3, [ip]
 80168ae:	f8ce 3000 	str.w	r3, [lr]
 80168b2:	a801      	add	r0, sp, #4
 80168b4:	f7f9 fcd0 	bl	8010258 <rcutils_allocator_is_valid>
 80168b8:	b160      	cbz	r0, 80168d4 <rcl_init_options_fini+0x44>
 80168ba:	6820      	ldr	r0, [r4, #0]
 80168bc:	3018      	adds	r0, #24
 80168be:	f001 fa51 	bl	8017d64 <rmw_init_options_fini>
 80168c2:	4605      	mov	r5, r0
 80168c4:	b950      	cbnz	r0, 80168dc <rcl_init_options_fini+0x4c>
 80168c6:	6820      	ldr	r0, [r4, #0]
 80168c8:	9b02      	ldr	r3, [sp, #8]
 80168ca:	9905      	ldr	r1, [sp, #20]
 80168cc:	4798      	blx	r3
 80168ce:	4628      	mov	r0, r5
 80168d0:	b007      	add	sp, #28
 80168d2:	bd30      	pop	{r4, r5, pc}
 80168d4:	250b      	movs	r5, #11
 80168d6:	4628      	mov	r0, r5
 80168d8:	b007      	add	sp, #28
 80168da:	bd30      	pop	{r4, r5, pc}
 80168dc:	f7ff fde8 	bl	80164b0 <rcl_convert_rmw_ret_to_rcl_ret>
 80168e0:	4605      	mov	r5, r0
 80168e2:	e7f8      	b.n	80168d6 <rcl_init_options_fini+0x46>

080168e4 <rcl_init_options_copy>:
 80168e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168e8:	b094      	sub	sp, #80	; 0x50
 80168ea:	2800      	cmp	r0, #0
 80168ec:	d058      	beq.n	80169a0 <rcl_init_options_copy+0xbc>
 80168ee:	4604      	mov	r4, r0
 80168f0:	6800      	ldr	r0, [r0, #0]
 80168f2:	2800      	cmp	r0, #0
 80168f4:	d054      	beq.n	80169a0 <rcl_init_options_copy+0xbc>
 80168f6:	460e      	mov	r6, r1
 80168f8:	f7f9 fcae 	bl	8010258 <rcutils_allocator_is_valid>
 80168fc:	2800      	cmp	r0, #0
 80168fe:	d04f      	beq.n	80169a0 <rcl_init_options_copy+0xbc>
 8016900:	2e00      	cmp	r6, #0
 8016902:	d04d      	beq.n	80169a0 <rcl_init_options_copy+0xbc>
 8016904:	6833      	ldr	r3, [r6, #0]
 8016906:	b123      	cbz	r3, 8016912 <rcl_init_options_copy+0x2e>
 8016908:	2464      	movs	r4, #100	; 0x64
 801690a:	4620      	mov	r0, r4
 801690c:	b014      	add	sp, #80	; 0x50
 801690e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016912:	6827      	ldr	r7, [r4, #0]
 8016914:	46bc      	mov	ip, r7
 8016916:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801691a:	ad0f      	add	r5, sp, #60	; 0x3c
 801691c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801691e:	f8dc 3000 	ldr.w	r3, [ip]
 8016922:	f8d7 8000 	ldr.w	r8, [r7]
 8016926:	602b      	str	r3, [r5, #0]
 8016928:	4619      	mov	r1, r3
 801692a:	2050      	movs	r0, #80	; 0x50
 801692c:	47c0      	blx	r8
 801692e:	4605      	mov	r5, r0
 8016930:	6030      	str	r0, [r6, #0]
 8016932:	b3d0      	cbz	r0, 80169aa <rcl_init_options_copy+0xc6>
 8016934:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8016938:	4686      	mov	lr, r0
 801693a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801693e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016942:	f8dc 3000 	ldr.w	r3, [ip]
 8016946:	f8ce 3000 	str.w	r3, [lr]
 801694a:	4668      	mov	r0, sp
 801694c:	f000 ffdc 	bl	8017908 <rmw_get_zero_initialized_init_options>
 8016950:	46ee      	mov	lr, sp
 8016952:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016956:	f105 0c18 	add.w	ip, r5, #24
 801695a:	6824      	ldr	r4, [r4, #0]
 801695c:	6835      	ldr	r5, [r6, #0]
 801695e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016962:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016966:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801696a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801696e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016972:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016976:	e88c 0003 	stmia.w	ip, {r0, r1}
 801697a:	f104 0018 	add.w	r0, r4, #24
 801697e:	f105 0118 	add.w	r1, r5, #24
 8016982:	f001 f9a7 	bl	8017cd4 <rmw_init_options_copy>
 8016986:	4604      	mov	r4, r0
 8016988:	2800      	cmp	r0, #0
 801698a:	d0be      	beq.n	801690a <rcl_init_options_copy+0x26>
 801698c:	f7f9 fc72 	bl	8010274 <rcutils_get_error_string>
 8016990:	f7f9 fc86 	bl	80102a0 <rcutils_reset_error>
 8016994:	4630      	mov	r0, r6
 8016996:	f7ff ff7b 	bl	8016890 <rcl_init_options_fini>
 801699a:	b140      	cbz	r0, 80169ae <rcl_init_options_copy+0xca>
 801699c:	4604      	mov	r4, r0
 801699e:	e7b4      	b.n	801690a <rcl_init_options_copy+0x26>
 80169a0:	240b      	movs	r4, #11
 80169a2:	4620      	mov	r0, r4
 80169a4:	b014      	add	sp, #80	; 0x50
 80169a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169aa:	240a      	movs	r4, #10
 80169ac:	e7ad      	b.n	801690a <rcl_init_options_copy+0x26>
 80169ae:	4620      	mov	r0, r4
 80169b0:	b014      	add	sp, #80	; 0x50
 80169b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169b6:	f7ff bd7b 	b.w	80164b0 <rcl_convert_rmw_ret_to_rcl_ret>
 80169ba:	bf00      	nop

080169bc <rcl_get_localhost_only>:
 80169bc:	b510      	push	{r4, lr}
 80169be:	b082      	sub	sp, #8
 80169c0:	2300      	movs	r3, #0
 80169c2:	9301      	str	r3, [sp, #4]
 80169c4:	b1b8      	cbz	r0, 80169f6 <rcl_get_localhost_only+0x3a>
 80169c6:	4604      	mov	r4, r0
 80169c8:	a901      	add	r1, sp, #4
 80169ca:	480c      	ldr	r0, [pc, #48]	; (80169fc <rcl_get_localhost_only+0x40>)
 80169cc:	f000 fc90 	bl	80172f0 <rcutils_get_env>
 80169d0:	b110      	cbz	r0, 80169d8 <rcl_get_localhost_only+0x1c>
 80169d2:	2001      	movs	r0, #1
 80169d4:	b002      	add	sp, #8
 80169d6:	bd10      	pop	{r4, pc}
 80169d8:	9b01      	ldr	r3, [sp, #4]
 80169da:	b113      	cbz	r3, 80169e2 <rcl_get_localhost_only+0x26>
 80169dc:	781a      	ldrb	r2, [r3, #0]
 80169de:	2a31      	cmp	r2, #49	; 0x31
 80169e0:	d004      	beq.n	80169ec <rcl_get_localhost_only+0x30>
 80169e2:	2302      	movs	r3, #2
 80169e4:	2000      	movs	r0, #0
 80169e6:	7023      	strb	r3, [r4, #0]
 80169e8:	b002      	add	sp, #8
 80169ea:	bd10      	pop	{r4, pc}
 80169ec:	785b      	ldrb	r3, [r3, #1]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d1f7      	bne.n	80169e2 <rcl_get_localhost_only+0x26>
 80169f2:	2301      	movs	r3, #1
 80169f4:	e7f6      	b.n	80169e4 <rcl_get_localhost_only+0x28>
 80169f6:	200b      	movs	r0, #11
 80169f8:	b002      	add	sp, #8
 80169fa:	bd10      	pop	{r4, pc}
 80169fc:	0801d654 	.word	0x0801d654

08016a00 <rcl_get_zero_initialized_node>:
 8016a00:	4a03      	ldr	r2, [pc, #12]	; (8016a10 <rcl_get_zero_initialized_node+0x10>)
 8016a02:	4603      	mov	r3, r0
 8016a04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016a08:	e883 0003 	stmia.w	r3, {r0, r1}
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	4770      	bx	lr
 8016a10:	0801d67c 	.word	0x0801d67c

08016a14 <rcl_node_init>:
 8016a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a18:	b0a9      	sub	sp, #164	; 0xa4
 8016a1a:	4604      	mov	r4, r0
 8016a1c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8016a20:	a823      	add	r0, sp, #140	; 0x8c
 8016a22:	460e      	mov	r6, r1
 8016a24:	4615      	mov	r5, r2
 8016a26:	461f      	mov	r7, r3
 8016a28:	f004 f8f0 	bl	801ac0c <rcl_guard_condition_get_default_options>
 8016a2c:	f1b8 0f00 	cmp.w	r8, #0
 8016a30:	f000 80e6 	beq.w	8016c00 <rcl_node_init+0x1ec>
 8016a34:	4640      	mov	r0, r8
 8016a36:	f7f9 fc0f 	bl	8010258 <rcutils_allocator_is_valid>
 8016a3a:	2800      	cmp	r0, #0
 8016a3c:	f000 80e0 	beq.w	8016c00 <rcl_node_init+0x1ec>
 8016a40:	2e00      	cmp	r6, #0
 8016a42:	f000 80dd 	beq.w	8016c00 <rcl_node_init+0x1ec>
 8016a46:	2d00      	cmp	r5, #0
 8016a48:	f000 80da 	beq.w	8016c00 <rcl_node_init+0x1ec>
 8016a4c:	2c00      	cmp	r4, #0
 8016a4e:	f000 80d7 	beq.w	8016c00 <rcl_node_init+0x1ec>
 8016a52:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016a56:	f1b9 0f00 	cmp.w	r9, #0
 8016a5a:	f040 80fd 	bne.w	8016c58 <rcl_node_init+0x244>
 8016a5e:	2f00      	cmp	r7, #0
 8016a60:	f000 80ce 	beq.w	8016c00 <rcl_node_init+0x1ec>
 8016a64:	4638      	mov	r0, r7
 8016a66:	f7ff fd41 	bl	80164ec <rcl_context_is_valid>
 8016a6a:	4682      	mov	sl, r0
 8016a6c:	2800      	cmp	r0, #0
 8016a6e:	f000 80cd 	beq.w	8016c0c <rcl_node_init+0x1f8>
 8016a72:	464a      	mov	r2, r9
 8016a74:	a922      	add	r1, sp, #136	; 0x88
 8016a76:	4630      	mov	r0, r6
 8016a78:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8016a7c:	f001 f83a 	bl	8017af4 <rmw_validate_node_name>
 8016a80:	4681      	mov	r9, r0
 8016a82:	2800      	cmp	r0, #0
 8016a84:	f040 80be 	bne.w	8016c04 <rcl_node_init+0x1f0>
 8016a88:	9822      	ldr	r0, [sp, #136]	; 0x88
 8016a8a:	2800      	cmp	r0, #0
 8016a8c:	f040 80f0 	bne.w	8016c70 <rcl_node_init+0x25c>
 8016a90:	4628      	mov	r0, r5
 8016a92:	f7e9 fba7 	bl	80001e4 <strlen>
 8016a96:	2800      	cmp	r0, #0
 8016a98:	f040 80bb 	bne.w	8016c12 <rcl_node_init+0x1fe>
 8016a9c:	4d7c      	ldr	r5, [pc, #496]	; (8016c90 <rcl_node_init+0x27c>)
 8016a9e:	a922      	add	r1, sp, #136	; 0x88
 8016aa0:	2200      	movs	r2, #0
 8016aa2:	4628      	mov	r0, r5
 8016aa4:	f001 f808 	bl	8017ab8 <rmw_validate_namespace>
 8016aa8:	4681      	mov	r9, r0
 8016aaa:	2800      	cmp	r0, #0
 8016aac:	f040 80aa 	bne.w	8016c04 <rcl_node_init+0x1f0>
 8016ab0:	4682      	mov	sl, r0
 8016ab2:	9822      	ldr	r0, [sp, #136]	; 0x88
 8016ab4:	2800      	cmp	r0, #0
 8016ab6:	f040 80e0 	bne.w	8016c7a <rcl_node_init+0x266>
 8016aba:	f8d8 3000 	ldr.w	r3, [r8]
 8016abe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016ac2:	2078      	movs	r0, #120	; 0x78
 8016ac4:	4798      	blx	r3
 8016ac6:	4681      	mov	r9, r0
 8016ac8:	6060      	str	r0, [r4, #4]
 8016aca:	2800      	cmp	r0, #0
 8016acc:	f000 80ca 	beq.w	8016c64 <rcl_node_init+0x250>
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 8016ad8:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 8016adc:	a808      	add	r0, sp, #32
 8016ade:	f000 f907 	bl	8016cf0 <rcl_node_get_default_options>
 8016ae2:	a908      	add	r1, sp, #32
 8016ae4:	4648      	mov	r0, r9
 8016ae6:	2268      	movs	r2, #104	; 0x68
 8016ae8:	f004 fd36 	bl	801b558 <memcpy>
 8016aec:	6861      	ldr	r1, [r4, #4]
 8016aee:	6027      	str	r7, [r4, #0]
 8016af0:	4640      	mov	r0, r8
 8016af2:	f000 f90b 	bl	8016d0c <rcl_node_options_copy>
 8016af6:	2800      	cmp	r0, #0
 8016af8:	d158      	bne.n	8016bac <rcl_node_init+0x198>
 8016afa:	4628      	mov	r0, r5
 8016afc:	f7e9 fb72 	bl	80001e4 <strlen>
 8016b00:	4428      	add	r0, r5
 8016b02:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8016b06:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8016b0a:	2b2f      	cmp	r3, #47	; 0x2f
 8016b0c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016b10:	9300      	str	r3, [sp, #0]
 8016b12:	bf0c      	ite	eq
 8016b14:	4b5f      	ldreq	r3, [pc, #380]	; (8016c94 <rcl_node_init+0x280>)
 8016b16:	4b60      	ldrne	r3, [pc, #384]	; (8016c98 <rcl_node_init+0x284>)
 8016b18:	9302      	str	r3, [sp, #8]
 8016b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016b1e:	9301      	str	r3, [sp, #4]
 8016b20:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016b24:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016b28:	f000 fc0a 	bl	8017340 <rcutils_format_string_limit>
 8016b2c:	6823      	ldr	r3, [r4, #0]
 8016b2e:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 8016b32:	6818      	ldr	r0, [r3, #0]
 8016b34:	4631      	mov	r1, r6
 8016b36:	3028      	adds	r0, #40	; 0x28
 8016b38:	462a      	mov	r2, r5
 8016b3a:	6866      	ldr	r6, [r4, #4]
 8016b3c:	f001 fbc2 	bl	80182c4 <rmw_create_node>
 8016b40:	6863      	ldr	r3, [r4, #4]
 8016b42:	66b0      	str	r0, [r6, #104]	; 0x68
 8016b44:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8016b46:	2800      	cmp	r0, #0
 8016b48:	d032      	beq.n	8016bb0 <rcl_node_init+0x19c>
 8016b4a:	f001 fc4d 	bl	80183e8 <rmw_node_get_graph_guard_condition>
 8016b4e:	4681      	mov	r9, r0
 8016b50:	b360      	cbz	r0, 8016bac <rcl_node_init+0x198>
 8016b52:	f8d8 3000 	ldr.w	r3, [r8]
 8016b56:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016b5a:	6866      	ldr	r6, [r4, #4]
 8016b5c:	2008      	movs	r0, #8
 8016b5e:	4798      	blx	r3
 8016b60:	6863      	ldr	r3, [r4, #4]
 8016b62:	66f0      	str	r0, [r6, #108]	; 0x6c
 8016b64:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8016b68:	f1bb 0f00 	cmp.w	fp, #0
 8016b6c:	d020      	beq.n	8016bb0 <rcl_node_init+0x19c>
 8016b6e:	a806      	add	r0, sp, #24
 8016b70:	f003 ffbc 	bl	801aaec <rcl_get_zero_initialized_guard_condition>
 8016b74:	a806      	add	r0, sp, #24
 8016b76:	c803      	ldmia	r0, {r0, r1}
 8016b78:	6863      	ldr	r3, [r4, #4]
 8016b7a:	46c4      	mov	ip, r8
 8016b7c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8016b80:	e88b 0003 	stmia.w	fp, {r0, r1}
 8016b84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016b88:	ae23      	add	r6, sp, #140	; 0x8c
 8016b8a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016b8c:	f8dc 3000 	ldr.w	r3, [ip]
 8016b90:	6033      	str	r3, [r6, #0]
 8016b92:	ab28      	add	r3, sp, #160	; 0xa0
 8016b94:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8016b98:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016b9c:	4649      	mov	r1, r9
 8016b9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016ba0:	463a      	mov	r2, r7
 8016ba2:	4670      	mov	r0, lr
 8016ba4:	f003 ffac 	bl	801ab00 <rcl_guard_condition_init_from_rmw>
 8016ba8:	4681      	mov	r9, r0
 8016baa:	b328      	cbz	r0, 8016bf8 <rcl_node_init+0x1e4>
 8016bac:	6863      	ldr	r3, [r4, #4]
 8016bae:	b1f3      	cbz	r3, 8016bee <rcl_node_init+0x1da>
 8016bb0:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8016bb2:	b128      	cbz	r0, 8016bc0 <rcl_node_init+0x1ac>
 8016bb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016bb8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016bbc:	4798      	blx	r3
 8016bbe:	6863      	ldr	r3, [r4, #4]
 8016bc0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8016bc2:	b110      	cbz	r0, 8016bca <rcl_node_init+0x1b6>
 8016bc4:	f001 fb96 	bl	80182f4 <rmw_destroy_node>
 8016bc8:	6863      	ldr	r3, [r4, #4]
 8016bca:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8016bcc:	b148      	cbz	r0, 8016be2 <rcl_node_init+0x1ce>
 8016bce:	f003 fff7 	bl	801abc0 <rcl_guard_condition_fini>
 8016bd2:	6863      	ldr	r3, [r4, #4]
 8016bd4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016bd8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8016bda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016bde:	4798      	blx	r3
 8016be0:	6863      	ldr	r3, [r4, #4]
 8016be2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016be6:	4618      	mov	r0, r3
 8016be8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016bec:	4798      	blx	r3
 8016bee:	2300      	movs	r3, #0
 8016bf0:	e9c4 3300 	strd	r3, r3, [r4]
 8016bf4:	f04f 0901 	mov.w	r9, #1
 8016bf8:	f1ba 0f00 	cmp.w	sl, #0
 8016bfc:	d125      	bne.n	8016c4a <rcl_node_init+0x236>
 8016bfe:	e001      	b.n	8016c04 <rcl_node_init+0x1f0>
 8016c00:	f04f 090b 	mov.w	r9, #11
 8016c04:	4648      	mov	r0, r9
 8016c06:	b029      	add	sp, #164	; 0xa4
 8016c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c0c:	f04f 0965 	mov.w	r9, #101	; 0x65
 8016c10:	e7f8      	b.n	8016c04 <rcl_node_init+0x1f0>
 8016c12:	782b      	ldrb	r3, [r5, #0]
 8016c14:	2b2f      	cmp	r3, #47	; 0x2f
 8016c16:	f43f af42 	beq.w	8016a9e <rcl_node_init+0x8a>
 8016c1a:	9503      	str	r5, [sp, #12]
 8016c1c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016c20:	9300      	str	r3, [sp, #0]
 8016c22:	4b1e      	ldr	r3, [pc, #120]	; (8016c9c <rcl_node_init+0x288>)
 8016c24:	9302      	str	r3, [sp, #8]
 8016c26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016c2a:	9301      	str	r3, [sp, #4]
 8016c2c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016c30:	f000 fb86 	bl	8017340 <rcutils_format_string_limit>
 8016c34:	4605      	mov	r5, r0
 8016c36:	b340      	cbz	r0, 8016c8a <rcl_node_init+0x276>
 8016c38:	2200      	movs	r2, #0
 8016c3a:	a922      	add	r1, sp, #136	; 0x88
 8016c3c:	9222      	str	r2, [sp, #136]	; 0x88
 8016c3e:	f000 ff3b 	bl	8017ab8 <rmw_validate_namespace>
 8016c42:	4681      	mov	r9, r0
 8016c44:	2800      	cmp	r0, #0
 8016c46:	f43f af34 	beq.w	8016ab2 <rcl_node_init+0x9e>
 8016c4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016c4e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016c52:	4628      	mov	r0, r5
 8016c54:	4798      	blx	r3
 8016c56:	e7d5      	b.n	8016c04 <rcl_node_init+0x1f0>
 8016c58:	f04f 0964 	mov.w	r9, #100	; 0x64
 8016c5c:	4648      	mov	r0, r9
 8016c5e:	b029      	add	sp, #164	; 0xa4
 8016c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c64:	f04f 090a 	mov.w	r9, #10
 8016c68:	f1ba 0f00 	cmp.w	sl, #0
 8016c6c:	d1ed      	bne.n	8016c4a <rcl_node_init+0x236>
 8016c6e:	e7c9      	b.n	8016c04 <rcl_node_init+0x1f0>
 8016c70:	f000 ff92 	bl	8017b98 <rmw_node_name_validation_result_string>
 8016c74:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8016c78:	e7c4      	b.n	8016c04 <rcl_node_init+0x1f0>
 8016c7a:	f000 ff2f 	bl	8017adc <rmw_namespace_validation_result_string>
 8016c7e:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8016c82:	f1ba 0f00 	cmp.w	sl, #0
 8016c86:	d1e0      	bne.n	8016c4a <rcl_node_init+0x236>
 8016c88:	e7bc      	b.n	8016c04 <rcl_node_init+0x1f0>
 8016c8a:	f04f 090a 	mov.w	r9, #10
 8016c8e:	e7b9      	b.n	8016c04 <rcl_node_init+0x1f0>
 8016c90:	0801d66c 	.word	0x0801d66c
 8016c94:	0801cdbc 	.word	0x0801cdbc
 8016c98:	0801d674 	.word	0x0801d674
 8016c9c:	0801d670 	.word	0x0801d670

08016ca0 <rcl_node_is_valid>:
 8016ca0:	b130      	cbz	r0, 8016cb0 <rcl_node_is_valid+0x10>
 8016ca2:	6843      	ldr	r3, [r0, #4]
 8016ca4:	b123      	cbz	r3, 8016cb0 <rcl_node_is_valid+0x10>
 8016ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016ca8:	b113      	cbz	r3, 8016cb0 <rcl_node_is_valid+0x10>
 8016caa:	6800      	ldr	r0, [r0, #0]
 8016cac:	f7ff bc1e 	b.w	80164ec <rcl_context_is_valid>
 8016cb0:	2000      	movs	r0, #0
 8016cb2:	4770      	bx	lr

08016cb4 <rcl_node_get_name>:
 8016cb4:	b120      	cbz	r0, 8016cc0 <rcl_node_get_name+0xc>
 8016cb6:	6840      	ldr	r0, [r0, #4]
 8016cb8:	b110      	cbz	r0, 8016cc0 <rcl_node_get_name+0xc>
 8016cba:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016cbc:	b100      	cbz	r0, 8016cc0 <rcl_node_get_name+0xc>
 8016cbe:	6880      	ldr	r0, [r0, #8]
 8016cc0:	4770      	bx	lr
 8016cc2:	bf00      	nop

08016cc4 <rcl_node_get_namespace>:
 8016cc4:	b120      	cbz	r0, 8016cd0 <rcl_node_get_namespace+0xc>
 8016cc6:	6840      	ldr	r0, [r0, #4]
 8016cc8:	b110      	cbz	r0, 8016cd0 <rcl_node_get_namespace+0xc>
 8016cca:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016ccc:	b100      	cbz	r0, 8016cd0 <rcl_node_get_namespace+0xc>
 8016cce:	68c0      	ldr	r0, [r0, #12]
 8016cd0:	4770      	bx	lr
 8016cd2:	bf00      	nop

08016cd4 <rcl_node_get_options>:
 8016cd4:	b128      	cbz	r0, 8016ce2 <rcl_node_get_options+0xe>
 8016cd6:	6840      	ldr	r0, [r0, #4]
 8016cd8:	b118      	cbz	r0, 8016ce2 <rcl_node_get_options+0xe>
 8016cda:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	bf08      	it	eq
 8016ce0:	2000      	moveq	r0, #0
 8016ce2:	4770      	bx	lr

08016ce4 <rcl_node_get_rmw_handle>:
 8016ce4:	b110      	cbz	r0, 8016cec <rcl_node_get_rmw_handle+0x8>
 8016ce6:	6840      	ldr	r0, [r0, #4]
 8016ce8:	b100      	cbz	r0, 8016cec <rcl_node_get_rmw_handle+0x8>
 8016cea:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016cec:	4770      	bx	lr
 8016cee:	bf00      	nop

08016cf0 <rcl_node_get_default_options>:
 8016cf0:	b510      	push	{r4, lr}
 8016cf2:	2268      	movs	r2, #104	; 0x68
 8016cf4:	4604      	mov	r4, r0
 8016cf6:	2100      	movs	r1, #0
 8016cf8:	f004 fc3c 	bl	801b574 <memset>
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	f7f9 fa9d 	bl	801023c <rcutils_get_default_allocator>
 8016d02:	2301      	movs	r3, #1
 8016d04:	7523      	strb	r3, [r4, #20]
 8016d06:	4620      	mov	r0, r4
 8016d08:	bd10      	pop	{r4, pc}
 8016d0a:	bf00      	nop

08016d0c <rcl_node_options_copy>:
 8016d0c:	b1d0      	cbz	r0, 8016d44 <rcl_node_options_copy+0x38>
 8016d0e:	b570      	push	{r4, r5, r6, lr}
 8016d10:	460c      	mov	r4, r1
 8016d12:	b1a9      	cbz	r1, 8016d40 <rcl_node_options_copy+0x34>
 8016d14:	4288      	cmp	r0, r1
 8016d16:	4684      	mov	ip, r0
 8016d18:	d012      	beq.n	8016d40 <rcl_node_options_copy+0x34>
 8016d1a:	4605      	mov	r5, r0
 8016d1c:	8a86      	ldrh	r6, [r0, #20]
 8016d1e:	468e      	mov	lr, r1
 8016d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d22:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016d26:	682b      	ldr	r3, [r5, #0]
 8016d28:	f8ce 3000 	str.w	r3, [lr]
 8016d2c:	f10c 0118 	add.w	r1, ip, #24
 8016d30:	2250      	movs	r2, #80	; 0x50
 8016d32:	82a6      	strh	r6, [r4, #20]
 8016d34:	f104 0018 	add.w	r0, r4, #24
 8016d38:	f004 fc0e 	bl	801b558 <memcpy>
 8016d3c:	2000      	movs	r0, #0
 8016d3e:	bd70      	pop	{r4, r5, r6, pc}
 8016d40:	200b      	movs	r0, #11
 8016d42:	bd70      	pop	{r4, r5, r6, pc}
 8016d44:	200b      	movs	r0, #11
 8016d46:	4770      	bx	lr

08016d48 <rcl_node_resolve_name>:
 8016d48:	b082      	sub	sp, #8
 8016d4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d4e:	b091      	sub	sp, #68	; 0x44
 8016d50:	ac1a      	add	r4, sp, #104	; 0x68
 8016d52:	e884 000c 	stmia.w	r4, {r2, r3}
 8016d56:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8016d5a:	2800      	cmp	r0, #0
 8016d5c:	d03b      	beq.n	8016dd6 <rcl_node_resolve_name+0x8e>
 8016d5e:	460c      	mov	r4, r1
 8016d60:	4605      	mov	r5, r0
 8016d62:	f7ff ffb7 	bl	8016cd4 <rcl_node_get_options>
 8016d66:	2800      	cmp	r0, #0
 8016d68:	d037      	beq.n	8016dda <rcl_node_resolve_name+0x92>
 8016d6a:	4628      	mov	r0, r5
 8016d6c:	f7ff ffa2 	bl	8016cb4 <rcl_node_get_name>
 8016d70:	4606      	mov	r6, r0
 8016d72:	4628      	mov	r0, r5
 8016d74:	f7ff ffa6 	bl	8016cc4 <rcl_node_get_namespace>
 8016d78:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8016d7c:	4681      	mov	r9, r0
 8016d7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016d82:	ad0b      	add	r5, sp, #44	; 0x2c
 8016d84:	46ac      	mov	ip, r5
 8016d86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d8a:	f8de 3000 	ldr.w	r3, [lr]
 8016d8e:	f8cc 3000 	str.w	r3, [ip]
 8016d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d94:	b1fb      	cbz	r3, 8016dd6 <rcl_node_resolve_name+0x8e>
 8016d96:	468a      	mov	sl, r1
 8016d98:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8016d9c:	f000 fc28 	bl	80175f0 <rcutils_get_zero_initialized_string_map>
 8016da0:	ab10      	add	r3, sp, #64	; 0x40
 8016da2:	9008      	str	r0, [sp, #32]
 8016da4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016da8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016dac:	2100      	movs	r1, #0
 8016dae:	e895 000c 	ldmia.w	r5, {r2, r3}
 8016db2:	a808      	add	r0, sp, #32
 8016db4:	f000 fc94 	bl	80176e0 <rcutils_string_map_init>
 8016db8:	4607      	mov	r7, r0
 8016dba:	b180      	cbz	r0, 8016dde <rcl_node_resolve_name+0x96>
 8016dbc:	f7f9 fa5a 	bl	8010274 <rcutils_get_error_string>
 8016dc0:	f7f9 fa6e 	bl	80102a0 <rcutils_reset_error>
 8016dc4:	2f0a      	cmp	r7, #10
 8016dc6:	bf18      	it	ne
 8016dc8:	2701      	movne	r7, #1
 8016dca:	4638      	mov	r0, r7
 8016dcc:	b011      	add	sp, #68	; 0x44
 8016dce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dd2:	b002      	add	sp, #8
 8016dd4:	4770      	bx	lr
 8016dd6:	270b      	movs	r7, #11
 8016dd8:	e7f7      	b.n	8016dca <rcl_node_resolve_name+0x82>
 8016dda:	2701      	movs	r7, #1
 8016ddc:	e7f5      	b.n	8016dca <rcl_node_resolve_name+0x82>
 8016dde:	9009      	str	r0, [sp, #36]	; 0x24
 8016de0:	9007      	str	r0, [sp, #28]
 8016de2:	a808      	add	r0, sp, #32
 8016de4:	f003 fe7c 	bl	801aae0 <rcl_get_default_topic_name_substitutions>
 8016de8:	4607      	mov	r7, r0
 8016dea:	b1a8      	cbz	r0, 8016e18 <rcl_node_resolve_name+0xd0>
 8016dec:	280a      	cmp	r0, #10
 8016dee:	9c07      	ldr	r4, [sp, #28]
 8016df0:	d000      	beq.n	8016df4 <rcl_node_resolve_name+0xac>
 8016df2:	2701      	movs	r7, #1
 8016df4:	a808      	add	r0, sp, #32
 8016df6:	f000 fcb3 	bl	8017760 <rcutils_string_map_fini>
 8016dfa:	2800      	cmp	r0, #0
 8016dfc:	d13d      	bne.n	8016e7a <rcl_node_resolve_name+0x132>
 8016dfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e00:	4659      	mov	r1, fp
 8016e02:	47d0      	blx	sl
 8016e04:	4659      	mov	r1, fp
 8016e06:	4620      	mov	r0, r4
 8016e08:	47d0      	blx	sl
 8016e0a:	f1b8 0f00 	cmp.w	r8, #0
 8016e0e:	d0dc      	beq.n	8016dca <rcl_node_resolve_name+0x82>
 8016e10:	2f67      	cmp	r7, #103	; 0x67
 8016e12:	bf08      	it	eq
 8016e14:	2768      	moveq	r7, #104	; 0x68
 8016e16:	e7d8      	b.n	8016dca <rcl_node_resolve_name+0x82>
 8016e18:	ab09      	add	r3, sp, #36	; 0x24
 8016e1a:	9305      	str	r3, [sp, #20]
 8016e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e1e:	46ec      	mov	ip, sp
 8016e20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e24:	682b      	ldr	r3, [r5, #0]
 8016e26:	f8cc 3000 	str.w	r3, [ip]
 8016e2a:	464a      	mov	r2, r9
 8016e2c:	4631      	mov	r1, r6
 8016e2e:	4620      	mov	r0, r4
 8016e30:	ab08      	add	r3, sp, #32
 8016e32:	f003 fcf7 	bl	801a824 <rcl_expand_topic_name>
 8016e36:	4607      	mov	r7, r0
 8016e38:	b9b8      	cbnz	r0, 8016e6a <rcl_node_resolve_name+0x122>
 8016e3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016e3c:	9009      	str	r0, [sp, #36]	; 0x24
 8016e3e:	4602      	mov	r2, r0
 8016e40:	a90a      	add	r1, sp, #40	; 0x28
 8016e42:	4620      	mov	r0, r4
 8016e44:	f000 fd74 	bl	8017930 <rmw_validate_full_topic_name>
 8016e48:	b988      	cbnz	r0, 8016e6e <rcl_node_resolve_name+0x126>
 8016e4a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016e4c:	b9d5      	cbnz	r5, 8016e84 <rcl_node_resolve_name+0x13c>
 8016e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e50:	a808      	add	r0, sp, #32
 8016e52:	601c      	str	r4, [r3, #0]
 8016e54:	f000 fc84 	bl	8017760 <rcutils_string_map_fini>
 8016e58:	4607      	mov	r7, r0
 8016e5a:	b1a8      	cbz	r0, 8016e88 <rcl_node_resolve_name+0x140>
 8016e5c:	f7f9 fa0a 	bl	8010274 <rcutils_get_error_string>
 8016e60:	462c      	mov	r4, r5
 8016e62:	f7f9 fa1d 	bl	80102a0 <rcutils_reset_error>
 8016e66:	2701      	movs	r7, #1
 8016e68:	e7c9      	b.n	8016dfe <rcl_node_resolve_name+0xb6>
 8016e6a:	9c07      	ldr	r4, [sp, #28]
 8016e6c:	e7c2      	b.n	8016df4 <rcl_node_resolve_name+0xac>
 8016e6e:	f7f9 fa01 	bl	8010274 <rcutils_get_error_string>
 8016e72:	2701      	movs	r7, #1
 8016e74:	f7f9 fa14 	bl	80102a0 <rcutils_reset_error>
 8016e78:	e7bc      	b.n	8016df4 <rcl_node_resolve_name+0xac>
 8016e7a:	f7f9 f9fb 	bl	8010274 <rcutils_get_error_string>
 8016e7e:	f7f9 fa0f 	bl	80102a0 <rcutils_reset_error>
 8016e82:	e7bc      	b.n	8016dfe <rcl_node_resolve_name+0xb6>
 8016e84:	2767      	movs	r7, #103	; 0x67
 8016e86:	e7b5      	b.n	8016df4 <rcl_node_resolve_name+0xac>
 8016e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e8a:	4659      	mov	r1, fp
 8016e8c:	47d0      	blx	sl
 8016e8e:	4659      	mov	r1, fp
 8016e90:	4638      	mov	r0, r7
 8016e92:	47d0      	blx	sl
 8016e94:	e799      	b.n	8016dca <rcl_node_resolve_name+0x82>
 8016e96:	bf00      	nop

08016e98 <exact_match_lookup>:
 8016e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e9a:	f102 0708 	add.w	r7, r2, #8
 8016e9e:	460b      	mov	r3, r1
 8016ea0:	4614      	mov	r4, r2
 8016ea2:	4606      	mov	r6, r0
 8016ea4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016ea8:	b085      	sub	sp, #20
 8016eaa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016eae:	4618      	mov	r0, r3
 8016eb0:	4919      	ldr	r1, [pc, #100]	; (8016f18 <exact_match_lookup+0x80>)
 8016eb2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016eb6:	f000 fa35 	bl	8017324 <rcutils_join_path>
 8016eba:	7833      	ldrb	r3, [r6, #0]
 8016ebc:	2b2f      	cmp	r3, #47	; 0x2f
 8016ebe:	4605      	mov	r5, r0
 8016ec0:	d023      	beq.n	8016f0a <exact_match_lookup+0x72>
 8016ec2:	f104 030c 	add.w	r3, r4, #12
 8016ec6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016eca:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016ece:	1c70      	adds	r0, r6, #1
 8016ed0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016ed4:	f000 fa2c 	bl	8017330 <rcutils_to_native_path>
 8016ed8:	4606      	mov	r6, r0
 8016eda:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016ede:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016ee2:	4631      	mov	r1, r6
 8016ee4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016ee8:	4628      	mov	r0, r5
 8016eea:	f000 fa1b 	bl	8017324 <rcutils_join_path>
 8016eee:	6862      	ldr	r2, [r4, #4]
 8016ef0:	6921      	ldr	r1, [r4, #16]
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	4630      	mov	r0, r6
 8016ef6:	461e      	mov	r6, r3
 8016ef8:	4790      	blx	r2
 8016efa:	4628      	mov	r0, r5
 8016efc:	6863      	ldr	r3, [r4, #4]
 8016efe:	6921      	ldr	r1, [r4, #16]
 8016f00:	4798      	blx	r3
 8016f02:	4635      	mov	r5, r6
 8016f04:	4628      	mov	r0, r5
 8016f06:	b005      	add	sp, #20
 8016f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f0a:	7873      	ldrb	r3, [r6, #1]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d1d8      	bne.n	8016ec2 <exact_match_lookup+0x2a>
 8016f10:	4628      	mov	r0, r5
 8016f12:	b005      	add	sp, #20
 8016f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f16:	bf00      	nop
 8016f18:	0801d6c0 	.word	0x0801d6c0

08016f1c <rcl_get_secure_root>:
 8016f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f20:	b085      	sub	sp, #20
 8016f22:	b168      	cbz	r0, 8016f40 <rcl_get_secure_root+0x24>
 8016f24:	4607      	mov	r7, r0
 8016f26:	4608      	mov	r0, r1
 8016f28:	460c      	mov	r4, r1
 8016f2a:	f7f9 f995 	bl	8010258 <rcutils_allocator_is_valid>
 8016f2e:	b138      	cbz	r0, 8016f40 <rcl_get_secure_root+0x24>
 8016f30:	2300      	movs	r3, #0
 8016f32:	482d      	ldr	r0, [pc, #180]	; (8016fe8 <rcl_get_secure_root+0xcc>)
 8016f34:	9303      	str	r3, [sp, #12]
 8016f36:	a903      	add	r1, sp, #12
 8016f38:	f000 f9da 	bl	80172f0 <rcutils_get_env>
 8016f3c:	4605      	mov	r5, r0
 8016f3e:	b120      	cbz	r0, 8016f4a <rcl_get_secure_root+0x2e>
 8016f40:	2500      	movs	r5, #0
 8016f42:	4628      	mov	r0, r5
 8016f44:	b005      	add	sp, #20
 8016f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f4a:	9b03      	ldr	r3, [sp, #12]
 8016f4c:	781a      	ldrb	r2, [r3, #0]
 8016f4e:	2a00      	cmp	r2, #0
 8016f50:	d0f6      	beq.n	8016f40 <rcl_get_secure_root+0x24>
 8016f52:	f104 090c 	add.w	r9, r4, #12
 8016f56:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016f5a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016f5e:	4618      	mov	r0, r3
 8016f60:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016f64:	f000 fb06 	bl	8017574 <rcutils_strdup>
 8016f68:	4680      	mov	r8, r0
 8016f6a:	2800      	cmp	r0, #0
 8016f6c:	d0e8      	beq.n	8016f40 <rcl_get_secure_root+0x24>
 8016f6e:	481f      	ldr	r0, [pc, #124]	; (8016fec <rcl_get_secure_root+0xd0>)
 8016f70:	9503      	str	r5, [sp, #12]
 8016f72:	a903      	add	r1, sp, #12
 8016f74:	f000 f9bc 	bl	80172f0 <rcutils_get_env>
 8016f78:	b160      	cbz	r0, 8016f94 <rcl_get_secure_root+0x78>
 8016f7a:	2600      	movs	r6, #0
 8016f7c:	6863      	ldr	r3, [r4, #4]
 8016f7e:	6921      	ldr	r1, [r4, #16]
 8016f80:	4630      	mov	r0, r6
 8016f82:	4798      	blx	r3
 8016f84:	4640      	mov	r0, r8
 8016f86:	6863      	ldr	r3, [r4, #4]
 8016f88:	6921      	ldr	r1, [r4, #16]
 8016f8a:	4798      	blx	r3
 8016f8c:	4628      	mov	r0, r5
 8016f8e:	b005      	add	sp, #20
 8016f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f94:	9b03      	ldr	r3, [sp, #12]
 8016f96:	781e      	ldrb	r6, [r3, #0]
 8016f98:	b1f6      	cbz	r6, 8016fd8 <rcl_get_secure_root+0xbc>
 8016f9a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016f9e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016fa8:	f000 fae4 	bl	8017574 <rcutils_strdup>
 8016fac:	4606      	mov	r6, r0
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	d0e3      	beq.n	8016f7a <rcl_get_secure_root+0x5e>
 8016fb2:	4622      	mov	r2, r4
 8016fb4:	4641      	mov	r1, r8
 8016fb6:	f7ff ff6f 	bl	8016e98 <exact_match_lookup>
 8016fba:	4605      	mov	r5, r0
 8016fbc:	2d00      	cmp	r5, #0
 8016fbe:	d0dd      	beq.n	8016f7c <rcl_get_secure_root+0x60>
 8016fc0:	4628      	mov	r0, r5
 8016fc2:	f000 f9ad 	bl	8017320 <rcutils_is_directory>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	2800      	cmp	r0, #0
 8016fca:	d1d7      	bne.n	8016f7c <rcl_get_secure_root+0x60>
 8016fcc:	4628      	mov	r0, r5
 8016fce:	6921      	ldr	r1, [r4, #16]
 8016fd0:	461d      	mov	r5, r3
 8016fd2:	6863      	ldr	r3, [r4, #4]
 8016fd4:	4798      	blx	r3
 8016fd6:	e7d1      	b.n	8016f7c <rcl_get_secure_root+0x60>
 8016fd8:	4622      	mov	r2, r4
 8016fda:	4638      	mov	r0, r7
 8016fdc:	4641      	mov	r1, r8
 8016fde:	f7ff ff5b 	bl	8016e98 <exact_match_lookup>
 8016fe2:	4605      	mov	r5, r0
 8016fe4:	e7ea      	b.n	8016fbc <rcl_get_secure_root+0xa0>
 8016fe6:	bf00      	nop
 8016fe8:	0801d6cc 	.word	0x0801d6cc
 8016fec:	0801d6e4 	.word	0x0801d6e4

08016ff0 <rcl_get_security_options_from_environment>:
 8016ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ff4:	b082      	sub	sp, #8
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	4606      	mov	r6, r0
 8016ffa:	460f      	mov	r7, r1
 8016ffc:	4820      	ldr	r0, [pc, #128]	; (8017080 <rcl_get_security_options_from_environment+0x90>)
 8016ffe:	9301      	str	r3, [sp, #4]
 8017000:	a901      	add	r1, sp, #4
 8017002:	4690      	mov	r8, r2
 8017004:	f000 f974 	bl	80172f0 <rcutils_get_env>
 8017008:	b120      	cbz	r0, 8017014 <rcl_get_security_options_from_environment+0x24>
 801700a:	2501      	movs	r5, #1
 801700c:	4628      	mov	r0, r5
 801700e:	b002      	add	sp, #8
 8017010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017014:	491b      	ldr	r1, [pc, #108]	; (8017084 <rcl_get_security_options_from_environment+0x94>)
 8017016:	4604      	mov	r4, r0
 8017018:	9801      	ldr	r0, [sp, #4]
 801701a:	f7e9 f8d9 	bl	80001d0 <strcmp>
 801701e:	4605      	mov	r5, r0
 8017020:	b9e8      	cbnz	r0, 801705e <rcl_get_security_options_from_environment+0x6e>
 8017022:	9001      	str	r0, [sp, #4]
 8017024:	f1b8 0f00 	cmp.w	r8, #0
 8017028:	d020      	beq.n	801706c <rcl_get_security_options_from_environment+0x7c>
 801702a:	4817      	ldr	r0, [pc, #92]	; (8017088 <rcl_get_security_options_from_environment+0x98>)
 801702c:	a901      	add	r1, sp, #4
 801702e:	f000 f95f 	bl	80172f0 <rcutils_get_env>
 8017032:	2800      	cmp	r0, #0
 8017034:	d1e9      	bne.n	801700a <rcl_get_security_options_from_environment+0x1a>
 8017036:	4915      	ldr	r1, [pc, #84]	; (801708c <rcl_get_security_options_from_environment+0x9c>)
 8017038:	9801      	ldr	r0, [sp, #4]
 801703a:	f7e9 f8c9 	bl	80001d0 <strcmp>
 801703e:	fab0 f080 	clz	r0, r0
 8017042:	0940      	lsrs	r0, r0, #5
 8017044:	f888 0000 	strb.w	r0, [r8]
 8017048:	4639      	mov	r1, r7
 801704a:	4630      	mov	r0, r6
 801704c:	f7ff ff66 	bl	8016f1c <rcl_get_secure_root>
 8017050:	b170      	cbz	r0, 8017070 <rcl_get_security_options_from_environment+0x80>
 8017052:	f8c8 0004 	str.w	r0, [r8, #4]
 8017056:	4628      	mov	r0, r5
 8017058:	b002      	add	sp, #8
 801705a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801705e:	4625      	mov	r5, r4
 8017060:	4628      	mov	r0, r5
 8017062:	f888 4000 	strb.w	r4, [r8]
 8017066:	b002      	add	sp, #8
 8017068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801706c:	250b      	movs	r5, #11
 801706e:	e7cd      	b.n	801700c <rcl_get_security_options_from_environment+0x1c>
 8017070:	f898 5000 	ldrb.w	r5, [r8]
 8017074:	f1a5 0501 	sub.w	r5, r5, #1
 8017078:	fab5 f585 	clz	r5, r5
 801707c:	096d      	lsrs	r5, r5, #5
 801707e:	e7c5      	b.n	801700c <rcl_get_security_options_from_environment+0x1c>
 8017080:	0801d684 	.word	0x0801d684
 8017084:	0801d698 	.word	0x0801d698
 8017088:	0801d6a0 	.word	0x0801d6a0
 801708c:	0801d6b8 	.word	0x0801d6b8

08017090 <rcl_get_system_time>:
 8017090:	4608      	mov	r0, r1
 8017092:	f000 bbd9 	b.w	8017848 <rcutils_system_time_now>
 8017096:	bf00      	nop

08017098 <rcl_get_steady_time>:
 8017098:	4608      	mov	r0, r1
 801709a:	f000 bbfd 	b.w	8017898 <rcutils_steady_time_now>
 801709e:	bf00      	nop

080170a0 <rcl_get_ros_time>:
 80170a0:	7a03      	ldrb	r3, [r0, #8]
 80170a2:	b510      	push	{r4, lr}
 80170a4:	460c      	mov	r4, r1
 80170a6:	b133      	cbz	r3, 80170b6 <rcl_get_ros_time+0x16>
 80170a8:	2105      	movs	r1, #5
 80170aa:	f000 f8eb 	bl	8017284 <__atomic_load_8>
 80170ae:	e9c4 0100 	strd	r0, r1, [r4]
 80170b2:	2000      	movs	r0, #0
 80170b4:	bd10      	pop	{r4, pc}
 80170b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170ba:	4608      	mov	r0, r1
 80170bc:	f000 bbc4 	b.w	8017848 <rcutils_system_time_now>

080170c0 <rcl_clock_init>:
 80170c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170c2:	4605      	mov	r5, r0
 80170c4:	4610      	mov	r0, r2
 80170c6:	4614      	mov	r4, r2
 80170c8:	460e      	mov	r6, r1
 80170ca:	f7f9 f8c5 	bl	8010258 <rcutils_allocator_is_valid>
 80170ce:	b128      	cbz	r0, 80170dc <rcl_clock_init+0x1c>
 80170d0:	2d03      	cmp	r5, #3
 80170d2:	d803      	bhi.n	80170dc <rcl_clock_init+0x1c>
 80170d4:	e8df f005 	tbb	[pc, r5]
 80170d8:	06532e1d 	.word	0x06532e1d
 80170dc:	f04f 0c0b 	mov.w	ip, #11
 80170e0:	4660      	mov	r0, ip
 80170e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170e4:	2e00      	cmp	r6, #0
 80170e6:	d0f9      	beq.n	80170dc <rcl_clock_init+0x1c>
 80170e8:	2c00      	cmp	r4, #0
 80170ea:	d0f7      	beq.n	80170dc <rcl_clock_init+0x1c>
 80170ec:	2300      	movs	r3, #0
 80170ee:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80170f2:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 80171a8 <rcl_clock_init+0xe8>
 80170f6:	6133      	str	r3, [r6, #16]
 80170f8:	f106 0514 	add.w	r5, r6, #20
 80170fc:	469c      	mov	ip, r3
 80170fe:	2703      	movs	r7, #3
 8017100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017104:	6823      	ldr	r3, [r4, #0]
 8017106:	602b      	str	r3, [r5, #0]
 8017108:	7037      	strb	r7, [r6, #0]
 801710a:	f8c6 e00c 	str.w	lr, [r6, #12]
 801710e:	4660      	mov	r0, ip
 8017110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017112:	2e00      	cmp	r6, #0
 8017114:	d0e2      	beq.n	80170dc <rcl_clock_init+0x1c>
 8017116:	2300      	movs	r3, #0
 8017118:	7033      	strb	r3, [r6, #0]
 801711a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801711e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8017122:	469c      	mov	ip, r3
 8017124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017126:	f106 0514 	add.w	r5, r6, #20
 801712a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801712c:	6823      	ldr	r3, [r4, #0]
 801712e:	602b      	str	r3, [r5, #0]
 8017130:	4660      	mov	r0, ip
 8017132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017134:	2e00      	cmp	r6, #0
 8017136:	d0d1      	beq.n	80170dc <rcl_clock_init+0x1c>
 8017138:	2c00      	cmp	r4, #0
 801713a:	d0cf      	beq.n	80170dc <rcl_clock_init+0x1c>
 801713c:	2700      	movs	r7, #0
 801713e:	7037      	strb	r7, [r6, #0]
 8017140:	46a4      	mov	ip, r4
 8017142:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017146:	f106 0514 	add.w	r5, r6, #20
 801714a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801714e:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8017152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017154:	f8dc 3000 	ldr.w	r3, [ip]
 8017158:	602b      	str	r3, [r5, #0]
 801715a:	6921      	ldr	r1, [r4, #16]
 801715c:	6823      	ldr	r3, [r4, #0]
 801715e:	2010      	movs	r0, #16
 8017160:	4798      	blx	r3
 8017162:	6130      	str	r0, [r6, #16]
 8017164:	b1d0      	cbz	r0, 801719c <rcl_clock_init+0xdc>
 8017166:	2200      	movs	r2, #0
 8017168:	2300      	movs	r3, #0
 801716a:	e9c0 2300 	strd	r2, r3, [r0]
 801716e:	2301      	movs	r3, #1
 8017170:	7207      	strb	r7, [r0, #8]
 8017172:	4a0c      	ldr	r2, [pc, #48]	; (80171a4 <rcl_clock_init+0xe4>)
 8017174:	7033      	strb	r3, [r6, #0]
 8017176:	46bc      	mov	ip, r7
 8017178:	60f2      	str	r2, [r6, #12]
 801717a:	4660      	mov	r0, ip
 801717c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801717e:	2e00      	cmp	r6, #0
 8017180:	d0ac      	beq.n	80170dc <rcl_clock_init+0x1c>
 8017182:	2c00      	cmp	r4, #0
 8017184:	d0aa      	beq.n	80170dc <rcl_clock_init+0x1c>
 8017186:	2300      	movs	r3, #0
 8017188:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801718c:	f8df e01c 	ldr.w	lr, [pc, #28]	; 80171ac <rcl_clock_init+0xec>
 8017190:	6133      	str	r3, [r6, #16]
 8017192:	f106 0514 	add.w	r5, r6, #20
 8017196:	469c      	mov	ip, r3
 8017198:	2702      	movs	r7, #2
 801719a:	e7b1      	b.n	8017100 <rcl_clock_init+0x40>
 801719c:	f04f 0c0a 	mov.w	ip, #10
 80171a0:	e79e      	b.n	80170e0 <rcl_clock_init+0x20>
 80171a2:	bf00      	nop
 80171a4:	080170a1 	.word	0x080170a1
 80171a8:	08017099 	.word	0x08017099
 80171ac:	08017091 	.word	0x08017091

080171b0 <rcl_validate_enclave_name_with_size>:
 80171b0:	b378      	cbz	r0, 8017212 <rcl_validate_enclave_name_with_size+0x62>
 80171b2:	b570      	push	{r4, r5, r6, lr}
 80171b4:	4615      	mov	r5, r2
 80171b6:	b0c2      	sub	sp, #264	; 0x108
 80171b8:	b302      	cbz	r2, 80171fc <rcl_validate_enclave_name_with_size+0x4c>
 80171ba:	461e      	mov	r6, r3
 80171bc:	466a      	mov	r2, sp
 80171be:	ab01      	add	r3, sp, #4
 80171c0:	460c      	mov	r4, r1
 80171c2:	f000 fc2b 	bl	8017a1c <rmw_validate_namespace_with_size>
 80171c6:	4684      	mov	ip, r0
 80171c8:	b9e8      	cbnz	r0, 8017206 <rcl_validate_enclave_name_with_size+0x56>
 80171ca:	9b00      	ldr	r3, [sp, #0]
 80171cc:	b923      	cbnz	r3, 80171d8 <rcl_validate_enclave_name_with_size+0x28>
 80171ce:	2300      	movs	r3, #0
 80171d0:	602b      	str	r3, [r5, #0]
 80171d2:	4660      	mov	r0, ip
 80171d4:	b042      	add	sp, #264	; 0x108
 80171d6:	bd70      	pop	{r4, r5, r6, pc}
 80171d8:	2b07      	cmp	r3, #7
 80171da:	d007      	beq.n	80171ec <rcl_validate_enclave_name_with_size+0x3c>
 80171dc:	1e5a      	subs	r2, r3, #1
 80171de:	2a05      	cmp	r2, #5
 80171e0:	d833      	bhi.n	801724a <rcl_validate_enclave_name_with_size+0x9a>
 80171e2:	e8df f002 	tbb	[pc, r2]
 80171e6:	2c2f      	.short	0x2c2f
 80171e8:	1a232629 	.word	0x1a232629
 80171ec:	2cff      	cmp	r4, #255	; 0xff
 80171ee:	d9ee      	bls.n	80171ce <rcl_validate_enclave_name_with_size+0x1e>
 80171f0:	602b      	str	r3, [r5, #0]
 80171f2:	2e00      	cmp	r6, #0
 80171f4:	d0ed      	beq.n	80171d2 <rcl_validate_enclave_name_with_size+0x22>
 80171f6:	23fe      	movs	r3, #254	; 0xfe
 80171f8:	6033      	str	r3, [r6, #0]
 80171fa:	e7ea      	b.n	80171d2 <rcl_validate_enclave_name_with_size+0x22>
 80171fc:	f04f 0c0b 	mov.w	ip, #11
 8017200:	4660      	mov	r0, ip
 8017202:	b042      	add	sp, #264	; 0x108
 8017204:	bd70      	pop	{r4, r5, r6, pc}
 8017206:	f7ff f953 	bl	80164b0 <rcl_convert_rmw_ret_to_rcl_ret>
 801720a:	4684      	mov	ip, r0
 801720c:	4660      	mov	r0, ip
 801720e:	b042      	add	sp, #264	; 0x108
 8017210:	bd70      	pop	{r4, r5, r6, pc}
 8017212:	f04f 0c0b 	mov.w	ip, #11
 8017216:	4660      	mov	r0, ip
 8017218:	4770      	bx	lr
 801721a:	2306      	movs	r3, #6
 801721c:	602b      	str	r3, [r5, #0]
 801721e:	2e00      	cmp	r6, #0
 8017220:	d0d7      	beq.n	80171d2 <rcl_validate_enclave_name_with_size+0x22>
 8017222:	9b01      	ldr	r3, [sp, #4]
 8017224:	6033      	str	r3, [r6, #0]
 8017226:	4660      	mov	r0, ip
 8017228:	b042      	add	sp, #264	; 0x108
 801722a:	bd70      	pop	{r4, r5, r6, pc}
 801722c:	2305      	movs	r3, #5
 801722e:	602b      	str	r3, [r5, #0]
 8017230:	e7f5      	b.n	801721e <rcl_validate_enclave_name_with_size+0x6e>
 8017232:	2304      	movs	r3, #4
 8017234:	602b      	str	r3, [r5, #0]
 8017236:	e7f2      	b.n	801721e <rcl_validate_enclave_name_with_size+0x6e>
 8017238:	2303      	movs	r3, #3
 801723a:	602b      	str	r3, [r5, #0]
 801723c:	e7ef      	b.n	801721e <rcl_validate_enclave_name_with_size+0x6e>
 801723e:	2302      	movs	r3, #2
 8017240:	602b      	str	r3, [r5, #0]
 8017242:	e7ec      	b.n	801721e <rcl_validate_enclave_name_with_size+0x6e>
 8017244:	2301      	movs	r3, #1
 8017246:	602b      	str	r3, [r5, #0]
 8017248:	e7e9      	b.n	801721e <rcl_validate_enclave_name_with_size+0x6e>
 801724a:	4a04      	ldr	r2, [pc, #16]	; (801725c <rcl_validate_enclave_name_with_size+0xac>)
 801724c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017250:	a802      	add	r0, sp, #8
 8017252:	f000 f963 	bl	801751c <rcutils_snprintf>
 8017256:	f04f 0c01 	mov.w	ip, #1
 801725a:	e7ba      	b.n	80171d2 <rcl_validate_enclave_name_with_size+0x22>
 801725c:	0801d704 	.word	0x0801d704

08017260 <rcl_validate_enclave_name>:
 8017260:	b168      	cbz	r0, 801727e <rcl_validate_enclave_name+0x1e>
 8017262:	b570      	push	{r4, r5, r6, lr}
 8017264:	460d      	mov	r5, r1
 8017266:	4616      	mov	r6, r2
 8017268:	4604      	mov	r4, r0
 801726a:	f7e8 ffbb 	bl	80001e4 <strlen>
 801726e:	4633      	mov	r3, r6
 8017270:	4601      	mov	r1, r0
 8017272:	462a      	mov	r2, r5
 8017274:	4620      	mov	r0, r4
 8017276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801727a:	f7ff bf99 	b.w	80171b0 <rcl_validate_enclave_name_with_size>
 801727e:	200b      	movs	r0, #11
 8017280:	4770      	bx	lr
 8017282:	bf00      	nop

08017284 <__atomic_load_8>:
 8017284:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017288:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801728c:	4a15      	ldr	r2, [pc, #84]	; (80172e4 <__atomic_load_8+0x60>)
 801728e:	4b16      	ldr	r3, [pc, #88]	; (80172e8 <__atomic_load_8+0x64>)
 8017290:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017294:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017298:	fb02 f101 	mul.w	r1, r2, r1
 801729c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80172a0:	fba3 2301 	umull	r2, r3, r3, r1
 80172a4:	091b      	lsrs	r3, r3, #4
 80172a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80172aa:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80172ae:	b4d0      	push	{r4, r6, r7}
 80172b0:	4c0e      	ldr	r4, [pc, #56]	; (80172ec <__atomic_load_8+0x68>)
 80172b2:	1ac9      	subs	r1, r1, r3
 80172b4:	1862      	adds	r2, r4, r1
 80172b6:	f04f 0c01 	mov.w	ip, #1
 80172ba:	e8d2 3f4f 	ldrexb	r3, [r2]
 80172be:	e8c2 cf46 	strexb	r6, ip, [r2]
 80172c2:	2e00      	cmp	r6, #0
 80172c4:	d1f9      	bne.n	80172ba <__atomic_load_8+0x36>
 80172c6:	f3bf 8f5b 	dmb	ish
 80172ca:	b2db      	uxtb	r3, r3
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d1f4      	bne.n	80172ba <__atomic_load_8+0x36>
 80172d0:	e9d0 6700 	ldrd	r6, r7, [r0]
 80172d4:	f3bf 8f5b 	dmb	ish
 80172d8:	5463      	strb	r3, [r4, r1]
 80172da:	4630      	mov	r0, r6
 80172dc:	4639      	mov	r1, r7
 80172de:	bcd0      	pop	{r4, r6, r7}
 80172e0:	4770      	bx	lr
 80172e2:	bf00      	nop
 80172e4:	27d4eb2d 	.word	0x27d4eb2d
 80172e8:	b21642c9 	.word	0xb21642c9
 80172ec:	2001cbd8 	.word	0x2001cbd8

080172f0 <rcutils_get_env>:
 80172f0:	b168      	cbz	r0, 801730e <rcutils_get_env+0x1e>
 80172f2:	b510      	push	{r4, lr}
 80172f4:	460c      	mov	r4, r1
 80172f6:	b129      	cbz	r1, 8017304 <rcutils_get_env+0x14>
 80172f8:	f004 f8ae 	bl	801b458 <getenv>
 80172fc:	b120      	cbz	r0, 8017308 <rcutils_get_env+0x18>
 80172fe:	6020      	str	r0, [r4, #0]
 8017300:	2000      	movs	r0, #0
 8017302:	bd10      	pop	{r4, pc}
 8017304:	4803      	ldr	r0, [pc, #12]	; (8017314 <rcutils_get_env+0x24>)
 8017306:	bd10      	pop	{r4, pc}
 8017308:	4b03      	ldr	r3, [pc, #12]	; (8017318 <rcutils_get_env+0x28>)
 801730a:	6023      	str	r3, [r4, #0]
 801730c:	bd10      	pop	{r4, pc}
 801730e:	4803      	ldr	r0, [pc, #12]	; (801731c <rcutils_get_env+0x2c>)
 8017310:	4770      	bx	lr
 8017312:	bf00      	nop
 8017314:	0801d780 	.word	0x0801d780
 8017318:	0801ddb8 	.word	0x0801ddb8
 801731c:	0801d764 	.word	0x0801d764

08017320 <rcutils_is_directory>:
 8017320:	2000      	movs	r0, #0
 8017322:	4770      	bx	lr

08017324 <rcutils_join_path>:
 8017324:	b082      	sub	sp, #8
 8017326:	e88d 000c 	stmia.w	sp, {r2, r3}
 801732a:	2000      	movs	r0, #0
 801732c:	b002      	add	sp, #8
 801732e:	4770      	bx	lr

08017330 <rcutils_to_native_path>:
 8017330:	b084      	sub	sp, #16
 8017332:	a801      	add	r0, sp, #4
 8017334:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8017338:	b004      	add	sp, #16
 801733a:	2000      	movs	r0, #0
 801733c:	4770      	bx	lr
 801733e:	bf00      	nop

08017340 <rcutils_format_string_limit>:
 8017340:	b40f      	push	{r0, r1, r2, r3}
 8017342:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017344:	b083      	sub	sp, #12
 8017346:	ac08      	add	r4, sp, #32
 8017348:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801734a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801734e:	b34e      	cbz	r6, 80173a4 <rcutils_format_string_limit+0x64>
 8017350:	a808      	add	r0, sp, #32
 8017352:	f7f8 ff81 	bl	8010258 <rcutils_allocator_is_valid>
 8017356:	b328      	cbz	r0, 80173a4 <rcutils_format_string_limit+0x64>
 8017358:	2100      	movs	r1, #0
 801735a:	ab0f      	add	r3, sp, #60	; 0x3c
 801735c:	4632      	mov	r2, r6
 801735e:	4608      	mov	r0, r1
 8017360:	e9cd 3300 	strd	r3, r3, [sp]
 8017364:	f000 f8f4 	bl	8017550 <rcutils_vsnprintf>
 8017368:	1c43      	adds	r3, r0, #1
 801736a:	4605      	mov	r5, r0
 801736c:	d01a      	beq.n	80173a4 <rcutils_format_string_limit+0x64>
 801736e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017370:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017372:	1c47      	adds	r7, r0, #1
 8017374:	429f      	cmp	r7, r3
 8017376:	bf84      	itt	hi
 8017378:	461f      	movhi	r7, r3
 801737a:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 801737e:	4638      	mov	r0, r7
 8017380:	9b08      	ldr	r3, [sp, #32]
 8017382:	4798      	blx	r3
 8017384:	4604      	mov	r4, r0
 8017386:	b168      	cbz	r0, 80173a4 <rcutils_format_string_limit+0x64>
 8017388:	9b01      	ldr	r3, [sp, #4]
 801738a:	4632      	mov	r2, r6
 801738c:	4639      	mov	r1, r7
 801738e:	f000 f8df 	bl	8017550 <rcutils_vsnprintf>
 8017392:	2800      	cmp	r0, #0
 8017394:	db02      	blt.n	801739c <rcutils_format_string_limit+0x5c>
 8017396:	2300      	movs	r3, #0
 8017398:	5563      	strb	r3, [r4, r5]
 801739a:	e004      	b.n	80173a6 <rcutils_format_string_limit+0x66>
 801739c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801739e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80173a0:	4620      	mov	r0, r4
 80173a2:	4798      	blx	r3
 80173a4:	2400      	movs	r4, #0
 80173a6:	4620      	mov	r0, r4
 80173a8:	b003      	add	sp, #12
 80173aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80173ae:	b004      	add	sp, #16
 80173b0:	4770      	bx	lr
 80173b2:	bf00      	nop

080173b4 <rcutils_repl_str>:
 80173b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173b8:	ed2d 8b02 	vpush	{d8}
 80173bc:	b087      	sub	sp, #28
 80173be:	4680      	mov	r8, r0
 80173c0:	4608      	mov	r0, r1
 80173c2:	f8cd 8004 	str.w	r8, [sp, #4]
 80173c6:	ee08 2a10 	vmov	s16, r2
 80173ca:	468a      	mov	sl, r1
 80173cc:	4699      	mov	r9, r3
 80173ce:	f7e8 ff09 	bl	80001e4 <strlen>
 80173d2:	2600      	movs	r6, #0
 80173d4:	4647      	mov	r7, r8
 80173d6:	9002      	str	r0, [sp, #8]
 80173d8:	46b3      	mov	fp, r6
 80173da:	2510      	movs	r5, #16
 80173dc:	46b0      	mov	r8, r6
 80173de:	e01d      	b.n	801741c <rcutils_repl_str+0x68>
 80173e0:	f10b 0b01 	add.w	fp, fp, #1
 80173e4:	455e      	cmp	r6, fp
 80173e6:	d211      	bcs.n	801740c <rcutils_repl_str+0x58>
 80173e8:	442e      	add	r6, r5
 80173ea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80173ee:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80173f2:	00b1      	lsls	r1, r6, #2
 80173f4:	4798      	blx	r3
 80173f6:	2800      	cmp	r0, #0
 80173f8:	f000 8088 	beq.w	801750c <rcutils_repl_str+0x158>
 80173fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017400:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8017404:	4680      	mov	r8, r0
 8017406:	bf28      	it	cs
 8017408:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 801740c:	9a01      	ldr	r2, [sp, #4]
 801740e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8017412:	1aa2      	subs	r2, r4, r2
 8017414:	f843 2c04 	str.w	r2, [r3, #-4]
 8017418:	9b02      	ldr	r3, [sp, #8]
 801741a:	18e7      	adds	r7, r4, r3
 801741c:	4651      	mov	r1, sl
 801741e:	4638      	mov	r0, r7
 8017420:	f004 fb4c 	bl	801babc <strstr>
 8017424:	4604      	mov	r4, r0
 8017426:	4640      	mov	r0, r8
 8017428:	2c00      	cmp	r4, #0
 801742a:	d1d9      	bne.n	80173e0 <rcutils_repl_str+0x2c>
 801742c:	46b8      	mov	r8, r7
 801742e:	4607      	mov	r7, r0
 8017430:	4640      	mov	r0, r8
 8017432:	f7e8 fed7 	bl	80001e4 <strlen>
 8017436:	9b01      	ldr	r3, [sp, #4]
 8017438:	eba8 0303 	sub.w	r3, r8, r3
 801743c:	181c      	adds	r4, r3, r0
 801743e:	9404      	str	r4, [sp, #16]
 8017440:	f1bb 0f00 	cmp.w	fp, #0
 8017444:	d04a      	beq.n	80174dc <rcutils_repl_str+0x128>
 8017446:	ee18 0a10 	vmov	r0, s16
 801744a:	f7e8 fecb 	bl	80001e4 <strlen>
 801744e:	9b02      	ldr	r3, [sp, #8]
 8017450:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017454:	1ac3      	subs	r3, r0, r3
 8017456:	fb0b 4303 	mla	r3, fp, r3, r4
 801745a:	461a      	mov	r2, r3
 801745c:	9305      	str	r3, [sp, #20]
 801745e:	4606      	mov	r6, r0
 8017460:	f8d9 3000 	ldr.w	r3, [r9]
 8017464:	1c50      	adds	r0, r2, #1
 8017466:	4798      	blx	r3
 8017468:	9003      	str	r0, [sp, #12]
 801746a:	2800      	cmp	r0, #0
 801746c:	d04f      	beq.n	801750e <rcutils_repl_str+0x15a>
 801746e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017472:	683a      	ldr	r2, [r7, #0]
 8017474:	4641      	mov	r1, r8
 8017476:	f004 f86f 	bl	801b558 <memcpy>
 801747a:	683d      	ldr	r5, [r7, #0]
 801747c:	9b03      	ldr	r3, [sp, #12]
 801747e:	9701      	str	r7, [sp, #4]
 8017480:	46ba      	mov	sl, r7
 8017482:	441d      	add	r5, r3
 8017484:	9f02      	ldr	r7, [sp, #8]
 8017486:	f8cd 9008 	str.w	r9, [sp, #8]
 801748a:	2401      	movs	r4, #1
 801748c:	46d1      	mov	r9, sl
 801748e:	ee18 aa10 	vmov	sl, s16
 8017492:	e00a      	b.n	80174aa <rcutils_repl_str+0xf6>
 8017494:	f8d9 5000 	ldr.w	r5, [r9]
 8017498:	1aaa      	subs	r2, r5, r2
 801749a:	1885      	adds	r5, r0, r2
 801749c:	f004 f85c 	bl	801b558 <memcpy>
 80174a0:	45a3      	cmp	fp, r4
 80174a2:	f104 0201 	add.w	r2, r4, #1
 80174a6:	d935      	bls.n	8017514 <rcutils_repl_str+0x160>
 80174a8:	4614      	mov	r4, r2
 80174aa:	4632      	mov	r2, r6
 80174ac:	4651      	mov	r1, sl
 80174ae:	4628      	mov	r0, r5
 80174b0:	f004 f852 	bl	801b558 <memcpy>
 80174b4:	f859 2b04 	ldr.w	r2, [r9], #4
 80174b8:	45a3      	cmp	fp, r4
 80174ba:	443a      	add	r2, r7
 80174bc:	eb05 0006 	add.w	r0, r5, r6
 80174c0:	eb08 0102 	add.w	r1, r8, r2
 80174c4:	d1e6      	bne.n	8017494 <rcutils_repl_str+0xe0>
 80174c6:	9b04      	ldr	r3, [sp, #16]
 80174c8:	1a9a      	subs	r2, r3, r2
 80174ca:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80174ce:	f004 f843 	bl	801b558 <memcpy>
 80174d2:	9a03      	ldr	r2, [sp, #12]
 80174d4:	9905      	ldr	r1, [sp, #20]
 80174d6:	2300      	movs	r3, #0
 80174d8:	5453      	strb	r3, [r2, r1]
 80174da:	e00b      	b.n	80174f4 <rcutils_repl_str+0x140>
 80174dc:	4620      	mov	r0, r4
 80174de:	f8d9 3000 	ldr.w	r3, [r9]
 80174e2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80174e6:	3001      	adds	r0, #1
 80174e8:	4798      	blx	r3
 80174ea:	9003      	str	r0, [sp, #12]
 80174ec:	b110      	cbz	r0, 80174f4 <rcutils_repl_str+0x140>
 80174ee:	9901      	ldr	r1, [sp, #4]
 80174f0:	f004 fac8 	bl	801ba84 <strcpy>
 80174f4:	4638      	mov	r0, r7
 80174f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80174fa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80174fe:	4798      	blx	r3
 8017500:	9803      	ldr	r0, [sp, #12]
 8017502:	b007      	add	sp, #28
 8017504:	ecbd 8b02 	vpop	{d8}
 8017508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801750c:	4647      	mov	r7, r8
 801750e:	2300      	movs	r3, #0
 8017510:	9303      	str	r3, [sp, #12]
 8017512:	e7ef      	b.n	80174f4 <rcutils_repl_str+0x140>
 8017514:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017518:	e7db      	b.n	80174d2 <rcutils_repl_str+0x11e>
 801751a:	bf00      	nop

0801751c <rcutils_snprintf>:
 801751c:	b40c      	push	{r2, r3}
 801751e:	b530      	push	{r4, r5, lr}
 8017520:	b083      	sub	sp, #12
 8017522:	ab06      	add	r3, sp, #24
 8017524:	f853 2b04 	ldr.w	r2, [r3], #4
 8017528:	9301      	str	r3, [sp, #4]
 801752a:	b152      	cbz	r2, 8017542 <rcutils_snprintf+0x26>
 801752c:	b138      	cbz	r0, 801753e <rcutils_snprintf+0x22>
 801752e:	b141      	cbz	r1, 8017542 <rcutils_snprintf+0x26>
 8017530:	f004 fb82 	bl	801bc38 <vsniprintf>
 8017534:	b003      	add	sp, #12
 8017536:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801753a:	b002      	add	sp, #8
 801753c:	4770      	bx	lr
 801753e:	2900      	cmp	r1, #0
 8017540:	d0f6      	beq.n	8017530 <rcutils_snprintf+0x14>
 8017542:	f003 fe0b 	bl	801b15c <__errno>
 8017546:	2316      	movs	r3, #22
 8017548:	6003      	str	r3, [r0, #0]
 801754a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801754e:	e7f1      	b.n	8017534 <rcutils_snprintf+0x18>

08017550 <rcutils_vsnprintf>:
 8017550:	b570      	push	{r4, r5, r6, lr}
 8017552:	b13a      	cbz	r2, 8017564 <rcutils_vsnprintf+0x14>
 8017554:	b120      	cbz	r0, 8017560 <rcutils_vsnprintf+0x10>
 8017556:	b129      	cbz	r1, 8017564 <rcutils_vsnprintf+0x14>
 8017558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801755c:	f004 bb6c 	b.w	801bc38 <vsniprintf>
 8017560:	2900      	cmp	r1, #0
 8017562:	d0f9      	beq.n	8017558 <rcutils_vsnprintf+0x8>
 8017564:	f003 fdfa 	bl	801b15c <__errno>
 8017568:	2316      	movs	r3, #22
 801756a:	6003      	str	r3, [r0, #0]
 801756c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017570:	bd70      	pop	{r4, r5, r6, pc}
 8017572:	bf00      	nop

08017574 <rcutils_strdup>:
 8017574:	b084      	sub	sp, #16
 8017576:	b570      	push	{r4, r5, r6, lr}
 8017578:	b082      	sub	sp, #8
 801757a:	ac07      	add	r4, sp, #28
 801757c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017580:	4605      	mov	r5, r0
 8017582:	b1b0      	cbz	r0, 80175b2 <rcutils_strdup+0x3e>
 8017584:	f7e8 fe2e 	bl	80001e4 <strlen>
 8017588:	1c42      	adds	r2, r0, #1
 801758a:	9b07      	ldr	r3, [sp, #28]
 801758c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801758e:	9201      	str	r2, [sp, #4]
 8017590:	4606      	mov	r6, r0
 8017592:	4610      	mov	r0, r2
 8017594:	4798      	blx	r3
 8017596:	4604      	mov	r4, r0
 8017598:	b128      	cbz	r0, 80175a6 <rcutils_strdup+0x32>
 801759a:	9a01      	ldr	r2, [sp, #4]
 801759c:	4629      	mov	r1, r5
 801759e:	f003 ffdb 	bl	801b558 <memcpy>
 80175a2:	2300      	movs	r3, #0
 80175a4:	55a3      	strb	r3, [r4, r6]
 80175a6:	4620      	mov	r0, r4
 80175a8:	b002      	add	sp, #8
 80175aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80175ae:	b004      	add	sp, #16
 80175b0:	4770      	bx	lr
 80175b2:	4604      	mov	r4, r0
 80175b4:	e7f7      	b.n	80175a6 <rcutils_strdup+0x32>
 80175b6:	bf00      	nop

080175b8 <rcutils_strndup>:
 80175b8:	b082      	sub	sp, #8
 80175ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175bc:	ac06      	add	r4, sp, #24
 80175be:	e884 000c 	stmia.w	r4, {r2, r3}
 80175c2:	4605      	mov	r5, r0
 80175c4:	b188      	cbz	r0, 80175ea <rcutils_strndup+0x32>
 80175c6:	1c4f      	adds	r7, r1, #1
 80175c8:	460e      	mov	r6, r1
 80175ca:	4638      	mov	r0, r7
 80175cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80175ce:	4790      	blx	r2
 80175d0:	4604      	mov	r4, r0
 80175d2:	b128      	cbz	r0, 80175e0 <rcutils_strndup+0x28>
 80175d4:	463a      	mov	r2, r7
 80175d6:	4629      	mov	r1, r5
 80175d8:	f003 ffbe 	bl	801b558 <memcpy>
 80175dc:	2300      	movs	r3, #0
 80175de:	55a3      	strb	r3, [r4, r6]
 80175e0:	4620      	mov	r0, r4
 80175e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80175e6:	b002      	add	sp, #8
 80175e8:	4770      	bx	lr
 80175ea:	4604      	mov	r4, r0
 80175ec:	e7f8      	b.n	80175e0 <rcutils_strndup+0x28>
 80175ee:	bf00      	nop

080175f0 <rcutils_get_zero_initialized_string_map>:
 80175f0:	4b01      	ldr	r3, [pc, #4]	; (80175f8 <rcutils_get_zero_initialized_string_map+0x8>)
 80175f2:	2000      	movs	r0, #0
 80175f4:	6018      	str	r0, [r3, #0]
 80175f6:	4770      	bx	lr
 80175f8:	2001cbf0 	.word	0x2001cbf0

080175fc <rcutils_string_map_reserve>:
 80175fc:	2800      	cmp	r0, #0
 80175fe:	d05f      	beq.n	80176c0 <rcutils_string_map_reserve+0xc4>
 8017600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017604:	460c      	mov	r4, r1
 8017606:	6801      	ldr	r1, [r0, #0]
 8017608:	b082      	sub	sp, #8
 801760a:	4605      	mov	r5, r0
 801760c:	b129      	cbz	r1, 801761a <rcutils_string_map_reserve+0x1e>
 801760e:	68cb      	ldr	r3, [r1, #12]
 8017610:	42a3      	cmp	r3, r4
 8017612:	d906      	bls.n	8017622 <rcutils_string_map_reserve+0x26>
 8017614:	461c      	mov	r4, r3
 8017616:	2900      	cmp	r1, #0
 8017618:	d1f9      	bne.n	801760e <rcutils_string_map_reserve+0x12>
 801761a:	201f      	movs	r0, #31
 801761c:	b002      	add	sp, #8
 801761e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017622:	688b      	ldr	r3, [r1, #8]
 8017624:	42a3      	cmp	r3, r4
 8017626:	d047      	beq.n	80176b8 <rcutils_string_map_reserve+0xbc>
 8017628:	6a0e      	ldr	r6, [r1, #32]
 801762a:	2c00      	cmp	r4, #0
 801762c:	d034      	beq.n	8017698 <rcutils_string_map_reserve+0x9c>
 801762e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8017632:	d243      	bcs.n	80176bc <rcutils_string_map_reserve+0xc0>
 8017634:	00a7      	lsls	r7, r4, #2
 8017636:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801763a:	6808      	ldr	r0, [r1, #0]
 801763c:	4632      	mov	r2, r6
 801763e:	4639      	mov	r1, r7
 8017640:	47c0      	blx	r8
 8017642:	2800      	cmp	r0, #0
 8017644:	d03a      	beq.n	80176bc <rcutils_string_map_reserve+0xc0>
 8017646:	682b      	ldr	r3, [r5, #0]
 8017648:	4632      	mov	r2, r6
 801764a:	6018      	str	r0, [r3, #0]
 801764c:	4639      	mov	r1, r7
 801764e:	6858      	ldr	r0, [r3, #4]
 8017650:	47c0      	blx	r8
 8017652:	2800      	cmp	r0, #0
 8017654:	d032      	beq.n	80176bc <rcutils_string_map_reserve+0xc0>
 8017656:	682d      	ldr	r5, [r5, #0]
 8017658:	68ab      	ldr	r3, [r5, #8]
 801765a:	6068      	str	r0, [r5, #4]
 801765c:	42a3      	cmp	r3, r4
 801765e:	d226      	bcs.n	80176ae <rcutils_string_map_reserve+0xb2>
 8017660:	682a      	ldr	r2, [r5, #0]
 8017662:	eb00 0c07 	add.w	ip, r0, r7
 8017666:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801766a:	45e6      	cmp	lr, ip
 801766c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8017670:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8017674:	d203      	bcs.n	801767e <rcutils_string_map_reserve+0x82>
 8017676:	eb02 0c07 	add.w	ip, r2, r7
 801767a:	4566      	cmp	r6, ip
 801767c:	d322      	bcc.n	80176c4 <rcutils_string_map_reserve+0xc8>
 801767e:	1ae3      	subs	r3, r4, r3
 8017680:	009a      	lsls	r2, r3, #2
 8017682:	4670      	mov	r0, lr
 8017684:	2100      	movs	r1, #0
 8017686:	9201      	str	r2, [sp, #4]
 8017688:	f003 ff74 	bl	801b574 <memset>
 801768c:	9a01      	ldr	r2, [sp, #4]
 801768e:	2100      	movs	r1, #0
 8017690:	4630      	mov	r0, r6
 8017692:	f003 ff6f 	bl	801b574 <memset>
 8017696:	e00a      	b.n	80176ae <rcutils_string_map_reserve+0xb2>
 8017698:	694f      	ldr	r7, [r1, #20]
 801769a:	6808      	ldr	r0, [r1, #0]
 801769c:	4631      	mov	r1, r6
 801769e:	47b8      	blx	r7
 80176a0:	682b      	ldr	r3, [r5, #0]
 80176a2:	4631      	mov	r1, r6
 80176a4:	6858      	ldr	r0, [r3, #4]
 80176a6:	601c      	str	r4, [r3, #0]
 80176a8:	47b8      	blx	r7
 80176aa:	682d      	ldr	r5, [r5, #0]
 80176ac:	606c      	str	r4, [r5, #4]
 80176ae:	2000      	movs	r0, #0
 80176b0:	60ac      	str	r4, [r5, #8]
 80176b2:	b002      	add	sp, #8
 80176b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176b8:	2000      	movs	r0, #0
 80176ba:	e7af      	b.n	801761c <rcutils_string_map_reserve+0x20>
 80176bc:	200a      	movs	r0, #10
 80176be:	e7ad      	b.n	801761c <rcutils_string_map_reserve+0x20>
 80176c0:	200b      	movs	r0, #11
 80176c2:	4770      	bx	lr
 80176c4:	1f0b      	subs	r3, r1, #4
 80176c6:	4418      	add	r0, r3
 80176c8:	4413      	add	r3, r2
 80176ca:	3a04      	subs	r2, #4
 80176cc:	4417      	add	r7, r2
 80176ce:	2200      	movs	r2, #0
 80176d0:	f843 2f04 	str.w	r2, [r3, #4]!
 80176d4:	42bb      	cmp	r3, r7
 80176d6:	f840 2f04 	str.w	r2, [r0, #4]!
 80176da:	d1f9      	bne.n	80176d0 <rcutils_string_map_reserve+0xd4>
 80176dc:	e7e7      	b.n	80176ae <rcutils_string_map_reserve+0xb2>
 80176de:	bf00      	nop

080176e0 <rcutils_string_map_init>:
 80176e0:	b082      	sub	sp, #8
 80176e2:	b570      	push	{r4, r5, r6, lr}
 80176e4:	ac04      	add	r4, sp, #16
 80176e6:	e884 000c 	stmia.w	r4, {r2, r3}
 80176ea:	b380      	cbz	r0, 801774e <rcutils_string_map_init+0x6e>
 80176ec:	6806      	ldr	r6, [r0, #0]
 80176ee:	4604      	mov	r4, r0
 80176f0:	b12e      	cbz	r6, 80176fe <rcutils_string_map_init+0x1e>
 80176f2:	251e      	movs	r5, #30
 80176f4:	4628      	mov	r0, r5
 80176f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176fa:	b002      	add	sp, #8
 80176fc:	4770      	bx	lr
 80176fe:	a804      	add	r0, sp, #16
 8017700:	460d      	mov	r5, r1
 8017702:	f7f8 fda9 	bl	8010258 <rcutils_allocator_is_valid>
 8017706:	b310      	cbz	r0, 801774e <rcutils_string_map_init+0x6e>
 8017708:	9b04      	ldr	r3, [sp, #16]
 801770a:	9908      	ldr	r1, [sp, #32]
 801770c:	2024      	movs	r0, #36	; 0x24
 801770e:	4798      	blx	r3
 8017710:	6020      	str	r0, [r4, #0]
 8017712:	b310      	cbz	r0, 801775a <rcutils_string_map_init+0x7a>
 8017714:	f10d 0e10 	add.w	lr, sp, #16
 8017718:	e9c0 6600 	strd	r6, r6, [r0]
 801771c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8017720:	f100 0c10 	add.w	ip, r0, #16
 8017724:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017728:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801772c:	f8de 3000 	ldr.w	r3, [lr]
 8017730:	f8cc 3000 	str.w	r3, [ip]
 8017734:	4629      	mov	r1, r5
 8017736:	4620      	mov	r0, r4
 8017738:	f7ff ff60 	bl	80175fc <rcutils_string_map_reserve>
 801773c:	4605      	mov	r5, r0
 801773e:	2800      	cmp	r0, #0
 8017740:	d0d8      	beq.n	80176f4 <rcutils_string_map_init+0x14>
 8017742:	9b05      	ldr	r3, [sp, #20]
 8017744:	9908      	ldr	r1, [sp, #32]
 8017746:	6820      	ldr	r0, [r4, #0]
 8017748:	4798      	blx	r3
 801774a:	6026      	str	r6, [r4, #0]
 801774c:	e7d2      	b.n	80176f4 <rcutils_string_map_init+0x14>
 801774e:	250b      	movs	r5, #11
 8017750:	4628      	mov	r0, r5
 8017752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017756:	b002      	add	sp, #8
 8017758:	4770      	bx	lr
 801775a:	250a      	movs	r5, #10
 801775c:	e7ca      	b.n	80176f4 <rcutils_string_map_init+0x14>
 801775e:	bf00      	nop

08017760 <rcutils_string_map_fini>:
 8017760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017764:	b082      	sub	sp, #8
 8017766:	2800      	cmp	r0, #0
 8017768:	d03a      	beq.n	80177e0 <rcutils_string_map_fini+0x80>
 801776a:	6804      	ldr	r4, [r0, #0]
 801776c:	4606      	mov	r6, r0
 801776e:	2c00      	cmp	r4, #0
 8017770:	d032      	beq.n	80177d8 <rcutils_string_map_fini+0x78>
 8017772:	68a3      	ldr	r3, [r4, #8]
 8017774:	b32b      	cbz	r3, 80177c2 <rcutils_string_map_fini+0x62>
 8017776:	2500      	movs	r5, #0
 8017778:	6822      	ldr	r2, [r4, #0]
 801777a:	462f      	mov	r7, r5
 801777c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017780:	b1e0      	cbz	r0, 80177bc <rcutils_string_map_fini+0x5c>
 8017782:	6a21      	ldr	r1, [r4, #32]
 8017784:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8017788:	9101      	str	r1, [sp, #4]
 801778a:	47c0      	blx	r8
 801778c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017790:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8017794:	9901      	ldr	r1, [sp, #4]
 8017796:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801779a:	47c0      	blx	r8
 801779c:	68e3      	ldr	r3, [r4, #12]
 801779e:	6862      	ldr	r2, [r4, #4]
 80177a0:	3b01      	subs	r3, #1
 80177a2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80177a6:	60e3      	str	r3, [r4, #12]
 80177a8:	6834      	ldr	r4, [r6, #0]
 80177aa:	68a3      	ldr	r3, [r4, #8]
 80177ac:	3501      	adds	r5, #1
 80177ae:	429d      	cmp	r5, r3
 80177b0:	d207      	bcs.n	80177c2 <rcutils_string_map_fini+0x62>
 80177b2:	6822      	ldr	r2, [r4, #0]
 80177b4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80177b8:	2800      	cmp	r0, #0
 80177ba:	d1e2      	bne.n	8017782 <rcutils_string_map_fini+0x22>
 80177bc:	3501      	adds	r5, #1
 80177be:	429d      	cmp	r5, r3
 80177c0:	d3dc      	bcc.n	801777c <rcutils_string_map_fini+0x1c>
 80177c2:	2100      	movs	r1, #0
 80177c4:	4630      	mov	r0, r6
 80177c6:	f7ff ff19 	bl	80175fc <rcutils_string_map_reserve>
 80177ca:	4604      	mov	r4, r0
 80177cc:	b920      	cbnz	r0, 80177d8 <rcutils_string_map_fini+0x78>
 80177ce:	6830      	ldr	r0, [r6, #0]
 80177d0:	6943      	ldr	r3, [r0, #20]
 80177d2:	6a01      	ldr	r1, [r0, #32]
 80177d4:	4798      	blx	r3
 80177d6:	6034      	str	r4, [r6, #0]
 80177d8:	4620      	mov	r0, r4
 80177da:	b002      	add	sp, #8
 80177dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177e0:	240b      	movs	r4, #11
 80177e2:	4620      	mov	r0, r4
 80177e4:	b002      	add	sp, #8
 80177e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177ea:	bf00      	nop

080177ec <rcutils_string_map_getn>:
 80177ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177f0:	b300      	cbz	r0, 8017834 <rcutils_string_map_getn+0x48>
 80177f2:	6807      	ldr	r7, [r0, #0]
 80177f4:	b1ff      	cbz	r7, 8017836 <rcutils_string_map_getn+0x4a>
 80177f6:	4688      	mov	r8, r1
 80177f8:	b1e1      	cbz	r1, 8017834 <rcutils_string_map_getn+0x48>
 80177fa:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80177fe:	683e      	ldr	r6, [r7, #0]
 8017800:	f1ba 0f00 	cmp.w	sl, #0
 8017804:	d016      	beq.n	8017834 <rcutils_string_map_getn+0x48>
 8017806:	4691      	mov	r9, r2
 8017808:	3e04      	subs	r6, #4
 801780a:	2400      	movs	r4, #0
 801780c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8017810:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017814:	4628      	mov	r0, r5
 8017816:	3401      	adds	r4, #1
 8017818:	b155      	cbz	r5, 8017830 <rcutils_string_map_getn+0x44>
 801781a:	f7e8 fce3 	bl	80001e4 <strlen>
 801781e:	4548      	cmp	r0, r9
 8017820:	4602      	mov	r2, r0
 8017822:	4629      	mov	r1, r5
 8017824:	bf38      	it	cc
 8017826:	464a      	movcc	r2, r9
 8017828:	4640      	mov	r0, r8
 801782a:	f004 f933 	bl	801ba94 <strncmp>
 801782e:	b128      	cbz	r0, 801783c <rcutils_string_map_getn+0x50>
 8017830:	45a2      	cmp	sl, r4
 8017832:	d1eb      	bne.n	801780c <rcutils_string_map_getn+0x20>
 8017834:	2700      	movs	r7, #0
 8017836:	4638      	mov	r0, r7
 8017838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	f853 700b 	ldr.w	r7, [r3, fp]
 8017842:	4638      	mov	r0, r7
 8017844:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017848 <rcutils_system_time_now>:
 8017848:	b308      	cbz	r0, 801788e <rcutils_system_time_now+0x46>
 801784a:	b570      	push	{r4, r5, r6, lr}
 801784c:	b084      	sub	sp, #16
 801784e:	4604      	mov	r4, r0
 8017850:	4669      	mov	r1, sp
 8017852:	2001      	movs	r0, #1
 8017854:	f7ea fadc 	bl	8001e10 <clock_gettime>
 8017858:	e9dd 3500 	ldrd	r3, r5, [sp]
 801785c:	2d00      	cmp	r5, #0
 801785e:	db13      	blt.n	8017888 <rcutils_system_time_now+0x40>
 8017860:	9902      	ldr	r1, [sp, #8]
 8017862:	2900      	cmp	r1, #0
 8017864:	db0d      	blt.n	8017882 <rcutils_system_time_now+0x3a>
 8017866:	4e0b      	ldr	r6, [pc, #44]	; (8017894 <rcutils_system_time_now+0x4c>)
 8017868:	fba3 3206 	umull	r3, r2, r3, r6
 801786c:	185b      	adds	r3, r3, r1
 801786e:	fb06 2205 	mla	r2, r6, r5, r2
 8017872:	f04f 0000 	mov.w	r0, #0
 8017876:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 801787a:	e9c4 3200 	strd	r3, r2, [r4]
 801787e:	b004      	add	sp, #16
 8017880:	bd70      	pop	{r4, r5, r6, pc}
 8017882:	ea53 0205 	orrs.w	r2, r3, r5
 8017886:	d1ee      	bne.n	8017866 <rcutils_system_time_now+0x1e>
 8017888:	2002      	movs	r0, #2
 801788a:	b004      	add	sp, #16
 801788c:	bd70      	pop	{r4, r5, r6, pc}
 801788e:	200b      	movs	r0, #11
 8017890:	4770      	bx	lr
 8017892:	bf00      	nop
 8017894:	3b9aca00 	.word	0x3b9aca00

08017898 <rcutils_steady_time_now>:
 8017898:	b308      	cbz	r0, 80178de <rcutils_steady_time_now+0x46>
 801789a:	b570      	push	{r4, r5, r6, lr}
 801789c:	b084      	sub	sp, #16
 801789e:	4604      	mov	r4, r0
 80178a0:	4669      	mov	r1, sp
 80178a2:	2000      	movs	r0, #0
 80178a4:	f7ea fab4 	bl	8001e10 <clock_gettime>
 80178a8:	e9dd 3500 	ldrd	r3, r5, [sp]
 80178ac:	2d00      	cmp	r5, #0
 80178ae:	db13      	blt.n	80178d8 <rcutils_steady_time_now+0x40>
 80178b0:	9902      	ldr	r1, [sp, #8]
 80178b2:	2900      	cmp	r1, #0
 80178b4:	db0d      	blt.n	80178d2 <rcutils_steady_time_now+0x3a>
 80178b6:	4e0b      	ldr	r6, [pc, #44]	; (80178e4 <rcutils_steady_time_now+0x4c>)
 80178b8:	fba3 3206 	umull	r3, r2, r3, r6
 80178bc:	185b      	adds	r3, r3, r1
 80178be:	fb06 2205 	mla	r2, r6, r5, r2
 80178c2:	f04f 0000 	mov.w	r0, #0
 80178c6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80178ca:	e9c4 3200 	strd	r3, r2, [r4]
 80178ce:	b004      	add	sp, #16
 80178d0:	bd70      	pop	{r4, r5, r6, pc}
 80178d2:	ea53 0205 	orrs.w	r2, r3, r5
 80178d6:	d1ee      	bne.n	80178b6 <rcutils_steady_time_now+0x1e>
 80178d8:	2002      	movs	r0, #2
 80178da:	b004      	add	sp, #16
 80178dc:	bd70      	pop	{r4, r5, r6, pc}
 80178de:	200b      	movs	r0, #11
 80178e0:	4770      	bx	lr
 80178e2:	bf00      	nop
 80178e4:	3b9aca00 	.word	0x3b9aca00

080178e8 <rmw_get_zero_initialized_context>:
 80178e8:	b510      	push	{r4, lr}
 80178ea:	4604      	mov	r4, r0
 80178ec:	3010      	adds	r0, #16
 80178ee:	f000 f80b 	bl	8017908 <rmw_get_zero_initialized_init_options>
 80178f2:	2300      	movs	r3, #0
 80178f4:	2000      	movs	r0, #0
 80178f6:	2100      	movs	r1, #0
 80178f8:	e9c4 0100 	strd	r0, r1, [r4]
 80178fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017900:	60a3      	str	r3, [r4, #8]
 8017902:	4620      	mov	r0, r4
 8017904:	bd10      	pop	{r4, pc}
 8017906:	bf00      	nop

08017908 <rmw_get_zero_initialized_init_options>:
 8017908:	b510      	push	{r4, lr}
 801790a:	2238      	movs	r2, #56	; 0x38
 801790c:	4604      	mov	r4, r0
 801790e:	2100      	movs	r1, #0
 8017910:	f003 fe30 	bl	801b574 <memset>
 8017914:	f104 0010 	add.w	r0, r4, #16
 8017918:	f000 f806 	bl	8017928 <rmw_get_default_security_options>
 801791c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017920:	60e3      	str	r3, [r4, #12]
 8017922:	4620      	mov	r0, r4
 8017924:	bd10      	pop	{r4, pc}
 8017926:	bf00      	nop

08017928 <rmw_get_default_security_options>:
 8017928:	2200      	movs	r2, #0
 801792a:	7002      	strb	r2, [r0, #0]
 801792c:	6042      	str	r2, [r0, #4]
 801792e:	4770      	bx	lr

08017930 <rmw_validate_full_topic_name>:
 8017930:	2800      	cmp	r0, #0
 8017932:	d057      	beq.n	80179e4 <rmw_validate_full_topic_name+0xb4>
 8017934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017938:	460d      	mov	r5, r1
 801793a:	2900      	cmp	r1, #0
 801793c:	d054      	beq.n	80179e8 <rmw_validate_full_topic_name+0xb8>
 801793e:	4616      	mov	r6, r2
 8017940:	4604      	mov	r4, r0
 8017942:	f7e8 fc4f 	bl	80001e4 <strlen>
 8017946:	b148      	cbz	r0, 801795c <rmw_validate_full_topic_name+0x2c>
 8017948:	7823      	ldrb	r3, [r4, #0]
 801794a:	2b2f      	cmp	r3, #47	; 0x2f
 801794c:	d00d      	beq.n	801796a <rmw_validate_full_topic_name+0x3a>
 801794e:	2302      	movs	r3, #2
 8017950:	602b      	str	r3, [r5, #0]
 8017952:	b13e      	cbz	r6, 8017964 <rmw_validate_full_topic_name+0x34>
 8017954:	2000      	movs	r0, #0
 8017956:	6030      	str	r0, [r6, #0]
 8017958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801795c:	2301      	movs	r3, #1
 801795e:	602b      	str	r3, [r5, #0]
 8017960:	2e00      	cmp	r6, #0
 8017962:	d1f7      	bne.n	8017954 <rmw_validate_full_topic_name+0x24>
 8017964:	2000      	movs	r0, #0
 8017966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801796a:	1e43      	subs	r3, r0, #1
 801796c:	5ce2      	ldrb	r2, [r4, r3]
 801796e:	2a2f      	cmp	r2, #47	; 0x2f
 8017970:	d03c      	beq.n	80179ec <rmw_validate_full_topic_name+0xbc>
 8017972:	1e63      	subs	r3, r4, #1
 8017974:	eb03 0800 	add.w	r8, r3, r0
 8017978:	f1c4 0e01 	rsb	lr, r4, #1
 801797c:	eb0e 0703 	add.w	r7, lr, r3
 8017980:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8017984:	f021 0220 	bic.w	r2, r1, #32
 8017988:	3a41      	subs	r2, #65	; 0x41
 801798a:	2a19      	cmp	r2, #25
 801798c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8017990:	d90b      	bls.n	80179aa <rmw_validate_full_topic_name+0x7a>
 8017992:	295f      	cmp	r1, #95	; 0x5f
 8017994:	d009      	beq.n	80179aa <rmw_validate_full_topic_name+0x7a>
 8017996:	f1bc 0f0a 	cmp.w	ip, #10
 801799a:	d906      	bls.n	80179aa <rmw_validate_full_topic_name+0x7a>
 801799c:	2304      	movs	r3, #4
 801799e:	602b      	str	r3, [r5, #0]
 80179a0:	2e00      	cmp	r6, #0
 80179a2:	d0df      	beq.n	8017964 <rmw_validate_full_topic_name+0x34>
 80179a4:	6037      	str	r7, [r6, #0]
 80179a6:	2000      	movs	r0, #0
 80179a8:	e7d6      	b.n	8017958 <rmw_validate_full_topic_name+0x28>
 80179aa:	4543      	cmp	r3, r8
 80179ac:	d1e6      	bne.n	801797c <rmw_validate_full_topic_name+0x4c>
 80179ae:	4f1a      	ldr	r7, [pc, #104]	; (8017a18 <rmw_validate_full_topic_name+0xe8>)
 80179b0:	2301      	movs	r3, #1
 80179b2:	e004      	b.n	80179be <rmw_validate_full_topic_name+0x8e>
 80179b4:	4298      	cmp	r0, r3
 80179b6:	f104 0401 	add.w	r4, r4, #1
 80179ba:	d91c      	bls.n	80179f6 <rmw_validate_full_topic_name+0xc6>
 80179bc:	4613      	mov	r3, r2
 80179be:	4298      	cmp	r0, r3
 80179c0:	f103 0201 	add.w	r2, r3, #1
 80179c4:	d0f6      	beq.n	80179b4 <rmw_validate_full_topic_name+0x84>
 80179c6:	7821      	ldrb	r1, [r4, #0]
 80179c8:	292f      	cmp	r1, #47	; 0x2f
 80179ca:	d1f3      	bne.n	80179b4 <rmw_validate_full_topic_name+0x84>
 80179cc:	7861      	ldrb	r1, [r4, #1]
 80179ce:	292f      	cmp	r1, #47	; 0x2f
 80179d0:	d01c      	beq.n	8017a0c <rmw_validate_full_topic_name+0xdc>
 80179d2:	5dc9      	ldrb	r1, [r1, r7]
 80179d4:	0749      	lsls	r1, r1, #29
 80179d6:	d5ed      	bpl.n	80179b4 <rmw_validate_full_topic_name+0x84>
 80179d8:	2206      	movs	r2, #6
 80179da:	602a      	str	r2, [r5, #0]
 80179dc:	2e00      	cmp	r6, #0
 80179de:	d0c1      	beq.n	8017964 <rmw_validate_full_topic_name+0x34>
 80179e0:	6033      	str	r3, [r6, #0]
 80179e2:	e7bf      	b.n	8017964 <rmw_validate_full_topic_name+0x34>
 80179e4:	200b      	movs	r0, #11
 80179e6:	4770      	bx	lr
 80179e8:	200b      	movs	r0, #11
 80179ea:	e7b5      	b.n	8017958 <rmw_validate_full_topic_name+0x28>
 80179ec:	2203      	movs	r2, #3
 80179ee:	602a      	str	r2, [r5, #0]
 80179f0:	2e00      	cmp	r6, #0
 80179f2:	d1f5      	bne.n	80179e0 <rmw_validate_full_topic_name+0xb0>
 80179f4:	e7b6      	b.n	8017964 <rmw_validate_full_topic_name+0x34>
 80179f6:	28f7      	cmp	r0, #247	; 0xf7
 80179f8:	d802      	bhi.n	8017a00 <rmw_validate_full_topic_name+0xd0>
 80179fa:	2000      	movs	r0, #0
 80179fc:	6028      	str	r0, [r5, #0]
 80179fe:	e7ab      	b.n	8017958 <rmw_validate_full_topic_name+0x28>
 8017a00:	2307      	movs	r3, #7
 8017a02:	602b      	str	r3, [r5, #0]
 8017a04:	2e00      	cmp	r6, #0
 8017a06:	d0ad      	beq.n	8017964 <rmw_validate_full_topic_name+0x34>
 8017a08:	23f6      	movs	r3, #246	; 0xf6
 8017a0a:	e7e9      	b.n	80179e0 <rmw_validate_full_topic_name+0xb0>
 8017a0c:	2205      	movs	r2, #5
 8017a0e:	602a      	str	r2, [r5, #0]
 8017a10:	2e00      	cmp	r6, #0
 8017a12:	d1e5      	bne.n	80179e0 <rmw_validate_full_topic_name+0xb0>
 8017a14:	e7a6      	b.n	8017964 <rmw_validate_full_topic_name+0x34>
 8017a16:	bf00      	nop
 8017a18:	0801de5f 	.word	0x0801de5f

08017a1c <rmw_validate_namespace_with_size>:
 8017a1c:	b340      	cbz	r0, 8017a70 <rmw_validate_namespace_with_size+0x54>
 8017a1e:	b570      	push	{r4, r5, r6, lr}
 8017a20:	4614      	mov	r4, r2
 8017a22:	b0c2      	sub	sp, #264	; 0x108
 8017a24:	b332      	cbz	r2, 8017a74 <rmw_validate_namespace_with_size+0x58>
 8017a26:	2901      	cmp	r1, #1
 8017a28:	460d      	mov	r5, r1
 8017a2a:	461e      	mov	r6, r3
 8017a2c:	d102      	bne.n	8017a34 <rmw_validate_namespace_with_size+0x18>
 8017a2e:	7803      	ldrb	r3, [r0, #0]
 8017a30:	2b2f      	cmp	r3, #47	; 0x2f
 8017a32:	d012      	beq.n	8017a5a <rmw_validate_namespace_with_size+0x3e>
 8017a34:	aa01      	add	r2, sp, #4
 8017a36:	4669      	mov	r1, sp
 8017a38:	f7ff ff7a 	bl	8017930 <rmw_validate_full_topic_name>
 8017a3c:	b978      	cbnz	r0, 8017a5e <rmw_validate_namespace_with_size+0x42>
 8017a3e:	9b00      	ldr	r3, [sp, #0]
 8017a40:	b14b      	cbz	r3, 8017a56 <rmw_validate_namespace_with_size+0x3a>
 8017a42:	2b07      	cmp	r3, #7
 8017a44:	d007      	beq.n	8017a56 <rmw_validate_namespace_with_size+0x3a>
 8017a46:	1e5a      	subs	r2, r3, #1
 8017a48:	2a05      	cmp	r2, #5
 8017a4a:	d82b      	bhi.n	8017aa4 <rmw_validate_namespace_with_size+0x88>
 8017a4c:	e8df f002 	tbb	[pc, r2]
 8017a50:	1e212427 	.word	0x1e212427
 8017a54:	141b      	.short	0x141b
 8017a56:	2df5      	cmp	r5, #245	; 0xf5
 8017a58:	d803      	bhi.n	8017a62 <rmw_validate_namespace_with_size+0x46>
 8017a5a:	2000      	movs	r0, #0
 8017a5c:	6020      	str	r0, [r4, #0]
 8017a5e:	b042      	add	sp, #264	; 0x108
 8017a60:	bd70      	pop	{r4, r5, r6, pc}
 8017a62:	2307      	movs	r3, #7
 8017a64:	6023      	str	r3, [r4, #0]
 8017a66:	2e00      	cmp	r6, #0
 8017a68:	d0f9      	beq.n	8017a5e <rmw_validate_namespace_with_size+0x42>
 8017a6a:	23f4      	movs	r3, #244	; 0xf4
 8017a6c:	6033      	str	r3, [r6, #0]
 8017a6e:	e7f6      	b.n	8017a5e <rmw_validate_namespace_with_size+0x42>
 8017a70:	200b      	movs	r0, #11
 8017a72:	4770      	bx	lr
 8017a74:	200b      	movs	r0, #11
 8017a76:	e7f2      	b.n	8017a5e <rmw_validate_namespace_with_size+0x42>
 8017a78:	2306      	movs	r3, #6
 8017a7a:	6023      	str	r3, [r4, #0]
 8017a7c:	2e00      	cmp	r6, #0
 8017a7e:	d0ee      	beq.n	8017a5e <rmw_validate_namespace_with_size+0x42>
 8017a80:	9b01      	ldr	r3, [sp, #4]
 8017a82:	6033      	str	r3, [r6, #0]
 8017a84:	e7eb      	b.n	8017a5e <rmw_validate_namespace_with_size+0x42>
 8017a86:	2305      	movs	r3, #5
 8017a88:	6023      	str	r3, [r4, #0]
 8017a8a:	e7f7      	b.n	8017a7c <rmw_validate_namespace_with_size+0x60>
 8017a8c:	2304      	movs	r3, #4
 8017a8e:	6023      	str	r3, [r4, #0]
 8017a90:	e7f4      	b.n	8017a7c <rmw_validate_namespace_with_size+0x60>
 8017a92:	2303      	movs	r3, #3
 8017a94:	6023      	str	r3, [r4, #0]
 8017a96:	e7f1      	b.n	8017a7c <rmw_validate_namespace_with_size+0x60>
 8017a98:	2302      	movs	r3, #2
 8017a9a:	6023      	str	r3, [r4, #0]
 8017a9c:	e7ee      	b.n	8017a7c <rmw_validate_namespace_with_size+0x60>
 8017a9e:	2301      	movs	r3, #1
 8017aa0:	6023      	str	r3, [r4, #0]
 8017aa2:	e7eb      	b.n	8017a7c <rmw_validate_namespace_with_size+0x60>
 8017aa4:	4a03      	ldr	r2, [pc, #12]	; (8017ab4 <rmw_validate_namespace_with_size+0x98>)
 8017aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017aaa:	a802      	add	r0, sp, #8
 8017aac:	f7ff fd36 	bl	801751c <rcutils_snprintf>
 8017ab0:	2001      	movs	r0, #1
 8017ab2:	e7d4      	b.n	8017a5e <rmw_validate_namespace_with_size+0x42>
 8017ab4:	0801d79c 	.word	0x0801d79c

08017ab8 <rmw_validate_namespace>:
 8017ab8:	b168      	cbz	r0, 8017ad6 <rmw_validate_namespace+0x1e>
 8017aba:	b570      	push	{r4, r5, r6, lr}
 8017abc:	460d      	mov	r5, r1
 8017abe:	4616      	mov	r6, r2
 8017ac0:	4604      	mov	r4, r0
 8017ac2:	f7e8 fb8f 	bl	80001e4 <strlen>
 8017ac6:	4633      	mov	r3, r6
 8017ac8:	4601      	mov	r1, r0
 8017aca:	462a      	mov	r2, r5
 8017acc:	4620      	mov	r0, r4
 8017ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ad2:	f7ff bfa3 	b.w	8017a1c <rmw_validate_namespace_with_size>
 8017ad6:	200b      	movs	r0, #11
 8017ad8:	4770      	bx	lr
 8017ada:	bf00      	nop

08017adc <rmw_namespace_validation_result_string>:
 8017adc:	2807      	cmp	r0, #7
 8017ade:	bf9a      	itte	ls
 8017ae0:	4b02      	ldrls	r3, [pc, #8]	; (8017aec <rmw_namespace_validation_result_string+0x10>)
 8017ae2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017ae6:	4802      	ldrhi	r0, [pc, #8]	; (8017af0 <rmw_namespace_validation_result_string+0x14>)
 8017ae8:	4770      	bx	lr
 8017aea:	bf00      	nop
 8017aec:	0801d994 	.word	0x0801d994
 8017af0:	0801d7ec 	.word	0x0801d7ec

08017af4 <rmw_validate_node_name>:
 8017af4:	2800      	cmp	r0, #0
 8017af6:	d03b      	beq.n	8017b70 <rmw_validate_node_name+0x7c>
 8017af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017afc:	460d      	mov	r5, r1
 8017afe:	2900      	cmp	r1, #0
 8017b00:	d038      	beq.n	8017b74 <rmw_validate_node_name+0x80>
 8017b02:	4616      	mov	r6, r2
 8017b04:	4604      	mov	r4, r0
 8017b06:	f7e8 fb6d 	bl	80001e4 <strlen>
 8017b0a:	b1e0      	cbz	r0, 8017b46 <rmw_validate_node_name+0x52>
 8017b0c:	1e63      	subs	r3, r4, #1
 8017b0e:	eb03 0800 	add.w	r8, r3, r0
 8017b12:	f1c4 0101 	rsb	r1, r4, #1
 8017b16:	18cf      	adds	r7, r1, r3
 8017b18:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8017b1c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8017b20:	f02e 0c20 	bic.w	ip, lr, #32
 8017b24:	2a09      	cmp	r2, #9
 8017b26:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8017b2a:	d914      	bls.n	8017b56 <rmw_validate_node_name+0x62>
 8017b2c:	f1bc 0f19 	cmp.w	ip, #25
 8017b30:	d911      	bls.n	8017b56 <rmw_validate_node_name+0x62>
 8017b32:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8017b36:	d00e      	beq.n	8017b56 <rmw_validate_node_name+0x62>
 8017b38:	2302      	movs	r3, #2
 8017b3a:	602b      	str	r3, [r5, #0]
 8017b3c:	b106      	cbz	r6, 8017b40 <rmw_validate_node_name+0x4c>
 8017b3e:	6037      	str	r7, [r6, #0]
 8017b40:	2000      	movs	r0, #0
 8017b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b46:	2301      	movs	r3, #1
 8017b48:	602b      	str	r3, [r5, #0]
 8017b4a:	2e00      	cmp	r6, #0
 8017b4c:	d0f8      	beq.n	8017b40 <rmw_validate_node_name+0x4c>
 8017b4e:	2000      	movs	r0, #0
 8017b50:	6030      	str	r0, [r6, #0]
 8017b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b56:	4543      	cmp	r3, r8
 8017b58:	d1dd      	bne.n	8017b16 <rmw_validate_node_name+0x22>
 8017b5a:	7822      	ldrb	r2, [r4, #0]
 8017b5c:	4b0d      	ldr	r3, [pc, #52]	; (8017b94 <rmw_validate_node_name+0xa0>)
 8017b5e:	5cd3      	ldrb	r3, [r2, r3]
 8017b60:	f013 0304 	ands.w	r3, r3, #4
 8017b64:	d110      	bne.n	8017b88 <rmw_validate_node_name+0x94>
 8017b66:	28ff      	cmp	r0, #255	; 0xff
 8017b68:	d806      	bhi.n	8017b78 <rmw_validate_node_name+0x84>
 8017b6a:	602b      	str	r3, [r5, #0]
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	e7e8      	b.n	8017b42 <rmw_validate_node_name+0x4e>
 8017b70:	200b      	movs	r0, #11
 8017b72:	4770      	bx	lr
 8017b74:	200b      	movs	r0, #11
 8017b76:	e7e4      	b.n	8017b42 <rmw_validate_node_name+0x4e>
 8017b78:	2204      	movs	r2, #4
 8017b7a:	602a      	str	r2, [r5, #0]
 8017b7c:	2e00      	cmp	r6, #0
 8017b7e:	d0df      	beq.n	8017b40 <rmw_validate_node_name+0x4c>
 8017b80:	22fe      	movs	r2, #254	; 0xfe
 8017b82:	6032      	str	r2, [r6, #0]
 8017b84:	4618      	mov	r0, r3
 8017b86:	e7dc      	b.n	8017b42 <rmw_validate_node_name+0x4e>
 8017b88:	2303      	movs	r3, #3
 8017b8a:	602b      	str	r3, [r5, #0]
 8017b8c:	2e00      	cmp	r6, #0
 8017b8e:	d1de      	bne.n	8017b4e <rmw_validate_node_name+0x5a>
 8017b90:	e7d6      	b.n	8017b40 <rmw_validate_node_name+0x4c>
 8017b92:	bf00      	nop
 8017b94:	0801de5f 	.word	0x0801de5f

08017b98 <rmw_node_name_validation_result_string>:
 8017b98:	2804      	cmp	r0, #4
 8017b9a:	bf9a      	itte	ls
 8017b9c:	4b02      	ldrls	r3, [pc, #8]	; (8017ba8 <rmw_node_name_validation_result_string+0x10>)
 8017b9e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017ba2:	4802      	ldrhi	r0, [pc, #8]	; (8017bac <rmw_node_name_validation_result_string+0x14>)
 8017ba4:	4770      	bx	lr
 8017ba6:	bf00      	nop
 8017ba8:	0801daa0 	.word	0x0801daa0
 8017bac:	0801d9b4 	.word	0x0801d9b4

08017bb0 <get_memory>:
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	6840      	ldr	r0, [r0, #4]
 8017bb4:	b158      	cbz	r0, 8017bce <get_memory+0x1e>
 8017bb6:	6842      	ldr	r2, [r0, #4]
 8017bb8:	605a      	str	r2, [r3, #4]
 8017bba:	b10a      	cbz	r2, 8017bc0 <get_memory+0x10>
 8017bbc:	2100      	movs	r1, #0
 8017bbe:	6011      	str	r1, [r2, #0]
 8017bc0:	681a      	ldr	r2, [r3, #0]
 8017bc2:	6042      	str	r2, [r0, #4]
 8017bc4:	b102      	cbz	r2, 8017bc8 <get_memory+0x18>
 8017bc6:	6010      	str	r0, [r2, #0]
 8017bc8:	2200      	movs	r2, #0
 8017bca:	6002      	str	r2, [r0, #0]
 8017bcc:	6018      	str	r0, [r3, #0]
 8017bce:	4770      	bx	lr

08017bd0 <put_memory>:
 8017bd0:	680b      	ldr	r3, [r1, #0]
 8017bd2:	b10b      	cbz	r3, 8017bd8 <put_memory+0x8>
 8017bd4:	684a      	ldr	r2, [r1, #4]
 8017bd6:	605a      	str	r2, [r3, #4]
 8017bd8:	684a      	ldr	r2, [r1, #4]
 8017bda:	b102      	cbz	r2, 8017bde <put_memory+0xe>
 8017bdc:	6013      	str	r3, [r2, #0]
 8017bde:	6803      	ldr	r3, [r0, #0]
 8017be0:	428b      	cmp	r3, r1
 8017be2:	6843      	ldr	r3, [r0, #4]
 8017be4:	bf08      	it	eq
 8017be6:	6002      	streq	r2, [r0, #0]
 8017be8:	604b      	str	r3, [r1, #4]
 8017bea:	b103      	cbz	r3, 8017bee <put_memory+0x1e>
 8017bec:	6019      	str	r1, [r3, #0]
 8017bee:	2300      	movs	r3, #0
 8017bf0:	600b      	str	r3, [r1, #0]
 8017bf2:	6041      	str	r1, [r0, #4]
 8017bf4:	4770      	bx	lr
 8017bf6:	bf00      	nop

08017bf8 <rmw_get_implementation_identifier>:
 8017bf8:	4b01      	ldr	r3, [pc, #4]	; (8017c00 <rmw_get_implementation_identifier+0x8>)
 8017bfa:	6818      	ldr	r0, [r3, #0]
 8017bfc:	4770      	bx	lr
 8017bfe:	bf00      	nop
 8017c00:	0801dacc 	.word	0x0801dacc

08017c04 <rmw_init_options_init>:
 8017c04:	b084      	sub	sp, #16
 8017c06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c08:	b083      	sub	sp, #12
 8017c0a:	ad09      	add	r5, sp, #36	; 0x24
 8017c0c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8017c10:	b130      	cbz	r0, 8017c20 <rmw_init_options_init+0x1c>
 8017c12:	4604      	mov	r4, r0
 8017c14:	4628      	mov	r0, r5
 8017c16:	f7f8 fb1f 	bl	8010258 <rcutils_allocator_is_valid>
 8017c1a:	b108      	cbz	r0, 8017c20 <rmw_init_options_init+0x1c>
 8017c1c:	68a6      	ldr	r6, [r4, #8]
 8017c1e:	b12e      	cbz	r6, 8017c2c <rmw_init_options_init+0x28>
 8017c20:	200b      	movs	r0, #11
 8017c22:	b003      	add	sp, #12
 8017c24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017c28:	b004      	add	sp, #16
 8017c2a:	4770      	bx	lr
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	2300      	movs	r3, #0
 8017c30:	e9c4 2300 	strd	r2, r3, [r4]
 8017c34:	4b22      	ldr	r3, [pc, #136]	; (8017cc0 <rmw_init_options_init+0xbc>)
 8017c36:	f8df e098 	ldr.w	lr, [pc, #152]	; 8017cd0 <rmw_init_options_init+0xcc>
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	60a3      	str	r3, [r4, #8]
 8017c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017c40:	f104 0c20 	add.w	ip, r4, #32
 8017c44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017c48:	466f      	mov	r7, sp
 8017c4a:	682b      	ldr	r3, [r5, #0]
 8017c4c:	f8cc 3000 	str.w	r3, [ip]
 8017c50:	4638      	mov	r0, r7
 8017c52:	f8c4 e01c 	str.w	lr, [r4, #28]
 8017c56:	60e6      	str	r6, [r4, #12]
 8017c58:	f7ff fe66 	bl	8017928 <rmw_get_default_security_options>
 8017c5c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017c60:	f104 0310 	add.w	r3, r4, #16
 8017c64:	e883 0003 	stmia.w	r3, {r0, r1}
 8017c68:	2203      	movs	r2, #3
 8017c6a:	4816      	ldr	r0, [pc, #88]	; (8017cc4 <rmw_init_options_init+0xc0>)
 8017c6c:	4916      	ldr	r1, [pc, #88]	; (8017cc8 <rmw_init_options_init+0xc4>)
 8017c6e:	7626      	strb	r6, [r4, #24]
 8017c70:	f7f8 fde4 	bl	801083c <rmw_uxrce_init_init_options_impl_memory>
 8017c74:	4813      	ldr	r0, [pc, #76]	; (8017cc4 <rmw_init_options_init+0xc0>)
 8017c76:	f7ff ff9b 	bl	8017bb0 <get_memory>
 8017c7a:	b1f0      	cbz	r0, 8017cba <rmw_init_options_init+0xb6>
 8017c7c:	4a13      	ldr	r2, [pc, #76]	; (8017ccc <rmw_init_options_init+0xc8>)
 8017c7e:	6883      	ldr	r3, [r0, #8]
 8017c80:	6851      	ldr	r1, [r2, #4]
 8017c82:	7810      	ldrb	r0, [r2, #0]
 8017c84:	6363      	str	r3, [r4, #52]	; 0x34
 8017c86:	7418      	strb	r0, [r3, #16]
 8017c88:	6159      	str	r1, [r3, #20]
 8017c8a:	68d1      	ldr	r1, [r2, #12]
 8017c8c:	61d9      	str	r1, [r3, #28]
 8017c8e:	6911      	ldr	r1, [r2, #16]
 8017c90:	6219      	str	r1, [r3, #32]
 8017c92:	6951      	ldr	r1, [r2, #20]
 8017c94:	6892      	ldr	r2, [r2, #8]
 8017c96:	619a      	str	r2, [r3, #24]
 8017c98:	6259      	str	r1, [r3, #36]	; 0x24
 8017c9a:	f7fd faf3 	bl	8015284 <uxr_nanos>
 8017c9e:	f003 fd7f 	bl	801b7a0 <srand>
 8017ca2:	f003 fdab 	bl	801b7fc <rand>
 8017ca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ca8:	6298      	str	r0, [r3, #40]	; 0x28
 8017caa:	2800      	cmp	r0, #0
 8017cac:	d0f9      	beq.n	8017ca2 <rmw_init_options_init+0x9e>
 8017cae:	2000      	movs	r0, #0
 8017cb0:	b003      	add	sp, #12
 8017cb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017cb6:	b004      	add	sp, #16
 8017cb8:	4770      	bx	lr
 8017cba:	2001      	movs	r0, #1
 8017cbc:	e7b1      	b.n	8017c22 <rmw_init_options_init+0x1e>
 8017cbe:	bf00      	nop
 8017cc0:	0801dacc 	.word	0x0801dacc
 8017cc4:	2001cb44 	.word	0x2001cb44
 8017cc8:	200183e0 	.word	0x200183e0
 8017ccc:	2001826c 	.word	0x2001826c
 8017cd0:	0801d66c 	.word	0x0801d66c

08017cd4 <rmw_init_options_copy>:
 8017cd4:	b570      	push	{r4, r5, r6, lr}
 8017cd6:	b158      	cbz	r0, 8017cf0 <rmw_init_options_copy+0x1c>
 8017cd8:	460d      	mov	r5, r1
 8017cda:	b149      	cbz	r1, 8017cf0 <rmw_init_options_copy+0x1c>
 8017cdc:	4604      	mov	r4, r0
 8017cde:	6880      	ldr	r0, [r0, #8]
 8017ce0:	b120      	cbz	r0, 8017cec <rmw_init_options_copy+0x18>
 8017ce2:	4b1e      	ldr	r3, [pc, #120]	; (8017d5c <rmw_init_options_copy+0x88>)
 8017ce4:	6819      	ldr	r1, [r3, #0]
 8017ce6:	f7e8 fa73 	bl	80001d0 <strcmp>
 8017cea:	bb90      	cbnz	r0, 8017d52 <rmw_init_options_copy+0x7e>
 8017cec:	68ab      	ldr	r3, [r5, #8]
 8017cee:	b113      	cbz	r3, 8017cf6 <rmw_init_options_copy+0x22>
 8017cf0:	250b      	movs	r5, #11
 8017cf2:	4628      	mov	r0, r5
 8017cf4:	bd70      	pop	{r4, r5, r6, pc}
 8017cf6:	4623      	mov	r3, r4
 8017cf8:	462a      	mov	r2, r5
 8017cfa:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8017cfe:	f8d3 c000 	ldr.w	ip, [r3]
 8017d02:	6858      	ldr	r0, [r3, #4]
 8017d04:	6899      	ldr	r1, [r3, #8]
 8017d06:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8017d0a:	f8c2 e00c 	str.w	lr, [r2, #12]
 8017d0e:	3310      	adds	r3, #16
 8017d10:	42b3      	cmp	r3, r6
 8017d12:	f8c2 c000 	str.w	ip, [r2]
 8017d16:	6050      	str	r0, [r2, #4]
 8017d18:	6091      	str	r1, [r2, #8]
 8017d1a:	f102 0210 	add.w	r2, r2, #16
 8017d1e:	d1ee      	bne.n	8017cfe <rmw_init_options_copy+0x2a>
 8017d20:	6819      	ldr	r1, [r3, #0]
 8017d22:	685b      	ldr	r3, [r3, #4]
 8017d24:	480e      	ldr	r0, [pc, #56]	; (8017d60 <rmw_init_options_copy+0x8c>)
 8017d26:	6053      	str	r3, [r2, #4]
 8017d28:	6011      	str	r1, [r2, #0]
 8017d2a:	f7ff ff41 	bl	8017bb0 <get_memory>
 8017d2e:	b198      	cbz	r0, 8017d58 <rmw_init_options_copy+0x84>
 8017d30:	6883      	ldr	r3, [r0, #8]
 8017d32:	636b      	str	r3, [r5, #52]	; 0x34
 8017d34:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017d36:	f102 0c10 	add.w	ip, r2, #16
 8017d3a:	f103 0410 	add.w	r4, r3, #16
 8017d3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017d44:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8017d48:	2500      	movs	r5, #0
 8017d4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017d4e:	4628      	mov	r0, r5
 8017d50:	bd70      	pop	{r4, r5, r6, pc}
 8017d52:	250c      	movs	r5, #12
 8017d54:	4628      	mov	r0, r5
 8017d56:	bd70      	pop	{r4, r5, r6, pc}
 8017d58:	2501      	movs	r5, #1
 8017d5a:	e7ca      	b.n	8017cf2 <rmw_init_options_copy+0x1e>
 8017d5c:	0801dacc 	.word	0x0801dacc
 8017d60:	2001cb44 	.word	0x2001cb44

08017d64 <rmw_init_options_fini>:
 8017d64:	2800      	cmp	r0, #0
 8017d66:	d03d      	beq.n	8017de4 <rmw_init_options_fini+0x80>
 8017d68:	b510      	push	{r4, lr}
 8017d6a:	4604      	mov	r4, r0
 8017d6c:	b08e      	sub	sp, #56	; 0x38
 8017d6e:	3020      	adds	r0, #32
 8017d70:	f7f8 fa72 	bl	8010258 <rcutils_allocator_is_valid>
 8017d74:	b360      	cbz	r0, 8017dd0 <rmw_init_options_fini+0x6c>
 8017d76:	68a0      	ldr	r0, [r4, #8]
 8017d78:	b120      	cbz	r0, 8017d84 <rmw_init_options_fini+0x20>
 8017d7a:	4b1c      	ldr	r3, [pc, #112]	; (8017dec <rmw_init_options_fini+0x88>)
 8017d7c:	6819      	ldr	r1, [r3, #0]
 8017d7e:	f7e8 fa27 	bl	80001d0 <strcmp>
 8017d82:	bb68      	cbnz	r0, 8017de0 <rmw_init_options_fini+0x7c>
 8017d84:	4b1a      	ldr	r3, [pc, #104]	; (8017df0 <rmw_init_options_fini+0x8c>)
 8017d86:	6819      	ldr	r1, [r3, #0]
 8017d88:	b331      	cbz	r1, 8017dd8 <rmw_init_options_fini+0x74>
 8017d8a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017d8c:	e001      	b.n	8017d92 <rmw_init_options_fini+0x2e>
 8017d8e:	6849      	ldr	r1, [r1, #4]
 8017d90:	b311      	cbz	r1, 8017dd8 <rmw_init_options_fini+0x74>
 8017d92:	688b      	ldr	r3, [r1, #8]
 8017d94:	429a      	cmp	r2, r3
 8017d96:	d1fa      	bne.n	8017d8e <rmw_init_options_fini+0x2a>
 8017d98:	4815      	ldr	r0, [pc, #84]	; (8017df0 <rmw_init_options_fini+0x8c>)
 8017d9a:	f7ff ff19 	bl	8017bd0 <put_memory>
 8017d9e:	4668      	mov	r0, sp
 8017da0:	f7ff fdb2 	bl	8017908 <rmw_get_zero_initialized_init_options>
 8017da4:	46ee      	mov	lr, sp
 8017da6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017daa:	46a4      	mov	ip, r4
 8017dac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017db0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017db4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017db8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017dbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017dc0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017dc4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017dc8:	2300      	movs	r3, #0
 8017dca:	4618      	mov	r0, r3
 8017dcc:	b00e      	add	sp, #56	; 0x38
 8017dce:	bd10      	pop	{r4, pc}
 8017dd0:	230b      	movs	r3, #11
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	b00e      	add	sp, #56	; 0x38
 8017dd6:	bd10      	pop	{r4, pc}
 8017dd8:	2301      	movs	r3, #1
 8017dda:	4618      	mov	r0, r3
 8017ddc:	b00e      	add	sp, #56	; 0x38
 8017dde:	bd10      	pop	{r4, pc}
 8017de0:	230c      	movs	r3, #12
 8017de2:	e7f2      	b.n	8017dca <rmw_init_options_fini+0x66>
 8017de4:	230b      	movs	r3, #11
 8017de6:	4618      	mov	r0, r3
 8017de8:	4770      	bx	lr
 8017dea:	bf00      	nop
 8017dec:	0801dacc 	.word	0x0801dacc
 8017df0:	2001cb44 	.word	0x2001cb44

08017df4 <rmw_init>:
 8017df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017df8:	b083      	sub	sp, #12
 8017dfa:	2800      	cmp	r0, #0
 8017dfc:	f000 80d3 	beq.w	8017fa6 <rmw_init+0x1b2>
 8017e00:	460e      	mov	r6, r1
 8017e02:	2900      	cmp	r1, #0
 8017e04:	f000 80cf 	beq.w	8017fa6 <rmw_init+0x1b2>
 8017e08:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017e0a:	4605      	mov	r5, r0
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	f000 80ca 	beq.w	8017fa6 <rmw_init+0x1b2>
 8017e12:	4b78      	ldr	r3, [pc, #480]	; (8017ff4 <rmw_init+0x200>)
 8017e14:	6880      	ldr	r0, [r0, #8]
 8017e16:	681f      	ldr	r7, [r3, #0]
 8017e18:	b128      	cbz	r0, 8017e26 <rmw_init+0x32>
 8017e1a:	4639      	mov	r1, r7
 8017e1c:	f7e8 f9d8 	bl	80001d0 <strcmp>
 8017e20:	2800      	cmp	r0, #0
 8017e22:	f040 80ca 	bne.w	8017fba <rmw_init+0x1c6>
 8017e26:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017e2a:	4c73      	ldr	r4, [pc, #460]	; (8017ff8 <rmw_init+0x204>)
 8017e2c:	4973      	ldr	r1, [pc, #460]	; (8017ffc <rmw_init+0x208>)
 8017e2e:	4874      	ldr	r0, [pc, #464]	; (8018000 <rmw_init+0x20c>)
 8017e30:	60b7      	str	r7, [r6, #8]
 8017e32:	e9c6 2300 	strd	r2, r3, [r6]
 8017e36:	68eb      	ldr	r3, [r5, #12]
 8017e38:	64b3      	str	r3, [r6, #72]	; 0x48
 8017e3a:	2201      	movs	r2, #1
 8017e3c:	f7f8 fc9e 	bl	801077c <rmw_uxrce_init_session_memory>
 8017e40:	4620      	mov	r0, r4
 8017e42:	4970      	ldr	r1, [pc, #448]	; (8018004 <rmw_init+0x210>)
 8017e44:	2204      	movs	r2, #4
 8017e46:	f7f8 fcd9 	bl	80107fc <rmw_uxrce_init_static_input_buffer_memory>
 8017e4a:	f04f 0800 	mov.w	r8, #0
 8017e4e:	486c      	ldr	r0, [pc, #432]	; (8018000 <rmw_init+0x20c>)
 8017e50:	f884 800d 	strb.w	r8, [r4, #13]
 8017e54:	f7ff feac 	bl	8017bb0 <get_memory>
 8017e58:	2800      	cmp	r0, #0
 8017e5a:	f000 80a9 	beq.w	8017fb0 <rmw_init+0x1bc>
 8017e5e:	6884      	ldr	r4, [r0, #8]
 8017e60:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8017e62:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8017e64:	f890 c010 	ldrb.w	ip, [r0, #16]
 8017e68:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8017e6c:	9101      	str	r1, [sp, #4]
 8017e6e:	6a00      	ldr	r0, [r0, #32]
 8017e70:	9000      	str	r0, [sp, #0]
 8017e72:	f104 0910 	add.w	r9, r4, #16
 8017e76:	4661      	mov	r1, ip
 8017e78:	4648      	mov	r0, r9
 8017e7a:	f001 f97b 	bl	8019174 <uxr_set_custom_transport_callbacks>
 8017e7e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8017e82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017e86:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8017e8a:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8017e8e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8017e92:	495d      	ldr	r1, [pc, #372]	; (8018008 <rmw_init+0x214>)
 8017e94:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8017e98:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8017e9c:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8017ea0:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8017ea4:	4859      	ldr	r0, [pc, #356]	; (801800c <rmw_init+0x218>)
 8017ea6:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8017eaa:	2201      	movs	r2, #1
 8017eac:	64f4      	str	r4, [r6, #76]	; 0x4c
 8017eae:	f7f8 fc45 	bl	801073c <rmw_uxrce_init_node_memory>
 8017eb2:	4957      	ldr	r1, [pc, #348]	; (8018010 <rmw_init+0x21c>)
 8017eb4:	4857      	ldr	r0, [pc, #348]	; (8018014 <rmw_init+0x220>)
 8017eb6:	2205      	movs	r2, #5
 8017eb8:	f7f8 fc20 	bl	80106fc <rmw_uxrce_init_subscription_memory>
 8017ebc:	4956      	ldr	r1, [pc, #344]	; (8018018 <rmw_init+0x224>)
 8017ebe:	4857      	ldr	r0, [pc, #348]	; (801801c <rmw_init+0x228>)
 8017ec0:	220a      	movs	r2, #10
 8017ec2:	f7f8 fbfb 	bl	80106bc <rmw_uxrce_init_publisher_memory>
 8017ec6:	4956      	ldr	r1, [pc, #344]	; (8018020 <rmw_init+0x22c>)
 8017ec8:	4856      	ldr	r0, [pc, #344]	; (8018024 <rmw_init+0x230>)
 8017eca:	2201      	movs	r2, #1
 8017ecc:	f7f8 fbb6 	bl	801063c <rmw_uxrce_init_service_memory>
 8017ed0:	4955      	ldr	r1, [pc, #340]	; (8018028 <rmw_init+0x234>)
 8017ed2:	4856      	ldr	r0, [pc, #344]	; (801802c <rmw_init+0x238>)
 8017ed4:	2201      	movs	r2, #1
 8017ed6:	f7f8 fbd1 	bl	801067c <rmw_uxrce_init_client_memory>
 8017eda:	4955      	ldr	r1, [pc, #340]	; (8018030 <rmw_init+0x23c>)
 8017edc:	4855      	ldr	r0, [pc, #340]	; (8018034 <rmw_init+0x240>)
 8017ede:	220f      	movs	r2, #15
 8017ee0:	f7f8 fc6c 	bl	80107bc <rmw_uxrce_init_topic_memory>
 8017ee4:	4954      	ldr	r1, [pc, #336]	; (8018038 <rmw_init+0x244>)
 8017ee6:	4855      	ldr	r0, [pc, #340]	; (801803c <rmw_init+0x248>)
 8017ee8:	2203      	movs	r2, #3
 8017eea:	f7f8 fca7 	bl	801083c <rmw_uxrce_init_init_options_impl_memory>
 8017eee:	4954      	ldr	r1, [pc, #336]	; (8018040 <rmw_init+0x24c>)
 8017ef0:	4854      	ldr	r0, [pc, #336]	; (8018044 <rmw_init+0x250>)
 8017ef2:	2204      	movs	r2, #4
 8017ef4:	f7f8 fcc2 	bl	801087c <rmw_uxrce_init_wait_set_memory>
 8017ef8:	4953      	ldr	r1, [pc, #332]	; (8018048 <rmw_init+0x254>)
 8017efa:	4854      	ldr	r0, [pc, #336]	; (801804c <rmw_init+0x258>)
 8017efc:	2204      	movs	r2, #4
 8017efe:	f7f8 fcdd 	bl	80108bc <rmw_uxrce_init_guard_condition_memory>
 8017f02:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8017f04:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8017f06:	4642      	mov	r2, r8
 8017f08:	f000 fb18 	bl	801853c <rmw_uxrce_transport_init>
 8017f0c:	4607      	mov	r7, r0
 8017f0e:	2800      	cmp	r0, #0
 8017f10:	d158      	bne.n	8017fc4 <rmw_init+0x1d0>
 8017f12:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8017f14:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8017f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f1a:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8017f1e:	4628      	mov	r0, r5
 8017f20:	f7fc f84e 	bl	8013fc0 <uxr_init_session>
 8017f24:	494a      	ldr	r1, [pc, #296]	; (8018050 <rmw_init+0x25c>)
 8017f26:	4622      	mov	r2, r4
 8017f28:	4628      	mov	r0, r5
 8017f2a:	f7fc f86d 	bl	8014008 <uxr_set_topic_callback>
 8017f2e:	4949      	ldr	r1, [pc, #292]	; (8018054 <rmw_init+0x260>)
 8017f30:	463a      	mov	r2, r7
 8017f32:	4628      	mov	r0, r5
 8017f34:	f7fc f864 	bl	8014000 <uxr_set_status_callback>
 8017f38:	4947      	ldr	r1, [pc, #284]	; (8018058 <rmw_init+0x264>)
 8017f3a:	463a      	mov	r2, r7
 8017f3c:	4628      	mov	r0, r5
 8017f3e:	f7fc f867 	bl	8014010 <uxr_set_request_callback>
 8017f42:	4946      	ldr	r1, [pc, #280]	; (801805c <rmw_init+0x268>)
 8017f44:	463a      	mov	r2, r7
 8017f46:	4628      	mov	r0, r5
 8017f48:	f7fc f866 	bl	8014018 <uxr_set_reply_callback>
 8017f4c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017f50:	2304      	movs	r3, #4
 8017f52:	0092      	lsls	r2, r2, #2
 8017f54:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8017f58:	4628      	mov	r0, r5
 8017f5a:	f7fc f89b 	bl	8014094 <uxr_create_input_reliable_stream>
 8017f5e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017f62:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8017f66:	0092      	lsls	r2, r2, #2
 8017f68:	2304      	movs	r3, #4
 8017f6a:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8017f6e:	4628      	mov	r0, r5
 8017f70:	f7fc f868 	bl	8014044 <uxr_create_output_reliable_stream>
 8017f74:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8017f78:	4628      	mov	r0, r5
 8017f7a:	f7fc f885 	bl	8014088 <uxr_create_input_best_effort_stream>
 8017f7e:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8017f82:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8017f86:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017f8a:	3114      	adds	r1, #20
 8017f8c:	4628      	mov	r0, r5
 8017f8e:	f7fc f847 	bl	8014020 <uxr_create_output_best_effort_stream>
 8017f92:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8017f96:	4628      	mov	r0, r5
 8017f98:	f7fc fd98 	bl	8014acc <uxr_create_session>
 8017f9c:	b1f8      	cbz	r0, 8017fde <rmw_init+0x1ea>
 8017f9e:	4638      	mov	r0, r7
 8017fa0:	b003      	add	sp, #12
 8017fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fa6:	270b      	movs	r7, #11
 8017fa8:	4638      	mov	r0, r7
 8017faa:	b003      	add	sp, #12
 8017fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fb0:	2701      	movs	r7, #1
 8017fb2:	4638      	mov	r0, r7
 8017fb4:	b003      	add	sp, #12
 8017fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fba:	270c      	movs	r7, #12
 8017fbc:	4638      	mov	r0, r7
 8017fbe:	b003      	add	sp, #12
 8017fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fc4:	4648      	mov	r0, r9
 8017fc6:	f001 f917 	bl	80191f8 <uxr_close_custom_transport>
 8017fca:	480d      	ldr	r0, [pc, #52]	; (8018000 <rmw_init+0x20c>)
 8017fcc:	4621      	mov	r1, r4
 8017fce:	f7ff fdff 	bl	8017bd0 <put_memory>
 8017fd2:	4638      	mov	r0, r7
 8017fd4:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8017fd8:	b003      	add	sp, #12
 8017fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fde:	4648      	mov	r0, r9
 8017fe0:	f001 f90a 	bl	80191f8 <uxr_close_custom_transport>
 8017fe4:	4806      	ldr	r0, [pc, #24]	; (8018000 <rmw_init+0x20c>)
 8017fe6:	4621      	mov	r1, r4
 8017fe8:	f7ff fdf2 	bl	8017bd0 <put_memory>
 8017fec:	64f7      	str	r7, [r6, #76]	; 0x4c
 8017fee:	2701      	movs	r7, #1
 8017ff0:	e7d5      	b.n	8017f9e <rmw_init+0x1aa>
 8017ff2:	bf00      	nop
 8017ff4:	0801dacc 	.word	0x0801dacc
 8017ff8:	2001cb94 	.word	0x2001cb94
 8017ffc:	20018e40 	.word	0x20018e40
 8018000:	2001cb84 	.word	0x2001cb84
 8018004:	2001a3e8 	.word	0x2001a3e8
 8018008:	20018464 	.word	0x20018464
 801800c:	2001cb54 	.word	0x2001cb54
 8018010:	2001c4e8 	.word	0x2001c4e8
 8018014:	2001cba4 	.word	0x2001cba4
 8018018:	20018508 	.word	0x20018508
 801801c:	2001cb64 	.word	0x2001cb64
 8018020:	20018d78 	.word	0x20018d78
 8018024:	2001cb74 	.word	0x2001cb74
 8018028:	20018298 	.word	0x20018298
 801802c:	20018288 	.word	0x20018288
 8018030:	2001c920 	.word	0x2001c920
 8018034:	2001cbb4 	.word	0x2001cbb4
 8018038:	200183e0 	.word	0x200183e0
 801803c:	2001cb44 	.word	0x2001cb44
 8018040:	2001cac4 	.word	0x2001cac4
 8018044:	2001cbc4 	.word	0x2001cbc4
 8018048:	20018360 	.word	0x20018360
 801804c:	2001cb34 	.word	0x2001cb34
 8018050:	0801adf1 	.word	0x0801adf1
 8018054:	0801ade9 	.word	0x0801ade9
 8018058:	0801ae89 	.word	0x0801ae89
 801805c:	0801af25 	.word	0x0801af25

08018060 <rmw_context_fini>:
 8018060:	4b17      	ldr	r3, [pc, #92]	; (80180c0 <rmw_context_fini+0x60>)
 8018062:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8018064:	b570      	push	{r4, r5, r6, lr}
 8018066:	681c      	ldr	r4, [r3, #0]
 8018068:	4605      	mov	r5, r0
 801806a:	b334      	cbz	r4, 80180ba <rmw_context_fini+0x5a>
 801806c:	2600      	movs	r6, #0
 801806e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8018072:	6902      	ldr	r2, [r0, #16]
 8018074:	428a      	cmp	r2, r1
 8018076:	d018      	beq.n	80180aa <rmw_context_fini+0x4a>
 8018078:	2c00      	cmp	r4, #0
 801807a:	d1f8      	bne.n	801806e <rmw_context_fini+0xe>
 801807c:	b189      	cbz	r1, 80180a2 <rmw_context_fini+0x42>
 801807e:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8018082:	789b      	ldrb	r3, [r3, #2]
 8018084:	2b01      	cmp	r3, #1
 8018086:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 801808a:	bf14      	ite	ne
 801808c:	210a      	movne	r1, #10
 801808e:	2100      	moveq	r1, #0
 8018090:	f7fc fcf4 	bl	8014a7c <uxr_delete_session_retries>
 8018094:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8018096:	f7f8 fc31 	bl	80108fc <rmw_uxrce_fini_session_memory>
 801809a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 801809c:	3010      	adds	r0, #16
 801809e:	f001 f8ab 	bl	80191f8 <uxr_close_custom_transport>
 80180a2:	2300      	movs	r3, #0
 80180a4:	64eb      	str	r3, [r5, #76]	; 0x4c
 80180a6:	4630      	mov	r0, r6
 80180a8:	bd70      	pop	{r4, r5, r6, pc}
 80180aa:	3018      	adds	r0, #24
 80180ac:	f000 f922 	bl	80182f4 <rmw_destroy_node>
 80180b0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80180b2:	4606      	mov	r6, r0
 80180b4:	2c00      	cmp	r4, #0
 80180b6:	d1da      	bne.n	801806e <rmw_context_fini+0xe>
 80180b8:	e7e0      	b.n	801807c <rmw_context_fini+0x1c>
 80180ba:	4626      	mov	r6, r4
 80180bc:	e7de      	b.n	801807c <rmw_context_fini+0x1c>
 80180be:	bf00      	nop
 80180c0:	2001cb54 	.word	0x2001cb54

080180c4 <create_topic>:
 80180c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180c8:	4605      	mov	r5, r0
 80180ca:	b084      	sub	sp, #16
 80180cc:	482c      	ldr	r0, [pc, #176]	; (8018180 <create_topic+0xbc>)
 80180ce:	460f      	mov	r7, r1
 80180d0:	4616      	mov	r6, r2
 80180d2:	f7ff fd6d 	bl	8017bb0 <get_memory>
 80180d6:	4604      	mov	r4, r0
 80180d8:	2800      	cmp	r0, #0
 80180da:	d038      	beq.n	801814e <create_topic+0x8a>
 80180dc:	692b      	ldr	r3, [r5, #16]
 80180de:	6884      	ldr	r4, [r0, #8]
 80180e0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8018188 <create_topic+0xc4>
 80180e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80180e8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80180ec:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 80180f0:	1c42      	adds	r2, r0, #1
 80180f2:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 80180f6:	2102      	movs	r1, #2
 80180f8:	f7fb fea4 	bl	8013e44 <uxr_object_id>
 80180fc:	223c      	movs	r2, #60	; 0x3c
 80180fe:	6120      	str	r0, [r4, #16]
 8018100:	4641      	mov	r1, r8
 8018102:	4638      	mov	r0, r7
 8018104:	f7f8 fd32 	bl	8010b6c <generate_topic_name>
 8018108:	4607      	mov	r7, r0
 801810a:	b320      	cbz	r0, 8018156 <create_topic+0x92>
 801810c:	4f1d      	ldr	r7, [pc, #116]	; (8018184 <create_topic+0xc0>)
 801810e:	4630      	mov	r0, r6
 8018110:	2264      	movs	r2, #100	; 0x64
 8018112:	4639      	mov	r1, r7
 8018114:	f7f8 fcfa 	bl	8010b0c <generate_type_name>
 8018118:	4606      	mov	r6, r0
 801811a:	b320      	cbz	r0, 8018166 <create_topic+0xa2>
 801811c:	6928      	ldr	r0, [r5, #16]
 801811e:	2306      	movs	r3, #6
 8018120:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8018124:	f8cd 8000 	str.w	r8, [sp]
 8018128:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801812c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018130:	696b      	ldr	r3, [r5, #20]
 8018132:	6811      	ldr	r1, [r2, #0]
 8018134:	6922      	ldr	r2, [r4, #16]
 8018136:	f7fb fda9 	bl	8013c8c <uxr_buffer_create_topic_bin>
 801813a:	4602      	mov	r2, r0
 801813c:	6928      	ldr	r0, [r5, #16]
 801813e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8018142:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8018146:	f7f8 fcab 	bl	8010aa0 <run_xrce_session>
 801814a:	4605      	mov	r5, r0
 801814c:	b198      	cbz	r0, 8018176 <create_topic+0xb2>
 801814e:	4620      	mov	r0, r4
 8018150:	b004      	add	sp, #16
 8018152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018156:	4620      	mov	r0, r4
 8018158:	f7f8 fc46 	bl	80109e8 <rmw_uxrce_fini_topic_memory>
 801815c:	463c      	mov	r4, r7
 801815e:	4620      	mov	r0, r4
 8018160:	b004      	add	sp, #16
 8018162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018166:	4620      	mov	r0, r4
 8018168:	f7f8 fc3e 	bl	80109e8 <rmw_uxrce_fini_topic_memory>
 801816c:	4634      	mov	r4, r6
 801816e:	4620      	mov	r0, r4
 8018170:	b004      	add	sp, #16
 8018172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018176:	4620      	mov	r0, r4
 8018178:	f7f8 fc36 	bl	80109e8 <rmw_uxrce_fini_topic_memory>
 801817c:	462c      	mov	r4, r5
 801817e:	e7e6      	b.n	801814e <create_topic+0x8a>
 8018180:	2001cbb4 	.word	0x2001cbb4
 8018184:	2001cc30 	.word	0x2001cc30
 8018188:	2001cbf4 	.word	0x2001cbf4

0801818c <destroy_topic>:
 801818c:	b538      	push	{r3, r4, r5, lr}
 801818e:	6985      	ldr	r5, [r0, #24]
 8018190:	b1d5      	cbz	r5, 80181c8 <destroy_topic+0x3c>
 8018192:	4604      	mov	r4, r0
 8018194:	6928      	ldr	r0, [r5, #16]
 8018196:	6922      	ldr	r2, [r4, #16]
 8018198:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801819c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80181a0:	6819      	ldr	r1, [r3, #0]
 80181a2:	f7fb fcf5 	bl	8013b90 <uxr_buffer_delete_entity>
 80181a6:	4602      	mov	r2, r0
 80181a8:	6928      	ldr	r0, [r5, #16]
 80181aa:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80181ae:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80181b2:	f7f8 fc75 	bl	8010aa0 <run_xrce_session>
 80181b6:	2800      	cmp	r0, #0
 80181b8:	4620      	mov	r0, r4
 80181ba:	bf14      	ite	ne
 80181bc:	2400      	movne	r4, #0
 80181be:	2402      	moveq	r4, #2
 80181c0:	f7f8 fc12 	bl	80109e8 <rmw_uxrce_fini_topic_memory>
 80181c4:	4620      	mov	r0, r4
 80181c6:	bd38      	pop	{r3, r4, r5, pc}
 80181c8:	2401      	movs	r4, #1
 80181ca:	4620      	mov	r0, r4
 80181cc:	bd38      	pop	{r3, r4, r5, pc}
 80181ce:	bf00      	nop

080181d0 <create_node>:
 80181d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181d4:	b083      	sub	sp, #12
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d05f      	beq.n	801829a <create_node+0xca>
 80181da:	4606      	mov	r6, r0
 80181dc:	4835      	ldr	r0, [pc, #212]	; (80182b4 <create_node+0xe4>)
 80181de:	460f      	mov	r7, r1
 80181e0:	4690      	mov	r8, r2
 80181e2:	461d      	mov	r5, r3
 80181e4:	f7ff fce4 	bl	8017bb0 <get_memory>
 80181e8:	2800      	cmp	r0, #0
 80181ea:	d056      	beq.n	801829a <create_node+0xca>
 80181ec:	6884      	ldr	r4, [r0, #8]
 80181ee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80181f0:	6123      	str	r3, [r4, #16]
 80181f2:	f7ff fd01 	bl	8017bf8 <rmw_get_implementation_identifier>
 80181f6:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80181fa:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80181fe:	f8c4 9020 	str.w	r9, [r4, #32]
 8018202:	4630      	mov	r0, r6
 8018204:	f7e7 ffee 	bl	80001e4 <strlen>
 8018208:	1c42      	adds	r2, r0, #1
 801820a:	2a3c      	cmp	r2, #60	; 0x3c
 801820c:	f104 0518 	add.w	r5, r4, #24
 8018210:	d840      	bhi.n	8018294 <create_node+0xc4>
 8018212:	4648      	mov	r0, r9
 8018214:	4631      	mov	r1, r6
 8018216:	f104 0968 	add.w	r9, r4, #104	; 0x68
 801821a:	f003 f99d 	bl	801b558 <memcpy>
 801821e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8018222:	4638      	mov	r0, r7
 8018224:	f7e7 ffde 	bl	80001e4 <strlen>
 8018228:	1c42      	adds	r2, r0, #1
 801822a:	2a3c      	cmp	r2, #60	; 0x3c
 801822c:	d832      	bhi.n	8018294 <create_node+0xc4>
 801822e:	4639      	mov	r1, r7
 8018230:	4648      	mov	r0, r9
 8018232:	f003 f991 	bl	801b558 <memcpy>
 8018236:	6923      	ldr	r3, [r4, #16]
 8018238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801823c:	2101      	movs	r1, #1
 801823e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8018242:	1842      	adds	r2, r0, r1
 8018244:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8018248:	f7fb fdfc 	bl	8013e44 <uxr_object_id>
 801824c:	6160      	str	r0, [r4, #20]
 801824e:	783b      	ldrb	r3, [r7, #0]
 8018250:	2b2f      	cmp	r3, #47	; 0x2f
 8018252:	d127      	bne.n	80182a4 <create_node+0xd4>
 8018254:	787b      	ldrb	r3, [r7, #1]
 8018256:	bb2b      	cbnz	r3, 80182a4 <create_node+0xd4>
 8018258:	4a17      	ldr	r2, [pc, #92]	; (80182b8 <create_node+0xe8>)
 801825a:	4818      	ldr	r0, [pc, #96]	; (80182bc <create_node+0xec>)
 801825c:	4633      	mov	r3, r6
 801825e:	213c      	movs	r1, #60	; 0x3c
 8018260:	f003 fb8c 	bl	801b97c <sniprintf>
 8018264:	6920      	ldr	r0, [r4, #16]
 8018266:	4915      	ldr	r1, [pc, #84]	; (80182bc <create_node+0xec>)
 8018268:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801826c:	9100      	str	r1, [sp, #0]
 801826e:	2106      	movs	r1, #6
 8018270:	9101      	str	r1, [sp, #4]
 8018272:	6811      	ldr	r1, [r2, #0]
 8018274:	6962      	ldr	r2, [r4, #20]
 8018276:	fa1f f388 	uxth.w	r3, r8
 801827a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801827e:	f7fb fcd3 	bl	8013c28 <uxr_buffer_create_participant_bin>
 8018282:	4602      	mov	r2, r0
 8018284:	6920      	ldr	r0, [r4, #16]
 8018286:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801828a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801828e:	f7f8 fc07 	bl	8010aa0 <run_xrce_session>
 8018292:	b918      	cbnz	r0, 801829c <create_node+0xcc>
 8018294:	4628      	mov	r0, r5
 8018296:	f7f8 fb37 	bl	8010908 <rmw_uxrce_fini_node_memory>
 801829a:	2500      	movs	r5, #0
 801829c:	4628      	mov	r0, r5
 801829e:	b003      	add	sp, #12
 80182a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182a4:	4a06      	ldr	r2, [pc, #24]	; (80182c0 <create_node+0xf0>)
 80182a6:	9600      	str	r6, [sp, #0]
 80182a8:	463b      	mov	r3, r7
 80182aa:	213c      	movs	r1, #60	; 0x3c
 80182ac:	4803      	ldr	r0, [pc, #12]	; (80182bc <create_node+0xec>)
 80182ae:	f003 fb65 	bl	801b97c <sniprintf>
 80182b2:	e7d7      	b.n	8018264 <create_node+0x94>
 80182b4:	2001cb54 	.word	0x2001cb54
 80182b8:	0801cdb0 	.word	0x0801cdb0
 80182bc:	2001cc94 	.word	0x2001cc94
 80182c0:	0801d674 	.word	0x0801d674

080182c4 <rmw_create_node>:
 80182c4:	b199      	cbz	r1, 80182ee <rmw_create_node+0x2a>
 80182c6:	780b      	ldrb	r3, [r1, #0]
 80182c8:	468c      	mov	ip, r1
 80182ca:	b183      	cbz	r3, 80182ee <rmw_create_node+0x2a>
 80182cc:	b410      	push	{r4}
 80182ce:	4614      	mov	r4, r2
 80182d0:	b14a      	cbz	r2, 80182e6 <rmw_create_node+0x22>
 80182d2:	7813      	ldrb	r3, [r2, #0]
 80182d4:	b13b      	cbz	r3, 80182e6 <rmw_create_node+0x22>
 80182d6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80182d8:	4603      	mov	r3, r0
 80182da:	4621      	mov	r1, r4
 80182dc:	4660      	mov	r0, ip
 80182de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80182e2:	f7ff bf75 	b.w	80181d0 <create_node>
 80182e6:	2000      	movs	r0, #0
 80182e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80182ec:	4770      	bx	lr
 80182ee:	2000      	movs	r0, #0
 80182f0:	4770      	bx	lr
 80182f2:	bf00      	nop

080182f4 <rmw_destroy_node>:
 80182f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182f6:	2800      	cmp	r0, #0
 80182f8:	d066      	beq.n	80183c8 <rmw_destroy_node+0xd4>
 80182fa:	4607      	mov	r7, r0
 80182fc:	6800      	ldr	r0, [r0, #0]
 80182fe:	b128      	cbz	r0, 801830c <rmw_destroy_node+0x18>
 8018300:	4b34      	ldr	r3, [pc, #208]	; (80183d4 <rmw_destroy_node+0xe0>)
 8018302:	6819      	ldr	r1, [r3, #0]
 8018304:	f7e7 ff64 	bl	80001d0 <strcmp>
 8018308:	2800      	cmp	r0, #0
 801830a:	d15d      	bne.n	80183c8 <rmw_destroy_node+0xd4>
 801830c:	687c      	ldr	r4, [r7, #4]
 801830e:	2c00      	cmp	r4, #0
 8018310:	d05a      	beq.n	80183c8 <rmw_destroy_node+0xd4>
 8018312:	4b31      	ldr	r3, [pc, #196]	; (80183d8 <rmw_destroy_node+0xe4>)
 8018314:	681d      	ldr	r5, [r3, #0]
 8018316:	2d00      	cmp	r5, #0
 8018318:	d059      	beq.n	80183ce <rmw_destroy_node+0xda>
 801831a:	2600      	movs	r6, #0
 801831c:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8018320:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8018324:	429c      	cmp	r4, r3
 8018326:	d047      	beq.n	80183b8 <rmw_destroy_node+0xc4>
 8018328:	2d00      	cmp	r5, #0
 801832a:	d1f7      	bne.n	801831c <rmw_destroy_node+0x28>
 801832c:	4b2b      	ldr	r3, [pc, #172]	; (80183dc <rmw_destroy_node+0xe8>)
 801832e:	681d      	ldr	r5, [r3, #0]
 8018330:	b15d      	cbz	r5, 801834a <rmw_destroy_node+0x56>
 8018332:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8018336:	6a0b      	ldr	r3, [r1, #32]
 8018338:	429c      	cmp	r4, r3
 801833a:	d1f9      	bne.n	8018330 <rmw_destroy_node+0x3c>
 801833c:	317c      	adds	r1, #124	; 0x7c
 801833e:	4638      	mov	r0, r7
 8018340:	f000 f89c 	bl	801847c <rmw_destroy_subscription>
 8018344:	4606      	mov	r6, r0
 8018346:	2d00      	cmp	r5, #0
 8018348:	d1f3      	bne.n	8018332 <rmw_destroy_node+0x3e>
 801834a:	4b25      	ldr	r3, [pc, #148]	; (80183e0 <rmw_destroy_node+0xec>)
 801834c:	681d      	ldr	r5, [r3, #0]
 801834e:	b15d      	cbz	r5, 8018368 <rmw_destroy_node+0x74>
 8018350:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8018354:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8018356:	429c      	cmp	r4, r3
 8018358:	d1f9      	bne.n	801834e <rmw_destroy_node+0x5a>
 801835a:	317c      	adds	r1, #124	; 0x7c
 801835c:	4638      	mov	r0, r7
 801835e:	f000 f849 	bl	80183f4 <rmw_destroy_service>
 8018362:	4606      	mov	r6, r0
 8018364:	2d00      	cmp	r5, #0
 8018366:	d1f3      	bne.n	8018350 <rmw_destroy_node+0x5c>
 8018368:	4b1e      	ldr	r3, [pc, #120]	; (80183e4 <rmw_destroy_node+0xf0>)
 801836a:	681d      	ldr	r5, [r3, #0]
 801836c:	b15d      	cbz	r5, 8018386 <rmw_destroy_node+0x92>
 801836e:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8018372:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8018374:	429c      	cmp	r4, r3
 8018376:	d1f9      	bne.n	801836c <rmw_destroy_node+0x78>
 8018378:	317c      	adds	r1, #124	; 0x7c
 801837a:	4638      	mov	r0, r7
 801837c:	f002 fe1c 	bl	801afb8 <rmw_destroy_client>
 8018380:	4606      	mov	r6, r0
 8018382:	2d00      	cmp	r5, #0
 8018384:	d1f3      	bne.n	801836e <rmw_destroy_node+0x7a>
 8018386:	6920      	ldr	r0, [r4, #16]
 8018388:	6962      	ldr	r2, [r4, #20]
 801838a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801838e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018392:	6819      	ldr	r1, [r3, #0]
 8018394:	f7fb fbfc 	bl	8013b90 <uxr_buffer_delete_entity>
 8018398:	4602      	mov	r2, r0
 801839a:	6920      	ldr	r0, [r4, #16]
 801839c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80183a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80183a4:	f7f8 fb7c 	bl	8010aa0 <run_xrce_session>
 80183a8:	2800      	cmp	r0, #0
 80183aa:	bf08      	it	eq
 80183ac:	2602      	moveq	r6, #2
 80183ae:	4638      	mov	r0, r7
 80183b0:	f7f8 faaa 	bl	8010908 <rmw_uxrce_fini_node_memory>
 80183b4:	4630      	mov	r0, r6
 80183b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183b8:	3184      	adds	r1, #132	; 0x84
 80183ba:	4638      	mov	r0, r7
 80183bc:	f7f8 f8ec 	bl	8010598 <rmw_destroy_publisher>
 80183c0:	4606      	mov	r6, r0
 80183c2:	2d00      	cmp	r5, #0
 80183c4:	d1aa      	bne.n	801831c <rmw_destroy_node+0x28>
 80183c6:	e7b1      	b.n	801832c <rmw_destroy_node+0x38>
 80183c8:	2601      	movs	r6, #1
 80183ca:	4630      	mov	r0, r6
 80183cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183ce:	462e      	mov	r6, r5
 80183d0:	e7ac      	b.n	801832c <rmw_destroy_node+0x38>
 80183d2:	bf00      	nop
 80183d4:	0801dacc 	.word	0x0801dacc
 80183d8:	2001cb64 	.word	0x2001cb64
 80183dc:	2001cba4 	.word	0x2001cba4
 80183e0:	2001cb74 	.word	0x2001cb74
 80183e4:	20018288 	.word	0x20018288

080183e8 <rmw_node_get_graph_guard_condition>:
 80183e8:	6843      	ldr	r3, [r0, #4]
 80183ea:	6918      	ldr	r0, [r3, #16]
 80183ec:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80183f0:	4770      	bx	lr
 80183f2:	bf00      	nop

080183f4 <rmw_destroy_service>:
 80183f4:	b570      	push	{r4, r5, r6, lr}
 80183f6:	b128      	cbz	r0, 8018404 <rmw_destroy_service+0x10>
 80183f8:	4604      	mov	r4, r0
 80183fa:	6800      	ldr	r0, [r0, #0]
 80183fc:	460d      	mov	r5, r1
 80183fe:	f7f8 fbcf 	bl	8010ba0 <is_uxrce_rmw_identifier_valid>
 8018402:	b910      	cbnz	r0, 801840a <rmw_destroy_service+0x16>
 8018404:	2401      	movs	r4, #1
 8018406:	4620      	mov	r0, r4
 8018408:	bd70      	pop	{r4, r5, r6, pc}
 801840a:	6863      	ldr	r3, [r4, #4]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d0f9      	beq.n	8018404 <rmw_destroy_service+0x10>
 8018410:	2d00      	cmp	r5, #0
 8018412:	d0f7      	beq.n	8018404 <rmw_destroy_service+0x10>
 8018414:	6828      	ldr	r0, [r5, #0]
 8018416:	f7f8 fbc3 	bl	8010ba0 <is_uxrce_rmw_identifier_valid>
 801841a:	2800      	cmp	r0, #0
 801841c:	d0f2      	beq.n	8018404 <rmw_destroy_service+0x10>
 801841e:	686e      	ldr	r6, [r5, #4]
 8018420:	2e00      	cmp	r6, #0
 8018422:	d0ef      	beq.n	8018404 <rmw_destroy_service+0x10>
 8018424:	6864      	ldr	r4, [r4, #4]
 8018426:	6932      	ldr	r2, [r6, #16]
 8018428:	6920      	ldr	r0, [r4, #16]
 801842a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801842e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018432:	6819      	ldr	r1, [r3, #0]
 8018434:	f001 fc1a 	bl	8019c6c <uxr_buffer_cancel_data>
 8018438:	4602      	mov	r2, r0
 801843a:	6920      	ldr	r0, [r4, #16]
 801843c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018440:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8018444:	f7f8 fb2c 	bl	8010aa0 <run_xrce_session>
 8018448:	6920      	ldr	r0, [r4, #16]
 801844a:	6932      	ldr	r2, [r6, #16]
 801844c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018450:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018454:	6819      	ldr	r1, [r3, #0]
 8018456:	f7fb fb9b 	bl	8013b90 <uxr_buffer_delete_entity>
 801845a:	4602      	mov	r2, r0
 801845c:	6920      	ldr	r0, [r4, #16]
 801845e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018462:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8018466:	f7f8 fb1b 	bl	8010aa0 <run_xrce_session>
 801846a:	2800      	cmp	r0, #0
 801846c:	4628      	mov	r0, r5
 801846e:	bf14      	ite	ne
 8018470:	2400      	movne	r4, #0
 8018472:	2402      	moveq	r4, #2
 8018474:	f7f8 fa8c 	bl	8010990 <rmw_uxrce_fini_service_memory>
 8018478:	e7c5      	b.n	8018406 <rmw_destroy_service+0x12>
 801847a:	bf00      	nop

0801847c <rmw_destroy_subscription>:
 801847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801847e:	b128      	cbz	r0, 801848c <rmw_destroy_subscription+0x10>
 8018480:	4604      	mov	r4, r0
 8018482:	6800      	ldr	r0, [r0, #0]
 8018484:	460d      	mov	r5, r1
 8018486:	f7f8 fb8b 	bl	8010ba0 <is_uxrce_rmw_identifier_valid>
 801848a:	b910      	cbnz	r0, 8018492 <rmw_destroy_subscription+0x16>
 801848c:	2401      	movs	r4, #1
 801848e:	4620      	mov	r0, r4
 8018490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018492:	6863      	ldr	r3, [r4, #4]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d0f9      	beq.n	801848c <rmw_destroy_subscription+0x10>
 8018498:	2d00      	cmp	r5, #0
 801849a:	d0f7      	beq.n	801848c <rmw_destroy_subscription+0x10>
 801849c:	6828      	ldr	r0, [r5, #0]
 801849e:	f7f8 fb7f 	bl	8010ba0 <is_uxrce_rmw_identifier_valid>
 80184a2:	2800      	cmp	r0, #0
 80184a4:	d0f2      	beq.n	801848c <rmw_destroy_subscription+0x10>
 80184a6:	686c      	ldr	r4, [r5, #4]
 80184a8:	2c00      	cmp	r4, #0
 80184aa:	d0ef      	beq.n	801848c <rmw_destroy_subscription+0x10>
 80184ac:	6a26      	ldr	r6, [r4, #32]
 80184ae:	6962      	ldr	r2, [r4, #20]
 80184b0:	6930      	ldr	r0, [r6, #16]
 80184b2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80184b6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80184ba:	6819      	ldr	r1, [r3, #0]
 80184bc:	f001 fbd6 	bl	8019c6c <uxr_buffer_cancel_data>
 80184c0:	4602      	mov	r2, r0
 80184c2:	6930      	ldr	r0, [r6, #16]
 80184c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80184c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80184cc:	f7f8 fae8 	bl	8010aa0 <run_xrce_session>
 80184d0:	69e0      	ldr	r0, [r4, #28]
 80184d2:	f7ff fe5b 	bl	801818c <destroy_topic>
 80184d6:	6a23      	ldr	r3, [r4, #32]
 80184d8:	6962      	ldr	r2, [r4, #20]
 80184da:	6918      	ldr	r0, [r3, #16]
 80184dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80184e0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80184e4:	6819      	ldr	r1, [r3, #0]
 80184e6:	f7fb fb53 	bl	8013b90 <uxr_buffer_delete_entity>
 80184ea:	6a23      	ldr	r3, [r4, #32]
 80184ec:	6922      	ldr	r2, [r4, #16]
 80184ee:	691b      	ldr	r3, [r3, #16]
 80184f0:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 80184f4:	4604      	mov	r4, r0
 80184f6:	6809      	ldr	r1, [r1, #0]
 80184f8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80184fc:	f7fb fb48 	bl	8013b90 <uxr_buffer_delete_entity>
 8018500:	6937      	ldr	r7, [r6, #16]
 8018502:	4622      	mov	r2, r4
 8018504:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8018508:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801850c:	4604      	mov	r4, r0
 801850e:	4638      	mov	r0, r7
 8018510:	f7f8 fac6 	bl	8010aa0 <run_xrce_session>
 8018514:	6936      	ldr	r6, [r6, #16]
 8018516:	4622      	mov	r2, r4
 8018518:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 801851c:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8018520:	4604      	mov	r4, r0
 8018522:	4630      	mov	r0, r6
 8018524:	f7f8 fabc 	bl	8010aa0 <run_xrce_session>
 8018528:	b12c      	cbz	r4, 8018536 <rmw_destroy_subscription+0xba>
 801852a:	b120      	cbz	r0, 8018536 <rmw_destroy_subscription+0xba>
 801852c:	2400      	movs	r4, #0
 801852e:	4628      	mov	r0, r5
 8018530:	f7f8 fa18 	bl	8010964 <rmw_uxrce_fini_subscription_memory>
 8018534:	e7ab      	b.n	801848e <rmw_destroy_subscription+0x12>
 8018536:	2402      	movs	r4, #2
 8018538:	e7f9      	b.n	801852e <rmw_destroy_subscription+0xb2>
 801853a:	bf00      	nop

0801853c <rmw_uxrce_transport_init>:
 801853c:	b508      	push	{r3, lr}
 801853e:	b108      	cbz	r0, 8018544 <rmw_uxrce_transport_init+0x8>
 8018540:	f100 0210 	add.w	r2, r0, #16
 8018544:	b139      	cbz	r1, 8018556 <rmw_uxrce_transport_init+0x1a>
 8018546:	6949      	ldr	r1, [r1, #20]
 8018548:	4610      	mov	r0, r2
 801854a:	f000 fe21 	bl	8019190 <uxr_init_custom_transport>
 801854e:	f080 0001 	eor.w	r0, r0, #1
 8018552:	b2c0      	uxtb	r0, r0
 8018554:	bd08      	pop	{r3, pc}
 8018556:	4b04      	ldr	r3, [pc, #16]	; (8018568 <rmw_uxrce_transport_init+0x2c>)
 8018558:	4610      	mov	r0, r2
 801855a:	6859      	ldr	r1, [r3, #4]
 801855c:	f000 fe18 	bl	8019190 <uxr_init_custom_transport>
 8018560:	f080 0001 	eor.w	r0, r0, #1
 8018564:	b2c0      	uxtb	r0, r0
 8018566:	bd08      	pop	{r3, pc}
 8018568:	2001826c 	.word	0x2001826c

0801856c <rmw_uros_epoch_nanos>:
 801856c:	4b05      	ldr	r3, [pc, #20]	; (8018584 <rmw_uros_epoch_nanos+0x18>)
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	b123      	cbz	r3, 801857c <rmw_uros_epoch_nanos+0x10>
 8018572:	6898      	ldr	r0, [r3, #8]
 8018574:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018578:	f7fb bda8 	b.w	80140cc <uxr_epoch_nanos>
 801857c:	2000      	movs	r0, #0
 801857e:	2100      	movs	r1, #0
 8018580:	4770      	bx	lr
 8018582:	bf00      	nop
 8018584:	2001cb84 	.word	0x2001cb84

08018588 <rosidl_runtime_c__float__Sequence__init>:
 8018588:	b530      	push	{r4, r5, lr}
 801858a:	4604      	mov	r4, r0
 801858c:	b087      	sub	sp, #28
 801858e:	b130      	cbz	r0, 801859e <rosidl_runtime_c__float__Sequence__init+0x16>
 8018590:	460d      	mov	r5, r1
 8018592:	b931      	cbnz	r1, 80185a2 <rosidl_runtime_c__float__Sequence__init+0x1a>
 8018594:	4608      	mov	r0, r1
 8018596:	e9c4 0500 	strd	r0, r5, [r4]
 801859a:	60a5      	str	r5, [r4, #8]
 801859c:	2001      	movs	r0, #1
 801859e:	b007      	add	sp, #28
 80185a0:	bd30      	pop	{r4, r5, pc}
 80185a2:	a801      	add	r0, sp, #4
 80185a4:	f7f7 fe4a 	bl	801023c <rcutils_get_default_allocator>
 80185a8:	9b01      	ldr	r3, [sp, #4]
 80185aa:	9905      	ldr	r1, [sp, #20]
 80185ac:	00a8      	lsls	r0, r5, #2
 80185ae:	4798      	blx	r3
 80185b0:	2800      	cmp	r0, #0
 80185b2:	d1f0      	bne.n	8018596 <rosidl_runtime_c__float__Sequence__init+0xe>
 80185b4:	e7f3      	b.n	801859e <rosidl_runtime_c__float__Sequence__init+0x16>
 80185b6:	bf00      	nop

080185b8 <rosidl_runtime_c__float__Sequence__fini>:
 80185b8:	b188      	cbz	r0, 80185de <rosidl_runtime_c__float__Sequence__fini+0x26>
 80185ba:	b510      	push	{r4, lr}
 80185bc:	6803      	ldr	r3, [r0, #0]
 80185be:	b086      	sub	sp, #24
 80185c0:	4604      	mov	r4, r0
 80185c2:	b153      	cbz	r3, 80185da <rosidl_runtime_c__float__Sequence__fini+0x22>
 80185c4:	a801      	add	r0, sp, #4
 80185c6:	f7f7 fe39 	bl	801023c <rcutils_get_default_allocator>
 80185ca:	9b02      	ldr	r3, [sp, #8]
 80185cc:	9905      	ldr	r1, [sp, #20]
 80185ce:	6820      	ldr	r0, [r4, #0]
 80185d0:	4798      	blx	r3
 80185d2:	2300      	movs	r3, #0
 80185d4:	e9c4 3300 	strd	r3, r3, [r4]
 80185d8:	60a3      	str	r3, [r4, #8]
 80185da:	b006      	add	sp, #24
 80185dc:	bd10      	pop	{r4, pc}
 80185de:	4770      	bx	lr

080185e0 <rosidl_runtime_c__double__Sequence__init>:
 80185e0:	b530      	push	{r4, r5, lr}
 80185e2:	4604      	mov	r4, r0
 80185e4:	b087      	sub	sp, #28
 80185e6:	b130      	cbz	r0, 80185f6 <rosidl_runtime_c__double__Sequence__init+0x16>
 80185e8:	460d      	mov	r5, r1
 80185ea:	b931      	cbnz	r1, 80185fa <rosidl_runtime_c__double__Sequence__init+0x1a>
 80185ec:	4608      	mov	r0, r1
 80185ee:	e9c4 0500 	strd	r0, r5, [r4]
 80185f2:	60a5      	str	r5, [r4, #8]
 80185f4:	2001      	movs	r0, #1
 80185f6:	b007      	add	sp, #28
 80185f8:	bd30      	pop	{r4, r5, pc}
 80185fa:	a801      	add	r0, sp, #4
 80185fc:	f7f7 fe1e 	bl	801023c <rcutils_get_default_allocator>
 8018600:	9b01      	ldr	r3, [sp, #4]
 8018602:	9905      	ldr	r1, [sp, #20]
 8018604:	00e8      	lsls	r0, r5, #3
 8018606:	4798      	blx	r3
 8018608:	2800      	cmp	r0, #0
 801860a:	d1f0      	bne.n	80185ee <rosidl_runtime_c__double__Sequence__init+0xe>
 801860c:	e7f3      	b.n	80185f6 <rosidl_runtime_c__double__Sequence__init+0x16>
 801860e:	bf00      	nop

08018610 <rosidl_runtime_c__double__Sequence__fini>:
 8018610:	b188      	cbz	r0, 8018636 <rosidl_runtime_c__double__Sequence__fini+0x26>
 8018612:	b510      	push	{r4, lr}
 8018614:	6803      	ldr	r3, [r0, #0]
 8018616:	b086      	sub	sp, #24
 8018618:	4604      	mov	r4, r0
 801861a:	b153      	cbz	r3, 8018632 <rosidl_runtime_c__double__Sequence__fini+0x22>
 801861c:	a801      	add	r0, sp, #4
 801861e:	f7f7 fe0d 	bl	801023c <rcutils_get_default_allocator>
 8018622:	9b02      	ldr	r3, [sp, #8]
 8018624:	9905      	ldr	r1, [sp, #20]
 8018626:	6820      	ldr	r0, [r4, #0]
 8018628:	4798      	blx	r3
 801862a:	2300      	movs	r3, #0
 801862c:	e9c4 3300 	strd	r3, r3, [r4]
 8018630:	60a3      	str	r3, [r4, #8]
 8018632:	b006      	add	sp, #24
 8018634:	bd10      	pop	{r4, pc}
 8018636:	4770      	bx	lr

08018638 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8018638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801863c:	6805      	ldr	r5, [r0, #0]
 801863e:	4604      	mov	r4, r0
 8018640:	4628      	mov	r0, r5
 8018642:	460e      	mov	r6, r1
 8018644:	f7e7 fdc4 	bl	80001d0 <strcmp>
 8018648:	b1c8      	cbz	r0, 801867e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801864a:	4b11      	ldr	r3, [pc, #68]	; (8018690 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	429d      	cmp	r5, r3
 8018650:	d112      	bne.n	8018678 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8018652:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018656:	f8d8 4000 	ldr.w	r4, [r8]
 801865a:	b16c      	cbz	r4, 8018678 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801865c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018660:	2700      	movs	r7, #0
 8018662:	3d04      	subs	r5, #4
 8018664:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8018668:	4631      	mov	r1, r6
 801866a:	f7e7 fdb1 	bl	80001d0 <strcmp>
 801866e:	00bb      	lsls	r3, r7, #2
 8018670:	b140      	cbz	r0, 8018684 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8018672:	3701      	adds	r7, #1
 8018674:	42bc      	cmp	r4, r7
 8018676:	d1f5      	bne.n	8018664 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8018678:	2000      	movs	r0, #0
 801867a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801867e:	4620      	mov	r0, r4
 8018680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018684:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801868c:	58d3      	ldr	r3, [r2, r3]
 801868e:	4718      	bx	r3
 8018690:	20000b20 	.word	0x20000b20

08018694 <sensor_msgs__msg__BatteryState__init>:
 8018694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018698:	4605      	mov	r5, r0
 801869a:	2800      	cmp	r0, #0
 801869c:	d048      	beq.n	8018730 <sensor_msgs__msg__BatteryState__init+0x9c>
 801869e:	f000 f8cd 	bl	801883c <std_msgs__msg__Header__init>
 80186a2:	4604      	mov	r4, r0
 80186a4:	b370      	cbz	r0, 8018704 <sensor_msgs__msg__BatteryState__init+0x70>
 80186a6:	f105 0634 	add.w	r6, r5, #52	; 0x34
 80186aa:	2100      	movs	r1, #0
 80186ac:	4630      	mov	r0, r6
 80186ae:	f7ff ff6b 	bl	8018588 <rosidl_runtime_c__float__Sequence__init>
 80186b2:	4604      	mov	r4, r0
 80186b4:	2800      	cmp	r0, #0
 80186b6:	d047      	beq.n	8018748 <sensor_msgs__msg__BatteryState__init+0xb4>
 80186b8:	f105 0740 	add.w	r7, r5, #64	; 0x40
 80186bc:	2100      	movs	r1, #0
 80186be:	4638      	mov	r0, r7
 80186c0:	f7ff ff62 	bl	8018588 <rosidl_runtime_c__float__Sequence__init>
 80186c4:	4604      	mov	r4, r0
 80186c6:	b3b8      	cbz	r0, 8018738 <sensor_msgs__msg__BatteryState__init+0xa4>
 80186c8:	f105 084c 	add.w	r8, r5, #76	; 0x4c
 80186cc:	4640      	mov	r0, r8
 80186ce:	f002 fcdf 	bl	801b090 <rosidl_runtime_c__String__init>
 80186d2:	4604      	mov	r4, r0
 80186d4:	b3e8      	cbz	r0, 8018752 <sensor_msgs__msg__BatteryState__init+0xbe>
 80186d6:	f105 0958 	add.w	r9, r5, #88	; 0x58
 80186da:	4648      	mov	r0, r9
 80186dc:	f002 fcd8 	bl	801b090 <rosidl_runtime_c__String__init>
 80186e0:	4604      	mov	r4, r0
 80186e2:	bb10      	cbnz	r0, 801872a <sensor_msgs__msg__BatteryState__init+0x96>
 80186e4:	4628      	mov	r0, r5
 80186e6:	f000 f8cd 	bl	8018884 <std_msgs__msg__Header__fini>
 80186ea:	4630      	mov	r0, r6
 80186ec:	f7ff ff64 	bl	80185b8 <rosidl_runtime_c__float__Sequence__fini>
 80186f0:	4638      	mov	r0, r7
 80186f2:	f7ff ff61 	bl	80185b8 <rosidl_runtime_c__float__Sequence__fini>
 80186f6:	4640      	mov	r0, r8
 80186f8:	f002 fce0 	bl	801b0bc <rosidl_runtime_c__String__fini>
 80186fc:	4648      	mov	r0, r9
 80186fe:	f002 fcdd 	bl	801b0bc <rosidl_runtime_c__String__fini>
 8018702:	e012      	b.n	801872a <sensor_msgs__msg__BatteryState__init+0x96>
 8018704:	4628      	mov	r0, r5
 8018706:	f000 f8bd 	bl	8018884 <std_msgs__msg__Header__fini>
 801870a:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801870e:	f7ff ff53 	bl	80185b8 <rosidl_runtime_c__float__Sequence__fini>
 8018712:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8018716:	f7ff ff4f 	bl	80185b8 <rosidl_runtime_c__float__Sequence__fini>
 801871a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 801871e:	f002 fccd 	bl	801b0bc <rosidl_runtime_c__String__fini>
 8018722:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8018726:	f002 fcc9 	bl	801b0bc <rosidl_runtime_c__String__fini>
 801872a:	4620      	mov	r0, r4
 801872c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018730:	4604      	mov	r4, r0
 8018732:	4620      	mov	r0, r4
 8018734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018738:	4628      	mov	r0, r5
 801873a:	f000 f8a3 	bl	8018884 <std_msgs__msg__Header__fini>
 801873e:	4630      	mov	r0, r6
 8018740:	f7ff ff3a 	bl	80185b8 <rosidl_runtime_c__float__Sequence__fini>
 8018744:	4638      	mov	r0, r7
 8018746:	e7e6      	b.n	8018716 <sensor_msgs__msg__BatteryState__init+0x82>
 8018748:	4628      	mov	r0, r5
 801874a:	f000 f89b 	bl	8018884 <std_msgs__msg__Header__fini>
 801874e:	4630      	mov	r0, r6
 8018750:	e7dd      	b.n	801870e <sensor_msgs__msg__BatteryState__init+0x7a>
 8018752:	4628      	mov	r0, r5
 8018754:	f000 f896 	bl	8018884 <std_msgs__msg__Header__fini>
 8018758:	4630      	mov	r0, r6
 801875a:	f7ff ff2d 	bl	80185b8 <rosidl_runtime_c__float__Sequence__fini>
 801875e:	4638      	mov	r0, r7
 8018760:	f7ff ff2a 	bl	80185b8 <rosidl_runtime_c__float__Sequence__fini>
 8018764:	4640      	mov	r0, r8
 8018766:	f002 fca9 	bl	801b0bc <rosidl_runtime_c__String__fini>
 801876a:	f105 0058 	add.w	r0, r5, #88	; 0x58
 801876e:	f002 fca5 	bl	801b0bc <rosidl_runtime_c__String__fini>
 8018772:	e7da      	b.n	801872a <sensor_msgs__msg__BatteryState__init+0x96>

08018774 <sensor_msgs__msg__BatteryState__fini>:
 8018774:	b1a8      	cbz	r0, 80187a2 <sensor_msgs__msg__BatteryState__fini+0x2e>
 8018776:	b510      	push	{r4, lr}
 8018778:	4604      	mov	r4, r0
 801877a:	f000 f883 	bl	8018884 <std_msgs__msg__Header__fini>
 801877e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8018782:	f7ff ff19 	bl	80185b8 <rosidl_runtime_c__float__Sequence__fini>
 8018786:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801878a:	f7ff ff15 	bl	80185b8 <rosidl_runtime_c__float__Sequence__fini>
 801878e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8018792:	f002 fc93 	bl	801b0bc <rosidl_runtime_c__String__fini>
 8018796:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801879a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801879e:	f002 bc8d 	b.w	801b0bc <rosidl_runtime_c__String__fini>
 80187a2:	4770      	bx	lr

080187a4 <sensor_msgs__msg__Temperature__init>:
 80187a4:	b538      	push	{r3, r4, r5, lr}
 80187a6:	4604      	mov	r4, r0
 80187a8:	b128      	cbz	r0, 80187b6 <sensor_msgs__msg__Temperature__init+0x12>
 80187aa:	f000 f847 	bl	801883c <std_msgs__msg__Header__init>
 80187ae:	4605      	mov	r5, r0
 80187b0:	b120      	cbz	r0, 80187bc <sensor_msgs__msg__Temperature__init+0x18>
 80187b2:	4628      	mov	r0, r5
 80187b4:	bd38      	pop	{r3, r4, r5, pc}
 80187b6:	4605      	mov	r5, r0
 80187b8:	4628      	mov	r0, r5
 80187ba:	bd38      	pop	{r3, r4, r5, pc}
 80187bc:	4620      	mov	r0, r4
 80187be:	f000 f861 	bl	8018884 <std_msgs__msg__Header__fini>
 80187c2:	4628      	mov	r0, r5
 80187c4:	bd38      	pop	{r3, r4, r5, pc}
 80187c6:	bf00      	nop

080187c8 <sensor_msgs__msg__Temperature__fini>:
 80187c8:	b108      	cbz	r0, 80187ce <sensor_msgs__msg__Temperature__fini+0x6>
 80187ca:	f000 b85b 	b.w	8018884 <std_msgs__msg__Header__fini>
 80187ce:	4770      	bx	lr

080187d0 <std_msgs__msg__ColorRGBA__init>:
 80187d0:	3800      	subs	r0, #0
 80187d2:	bf18      	it	ne
 80187d4:	2001      	movne	r0, #1
 80187d6:	4770      	bx	lr

080187d8 <std_msgs__msg__ColorRGBA__fini>:
 80187d8:	4770      	bx	lr
 80187da:	bf00      	nop

080187dc <std_msgs__msg__Float64MultiArray__init>:
 80187dc:	b570      	push	{r4, r5, r6, lr}
 80187de:	4605      	mov	r5, r0
 80187e0:	b1b0      	cbz	r0, 8018810 <std_msgs__msg__Float64MultiArray__init+0x34>
 80187e2:	f000 f8f1 	bl	80189c8 <std_msgs__msg__MultiArrayLayout__init>
 80187e6:	4604      	mov	r4, r0
 80187e8:	b148      	cbz	r0, 80187fe <std_msgs__msg__Float64MultiArray__init+0x22>
 80187ea:	f105 0610 	add.w	r6, r5, #16
 80187ee:	2100      	movs	r1, #0
 80187f0:	4630      	mov	r0, r6
 80187f2:	f7ff fef5 	bl	80185e0 <rosidl_runtime_c__double__Sequence__init>
 80187f6:	4604      	mov	r4, r0
 80187f8:	b168      	cbz	r0, 8018816 <std_msgs__msg__Float64MultiArray__init+0x3a>
 80187fa:	4620      	mov	r0, r4
 80187fc:	bd70      	pop	{r4, r5, r6, pc}
 80187fe:	4628      	mov	r0, r5
 8018800:	f000 f8f4 	bl	80189ec <std_msgs__msg__MultiArrayLayout__fini>
 8018804:	f105 0010 	add.w	r0, r5, #16
 8018808:	f7ff ff02 	bl	8018610 <rosidl_runtime_c__double__Sequence__fini>
 801880c:	4620      	mov	r0, r4
 801880e:	bd70      	pop	{r4, r5, r6, pc}
 8018810:	4604      	mov	r4, r0
 8018812:	4620      	mov	r0, r4
 8018814:	bd70      	pop	{r4, r5, r6, pc}
 8018816:	4628      	mov	r0, r5
 8018818:	f000 f8e8 	bl	80189ec <std_msgs__msg__MultiArrayLayout__fini>
 801881c:	4630      	mov	r0, r6
 801881e:	f7ff fef7 	bl	8018610 <rosidl_runtime_c__double__Sequence__fini>
 8018822:	e7ea      	b.n	80187fa <std_msgs__msg__Float64MultiArray__init+0x1e>

08018824 <std_msgs__msg__Float64MultiArray__fini>:
 8018824:	b148      	cbz	r0, 801883a <std_msgs__msg__Float64MultiArray__fini+0x16>
 8018826:	b510      	push	{r4, lr}
 8018828:	4604      	mov	r4, r0
 801882a:	f000 f8df 	bl	80189ec <std_msgs__msg__MultiArrayLayout__fini>
 801882e:	f104 0010 	add.w	r0, r4, #16
 8018832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018836:	f7ff beeb 	b.w	8018610 <rosidl_runtime_c__double__Sequence__fini>
 801883a:	4770      	bx	lr

0801883c <std_msgs__msg__Header__init>:
 801883c:	b570      	push	{r4, r5, r6, lr}
 801883e:	4605      	mov	r5, r0
 8018840:	b1a8      	cbz	r0, 801886e <std_msgs__msg__Header__init+0x32>
 8018842:	f000 f97d 	bl	8018b40 <builtin_interfaces__msg__Time__init>
 8018846:	4604      	mov	r4, r0
 8018848:	b140      	cbz	r0, 801885c <std_msgs__msg__Header__init+0x20>
 801884a:	f105 0608 	add.w	r6, r5, #8
 801884e:	4630      	mov	r0, r6
 8018850:	f002 fc1e 	bl	801b090 <rosidl_runtime_c__String__init>
 8018854:	4604      	mov	r4, r0
 8018856:	b168      	cbz	r0, 8018874 <std_msgs__msg__Header__init+0x38>
 8018858:	4620      	mov	r0, r4
 801885a:	bd70      	pop	{r4, r5, r6, pc}
 801885c:	4628      	mov	r0, r5
 801885e:	f000 f973 	bl	8018b48 <builtin_interfaces__msg__Time__fini>
 8018862:	f105 0008 	add.w	r0, r5, #8
 8018866:	f002 fc29 	bl	801b0bc <rosidl_runtime_c__String__fini>
 801886a:	4620      	mov	r0, r4
 801886c:	bd70      	pop	{r4, r5, r6, pc}
 801886e:	4604      	mov	r4, r0
 8018870:	4620      	mov	r0, r4
 8018872:	bd70      	pop	{r4, r5, r6, pc}
 8018874:	4628      	mov	r0, r5
 8018876:	f000 f967 	bl	8018b48 <builtin_interfaces__msg__Time__fini>
 801887a:	4630      	mov	r0, r6
 801887c:	f002 fc1e 	bl	801b0bc <rosidl_runtime_c__String__fini>
 8018880:	e7ea      	b.n	8018858 <std_msgs__msg__Header__init+0x1c>
 8018882:	bf00      	nop

08018884 <std_msgs__msg__Header__fini>:
 8018884:	b148      	cbz	r0, 801889a <std_msgs__msg__Header__fini+0x16>
 8018886:	b510      	push	{r4, lr}
 8018888:	4604      	mov	r4, r0
 801888a:	f000 f95d 	bl	8018b48 <builtin_interfaces__msg__Time__fini>
 801888e:	f104 0008 	add.w	r0, r4, #8
 8018892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018896:	f002 bc11 	b.w	801b0bc <rosidl_runtime_c__String__fini>
 801889a:	4770      	bx	lr

0801889c <std_msgs__msg__Int32__init>:
 801889c:	3800      	subs	r0, #0
 801889e:	bf18      	it	ne
 80188a0:	2001      	movne	r0, #1
 80188a2:	4770      	bx	lr

080188a4 <std_msgs__msg__Int32__fini>:
 80188a4:	4770      	bx	lr
 80188a6:	bf00      	nop

080188a8 <std_msgs__msg__Int64__init>:
 80188a8:	3800      	subs	r0, #0
 80188aa:	bf18      	it	ne
 80188ac:	2001      	movne	r0, #1
 80188ae:	4770      	bx	lr

080188b0 <std_msgs__msg__Int64__fini>:
 80188b0:	4770      	bx	lr
 80188b2:	bf00      	nop

080188b4 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 80188b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188b8:	b086      	sub	sp, #24
 80188ba:	4682      	mov	sl, r0
 80188bc:	4689      	mov	r9, r1
 80188be:	a801      	add	r0, sp, #4
 80188c0:	f7f7 fcbc 	bl	801023c <rcutils_get_default_allocator>
 80188c4:	f1b9 0f00 	cmp.w	r9, #0
 80188c8:	d02f      	beq.n	801892a <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 80188ca:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 80188ce:	2114      	movs	r1, #20
 80188d0:	4642      	mov	r2, r8
 80188d2:	4648      	mov	r0, r9
 80188d4:	4798      	blx	r3
 80188d6:	4607      	mov	r7, r0
 80188d8:	b388      	cbz	r0, 801893e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x8a>
 80188da:	4606      	mov	r6, r0
 80188dc:	2400      	movs	r4, #0
 80188de:	e004      	b.n	80188ea <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x36>
 80188e0:	3401      	adds	r4, #1
 80188e2:	45a1      	cmp	r9, r4
 80188e4:	f106 0614 	add.w	r6, r6, #20
 80188e8:	d020      	beq.n	801892c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 80188ea:	4630      	mov	r0, r6
 80188ec:	f002 fbd0 	bl	801b090 <rosidl_runtime_c__String__init>
 80188f0:	4605      	mov	r5, r0
 80188f2:	2800      	cmp	r0, #0
 80188f4:	d1f4      	bne.n	80188e0 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 80188f6:	4630      	mov	r0, r6
 80188f8:	f002 fbe0 	bl	801b0bc <rosidl_runtime_c__String__fini>
 80188fc:	45a1      	cmp	r9, r4
 80188fe:	d915      	bls.n	801892c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 8018900:	b15c      	cbz	r4, 801891a <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x66>
 8018902:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8018906:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801890a:	3c14      	subs	r4, #20
 801890c:	4620      	mov	r0, r4
 801890e:	f002 fbd5 	bl	801b0bc <rosidl_runtime_c__String__fini>
 8018912:	42a7      	cmp	r7, r4
 8018914:	f1a4 0414 	sub.w	r4, r4, #20
 8018918:	d1f8      	bne.n	801890c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x58>
 801891a:	4638      	mov	r0, r7
 801891c:	9b02      	ldr	r3, [sp, #8]
 801891e:	4641      	mov	r1, r8
 8018920:	4798      	blx	r3
 8018922:	4628      	mov	r0, r5
 8018924:	b006      	add	sp, #24
 8018926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801892a:	464f      	mov	r7, r9
 801892c:	e9ca 7900 	strd	r7, r9, [sl]
 8018930:	f8ca 9008 	str.w	r9, [sl, #8]
 8018934:	2501      	movs	r5, #1
 8018936:	4628      	mov	r0, r5
 8018938:	b006      	add	sp, #24
 801893a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801893e:	4605      	mov	r5, r0
 8018940:	e7f9      	b.n	8018936 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x82>
 8018942:	bf00      	nop

08018944 <std_msgs__msg__MultiArrayDimension__init>:
 8018944:	b538      	push	{r3, r4, r5, lr}
 8018946:	4604      	mov	r4, r0
 8018948:	b128      	cbz	r0, 8018956 <std_msgs__msg__MultiArrayDimension__init+0x12>
 801894a:	f002 fba1 	bl	801b090 <rosidl_runtime_c__String__init>
 801894e:	4605      	mov	r5, r0
 8018950:	b120      	cbz	r0, 801895c <std_msgs__msg__MultiArrayDimension__init+0x18>
 8018952:	4628      	mov	r0, r5
 8018954:	bd38      	pop	{r3, r4, r5, pc}
 8018956:	4605      	mov	r5, r0
 8018958:	4628      	mov	r0, r5
 801895a:	bd38      	pop	{r3, r4, r5, pc}
 801895c:	4620      	mov	r0, r4
 801895e:	f002 fbad 	bl	801b0bc <rosidl_runtime_c__String__fini>
 8018962:	4628      	mov	r0, r5
 8018964:	bd38      	pop	{r3, r4, r5, pc}
 8018966:	bf00      	nop

08018968 <std_msgs__msg__MultiArrayDimension__fini>:
 8018968:	b108      	cbz	r0, 801896e <std_msgs__msg__MultiArrayDimension__fini+0x6>
 801896a:	f002 bba7 	b.w	801b0bc <rosidl_runtime_c__String__fini>
 801896e:	4770      	bx	lr

08018970 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8018970:	b108      	cbz	r0, 8018976 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 8018972:	f7ff bf9f 	b.w	80188b4 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 8018976:	4770      	bx	lr

08018978 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8018978:	b320      	cbz	r0, 80189c4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 801897a:	b530      	push	{r4, r5, lr}
 801897c:	4605      	mov	r5, r0
 801897e:	b087      	sub	sp, #28
 8018980:	a801      	add	r0, sp, #4
 8018982:	f7f7 fc5b 	bl	801023c <rcutils_get_default_allocator>
 8018986:	682a      	ldr	r2, [r5, #0]
 8018988:	b1b2      	cbz	r2, 80189b8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 801898a:	68a9      	ldr	r1, [r5, #8]
 801898c:	b161      	cbz	r1, 80189a8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 801898e:	2400      	movs	r4, #0
 8018990:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8018994:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8018998:	d010      	beq.n	80189bc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 801899a:	f002 fb8f 	bl	801b0bc <rosidl_runtime_c__String__fini>
 801899e:	68a9      	ldr	r1, [r5, #8]
 80189a0:	682a      	ldr	r2, [r5, #0]
 80189a2:	3401      	adds	r4, #1
 80189a4:	428c      	cmp	r4, r1
 80189a6:	d3f3      	bcc.n	8018990 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80189a8:	9b02      	ldr	r3, [sp, #8]
 80189aa:	9905      	ldr	r1, [sp, #20]
 80189ac:	4610      	mov	r0, r2
 80189ae:	4798      	blx	r3
 80189b0:	2300      	movs	r3, #0
 80189b2:	e9c5 3300 	strd	r3, r3, [r5]
 80189b6:	60ab      	str	r3, [r5, #8]
 80189b8:	b007      	add	sp, #28
 80189ba:	bd30      	pop	{r4, r5, pc}
 80189bc:	3401      	adds	r4, #1
 80189be:	428c      	cmp	r4, r1
 80189c0:	d3e6      	bcc.n	8018990 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80189c2:	e7f1      	b.n	80189a8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80189c4:	4770      	bx	lr
 80189c6:	bf00      	nop

080189c8 <std_msgs__msg__MultiArrayLayout__init>:
 80189c8:	b538      	push	{r3, r4, r5, lr}
 80189ca:	4604      	mov	r4, r0
 80189cc:	b130      	cbz	r0, 80189dc <std_msgs__msg__MultiArrayLayout__init+0x14>
 80189ce:	2100      	movs	r1, #0
 80189d0:	f7ff ffce 	bl	8018970 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 80189d4:	4605      	mov	r5, r0
 80189d6:	b120      	cbz	r0, 80189e2 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 80189d8:	4628      	mov	r0, r5
 80189da:	bd38      	pop	{r3, r4, r5, pc}
 80189dc:	4605      	mov	r5, r0
 80189de:	4628      	mov	r0, r5
 80189e0:	bd38      	pop	{r3, r4, r5, pc}
 80189e2:	4620      	mov	r0, r4
 80189e4:	f7ff ffc8 	bl	8018978 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 80189e8:	4628      	mov	r0, r5
 80189ea:	bd38      	pop	{r3, r4, r5, pc}

080189ec <std_msgs__msg__MultiArrayLayout__fini>:
 80189ec:	b108      	cbz	r0, 80189f2 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 80189ee:	f7ff bfc3 	b.w	8018978 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 80189f2:	4770      	bx	lr

080189f4 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 80189f4:	f7ff bfa6 	b.w	8018944 <std_msgs__msg__MultiArrayDimension__init>

080189f8 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 80189f8:	f7ff bfb6 	b.w	8018968 <std_msgs__msg__MultiArrayDimension__fini>

080189fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80189fc:	4b04      	ldr	r3, [pc, #16]	; (8018a10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80189fe:	681a      	ldr	r2, [r3, #0]
 8018a00:	b10a      	cbz	r2, 8018a06 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8018a02:	4803      	ldr	r0, [pc, #12]	; (8018a10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8018a04:	4770      	bx	lr
 8018a06:	4a03      	ldr	r2, [pc, #12]	; (8018a14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 8018a08:	4801      	ldr	r0, [pc, #4]	; (8018a10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8018a0a:	6812      	ldr	r2, [r2, #0]
 8018a0c:	601a      	str	r2, [r3, #0]
 8018a0e:	4770      	bx	lr
 8018a10:	20000bdc 	.word	0x20000bdc
 8018a14:	20000b24 	.word	0x20000b24

08018a18 <_MultiArrayDimension__cdr_serialize>:
 8018a18:	b1d0      	cbz	r0, 8018a50 <_MultiArrayDimension__cdr_serialize+0x38>
 8018a1a:	b570      	push	{r4, r5, r6, lr}
 8018a1c:	6806      	ldr	r6, [r0, #0]
 8018a1e:	460d      	mov	r5, r1
 8018a20:	4604      	mov	r4, r0
 8018a22:	b196      	cbz	r6, 8018a4a <_MultiArrayDimension__cdr_serialize+0x32>
 8018a24:	4630      	mov	r0, r6
 8018a26:	f7e7 fbdd 	bl	80001e4 <strlen>
 8018a2a:	1c42      	adds	r2, r0, #1
 8018a2c:	4631      	mov	r1, r6
 8018a2e:	6060      	str	r0, [r4, #4]
 8018a30:	4628      	mov	r0, r5
 8018a32:	f7fa fffd 	bl	8013a30 <ucdr_serialize_sequence_char>
 8018a36:	68e1      	ldr	r1, [r4, #12]
 8018a38:	4628      	mov	r0, r5
 8018a3a:	f7f9 facf 	bl	8011fdc <ucdr_serialize_uint32_t>
 8018a3e:	6921      	ldr	r1, [r4, #16]
 8018a40:	4628      	mov	r0, r5
 8018a42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a46:	f7f9 bac9 	b.w	8011fdc <ucdr_serialize_uint32_t>
 8018a4a:	4632      	mov	r2, r6
 8018a4c:	4630      	mov	r0, r6
 8018a4e:	e7ed      	b.n	8018a2c <_MultiArrayDimension__cdr_serialize+0x14>
 8018a50:	4770      	bx	lr
 8018a52:	bf00      	nop

08018a54 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8018a54:	b570      	push	{r4, r5, r6, lr}
 8018a56:	4604      	mov	r4, r0
 8018a58:	b1b0      	cbz	r0, 8018a88 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8018a5a:	460d      	mov	r5, r1
 8018a5c:	4628      	mov	r0, r5
 8018a5e:	2104      	movs	r1, #4
 8018a60:	f7fa ff7a 	bl	8013958 <ucdr_alignment>
 8018a64:	6866      	ldr	r6, [r4, #4]
 8018a66:	1d6b      	adds	r3, r5, #5
 8018a68:	4433      	add	r3, r6
 8018a6a:	181e      	adds	r6, r3, r0
 8018a6c:	2104      	movs	r1, #4
 8018a6e:	4630      	mov	r0, r6
 8018a70:	f7fa ff72 	bl	8013958 <ucdr_alignment>
 8018a74:	1d04      	adds	r4, r0, #4
 8018a76:	4434      	add	r4, r6
 8018a78:	2104      	movs	r1, #4
 8018a7a:	4620      	mov	r0, r4
 8018a7c:	f7fa ff6c 	bl	8013958 <ucdr_alignment>
 8018a80:	f1c5 0504 	rsb	r5, r5, #4
 8018a84:	4428      	add	r0, r5
 8018a86:	4420      	add	r0, r4
 8018a88:	bd70      	pop	{r4, r5, r6, pc}
 8018a8a:	bf00      	nop

08018a8c <_MultiArrayDimension__cdr_deserialize>:
 8018a8c:	b570      	push	{r4, r5, r6, lr}
 8018a8e:	460c      	mov	r4, r1
 8018a90:	b082      	sub	sp, #8
 8018a92:	b1d9      	cbz	r1, 8018acc <_MultiArrayDimension__cdr_deserialize+0x40>
 8018a94:	688e      	ldr	r6, [r1, #8]
 8018a96:	6809      	ldr	r1, [r1, #0]
 8018a98:	ab01      	add	r3, sp, #4
 8018a9a:	4632      	mov	r2, r6
 8018a9c:	4605      	mov	r5, r0
 8018a9e:	f7fa ffd9 	bl	8013a54 <ucdr_deserialize_sequence_char>
 8018aa2:	9b01      	ldr	r3, [sp, #4]
 8018aa4:	b970      	cbnz	r0, 8018ac4 <_MultiArrayDimension__cdr_deserialize+0x38>
 8018aa6:	429e      	cmp	r6, r3
 8018aa8:	d313      	bcc.n	8018ad2 <_MultiArrayDimension__cdr_deserialize+0x46>
 8018aaa:	f104 010c 	add.w	r1, r4, #12
 8018aae:	4628      	mov	r0, r5
 8018ab0:	f7f9 fbc4 	bl	801223c <ucdr_deserialize_uint32_t>
 8018ab4:	f104 0110 	add.w	r1, r4, #16
 8018ab8:	4628      	mov	r0, r5
 8018aba:	b002      	add	sp, #8
 8018abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ac0:	f7f9 bbbc 	b.w	801223c <ucdr_deserialize_uint32_t>
 8018ac4:	b103      	cbz	r3, 8018ac8 <_MultiArrayDimension__cdr_deserialize+0x3c>
 8018ac6:	3b01      	subs	r3, #1
 8018ac8:	6063      	str	r3, [r4, #4]
 8018aca:	e7ee      	b.n	8018aaa <_MultiArrayDimension__cdr_deserialize+0x1e>
 8018acc:	4608      	mov	r0, r1
 8018ace:	b002      	add	sp, #8
 8018ad0:	bd70      	pop	{r4, r5, r6, pc}
 8018ad2:	2101      	movs	r1, #1
 8018ad4:	75a8      	strb	r0, [r5, #22]
 8018ad6:	7569      	strb	r1, [r5, #21]
 8018ad8:	6060      	str	r0, [r4, #4]
 8018ada:	4628      	mov	r0, r5
 8018adc:	f7fa ff52 	bl	8013984 <ucdr_align_to>
 8018ae0:	9901      	ldr	r1, [sp, #4]
 8018ae2:	4628      	mov	r0, r5
 8018ae4:	f7fa ff84 	bl	80139f0 <ucdr_advance_buffer>
 8018ae8:	e7df      	b.n	8018aaa <_MultiArrayDimension__cdr_deserialize+0x1e>
 8018aea:	bf00      	nop

08018aec <_MultiArrayDimension__max_serialized_size>:
 8018aec:	b510      	push	{r4, lr}
 8018aee:	2104      	movs	r1, #4
 8018af0:	2000      	movs	r0, #0
 8018af2:	f7fa ff31 	bl	8013958 <ucdr_alignment>
 8018af6:	1d04      	adds	r4, r0, #4
 8018af8:	2104      	movs	r1, #4
 8018afa:	4620      	mov	r0, r4
 8018afc:	f7fa ff2c 	bl	8013958 <ucdr_alignment>
 8018b00:	3004      	adds	r0, #4
 8018b02:	4420      	add	r0, r4
 8018b04:	bd10      	pop	{r4, pc}
 8018b06:	bf00      	nop

08018b08 <_MultiArrayDimension__get_serialized_size>:
 8018b08:	b510      	push	{r4, lr}
 8018b0a:	4604      	mov	r4, r0
 8018b0c:	b190      	cbz	r0, 8018b34 <_MultiArrayDimension__get_serialized_size+0x2c>
 8018b0e:	2104      	movs	r1, #4
 8018b10:	2000      	movs	r0, #0
 8018b12:	f7fa ff21 	bl	8013958 <ucdr_alignment>
 8018b16:	6863      	ldr	r3, [r4, #4]
 8018b18:	3305      	adds	r3, #5
 8018b1a:	181c      	adds	r4, r3, r0
 8018b1c:	2104      	movs	r1, #4
 8018b1e:	4620      	mov	r0, r4
 8018b20:	f7fa ff1a 	bl	8013958 <ucdr_alignment>
 8018b24:	3004      	adds	r0, #4
 8018b26:	4404      	add	r4, r0
 8018b28:	2104      	movs	r1, #4
 8018b2a:	4620      	mov	r0, r4
 8018b2c:	f7fa ff14 	bl	8013958 <ucdr_alignment>
 8018b30:	3004      	adds	r0, #4
 8018b32:	4420      	add	r0, r4
 8018b34:	bd10      	pop	{r4, pc}
 8018b36:	bf00      	nop

08018b38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8018b38:	4800      	ldr	r0, [pc, #0]	; (8018b3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8018b3a:	4770      	bx	lr
 8018b3c:	20000be8 	.word	0x20000be8

08018b40 <builtin_interfaces__msg__Time__init>:
 8018b40:	3800      	subs	r0, #0
 8018b42:	bf18      	it	ne
 8018b44:	2001      	movne	r0, #1
 8018b46:	4770      	bx	lr

08018b48 <builtin_interfaces__msg__Time__fini>:
 8018b48:	4770      	bx	lr
 8018b4a:	bf00      	nop

08018b4c <ucdr_serialize_endian_array_char>:
 8018b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b50:	4619      	mov	r1, r3
 8018b52:	461f      	mov	r7, r3
 8018b54:	4605      	mov	r5, r0
 8018b56:	4690      	mov	r8, r2
 8018b58:	f7fa fea6 	bl	80138a8 <ucdr_check_buffer_available_for>
 8018b5c:	b9e0      	cbnz	r0, 8018b98 <ucdr_serialize_endian_array_char+0x4c>
 8018b5e:	463e      	mov	r6, r7
 8018b60:	e009      	b.n	8018b76 <ucdr_serialize_endian_array_char+0x2a>
 8018b62:	68a8      	ldr	r0, [r5, #8]
 8018b64:	f002 fcf8 	bl	801b558 <memcpy>
 8018b68:	68ab      	ldr	r3, [r5, #8]
 8018b6a:	6928      	ldr	r0, [r5, #16]
 8018b6c:	4423      	add	r3, r4
 8018b6e:	4420      	add	r0, r4
 8018b70:	1b36      	subs	r6, r6, r4
 8018b72:	60ab      	str	r3, [r5, #8]
 8018b74:	6128      	str	r0, [r5, #16]
 8018b76:	4631      	mov	r1, r6
 8018b78:	2201      	movs	r2, #1
 8018b7a:	4628      	mov	r0, r5
 8018b7c:	f7fa ff1c 	bl	80139b8 <ucdr_check_final_buffer_behavior_array>
 8018b80:	1bb9      	subs	r1, r7, r6
 8018b82:	4441      	add	r1, r8
 8018b84:	4604      	mov	r4, r0
 8018b86:	4602      	mov	r2, r0
 8018b88:	2800      	cmp	r0, #0
 8018b8a:	d1ea      	bne.n	8018b62 <ucdr_serialize_endian_array_char+0x16>
 8018b8c:	2301      	movs	r3, #1
 8018b8e:	7da8      	ldrb	r0, [r5, #22]
 8018b90:	756b      	strb	r3, [r5, #21]
 8018b92:	4058      	eors	r0, r3
 8018b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b98:	463a      	mov	r2, r7
 8018b9a:	68a8      	ldr	r0, [r5, #8]
 8018b9c:	4641      	mov	r1, r8
 8018b9e:	f002 fcdb 	bl	801b558 <memcpy>
 8018ba2:	68aa      	ldr	r2, [r5, #8]
 8018ba4:	692b      	ldr	r3, [r5, #16]
 8018ba6:	443a      	add	r2, r7
 8018ba8:	443b      	add	r3, r7
 8018baa:	60aa      	str	r2, [r5, #8]
 8018bac:	612b      	str	r3, [r5, #16]
 8018bae:	e7ed      	b.n	8018b8c <ucdr_serialize_endian_array_char+0x40>

08018bb0 <ucdr_deserialize_endian_array_char>:
 8018bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bb4:	4619      	mov	r1, r3
 8018bb6:	461f      	mov	r7, r3
 8018bb8:	4605      	mov	r5, r0
 8018bba:	4690      	mov	r8, r2
 8018bbc:	f7fa fe74 	bl	80138a8 <ucdr_check_buffer_available_for>
 8018bc0:	b9e0      	cbnz	r0, 8018bfc <ucdr_deserialize_endian_array_char+0x4c>
 8018bc2:	463e      	mov	r6, r7
 8018bc4:	e009      	b.n	8018bda <ucdr_deserialize_endian_array_char+0x2a>
 8018bc6:	68a9      	ldr	r1, [r5, #8]
 8018bc8:	f002 fcc6 	bl	801b558 <memcpy>
 8018bcc:	68ab      	ldr	r3, [r5, #8]
 8018bce:	6928      	ldr	r0, [r5, #16]
 8018bd0:	4423      	add	r3, r4
 8018bd2:	4420      	add	r0, r4
 8018bd4:	1b36      	subs	r6, r6, r4
 8018bd6:	60ab      	str	r3, [r5, #8]
 8018bd8:	6128      	str	r0, [r5, #16]
 8018bda:	2201      	movs	r2, #1
 8018bdc:	4631      	mov	r1, r6
 8018bde:	4628      	mov	r0, r5
 8018be0:	f7fa feea 	bl	80139b8 <ucdr_check_final_buffer_behavior_array>
 8018be4:	4604      	mov	r4, r0
 8018be6:	1bb8      	subs	r0, r7, r6
 8018be8:	4440      	add	r0, r8
 8018bea:	4622      	mov	r2, r4
 8018bec:	2c00      	cmp	r4, #0
 8018bee:	d1ea      	bne.n	8018bc6 <ucdr_deserialize_endian_array_char+0x16>
 8018bf0:	2301      	movs	r3, #1
 8018bf2:	7da8      	ldrb	r0, [r5, #22]
 8018bf4:	756b      	strb	r3, [r5, #21]
 8018bf6:	4058      	eors	r0, r3
 8018bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bfc:	463a      	mov	r2, r7
 8018bfe:	68a9      	ldr	r1, [r5, #8]
 8018c00:	4640      	mov	r0, r8
 8018c02:	f002 fca9 	bl	801b558 <memcpy>
 8018c06:	68aa      	ldr	r2, [r5, #8]
 8018c08:	692b      	ldr	r3, [r5, #16]
 8018c0a:	443a      	add	r2, r7
 8018c0c:	443b      	add	r3, r7
 8018c0e:	60aa      	str	r2, [r5, #8]
 8018c10:	612b      	str	r3, [r5, #16]
 8018c12:	e7ed      	b.n	8018bf0 <ucdr_deserialize_endian_array_char+0x40>

08018c14 <ucdr_serialize_array_uint8_t>:
 8018c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c18:	4688      	mov	r8, r1
 8018c1a:	4611      	mov	r1, r2
 8018c1c:	4617      	mov	r7, r2
 8018c1e:	4605      	mov	r5, r0
 8018c20:	f7fa fe42 	bl	80138a8 <ucdr_check_buffer_available_for>
 8018c24:	b9e0      	cbnz	r0, 8018c60 <ucdr_serialize_array_uint8_t+0x4c>
 8018c26:	463e      	mov	r6, r7
 8018c28:	e009      	b.n	8018c3e <ucdr_serialize_array_uint8_t+0x2a>
 8018c2a:	68a8      	ldr	r0, [r5, #8]
 8018c2c:	f002 fc94 	bl	801b558 <memcpy>
 8018c30:	68aa      	ldr	r2, [r5, #8]
 8018c32:	692b      	ldr	r3, [r5, #16]
 8018c34:	4422      	add	r2, r4
 8018c36:	4423      	add	r3, r4
 8018c38:	1b36      	subs	r6, r6, r4
 8018c3a:	60aa      	str	r2, [r5, #8]
 8018c3c:	612b      	str	r3, [r5, #16]
 8018c3e:	4631      	mov	r1, r6
 8018c40:	2201      	movs	r2, #1
 8018c42:	4628      	mov	r0, r5
 8018c44:	f7fa feb8 	bl	80139b8 <ucdr_check_final_buffer_behavior_array>
 8018c48:	1bb9      	subs	r1, r7, r6
 8018c4a:	4441      	add	r1, r8
 8018c4c:	4604      	mov	r4, r0
 8018c4e:	4602      	mov	r2, r0
 8018c50:	2800      	cmp	r0, #0
 8018c52:	d1ea      	bne.n	8018c2a <ucdr_serialize_array_uint8_t+0x16>
 8018c54:	2301      	movs	r3, #1
 8018c56:	7da8      	ldrb	r0, [r5, #22]
 8018c58:	756b      	strb	r3, [r5, #21]
 8018c5a:	4058      	eors	r0, r3
 8018c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c60:	463a      	mov	r2, r7
 8018c62:	68a8      	ldr	r0, [r5, #8]
 8018c64:	4641      	mov	r1, r8
 8018c66:	f002 fc77 	bl	801b558 <memcpy>
 8018c6a:	68aa      	ldr	r2, [r5, #8]
 8018c6c:	692b      	ldr	r3, [r5, #16]
 8018c6e:	443a      	add	r2, r7
 8018c70:	443b      	add	r3, r7
 8018c72:	60aa      	str	r2, [r5, #8]
 8018c74:	612b      	str	r3, [r5, #16]
 8018c76:	e7ed      	b.n	8018c54 <ucdr_serialize_array_uint8_t+0x40>

08018c78 <ucdr_serialize_endian_array_uint8_t>:
 8018c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c7c:	4619      	mov	r1, r3
 8018c7e:	461f      	mov	r7, r3
 8018c80:	4605      	mov	r5, r0
 8018c82:	4690      	mov	r8, r2
 8018c84:	f7fa fe10 	bl	80138a8 <ucdr_check_buffer_available_for>
 8018c88:	b9e0      	cbnz	r0, 8018cc4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8018c8a:	463e      	mov	r6, r7
 8018c8c:	e009      	b.n	8018ca2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8018c8e:	68a8      	ldr	r0, [r5, #8]
 8018c90:	f002 fc62 	bl	801b558 <memcpy>
 8018c94:	68ab      	ldr	r3, [r5, #8]
 8018c96:	6928      	ldr	r0, [r5, #16]
 8018c98:	4423      	add	r3, r4
 8018c9a:	4420      	add	r0, r4
 8018c9c:	1b36      	subs	r6, r6, r4
 8018c9e:	60ab      	str	r3, [r5, #8]
 8018ca0:	6128      	str	r0, [r5, #16]
 8018ca2:	4631      	mov	r1, r6
 8018ca4:	2201      	movs	r2, #1
 8018ca6:	4628      	mov	r0, r5
 8018ca8:	f7fa fe86 	bl	80139b8 <ucdr_check_final_buffer_behavior_array>
 8018cac:	1bb9      	subs	r1, r7, r6
 8018cae:	4441      	add	r1, r8
 8018cb0:	4604      	mov	r4, r0
 8018cb2:	4602      	mov	r2, r0
 8018cb4:	2800      	cmp	r0, #0
 8018cb6:	d1ea      	bne.n	8018c8e <ucdr_serialize_endian_array_uint8_t+0x16>
 8018cb8:	2301      	movs	r3, #1
 8018cba:	7da8      	ldrb	r0, [r5, #22]
 8018cbc:	756b      	strb	r3, [r5, #21]
 8018cbe:	4058      	eors	r0, r3
 8018cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cc4:	463a      	mov	r2, r7
 8018cc6:	68a8      	ldr	r0, [r5, #8]
 8018cc8:	4641      	mov	r1, r8
 8018cca:	f002 fc45 	bl	801b558 <memcpy>
 8018cce:	68aa      	ldr	r2, [r5, #8]
 8018cd0:	692b      	ldr	r3, [r5, #16]
 8018cd2:	443a      	add	r2, r7
 8018cd4:	443b      	add	r3, r7
 8018cd6:	60aa      	str	r2, [r5, #8]
 8018cd8:	612b      	str	r3, [r5, #16]
 8018cda:	e7ed      	b.n	8018cb8 <ucdr_serialize_endian_array_uint8_t+0x40>

08018cdc <ucdr_deserialize_array_uint8_t>:
 8018cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ce0:	4688      	mov	r8, r1
 8018ce2:	4611      	mov	r1, r2
 8018ce4:	4617      	mov	r7, r2
 8018ce6:	4605      	mov	r5, r0
 8018ce8:	f7fa fdde 	bl	80138a8 <ucdr_check_buffer_available_for>
 8018cec:	b9e0      	cbnz	r0, 8018d28 <ucdr_deserialize_array_uint8_t+0x4c>
 8018cee:	463e      	mov	r6, r7
 8018cf0:	e009      	b.n	8018d06 <ucdr_deserialize_array_uint8_t+0x2a>
 8018cf2:	68a9      	ldr	r1, [r5, #8]
 8018cf4:	f002 fc30 	bl	801b558 <memcpy>
 8018cf8:	68aa      	ldr	r2, [r5, #8]
 8018cfa:	692b      	ldr	r3, [r5, #16]
 8018cfc:	4422      	add	r2, r4
 8018cfe:	4423      	add	r3, r4
 8018d00:	1b36      	subs	r6, r6, r4
 8018d02:	60aa      	str	r2, [r5, #8]
 8018d04:	612b      	str	r3, [r5, #16]
 8018d06:	2201      	movs	r2, #1
 8018d08:	4631      	mov	r1, r6
 8018d0a:	4628      	mov	r0, r5
 8018d0c:	f7fa fe54 	bl	80139b8 <ucdr_check_final_buffer_behavior_array>
 8018d10:	4604      	mov	r4, r0
 8018d12:	1bb8      	subs	r0, r7, r6
 8018d14:	4440      	add	r0, r8
 8018d16:	4622      	mov	r2, r4
 8018d18:	2c00      	cmp	r4, #0
 8018d1a:	d1ea      	bne.n	8018cf2 <ucdr_deserialize_array_uint8_t+0x16>
 8018d1c:	2301      	movs	r3, #1
 8018d1e:	7da8      	ldrb	r0, [r5, #22]
 8018d20:	756b      	strb	r3, [r5, #21]
 8018d22:	4058      	eors	r0, r3
 8018d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d28:	463a      	mov	r2, r7
 8018d2a:	68a9      	ldr	r1, [r5, #8]
 8018d2c:	4640      	mov	r0, r8
 8018d2e:	f002 fc13 	bl	801b558 <memcpy>
 8018d32:	68aa      	ldr	r2, [r5, #8]
 8018d34:	692b      	ldr	r3, [r5, #16]
 8018d36:	443a      	add	r2, r7
 8018d38:	443b      	add	r3, r7
 8018d3a:	60aa      	str	r2, [r5, #8]
 8018d3c:	612b      	str	r3, [r5, #16]
 8018d3e:	e7ed      	b.n	8018d1c <ucdr_deserialize_array_uint8_t+0x40>

08018d40 <ucdr_deserialize_endian_array_uint8_t>:
 8018d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d44:	4619      	mov	r1, r3
 8018d46:	461f      	mov	r7, r3
 8018d48:	4605      	mov	r5, r0
 8018d4a:	4690      	mov	r8, r2
 8018d4c:	f7fa fdac 	bl	80138a8 <ucdr_check_buffer_available_for>
 8018d50:	b9e0      	cbnz	r0, 8018d8c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8018d52:	463e      	mov	r6, r7
 8018d54:	e009      	b.n	8018d6a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8018d56:	68a9      	ldr	r1, [r5, #8]
 8018d58:	f002 fbfe 	bl	801b558 <memcpy>
 8018d5c:	68ab      	ldr	r3, [r5, #8]
 8018d5e:	6928      	ldr	r0, [r5, #16]
 8018d60:	4423      	add	r3, r4
 8018d62:	4420      	add	r0, r4
 8018d64:	1b36      	subs	r6, r6, r4
 8018d66:	60ab      	str	r3, [r5, #8]
 8018d68:	6128      	str	r0, [r5, #16]
 8018d6a:	2201      	movs	r2, #1
 8018d6c:	4631      	mov	r1, r6
 8018d6e:	4628      	mov	r0, r5
 8018d70:	f7fa fe22 	bl	80139b8 <ucdr_check_final_buffer_behavior_array>
 8018d74:	4604      	mov	r4, r0
 8018d76:	1bb8      	subs	r0, r7, r6
 8018d78:	4440      	add	r0, r8
 8018d7a:	4622      	mov	r2, r4
 8018d7c:	2c00      	cmp	r4, #0
 8018d7e:	d1ea      	bne.n	8018d56 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8018d80:	2301      	movs	r3, #1
 8018d82:	7da8      	ldrb	r0, [r5, #22]
 8018d84:	756b      	strb	r3, [r5, #21]
 8018d86:	4058      	eors	r0, r3
 8018d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d8c:	463a      	mov	r2, r7
 8018d8e:	68a9      	ldr	r1, [r5, #8]
 8018d90:	4640      	mov	r0, r8
 8018d92:	f002 fbe1 	bl	801b558 <memcpy>
 8018d96:	68aa      	ldr	r2, [r5, #8]
 8018d98:	692b      	ldr	r3, [r5, #16]
 8018d9a:	443a      	add	r2, r7
 8018d9c:	443b      	add	r3, r7
 8018d9e:	60aa      	str	r2, [r5, #8]
 8018da0:	612b      	str	r3, [r5, #16]
 8018da2:	e7ed      	b.n	8018d80 <ucdr_deserialize_endian_array_uint8_t+0x40>

08018da4 <ucdr_serialize_endian_array_float>:
 8018da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018da8:	4688      	mov	r8, r1
 8018daa:	2104      	movs	r1, #4
 8018dac:	4604      	mov	r4, r0
 8018dae:	4616      	mov	r6, r2
 8018db0:	461f      	mov	r7, r3
 8018db2:	f7fa fdd9 	bl	8013968 <ucdr_buffer_alignment>
 8018db6:	4601      	mov	r1, r0
 8018db8:	4620      	mov	r0, r4
 8018dba:	7d65      	ldrb	r5, [r4, #21]
 8018dbc:	f7fa fe18 	bl	80139f0 <ucdr_advance_buffer>
 8018dc0:	f1b8 0f01 	cmp.w	r8, #1
 8018dc4:	7565      	strb	r5, [r4, #21]
 8018dc6:	d00f      	beq.n	8018de8 <ucdr_serialize_endian_array_float+0x44>
 8018dc8:	2500      	movs	r5, #0
 8018dca:	b147      	cbz	r7, 8018dde <ucdr_serialize_endian_array_float+0x3a>
 8018dcc:	ecb6 0a01 	vldmia	r6!, {s0}
 8018dd0:	4641      	mov	r1, r8
 8018dd2:	4620      	mov	r0, r4
 8018dd4:	3501      	adds	r5, #1
 8018dd6:	f7fa f871 	bl	8012ebc <ucdr_serialize_endian_float>
 8018dda:	42af      	cmp	r7, r5
 8018ddc:	d1f6      	bne.n	8018dcc <ucdr_serialize_endian_array_float+0x28>
 8018dde:	7da0      	ldrb	r0, [r4, #22]
 8018de0:	f080 0001 	eor.w	r0, r0, #1
 8018de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018de8:	00bf      	lsls	r7, r7, #2
 8018dea:	4639      	mov	r1, r7
 8018dec:	4620      	mov	r0, r4
 8018dee:	f7fa fd5b 	bl	80138a8 <ucdr_check_buffer_available_for>
 8018df2:	b9f8      	cbnz	r0, 8018e34 <ucdr_serialize_endian_array_float+0x90>
 8018df4:	46b8      	mov	r8, r7
 8018df6:	e00a      	b.n	8018e0e <ucdr_serialize_endian_array_float+0x6a>
 8018df8:	68a0      	ldr	r0, [r4, #8]
 8018dfa:	f002 fbad 	bl	801b558 <memcpy>
 8018dfe:	68a2      	ldr	r2, [r4, #8]
 8018e00:	6923      	ldr	r3, [r4, #16]
 8018e02:	442a      	add	r2, r5
 8018e04:	442b      	add	r3, r5
 8018e06:	eba8 0805 	sub.w	r8, r8, r5
 8018e0a:	60a2      	str	r2, [r4, #8]
 8018e0c:	6123      	str	r3, [r4, #16]
 8018e0e:	4641      	mov	r1, r8
 8018e10:	2204      	movs	r2, #4
 8018e12:	4620      	mov	r0, r4
 8018e14:	f7fa fdd0 	bl	80139b8 <ucdr_check_final_buffer_behavior_array>
 8018e18:	eba7 0108 	sub.w	r1, r7, r8
 8018e1c:	4431      	add	r1, r6
 8018e1e:	4605      	mov	r5, r0
 8018e20:	4602      	mov	r2, r0
 8018e22:	2800      	cmp	r0, #0
 8018e24:	d1e8      	bne.n	8018df8 <ucdr_serialize_endian_array_float+0x54>
 8018e26:	7da0      	ldrb	r0, [r4, #22]
 8018e28:	2304      	movs	r3, #4
 8018e2a:	7563      	strb	r3, [r4, #21]
 8018e2c:	f080 0001 	eor.w	r0, r0, #1
 8018e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e34:	463a      	mov	r2, r7
 8018e36:	68a0      	ldr	r0, [r4, #8]
 8018e38:	4631      	mov	r1, r6
 8018e3a:	f002 fb8d 	bl	801b558 <memcpy>
 8018e3e:	68a2      	ldr	r2, [r4, #8]
 8018e40:	6923      	ldr	r3, [r4, #16]
 8018e42:	443a      	add	r2, r7
 8018e44:	441f      	add	r7, r3
 8018e46:	60a2      	str	r2, [r4, #8]
 8018e48:	6127      	str	r7, [r4, #16]
 8018e4a:	e7ec      	b.n	8018e26 <ucdr_serialize_endian_array_float+0x82>

08018e4c <ucdr_deserialize_endian_array_float>:
 8018e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e50:	4688      	mov	r8, r1
 8018e52:	2104      	movs	r1, #4
 8018e54:	4605      	mov	r5, r0
 8018e56:	4614      	mov	r4, r2
 8018e58:	461f      	mov	r7, r3
 8018e5a:	f7fa fd85 	bl	8013968 <ucdr_buffer_alignment>
 8018e5e:	4601      	mov	r1, r0
 8018e60:	4628      	mov	r0, r5
 8018e62:	7d6e      	ldrb	r6, [r5, #21]
 8018e64:	f7fa fdc4 	bl	80139f0 <ucdr_advance_buffer>
 8018e68:	f1b8 0f01 	cmp.w	r8, #1
 8018e6c:	756e      	strb	r6, [r5, #21]
 8018e6e:	d010      	beq.n	8018e92 <ucdr_deserialize_endian_array_float+0x46>
 8018e70:	2600      	movs	r6, #0
 8018e72:	b14f      	cbz	r7, 8018e88 <ucdr_deserialize_endian_array_float+0x3c>
 8018e74:	4622      	mov	r2, r4
 8018e76:	4641      	mov	r1, r8
 8018e78:	4628      	mov	r0, r5
 8018e7a:	3601      	adds	r6, #1
 8018e7c:	f7fa f948 	bl	8013110 <ucdr_deserialize_endian_float>
 8018e80:	42b7      	cmp	r7, r6
 8018e82:	f104 0404 	add.w	r4, r4, #4
 8018e86:	d1f5      	bne.n	8018e74 <ucdr_deserialize_endian_array_float+0x28>
 8018e88:	7da8      	ldrb	r0, [r5, #22]
 8018e8a:	f080 0001 	eor.w	r0, r0, #1
 8018e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e92:	00bf      	lsls	r7, r7, #2
 8018e94:	4639      	mov	r1, r7
 8018e96:	4628      	mov	r0, r5
 8018e98:	f7fa fd06 	bl	80138a8 <ucdr_check_buffer_available_for>
 8018e9c:	b9f8      	cbnz	r0, 8018ede <ucdr_deserialize_endian_array_float+0x92>
 8018e9e:	46b8      	mov	r8, r7
 8018ea0:	e00a      	b.n	8018eb8 <ucdr_deserialize_endian_array_float+0x6c>
 8018ea2:	68a9      	ldr	r1, [r5, #8]
 8018ea4:	f002 fb58 	bl	801b558 <memcpy>
 8018ea8:	68aa      	ldr	r2, [r5, #8]
 8018eaa:	692b      	ldr	r3, [r5, #16]
 8018eac:	4432      	add	r2, r6
 8018eae:	4433      	add	r3, r6
 8018eb0:	eba8 0806 	sub.w	r8, r8, r6
 8018eb4:	60aa      	str	r2, [r5, #8]
 8018eb6:	612b      	str	r3, [r5, #16]
 8018eb8:	2204      	movs	r2, #4
 8018eba:	4641      	mov	r1, r8
 8018ebc:	4628      	mov	r0, r5
 8018ebe:	f7fa fd7b 	bl	80139b8 <ucdr_check_final_buffer_behavior_array>
 8018ec2:	4606      	mov	r6, r0
 8018ec4:	eba7 0008 	sub.w	r0, r7, r8
 8018ec8:	4420      	add	r0, r4
 8018eca:	4632      	mov	r2, r6
 8018ecc:	2e00      	cmp	r6, #0
 8018ece:	d1e8      	bne.n	8018ea2 <ucdr_deserialize_endian_array_float+0x56>
 8018ed0:	7da8      	ldrb	r0, [r5, #22]
 8018ed2:	2304      	movs	r3, #4
 8018ed4:	756b      	strb	r3, [r5, #21]
 8018ed6:	f080 0001 	eor.w	r0, r0, #1
 8018eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ede:	463a      	mov	r2, r7
 8018ee0:	68a9      	ldr	r1, [r5, #8]
 8018ee2:	4620      	mov	r0, r4
 8018ee4:	f002 fb38 	bl	801b558 <memcpy>
 8018ee8:	68aa      	ldr	r2, [r5, #8]
 8018eea:	692b      	ldr	r3, [r5, #16]
 8018eec:	443a      	add	r2, r7
 8018eee:	441f      	add	r7, r3
 8018ef0:	60aa      	str	r2, [r5, #8]
 8018ef2:	612f      	str	r7, [r5, #16]
 8018ef4:	e7ec      	b.n	8018ed0 <ucdr_deserialize_endian_array_float+0x84>
 8018ef6:	bf00      	nop

08018ef8 <ucdr_serialize_endian_array_double>:
 8018ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018efc:	4688      	mov	r8, r1
 8018efe:	2108      	movs	r1, #8
 8018f00:	4604      	mov	r4, r0
 8018f02:	4616      	mov	r6, r2
 8018f04:	461f      	mov	r7, r3
 8018f06:	f7fa fd2f 	bl	8013968 <ucdr_buffer_alignment>
 8018f0a:	4601      	mov	r1, r0
 8018f0c:	4620      	mov	r0, r4
 8018f0e:	7d65      	ldrb	r5, [r4, #21]
 8018f10:	f7fa fd6e 	bl	80139f0 <ucdr_advance_buffer>
 8018f14:	f1b8 0f01 	cmp.w	r8, #1
 8018f18:	7565      	strb	r5, [r4, #21]
 8018f1a:	d00f      	beq.n	8018f3c <ucdr_serialize_endian_array_double+0x44>
 8018f1c:	2500      	movs	r5, #0
 8018f1e:	b147      	cbz	r7, 8018f32 <ucdr_serialize_endian_array_double+0x3a>
 8018f20:	ecb6 0b02 	vldmia	r6!, {d0}
 8018f24:	4641      	mov	r1, r8
 8018f26:	4620      	mov	r0, r4
 8018f28:	3501      	adds	r5, #1
 8018f2a:	f7fa fa57 	bl	80133dc <ucdr_serialize_endian_double>
 8018f2e:	42af      	cmp	r7, r5
 8018f30:	d1f6      	bne.n	8018f20 <ucdr_serialize_endian_array_double+0x28>
 8018f32:	7da0      	ldrb	r0, [r4, #22]
 8018f34:	f080 0001 	eor.w	r0, r0, #1
 8018f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f3c:	00ff      	lsls	r7, r7, #3
 8018f3e:	4639      	mov	r1, r7
 8018f40:	4620      	mov	r0, r4
 8018f42:	f7fa fcb1 	bl	80138a8 <ucdr_check_buffer_available_for>
 8018f46:	b9f8      	cbnz	r0, 8018f88 <ucdr_serialize_endian_array_double+0x90>
 8018f48:	46b8      	mov	r8, r7
 8018f4a:	e00a      	b.n	8018f62 <ucdr_serialize_endian_array_double+0x6a>
 8018f4c:	68a0      	ldr	r0, [r4, #8]
 8018f4e:	f002 fb03 	bl	801b558 <memcpy>
 8018f52:	68a2      	ldr	r2, [r4, #8]
 8018f54:	6923      	ldr	r3, [r4, #16]
 8018f56:	442a      	add	r2, r5
 8018f58:	442b      	add	r3, r5
 8018f5a:	eba8 0805 	sub.w	r8, r8, r5
 8018f5e:	60a2      	str	r2, [r4, #8]
 8018f60:	6123      	str	r3, [r4, #16]
 8018f62:	4641      	mov	r1, r8
 8018f64:	2208      	movs	r2, #8
 8018f66:	4620      	mov	r0, r4
 8018f68:	f7fa fd26 	bl	80139b8 <ucdr_check_final_buffer_behavior_array>
 8018f6c:	eba7 0108 	sub.w	r1, r7, r8
 8018f70:	4431      	add	r1, r6
 8018f72:	4605      	mov	r5, r0
 8018f74:	4602      	mov	r2, r0
 8018f76:	2800      	cmp	r0, #0
 8018f78:	d1e8      	bne.n	8018f4c <ucdr_serialize_endian_array_double+0x54>
 8018f7a:	7da0      	ldrb	r0, [r4, #22]
 8018f7c:	2308      	movs	r3, #8
 8018f7e:	7563      	strb	r3, [r4, #21]
 8018f80:	f080 0001 	eor.w	r0, r0, #1
 8018f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f88:	463a      	mov	r2, r7
 8018f8a:	68a0      	ldr	r0, [r4, #8]
 8018f8c:	4631      	mov	r1, r6
 8018f8e:	f002 fae3 	bl	801b558 <memcpy>
 8018f92:	68a2      	ldr	r2, [r4, #8]
 8018f94:	6923      	ldr	r3, [r4, #16]
 8018f96:	443a      	add	r2, r7
 8018f98:	441f      	add	r7, r3
 8018f9a:	60a2      	str	r2, [r4, #8]
 8018f9c:	6127      	str	r7, [r4, #16]
 8018f9e:	e7ec      	b.n	8018f7a <ucdr_serialize_endian_array_double+0x82>

08018fa0 <ucdr_deserialize_endian_array_double>:
 8018fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fa4:	4688      	mov	r8, r1
 8018fa6:	2108      	movs	r1, #8
 8018fa8:	4605      	mov	r5, r0
 8018faa:	4614      	mov	r4, r2
 8018fac:	461f      	mov	r7, r3
 8018fae:	f7fa fcdb 	bl	8013968 <ucdr_buffer_alignment>
 8018fb2:	4601      	mov	r1, r0
 8018fb4:	4628      	mov	r0, r5
 8018fb6:	7d6e      	ldrb	r6, [r5, #21]
 8018fb8:	f7fa fd1a 	bl	80139f0 <ucdr_advance_buffer>
 8018fbc:	f1b8 0f01 	cmp.w	r8, #1
 8018fc0:	756e      	strb	r6, [r5, #21]
 8018fc2:	d010      	beq.n	8018fe6 <ucdr_deserialize_endian_array_double+0x46>
 8018fc4:	2600      	movs	r6, #0
 8018fc6:	b14f      	cbz	r7, 8018fdc <ucdr_deserialize_endian_array_double+0x3c>
 8018fc8:	4622      	mov	r2, r4
 8018fca:	4641      	mov	r1, r8
 8018fcc:	4628      	mov	r0, r5
 8018fce:	3601      	adds	r6, #1
 8018fd0:	f7fa fb9c 	bl	801370c <ucdr_deserialize_endian_double>
 8018fd4:	42b7      	cmp	r7, r6
 8018fd6:	f104 0408 	add.w	r4, r4, #8
 8018fda:	d1f5      	bne.n	8018fc8 <ucdr_deserialize_endian_array_double+0x28>
 8018fdc:	7da8      	ldrb	r0, [r5, #22]
 8018fde:	f080 0001 	eor.w	r0, r0, #1
 8018fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fe6:	00ff      	lsls	r7, r7, #3
 8018fe8:	4639      	mov	r1, r7
 8018fea:	4628      	mov	r0, r5
 8018fec:	f7fa fc5c 	bl	80138a8 <ucdr_check_buffer_available_for>
 8018ff0:	b9f8      	cbnz	r0, 8019032 <ucdr_deserialize_endian_array_double+0x92>
 8018ff2:	46b8      	mov	r8, r7
 8018ff4:	e00a      	b.n	801900c <ucdr_deserialize_endian_array_double+0x6c>
 8018ff6:	68a9      	ldr	r1, [r5, #8]
 8018ff8:	f002 faae 	bl	801b558 <memcpy>
 8018ffc:	68aa      	ldr	r2, [r5, #8]
 8018ffe:	692b      	ldr	r3, [r5, #16]
 8019000:	4432      	add	r2, r6
 8019002:	4433      	add	r3, r6
 8019004:	eba8 0806 	sub.w	r8, r8, r6
 8019008:	60aa      	str	r2, [r5, #8]
 801900a:	612b      	str	r3, [r5, #16]
 801900c:	2208      	movs	r2, #8
 801900e:	4641      	mov	r1, r8
 8019010:	4628      	mov	r0, r5
 8019012:	f7fa fcd1 	bl	80139b8 <ucdr_check_final_buffer_behavior_array>
 8019016:	4606      	mov	r6, r0
 8019018:	eba7 0008 	sub.w	r0, r7, r8
 801901c:	4420      	add	r0, r4
 801901e:	4632      	mov	r2, r6
 8019020:	2e00      	cmp	r6, #0
 8019022:	d1e8      	bne.n	8018ff6 <ucdr_deserialize_endian_array_double+0x56>
 8019024:	7da8      	ldrb	r0, [r5, #22]
 8019026:	2308      	movs	r3, #8
 8019028:	756b      	strb	r3, [r5, #21]
 801902a:	f080 0001 	eor.w	r0, r0, #1
 801902e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019032:	463a      	mov	r2, r7
 8019034:	68a9      	ldr	r1, [r5, #8]
 8019036:	4620      	mov	r0, r4
 8019038:	f002 fa8e 	bl	801b558 <memcpy>
 801903c:	68aa      	ldr	r2, [r5, #8]
 801903e:	692b      	ldr	r3, [r5, #16]
 8019040:	443a      	add	r2, r7
 8019042:	441f      	add	r7, r3
 8019044:	60aa      	str	r2, [r5, #8]
 8019046:	612f      	str	r7, [r5, #16]
 8019048:	e7ec      	b.n	8019024 <ucdr_deserialize_endian_array_double+0x84>
 801904a:	bf00      	nop

0801904c <ucdr_serialize_string>:
 801904c:	b510      	push	{r4, lr}
 801904e:	b082      	sub	sp, #8
 8019050:	4604      	mov	r4, r0
 8019052:	4608      	mov	r0, r1
 8019054:	9101      	str	r1, [sp, #4]
 8019056:	f7e7 f8c5 	bl	80001e4 <strlen>
 801905a:	9901      	ldr	r1, [sp, #4]
 801905c:	1c42      	adds	r2, r0, #1
 801905e:	4620      	mov	r0, r4
 8019060:	b002      	add	sp, #8
 8019062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019066:	f7fa bce3 	b.w	8013a30 <ucdr_serialize_sequence_char>
 801906a:	bf00      	nop

0801906c <ucdr_deserialize_string>:
 801906c:	b500      	push	{lr}
 801906e:	b083      	sub	sp, #12
 8019070:	ab01      	add	r3, sp, #4
 8019072:	f7fa fcef 	bl	8013a54 <ucdr_deserialize_sequence_char>
 8019076:	b003      	add	sp, #12
 8019078:	f85d fb04 	ldr.w	pc, [sp], #4

0801907c <get_custom_error>:
 801907c:	4b01      	ldr	r3, [pc, #4]	; (8019084 <get_custom_error+0x8>)
 801907e:	7818      	ldrb	r0, [r3, #0]
 8019080:	4770      	bx	lr
 8019082:	bf00      	nop
 8019084:	2001ccd0 	.word	0x2001ccd0

08019088 <recv_custom_msg>:
 8019088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801908c:	4693      	mov	fp, r2
 801908e:	b089      	sub	sp, #36	; 0x24
 8019090:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8019094:	9305      	str	r3, [sp, #20]
 8019096:	468a      	mov	sl, r1
 8019098:	2100      	movs	r1, #0
 801909a:	4604      	mov	r4, r0
 801909c:	f88d 101e 	strb.w	r1, [sp, #30]
 80190a0:	b322      	cbz	r2, 80190ec <recv_custom_msg+0x64>
 80190a2:	f200 2902 	addw	r9, r0, #514	; 0x202
 80190a6:	f10d 081f 	add.w	r8, sp, #31
 80190aa:	af05      	add	r7, sp, #20
 80190ac:	f10d 061e 	add.w	r6, sp, #30
 80190b0:	f44f 7500 	mov.w	r5, #512	; 0x200
 80190b4:	e002      	b.n	80190bc <recv_custom_msg+0x34>
 80190b6:	9b05      	ldr	r3, [sp, #20]
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	dd0f      	ble.n	80190dc <recv_custom_msg+0x54>
 80190bc:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80190c0:	4623      	mov	r3, r4
 80190c2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80190c6:	e9cd 5600 	strd	r5, r6, [sp]
 80190ca:	4622      	mov	r2, r4
 80190cc:	4648      	mov	r0, r9
 80190ce:	f001 f8e1 	bl	801a294 <uxr_read_framed_msg>
 80190d2:	2800      	cmp	r0, #0
 80190d4:	d0ef      	beq.n	80190b6 <recv_custom_msg+0x2e>
 80190d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80190da:	b1b3      	cbz	r3, 801910a <recv_custom_msg+0x82>
 80190dc:	4b0f      	ldr	r3, [pc, #60]	; (801911c <recv_custom_msg+0x94>)
 80190de:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80190e2:	701a      	strb	r2, [r3, #0]
 80190e4:	2000      	movs	r0, #0
 80190e6:	b009      	add	sp, #36	; 0x24
 80190e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190ec:	f10d 021f 	add.w	r2, sp, #31
 80190f0:	9200      	str	r2, [sp, #0]
 80190f2:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80190f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80190fa:	4601      	mov	r1, r0
 80190fc:	47a8      	blx	r5
 80190fe:	2800      	cmp	r0, #0
 8019100:	d0ec      	beq.n	80190dc <recv_custom_msg+0x54>
 8019102:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d1e8      	bne.n	80190dc <recv_custom_msg+0x54>
 801910a:	f8cb 0000 	str.w	r0, [fp]
 801910e:	2001      	movs	r0, #1
 8019110:	f8ca 4000 	str.w	r4, [sl]
 8019114:	b009      	add	sp, #36	; 0x24
 8019116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801911a:	bf00      	nop
 801911c:	2001ccd0 	.word	0x2001ccd0

08019120 <send_custom_msg>:
 8019120:	b530      	push	{r4, r5, lr}
 8019122:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 8019126:	b087      	sub	sp, #28
 8019128:	4615      	mov	r5, r2
 801912a:	b974      	cbnz	r4, 801914a <send_custom_msg+0x2a>
 801912c:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8019130:	f10d 0317 	add.w	r3, sp, #23
 8019134:	47a0      	blx	r4
 8019136:	b108      	cbz	r0, 801913c <send_custom_msg+0x1c>
 8019138:	42a8      	cmp	r0, r5
 801913a:	d015      	beq.n	8019168 <send_custom_msg+0x48>
 801913c:	4b0c      	ldr	r3, [pc, #48]	; (8019170 <send_custom_msg+0x50>)
 801913e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8019142:	701a      	strb	r2, [r3, #0]
 8019144:	2000      	movs	r0, #0
 8019146:	b007      	add	sp, #28
 8019148:	bd30      	pop	{r4, r5, pc}
 801914a:	460b      	mov	r3, r1
 801914c:	2200      	movs	r2, #0
 801914e:	f10d 0117 	add.w	r1, sp, #23
 8019152:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8019156:	4602      	mov	r2, r0
 8019158:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 801915c:	9500      	str	r5, [sp, #0]
 801915e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8019162:	f000 fe9f 	bl	8019ea4 <uxr_write_framed_msg>
 8019166:	e7e6      	b.n	8019136 <send_custom_msg+0x16>
 8019168:	2001      	movs	r0, #1
 801916a:	b007      	add	sp, #28
 801916c:	bd30      	pop	{r4, r5, pc}
 801916e:	bf00      	nop
 8019170:	2001ccd0 	.word	0x2001ccd0

08019174 <uxr_set_custom_transport_callbacks>:
 8019174:	b410      	push	{r4}
 8019176:	9c01      	ldr	r4, [sp, #4]
 8019178:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 801917c:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8019180:	9b02      	ldr	r3, [sp, #8]
 8019182:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8019186:	f85d 4b04 	ldr.w	r4, [sp], #4
 801918a:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 801918e:	4770      	bx	lr

08019190 <uxr_init_custom_transport>:
 8019190:	b538      	push	{r3, r4, r5, lr}
 8019192:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8019196:	b303      	cbz	r3, 80191da <uxr_init_custom_transport+0x4a>
 8019198:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 801919c:	4604      	mov	r4, r0
 801919e:	b1e2      	cbz	r2, 80191da <uxr_init_custom_transport+0x4a>
 80191a0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80191a4:	b1ca      	cbz	r2, 80191da <uxr_init_custom_transport+0x4a>
 80191a6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80191aa:	b1b2      	cbz	r2, 80191da <uxr_init_custom_transport+0x4a>
 80191ac:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80191b0:	4798      	blx	r3
 80191b2:	4605      	mov	r5, r0
 80191b4:	b188      	cbz	r0, 80191da <uxr_init_custom_transport+0x4a>
 80191b6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80191ba:	b98b      	cbnz	r3, 80191e0 <uxr_init_custom_transport+0x50>
 80191bc:	490b      	ldr	r1, [pc, #44]	; (80191ec <uxr_init_custom_transport+0x5c>)
 80191be:	4b0c      	ldr	r3, [pc, #48]	; (80191f0 <uxr_init_custom_transport+0x60>)
 80191c0:	4a0c      	ldr	r2, [pc, #48]	; (80191f4 <uxr_init_custom_transport+0x64>)
 80191c2:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 80191c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80191ca:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 80191ce:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80191d2:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80191d6:	4628      	mov	r0, r5
 80191d8:	bd38      	pop	{r3, r4, r5, pc}
 80191da:	2500      	movs	r5, #0
 80191dc:	4628      	mov	r0, r5
 80191de:	bd38      	pop	{r3, r4, r5, pc}
 80191e0:	2100      	movs	r1, #0
 80191e2:	f204 2002 	addw	r0, r4, #514	; 0x202
 80191e6:	f000 fe57 	bl	8019e98 <uxr_init_framing_io>
 80191ea:	e7e7      	b.n	80191bc <uxr_init_custom_transport+0x2c>
 80191ec:	08019121 	.word	0x08019121
 80191f0:	08019089 	.word	0x08019089
 80191f4:	0801907d 	.word	0x0801907d

080191f8 <uxr_close_custom_transport>:
 80191f8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80191fc:	4718      	bx	r3
 80191fe:	bf00      	nop

08019200 <uxr_init_input_best_effort_stream>:
 8019200:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019204:	8003      	strh	r3, [r0, #0]
 8019206:	4770      	bx	lr

08019208 <uxr_reset_input_best_effort_stream>:
 8019208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801920c:	8003      	strh	r3, [r0, #0]
 801920e:	4770      	bx	lr

08019210 <uxr_receive_best_effort_message>:
 8019210:	b538      	push	{r3, r4, r5, lr}
 8019212:	4604      	mov	r4, r0
 8019214:	8800      	ldrh	r0, [r0, #0]
 8019216:	460d      	mov	r5, r1
 8019218:	f000 fe26 	bl	8019e68 <uxr_seq_num_cmp>
 801921c:	4603      	mov	r3, r0
 801921e:	2b00      	cmp	r3, #0
 8019220:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8019224:	bfb8      	it	lt
 8019226:	8025      	strhlt	r5, [r4, #0]
 8019228:	bd38      	pop	{r3, r4, r5, pc}
 801922a:	bf00      	nop

0801922c <on_full_input_buffer>:
 801922c:	b570      	push	{r4, r5, r6, lr}
 801922e:	4605      	mov	r5, r0
 8019230:	460c      	mov	r4, r1
 8019232:	682b      	ldr	r3, [r5, #0]
 8019234:	6809      	ldr	r1, [r1, #0]
 8019236:	8920      	ldrh	r0, [r4, #8]
 8019238:	6862      	ldr	r2, [r4, #4]
 801923a:	fbb2 f2f0 	udiv	r2, r2, r0
 801923e:	eba3 0c01 	sub.w	ip, r3, r1
 8019242:	fbbc fcf2 	udiv	ip, ip, r2
 8019246:	f10c 0c01 	add.w	ip, ip, #1
 801924a:	fa1f f38c 	uxth.w	r3, ip
 801924e:	fbb3 f6f0 	udiv	r6, r3, r0
 8019252:	fb00 3316 	mls	r3, r0, r6, r3
 8019256:	b29b      	uxth	r3, r3
 8019258:	fb02 f303 	mul.w	r3, r2, r3
 801925c:	1d18      	adds	r0, r3, #4
 801925e:	4408      	add	r0, r1
 8019260:	7d26      	ldrb	r6, [r4, #20]
 8019262:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019266:	b116      	cbz	r6, 801926e <on_full_input_buffer+0x42>
 8019268:	2600      	movs	r6, #0
 801926a:	f840 6c04 	str.w	r6, [r0, #-4]
 801926e:	2a03      	cmp	r2, #3
 8019270:	d801      	bhi.n	8019276 <on_full_input_buffer+0x4a>
 8019272:	2001      	movs	r0, #1
 8019274:	bd70      	pop	{r4, r5, r6, pc}
 8019276:	3308      	adds	r3, #8
 8019278:	4419      	add	r1, r3
 801927a:	4628      	mov	r0, r5
 801927c:	692b      	ldr	r3, [r5, #16]
 801927e:	3a04      	subs	r2, #4
 8019280:	f7fa fb5e 	bl	8013940 <ucdr_init_buffer_origin>
 8019284:	4628      	mov	r0, r5
 8019286:	4903      	ldr	r1, [pc, #12]	; (8019294 <on_full_input_buffer+0x68>)
 8019288:	4622      	mov	r2, r4
 801928a:	f7fa fb35 	bl	80138f8 <ucdr_set_on_full_buffer_callback>
 801928e:	2000      	movs	r0, #0
 8019290:	bd70      	pop	{r4, r5, r6, pc}
 8019292:	bf00      	nop
 8019294:	0801922d 	.word	0x0801922d

08019298 <uxr_init_input_reliable_stream>:
 8019298:	b500      	push	{lr}
 801929a:	e9c0 1200 	strd	r1, r2, [r0]
 801929e:	f04f 0e00 	mov.w	lr, #0
 80192a2:	9a01      	ldr	r2, [sp, #4]
 80192a4:	8103      	strh	r3, [r0, #8]
 80192a6:	6102      	str	r2, [r0, #16]
 80192a8:	f880 e014 	strb.w	lr, [r0, #20]
 80192ac:	b1d3      	cbz	r3, 80192e4 <uxr_init_input_reliable_stream+0x4c>
 80192ae:	f8c1 e000 	str.w	lr, [r1]
 80192b2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80192b6:	f1bc 0f01 	cmp.w	ip, #1
 80192ba:	d913      	bls.n	80192e4 <uxr_init_input_reliable_stream+0x4c>
 80192bc:	2301      	movs	r3, #1
 80192be:	fbb3 f1fc 	udiv	r1, r3, ip
 80192c2:	fb0c 3111 	mls	r1, ip, r1, r3
 80192c6:	b289      	uxth	r1, r1
 80192c8:	6842      	ldr	r2, [r0, #4]
 80192ca:	fbb2 f2fc 	udiv	r2, r2, ip
 80192ce:	fb01 f202 	mul.w	r2, r1, r2
 80192d2:	6801      	ldr	r1, [r0, #0]
 80192d4:	f841 e002 	str.w	lr, [r1, r2]
 80192d8:	3301      	adds	r3, #1
 80192da:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80192de:	b29b      	uxth	r3, r3
 80192e0:	459c      	cmp	ip, r3
 80192e2:	d8ec      	bhi.n	80192be <uxr_init_input_reliable_stream+0x26>
 80192e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80192e8:	60c3      	str	r3, [r0, #12]
 80192ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80192ee:	bf00      	nop

080192f0 <uxr_reset_input_reliable_stream>:
 80192f0:	8901      	ldrh	r1, [r0, #8]
 80192f2:	b1e9      	cbz	r1, 8019330 <uxr_reset_input_reliable_stream+0x40>
 80192f4:	f04f 0c00 	mov.w	ip, #0
 80192f8:	b500      	push	{lr}
 80192fa:	4663      	mov	r3, ip
 80192fc:	46e6      	mov	lr, ip
 80192fe:	fbb3 f2f1 	udiv	r2, r3, r1
 8019302:	fb01 3312 	mls	r3, r1, r2, r3
 8019306:	b29b      	uxth	r3, r3
 8019308:	6842      	ldr	r2, [r0, #4]
 801930a:	fbb2 f2f1 	udiv	r2, r2, r1
 801930e:	fb02 f303 	mul.w	r3, r2, r3
 8019312:	6802      	ldr	r2, [r0, #0]
 8019314:	f842 e003 	str.w	lr, [r2, r3]
 8019318:	f10c 0c01 	add.w	ip, ip, #1
 801931c:	8901      	ldrh	r1, [r0, #8]
 801931e:	fa1f f38c 	uxth.w	r3, ip
 8019322:	4299      	cmp	r1, r3
 8019324:	d8eb      	bhi.n	80192fe <uxr_reset_input_reliable_stream+0xe>
 8019326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801932a:	60c3      	str	r3, [r0, #12]
 801932c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019334:	60c3      	str	r3, [r0, #12]
 8019336:	4770      	bx	lr

08019338 <uxr_receive_reliable_message>:
 8019338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801933c:	4604      	mov	r4, r0
 801933e:	460d      	mov	r5, r1
 8019340:	8901      	ldrh	r1, [r0, #8]
 8019342:	8980      	ldrh	r0, [r0, #12]
 8019344:	4690      	mov	r8, r2
 8019346:	461f      	mov	r7, r3
 8019348:	f000 fd86 	bl	8019e58 <uxr_seq_num_add>
 801934c:	4629      	mov	r1, r5
 801934e:	4606      	mov	r6, r0
 8019350:	89a0      	ldrh	r0, [r4, #12]
 8019352:	f000 fd89 	bl	8019e68 <uxr_seq_num_cmp>
 8019356:	2800      	cmp	r0, #0
 8019358:	db0a      	blt.n	8019370 <uxr_receive_reliable_message+0x38>
 801935a:	2600      	movs	r6, #0
 801935c:	89e0      	ldrh	r0, [r4, #14]
 801935e:	4629      	mov	r1, r5
 8019360:	f000 fd82 	bl	8019e68 <uxr_seq_num_cmp>
 8019364:	2800      	cmp	r0, #0
 8019366:	da00      	bge.n	801936a <uxr_receive_reliable_message+0x32>
 8019368:	81e5      	strh	r5, [r4, #14]
 801936a:	4630      	mov	r0, r6
 801936c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019370:	4630      	mov	r0, r6
 8019372:	4629      	mov	r1, r5
 8019374:	f000 fd78 	bl	8019e68 <uxr_seq_num_cmp>
 8019378:	2800      	cmp	r0, #0
 801937a:	dbee      	blt.n	801935a <uxr_receive_reliable_message+0x22>
 801937c:	6923      	ldr	r3, [r4, #16]
 801937e:	4640      	mov	r0, r8
 8019380:	4798      	blx	r3
 8019382:	2101      	movs	r1, #1
 8019384:	4681      	mov	r9, r0
 8019386:	89a0      	ldrh	r0, [r4, #12]
 8019388:	f000 fd66 	bl	8019e58 <uxr_seq_num_add>
 801938c:	f1b9 0f00 	cmp.w	r9, #0
 8019390:	d101      	bne.n	8019396 <uxr_receive_reliable_message+0x5e>
 8019392:	4285      	cmp	r5, r0
 8019394:	d047      	beq.n	8019426 <uxr_receive_reliable_message+0xee>
 8019396:	8922      	ldrh	r2, [r4, #8]
 8019398:	fbb5 f0f2 	udiv	r0, r5, r2
 801939c:	fb02 5010 	mls	r0, r2, r0, r5
 80193a0:	b280      	uxth	r0, r0
 80193a2:	6863      	ldr	r3, [r4, #4]
 80193a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80193a8:	fb00 f303 	mul.w	r3, r0, r3
 80193ac:	6820      	ldr	r0, [r4, #0]
 80193ae:	3304      	adds	r3, #4
 80193b0:	4418      	add	r0, r3
 80193b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d1cf      	bne.n	801935a <uxr_receive_reliable_message+0x22>
 80193ba:	4641      	mov	r1, r8
 80193bc:	463a      	mov	r2, r7
 80193be:	f002 f8cb 	bl	801b558 <memcpy>
 80193c2:	8921      	ldrh	r1, [r4, #8]
 80193c4:	fbb5 f2f1 	udiv	r2, r5, r1
 80193c8:	fb01 5212 	mls	r2, r1, r2, r5
 80193cc:	b292      	uxth	r2, r2
 80193ce:	6863      	ldr	r3, [r4, #4]
 80193d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80193d4:	fb02 f303 	mul.w	r3, r2, r3
 80193d8:	6822      	ldr	r2, [r4, #0]
 80193da:	50d7      	str	r7, [r2, r3]
 80193dc:	9a08      	ldr	r2, [sp, #32]
 80193de:	2301      	movs	r3, #1
 80193e0:	7013      	strb	r3, [r2, #0]
 80193e2:	f1b9 0f00 	cmp.w	r9, #0
 80193e6:	d0b8      	beq.n	801935a <uxr_receive_reliable_message+0x22>
 80193e8:	89a6      	ldrh	r6, [r4, #12]
 80193ea:	4630      	mov	r0, r6
 80193ec:	2101      	movs	r1, #1
 80193ee:	f000 fd33 	bl	8019e58 <uxr_seq_num_add>
 80193f2:	8922      	ldrh	r2, [r4, #8]
 80193f4:	6863      	ldr	r3, [r4, #4]
 80193f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80193fa:	4606      	mov	r6, r0
 80193fc:	fbb0 f0f2 	udiv	r0, r0, r2
 8019400:	fb02 6010 	mls	r0, r2, r0, r6
 8019404:	b280      	uxth	r0, r0
 8019406:	fb00 f303 	mul.w	r3, r0, r3
 801940a:	6820      	ldr	r0, [r4, #0]
 801940c:	3304      	adds	r3, #4
 801940e:	4418      	add	r0, r3
 8019410:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019414:	2b00      	cmp	r3, #0
 8019416:	d0a0      	beq.n	801935a <uxr_receive_reliable_message+0x22>
 8019418:	6923      	ldr	r3, [r4, #16]
 801941a:	4798      	blx	r3
 801941c:	2802      	cmp	r0, #2
 801941e:	d008      	beq.n	8019432 <uxr_receive_reliable_message+0xfa>
 8019420:	2801      	cmp	r0, #1
 8019422:	d0e2      	beq.n	80193ea <uxr_receive_reliable_message+0xb2>
 8019424:	e799      	b.n	801935a <uxr_receive_reliable_message+0x22>
 8019426:	9b08      	ldr	r3, [sp, #32]
 8019428:	81a5      	strh	r5, [r4, #12]
 801942a:	2601      	movs	r6, #1
 801942c:	f883 9000 	strb.w	r9, [r3]
 8019430:	e794      	b.n	801935c <uxr_receive_reliable_message+0x24>
 8019432:	2601      	movs	r6, #1
 8019434:	e792      	b.n	801935c <uxr_receive_reliable_message+0x24>
 8019436:	bf00      	nop

08019438 <uxr_next_input_reliable_buffer_available>:
 8019438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801943c:	4604      	mov	r4, r0
 801943e:	460f      	mov	r7, r1
 8019440:	8980      	ldrh	r0, [r0, #12]
 8019442:	2101      	movs	r1, #1
 8019444:	4690      	mov	r8, r2
 8019446:	f000 fd07 	bl	8019e58 <uxr_seq_num_add>
 801944a:	8922      	ldrh	r2, [r4, #8]
 801944c:	fbb0 f6f2 	udiv	r6, r0, r2
 8019450:	fb02 0616 	mls	r6, r2, r6, r0
 8019454:	b2b6      	uxth	r6, r6
 8019456:	6863      	ldr	r3, [r4, #4]
 8019458:	fbb3 f3f2 	udiv	r3, r3, r2
 801945c:	fb06 f303 	mul.w	r3, r6, r3
 8019460:	6826      	ldr	r6, [r4, #0]
 8019462:	3304      	adds	r3, #4
 8019464:	441e      	add	r6, r3
 8019466:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801946a:	f1b9 0f00 	cmp.w	r9, #0
 801946e:	d023      	beq.n	80194b8 <uxr_next_input_reliable_buffer_available+0x80>
 8019470:	6923      	ldr	r3, [r4, #16]
 8019472:	4605      	mov	r5, r0
 8019474:	4630      	mov	r0, r6
 8019476:	4798      	blx	r3
 8019478:	4682      	mov	sl, r0
 801947a:	b300      	cbz	r0, 80194be <uxr_next_input_reliable_buffer_available+0x86>
 801947c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8019480:	2101      	movs	r1, #1
 8019482:	4650      	mov	r0, sl
 8019484:	f000 fce8 	bl	8019e58 <uxr_seq_num_add>
 8019488:	8921      	ldrh	r1, [r4, #8]
 801948a:	fbb0 f2f1 	udiv	r2, r0, r1
 801948e:	4682      	mov	sl, r0
 8019490:	fb01 0212 	mls	r2, r1, r2, r0
 8019494:	e9d4 0300 	ldrd	r0, r3, [r4]
 8019498:	b292      	uxth	r2, r2
 801949a:	fbb3 f3f1 	udiv	r3, r3, r1
 801949e:	fb02 f303 	mul.w	r3, r2, r3
 80194a2:	3304      	adds	r3, #4
 80194a4:	4418      	add	r0, r3
 80194a6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80194aa:	b12b      	cbz	r3, 80194b8 <uxr_next_input_reliable_buffer_available+0x80>
 80194ac:	6923      	ldr	r3, [r4, #16]
 80194ae:	4798      	blx	r3
 80194b0:	2802      	cmp	r0, #2
 80194b2:	d01b      	beq.n	80194ec <uxr_next_input_reliable_buffer_available+0xb4>
 80194b4:	2801      	cmp	r0, #1
 80194b6:	d0e3      	beq.n	8019480 <uxr_next_input_reliable_buffer_available+0x48>
 80194b8:	2000      	movs	r0, #0
 80194ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194be:	464a      	mov	r2, r9
 80194c0:	4631      	mov	r1, r6
 80194c2:	4638      	mov	r0, r7
 80194c4:	f7fa fa44 	bl	8013950 <ucdr_init_buffer>
 80194c8:	8921      	ldrh	r1, [r4, #8]
 80194ca:	fbb5 f2f1 	udiv	r2, r5, r1
 80194ce:	fb01 5212 	mls	r2, r1, r2, r5
 80194d2:	b292      	uxth	r2, r2
 80194d4:	6863      	ldr	r3, [r4, #4]
 80194d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80194da:	fb02 f303 	mul.w	r3, r2, r3
 80194de:	6822      	ldr	r2, [r4, #0]
 80194e0:	f842 a003 	str.w	sl, [r2, r3]
 80194e4:	2001      	movs	r0, #1
 80194e6:	81a5      	strh	r5, [r4, #12]
 80194e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194ec:	8920      	ldrh	r0, [r4, #8]
 80194ee:	fbb5 f3f0 	udiv	r3, r5, r0
 80194f2:	fb00 5513 	mls	r5, r0, r3, r5
 80194f6:	b2ad      	uxth	r5, r5
 80194f8:	6863      	ldr	r3, [r4, #4]
 80194fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80194fe:	fb03 f505 	mul.w	r5, r3, r5
 8019502:	6823      	ldr	r3, [r4, #0]
 8019504:	2000      	movs	r0, #0
 8019506:	5158      	str	r0, [r3, r5]
 8019508:	eb06 0108 	add.w	r1, r6, r8
 801950c:	eba9 0208 	sub.w	r2, r9, r8
 8019510:	4638      	mov	r0, r7
 8019512:	f7fa fa1d 	bl	8013950 <ucdr_init_buffer>
 8019516:	4638      	mov	r0, r7
 8019518:	4903      	ldr	r1, [pc, #12]	; (8019528 <uxr_next_input_reliable_buffer_available+0xf0>)
 801951a:	4622      	mov	r2, r4
 801951c:	f7fa f9ec 	bl	80138f8 <ucdr_set_on_full_buffer_callback>
 8019520:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8019524:	2001      	movs	r0, #1
 8019526:	e7c8      	b.n	80194ba <uxr_next_input_reliable_buffer_available+0x82>
 8019528:	0801922d 	.word	0x0801922d

0801952c <uxr_process_heartbeat>:
 801952c:	b538      	push	{r3, r4, r5, lr}
 801952e:	4611      	mov	r1, r2
 8019530:	4604      	mov	r4, r0
 8019532:	89c0      	ldrh	r0, [r0, #14]
 8019534:	4615      	mov	r5, r2
 8019536:	f000 fc97 	bl	8019e68 <uxr_seq_num_cmp>
 801953a:	2800      	cmp	r0, #0
 801953c:	bfb8      	it	lt
 801953e:	81e5      	strhlt	r5, [r4, #14]
 8019540:	bd38      	pop	{r3, r4, r5, pc}
 8019542:	bf00      	nop

08019544 <uxr_compute_acknack>:
 8019544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019548:	8903      	ldrh	r3, [r0, #8]
 801954a:	8985      	ldrh	r5, [r0, #12]
 801954c:	4604      	mov	r4, r0
 801954e:	460e      	mov	r6, r1
 8019550:	b1d3      	cbz	r3, 8019588 <uxr_compute_acknack+0x44>
 8019552:	4628      	mov	r0, r5
 8019554:	2701      	movs	r7, #1
 8019556:	e003      	b.n	8019560 <uxr_compute_acknack+0x1c>
 8019558:	4567      	cmp	r7, ip
 801955a:	d215      	bcs.n	8019588 <uxr_compute_acknack+0x44>
 801955c:	89a0      	ldrh	r0, [r4, #12]
 801955e:	3701      	adds	r7, #1
 8019560:	b2b9      	uxth	r1, r7
 8019562:	f000 fc79 	bl	8019e58 <uxr_seq_num_add>
 8019566:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801956a:	fbb0 f3fc 	udiv	r3, r0, ip
 801956e:	fb0c 0313 	mls	r3, ip, r3, r0
 8019572:	b29a      	uxth	r2, r3
 8019574:	e9d4 1300 	ldrd	r1, r3, [r4]
 8019578:	fbb3 f3fc 	udiv	r3, r3, ip
 801957c:	fb02 f303 	mul.w	r3, r2, r3
 8019580:	58cb      	ldr	r3, [r1, r3]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d1e8      	bne.n	8019558 <uxr_compute_acknack+0x14>
 8019586:	4605      	mov	r5, r0
 8019588:	8035      	strh	r5, [r6, #0]
 801958a:	2101      	movs	r1, #1
 801958c:	4628      	mov	r0, r5
 801958e:	89e7      	ldrh	r7, [r4, #14]
 8019590:	f000 fc66 	bl	8019e60 <uxr_seq_num_sub>
 8019594:	4601      	mov	r1, r0
 8019596:	4638      	mov	r0, r7
 8019598:	f000 fc62 	bl	8019e60 <uxr_seq_num_sub>
 801959c:	4605      	mov	r5, r0
 801959e:	b318      	cbz	r0, 80195e8 <uxr_compute_acknack+0xa4>
 80195a0:	f04f 0900 	mov.w	r9, #0
 80195a4:	464f      	mov	r7, r9
 80195a6:	f04f 0801 	mov.w	r8, #1
 80195aa:	fa1f f189 	uxth.w	r1, r9
 80195ae:	8830      	ldrh	r0, [r6, #0]
 80195b0:	f000 fc52 	bl	8019e58 <uxr_seq_num_add>
 80195b4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80195b8:	fbb0 f3fc 	udiv	r3, r0, ip
 80195bc:	e9d4 1200 	ldrd	r1, r2, [r4]
 80195c0:	fb03 001c 	mls	r0, r3, ip, r0
 80195c4:	b283      	uxth	r3, r0
 80195c6:	fbb2 f2fc 	udiv	r2, r2, ip
 80195ca:	fb02 f303 	mul.w	r3, r2, r3
 80195ce:	fa08 f209 	lsl.w	r2, r8, r9
 80195d2:	58cb      	ldr	r3, [r1, r3]
 80195d4:	f109 0901 	add.w	r9, r9, #1
 80195d8:	b90b      	cbnz	r3, 80195de <uxr_compute_acknack+0x9a>
 80195da:	4317      	orrs	r7, r2
 80195dc:	b2bf      	uxth	r7, r7
 80195de:	454d      	cmp	r5, r9
 80195e0:	d1e3      	bne.n	80195aa <uxr_compute_acknack+0x66>
 80195e2:	4638      	mov	r0, r7
 80195e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195e8:	4607      	mov	r7, r0
 80195ea:	4638      	mov	r0, r7
 80195ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080195f0 <uxr_init_output_best_effort_stream>:
 80195f0:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80195f4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80195f8:	6001      	str	r1, [r0, #0]
 80195fa:	7303      	strb	r3, [r0, #12]
 80195fc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019600:	4770      	bx	lr
 8019602:	bf00      	nop

08019604 <uxr_reset_output_best_effort_stream>:
 8019604:	7b02      	ldrb	r2, [r0, #12]
 8019606:	6042      	str	r2, [r0, #4]
 8019608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801960c:	81c3      	strh	r3, [r0, #14]
 801960e:	4770      	bx	lr

08019610 <uxr_prepare_best_effort_buffer_to_write>:
 8019610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019612:	4604      	mov	r4, r0
 8019614:	b083      	sub	sp, #12
 8019616:	6840      	ldr	r0, [r0, #4]
 8019618:	460d      	mov	r5, r1
 801961a:	4616      	mov	r6, r2
 801961c:	f7fb fe12 	bl	8015244 <uxr_submessage_padding>
 8019620:	6863      	ldr	r3, [r4, #4]
 8019622:	4418      	add	r0, r3
 8019624:	68a3      	ldr	r3, [r4, #8]
 8019626:	1942      	adds	r2, r0, r5
 8019628:	4293      	cmp	r3, r2
 801962a:	bf2c      	ite	cs
 801962c:	2701      	movcs	r7, #1
 801962e:	2700      	movcc	r7, #0
 8019630:	d202      	bcs.n	8019638 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8019632:	4638      	mov	r0, r7
 8019634:	b003      	add	sp, #12
 8019636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019638:	9000      	str	r0, [sp, #0]
 801963a:	6821      	ldr	r1, [r4, #0]
 801963c:	4630      	mov	r0, r6
 801963e:	2300      	movs	r3, #0
 8019640:	f7fa f974 	bl	801392c <ucdr_init_buffer_origin_offset>
 8019644:	6861      	ldr	r1, [r4, #4]
 8019646:	4638      	mov	r0, r7
 8019648:	4429      	add	r1, r5
 801964a:	6061      	str	r1, [r4, #4]
 801964c:	b003      	add	sp, #12
 801964e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019650 <uxr_prepare_best_effort_buffer_to_send>:
 8019650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019654:	4604      	mov	r4, r0
 8019656:	461d      	mov	r5, r3
 8019658:	6840      	ldr	r0, [r0, #4]
 801965a:	7b23      	ldrb	r3, [r4, #12]
 801965c:	4298      	cmp	r0, r3
 801965e:	bf8c      	ite	hi
 8019660:	2601      	movhi	r6, #1
 8019662:	2600      	movls	r6, #0
 8019664:	d802      	bhi.n	801966c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8019666:	4630      	mov	r0, r6
 8019668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801966c:	4688      	mov	r8, r1
 801966e:	89e0      	ldrh	r0, [r4, #14]
 8019670:	2101      	movs	r1, #1
 8019672:	4617      	mov	r7, r2
 8019674:	f000 fbf0 	bl	8019e58 <uxr_seq_num_add>
 8019678:	6823      	ldr	r3, [r4, #0]
 801967a:	81e0      	strh	r0, [r4, #14]
 801967c:	8028      	strh	r0, [r5, #0]
 801967e:	f8c8 3000 	str.w	r3, [r8]
 8019682:	6863      	ldr	r3, [r4, #4]
 8019684:	603b      	str	r3, [r7, #0]
 8019686:	7b23      	ldrb	r3, [r4, #12]
 8019688:	6063      	str	r3, [r4, #4]
 801968a:	4630      	mov	r0, r6
 801968c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019690 <on_full_output_buffer>:
 8019690:	b538      	push	{r3, r4, r5, lr}
 8019692:	6802      	ldr	r2, [r0, #0]
 8019694:	460c      	mov	r4, r1
 8019696:	6809      	ldr	r1, [r1, #0]
 8019698:	8923      	ldrh	r3, [r4, #8]
 801969a:	eba2 0c01 	sub.w	ip, r2, r1
 801969e:	6862      	ldr	r2, [r4, #4]
 80196a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80196a4:	fbbc fcf2 	udiv	ip, ip, r2
 80196a8:	f10c 0c01 	add.w	ip, ip, #1
 80196ac:	fa1f fc8c 	uxth.w	ip, ip
 80196b0:	fbbc fef3 	udiv	lr, ip, r3
 80196b4:	fb03 c31e 	mls	r3, r3, lr, ip
 80196b8:	b29b      	uxth	r3, r3
 80196ba:	fb02 f303 	mul.w	r3, r2, r3
 80196be:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80196c2:	58ca      	ldr	r2, [r1, r3]
 80196c4:	4463      	add	r3, ip
 80196c6:	eba2 020c 	sub.w	r2, r2, ip
 80196ca:	3308      	adds	r3, #8
 80196cc:	4605      	mov	r5, r0
 80196ce:	4419      	add	r1, r3
 80196d0:	3a04      	subs	r2, #4
 80196d2:	6903      	ldr	r3, [r0, #16]
 80196d4:	f7fa f934 	bl	8013940 <ucdr_init_buffer_origin>
 80196d8:	4628      	mov	r0, r5
 80196da:	4903      	ldr	r1, [pc, #12]	; (80196e8 <on_full_output_buffer+0x58>)
 80196dc:	4622      	mov	r2, r4
 80196de:	f7fa f90b 	bl	80138f8 <ucdr_set_on_full_buffer_callback>
 80196e2:	2000      	movs	r0, #0
 80196e4:	bd38      	pop	{r3, r4, r5, pc}
 80196e6:	bf00      	nop
 80196e8:	08019691 	.word	0x08019691

080196ec <uxr_init_output_reliable_stream>:
 80196ec:	b410      	push	{r4}
 80196ee:	f89d c004 	ldrb.w	ip, [sp, #4]
 80196f2:	8103      	strh	r3, [r0, #8]
 80196f4:	e9c0 1200 	strd	r1, r2, [r0]
 80196f8:	f880 c00c 	strb.w	ip, [r0, #12]
 80196fc:	b1d3      	cbz	r3, 8019734 <uxr_init_output_reliable_stream+0x48>
 80196fe:	f8c1 c000 	str.w	ip, [r1]
 8019702:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019706:	f1bc 0f01 	cmp.w	ip, #1
 801970a:	d913      	bls.n	8019734 <uxr_init_output_reliable_stream+0x48>
 801970c:	2301      	movs	r3, #1
 801970e:	fbb3 f1fc 	udiv	r1, r3, ip
 8019712:	fb0c 3111 	mls	r1, ip, r1, r3
 8019716:	b289      	uxth	r1, r1
 8019718:	6842      	ldr	r2, [r0, #4]
 801971a:	6804      	ldr	r4, [r0, #0]
 801971c:	fbb2 f2fc 	udiv	r2, r2, ip
 8019720:	fb01 f202 	mul.w	r2, r1, r2
 8019724:	7b01      	ldrb	r1, [r0, #12]
 8019726:	50a1      	str	r1, [r4, r2]
 8019728:	3301      	adds	r3, #1
 801972a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801972e:	b29b      	uxth	r3, r3
 8019730:	459c      	cmp	ip, r3
 8019732:	d8ec      	bhi.n	801970e <uxr_init_output_reliable_stream+0x22>
 8019734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019738:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801973c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8019740:	4905      	ldr	r1, [pc, #20]	; (8019758 <uxr_init_output_reliable_stream+0x6c>)
 8019742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019746:	f8c0 100e 	str.w	r1, [r0, #14]
 801974a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801974e:	2300      	movs	r3, #0
 8019750:	8242      	strh	r2, [r0, #18]
 8019752:	8403      	strh	r3, [r0, #32]
 8019754:	4770      	bx	lr
 8019756:	bf00      	nop
 8019758:	ffff0000 	.word	0xffff0000

0801975c <uxr_reset_output_reliable_stream>:
 801975c:	8901      	ldrh	r1, [r0, #8]
 801975e:	b1b1      	cbz	r1, 801978e <uxr_reset_output_reliable_stream+0x32>
 8019760:	f04f 0c00 	mov.w	ip, #0
 8019764:	4663      	mov	r3, ip
 8019766:	fbb3 f2f1 	udiv	r2, r3, r1
 801976a:	fb01 3312 	mls	r3, r1, r2, r3
 801976e:	b29b      	uxth	r3, r3
 8019770:	6842      	ldr	r2, [r0, #4]
 8019772:	fbb2 f2f1 	udiv	r2, r2, r1
 8019776:	6801      	ldr	r1, [r0, #0]
 8019778:	fb02 f303 	mul.w	r3, r2, r3
 801977c:	7b02      	ldrb	r2, [r0, #12]
 801977e:	50ca      	str	r2, [r1, r3]
 8019780:	f10c 0c01 	add.w	ip, ip, #1
 8019784:	8901      	ldrh	r1, [r0, #8]
 8019786:	fa1f f38c 	uxth.w	r3, ip
 801978a:	4299      	cmp	r1, r3
 801978c:	d8eb      	bhi.n	8019766 <uxr_reset_output_reliable_stream+0xa>
 801978e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019792:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019796:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801979a:	4904      	ldr	r1, [pc, #16]	; (80197ac <uxr_reset_output_reliable_stream+0x50>)
 801979c:	f8c0 100e 	str.w	r1, [r0, #14]
 80197a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80197a4:	2300      	movs	r3, #0
 80197a6:	8242      	strh	r2, [r0, #18]
 80197a8:	8403      	strh	r3, [r0, #32]
 80197aa:	4770      	bx	lr
 80197ac:	ffff0000 	.word	0xffff0000

080197b0 <uxr_prepare_reliable_buffer_to_write>:
 80197b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197b4:	4604      	mov	r4, r0
 80197b6:	8900      	ldrh	r0, [r0, #8]
 80197b8:	89e5      	ldrh	r5, [r4, #14]
 80197ba:	fbb5 f3f0 	udiv	r3, r5, r0
 80197be:	b091      	sub	sp, #68	; 0x44
 80197c0:	fb00 5313 	mls	r3, r0, r3, r5
 80197c4:	b29b      	uxth	r3, r3
 80197c6:	9205      	str	r2, [sp, #20]
 80197c8:	6862      	ldr	r2, [r4, #4]
 80197ca:	fbb2 f0f0 	udiv	r0, r2, r0
 80197ce:	6822      	ldr	r2, [r4, #0]
 80197d0:	9006      	str	r0, [sp, #24]
 80197d2:	fb00 f303 	mul.w	r3, r0, r3
 80197d6:	3304      	adds	r3, #4
 80197d8:	18d3      	adds	r3, r2, r3
 80197da:	4689      	mov	r9, r1
 80197dc:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80197e0:	9304      	str	r3, [sp, #16]
 80197e2:	f1a0 0804 	sub.w	r8, r0, #4
 80197e6:	2104      	movs	r1, #4
 80197e8:	4630      	mov	r0, r6
 80197ea:	f7fa f8b5 	bl	8013958 <ucdr_alignment>
 80197ee:	1833      	adds	r3, r6, r0
 80197f0:	eb03 0609 	add.w	r6, r3, r9
 80197f4:	4546      	cmp	r6, r8
 80197f6:	9303      	str	r3, [sp, #12]
 80197f8:	f240 80d6 	bls.w	80199a8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80197fc:	7b26      	ldrb	r6, [r4, #12]
 80197fe:	eb06 0309 	add.w	r3, r6, r9
 8019802:	4543      	cmp	r3, r8
 8019804:	f240 80bd 	bls.w	8019982 <uxr_prepare_reliable_buffer_to_write+0x1d2>
 8019808:	9b03      	ldr	r3, [sp, #12]
 801980a:	3304      	adds	r3, #4
 801980c:	4543      	cmp	r3, r8
 801980e:	f080 810d 	bcs.w	8019a2c <uxr_prepare_reliable_buffer_to_write+0x27c>
 8019812:	8920      	ldrh	r0, [r4, #8]
 8019814:	2800      	cmp	r0, #0
 8019816:	f000 8122 	beq.w	8019a5e <uxr_prepare_reliable_buffer_to_write+0x2ae>
 801981a:	2100      	movs	r1, #0
 801981c:	6827      	ldr	r7, [r4, #0]
 801981e:	6862      	ldr	r2, [r4, #4]
 8019820:	fbb2 fef0 	udiv	lr, r2, r0
 8019824:	468c      	mov	ip, r1
 8019826:	460b      	mov	r3, r1
 8019828:	fbb3 f2f0 	udiv	r2, r3, r0
 801982c:	fb00 3312 	mls	r3, r0, r2, r3
 8019830:	b29b      	uxth	r3, r3
 8019832:	fb0e f303 	mul.w	r3, lr, r3
 8019836:	3101      	adds	r1, #1
 8019838:	58fa      	ldr	r2, [r7, r3]
 801983a:	4296      	cmp	r6, r2
 801983c:	bf08      	it	eq
 801983e:	f10c 0c01 	addeq.w	ip, ip, #1
 8019842:	b28b      	uxth	r3, r1
 8019844:	bf08      	it	eq
 8019846:	fa1f fc8c 	uxtheq.w	ip, ip
 801984a:	4283      	cmp	r3, r0
 801984c:	d3ec      	bcc.n	8019828 <uxr_prepare_reliable_buffer_to_write+0x78>
 801984e:	9b03      	ldr	r3, [sp, #12]
 8019850:	f1a8 0704 	sub.w	r7, r8, #4
 8019854:	b2bf      	uxth	r7, r7
 8019856:	1bbe      	subs	r6, r7, r6
 8019858:	1aff      	subs	r7, r7, r3
 801985a:	b2bf      	uxth	r7, r7
 801985c:	b2b6      	uxth	r6, r6
 801985e:	eba9 0907 	sub.w	r9, r9, r7
 8019862:	fbb9 faf6 	udiv	sl, r9, r6
 8019866:	fb06 911a 	mls	r1, r6, sl, r9
 801986a:	9607      	str	r6, [sp, #28]
 801986c:	2900      	cmp	r1, #0
 801986e:	f040 80bc 	bne.w	80199ea <uxr_prepare_reliable_buffer_to_write+0x23a>
 8019872:	fa1f fa8a 	uxth.w	sl, sl
 8019876:	45e2      	cmp	sl, ip
 8019878:	f200 8092 	bhi.w	80199a0 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801987c:	f10d 0b20 	add.w	fp, sp, #32
 8019880:	f1ba 0f00 	cmp.w	sl, #0
 8019884:	d03a      	beq.n	80198fc <uxr_prepare_reliable_buffer_to_write+0x14c>
 8019886:	f04f 0900 	mov.w	r9, #0
 801988a:	f10d 0b20 	add.w	fp, sp, #32
 801988e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019892:	fbb5 fcf0 	udiv	ip, r5, r0
 8019896:	fb00 511c 	mls	r1, r0, ip, r5
 801989a:	fa1f fc81 	uxth.w	ip, r1
 801989e:	fbb3 f1f0 	udiv	r1, r3, r0
 80198a2:	fb0c f101 	mul.w	r1, ip, r1
 80198a6:	3104      	adds	r1, #4
 80198a8:	4411      	add	r1, r2
 80198aa:	4658      	mov	r0, fp
 80198ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80198b0:	9300      	str	r3, [sp, #0]
 80198b2:	4642      	mov	r2, r8
 80198b4:	2300      	movs	r3, #0
 80198b6:	f7fa f839 	bl	801392c <ucdr_init_buffer_origin_offset>
 80198ba:	463a      	mov	r2, r7
 80198bc:	2300      	movs	r3, #0
 80198be:	210d      	movs	r1, #13
 80198c0:	4658      	mov	r0, fp
 80198c2:	f7fb fc7f 	bl	80151c4 <uxr_buffer_submessage_header>
 80198c6:	8921      	ldrh	r1, [r4, #8]
 80198c8:	fbb5 f2f1 	udiv	r2, r5, r1
 80198cc:	fb01 5212 	mls	r2, r1, r2, r5
 80198d0:	b292      	uxth	r2, r2
 80198d2:	6863      	ldr	r3, [r4, #4]
 80198d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80198d8:	fb02 f303 	mul.w	r3, r2, r3
 80198dc:	6822      	ldr	r2, [r4, #0]
 80198de:	4628      	mov	r0, r5
 80198e0:	f842 8003 	str.w	r8, [r2, r3]
 80198e4:	2101      	movs	r1, #1
 80198e6:	f000 fab7 	bl	8019e58 <uxr_seq_num_add>
 80198ea:	f109 0901 	add.w	r9, r9, #1
 80198ee:	fa1f f389 	uxth.w	r3, r9
 80198f2:	459a      	cmp	sl, r3
 80198f4:	4605      	mov	r5, r0
 80198f6:	4637      	mov	r7, r6
 80198f8:	8920      	ldrh	r0, [r4, #8]
 80198fa:	d8c8      	bhi.n	801988e <uxr_prepare_reliable_buffer_to_write+0xde>
 80198fc:	fbb5 f1f0 	udiv	r1, r5, r0
 8019900:	fb00 5111 	mls	r1, r0, r1, r5
 8019904:	b28e      	uxth	r6, r1
 8019906:	6863      	ldr	r3, [r4, #4]
 8019908:	fbb3 f1f0 	udiv	r1, r3, r0
 801990c:	6823      	ldr	r3, [r4, #0]
 801990e:	fb06 f101 	mul.w	r1, r6, r1
 8019912:	3104      	adds	r1, #4
 8019914:	4419      	add	r1, r3
 8019916:	4642      	mov	r2, r8
 8019918:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801991c:	9000      	str	r0, [sp, #0]
 801991e:	2300      	movs	r3, #0
 8019920:	4658      	mov	r0, fp
 8019922:	f7fa f803 	bl	801392c <ucdr_init_buffer_origin_offset>
 8019926:	9e07      	ldr	r6, [sp, #28]
 8019928:	4658      	mov	r0, fp
 801992a:	b2b2      	uxth	r2, r6
 801992c:	2302      	movs	r3, #2
 801992e:	210d      	movs	r1, #13
 8019930:	f7fb fc48 	bl	80151c4 <uxr_buffer_submessage_header>
 8019934:	9b06      	ldr	r3, [sp, #24]
 8019936:	7b20      	ldrb	r0, [r4, #12]
 8019938:	8927      	ldrh	r7, [r4, #8]
 801993a:	f1a3 0208 	sub.w	r2, r3, #8
 801993e:	9b03      	ldr	r3, [sp, #12]
 8019940:	3004      	adds	r0, #4
 8019942:	1ad2      	subs	r2, r2, r3
 8019944:	1d19      	adds	r1, r3, #4
 8019946:	9b04      	ldr	r3, [sp, #16]
 8019948:	4430      	add	r0, r6
 801994a:	fbb5 f6f7 	udiv	r6, r5, r7
 801994e:	fb07 5616 	mls	r6, r7, r6, r5
 8019952:	440b      	add	r3, r1
 8019954:	b2b6      	uxth	r6, r6
 8019956:	4619      	mov	r1, r3
 8019958:	6863      	ldr	r3, [r4, #4]
 801995a:	fbb3 f3f7 	udiv	r3, r3, r7
 801995e:	fb06 f303 	mul.w	r3, r6, r3
 8019962:	6826      	ldr	r6, [r4, #0]
 8019964:	50f0      	str	r0, [r6, r3]
 8019966:	9e05      	ldr	r6, [sp, #20]
 8019968:	4630      	mov	r0, r6
 801996a:	f7f9 fff1 	bl	8013950 <ucdr_init_buffer>
 801996e:	4630      	mov	r0, r6
 8019970:	493c      	ldr	r1, [pc, #240]	; (8019a64 <uxr_prepare_reliable_buffer_to_write+0x2b4>)
 8019972:	4622      	mov	r2, r4
 8019974:	f7f9 ffc0 	bl	80138f8 <ucdr_set_on_full_buffer_callback>
 8019978:	2001      	movs	r0, #1
 801997a:	81e5      	strh	r5, [r4, #14]
 801997c:	b011      	add	sp, #68	; 0x44
 801997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019982:	2101      	movs	r1, #1
 8019984:	89e0      	ldrh	r0, [r4, #14]
 8019986:	f000 fa67 	bl	8019e58 <uxr_seq_num_add>
 801998a:	8921      	ldrh	r1, [r4, #8]
 801998c:	4605      	mov	r5, r0
 801998e:	8a60      	ldrh	r0, [r4, #18]
 8019990:	f000 fa62 	bl	8019e58 <uxr_seq_num_add>
 8019994:	4601      	mov	r1, r0
 8019996:	4628      	mov	r0, r5
 8019998:	f000 fa66 	bl	8019e68 <uxr_seq_num_cmp>
 801999c:	2800      	cmp	r0, #0
 801999e:	dd2a      	ble.n	80199f6 <uxr_prepare_reliable_buffer_to_write+0x246>
 80199a0:	2000      	movs	r0, #0
 80199a2:	b011      	add	sp, #68	; 0x44
 80199a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199a8:	8921      	ldrh	r1, [r4, #8]
 80199aa:	8a60      	ldrh	r0, [r4, #18]
 80199ac:	f000 fa54 	bl	8019e58 <uxr_seq_num_add>
 80199b0:	4601      	mov	r1, r0
 80199b2:	4628      	mov	r0, r5
 80199b4:	f000 fa58 	bl	8019e68 <uxr_seq_num_cmp>
 80199b8:	2800      	cmp	r0, #0
 80199ba:	dcf1      	bgt.n	80199a0 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80199bc:	8927      	ldrh	r7, [r4, #8]
 80199be:	fbb5 f2f7 	udiv	r2, r5, r7
 80199c2:	fb07 5512 	mls	r5, r7, r2, r5
 80199c6:	b2ad      	uxth	r5, r5
 80199c8:	6863      	ldr	r3, [r4, #4]
 80199ca:	6822      	ldr	r2, [r4, #0]
 80199cc:	fbb3 f3f7 	udiv	r3, r3, r7
 80199d0:	fb05 f303 	mul.w	r3, r5, r3
 80199d4:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 80199d8:	50d6      	str	r6, [r2, r3]
 80199da:	9a03      	ldr	r2, [sp, #12]
 80199dc:	9200      	str	r2, [sp, #0]
 80199de:	2300      	movs	r3, #0
 80199e0:	4632      	mov	r2, r6
 80199e2:	f7f9 ffa3 	bl	801392c <ucdr_init_buffer_origin_offset>
 80199e6:	2001      	movs	r0, #1
 80199e8:	e7db      	b.n	80199a2 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 80199ea:	f10a 0a01 	add.w	sl, sl, #1
 80199ee:	fa1f fa8a 	uxth.w	sl, sl
 80199f2:	9107      	str	r1, [sp, #28]
 80199f4:	e73f      	b.n	8019876 <uxr_prepare_reliable_buffer_to_write+0xc6>
 80199f6:	8921      	ldrh	r1, [r4, #8]
 80199f8:	fbb5 f3f1 	udiv	r3, r5, r1
 80199fc:	fb01 5313 	mls	r3, r1, r3, r5
 8019a00:	b29a      	uxth	r2, r3
 8019a02:	6863      	ldr	r3, [r4, #4]
 8019a04:	fbb3 f3f1 	udiv	r3, r3, r1
 8019a08:	6821      	ldr	r1, [r4, #0]
 8019a0a:	9805      	ldr	r0, [sp, #20]
 8019a0c:	fb02 f303 	mul.w	r3, r2, r3
 8019a10:	3304      	adds	r3, #4
 8019a12:	7b22      	ldrb	r2, [r4, #12]
 8019a14:	4419      	add	r1, r3
 8019a16:	444a      	add	r2, r9
 8019a18:	f841 2c04 	str.w	r2, [r1, #-4]
 8019a1c:	7b23      	ldrb	r3, [r4, #12]
 8019a1e:	9300      	str	r3, [sp, #0]
 8019a20:	2300      	movs	r3, #0
 8019a22:	f7f9 ff83 	bl	801392c <ucdr_init_buffer_origin_offset>
 8019a26:	81e5      	strh	r5, [r4, #14]
 8019a28:	2001      	movs	r0, #1
 8019a2a:	e7ba      	b.n	80199a2 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 8019a2c:	4628      	mov	r0, r5
 8019a2e:	2101      	movs	r1, #1
 8019a30:	f000 fa12 	bl	8019e58 <uxr_seq_num_add>
 8019a34:	4605      	mov	r5, r0
 8019a36:	8920      	ldrh	r0, [r4, #8]
 8019a38:	fbb5 f3f0 	udiv	r3, r5, r0
 8019a3c:	fb00 5313 	mls	r3, r0, r3, r5
 8019a40:	b29a      	uxth	r2, r3
 8019a42:	6863      	ldr	r3, [r4, #4]
 8019a44:	fbb3 f3f0 	udiv	r3, r3, r0
 8019a48:	fb02 f303 	mul.w	r3, r2, r3
 8019a4c:	6822      	ldr	r2, [r4, #0]
 8019a4e:	7b26      	ldrb	r6, [r4, #12]
 8019a50:	3304      	adds	r3, #4
 8019a52:	18d3      	adds	r3, r2, r3
 8019a54:	9304      	str	r3, [sp, #16]
 8019a56:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019a5a:	9303      	str	r3, [sp, #12]
 8019a5c:	e6da      	b.n	8019814 <uxr_prepare_reliable_buffer_to_write+0x64>
 8019a5e:	4684      	mov	ip, r0
 8019a60:	e6f5      	b.n	801984e <uxr_prepare_reliable_buffer_to_write+0x9e>
 8019a62:	bf00      	nop
 8019a64:	08019691 	.word	0x08019691

08019a68 <uxr_prepare_next_reliable_buffer_to_send>:
 8019a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a6a:	4604      	mov	r4, r0
 8019a6c:	460f      	mov	r7, r1
 8019a6e:	8a00      	ldrh	r0, [r0, #16]
 8019a70:	2101      	movs	r1, #1
 8019a72:	4616      	mov	r6, r2
 8019a74:	461d      	mov	r5, r3
 8019a76:	f000 f9ef 	bl	8019e58 <uxr_seq_num_add>
 8019a7a:	8028      	strh	r0, [r5, #0]
 8019a7c:	8922      	ldrh	r2, [r4, #8]
 8019a7e:	fbb0 f3f2 	udiv	r3, r0, r2
 8019a82:	fb02 0c13 	mls	ip, r2, r3, r0
 8019a86:	fa1f fc8c 	uxth.w	ip, ip
 8019a8a:	6863      	ldr	r3, [r4, #4]
 8019a8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019a90:	fb0c fc03 	mul.w	ip, ip, r3
 8019a94:	6823      	ldr	r3, [r4, #0]
 8019a96:	89e1      	ldrh	r1, [r4, #14]
 8019a98:	f10c 0c04 	add.w	ip, ip, #4
 8019a9c:	4463      	add	r3, ip
 8019a9e:	603b      	str	r3, [r7, #0]
 8019aa0:	6823      	ldr	r3, [r4, #0]
 8019aa2:	449c      	add	ip, r3
 8019aa4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8019aa8:	6033      	str	r3, [r6, #0]
 8019aaa:	f000 f9dd 	bl	8019e68 <uxr_seq_num_cmp>
 8019aae:	2800      	cmp	r0, #0
 8019ab0:	dd01      	ble.n	8019ab6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8019ab2:	2000      	movs	r0, #0
 8019ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ab6:	7b23      	ldrb	r3, [r4, #12]
 8019ab8:	6832      	ldr	r2, [r6, #0]
 8019aba:	429a      	cmp	r2, r3
 8019abc:	d9f9      	bls.n	8019ab2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019abe:	8a61      	ldrh	r1, [r4, #18]
 8019ac0:	8a20      	ldrh	r0, [r4, #16]
 8019ac2:	f000 f9cd 	bl	8019e60 <uxr_seq_num_sub>
 8019ac6:	8923      	ldrh	r3, [r4, #8]
 8019ac8:	4283      	cmp	r3, r0
 8019aca:	d0f2      	beq.n	8019ab2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019acc:	8828      	ldrh	r0, [r5, #0]
 8019ace:	89e3      	ldrh	r3, [r4, #14]
 8019ad0:	8220      	strh	r0, [r4, #16]
 8019ad2:	4298      	cmp	r0, r3
 8019ad4:	d001      	beq.n	8019ada <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8019ad6:	2001      	movs	r0, #1
 8019ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ada:	2101      	movs	r1, #1
 8019adc:	f000 f9bc 	bl	8019e58 <uxr_seq_num_add>
 8019ae0:	81e0      	strh	r0, [r4, #14]
 8019ae2:	2001      	movs	r0, #1
 8019ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ae6:	bf00      	nop

08019ae8 <uxr_update_output_stream_heartbeat_timestamp>:
 8019ae8:	b570      	push	{r4, r5, r6, lr}
 8019aea:	8a01      	ldrh	r1, [r0, #16]
 8019aec:	4604      	mov	r4, r0
 8019aee:	8a40      	ldrh	r0, [r0, #18]
 8019af0:	4615      	mov	r5, r2
 8019af2:	461e      	mov	r6, r3
 8019af4:	f000 f9b8 	bl	8019e68 <uxr_seq_num_cmp>
 8019af8:	2800      	cmp	r0, #0
 8019afa:	db07      	blt.n	8019b0c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8019afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019b00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019b04:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8019b08:	2000      	movs	r0, #0
 8019b0a:	bd70      	pop	{r4, r5, r6, pc}
 8019b0c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8019b10:	b940      	cbnz	r0, 8019b24 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8019b12:	2301      	movs	r3, #1
 8019b14:	f884 3020 	strb.w	r3, [r4, #32]
 8019b18:	3564      	adds	r5, #100	; 0x64
 8019b1a:	f146 0600 	adc.w	r6, r6, #0
 8019b1e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019b22:	bd70      	pop	{r4, r5, r6, pc}
 8019b24:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8019b28:	4295      	cmp	r5, r2
 8019b2a:	eb76 0303 	sbcs.w	r3, r6, r3
 8019b2e:	bfa5      	ittet	ge
 8019b30:	3001      	addge	r0, #1
 8019b32:	f884 0020 	strbge.w	r0, [r4, #32]
 8019b36:	2000      	movlt	r0, #0
 8019b38:	2001      	movge	r0, #1
 8019b3a:	e7ed      	b.n	8019b18 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08019b3c <uxr_begin_output_nack_buffer_it>:
 8019b3c:	8a40      	ldrh	r0, [r0, #18]
 8019b3e:	4770      	bx	lr

08019b40 <uxr_next_reliable_nack_buffer_to_send>:
 8019b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b44:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 8019b48:	b082      	sub	sp, #8
 8019b4a:	f1b8 0f00 	cmp.w	r8, #0
 8019b4e:	d011      	beq.n	8019b74 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8019b50:	4604      	mov	r4, r0
 8019b52:	8818      	ldrh	r0, [r3, #0]
 8019b54:	460e      	mov	r6, r1
 8019b56:	4617      	mov	r7, r2
 8019b58:	461d      	mov	r5, r3
 8019b5a:	2101      	movs	r1, #1
 8019b5c:	f000 f97c 	bl	8019e58 <uxr_seq_num_add>
 8019b60:	8028      	strh	r0, [r5, #0]
 8019b62:	8a21      	ldrh	r1, [r4, #16]
 8019b64:	f000 f980 	bl	8019e68 <uxr_seq_num_cmp>
 8019b68:	2800      	cmp	r0, #0
 8019b6a:	dd07      	ble.n	8019b7c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8019b6c:	f04f 0800 	mov.w	r8, #0
 8019b70:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8019b74:	4640      	mov	r0, r8
 8019b76:	b002      	add	sp, #8
 8019b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b7c:	8921      	ldrh	r1, [r4, #8]
 8019b7e:	8828      	ldrh	r0, [r5, #0]
 8019b80:	6823      	ldr	r3, [r4, #0]
 8019b82:	fbb0 f2f1 	udiv	r2, r0, r1
 8019b86:	fb01 0c12 	mls	ip, r1, r2, r0
 8019b8a:	fa1f f28c 	uxth.w	r2, ip
 8019b8e:	9301      	str	r3, [sp, #4]
 8019b90:	6863      	ldr	r3, [r4, #4]
 8019b92:	fbb3 fcf1 	udiv	ip, r3, r1
 8019b96:	9b01      	ldr	r3, [sp, #4]
 8019b98:	fb02 fc0c 	mul.w	ip, r2, ip
 8019b9c:	f10c 0c04 	add.w	ip, ip, #4
 8019ba0:	4463      	add	r3, ip
 8019ba2:	6033      	str	r3, [r6, #0]
 8019ba4:	6823      	ldr	r3, [r4, #0]
 8019ba6:	4463      	add	r3, ip
 8019ba8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019bac:	603b      	str	r3, [r7, #0]
 8019bae:	7b22      	ldrb	r2, [r4, #12]
 8019bb0:	429a      	cmp	r2, r3
 8019bb2:	d0d2      	beq.n	8019b5a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8019bb4:	4640      	mov	r0, r8
 8019bb6:	b002      	add	sp, #8
 8019bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019bbc <uxr_process_acknack>:
 8019bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bbe:	4604      	mov	r4, r0
 8019bc0:	460e      	mov	r6, r1
 8019bc2:	4610      	mov	r0, r2
 8019bc4:	2101      	movs	r1, #1
 8019bc6:	f000 f94b 	bl	8019e60 <uxr_seq_num_sub>
 8019bca:	8a61      	ldrh	r1, [r4, #18]
 8019bcc:	f000 f948 	bl	8019e60 <uxr_seq_num_sub>
 8019bd0:	b1c0      	cbz	r0, 8019c04 <uxr_process_acknack+0x48>
 8019bd2:	4605      	mov	r5, r0
 8019bd4:	2700      	movs	r7, #0
 8019bd6:	2101      	movs	r1, #1
 8019bd8:	8a60      	ldrh	r0, [r4, #18]
 8019bda:	f000 f93d 	bl	8019e58 <uxr_seq_num_add>
 8019bde:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019be2:	fbb0 f1fc 	udiv	r1, r0, ip
 8019be6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019bea:	fb0c 0111 	mls	r1, ip, r1, r0
 8019bee:	b289      	uxth	r1, r1
 8019bf0:	3701      	adds	r7, #1
 8019bf2:	fbb3 f3fc 	udiv	r3, r3, ip
 8019bf6:	fb01 f303 	mul.w	r3, r1, r3
 8019bfa:	42bd      	cmp	r5, r7
 8019bfc:	7b21      	ldrb	r1, [r4, #12]
 8019bfe:	8260      	strh	r0, [r4, #18]
 8019c00:	50d1      	str	r1, [r2, r3]
 8019c02:	d1e8      	bne.n	8019bd6 <uxr_process_acknack+0x1a>
 8019c04:	3e00      	subs	r6, #0
 8019c06:	f04f 0300 	mov.w	r3, #0
 8019c0a:	bf18      	it	ne
 8019c0c:	2601      	movne	r6, #1
 8019c0e:	f884 3020 	strb.w	r3, [r4, #32]
 8019c12:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8019c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019c18 <uxr_is_output_up_to_date>:
 8019c18:	8a01      	ldrh	r1, [r0, #16]
 8019c1a:	8a40      	ldrh	r0, [r0, #18]
 8019c1c:	b508      	push	{r3, lr}
 8019c1e:	f000 f923 	bl	8019e68 <uxr_seq_num_cmp>
 8019c22:	fab0 f080 	clz	r0, r0
 8019c26:	0940      	lsrs	r0, r0, #5
 8019c28:	bd08      	pop	{r3, pc}
 8019c2a:	bf00      	nop

08019c2c <get_available_free_slots>:
 8019c2c:	8902      	ldrh	r2, [r0, #8]
 8019c2e:	b1da      	cbz	r2, 8019c68 <get_available_free_slots+0x3c>
 8019c30:	b530      	push	{r4, r5, lr}
 8019c32:	2100      	movs	r1, #0
 8019c34:	6843      	ldr	r3, [r0, #4]
 8019c36:	6805      	ldr	r5, [r0, #0]
 8019c38:	7b04      	ldrb	r4, [r0, #12]
 8019c3a:	fbb3 fef2 	udiv	lr, r3, r2
 8019c3e:	4608      	mov	r0, r1
 8019c40:	460b      	mov	r3, r1
 8019c42:	fbb3 fcf2 	udiv	ip, r3, r2
 8019c46:	fb02 331c 	mls	r3, r2, ip, r3
 8019c4a:	b29b      	uxth	r3, r3
 8019c4c:	fb0e f303 	mul.w	r3, lr, r3
 8019c50:	3101      	adds	r1, #1
 8019c52:	f855 c003 	ldr.w	ip, [r5, r3]
 8019c56:	4564      	cmp	r4, ip
 8019c58:	bf08      	it	eq
 8019c5a:	3001      	addeq	r0, #1
 8019c5c:	b28b      	uxth	r3, r1
 8019c5e:	bf08      	it	eq
 8019c60:	b280      	uxtheq	r0, r0
 8019c62:	4293      	cmp	r3, r2
 8019c64:	d3ed      	bcc.n	8019c42 <get_available_free_slots+0x16>
 8019c66:	bd30      	pop	{r4, r5, pc}
 8019c68:	4610      	mov	r0, r2
 8019c6a:	4770      	bx	lr

08019c6c <uxr_buffer_cancel_data>:
 8019c6c:	b510      	push	{r4, lr}
 8019c6e:	b094      	sub	sp, #80	; 0x50
 8019c70:	2300      	movs	r3, #0
 8019c72:	9202      	str	r2, [sp, #8]
 8019c74:	9205      	str	r2, [sp, #20]
 8019c76:	9301      	str	r3, [sp, #4]
 8019c78:	2201      	movs	r2, #1
 8019c7a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019c7e:	f88d 301e 	strb.w	r3, [sp, #30]
 8019c82:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8019c86:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8019c8a:	2308      	movs	r3, #8
 8019c8c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8019c90:	9300      	str	r3, [sp, #0]
 8019c92:	2210      	movs	r2, #16
 8019c94:	ab0c      	add	r3, sp, #48	; 0x30
 8019c96:	4604      	mov	r4, r0
 8019c98:	9103      	str	r1, [sp, #12]
 8019c9a:	f7fa fff5 	bl	8014c88 <uxr_prepare_stream_to_write_submessage>
 8019c9e:	b918      	cbnz	r0, 8019ca8 <uxr_buffer_cancel_data+0x3c>
 8019ca0:	4604      	mov	r4, r0
 8019ca2:	4620      	mov	r0, r4
 8019ca4:	b014      	add	sp, #80	; 0x50
 8019ca6:	bd10      	pop	{r4, pc}
 8019ca8:	9905      	ldr	r1, [sp, #20]
 8019caa:	aa06      	add	r2, sp, #24
 8019cac:	4620      	mov	r0, r4
 8019cae:	f7fb f921 	bl	8014ef4 <uxr_init_base_object_request>
 8019cb2:	a906      	add	r1, sp, #24
 8019cb4:	4604      	mov	r4, r0
 8019cb6:	a80c      	add	r0, sp, #48	; 0x30
 8019cb8:	f7fc fb30 	bl	801631c <uxr_serialize_READ_DATA_Payload>
 8019cbc:	4620      	mov	r0, r4
 8019cbe:	b014      	add	sp, #80	; 0x50
 8019cc0:	bd10      	pop	{r4, pc}
 8019cc2:	bf00      	nop

08019cc4 <read_submessage_format>:
 8019cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019cc8:	b095      	sub	sp, #84	; 0x54
 8019cca:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8019cce:	b113      	cbz	r3, 8019cd6 <read_submessage_format+0x12>
 8019cd0:	b015      	add	sp, #84	; 0x54
 8019cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019cd6:	460c      	mov	r4, r1
 8019cd8:	4615      	mov	r5, r2
 8019cda:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8019cde:	4607      	mov	r7, r0
 8019ce0:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019ce2:	9004      	str	r0, [sp, #16]
 8019ce4:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019ce6:	9005      	str	r0, [sp, #20]
 8019ce8:	1a52      	subs	r2, r2, r1
 8019cea:	a80c      	add	r0, sp, #48	; 0x30
 8019cec:	4699      	mov	r9, r3
 8019cee:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8019cf2:	f7f9 fe2d 	bl	8013950 <ucdr_init_buffer>
 8019cf6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8019cfa:	a80c      	add	r0, sp, #48	; 0x30
 8019cfc:	f7f9 fdfc 	bl	80138f8 <ucdr_set_on_full_buffer_callback>
 8019d00:	69e2      	ldr	r2, [r4, #28]
 8019d02:	b19a      	cbz	r2, 8019d2c <read_submessage_format+0x68>
 8019d04:	f1b8 0f07 	cmp.w	r8, #7
 8019d08:	f882 9014 	strb.w	r9, [r2, #20]
 8019d0c:	d040      	beq.n	8019d90 <read_submessage_format+0xcc>
 8019d0e:	f1b8 0f08 	cmp.w	r8, #8
 8019d12:	d02e      	beq.n	8019d72 <read_submessage_format+0xae>
 8019d14:	f1b8 0f06 	cmp.w	r8, #6
 8019d18:	d011      	beq.n	8019d3e <read_submessage_format+0x7a>
 8019d1a:	2301      	movs	r3, #1
 8019d1c:	7513      	strb	r3, [r2, #20]
 8019d1e:	4629      	mov	r1, r5
 8019d20:	4620      	mov	r0, r4
 8019d22:	f7f9 fe65 	bl	80139f0 <ucdr_advance_buffer>
 8019d26:	b015      	add	sp, #84	; 0x54
 8019d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d2c:	f1b8 0f07 	cmp.w	r8, #7
 8019d30:	d02e      	beq.n	8019d90 <read_submessage_format+0xcc>
 8019d32:	f1b8 0f08 	cmp.w	r8, #8
 8019d36:	d01c      	beq.n	8019d72 <read_submessage_format+0xae>
 8019d38:	f1b8 0f06 	cmp.w	r8, #6
 8019d3c:	d1ef      	bne.n	8019d1e <read_submessage_format+0x5a>
 8019d3e:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 8019d42:	f1b8 0f00 	cmp.w	r8, #0
 8019d46:	d011      	beq.n	8019d6c <read_submessage_format+0xa8>
 8019d48:	ab0c      	add	r3, sp, #48	; 0x30
 8019d4a:	e9cd 3500 	strd	r3, r5, [sp]
 8019d4e:	2306      	movs	r3, #6
 8019d50:	f88d 3016 	strb.w	r3, [sp, #22]
 8019d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019d58:	9302      	str	r3, [sp, #8]
 8019d5a:	4632      	mov	r2, r6
 8019d5c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8019d60:	4638      	mov	r0, r7
 8019d62:	47c0      	blx	r8
 8019d64:	2301      	movs	r3, #1
 8019d66:	69e2      	ldr	r2, [r4, #28]
 8019d68:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8019d6c:	2a00      	cmp	r2, #0
 8019d6e:	d1d4      	bne.n	8019d1a <read_submessage_format+0x56>
 8019d70:	e7d5      	b.n	8019d1e <read_submessage_format+0x5a>
 8019d72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d0f8      	beq.n	8019d6c <read_submessage_format+0xa8>
 8019d7a:	a906      	add	r1, sp, #24
 8019d7c:	a80c      	add	r0, sp, #48	; 0x30
 8019d7e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8019d82:	f7fc fb6b 	bl	801645c <uxr_deserialize_SampleIdentity>
 8019d86:	b9a0      	cbnz	r0, 8019db2 <read_submessage_format+0xee>
 8019d88:	69e2      	ldr	r2, [r4, #28]
 8019d8a:	2a00      	cmp	r2, #0
 8019d8c:	d1c5      	bne.n	8019d1a <read_submessage_format+0x56>
 8019d8e:	e7c6      	b.n	8019d1e <read_submessage_format+0x5a>
 8019d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019d94:	b13b      	cbz	r3, 8019da6 <read_submessage_format+0xe2>
 8019d96:	a906      	add	r1, sp, #24
 8019d98:	a80c      	add	r0, sp, #48	; 0x30
 8019d9a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8019d9e:	f7fc f857 	bl	8015e50 <uxr_deserialize_BaseObjectRequest>
 8019da2:	bb60      	cbnz	r0, 8019dfe <read_submessage_format+0x13a>
 8019da4:	69e2      	ldr	r2, [r4, #28]
 8019da6:	68a3      	ldr	r3, [r4, #8]
 8019da8:	442b      	add	r3, r5
 8019daa:	60a3      	str	r3, [r4, #8]
 8019dac:	2a00      	cmp	r2, #0
 8019dae:	d1b4      	bne.n	8019d1a <read_submessage_format+0x56>
 8019db0:	e7b5      	b.n	8019d1e <read_submessage_format+0x5a>
 8019db2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8019db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019db8:	1a52      	subs	r2, r2, r1
 8019dba:	eba8 0803 	sub.w	r8, r8, r3
 8019dbe:	a80c      	add	r0, sp, #48	; 0x30
 8019dc0:	f7f9 fdc6 	bl	8013950 <ucdr_init_buffer>
 8019dc4:	44a8      	add	r8, r5
 8019dc6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8019dca:	a80c      	add	r0, sp, #48	; 0x30
 8019dcc:	f7f9 fd94 	bl	80138f8 <ucdr_set_on_full_buffer_callback>
 8019dd0:	fa1f f888 	uxth.w	r8, r8
 8019dd4:	ab0c      	add	r3, sp, #48	; 0x30
 8019dd6:	9300      	str	r3, [sp, #0]
 8019dd8:	f8cd 8004 	str.w	r8, [sp, #4]
 8019ddc:	2108      	movs	r1, #8
 8019dde:	f88d 1016 	strb.w	r1, [sp, #22]
 8019de2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8019de6:	9102      	str	r1, [sp, #8]
 8019de8:	ab06      	add	r3, sp, #24
 8019dea:	4632      	mov	r2, r6
 8019dec:	9905      	ldr	r1, [sp, #20]
 8019dee:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 8019df2:	4638      	mov	r0, r7
 8019df4:	47b0      	blx	r6
 8019df6:	2301      	movs	r3, #1
 8019df8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8019dfc:	e7c4      	b.n	8019d88 <read_submessage_format+0xc4>
 8019dfe:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8019e02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e04:	1a52      	subs	r2, r2, r1
 8019e06:	a80c      	add	r0, sp, #48	; 0x30
 8019e08:	eba8 0803 	sub.w	r8, r8, r3
 8019e0c:	f7f9 fda0 	bl	8013950 <ucdr_init_buffer>
 8019e10:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8019e14:	a80c      	add	r0, sp, #48	; 0x30
 8019e16:	f7f9 fd6f 	bl	80138f8 <ucdr_set_on_full_buffer_callback>
 8019e1a:	ab0c      	add	r3, sp, #48	; 0x30
 8019e1c:	9300      	str	r3, [sp, #0]
 8019e1e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8019e22:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8019e26:	44a8      	add	r8, r5
 8019e28:	fa1f f888 	uxth.w	r8, r8
 8019e2c:	f8cd 8004 	str.w	r8, [sp, #4]
 8019e30:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019e34:	2107      	movs	r1, #7
 8019e36:	f88d 1016 	strb.w	r1, [sp, #22]
 8019e3a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8019e3e:	9102      	str	r1, [sp, #8]
 8019e40:	4632      	mov	r2, r6
 8019e42:	b29b      	uxth	r3, r3
 8019e44:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8019e48:	9905      	ldr	r1, [sp, #20]
 8019e4a:	4638      	mov	r0, r7
 8019e4c:	47b0      	blx	r6
 8019e4e:	2301      	movs	r3, #1
 8019e50:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8019e54:	e7a6      	b.n	8019da4 <read_submessage_format+0xe0>
 8019e56:	bf00      	nop

08019e58 <uxr_seq_num_add>:
 8019e58:	4408      	add	r0, r1
 8019e5a:	b280      	uxth	r0, r0
 8019e5c:	4770      	bx	lr
 8019e5e:	bf00      	nop

08019e60 <uxr_seq_num_sub>:
 8019e60:	1a40      	subs	r0, r0, r1
 8019e62:	b280      	uxth	r0, r0
 8019e64:	4770      	bx	lr
 8019e66:	bf00      	nop

08019e68 <uxr_seq_num_cmp>:
 8019e68:	4288      	cmp	r0, r1
 8019e6a:	d011      	beq.n	8019e90 <uxr_seq_num_cmp+0x28>
 8019e6c:	d309      	bcc.n	8019e82 <uxr_seq_num_cmp+0x1a>
 8019e6e:	4288      	cmp	r0, r1
 8019e70:	d910      	bls.n	8019e94 <uxr_seq_num_cmp+0x2c>
 8019e72:	1a40      	subs	r0, r0, r1
 8019e74:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8019e78:	bfd4      	ite	le
 8019e7a:	2001      	movle	r0, #1
 8019e7c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8019e80:	4770      	bx	lr
 8019e82:	1a0b      	subs	r3, r1, r0
 8019e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019e88:	daf1      	bge.n	8019e6e <uxr_seq_num_cmp+0x6>
 8019e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019e8e:	4770      	bx	lr
 8019e90:	2000      	movs	r0, #0
 8019e92:	4770      	bx	lr
 8019e94:	2001      	movs	r0, #1
 8019e96:	4770      	bx	lr

08019e98 <uxr_init_framing_io>:
 8019e98:	2300      	movs	r3, #0
 8019e9a:	7041      	strb	r1, [r0, #1]
 8019e9c:	7003      	strb	r3, [r0, #0]
 8019e9e:	8583      	strh	r3, [r0, #44]	; 0x2c
 8019ea0:	4770      	bx	lr
 8019ea2:	bf00      	nop

08019ea4 <uxr_write_framed_msg>:
 8019ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ea8:	4617      	mov	r7, r2
 8019eaa:	7842      	ldrb	r2, [r0, #1]
 8019eac:	b083      	sub	sp, #12
 8019eae:	460e      	mov	r6, r1
 8019eb0:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8019eb4:	469a      	mov	sl, r3
 8019eb6:	2901      	cmp	r1, #1
 8019eb8:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8019ebc:	4604      	mov	r4, r0
 8019ebe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019ec2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8019ec6:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8019eca:	f240 8137 	bls.w	801a13c <uxr_write_framed_msg+0x298>
 8019ece:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019ed2:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8019ed6:	2901      	cmp	r1, #1
 8019ed8:	f04f 0202 	mov.w	r2, #2
 8019edc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019ee0:	f240 808f 	bls.w	801a002 <uxr_write_framed_msg+0x15e>
 8019ee4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019ee6:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8019eea:	b2dd      	uxtb	r5, r3
 8019eec:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8019ef0:	2203      	movs	r2, #3
 8019ef2:	2901      	cmp	r1, #1
 8019ef4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019ef8:	f240 809a 	bls.w	801a030 <uxr_write_framed_msg+0x18c>
 8019efc:	18a1      	adds	r1, r4, r2
 8019efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f00:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8019f04:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019f08:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8019f0c:	3201      	adds	r2, #1
 8019f0e:	2801      	cmp	r0, #1
 8019f10:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019f14:	f240 80a0 	bls.w	801a058 <uxr_write_framed_msg+0x1b4>
 8019f18:	18a0      	adds	r0, r4, r2
 8019f1a:	3201      	adds	r2, #1
 8019f1c:	b2d2      	uxtb	r2, r2
 8019f1e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019f22:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	f000 80a9 	beq.w	801a07e <uxr_write_framed_msg+0x1da>
 8019f2c:	f04f 0900 	mov.w	r9, #0
 8019f30:	46c8      	mov	r8, r9
 8019f32:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8019f36:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8019f3a:	2901      	cmp	r1, #1
 8019f3c:	f240 80c3 	bls.w	801a0c6 <uxr_write_framed_msg+0x222>
 8019f40:	2a29      	cmp	r2, #41	; 0x29
 8019f42:	f200 809f 	bhi.w	801a084 <uxr_write_framed_msg+0x1e0>
 8019f46:	18a1      	adds	r1, r4, r2
 8019f48:	3201      	adds	r2, #1
 8019f4a:	b2d2      	uxtb	r2, r2
 8019f4c:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8019f50:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019f54:	ea89 0303 	eor.w	r3, r9, r3
 8019f58:	498c      	ldr	r1, [pc, #560]	; (801a18c <uxr_write_framed_msg+0x2e8>)
 8019f5a:	b2db      	uxtb	r3, r3
 8019f5c:	f108 0801 	add.w	r8, r8, #1
 8019f60:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019f64:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8019f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f6a:	4543      	cmp	r3, r8
 8019f6c:	d8e1      	bhi.n	8019f32 <uxr_write_framed_msg+0x8e>
 8019f6e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8019f72:	fa5f f889 	uxtb.w	r8, r9
 8019f76:	9301      	str	r3, [sp, #4]
 8019f78:	f04f 0900 	mov.w	r9, #0
 8019f7c:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8019f80:	fa5f f18a 	uxtb.w	r1, sl
 8019f84:	2901      	cmp	r1, #1
 8019f86:	d921      	bls.n	8019fcc <uxr_write_framed_msg+0x128>
 8019f88:	2a29      	cmp	r2, #41	; 0x29
 8019f8a:	f240 80af 	bls.w	801a0ec <uxr_write_framed_msg+0x248>
 8019f8e:	2500      	movs	r5, #0
 8019f90:	e000      	b.n	8019f94 <uxr_write_framed_msg+0xf0>
 8019f92:	b160      	cbz	r0, 8019fae <uxr_write_framed_msg+0x10a>
 8019f94:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019f98:	1b52      	subs	r2, r2, r5
 8019f9a:	465b      	mov	r3, fp
 8019f9c:	4421      	add	r1, r4
 8019f9e:	4638      	mov	r0, r7
 8019fa0:	47b0      	blx	r6
 8019fa2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019fa6:	4405      	add	r5, r0
 8019fa8:	4295      	cmp	r5, r2
 8019faa:	d3f2      	bcc.n	8019f92 <uxr_write_framed_msg+0xee>
 8019fac:	d003      	beq.n	8019fb6 <uxr_write_framed_msg+0x112>
 8019fae:	2000      	movs	r0, #0
 8019fb0:	b003      	add	sp, #12
 8019fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fb6:	fa5f f18a 	uxtb.w	r1, sl
 8019fba:	f04f 0300 	mov.w	r3, #0
 8019fbe:	2901      	cmp	r1, #1
 8019fc0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019fc4:	f04f 0200 	mov.w	r2, #0
 8019fc8:	f200 8090 	bhi.w	801a0ec <uxr_write_framed_msg+0x248>
 8019fcc:	1c51      	adds	r1, r2, #1
 8019fce:	b2c9      	uxtb	r1, r1
 8019fd0:	2929      	cmp	r1, #41	; 0x29
 8019fd2:	d8dc      	bhi.n	8019f8e <uxr_write_framed_msg+0xea>
 8019fd4:	18a5      	adds	r5, r4, r2
 8019fd6:	4421      	add	r1, r4
 8019fd8:	3202      	adds	r2, #2
 8019fda:	f088 0820 	eor.w	r8, r8, #32
 8019fde:	4648      	mov	r0, r9
 8019fe0:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8019fe4:	b2d2      	uxtb	r2, r2
 8019fe6:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8019fea:	f04f 0901 	mov.w	r9, #1
 8019fee:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8019ff2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019ff6:	2800      	cmp	r0, #0
 8019ff8:	f040 8085 	bne.w	801a106 <uxr_write_framed_msg+0x262>
 8019ffc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a000:	e7bc      	b.n	8019f7c <uxr_write_framed_msg+0xd8>
 801a002:	4611      	mov	r1, r2
 801a004:	f04f 0c03 	mov.w	ip, #3
 801a008:	2204      	movs	r2, #4
 801a00a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a00c:	4421      	add	r1, r4
 801a00e:	b2dd      	uxtb	r5, r3
 801a010:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801a014:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 801a018:	44a4      	add	ip, r4
 801a01a:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 801a01e:	f080 0020 	eor.w	r0, r0, #32
 801a022:	2901      	cmp	r1, #1
 801a024:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801a028:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a02c:	f63f af66 	bhi.w	8019efc <uxr_write_framed_msg+0x58>
 801a030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a032:	18a0      	adds	r0, r4, r2
 801a034:	f085 0520 	eor.w	r5, r5, #32
 801a038:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801a03c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a040:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 801a044:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801a048:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801a04c:	3202      	adds	r2, #2
 801a04e:	2801      	cmp	r0, #1
 801a050:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a054:	f63f af60 	bhi.w	8019f18 <uxr_write_framed_msg+0x74>
 801a058:	1c50      	adds	r0, r2, #1
 801a05a:	18a5      	adds	r5, r4, r2
 801a05c:	fa54 f080 	uxtab	r0, r4, r0
 801a060:	3202      	adds	r2, #2
 801a062:	f081 0120 	eor.w	r1, r1, #32
 801a066:	b2d2      	uxtb	r2, r2
 801a068:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801a06c:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 801a070:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a074:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a078:	2b00      	cmp	r3, #0
 801a07a:	f47f af57 	bne.w	8019f2c <uxr_write_framed_msg+0x88>
 801a07e:	9301      	str	r3, [sp, #4]
 801a080:	4698      	mov	r8, r3
 801a082:	e779      	b.n	8019f78 <uxr_write_framed_msg+0xd4>
 801a084:	2500      	movs	r5, #0
 801a086:	e001      	b.n	801a08c <uxr_write_framed_msg+0x1e8>
 801a088:	2800      	cmp	r0, #0
 801a08a:	d090      	beq.n	8019fae <uxr_write_framed_msg+0x10a>
 801a08c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801a090:	1b52      	subs	r2, r2, r5
 801a092:	465b      	mov	r3, fp
 801a094:	4421      	add	r1, r4
 801a096:	4638      	mov	r0, r7
 801a098:	47b0      	blx	r6
 801a09a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a09e:	4405      	add	r5, r0
 801a0a0:	4295      	cmp	r5, r2
 801a0a2:	d3f1      	bcc.n	801a088 <uxr_write_framed_msg+0x1e4>
 801a0a4:	d183      	bne.n	8019fae <uxr_write_framed_msg+0x10a>
 801a0a6:	f04f 0300 	mov.w	r3, #0
 801a0aa:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801a0ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a0b0:	4543      	cmp	r3, r8
 801a0b2:	d964      	bls.n	801a17e <uxr_write_framed_msg+0x2da>
 801a0b4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801a0b8:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801a0bc:	2901      	cmp	r1, #1
 801a0be:	f04f 0200 	mov.w	r2, #0
 801a0c2:	f63f af3d 	bhi.w	8019f40 <uxr_write_framed_msg+0x9c>
 801a0c6:	1c51      	adds	r1, r2, #1
 801a0c8:	b2c9      	uxtb	r1, r1
 801a0ca:	2929      	cmp	r1, #41	; 0x29
 801a0cc:	d8da      	bhi.n	801a084 <uxr_write_framed_msg+0x1e0>
 801a0ce:	18a0      	adds	r0, r4, r2
 801a0d0:	4421      	add	r1, r4
 801a0d2:	f04f 057d 	mov.w	r5, #125	; 0x7d
 801a0d6:	3202      	adds	r2, #2
 801a0d8:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 801a0dc:	b2d2      	uxtb	r2, r2
 801a0de:	f083 0020 	eor.w	r0, r3, #32
 801a0e2:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801a0e6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a0ea:	e733      	b.n	8019f54 <uxr_write_framed_msg+0xb0>
 801a0ec:	18a1      	adds	r1, r4, r2
 801a0ee:	3201      	adds	r2, #1
 801a0f0:	4648      	mov	r0, r9
 801a0f2:	b2d2      	uxtb	r2, r2
 801a0f4:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 801a0f8:	f04f 0901 	mov.w	r9, #1
 801a0fc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a100:	2800      	cmp	r0, #0
 801a102:	f43f af7b 	beq.w	8019ffc <uxr_write_framed_msg+0x158>
 801a106:	2500      	movs	r5, #0
 801a108:	e002      	b.n	801a110 <uxr_write_framed_msg+0x26c>
 801a10a:	2800      	cmp	r0, #0
 801a10c:	f43f af4f 	beq.w	8019fae <uxr_write_framed_msg+0x10a>
 801a110:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801a114:	1b52      	subs	r2, r2, r5
 801a116:	465b      	mov	r3, fp
 801a118:	4421      	add	r1, r4
 801a11a:	4638      	mov	r0, r7
 801a11c:	47b0      	blx	r6
 801a11e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a122:	4405      	add	r5, r0
 801a124:	4295      	cmp	r5, r2
 801a126:	d3f0      	bcc.n	801a10a <uxr_write_framed_msg+0x266>
 801a128:	f47f af41 	bne.w	8019fae <uxr_write_framed_msg+0x10a>
 801a12c:	2300      	movs	r3, #0
 801a12e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801a132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a134:	b298      	uxth	r0, r3
 801a136:	b003      	add	sp, #12
 801a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a13c:	217d      	movs	r1, #125	; 0x7d
 801a13e:	f082 0220 	eor.w	r2, r2, #32
 801a142:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801a146:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801a14a:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 801a14e:	2901      	cmp	r1, #1
 801a150:	f04f 0203 	mov.w	r2, #3
 801a154:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a158:	d804      	bhi.n	801a164 <uxr_write_framed_msg+0x2c0>
 801a15a:	4611      	mov	r1, r2
 801a15c:	f04f 0c04 	mov.w	ip, #4
 801a160:	2205      	movs	r2, #5
 801a162:	e752      	b.n	801a00a <uxr_write_framed_msg+0x166>
 801a164:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a166:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801a16a:	b2dd      	uxtb	r5, r3
 801a16c:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 801a170:	2204      	movs	r2, #4
 801a172:	2901      	cmp	r1, #1
 801a174:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a178:	f63f aec0 	bhi.w	8019efc <uxr_write_framed_msg+0x58>
 801a17c:	e758      	b.n	801a030 <uxr_write_framed_msg+0x18c>
 801a17e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801a182:	fa5f f889 	uxtb.w	r8, r9
 801a186:	9301      	str	r3, [sp, #4]
 801a188:	2200      	movs	r2, #0
 801a18a:	e6f5      	b.n	8019f78 <uxr_write_framed_msg+0xd4>
 801a18c:	0801db30 	.word	0x0801db30

0801a190 <uxr_framing_read_transport>:
 801a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a194:	4604      	mov	r4, r0
 801a196:	b083      	sub	sp, #12
 801a198:	461f      	mov	r7, r3
 801a19a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801a19e:	4689      	mov	r9, r1
 801a1a0:	4692      	mov	sl, r2
 801a1a2:	f7fb f855 	bl	8015250 <uxr_millis>
 801a1a6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a1aa:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801a1ae:	42b3      	cmp	r3, r6
 801a1b0:	4680      	mov	r8, r0
 801a1b2:	d061      	beq.n	801a278 <uxr_framing_read_transport+0xe8>
 801a1b4:	d81c      	bhi.n	801a1f0 <uxr_framing_read_transport+0x60>
 801a1b6:	1e75      	subs	r5, r6, #1
 801a1b8:	1aed      	subs	r5, r5, r3
 801a1ba:	b2ed      	uxtb	r5, r5
 801a1bc:	2600      	movs	r6, #0
 801a1be:	455d      	cmp	r5, fp
 801a1c0:	d81f      	bhi.n	801a202 <uxr_framing_read_transport+0x72>
 801a1c2:	19ab      	adds	r3, r5, r6
 801a1c4:	455b      	cmp	r3, fp
 801a1c6:	bf84      	itt	hi
 801a1c8:	ebab 0605 	subhi.w	r6, fp, r5
 801a1cc:	b2f6      	uxtbhi	r6, r6
 801a1ce:	b9ed      	cbnz	r5, 801a20c <uxr_framing_read_transport+0x7c>
 801a1d0:	f04f 0b00 	mov.w	fp, #0
 801a1d4:	f7fb f83c 	bl	8015250 <uxr_millis>
 801a1d8:	683b      	ldr	r3, [r7, #0]
 801a1da:	eba0 0808 	sub.w	r8, r0, r8
 801a1de:	eba3 0308 	sub.w	r3, r3, r8
 801a1e2:	4658      	mov	r0, fp
 801a1e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a1e8:	603b      	str	r3, [r7, #0]
 801a1ea:	b003      	add	sp, #12
 801a1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1f0:	2e00      	cmp	r6, #0
 801a1f2:	d049      	beq.n	801a288 <uxr_framing_read_transport+0xf8>
 801a1f4:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 801a1f8:	b2ed      	uxtb	r5, r5
 801a1fa:	3e01      	subs	r6, #1
 801a1fc:	455d      	cmp	r5, fp
 801a1fe:	b2f6      	uxtb	r6, r6
 801a200:	d9df      	bls.n	801a1c2 <uxr_framing_read_transport+0x32>
 801a202:	fa5f f58b 	uxtb.w	r5, fp
 801a206:	2600      	movs	r6, #0
 801a208:	2d00      	cmp	r5, #0
 801a20a:	d0e1      	beq.n	801a1d0 <uxr_framing_read_transport+0x40>
 801a20c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801a210:	3102      	adds	r1, #2
 801a212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a214:	9300      	str	r3, [sp, #0]
 801a216:	683b      	ldr	r3, [r7, #0]
 801a218:	4421      	add	r1, r4
 801a21a:	462a      	mov	r2, r5
 801a21c:	4650      	mov	r0, sl
 801a21e:	47c8      	blx	r9
 801a220:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a224:	4a1a      	ldr	r2, [pc, #104]	; (801a290 <uxr_framing_read_transport+0x100>)
 801a226:	4403      	add	r3, r0
 801a228:	0859      	lsrs	r1, r3, #1
 801a22a:	fba2 2101 	umull	r2, r1, r2, r1
 801a22e:	0889      	lsrs	r1, r1, #2
 801a230:	222a      	movs	r2, #42	; 0x2a
 801a232:	fb02 3111 	mls	r1, r2, r1, r3
 801a236:	4683      	mov	fp, r0
 801a238:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801a23c:	2800      	cmp	r0, #0
 801a23e:	d0c7      	beq.n	801a1d0 <uxr_framing_read_transport+0x40>
 801a240:	42a8      	cmp	r0, r5
 801a242:	d1c7      	bne.n	801a1d4 <uxr_framing_read_transport+0x44>
 801a244:	2e00      	cmp	r6, #0
 801a246:	d0c5      	beq.n	801a1d4 <uxr_framing_read_transport+0x44>
 801a248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a24a:	9300      	str	r3, [sp, #0]
 801a24c:	3102      	adds	r1, #2
 801a24e:	4632      	mov	r2, r6
 801a250:	4421      	add	r1, r4
 801a252:	2300      	movs	r3, #0
 801a254:	4650      	mov	r0, sl
 801a256:	47c8      	blx	r9
 801a258:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801a25c:	4a0c      	ldr	r2, [pc, #48]	; (801a290 <uxr_framing_read_transport+0x100>)
 801a25e:	180b      	adds	r3, r1, r0
 801a260:	0859      	lsrs	r1, r3, #1
 801a262:	fba2 1201 	umull	r1, r2, r2, r1
 801a266:	0892      	lsrs	r2, r2, #2
 801a268:	212a      	movs	r1, #42	; 0x2a
 801a26a:	fb01 3312 	mls	r3, r1, r2, r3
 801a26e:	eb00 0b05 	add.w	fp, r0, r5
 801a272:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801a276:	e7ad      	b.n	801a1d4 <uxr_framing_read_transport+0x44>
 801a278:	2600      	movs	r6, #0
 801a27a:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 801a27e:	85a6      	strh	r6, [r4, #44]	; 0x2c
 801a280:	d9bf      	bls.n	801a202 <uxr_framing_read_transport+0x72>
 801a282:	2102      	movs	r1, #2
 801a284:	2529      	movs	r5, #41	; 0x29
 801a286:	e7c4      	b.n	801a212 <uxr_framing_read_transport+0x82>
 801a288:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 801a28c:	b2ed      	uxtb	r5, r5
 801a28e:	e796      	b.n	801a1be <uxr_framing_read_transport+0x2e>
 801a290:	30c30c31 	.word	0x30c30c31

0801a294 <uxr_read_framed_msg>:
 801a294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a298:	461e      	mov	r6, r3
 801a29a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801a29e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801a2a2:	429d      	cmp	r5, r3
 801a2a4:	b083      	sub	sp, #12
 801a2a6:	4604      	mov	r4, r0
 801a2a8:	4688      	mov	r8, r1
 801a2aa:	4691      	mov	r9, r2
 801a2ac:	f000 8188 	beq.w	801a5c0 <uxr_read_framed_msg+0x32c>
 801a2b0:	7823      	ldrb	r3, [r4, #0]
 801a2b2:	4dc1      	ldr	r5, [pc, #772]	; (801a5b8 <uxr_read_framed_msg+0x324>)
 801a2b4:	4fc1      	ldr	r7, [pc, #772]	; (801a5bc <uxr_read_framed_msg+0x328>)
 801a2b6:	2b07      	cmp	r3, #7
 801a2b8:	d8fd      	bhi.n	801a2b6 <uxr_read_framed_msg+0x22>
 801a2ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 801a2be:	0115      	.short	0x0115
 801a2c0:	00d600f6 	.word	0x00d600f6
 801a2c4:	009000b9 	.word	0x009000b9
 801a2c8:	0030004d 	.word	0x0030004d
 801a2cc:	0008      	.short	0x0008
 801a2ce:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801a2d2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801a2d6:	4299      	cmp	r1, r3
 801a2d8:	f000 814a 	beq.w	801a570 <uxr_read_framed_msg+0x2dc>
 801a2dc:	18e2      	adds	r2, r4, r3
 801a2de:	7892      	ldrb	r2, [r2, #2]
 801a2e0:	2a7d      	cmp	r2, #125	; 0x7d
 801a2e2:	f000 8199 	beq.w	801a618 <uxr_read_framed_msg+0x384>
 801a2e6:	3301      	adds	r3, #1
 801a2e8:	0858      	lsrs	r0, r3, #1
 801a2ea:	fba5 1000 	umull	r1, r0, r5, r0
 801a2ee:	0880      	lsrs	r0, r0, #2
 801a2f0:	212a      	movs	r1, #42	; 0x2a
 801a2f2:	fb01 3310 	mls	r3, r1, r0, r3
 801a2f6:	2a7e      	cmp	r2, #126	; 0x7e
 801a2f8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a2fc:	f000 8252 	beq.w	801a7a4 <uxr_read_framed_msg+0x510>
 801a300:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a302:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801a304:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801a308:	b29b      	uxth	r3, r3
 801a30a:	2200      	movs	r2, #0
 801a30c:	4299      	cmp	r1, r3
 801a30e:	86a3      	strh	r3, [r4, #52]	; 0x34
 801a310:	7022      	strb	r2, [r4, #0]
 801a312:	f000 8179 	beq.w	801a608 <uxr_read_framed_msg+0x374>
 801a316:	2000      	movs	r0, #0
 801a318:	b003      	add	sp, #12
 801a31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a31e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801a322:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801a326:	4299      	cmp	r1, r3
 801a328:	f000 8131 	beq.w	801a58e <uxr_read_framed_msg+0x2fa>
 801a32c:	18e2      	adds	r2, r4, r3
 801a32e:	7890      	ldrb	r0, [r2, #2]
 801a330:	287d      	cmp	r0, #125	; 0x7d
 801a332:	f000 8190 	beq.w	801a656 <uxr_read_framed_msg+0x3c2>
 801a336:	3301      	adds	r3, #1
 801a338:	085a      	lsrs	r2, r3, #1
 801a33a:	fba5 1202 	umull	r1, r2, r5, r2
 801a33e:	0892      	lsrs	r2, r2, #2
 801a340:	212a      	movs	r1, #42	; 0x2a
 801a342:	fb01 3312 	mls	r3, r1, r2, r3
 801a346:	287e      	cmp	r0, #126	; 0x7e
 801a348:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a34c:	f000 821a 	beq.w	801a784 <uxr_read_framed_msg+0x4f0>
 801a350:	2307      	movs	r3, #7
 801a352:	86a0      	strh	r0, [r4, #52]	; 0x34
 801a354:	7023      	strb	r3, [r4, #0]
 801a356:	e7ae      	b.n	801a2b6 <uxr_read_framed_msg+0x22>
 801a358:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801a35a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801a35e:	459e      	cmp	lr, r3
 801a360:	d938      	bls.n	801a3d4 <uxr_read_framed_msg+0x140>
 801a362:	ee07 8a90 	vmov	s15, r8
 801a366:	212a      	movs	r1, #42	; 0x2a
 801a368:	e020      	b.n	801a3ac <uxr_read_framed_msg+0x118>
 801a36a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801a36e:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 801a372:	f000 80d4 	beq.w	801a51e <uxr_read_framed_msg+0x28a>
 801a376:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801a37a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801a37e:	f000 8219 	beq.w	801a7b4 <uxr_read_framed_msg+0x520>
 801a382:	f806 c003 	strb.w	ip, [r6, r3]
 801a386:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 801a38a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801a38c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801a390:	ea8a 000c 	eor.w	r0, sl, ip
 801a394:	b2c0      	uxtb	r0, r0
 801a396:	3301      	adds	r3, #1
 801a398:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801a39c:	b29b      	uxth	r3, r3
 801a39e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801a3a2:	4573      	cmp	r3, lr
 801a3a4:	8663      	strh	r3, [r4, #50]	; 0x32
 801a3a6:	86e2      	strh	r2, [r4, #54]	; 0x36
 801a3a8:	f080 8120 	bcs.w	801a5ec <uxr_read_framed_msg+0x358>
 801a3ac:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 801a3b0:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801a3b4:	f100 0c01 	add.w	ip, r0, #1
 801a3b8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a3bc:	fba5 8202 	umull	r8, r2, r5, r2
 801a3c0:	0892      	lsrs	r2, r2, #2
 801a3c2:	4582      	cmp	sl, r0
 801a3c4:	eb04 0b00 	add.w	fp, r4, r0
 801a3c8:	fb01 c212 	mls	r2, r1, r2, ip
 801a3cc:	d1cd      	bne.n	801a36a <uxr_read_framed_msg+0xd6>
 801a3ce:	ee17 8a90 	vmov	r8, s15
 801a3d2:	459e      	cmp	lr, r3
 801a3d4:	f040 8111 	bne.w	801a5fa <uxr_read_framed_msg+0x366>
 801a3d8:	2306      	movs	r3, #6
 801a3da:	7023      	strb	r3, [r4, #0]
 801a3dc:	e76b      	b.n	801a2b6 <uxr_read_framed_msg+0x22>
 801a3de:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801a3e2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801a3e6:	4298      	cmp	r0, r3
 801a3e8:	f000 80c2 	beq.w	801a570 <uxr_read_framed_msg+0x2dc>
 801a3ec:	18e2      	adds	r2, r4, r3
 801a3ee:	7891      	ldrb	r1, [r2, #2]
 801a3f0:	297d      	cmp	r1, #125	; 0x7d
 801a3f2:	f000 814c 	beq.w	801a68e <uxr_read_framed_msg+0x3fa>
 801a3f6:	3301      	adds	r3, #1
 801a3f8:	085a      	lsrs	r2, r3, #1
 801a3fa:	fba5 0202 	umull	r0, r2, r5, r2
 801a3fe:	0892      	lsrs	r2, r2, #2
 801a400:	202a      	movs	r0, #42	; 0x2a
 801a402:	fb00 3312 	mls	r3, r0, r2, r3
 801a406:	297e      	cmp	r1, #126	; 0x7e
 801a408:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a40c:	f000 81ca 	beq.w	801a7a4 <uxr_read_framed_msg+0x510>
 801a410:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a412:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801a416:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a418:	b29b      	uxth	r3, r3
 801a41a:	2000      	movs	r0, #0
 801a41c:	428b      	cmp	r3, r1
 801a41e:	8623      	strh	r3, [r4, #48]	; 0x30
 801a420:	8660      	strh	r0, [r4, #50]	; 0x32
 801a422:	86e0      	strh	r0, [r4, #54]	; 0x36
 801a424:	f240 80df 	bls.w	801a5e6 <uxr_read_framed_msg+0x352>
 801a428:	7020      	strb	r0, [r4, #0]
 801a42a:	b003      	add	sp, #12
 801a42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a430:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801a434:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801a438:	4299      	cmp	r1, r3
 801a43a:	f000 80a8 	beq.w	801a58e <uxr_read_framed_msg+0x2fa>
 801a43e:	18e2      	adds	r2, r4, r3
 801a440:	7890      	ldrb	r0, [r2, #2]
 801a442:	287d      	cmp	r0, #125	; 0x7d
 801a444:	f000 8164 	beq.w	801a710 <uxr_read_framed_msg+0x47c>
 801a448:	3301      	adds	r3, #1
 801a44a:	085a      	lsrs	r2, r3, #1
 801a44c:	fba5 1202 	umull	r1, r2, r5, r2
 801a450:	0892      	lsrs	r2, r2, #2
 801a452:	212a      	movs	r1, #42	; 0x2a
 801a454:	fb01 3312 	mls	r3, r1, r2, r3
 801a458:	287e      	cmp	r0, #126	; 0x7e
 801a45a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a45e:	f000 8191 	beq.w	801a784 <uxr_read_framed_msg+0x4f0>
 801a462:	2304      	movs	r3, #4
 801a464:	8620      	strh	r0, [r4, #48]	; 0x30
 801a466:	7023      	strb	r3, [r4, #0]
 801a468:	e725      	b.n	801a2b6 <uxr_read_framed_msg+0x22>
 801a46a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801a46e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801a472:	4290      	cmp	r0, r2
 801a474:	f000 80b3 	beq.w	801a5de <uxr_read_framed_msg+0x34a>
 801a478:	18a3      	adds	r3, r4, r2
 801a47a:	7899      	ldrb	r1, [r3, #2]
 801a47c:	297d      	cmp	r1, #125	; 0x7d
 801a47e:	f000 8164 	beq.w	801a74a <uxr_read_framed_msg+0x4b6>
 801a482:	3201      	adds	r2, #1
 801a484:	0850      	lsrs	r0, r2, #1
 801a486:	fba5 3000 	umull	r3, r0, r5, r0
 801a48a:	0880      	lsrs	r0, r0, #2
 801a48c:	232a      	movs	r3, #42	; 0x2a
 801a48e:	fb03 2210 	mls	r2, r3, r0, r2
 801a492:	297e      	cmp	r1, #126	; 0x7e
 801a494:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801a498:	f000 8188 	beq.w	801a7ac <uxr_read_framed_msg+0x518>
 801a49c:	7863      	ldrb	r3, [r4, #1]
 801a49e:	428b      	cmp	r3, r1
 801a4a0:	bf0c      	ite	eq
 801a4a2:	2303      	moveq	r3, #3
 801a4a4:	2300      	movne	r3, #0
 801a4a6:	7023      	strb	r3, [r4, #0]
 801a4a8:	e705      	b.n	801a2b6 <uxr_read_framed_msg+0x22>
 801a4aa:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801a4ae:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801a4b2:	2200      	movs	r2, #0
 801a4b4:	4299      	cmp	r1, r3
 801a4b6:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801a4ba:	d06c      	beq.n	801a596 <uxr_read_framed_msg+0x302>
 801a4bc:	18e2      	adds	r2, r4, r3
 801a4be:	7890      	ldrb	r0, [r2, #2]
 801a4c0:	287d      	cmp	r0, #125	; 0x7d
 801a4c2:	f000 8101 	beq.w	801a6c8 <uxr_read_framed_msg+0x434>
 801a4c6:	3301      	adds	r3, #1
 801a4c8:	085a      	lsrs	r2, r3, #1
 801a4ca:	fba5 1202 	umull	r1, r2, r5, r2
 801a4ce:	0892      	lsrs	r2, r2, #2
 801a4d0:	212a      	movs	r1, #42	; 0x2a
 801a4d2:	fb01 3312 	mls	r3, r1, r2, r3
 801a4d6:	287e      	cmp	r0, #126	; 0x7e
 801a4d8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801a4dc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a4e0:	d059      	beq.n	801a596 <uxr_read_framed_msg+0x302>
 801a4e2:	2302      	movs	r3, #2
 801a4e4:	7023      	strb	r3, [r4, #0]
 801a4e6:	e6e6      	b.n	801a2b6 <uxr_read_framed_msg+0x22>
 801a4e8:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801a4ec:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801a4f0:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801a4f4:	1c51      	adds	r1, r2, #1
 801a4f6:	084b      	lsrs	r3, r1, #1
 801a4f8:	fba5 c303 	umull	ip, r3, r5, r3
 801a4fc:	089b      	lsrs	r3, r3, #2
 801a4fe:	fb0e 1313 	mls	r3, lr, r3, r1
 801a502:	4592      	cmp	sl, r2
 801a504:	eb04 0002 	add.w	r0, r4, r2
 801a508:	b2da      	uxtb	r2, r3
 801a50a:	f43f af04 	beq.w	801a316 <uxr_read_framed_msg+0x82>
 801a50e:	7883      	ldrb	r3, [r0, #2]
 801a510:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801a514:	2b7e      	cmp	r3, #126	; 0x7e
 801a516:	d1ed      	bne.n	801a4f4 <uxr_read_framed_msg+0x260>
 801a518:	2301      	movs	r3, #1
 801a51a:	7023      	strb	r3, [r4, #0]
 801a51c:	e6cb      	b.n	801a2b6 <uxr_read_framed_msg+0x22>
 801a51e:	f100 0c01 	add.w	ip, r0, #1
 801a522:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a526:	fba5 8202 	umull	r8, r2, r5, r2
 801a52a:	0892      	lsrs	r2, r2, #2
 801a52c:	fb01 c212 	mls	r2, r1, r2, ip
 801a530:	eb04 0c02 	add.w	ip, r4, r2
 801a534:	b2d2      	uxtb	r2, r2
 801a536:	4592      	cmp	sl, r2
 801a538:	f100 0002 	add.w	r0, r0, #2
 801a53c:	f43f af47 	beq.w	801a3ce <uxr_read_framed_msg+0x13a>
 801a540:	0842      	lsrs	r2, r0, #1
 801a542:	f89c a002 	ldrb.w	sl, [ip, #2]
 801a546:	fba5 8202 	umull	r8, r2, r5, r2
 801a54a:	0892      	lsrs	r2, r2, #2
 801a54c:	fb01 0012 	mls	r0, r1, r2, r0
 801a550:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 801a554:	f08a 0c20 	eor.w	ip, sl, #32
 801a558:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 801a55c:	f47f af11 	bne.w	801a382 <uxr_read_framed_msg+0xee>
 801a560:	459e      	cmp	lr, r3
 801a562:	ee17 8a90 	vmov	r8, s15
 801a566:	f43f af37 	beq.w	801a3d8 <uxr_read_framed_msg+0x144>
 801a56a:	2301      	movs	r3, #1
 801a56c:	7023      	strb	r3, [r4, #0]
 801a56e:	e6a2      	b.n	801a2b6 <uxr_read_framed_msg+0x22>
 801a570:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a572:	9300      	str	r3, [sp, #0]
 801a574:	2301      	movs	r3, #1
 801a576:	9301      	str	r3, [sp, #4]
 801a578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a57a:	464a      	mov	r2, r9
 801a57c:	4641      	mov	r1, r8
 801a57e:	4620      	mov	r0, r4
 801a580:	f7ff fe06 	bl	801a190 <uxr_framing_read_transport>
 801a584:	2800      	cmp	r0, #0
 801a586:	f43f aec6 	beq.w	801a316 <uxr_read_framed_msg+0x82>
 801a58a:	7823      	ldrb	r3, [r4, #0]
 801a58c:	e693      	b.n	801a2b6 <uxr_read_framed_msg+0x22>
 801a58e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a590:	9300      	str	r3, [sp, #0]
 801a592:	2302      	movs	r3, #2
 801a594:	e7ef      	b.n	801a576 <uxr_read_framed_msg+0x2e2>
 801a596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a598:	9300      	str	r3, [sp, #0]
 801a59a:	2304      	movs	r3, #4
 801a59c:	9301      	str	r3, [sp, #4]
 801a59e:	464a      	mov	r2, r9
 801a5a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a5a2:	4641      	mov	r1, r8
 801a5a4:	4620      	mov	r0, r4
 801a5a6:	f7ff fdf3 	bl	801a190 <uxr_framing_read_transport>
 801a5aa:	2800      	cmp	r0, #0
 801a5ac:	d1ed      	bne.n	801a58a <uxr_read_framed_msg+0x2f6>
 801a5ae:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801a5b2:	2b7e      	cmp	r3, #126	; 0x7e
 801a5b4:	d0e9      	beq.n	801a58a <uxr_read_framed_msg+0x2f6>
 801a5b6:	e6ae      	b.n	801a316 <uxr_read_framed_msg+0x82>
 801a5b8:	30c30c31 	.word	0x30c30c31
 801a5bc:	0801db30 	.word	0x0801db30
 801a5c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a5c2:	9300      	str	r3, [sp, #0]
 801a5c4:	2305      	movs	r3, #5
 801a5c6:	9301      	str	r3, [sp, #4]
 801a5c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a5ca:	f7ff fde1 	bl	801a190 <uxr_framing_read_transport>
 801a5ce:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801a5d2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a5d6:	429a      	cmp	r2, r3
 801a5d8:	f43f ae9d 	beq.w	801a316 <uxr_read_framed_msg+0x82>
 801a5dc:	e668      	b.n	801a2b0 <uxr_read_framed_msg+0x1c>
 801a5de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a5e0:	9300      	str	r3, [sp, #0]
 801a5e2:	2303      	movs	r3, #3
 801a5e4:	e7c7      	b.n	801a576 <uxr_read_framed_msg+0x2e2>
 801a5e6:	2305      	movs	r3, #5
 801a5e8:	7023      	strb	r3, [r4, #0]
 801a5ea:	e664      	b.n	801a2b6 <uxr_read_framed_msg+0x22>
 801a5ec:	ee17 8a90 	vmov	r8, s15
 801a5f0:	f43f aef2 	beq.w	801a3d8 <uxr_read_framed_msg+0x144>
 801a5f4:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801a5f8:	d08e      	beq.n	801a518 <uxr_read_framed_msg+0x284>
 801a5fa:	ebae 0303 	sub.w	r3, lr, r3
 801a5fe:	3302      	adds	r3, #2
 801a600:	9301      	str	r3, [sp, #4]
 801a602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a604:	9300      	str	r3, [sp, #0]
 801a606:	e7b7      	b.n	801a578 <uxr_read_framed_msg+0x2e4>
 801a608:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a60a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801a60e:	7013      	strb	r3, [r2, #0]
 801a610:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801a612:	b003      	add	sp, #12
 801a614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a618:	f103 0c01 	add.w	ip, r3, #1
 801a61c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a620:	fba5 0202 	umull	r0, r2, r5, r2
 801a624:	0892      	lsrs	r2, r2, #2
 801a626:	202a      	movs	r0, #42	; 0x2a
 801a628:	fb00 c212 	mls	r2, r0, r2, ip
 801a62c:	fa5f fc82 	uxtb.w	ip, r2
 801a630:	4561      	cmp	r1, ip
 801a632:	d09d      	beq.n	801a570 <uxr_read_framed_msg+0x2dc>
 801a634:	3302      	adds	r3, #2
 801a636:	4422      	add	r2, r4
 801a638:	0859      	lsrs	r1, r3, #1
 801a63a:	7892      	ldrb	r2, [r2, #2]
 801a63c:	fba5 c101 	umull	ip, r1, r5, r1
 801a640:	0889      	lsrs	r1, r1, #2
 801a642:	fb00 3311 	mls	r3, r0, r1, r3
 801a646:	2a7e      	cmp	r2, #126	; 0x7e
 801a648:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a64c:	f000 80aa 	beq.w	801a7a4 <uxr_read_framed_msg+0x510>
 801a650:	f082 0220 	eor.w	r2, r2, #32
 801a654:	e654      	b.n	801a300 <uxr_read_framed_msg+0x6c>
 801a656:	1c58      	adds	r0, r3, #1
 801a658:	0842      	lsrs	r2, r0, #1
 801a65a:	fba5 c202 	umull	ip, r2, r5, r2
 801a65e:	0892      	lsrs	r2, r2, #2
 801a660:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a664:	fb0c 0212 	mls	r2, ip, r2, r0
 801a668:	b2d0      	uxtb	r0, r2
 801a66a:	4281      	cmp	r1, r0
 801a66c:	d08f      	beq.n	801a58e <uxr_read_framed_msg+0x2fa>
 801a66e:	4422      	add	r2, r4
 801a670:	3302      	adds	r3, #2
 801a672:	7890      	ldrb	r0, [r2, #2]
 801a674:	085a      	lsrs	r2, r3, #1
 801a676:	fba5 1202 	umull	r1, r2, r5, r2
 801a67a:	0892      	lsrs	r2, r2, #2
 801a67c:	fb0c 3312 	mls	r3, ip, r2, r3
 801a680:	287e      	cmp	r0, #126	; 0x7e
 801a682:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a686:	d07d      	beq.n	801a784 <uxr_read_framed_msg+0x4f0>
 801a688:	f080 0020 	eor.w	r0, r0, #32
 801a68c:	e660      	b.n	801a350 <uxr_read_framed_msg+0xbc>
 801a68e:	1c59      	adds	r1, r3, #1
 801a690:	084a      	lsrs	r2, r1, #1
 801a692:	fba5 c202 	umull	ip, r2, r5, r2
 801a696:	0892      	lsrs	r2, r2, #2
 801a698:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a69c:	fb0c 1212 	mls	r2, ip, r2, r1
 801a6a0:	b2d1      	uxtb	r1, r2
 801a6a2:	4288      	cmp	r0, r1
 801a6a4:	f43f af64 	beq.w	801a570 <uxr_read_framed_msg+0x2dc>
 801a6a8:	4422      	add	r2, r4
 801a6aa:	3302      	adds	r3, #2
 801a6ac:	7891      	ldrb	r1, [r2, #2]
 801a6ae:	085a      	lsrs	r2, r3, #1
 801a6b0:	fba5 0202 	umull	r0, r2, r5, r2
 801a6b4:	0892      	lsrs	r2, r2, #2
 801a6b6:	fb0c 3312 	mls	r3, ip, r2, r3
 801a6ba:	297e      	cmp	r1, #126	; 0x7e
 801a6bc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a6c0:	d070      	beq.n	801a7a4 <uxr_read_framed_msg+0x510>
 801a6c2:	f081 0120 	eor.w	r1, r1, #32
 801a6c6:	e6a3      	b.n	801a410 <uxr_read_framed_msg+0x17c>
 801a6c8:	f103 0c01 	add.w	ip, r3, #1
 801a6cc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a6d0:	fba5 0202 	umull	r0, r2, r5, r2
 801a6d4:	0892      	lsrs	r2, r2, #2
 801a6d6:	202a      	movs	r0, #42	; 0x2a
 801a6d8:	fb00 c212 	mls	r2, r0, r2, ip
 801a6dc:	fa5f fc82 	uxtb.w	ip, r2
 801a6e0:	4561      	cmp	r1, ip
 801a6e2:	f43f af58 	beq.w	801a596 <uxr_read_framed_msg+0x302>
 801a6e6:	4422      	add	r2, r4
 801a6e8:	3302      	adds	r3, #2
 801a6ea:	7891      	ldrb	r1, [r2, #2]
 801a6ec:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801a6f0:	085a      	lsrs	r2, r3, #1
 801a6f2:	fba5 c202 	umull	ip, r2, r5, r2
 801a6f6:	0892      	lsrs	r2, r2, #2
 801a6f8:	fb00 3312 	mls	r3, r0, r2, r3
 801a6fc:	297e      	cmp	r1, #126	; 0x7e
 801a6fe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a702:	f43f af48 	beq.w	801a596 <uxr_read_framed_msg+0x302>
 801a706:	f081 0120 	eor.w	r1, r1, #32
 801a70a:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801a70e:	e6e8      	b.n	801a4e2 <uxr_read_framed_msg+0x24e>
 801a710:	1c58      	adds	r0, r3, #1
 801a712:	0842      	lsrs	r2, r0, #1
 801a714:	fba5 c202 	umull	ip, r2, r5, r2
 801a718:	0892      	lsrs	r2, r2, #2
 801a71a:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a71e:	fb0c 0212 	mls	r2, ip, r2, r0
 801a722:	b2d0      	uxtb	r0, r2
 801a724:	4281      	cmp	r1, r0
 801a726:	f43f af32 	beq.w	801a58e <uxr_read_framed_msg+0x2fa>
 801a72a:	4422      	add	r2, r4
 801a72c:	3302      	adds	r3, #2
 801a72e:	7890      	ldrb	r0, [r2, #2]
 801a730:	085a      	lsrs	r2, r3, #1
 801a732:	fba5 1202 	umull	r1, r2, r5, r2
 801a736:	0892      	lsrs	r2, r2, #2
 801a738:	fb0c 3312 	mls	r3, ip, r2, r3
 801a73c:	287e      	cmp	r0, #126	; 0x7e
 801a73e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a742:	d01f      	beq.n	801a784 <uxr_read_framed_msg+0x4f0>
 801a744:	f080 0020 	eor.w	r0, r0, #32
 801a748:	e68b      	b.n	801a462 <uxr_read_framed_msg+0x1ce>
 801a74a:	1c51      	adds	r1, r2, #1
 801a74c:	084b      	lsrs	r3, r1, #1
 801a74e:	fba5 c303 	umull	ip, r3, r5, r3
 801a752:	089b      	lsrs	r3, r3, #2
 801a754:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a758:	fb0c 1313 	mls	r3, ip, r3, r1
 801a75c:	b2d9      	uxtb	r1, r3
 801a75e:	4288      	cmp	r0, r1
 801a760:	f43f af3d 	beq.w	801a5de <uxr_read_framed_msg+0x34a>
 801a764:	3202      	adds	r2, #2
 801a766:	4423      	add	r3, r4
 801a768:	0850      	lsrs	r0, r2, #1
 801a76a:	789b      	ldrb	r3, [r3, #2]
 801a76c:	fba5 1000 	umull	r1, r0, r5, r0
 801a770:	0880      	lsrs	r0, r0, #2
 801a772:	fb0c 2210 	mls	r2, ip, r0, r2
 801a776:	2b7e      	cmp	r3, #126	; 0x7e
 801a778:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801a77c:	d016      	beq.n	801a7ac <uxr_read_framed_msg+0x518>
 801a77e:	f083 0120 	eor.w	r1, r3, #32
 801a782:	e68b      	b.n	801a49c <uxr_read_framed_msg+0x208>
 801a784:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a786:	9300      	str	r3, [sp, #0]
 801a788:	2302      	movs	r3, #2
 801a78a:	9301      	str	r3, [sp, #4]
 801a78c:	464a      	mov	r2, r9
 801a78e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a790:	4641      	mov	r1, r8
 801a792:	4620      	mov	r0, r4
 801a794:	f7ff fcfc 	bl	801a190 <uxr_framing_read_transport>
 801a798:	2800      	cmp	r0, #0
 801a79a:	f47f aef6 	bne.w	801a58a <uxr_read_framed_msg+0x2f6>
 801a79e:	2301      	movs	r3, #1
 801a7a0:	7023      	strb	r3, [r4, #0]
 801a7a2:	e588      	b.n	801a2b6 <uxr_read_framed_msg+0x22>
 801a7a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a7a6:	9300      	str	r3, [sp, #0]
 801a7a8:	2301      	movs	r3, #1
 801a7aa:	e7ee      	b.n	801a78a <uxr_read_framed_msg+0x4f6>
 801a7ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a7ae:	9300      	str	r3, [sp, #0]
 801a7b0:	2303      	movs	r3, #3
 801a7b2:	e7ea      	b.n	801a78a <uxr_read_framed_msg+0x4f6>
 801a7b4:	ee17 8a90 	vmov	r8, s15
 801a7b8:	e6ae      	b.n	801a518 <uxr_read_framed_msg+0x284>
 801a7ba:	bf00      	nop

0801a7bc <rcl_get_default_domain_id>:
 801a7bc:	b530      	push	{r4, r5, lr}
 801a7be:	b083      	sub	sp, #12
 801a7c0:	2300      	movs	r3, #0
 801a7c2:	9300      	str	r3, [sp, #0]
 801a7c4:	b1d0      	cbz	r0, 801a7fc <rcl_get_default_domain_id+0x40>
 801a7c6:	4604      	mov	r4, r0
 801a7c8:	4669      	mov	r1, sp
 801a7ca:	4815      	ldr	r0, [pc, #84]	; (801a820 <rcl_get_default_domain_id+0x64>)
 801a7cc:	f7fc fd90 	bl	80172f0 <rcutils_get_env>
 801a7d0:	4602      	mov	r2, r0
 801a7d2:	b110      	cbz	r0, 801a7da <rcl_get_default_domain_id+0x1e>
 801a7d4:	2001      	movs	r0, #1
 801a7d6:	b003      	add	sp, #12
 801a7d8:	bd30      	pop	{r4, r5, pc}
 801a7da:	9b00      	ldr	r3, [sp, #0]
 801a7dc:	b18b      	cbz	r3, 801a802 <rcl_get_default_domain_id+0x46>
 801a7de:	7818      	ldrb	r0, [r3, #0]
 801a7e0:	2800      	cmp	r0, #0
 801a7e2:	d0f8      	beq.n	801a7d6 <rcl_get_default_domain_id+0x1a>
 801a7e4:	a901      	add	r1, sp, #4
 801a7e6:	4618      	mov	r0, r3
 801a7e8:	9201      	str	r2, [sp, #4]
 801a7ea:	f001 f9ef 	bl	801bbcc <strtoul>
 801a7ee:	4605      	mov	r5, r0
 801a7f0:	b150      	cbz	r0, 801a808 <rcl_get_default_domain_id+0x4c>
 801a7f2:	1c43      	adds	r3, r0, #1
 801a7f4:	d00d      	beq.n	801a812 <rcl_get_default_domain_id+0x56>
 801a7f6:	6025      	str	r5, [r4, #0]
 801a7f8:	2000      	movs	r0, #0
 801a7fa:	e7ec      	b.n	801a7d6 <rcl_get_default_domain_id+0x1a>
 801a7fc:	200b      	movs	r0, #11
 801a7fe:	b003      	add	sp, #12
 801a800:	bd30      	pop	{r4, r5, pc}
 801a802:	4618      	mov	r0, r3
 801a804:	b003      	add	sp, #12
 801a806:	bd30      	pop	{r4, r5, pc}
 801a808:	9b01      	ldr	r3, [sp, #4]
 801a80a:	781b      	ldrb	r3, [r3, #0]
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d0f2      	beq.n	801a7f6 <rcl_get_default_domain_id+0x3a>
 801a810:	e7e0      	b.n	801a7d4 <rcl_get_default_domain_id+0x18>
 801a812:	f000 fca3 	bl	801b15c <__errno>
 801a816:	6803      	ldr	r3, [r0, #0]
 801a818:	2b22      	cmp	r3, #34	; 0x22
 801a81a:	d1ec      	bne.n	801a7f6 <rcl_get_default_domain_id+0x3a>
 801a81c:	e7da      	b.n	801a7d4 <rcl_get_default_domain_id+0x18>
 801a81e:	bf00      	nop
 801a820:	0801dd30 	.word	0x0801dd30

0801a824 <rcl_expand_topic_name>:
 801a824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a828:	b08b      	sub	sp, #44	; 0x2c
 801a82a:	9306      	str	r3, [sp, #24]
 801a82c:	2800      	cmp	r0, #0
 801a82e:	f000 80ad 	beq.w	801a98c <rcl_expand_topic_name+0x168>
 801a832:	460e      	mov	r6, r1
 801a834:	2900      	cmp	r1, #0
 801a836:	f000 80a9 	beq.w	801a98c <rcl_expand_topic_name+0x168>
 801a83a:	4617      	mov	r7, r2
 801a83c:	2a00      	cmp	r2, #0
 801a83e:	f000 80a5 	beq.w	801a98c <rcl_expand_topic_name+0x168>
 801a842:	2b00      	cmp	r3, #0
 801a844:	f000 80a2 	beq.w	801a98c <rcl_expand_topic_name+0x168>
 801a848:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	f000 809e 	beq.w	801a98c <rcl_expand_topic_name+0x168>
 801a850:	2200      	movs	r2, #0
 801a852:	a909      	add	r1, sp, #36	; 0x24
 801a854:	4680      	mov	r8, r0
 801a856:	f000 f9f5 	bl	801ac44 <rcl_validate_topic_name>
 801a85a:	4604      	mov	r4, r0
 801a85c:	2800      	cmp	r0, #0
 801a85e:	f040 8096 	bne.w	801a98e <rcl_expand_topic_name+0x16a>
 801a862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a864:	2b00      	cmp	r3, #0
 801a866:	f040 809a 	bne.w	801a99e <rcl_expand_topic_name+0x17a>
 801a86a:	4602      	mov	r2, r0
 801a86c:	a909      	add	r1, sp, #36	; 0x24
 801a86e:	4630      	mov	r0, r6
 801a870:	f7fd f940 	bl	8017af4 <rmw_validate_node_name>
 801a874:	2800      	cmp	r0, #0
 801a876:	f040 808e 	bne.w	801a996 <rcl_expand_topic_name+0x172>
 801a87a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a87c:	2a00      	cmp	r2, #0
 801a87e:	f040 8093 	bne.w	801a9a8 <rcl_expand_topic_name+0x184>
 801a882:	a909      	add	r1, sp, #36	; 0x24
 801a884:	4638      	mov	r0, r7
 801a886:	f7fd f917 	bl	8017ab8 <rmw_validate_namespace>
 801a88a:	2800      	cmp	r0, #0
 801a88c:	f040 8083 	bne.w	801a996 <rcl_expand_topic_name+0x172>
 801a890:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a892:	2c00      	cmp	r4, #0
 801a894:	f040 80ed 	bne.w	801aa72 <rcl_expand_topic_name+0x24e>
 801a898:	217b      	movs	r1, #123	; 0x7b
 801a89a:	4640      	mov	r0, r8
 801a89c:	f001 f8e5 	bl	801ba6a <strchr>
 801a8a0:	f898 3000 	ldrb.w	r3, [r8]
 801a8a4:	2b2f      	cmp	r3, #47	; 0x2f
 801a8a6:	4605      	mov	r5, r0
 801a8a8:	f000 809e 	beq.w	801a9e8 <rcl_expand_topic_name+0x1c4>
 801a8ac:	2b7e      	cmp	r3, #126	; 0x7e
 801a8ae:	f040 80a2 	bne.w	801a9f6 <rcl_expand_topic_name+0x1d2>
 801a8b2:	4638      	mov	r0, r7
 801a8b4:	f7e5 fc96 	bl	80001e4 <strlen>
 801a8b8:	4a82      	ldr	r2, [pc, #520]	; (801aac4 <rcl_expand_topic_name+0x2a0>)
 801a8ba:	4b83      	ldr	r3, [pc, #524]	; (801aac8 <rcl_expand_topic_name+0x2a4>)
 801a8bc:	2801      	cmp	r0, #1
 801a8be:	bf18      	it	ne
 801a8c0:	4613      	movne	r3, r2
 801a8c2:	9302      	str	r3, [sp, #8]
 801a8c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a8c6:	9300      	str	r3, [sp, #0]
 801a8c8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801a8cc:	f108 0301 	add.w	r3, r8, #1
 801a8d0:	9305      	str	r3, [sp, #20]
 801a8d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a8d6:	9301      	str	r3, [sp, #4]
 801a8d8:	ab14      	add	r3, sp, #80	; 0x50
 801a8da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a8dc:	f7fc fd30 	bl	8017340 <rcutils_format_string_limit>
 801a8e0:	4682      	mov	sl, r0
 801a8e2:	2800      	cmp	r0, #0
 801a8e4:	f000 80c7 	beq.w	801aa76 <rcl_expand_topic_name+0x252>
 801a8e8:	2d00      	cmp	r5, #0
 801a8ea:	f000 80a2 	beq.w	801aa32 <rcl_expand_topic_name+0x20e>
 801a8ee:	217b      	movs	r1, #123	; 0x7b
 801a8f0:	f001 f8bb 	bl	801ba6a <strchr>
 801a8f4:	46d1      	mov	r9, sl
 801a8f6:	4605      	mov	r5, r0
 801a8f8:	9407      	str	r4, [sp, #28]
 801a8fa:	46d3      	mov	fp, sl
 801a8fc:	464c      	mov	r4, r9
 801a8fe:	2d00      	cmp	r5, #0
 801a900:	f000 80be 	beq.w	801aa80 <rcl_expand_topic_name+0x25c>
 801a904:	217d      	movs	r1, #125	; 0x7d
 801a906:	4620      	mov	r0, r4
 801a908:	f001 f8af 	bl	801ba6a <strchr>
 801a90c:	eba0 0905 	sub.w	r9, r0, r5
 801a910:	f109 0a01 	add.w	sl, r9, #1
 801a914:	486d      	ldr	r0, [pc, #436]	; (801aacc <rcl_expand_topic_name+0x2a8>)
 801a916:	4652      	mov	r2, sl
 801a918:	4629      	mov	r1, r5
 801a91a:	f001 f8bb 	bl	801ba94 <strncmp>
 801a91e:	2800      	cmp	r0, #0
 801a920:	d067      	beq.n	801a9f2 <rcl_expand_topic_name+0x1ce>
 801a922:	486b      	ldr	r0, [pc, #428]	; (801aad0 <rcl_expand_topic_name+0x2ac>)
 801a924:	4652      	mov	r2, sl
 801a926:	4629      	mov	r1, r5
 801a928:	f001 f8b4 	bl	801ba94 <strncmp>
 801a92c:	b130      	cbz	r0, 801a93c <rcl_expand_topic_name+0x118>
 801a92e:	4869      	ldr	r0, [pc, #420]	; (801aad4 <rcl_expand_topic_name+0x2b0>)
 801a930:	4652      	mov	r2, sl
 801a932:	4629      	mov	r1, r5
 801a934:	f001 f8ae 	bl	801ba94 <strncmp>
 801a938:	2800      	cmp	r0, #0
 801a93a:	d137      	bne.n	801a9ac <rcl_expand_topic_name+0x188>
 801a93c:	46b9      	mov	r9, r7
 801a93e:	ab16      	add	r3, sp, #88	; 0x58
 801a940:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a944:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a948:	ab14      	add	r3, sp, #80	; 0x50
 801a94a:	4628      	mov	r0, r5
 801a94c:	cb0c      	ldmia	r3, {r2, r3}
 801a94e:	4651      	mov	r1, sl
 801a950:	f7fc fe32 	bl	80175b8 <rcutils_strndup>
 801a954:	4605      	mov	r5, r0
 801a956:	2800      	cmp	r0, #0
 801a958:	f000 809c 	beq.w	801aa94 <rcl_expand_topic_name+0x270>
 801a95c:	464a      	mov	r2, r9
 801a95e:	4620      	mov	r0, r4
 801a960:	ab14      	add	r3, sp, #80	; 0x50
 801a962:	4629      	mov	r1, r5
 801a964:	f7fc fd26 	bl	80173b4 <rcutils_repl_str>
 801a968:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a96a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a96c:	4604      	mov	r4, r0
 801a96e:	4628      	mov	r0, r5
 801a970:	4798      	blx	r3
 801a972:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a974:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a976:	4658      	mov	r0, fp
 801a978:	4798      	blx	r3
 801a97a:	2c00      	cmp	r4, #0
 801a97c:	d07b      	beq.n	801aa76 <rcl_expand_topic_name+0x252>
 801a97e:	217b      	movs	r1, #123	; 0x7b
 801a980:	4620      	mov	r0, r4
 801a982:	f001 f872 	bl	801ba6a <strchr>
 801a986:	46a3      	mov	fp, r4
 801a988:	4605      	mov	r5, r0
 801a98a:	e7b8      	b.n	801a8fe <rcl_expand_topic_name+0xda>
 801a98c:	240b      	movs	r4, #11
 801a98e:	4620      	mov	r0, r4
 801a990:	b00b      	add	sp, #44	; 0x2c
 801a992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a996:	f7fb fd8b 	bl	80164b0 <rcl_convert_rmw_ret_to_rcl_ret>
 801a99a:	4604      	mov	r4, r0
 801a99c:	e7f7      	b.n	801a98e <rcl_expand_topic_name+0x16a>
 801a99e:	2467      	movs	r4, #103	; 0x67
 801a9a0:	4620      	mov	r0, r4
 801a9a2:	b00b      	add	sp, #44	; 0x2c
 801a9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9a8:	24c9      	movs	r4, #201	; 0xc9
 801a9aa:	e7f0      	b.n	801a98e <rcl_expand_topic_name+0x16a>
 801a9ac:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801a9b0:	9806      	ldr	r0, [sp, #24]
 801a9b2:	1c69      	adds	r1, r5, #1
 801a9b4:	f7fc ff1a 	bl	80177ec <rcutils_string_map_getn>
 801a9b8:	4681      	mov	r9, r0
 801a9ba:	2800      	cmp	r0, #0
 801a9bc:	d1bf      	bne.n	801a93e <rcl_expand_topic_name+0x11a>
 801a9be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a9c0:	aa16      	add	r2, sp, #88	; 0x58
 801a9c2:	6018      	str	r0, [r3, #0]
 801a9c4:	ca07      	ldmia	r2, {r0, r1, r2}
 801a9c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a9ca:	ab14      	add	r3, sp, #80	; 0x50
 801a9cc:	cb0c      	ldmia	r3, {r2, r3}
 801a9ce:	4651      	mov	r1, sl
 801a9d0:	4628      	mov	r0, r5
 801a9d2:	f7fc fdf1 	bl	80175b8 <rcutils_strndup>
 801a9d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a9d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a9da:	4798      	blx	r3
 801a9dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a9de:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a9e0:	4658      	mov	r0, fp
 801a9e2:	2469      	movs	r4, #105	; 0x69
 801a9e4:	4798      	blx	r3
 801a9e6:	e7d2      	b.n	801a98e <rcl_expand_topic_name+0x16a>
 801a9e8:	2800      	cmp	r0, #0
 801a9ea:	d05b      	beq.n	801aaa4 <rcl_expand_topic_name+0x280>
 801a9ec:	46c1      	mov	r9, r8
 801a9ee:	46a2      	mov	sl, r4
 801a9f0:	e782      	b.n	801a8f8 <rcl_expand_topic_name+0xd4>
 801a9f2:	46b1      	mov	r9, r6
 801a9f4:	e7a3      	b.n	801a93e <rcl_expand_topic_name+0x11a>
 801a9f6:	2800      	cmp	r0, #0
 801a9f8:	d1f8      	bne.n	801a9ec <rcl_expand_topic_name+0x1c8>
 801a9fa:	4638      	mov	r0, r7
 801a9fc:	f7e5 fbf2 	bl	80001e4 <strlen>
 801aa00:	4a35      	ldr	r2, [pc, #212]	; (801aad8 <rcl_expand_topic_name+0x2b4>)
 801aa02:	4b36      	ldr	r3, [pc, #216]	; (801aadc <rcl_expand_topic_name+0x2b8>)
 801aa04:	f8cd 8010 	str.w	r8, [sp, #16]
 801aa08:	2801      	cmp	r0, #1
 801aa0a:	bf18      	it	ne
 801aa0c:	4613      	movne	r3, r2
 801aa0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801aa12:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801aa16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801aa18:	9703      	str	r7, [sp, #12]
 801aa1a:	9200      	str	r2, [sp, #0]
 801aa1c:	ab14      	add	r3, sp, #80	; 0x50
 801aa1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aa20:	f7fc fc8e 	bl	8017340 <rcutils_format_string_limit>
 801aa24:	4682      	mov	sl, r0
 801aa26:	4653      	mov	r3, sl
 801aa28:	b32b      	cbz	r3, 801aa76 <rcl_expand_topic_name+0x252>
 801aa2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801aa2c:	f8c3 a000 	str.w	sl, [r3]
 801aa30:	e7ad      	b.n	801a98e <rcl_expand_topic_name+0x16a>
 801aa32:	f89a 3000 	ldrb.w	r3, [sl]
 801aa36:	2b2f      	cmp	r3, #47	; 0x2f
 801aa38:	d0f7      	beq.n	801aa2a <rcl_expand_topic_name+0x206>
 801aa3a:	4638      	mov	r0, r7
 801aa3c:	f7e5 fbd2 	bl	80001e4 <strlen>
 801aa40:	4a25      	ldr	r2, [pc, #148]	; (801aad8 <rcl_expand_topic_name+0x2b4>)
 801aa42:	4b26      	ldr	r3, [pc, #152]	; (801aadc <rcl_expand_topic_name+0x2b8>)
 801aa44:	f8cd a010 	str.w	sl, [sp, #16]
 801aa48:	2801      	cmp	r0, #1
 801aa4a:	bf18      	it	ne
 801aa4c:	4613      	movne	r3, r2
 801aa4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801aa52:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801aa56:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801aa58:	9703      	str	r7, [sp, #12]
 801aa5a:	9200      	str	r2, [sp, #0]
 801aa5c:	ab14      	add	r3, sp, #80	; 0x50
 801aa5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aa60:	f7fc fc6e 	bl	8017340 <rcutils_format_string_limit>
 801aa64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aa66:	9918      	ldr	r1, [sp, #96]	; 0x60
 801aa68:	4605      	mov	r5, r0
 801aa6a:	4650      	mov	r0, sl
 801aa6c:	4798      	blx	r3
 801aa6e:	46aa      	mov	sl, r5
 801aa70:	e7d9      	b.n	801aa26 <rcl_expand_topic_name+0x202>
 801aa72:	24ca      	movs	r4, #202	; 0xca
 801aa74:	e78b      	b.n	801a98e <rcl_expand_topic_name+0x16a>
 801aa76:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801aa78:	2300      	movs	r3, #0
 801aa7a:	6013      	str	r3, [r2, #0]
 801aa7c:	240a      	movs	r4, #10
 801aa7e:	e786      	b.n	801a98e <rcl_expand_topic_name+0x16a>
 801aa80:	465b      	mov	r3, fp
 801aa82:	9c07      	ldr	r4, [sp, #28]
 801aa84:	46da      	mov	sl, fp
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d1d3      	bne.n	801aa32 <rcl_expand_topic_name+0x20e>
 801aa8a:	f898 3000 	ldrb.w	r3, [r8]
 801aa8e:	2b2f      	cmp	r3, #47	; 0x2f
 801aa90:	d0cb      	beq.n	801aa2a <rcl_expand_topic_name+0x206>
 801aa92:	e7b2      	b.n	801a9fa <rcl_expand_topic_name+0x1d6>
 801aa94:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 801aa98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aa9a:	6015      	str	r5, [r2, #0]
 801aa9c:	4658      	mov	r0, fp
 801aa9e:	4798      	blx	r3
 801aaa0:	240a      	movs	r4, #10
 801aaa2:	e774      	b.n	801a98e <rcl_expand_topic_name+0x16a>
 801aaa4:	ab17      	add	r3, sp, #92	; 0x5c
 801aaa6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aaaa:	e88d 0003 	stmia.w	sp, {r0, r1}
 801aaae:	ab14      	add	r3, sp, #80	; 0x50
 801aab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801aab2:	4640      	mov	r0, r8
 801aab4:	f7fc fd5e 	bl	8017574 <rcutils_strdup>
 801aab8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801aaba:	2800      	cmp	r0, #0
 801aabc:	6018      	str	r0, [r3, #0]
 801aabe:	bf08      	it	eq
 801aac0:	240a      	moveq	r4, #10
 801aac2:	e764      	b.n	801a98e <rcl_expand_topic_name+0x16a>
 801aac4:	0801dd40 	.word	0x0801dd40
 801aac8:	0801cdac 	.word	0x0801cdac
 801aacc:	0801dd48 	.word	0x0801dd48
 801aad0:	0801dd50 	.word	0x0801dd50
 801aad4:	0801dd58 	.word	0x0801dd58
 801aad8:	0801d674 	.word	0x0801d674
 801aadc:	0801cdbc 	.word	0x0801cdbc

0801aae0 <rcl_get_default_topic_name_substitutions>:
 801aae0:	2800      	cmp	r0, #0
 801aae2:	bf0c      	ite	eq
 801aae4:	200b      	moveq	r0, #11
 801aae6:	2000      	movne	r0, #0
 801aae8:	4770      	bx	lr
 801aaea:	bf00      	nop

0801aaec <rcl_get_zero_initialized_guard_condition>:
 801aaec:	4a03      	ldr	r2, [pc, #12]	; (801aafc <rcl_get_zero_initialized_guard_condition+0x10>)
 801aaee:	4603      	mov	r3, r0
 801aaf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801aaf4:	e883 0003 	stmia.w	r3, {r0, r1}
 801aaf8:	4618      	mov	r0, r3
 801aafa:	4770      	bx	lr
 801aafc:	0801dd64 	.word	0x0801dd64

0801ab00 <rcl_guard_condition_init_from_rmw>:
 801ab00:	b082      	sub	sp, #8
 801ab02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab06:	b086      	sub	sp, #24
 801ab08:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801ab0c:	4604      	mov	r4, r0
 801ab0e:	f84c 3f04 	str.w	r3, [ip, #4]!
 801ab12:	460e      	mov	r6, r1
 801ab14:	4617      	mov	r7, r2
 801ab16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ab1a:	f10d 0e04 	add.w	lr, sp, #4
 801ab1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ab22:	f8dc 3000 	ldr.w	r3, [ip]
 801ab26:	f8ce 3000 	str.w	r3, [lr]
 801ab2a:	a801      	add	r0, sp, #4
 801ab2c:	f7f5 fb94 	bl	8010258 <rcutils_allocator_is_valid>
 801ab30:	b350      	cbz	r0, 801ab88 <rcl_guard_condition_init_from_rmw+0x88>
 801ab32:	b34c      	cbz	r4, 801ab88 <rcl_guard_condition_init_from_rmw+0x88>
 801ab34:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801ab38:	f1b8 0f00 	cmp.w	r8, #0
 801ab3c:	d11e      	bne.n	801ab7c <rcl_guard_condition_init_from_rmw+0x7c>
 801ab3e:	b31f      	cbz	r7, 801ab88 <rcl_guard_condition_init_from_rmw+0x88>
 801ab40:	4638      	mov	r0, r7
 801ab42:	f7fb fcd3 	bl	80164ec <rcl_context_is_valid>
 801ab46:	b328      	cbz	r0, 801ab94 <rcl_guard_condition_init_from_rmw+0x94>
 801ab48:	9b01      	ldr	r3, [sp, #4]
 801ab4a:	9905      	ldr	r1, [sp, #20]
 801ab4c:	201c      	movs	r0, #28
 801ab4e:	4798      	blx	r3
 801ab50:	4605      	mov	r5, r0
 801ab52:	6060      	str	r0, [r4, #4]
 801ab54:	b358      	cbz	r0, 801abae <rcl_guard_condition_init_from_rmw+0xae>
 801ab56:	b1fe      	cbz	r6, 801ab98 <rcl_guard_condition_init_from_rmw+0x98>
 801ab58:	6006      	str	r6, [r0, #0]
 801ab5a:	f880 8004 	strb.w	r8, [r0, #4]
 801ab5e:	ac01      	add	r4, sp, #4
 801ab60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ab62:	f105 0c08 	add.w	ip, r5, #8
 801ab66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ab6a:	6823      	ldr	r3, [r4, #0]
 801ab6c:	f8cc 3000 	str.w	r3, [ip]
 801ab70:	2000      	movs	r0, #0
 801ab72:	b006      	add	sp, #24
 801ab74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab78:	b002      	add	sp, #8
 801ab7a:	4770      	bx	lr
 801ab7c:	2064      	movs	r0, #100	; 0x64
 801ab7e:	b006      	add	sp, #24
 801ab80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab84:	b002      	add	sp, #8
 801ab86:	4770      	bx	lr
 801ab88:	200b      	movs	r0, #11
 801ab8a:	b006      	add	sp, #24
 801ab8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab90:	b002      	add	sp, #8
 801ab92:	4770      	bx	lr
 801ab94:	2065      	movs	r0, #101	; 0x65
 801ab96:	e7f2      	b.n	801ab7e <rcl_guard_condition_init_from_rmw+0x7e>
 801ab98:	6838      	ldr	r0, [r7, #0]
 801ab9a:	3028      	adds	r0, #40	; 0x28
 801ab9c:	f000 fa50 	bl	801b040 <rmw_create_guard_condition>
 801aba0:	6028      	str	r0, [r5, #0]
 801aba2:	6865      	ldr	r5, [r4, #4]
 801aba4:	682e      	ldr	r6, [r5, #0]
 801aba6:	b126      	cbz	r6, 801abb2 <rcl_guard_condition_init_from_rmw+0xb2>
 801aba8:	2301      	movs	r3, #1
 801abaa:	712b      	strb	r3, [r5, #4]
 801abac:	e7d7      	b.n	801ab5e <rcl_guard_condition_init_from_rmw+0x5e>
 801abae:	200a      	movs	r0, #10
 801abb0:	e7e5      	b.n	801ab7e <rcl_guard_condition_init_from_rmw+0x7e>
 801abb2:	4628      	mov	r0, r5
 801abb4:	9b02      	ldr	r3, [sp, #8]
 801abb6:	9905      	ldr	r1, [sp, #20]
 801abb8:	4798      	blx	r3
 801abba:	6066      	str	r6, [r4, #4]
 801abbc:	2001      	movs	r0, #1
 801abbe:	e7de      	b.n	801ab7e <rcl_guard_condition_init_from_rmw+0x7e>

0801abc0 <rcl_guard_condition_fini>:
 801abc0:	b570      	push	{r4, r5, r6, lr}
 801abc2:	b082      	sub	sp, #8
 801abc4:	b1f0      	cbz	r0, 801ac04 <rcl_guard_condition_fini+0x44>
 801abc6:	6843      	ldr	r3, [r0, #4]
 801abc8:	4604      	mov	r4, r0
 801abca:	b163      	cbz	r3, 801abe6 <rcl_guard_condition_fini+0x26>
 801abcc:	6818      	ldr	r0, [r3, #0]
 801abce:	68de      	ldr	r6, [r3, #12]
 801abd0:	6999      	ldr	r1, [r3, #24]
 801abd2:	b160      	cbz	r0, 801abee <rcl_guard_condition_fini+0x2e>
 801abd4:	791d      	ldrb	r5, [r3, #4]
 801abd6:	b965      	cbnz	r5, 801abf2 <rcl_guard_condition_fini+0x32>
 801abd8:	4618      	mov	r0, r3
 801abda:	47b0      	blx	r6
 801abdc:	2300      	movs	r3, #0
 801abde:	4628      	mov	r0, r5
 801abe0:	6063      	str	r3, [r4, #4]
 801abe2:	b002      	add	sp, #8
 801abe4:	bd70      	pop	{r4, r5, r6, pc}
 801abe6:	461d      	mov	r5, r3
 801abe8:	4628      	mov	r0, r5
 801abea:	b002      	add	sp, #8
 801abec:	bd70      	pop	{r4, r5, r6, pc}
 801abee:	4605      	mov	r5, r0
 801abf0:	e7f2      	b.n	801abd8 <rcl_guard_condition_fini+0x18>
 801abf2:	9101      	str	r1, [sp, #4]
 801abf4:	f000 fa38 	bl	801b068 <rmw_destroy_guard_condition>
 801abf8:	1e05      	subs	r5, r0, #0
 801abfa:	6863      	ldr	r3, [r4, #4]
 801abfc:	9901      	ldr	r1, [sp, #4]
 801abfe:	bf18      	it	ne
 801ac00:	2501      	movne	r5, #1
 801ac02:	e7e9      	b.n	801abd8 <rcl_guard_condition_fini+0x18>
 801ac04:	250b      	movs	r5, #11
 801ac06:	4628      	mov	r0, r5
 801ac08:	b002      	add	sp, #8
 801ac0a:	bd70      	pop	{r4, r5, r6, pc}

0801ac0c <rcl_guard_condition_get_default_options>:
 801ac0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac0e:	b087      	sub	sp, #28
 801ac10:	4606      	mov	r6, r0
 801ac12:	4668      	mov	r0, sp
 801ac14:	f7f5 fb12 	bl	801023c <rcutils_get_default_allocator>
 801ac18:	4b09      	ldr	r3, [pc, #36]	; (801ac40 <rcl_guard_condition_get_default_options+0x34>)
 801ac1a:	46ee      	mov	lr, sp
 801ac1c:	469c      	mov	ip, r3
 801ac1e:	461d      	mov	r5, r3
 801ac20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ac24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ac28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac2a:	4634      	mov	r4, r6
 801ac2c:	f8de 7000 	ldr.w	r7, [lr]
 801ac30:	f8cc 7000 	str.w	r7, [ip]
 801ac34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac36:	4630      	mov	r0, r6
 801ac38:	6027      	str	r7, [r4, #0]
 801ac3a:	b007      	add	sp, #28
 801ac3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac3e:	bf00      	nop
 801ac40:	2001ccd4 	.word	0x2001ccd4

0801ac44 <rcl_validate_topic_name>:
 801ac44:	2800      	cmp	r0, #0
 801ac46:	d07a      	beq.n	801ad3e <rcl_validate_topic_name+0xfa>
 801ac48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac4c:	460e      	mov	r6, r1
 801ac4e:	2900      	cmp	r1, #0
 801ac50:	d07c      	beq.n	801ad4c <rcl_validate_topic_name+0x108>
 801ac52:	4617      	mov	r7, r2
 801ac54:	4605      	mov	r5, r0
 801ac56:	f7e5 fac5 	bl	80001e4 <strlen>
 801ac5a:	b1b0      	cbz	r0, 801ac8a <rcl_validate_topic_name+0x46>
 801ac5c:	f895 9000 	ldrb.w	r9, [r5]
 801ac60:	f8df c180 	ldr.w	ip, [pc, #384]	; 801ade4 <rcl_validate_topic_name+0x1a0>
 801ac64:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801ac68:	f013 0304 	ands.w	r3, r3, #4
 801ac6c:	d169      	bne.n	801ad42 <rcl_validate_topic_name+0xfe>
 801ac6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801ac72:	f815 2008 	ldrb.w	r2, [r5, r8]
 801ac76:	2a2f      	cmp	r2, #47	; 0x2f
 801ac78:	d10e      	bne.n	801ac98 <rcl_validate_topic_name+0x54>
 801ac7a:	2202      	movs	r2, #2
 801ac7c:	6032      	str	r2, [r6, #0]
 801ac7e:	b36f      	cbz	r7, 801acdc <rcl_validate_topic_name+0x98>
 801ac80:	f8c7 8000 	str.w	r8, [r7]
 801ac84:	4618      	mov	r0, r3
 801ac86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac8a:	2301      	movs	r3, #1
 801ac8c:	6033      	str	r3, [r6, #0]
 801ac8e:	b32f      	cbz	r7, 801acdc <rcl_validate_topic_name+0x98>
 801ac90:	2000      	movs	r0, #0
 801ac92:	6038      	str	r0, [r7, #0]
 801ac94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac98:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 801ac9c:	461c      	mov	r4, r3
 801ac9e:	4619      	mov	r1, r3
 801aca0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801aca4:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801aca8:	f1be 0f09 	cmp.w	lr, #9
 801acac:	d919      	bls.n	801ace2 <rcl_validate_topic_name+0x9e>
 801acae:	f022 0e20 	bic.w	lr, r2, #32
 801acb2:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 801acb6:	f1be 0f19 	cmp.w	lr, #25
 801acba:	d912      	bls.n	801ace2 <rcl_validate_topic_name+0x9e>
 801acbc:	2a5f      	cmp	r2, #95	; 0x5f
 801acbe:	d019      	beq.n	801acf4 <rcl_validate_topic_name+0xb0>
 801acc0:	2a2f      	cmp	r2, #47	; 0x2f
 801acc2:	d051      	beq.n	801ad68 <rcl_validate_topic_name+0x124>
 801acc4:	2a7e      	cmp	r2, #126	; 0x7e
 801acc6:	d048      	beq.n	801ad5a <rcl_validate_topic_name+0x116>
 801acc8:	2a7b      	cmp	r2, #123	; 0x7b
 801acca:	d054      	beq.n	801ad76 <rcl_validate_topic_name+0x132>
 801accc:	2a7d      	cmp	r2, #125	; 0x7d
 801acce:	d161      	bne.n	801ad94 <rcl_validate_topic_name+0x150>
 801acd0:	2c00      	cmp	r4, #0
 801acd2:	d155      	bne.n	801ad80 <rcl_validate_topic_name+0x13c>
 801acd4:	2305      	movs	r3, #5
 801acd6:	6033      	str	r3, [r6, #0]
 801acd8:	b107      	cbz	r7, 801acdc <rcl_validate_topic_name+0x98>
 801acda:	6039      	str	r1, [r7, #0]
 801acdc:	2000      	movs	r0, #0
 801acde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ace2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ace6:	0752      	lsls	r2, r2, #29
 801ace8:	d504      	bpl.n	801acf4 <rcl_validate_topic_name+0xb0>
 801acea:	b11c      	cbz	r4, 801acf4 <rcl_validate_topic_name+0xb0>
 801acec:	b111      	cbz	r1, 801acf4 <rcl_validate_topic_name+0xb0>
 801acee:	1e4a      	subs	r2, r1, #1
 801acf0:	429a      	cmp	r2, r3
 801acf2:	d02d      	beq.n	801ad50 <rcl_validate_topic_name+0x10c>
 801acf4:	3101      	adds	r1, #1
 801acf6:	4288      	cmp	r0, r1
 801acf8:	d1d2      	bne.n	801aca0 <rcl_validate_topic_name+0x5c>
 801acfa:	2c00      	cmp	r4, #0
 801acfc:	d145      	bne.n	801ad8a <rcl_validate_topic_name+0x146>
 801acfe:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 801ad02:	d04f      	beq.n	801ada4 <rcl_validate_topic_name+0x160>
 801ad04:	4620      	mov	r0, r4
 801ad06:	2301      	movs	r3, #1
 801ad08:	e006      	b.n	801ad18 <rcl_validate_topic_name+0xd4>
 801ad0a:	428b      	cmp	r3, r1
 801ad0c:	f105 0501 	add.w	r5, r5, #1
 801ad10:	f103 0201 	add.w	r2, r3, #1
 801ad14:	d236      	bcs.n	801ad84 <rcl_validate_topic_name+0x140>
 801ad16:	4613      	mov	r3, r2
 801ad18:	4580      	cmp	r8, r0
 801ad1a:	f100 0001 	add.w	r0, r0, #1
 801ad1e:	d0f4      	beq.n	801ad0a <rcl_validate_topic_name+0xc6>
 801ad20:	782a      	ldrb	r2, [r5, #0]
 801ad22:	2a2f      	cmp	r2, #47	; 0x2f
 801ad24:	d1f1      	bne.n	801ad0a <rcl_validate_topic_name+0xc6>
 801ad26:	786a      	ldrb	r2, [r5, #1]
 801ad28:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ad2c:	0754      	lsls	r4, r2, #29
 801ad2e:	d5ec      	bpl.n	801ad0a <rcl_validate_topic_name+0xc6>
 801ad30:	2204      	movs	r2, #4
 801ad32:	6032      	str	r2, [r6, #0]
 801ad34:	2f00      	cmp	r7, #0
 801ad36:	d0d1      	beq.n	801acdc <rcl_validate_topic_name+0x98>
 801ad38:	603b      	str	r3, [r7, #0]
 801ad3a:	2000      	movs	r0, #0
 801ad3c:	e7aa      	b.n	801ac94 <rcl_validate_topic_name+0x50>
 801ad3e:	200b      	movs	r0, #11
 801ad40:	4770      	bx	lr
 801ad42:	2304      	movs	r3, #4
 801ad44:	6033      	str	r3, [r6, #0]
 801ad46:	2f00      	cmp	r7, #0
 801ad48:	d1a2      	bne.n	801ac90 <rcl_validate_topic_name+0x4c>
 801ad4a:	e7c7      	b.n	801acdc <rcl_validate_topic_name+0x98>
 801ad4c:	200b      	movs	r0, #11
 801ad4e:	e7a1      	b.n	801ac94 <rcl_validate_topic_name+0x50>
 801ad50:	2309      	movs	r3, #9
 801ad52:	6033      	str	r3, [r6, #0]
 801ad54:	2f00      	cmp	r7, #0
 801ad56:	d1c0      	bne.n	801acda <rcl_validate_topic_name+0x96>
 801ad58:	e7c0      	b.n	801acdc <rcl_validate_topic_name+0x98>
 801ad5a:	2900      	cmp	r1, #0
 801ad5c:	d0ca      	beq.n	801acf4 <rcl_validate_topic_name+0xb0>
 801ad5e:	2306      	movs	r3, #6
 801ad60:	6033      	str	r3, [r6, #0]
 801ad62:	2f00      	cmp	r7, #0
 801ad64:	d1b9      	bne.n	801acda <rcl_validate_topic_name+0x96>
 801ad66:	e7b9      	b.n	801acdc <rcl_validate_topic_name+0x98>
 801ad68:	2c00      	cmp	r4, #0
 801ad6a:	d0c3      	beq.n	801acf4 <rcl_validate_topic_name+0xb0>
 801ad6c:	2308      	movs	r3, #8
 801ad6e:	6033      	str	r3, [r6, #0]
 801ad70:	2f00      	cmp	r7, #0
 801ad72:	d1b2      	bne.n	801acda <rcl_validate_topic_name+0x96>
 801ad74:	e7b2      	b.n	801acdc <rcl_validate_topic_name+0x98>
 801ad76:	2c00      	cmp	r4, #0
 801ad78:	d1f8      	bne.n	801ad6c <rcl_validate_topic_name+0x128>
 801ad7a:	460b      	mov	r3, r1
 801ad7c:	2401      	movs	r4, #1
 801ad7e:	e7b9      	b.n	801acf4 <rcl_validate_topic_name+0xb0>
 801ad80:	2400      	movs	r4, #0
 801ad82:	e7b7      	b.n	801acf4 <rcl_validate_topic_name+0xb0>
 801ad84:	2000      	movs	r0, #0
 801ad86:	6030      	str	r0, [r6, #0]
 801ad88:	e784      	b.n	801ac94 <rcl_validate_topic_name+0x50>
 801ad8a:	2205      	movs	r2, #5
 801ad8c:	6032      	str	r2, [r6, #0]
 801ad8e:	2f00      	cmp	r7, #0
 801ad90:	d1d2      	bne.n	801ad38 <rcl_validate_topic_name+0xf4>
 801ad92:	e7a3      	b.n	801acdc <rcl_validate_topic_name+0x98>
 801ad94:	2c00      	cmp	r4, #0
 801ad96:	bf14      	ite	ne
 801ad98:	2308      	movne	r3, #8
 801ad9a:	2303      	moveq	r3, #3
 801ad9c:	6033      	str	r3, [r6, #0]
 801ad9e:	2f00      	cmp	r7, #0
 801ada0:	d19b      	bne.n	801acda <rcl_validate_topic_name+0x96>
 801ada2:	e79b      	b.n	801acdc <rcl_validate_topic_name+0x98>
 801ada4:	2301      	movs	r3, #1
 801ada6:	e00a      	b.n	801adbe <rcl_validate_topic_name+0x17a>
 801ada8:	2c01      	cmp	r4, #1
 801adaa:	d013      	beq.n	801add4 <rcl_validate_topic_name+0x190>
 801adac:	4299      	cmp	r1, r3
 801adae:	f104 0401 	add.w	r4, r4, #1
 801adb2:	f105 0501 	add.w	r5, r5, #1
 801adb6:	f103 0201 	add.w	r2, r3, #1
 801adba:	d9e3      	bls.n	801ad84 <rcl_validate_topic_name+0x140>
 801adbc:	4613      	mov	r3, r2
 801adbe:	45a0      	cmp	r8, r4
 801adc0:	d0f4      	beq.n	801adac <rcl_validate_topic_name+0x168>
 801adc2:	782a      	ldrb	r2, [r5, #0]
 801adc4:	2a2f      	cmp	r2, #47	; 0x2f
 801adc6:	d1ef      	bne.n	801ada8 <rcl_validate_topic_name+0x164>
 801adc8:	786a      	ldrb	r2, [r5, #1]
 801adca:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801adce:	0752      	lsls	r2, r2, #29
 801add0:	d5ec      	bpl.n	801adac <rcl_validate_topic_name+0x168>
 801add2:	e7ad      	b.n	801ad30 <rcl_validate_topic_name+0xec>
 801add4:	2307      	movs	r3, #7
 801add6:	6033      	str	r3, [r6, #0]
 801add8:	2f00      	cmp	r7, #0
 801adda:	f43f af7f 	beq.w	801acdc <rcl_validate_topic_name+0x98>
 801adde:	603c      	str	r4, [r7, #0]
 801ade0:	2000      	movs	r0, #0
 801ade2:	e757      	b.n	801ac94 <rcl_validate_topic_name+0x50>
 801ade4:	0801de5f 	.word	0x0801de5f

0801ade8 <on_status>:
 801ade8:	b082      	sub	sp, #8
 801adea:	b002      	add	sp, #8
 801adec:	4770      	bx	lr
 801adee:	bf00      	nop

0801adf0 <on_topic>:
 801adf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adf4:	4a22      	ldr	r2, [pc, #136]	; (801ae80 <on_topic+0x90>)
 801adf6:	b094      	sub	sp, #80	; 0x50
 801adf8:	6812      	ldr	r2, [r2, #0]
 801adfa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801adfc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801ae00:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 801ae04:	b3c2      	cbz	r2, 801ae78 <on_topic+0x88>
 801ae06:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801ae0a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801ae0e:	e001      	b.n	801ae14 <on_topic+0x24>
 801ae10:	6852      	ldr	r2, [r2, #4]
 801ae12:	b38a      	cbz	r2, 801ae78 <on_topic+0x88>
 801ae14:	6894      	ldr	r4, [r2, #8]
 801ae16:	8aa3      	ldrh	r3, [r4, #20]
 801ae18:	428b      	cmp	r3, r1
 801ae1a:	d1f9      	bne.n	801ae10 <on_topic+0x20>
 801ae1c:	7da3      	ldrb	r3, [r4, #22]
 801ae1e:	4283      	cmp	r3, r0
 801ae20:	d1f6      	bne.n	801ae10 <on_topic+0x20>
 801ae22:	2248      	movs	r2, #72	; 0x48
 801ae24:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801ae28:	4668      	mov	r0, sp
 801ae2a:	f000 fb95 	bl	801b558 <memcpy>
 801ae2e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801ae32:	cb0c      	ldmia	r3, {r2, r3}
 801ae34:	4620      	mov	r0, r4
 801ae36:	f7f5 fde3 	bl	8010a00 <rmw_uxrce_get_static_input_buffer_for_entity>
 801ae3a:	4607      	mov	r7, r0
 801ae3c:	b1e0      	cbz	r0, 801ae78 <on_topic+0x88>
 801ae3e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801ae42:	4632      	mov	r2, r6
 801ae44:	4628      	mov	r0, r5
 801ae46:	f108 0110 	add.w	r1, r8, #16
 801ae4a:	f7fd ff47 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 801ae4e:	b930      	cbnz	r0, 801ae5e <on_topic+0x6e>
 801ae50:	480c      	ldr	r0, [pc, #48]	; (801ae84 <on_topic+0x94>)
 801ae52:	4639      	mov	r1, r7
 801ae54:	b014      	add	sp, #80	; 0x50
 801ae56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae5a:	f7fc beb9 	b.w	8017bd0 <put_memory>
 801ae5e:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801ae62:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 801ae66:	f7fd fb81 	bl	801856c <rmw_uros_epoch_nanos>
 801ae6a:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801ae6e:	2305      	movs	r3, #5
 801ae70:	e942 0102 	strd	r0, r1, [r2, #-8]
 801ae74:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801ae78:	b014      	add	sp, #80	; 0x50
 801ae7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae7e:	bf00      	nop
 801ae80:	2001cba4 	.word	0x2001cba4
 801ae84:	2001cb94 	.word	0x2001cb94

0801ae88 <on_request>:
 801ae88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae8c:	4823      	ldr	r0, [pc, #140]	; (801af1c <on_request+0x94>)
 801ae8e:	b094      	sub	sp, #80	; 0x50
 801ae90:	6800      	ldr	r0, [r0, #0]
 801ae92:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801ae94:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801ae98:	9113      	str	r1, [sp, #76]	; 0x4c
 801ae9a:	2800      	cmp	r0, #0
 801ae9c:	d03b      	beq.n	801af16 <on_request+0x8e>
 801ae9e:	461d      	mov	r5, r3
 801aea0:	e001      	b.n	801aea6 <on_request+0x1e>
 801aea2:	6840      	ldr	r0, [r0, #4]
 801aea4:	b3b8      	cbz	r0, 801af16 <on_request+0x8e>
 801aea6:	6884      	ldr	r4, [r0, #8]
 801aea8:	8b21      	ldrh	r1, [r4, #24]
 801aeaa:	4291      	cmp	r1, r2
 801aeac:	d1f9      	bne.n	801aea2 <on_request+0x1a>
 801aeae:	2248      	movs	r2, #72	; 0x48
 801aeb0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801aeb4:	4668      	mov	r0, sp
 801aeb6:	f000 fb4f 	bl	801b558 <memcpy>
 801aeba:	f104 0320 	add.w	r3, r4, #32
 801aebe:	cb0c      	ldmia	r3, {r2, r3}
 801aec0:	4620      	mov	r0, r4
 801aec2:	f7f5 fd9d 	bl	8010a00 <rmw_uxrce_get_static_input_buffer_for_entity>
 801aec6:	4680      	mov	r8, r0
 801aec8:	b328      	cbz	r0, 801af16 <on_request+0x8e>
 801aeca:	4638      	mov	r0, r7
 801aecc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801aed0:	4632      	mov	r2, r6
 801aed2:	f107 0110 	add.w	r1, r7, #16
 801aed6:	f7fd ff01 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 801aeda:	b930      	cbnz	r0, 801aeea <on_request+0x62>
 801aedc:	4810      	ldr	r0, [pc, #64]	; (801af20 <on_request+0x98>)
 801aede:	4641      	mov	r1, r8
 801aee0:	b014      	add	sp, #80	; 0x50
 801aee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aee6:	f7fc be73 	b.w	8017bd0 <put_memory>
 801aeea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aeec:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 801aef0:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 801aef4:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 801aef8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aefc:	e895 0003 	ldmia.w	r5, {r0, r1}
 801af00:	e88c 0003 	stmia.w	ip, {r0, r1}
 801af04:	f7fd fb32 	bl	801856c <rmw_uros_epoch_nanos>
 801af08:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801af0c:	2303      	movs	r3, #3
 801af0e:	e942 0102 	strd	r0, r1, [r2, #-8]
 801af12:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801af16:	b014      	add	sp, #80	; 0x50
 801af18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af1c:	2001cb74 	.word	0x2001cb74
 801af20:	2001cb94 	.word	0x2001cb94

0801af24 <on_reply>:
 801af24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af28:	4821      	ldr	r0, [pc, #132]	; (801afb0 <on_reply+0x8c>)
 801af2a:	b094      	sub	sp, #80	; 0x50
 801af2c:	6800      	ldr	r0, [r0, #0]
 801af2e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801af30:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801af34:	9113      	str	r1, [sp, #76]	; 0x4c
 801af36:	b3b8      	cbz	r0, 801afa8 <on_reply+0x84>
 801af38:	461d      	mov	r5, r3
 801af3a:	e001      	b.n	801af40 <on_reply+0x1c>
 801af3c:	6840      	ldr	r0, [r0, #4]
 801af3e:	b398      	cbz	r0, 801afa8 <on_reply+0x84>
 801af40:	6884      	ldr	r4, [r0, #8]
 801af42:	8b21      	ldrh	r1, [r4, #24]
 801af44:	4291      	cmp	r1, r2
 801af46:	d1f9      	bne.n	801af3c <on_reply+0x18>
 801af48:	2248      	movs	r2, #72	; 0x48
 801af4a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801af4e:	4668      	mov	r0, sp
 801af50:	f000 fb02 	bl	801b558 <memcpy>
 801af54:	f104 0320 	add.w	r3, r4, #32
 801af58:	cb0c      	ldmia	r3, {r2, r3}
 801af5a:	4620      	mov	r0, r4
 801af5c:	f7f5 fd50 	bl	8010a00 <rmw_uxrce_get_static_input_buffer_for_entity>
 801af60:	4680      	mov	r8, r0
 801af62:	b308      	cbz	r0, 801afa8 <on_reply+0x84>
 801af64:	4638      	mov	r0, r7
 801af66:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801af6a:	4632      	mov	r2, r6
 801af6c:	f107 0110 	add.w	r1, r7, #16
 801af70:	f7fd feb4 	bl	8018cdc <ucdr_deserialize_array_uint8_t>
 801af74:	b930      	cbnz	r0, 801af84 <on_reply+0x60>
 801af76:	480f      	ldr	r0, [pc, #60]	; (801afb4 <on_reply+0x90>)
 801af78:	4641      	mov	r1, r8
 801af7a:	b014      	add	sp, #80	; 0x50
 801af7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af80:	f7fc be26 	b.w	8017bd0 <put_memory>
 801af84:	2200      	movs	r2, #0
 801af86:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 801af8a:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 801af8e:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 801af92:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 801af96:	f7fd fae9 	bl	801856c <rmw_uros_epoch_nanos>
 801af9a:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801af9e:	2304      	movs	r3, #4
 801afa0:	e942 0102 	strd	r0, r1, [r2, #-8]
 801afa4:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801afa8:	b014      	add	sp, #80	; 0x50
 801afaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afae:	bf00      	nop
 801afb0:	20018288 	.word	0x20018288
 801afb4:	2001cb94 	.word	0x2001cb94

0801afb8 <rmw_destroy_client>:
 801afb8:	b570      	push	{r4, r5, r6, lr}
 801afba:	b128      	cbz	r0, 801afc8 <rmw_destroy_client+0x10>
 801afbc:	4604      	mov	r4, r0
 801afbe:	6800      	ldr	r0, [r0, #0]
 801afc0:	460d      	mov	r5, r1
 801afc2:	f7f5 fded 	bl	8010ba0 <is_uxrce_rmw_identifier_valid>
 801afc6:	b910      	cbnz	r0, 801afce <rmw_destroy_client+0x16>
 801afc8:	2401      	movs	r4, #1
 801afca:	4620      	mov	r0, r4
 801afcc:	bd70      	pop	{r4, r5, r6, pc}
 801afce:	6863      	ldr	r3, [r4, #4]
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	d0f9      	beq.n	801afc8 <rmw_destroy_client+0x10>
 801afd4:	2d00      	cmp	r5, #0
 801afd6:	d0f7      	beq.n	801afc8 <rmw_destroy_client+0x10>
 801afd8:	6828      	ldr	r0, [r5, #0]
 801afda:	f7f5 fde1 	bl	8010ba0 <is_uxrce_rmw_identifier_valid>
 801afde:	2800      	cmp	r0, #0
 801afe0:	d0f2      	beq.n	801afc8 <rmw_destroy_client+0x10>
 801afe2:	686e      	ldr	r6, [r5, #4]
 801afe4:	2e00      	cmp	r6, #0
 801afe6:	d0ef      	beq.n	801afc8 <rmw_destroy_client+0x10>
 801afe8:	6864      	ldr	r4, [r4, #4]
 801afea:	6932      	ldr	r2, [r6, #16]
 801afec:	6920      	ldr	r0, [r4, #16]
 801afee:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801aff2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801aff6:	6819      	ldr	r1, [r3, #0]
 801aff8:	f7fe fe38 	bl	8019c6c <uxr_buffer_cancel_data>
 801affc:	4602      	mov	r2, r0
 801affe:	6920      	ldr	r0, [r4, #16]
 801b000:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801b004:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801b008:	f7f5 fd4a 	bl	8010aa0 <run_xrce_session>
 801b00c:	6920      	ldr	r0, [r4, #16]
 801b00e:	6932      	ldr	r2, [r6, #16]
 801b010:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801b014:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801b018:	6819      	ldr	r1, [r3, #0]
 801b01a:	f7f8 fdb9 	bl	8013b90 <uxr_buffer_delete_entity>
 801b01e:	4602      	mov	r2, r0
 801b020:	6920      	ldr	r0, [r4, #16]
 801b022:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801b026:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801b02a:	f7f5 fd39 	bl	8010aa0 <run_xrce_session>
 801b02e:	2800      	cmp	r0, #0
 801b030:	4628      	mov	r0, r5
 801b032:	bf14      	ite	ne
 801b034:	2400      	movne	r4, #0
 801b036:	2402      	moveq	r4, #2
 801b038:	f7f5 fcc0 	bl	80109bc <rmw_uxrce_fini_client_memory>
 801b03c:	e7c5      	b.n	801afca <rmw_destroy_client+0x12>
 801b03e:	bf00      	nop

0801b040 <rmw_create_guard_condition>:
 801b040:	b538      	push	{r3, r4, r5, lr}
 801b042:	4605      	mov	r5, r0
 801b044:	4807      	ldr	r0, [pc, #28]	; (801b064 <rmw_create_guard_condition+0x24>)
 801b046:	f7fc fdb3 	bl	8017bb0 <get_memory>
 801b04a:	b148      	cbz	r0, 801b060 <rmw_create_guard_condition+0x20>
 801b04c:	6884      	ldr	r4, [r0, #8]
 801b04e:	2300      	movs	r3, #0
 801b050:	7423      	strb	r3, [r4, #16]
 801b052:	61e5      	str	r5, [r4, #28]
 801b054:	f7fc fdd0 	bl	8017bf8 <rmw_get_implementation_identifier>
 801b058:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801b05c:	f104 0014 	add.w	r0, r4, #20
 801b060:	bd38      	pop	{r3, r4, r5, pc}
 801b062:	bf00      	nop
 801b064:	2001cb34 	.word	0x2001cb34

0801b068 <rmw_destroy_guard_condition>:
 801b068:	b508      	push	{r3, lr}
 801b06a:	4b08      	ldr	r3, [pc, #32]	; (801b08c <rmw_destroy_guard_condition+0x24>)
 801b06c:	6819      	ldr	r1, [r3, #0]
 801b06e:	b911      	cbnz	r1, 801b076 <rmw_destroy_guard_condition+0xe>
 801b070:	e00a      	b.n	801b088 <rmw_destroy_guard_condition+0x20>
 801b072:	6849      	ldr	r1, [r1, #4]
 801b074:	b141      	cbz	r1, 801b088 <rmw_destroy_guard_condition+0x20>
 801b076:	688b      	ldr	r3, [r1, #8]
 801b078:	3314      	adds	r3, #20
 801b07a:	4298      	cmp	r0, r3
 801b07c:	d1f9      	bne.n	801b072 <rmw_destroy_guard_condition+0xa>
 801b07e:	4803      	ldr	r0, [pc, #12]	; (801b08c <rmw_destroy_guard_condition+0x24>)
 801b080:	f7fc fda6 	bl	8017bd0 <put_memory>
 801b084:	2000      	movs	r0, #0
 801b086:	bd08      	pop	{r3, pc}
 801b088:	2001      	movs	r0, #1
 801b08a:	bd08      	pop	{r3, pc}
 801b08c:	2001cb34 	.word	0x2001cb34

0801b090 <rosidl_runtime_c__String__init>:
 801b090:	b510      	push	{r4, lr}
 801b092:	4604      	mov	r4, r0
 801b094:	b086      	sub	sp, #24
 801b096:	b170      	cbz	r0, 801b0b6 <rosidl_runtime_c__String__init+0x26>
 801b098:	a801      	add	r0, sp, #4
 801b09a:	f7f5 f8cf 	bl	801023c <rcutils_get_default_allocator>
 801b09e:	9b01      	ldr	r3, [sp, #4]
 801b0a0:	9905      	ldr	r1, [sp, #20]
 801b0a2:	2001      	movs	r0, #1
 801b0a4:	4798      	blx	r3
 801b0a6:	6020      	str	r0, [r4, #0]
 801b0a8:	b128      	cbz	r0, 801b0b6 <rosidl_runtime_c__String__init+0x26>
 801b0aa:	2100      	movs	r1, #0
 801b0ac:	2201      	movs	r2, #1
 801b0ae:	7001      	strb	r1, [r0, #0]
 801b0b0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801b0b4:	4610      	mov	r0, r2
 801b0b6:	b006      	add	sp, #24
 801b0b8:	bd10      	pop	{r4, pc}
 801b0ba:	bf00      	nop

0801b0bc <rosidl_runtime_c__String__fini>:
 801b0bc:	b320      	cbz	r0, 801b108 <rosidl_runtime_c__String__fini+0x4c>
 801b0be:	b510      	push	{r4, lr}
 801b0c0:	6803      	ldr	r3, [r0, #0]
 801b0c2:	b086      	sub	sp, #24
 801b0c4:	4604      	mov	r4, r0
 801b0c6:	b173      	cbz	r3, 801b0e6 <rosidl_runtime_c__String__fini+0x2a>
 801b0c8:	6883      	ldr	r3, [r0, #8]
 801b0ca:	b1f3      	cbz	r3, 801b10a <rosidl_runtime_c__String__fini+0x4e>
 801b0cc:	a801      	add	r0, sp, #4
 801b0ce:	f7f5 f8b5 	bl	801023c <rcutils_get_default_allocator>
 801b0d2:	9b02      	ldr	r3, [sp, #8]
 801b0d4:	9905      	ldr	r1, [sp, #20]
 801b0d6:	6820      	ldr	r0, [r4, #0]
 801b0d8:	4798      	blx	r3
 801b0da:	2300      	movs	r3, #0
 801b0dc:	e9c4 3300 	strd	r3, r3, [r4]
 801b0e0:	60a3      	str	r3, [r4, #8]
 801b0e2:	b006      	add	sp, #24
 801b0e4:	bd10      	pop	{r4, pc}
 801b0e6:	6843      	ldr	r3, [r0, #4]
 801b0e8:	b9db      	cbnz	r3, 801b122 <rosidl_runtime_c__String__fini+0x66>
 801b0ea:	6883      	ldr	r3, [r0, #8]
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d0f8      	beq.n	801b0e2 <rosidl_runtime_c__String__fini+0x26>
 801b0f0:	4b12      	ldr	r3, [pc, #72]	; (801b13c <rosidl_runtime_c__String__fini+0x80>)
 801b0f2:	4813      	ldr	r0, [pc, #76]	; (801b140 <rosidl_runtime_c__String__fini+0x84>)
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	2251      	movs	r2, #81	; 0x51
 801b0f8:	68db      	ldr	r3, [r3, #12]
 801b0fa:	2101      	movs	r1, #1
 801b0fc:	f000 f99e 	bl	801b43c <fwrite>
 801b100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b104:	f000 f830 	bl	801b168 <exit>
 801b108:	4770      	bx	lr
 801b10a:	4b0c      	ldr	r3, [pc, #48]	; (801b13c <rosidl_runtime_c__String__fini+0x80>)
 801b10c:	480d      	ldr	r0, [pc, #52]	; (801b144 <rosidl_runtime_c__String__fini+0x88>)
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	224c      	movs	r2, #76	; 0x4c
 801b112:	68db      	ldr	r3, [r3, #12]
 801b114:	2101      	movs	r1, #1
 801b116:	f000 f991 	bl	801b43c <fwrite>
 801b11a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b11e:	f000 f823 	bl	801b168 <exit>
 801b122:	4b06      	ldr	r3, [pc, #24]	; (801b13c <rosidl_runtime_c__String__fini+0x80>)
 801b124:	4808      	ldr	r0, [pc, #32]	; (801b148 <rosidl_runtime_c__String__fini+0x8c>)
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	224e      	movs	r2, #78	; 0x4e
 801b12a:	68db      	ldr	r3, [r3, #12]
 801b12c:	2101      	movs	r1, #1
 801b12e:	f000 f985 	bl	801b43c <fwrite>
 801b132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b136:	f000 f817 	bl	801b168 <exit>
 801b13a:	bf00      	nop
 801b13c:	20000c10 	.word	0x20000c10
 801b140:	0801de0c 	.word	0x0801de0c
 801b144:	0801dd6c 	.word	0x0801dd6c
 801b148:	0801ddbc 	.word	0x0801ddbc

0801b14c <calloc>:
 801b14c:	4b02      	ldr	r3, [pc, #8]	; (801b158 <calloc+0xc>)
 801b14e:	460a      	mov	r2, r1
 801b150:	4601      	mov	r1, r0
 801b152:	6818      	ldr	r0, [r3, #0]
 801b154:	f000 ba16 	b.w	801b584 <_calloc_r>
 801b158:	20000c10 	.word	0x20000c10

0801b15c <__errno>:
 801b15c:	4b01      	ldr	r3, [pc, #4]	; (801b164 <__errno+0x8>)
 801b15e:	6818      	ldr	r0, [r3, #0]
 801b160:	4770      	bx	lr
 801b162:	bf00      	nop
 801b164:	20000c10 	.word	0x20000c10

0801b168 <exit>:
 801b168:	b508      	push	{r3, lr}
 801b16a:	4b07      	ldr	r3, [pc, #28]	; (801b188 <exit+0x20>)
 801b16c:	4604      	mov	r4, r0
 801b16e:	b113      	cbz	r3, 801b176 <exit+0xe>
 801b170:	2100      	movs	r1, #0
 801b172:	f3af 8000 	nop.w
 801b176:	4b05      	ldr	r3, [pc, #20]	; (801b18c <exit+0x24>)
 801b178:	6818      	ldr	r0, [r3, #0]
 801b17a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b17c:	b103      	cbz	r3, 801b180 <exit+0x18>
 801b17e:	4798      	blx	r3
 801b180:	4620      	mov	r0, r4
 801b182:	f7e7 f883 	bl	800228c <_exit>
 801b186:	bf00      	nop
 801b188:	00000000 	.word	0x00000000
 801b18c:	0801dfc0 	.word	0x0801dfc0

0801b190 <std>:
 801b190:	2300      	movs	r3, #0
 801b192:	b510      	push	{r4, lr}
 801b194:	4604      	mov	r4, r0
 801b196:	e9c0 3300 	strd	r3, r3, [r0]
 801b19a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b19e:	6083      	str	r3, [r0, #8]
 801b1a0:	8181      	strh	r1, [r0, #12]
 801b1a2:	6643      	str	r3, [r0, #100]	; 0x64
 801b1a4:	81c2      	strh	r2, [r0, #14]
 801b1a6:	6183      	str	r3, [r0, #24]
 801b1a8:	4619      	mov	r1, r3
 801b1aa:	2208      	movs	r2, #8
 801b1ac:	305c      	adds	r0, #92	; 0x5c
 801b1ae:	f000 f9e1 	bl	801b574 <memset>
 801b1b2:	4b05      	ldr	r3, [pc, #20]	; (801b1c8 <std+0x38>)
 801b1b4:	6263      	str	r3, [r4, #36]	; 0x24
 801b1b6:	4b05      	ldr	r3, [pc, #20]	; (801b1cc <std+0x3c>)
 801b1b8:	62a3      	str	r3, [r4, #40]	; 0x28
 801b1ba:	4b05      	ldr	r3, [pc, #20]	; (801b1d0 <std+0x40>)
 801b1bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b1be:	4b05      	ldr	r3, [pc, #20]	; (801b1d4 <std+0x44>)
 801b1c0:	6224      	str	r4, [r4, #32]
 801b1c2:	6323      	str	r3, [r4, #48]	; 0x30
 801b1c4:	bd10      	pop	{r4, pc}
 801b1c6:	bf00      	nop
 801b1c8:	0801b9e5 	.word	0x0801b9e5
 801b1cc:	0801ba07 	.word	0x0801ba07
 801b1d0:	0801ba3f 	.word	0x0801ba3f
 801b1d4:	0801ba63 	.word	0x0801ba63

0801b1d8 <_cleanup_r>:
 801b1d8:	4901      	ldr	r1, [pc, #4]	; (801b1e0 <_cleanup_r+0x8>)
 801b1da:	f000 b8af 	b.w	801b33c <_fwalk_reent>
 801b1de:	bf00      	nop
 801b1e0:	0801bf79 	.word	0x0801bf79

0801b1e4 <__sfmoreglue>:
 801b1e4:	b570      	push	{r4, r5, r6, lr}
 801b1e6:	2268      	movs	r2, #104	; 0x68
 801b1e8:	1e4d      	subs	r5, r1, #1
 801b1ea:	4355      	muls	r5, r2
 801b1ec:	460e      	mov	r6, r1
 801b1ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b1f2:	f000 fa49 	bl	801b688 <_malloc_r>
 801b1f6:	4604      	mov	r4, r0
 801b1f8:	b140      	cbz	r0, 801b20c <__sfmoreglue+0x28>
 801b1fa:	2100      	movs	r1, #0
 801b1fc:	e9c0 1600 	strd	r1, r6, [r0]
 801b200:	300c      	adds	r0, #12
 801b202:	60a0      	str	r0, [r4, #8]
 801b204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b208:	f000 f9b4 	bl	801b574 <memset>
 801b20c:	4620      	mov	r0, r4
 801b20e:	bd70      	pop	{r4, r5, r6, pc}

0801b210 <__sfp_lock_acquire>:
 801b210:	4801      	ldr	r0, [pc, #4]	; (801b218 <__sfp_lock_acquire+0x8>)
 801b212:	f000 b98e 	b.w	801b532 <__retarget_lock_acquire_recursive>
 801b216:	bf00      	nop
 801b218:	2001ccea 	.word	0x2001ccea

0801b21c <__sfp_lock_release>:
 801b21c:	4801      	ldr	r0, [pc, #4]	; (801b224 <__sfp_lock_release+0x8>)
 801b21e:	f000 b989 	b.w	801b534 <__retarget_lock_release_recursive>
 801b222:	bf00      	nop
 801b224:	2001ccea 	.word	0x2001ccea

0801b228 <__sinit_lock_acquire>:
 801b228:	4801      	ldr	r0, [pc, #4]	; (801b230 <__sinit_lock_acquire+0x8>)
 801b22a:	f000 b982 	b.w	801b532 <__retarget_lock_acquire_recursive>
 801b22e:	bf00      	nop
 801b230:	2001cceb 	.word	0x2001cceb

0801b234 <__sinit_lock_release>:
 801b234:	4801      	ldr	r0, [pc, #4]	; (801b23c <__sinit_lock_release+0x8>)
 801b236:	f000 b97d 	b.w	801b534 <__retarget_lock_release_recursive>
 801b23a:	bf00      	nop
 801b23c:	2001cceb 	.word	0x2001cceb

0801b240 <__sinit>:
 801b240:	b510      	push	{r4, lr}
 801b242:	4604      	mov	r4, r0
 801b244:	f7ff fff0 	bl	801b228 <__sinit_lock_acquire>
 801b248:	69a3      	ldr	r3, [r4, #24]
 801b24a:	b11b      	cbz	r3, 801b254 <__sinit+0x14>
 801b24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b250:	f7ff bff0 	b.w	801b234 <__sinit_lock_release>
 801b254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b258:	6523      	str	r3, [r4, #80]	; 0x50
 801b25a:	4b13      	ldr	r3, [pc, #76]	; (801b2a8 <__sinit+0x68>)
 801b25c:	4a13      	ldr	r2, [pc, #76]	; (801b2ac <__sinit+0x6c>)
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	62a2      	str	r2, [r4, #40]	; 0x28
 801b262:	42a3      	cmp	r3, r4
 801b264:	bf04      	itt	eq
 801b266:	2301      	moveq	r3, #1
 801b268:	61a3      	streq	r3, [r4, #24]
 801b26a:	4620      	mov	r0, r4
 801b26c:	f000 f820 	bl	801b2b0 <__sfp>
 801b270:	6060      	str	r0, [r4, #4]
 801b272:	4620      	mov	r0, r4
 801b274:	f000 f81c 	bl	801b2b0 <__sfp>
 801b278:	60a0      	str	r0, [r4, #8]
 801b27a:	4620      	mov	r0, r4
 801b27c:	f000 f818 	bl	801b2b0 <__sfp>
 801b280:	2200      	movs	r2, #0
 801b282:	60e0      	str	r0, [r4, #12]
 801b284:	2104      	movs	r1, #4
 801b286:	6860      	ldr	r0, [r4, #4]
 801b288:	f7ff ff82 	bl	801b190 <std>
 801b28c:	68a0      	ldr	r0, [r4, #8]
 801b28e:	2201      	movs	r2, #1
 801b290:	2109      	movs	r1, #9
 801b292:	f7ff ff7d 	bl	801b190 <std>
 801b296:	68e0      	ldr	r0, [r4, #12]
 801b298:	2202      	movs	r2, #2
 801b29a:	2112      	movs	r1, #18
 801b29c:	f7ff ff78 	bl	801b190 <std>
 801b2a0:	2301      	movs	r3, #1
 801b2a2:	61a3      	str	r3, [r4, #24]
 801b2a4:	e7d2      	b.n	801b24c <__sinit+0xc>
 801b2a6:	bf00      	nop
 801b2a8:	0801dfc0 	.word	0x0801dfc0
 801b2ac:	0801b1d9 	.word	0x0801b1d9

0801b2b0 <__sfp>:
 801b2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2b2:	4607      	mov	r7, r0
 801b2b4:	f7ff ffac 	bl	801b210 <__sfp_lock_acquire>
 801b2b8:	4b1e      	ldr	r3, [pc, #120]	; (801b334 <__sfp+0x84>)
 801b2ba:	681e      	ldr	r6, [r3, #0]
 801b2bc:	69b3      	ldr	r3, [r6, #24]
 801b2be:	b913      	cbnz	r3, 801b2c6 <__sfp+0x16>
 801b2c0:	4630      	mov	r0, r6
 801b2c2:	f7ff ffbd 	bl	801b240 <__sinit>
 801b2c6:	3648      	adds	r6, #72	; 0x48
 801b2c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b2cc:	3b01      	subs	r3, #1
 801b2ce:	d503      	bpl.n	801b2d8 <__sfp+0x28>
 801b2d0:	6833      	ldr	r3, [r6, #0]
 801b2d2:	b30b      	cbz	r3, 801b318 <__sfp+0x68>
 801b2d4:	6836      	ldr	r6, [r6, #0]
 801b2d6:	e7f7      	b.n	801b2c8 <__sfp+0x18>
 801b2d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b2dc:	b9d5      	cbnz	r5, 801b314 <__sfp+0x64>
 801b2de:	4b16      	ldr	r3, [pc, #88]	; (801b338 <__sfp+0x88>)
 801b2e0:	60e3      	str	r3, [r4, #12]
 801b2e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b2e6:	6665      	str	r5, [r4, #100]	; 0x64
 801b2e8:	f000 f922 	bl	801b530 <__retarget_lock_init_recursive>
 801b2ec:	f7ff ff96 	bl	801b21c <__sfp_lock_release>
 801b2f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b2f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b2f8:	6025      	str	r5, [r4, #0]
 801b2fa:	61a5      	str	r5, [r4, #24]
 801b2fc:	2208      	movs	r2, #8
 801b2fe:	4629      	mov	r1, r5
 801b300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b304:	f000 f936 	bl	801b574 <memset>
 801b308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b30c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b310:	4620      	mov	r0, r4
 801b312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b314:	3468      	adds	r4, #104	; 0x68
 801b316:	e7d9      	b.n	801b2cc <__sfp+0x1c>
 801b318:	2104      	movs	r1, #4
 801b31a:	4638      	mov	r0, r7
 801b31c:	f7ff ff62 	bl	801b1e4 <__sfmoreglue>
 801b320:	4604      	mov	r4, r0
 801b322:	6030      	str	r0, [r6, #0]
 801b324:	2800      	cmp	r0, #0
 801b326:	d1d5      	bne.n	801b2d4 <__sfp+0x24>
 801b328:	f7ff ff78 	bl	801b21c <__sfp_lock_release>
 801b32c:	230c      	movs	r3, #12
 801b32e:	603b      	str	r3, [r7, #0]
 801b330:	e7ee      	b.n	801b310 <__sfp+0x60>
 801b332:	bf00      	nop
 801b334:	0801dfc0 	.word	0x0801dfc0
 801b338:	ffff0001 	.word	0xffff0001

0801b33c <_fwalk_reent>:
 801b33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b340:	4606      	mov	r6, r0
 801b342:	4688      	mov	r8, r1
 801b344:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b348:	2700      	movs	r7, #0
 801b34a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b34e:	f1b9 0901 	subs.w	r9, r9, #1
 801b352:	d505      	bpl.n	801b360 <_fwalk_reent+0x24>
 801b354:	6824      	ldr	r4, [r4, #0]
 801b356:	2c00      	cmp	r4, #0
 801b358:	d1f7      	bne.n	801b34a <_fwalk_reent+0xe>
 801b35a:	4638      	mov	r0, r7
 801b35c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b360:	89ab      	ldrh	r3, [r5, #12]
 801b362:	2b01      	cmp	r3, #1
 801b364:	d907      	bls.n	801b376 <_fwalk_reent+0x3a>
 801b366:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b36a:	3301      	adds	r3, #1
 801b36c:	d003      	beq.n	801b376 <_fwalk_reent+0x3a>
 801b36e:	4629      	mov	r1, r5
 801b370:	4630      	mov	r0, r6
 801b372:	47c0      	blx	r8
 801b374:	4307      	orrs	r7, r0
 801b376:	3568      	adds	r5, #104	; 0x68
 801b378:	e7e9      	b.n	801b34e <_fwalk_reent+0x12>
	...

0801b37c <_fwrite_r>:
 801b37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b380:	9c08      	ldr	r4, [sp, #32]
 801b382:	468a      	mov	sl, r1
 801b384:	4690      	mov	r8, r2
 801b386:	fb02 f903 	mul.w	r9, r2, r3
 801b38a:	4605      	mov	r5, r0
 801b38c:	b118      	cbz	r0, 801b396 <_fwrite_r+0x1a>
 801b38e:	6983      	ldr	r3, [r0, #24]
 801b390:	b90b      	cbnz	r3, 801b396 <_fwrite_r+0x1a>
 801b392:	f7ff ff55 	bl	801b240 <__sinit>
 801b396:	4b26      	ldr	r3, [pc, #152]	; (801b430 <_fwrite_r+0xb4>)
 801b398:	429c      	cmp	r4, r3
 801b39a:	d123      	bne.n	801b3e4 <_fwrite_r+0x68>
 801b39c:	686c      	ldr	r4, [r5, #4]
 801b39e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b3a0:	07de      	lsls	r6, r3, #31
 801b3a2:	d405      	bmi.n	801b3b0 <_fwrite_r+0x34>
 801b3a4:	89a3      	ldrh	r3, [r4, #12]
 801b3a6:	0598      	lsls	r0, r3, #22
 801b3a8:	d402      	bmi.n	801b3b0 <_fwrite_r+0x34>
 801b3aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b3ac:	f000 f8c1 	bl	801b532 <__retarget_lock_acquire_recursive>
 801b3b0:	89a3      	ldrh	r3, [r4, #12]
 801b3b2:	0719      	lsls	r1, r3, #28
 801b3b4:	d520      	bpl.n	801b3f8 <_fwrite_r+0x7c>
 801b3b6:	6923      	ldr	r3, [r4, #16]
 801b3b8:	b1f3      	cbz	r3, 801b3f8 <_fwrite_r+0x7c>
 801b3ba:	2600      	movs	r6, #0
 801b3bc:	454e      	cmp	r6, r9
 801b3be:	d029      	beq.n	801b414 <_fwrite_r+0x98>
 801b3c0:	68a7      	ldr	r7, [r4, #8]
 801b3c2:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801b3c6:	3f01      	subs	r7, #1
 801b3c8:	2f00      	cmp	r7, #0
 801b3ca:	60a7      	str	r7, [r4, #8]
 801b3cc:	da04      	bge.n	801b3d8 <_fwrite_r+0x5c>
 801b3ce:	69a3      	ldr	r3, [r4, #24]
 801b3d0:	429f      	cmp	r7, r3
 801b3d2:	db19      	blt.n	801b408 <_fwrite_r+0x8c>
 801b3d4:	290a      	cmp	r1, #10
 801b3d6:	d017      	beq.n	801b408 <_fwrite_r+0x8c>
 801b3d8:	6823      	ldr	r3, [r4, #0]
 801b3da:	1c5a      	adds	r2, r3, #1
 801b3dc:	6022      	str	r2, [r4, #0]
 801b3de:	7019      	strb	r1, [r3, #0]
 801b3e0:	3601      	adds	r6, #1
 801b3e2:	e7eb      	b.n	801b3bc <_fwrite_r+0x40>
 801b3e4:	4b13      	ldr	r3, [pc, #76]	; (801b434 <_fwrite_r+0xb8>)
 801b3e6:	429c      	cmp	r4, r3
 801b3e8:	d101      	bne.n	801b3ee <_fwrite_r+0x72>
 801b3ea:	68ac      	ldr	r4, [r5, #8]
 801b3ec:	e7d7      	b.n	801b39e <_fwrite_r+0x22>
 801b3ee:	4b12      	ldr	r3, [pc, #72]	; (801b438 <_fwrite_r+0xbc>)
 801b3f0:	429c      	cmp	r4, r3
 801b3f2:	bf08      	it	eq
 801b3f4:	68ec      	ldreq	r4, [r5, #12]
 801b3f6:	e7d2      	b.n	801b39e <_fwrite_r+0x22>
 801b3f8:	4621      	mov	r1, r4
 801b3fa:	4628      	mov	r0, r5
 801b3fc:	f000 fc8e 	bl	801bd1c <__swsetup_r>
 801b400:	2800      	cmp	r0, #0
 801b402:	d0da      	beq.n	801b3ba <_fwrite_r+0x3e>
 801b404:	2600      	movs	r6, #0
 801b406:	e005      	b.n	801b414 <_fwrite_r+0x98>
 801b408:	4622      	mov	r2, r4
 801b40a:	4628      	mov	r0, r5
 801b40c:	f000 fc22 	bl	801bc54 <__swbuf_r>
 801b410:	3001      	adds	r0, #1
 801b412:	d1e5      	bne.n	801b3e0 <_fwrite_r+0x64>
 801b414:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b416:	07da      	lsls	r2, r3, #31
 801b418:	d405      	bmi.n	801b426 <_fwrite_r+0xaa>
 801b41a:	89a3      	ldrh	r3, [r4, #12]
 801b41c:	059b      	lsls	r3, r3, #22
 801b41e:	d402      	bmi.n	801b426 <_fwrite_r+0xaa>
 801b420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b422:	f000 f887 	bl	801b534 <__retarget_lock_release_recursive>
 801b426:	fbb6 f0f8 	udiv	r0, r6, r8
 801b42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b42e:	bf00      	nop
 801b430:	0801df80 	.word	0x0801df80
 801b434:	0801dfa0 	.word	0x0801dfa0
 801b438:	0801df60 	.word	0x0801df60

0801b43c <fwrite>:
 801b43c:	b507      	push	{r0, r1, r2, lr}
 801b43e:	9300      	str	r3, [sp, #0]
 801b440:	4613      	mov	r3, r2
 801b442:	460a      	mov	r2, r1
 801b444:	4601      	mov	r1, r0
 801b446:	4803      	ldr	r0, [pc, #12]	; (801b454 <fwrite+0x18>)
 801b448:	6800      	ldr	r0, [r0, #0]
 801b44a:	f7ff ff97 	bl	801b37c <_fwrite_r>
 801b44e:	b003      	add	sp, #12
 801b450:	f85d fb04 	ldr.w	pc, [sp], #4
 801b454:	20000c10 	.word	0x20000c10

0801b458 <getenv>:
 801b458:	b507      	push	{r0, r1, r2, lr}
 801b45a:	4b04      	ldr	r3, [pc, #16]	; (801b46c <getenv+0x14>)
 801b45c:	4601      	mov	r1, r0
 801b45e:	aa01      	add	r2, sp, #4
 801b460:	6818      	ldr	r0, [r3, #0]
 801b462:	f000 f805 	bl	801b470 <_findenv_r>
 801b466:	b003      	add	sp, #12
 801b468:	f85d fb04 	ldr.w	pc, [sp], #4
 801b46c:	20000c10 	.word	0x20000c10

0801b470 <_findenv_r>:
 801b470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b474:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801b4e4 <_findenv_r+0x74>
 801b478:	4607      	mov	r7, r0
 801b47a:	4689      	mov	r9, r1
 801b47c:	4616      	mov	r6, r2
 801b47e:	f000 fce9 	bl	801be54 <__env_lock>
 801b482:	f8da 4000 	ldr.w	r4, [sl]
 801b486:	b134      	cbz	r4, 801b496 <_findenv_r+0x26>
 801b488:	464b      	mov	r3, r9
 801b48a:	4698      	mov	r8, r3
 801b48c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b490:	b13a      	cbz	r2, 801b4a2 <_findenv_r+0x32>
 801b492:	2a3d      	cmp	r2, #61	; 0x3d
 801b494:	d1f9      	bne.n	801b48a <_findenv_r+0x1a>
 801b496:	4638      	mov	r0, r7
 801b498:	f000 fce2 	bl	801be60 <__env_unlock>
 801b49c:	2000      	movs	r0, #0
 801b49e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4a2:	eba8 0809 	sub.w	r8, r8, r9
 801b4a6:	46a3      	mov	fp, r4
 801b4a8:	f854 0b04 	ldr.w	r0, [r4], #4
 801b4ac:	2800      	cmp	r0, #0
 801b4ae:	d0f2      	beq.n	801b496 <_findenv_r+0x26>
 801b4b0:	4642      	mov	r2, r8
 801b4b2:	4649      	mov	r1, r9
 801b4b4:	f000 faee 	bl	801ba94 <strncmp>
 801b4b8:	2800      	cmp	r0, #0
 801b4ba:	d1f4      	bne.n	801b4a6 <_findenv_r+0x36>
 801b4bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b4c0:	eb03 0508 	add.w	r5, r3, r8
 801b4c4:	f813 3008 	ldrb.w	r3, [r3, r8]
 801b4c8:	2b3d      	cmp	r3, #61	; 0x3d
 801b4ca:	d1ec      	bne.n	801b4a6 <_findenv_r+0x36>
 801b4cc:	f8da 3000 	ldr.w	r3, [sl]
 801b4d0:	ebab 0303 	sub.w	r3, fp, r3
 801b4d4:	109b      	asrs	r3, r3, #2
 801b4d6:	4638      	mov	r0, r7
 801b4d8:	6033      	str	r3, [r6, #0]
 801b4da:	f000 fcc1 	bl	801be60 <__env_unlock>
 801b4de:	1c68      	adds	r0, r5, #1
 801b4e0:	e7dd      	b.n	801b49e <_findenv_r+0x2e>
 801b4e2:	bf00      	nop
 801b4e4:	20000000 	.word	0x20000000

0801b4e8 <__libc_init_array>:
 801b4e8:	b570      	push	{r4, r5, r6, lr}
 801b4ea:	4d0d      	ldr	r5, [pc, #52]	; (801b520 <__libc_init_array+0x38>)
 801b4ec:	4c0d      	ldr	r4, [pc, #52]	; (801b524 <__libc_init_array+0x3c>)
 801b4ee:	1b64      	subs	r4, r4, r5
 801b4f0:	10a4      	asrs	r4, r4, #2
 801b4f2:	2600      	movs	r6, #0
 801b4f4:	42a6      	cmp	r6, r4
 801b4f6:	d109      	bne.n	801b50c <__libc_init_array+0x24>
 801b4f8:	4d0b      	ldr	r5, [pc, #44]	; (801b528 <__libc_init_array+0x40>)
 801b4fa:	4c0c      	ldr	r4, [pc, #48]	; (801b52c <__libc_init_array+0x44>)
 801b4fc:	f001 fb28 	bl	801cb50 <_init>
 801b500:	1b64      	subs	r4, r4, r5
 801b502:	10a4      	asrs	r4, r4, #2
 801b504:	2600      	movs	r6, #0
 801b506:	42a6      	cmp	r6, r4
 801b508:	d105      	bne.n	801b516 <__libc_init_array+0x2e>
 801b50a:	bd70      	pop	{r4, r5, r6, pc}
 801b50c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b510:	4798      	blx	r3
 801b512:	3601      	adds	r6, #1
 801b514:	e7ee      	b.n	801b4f4 <__libc_init_array+0xc>
 801b516:	f855 3b04 	ldr.w	r3, [r5], #4
 801b51a:	4798      	blx	r3
 801b51c:	3601      	adds	r6, #1
 801b51e:	e7f2      	b.n	801b506 <__libc_init_array+0x1e>
 801b520:	0801e0b0 	.word	0x0801e0b0
 801b524:	0801e0b0 	.word	0x0801e0b0
 801b528:	0801e0b0 	.word	0x0801e0b0
 801b52c:	0801e0cc 	.word	0x0801e0cc

0801b530 <__retarget_lock_init_recursive>:
 801b530:	4770      	bx	lr

0801b532 <__retarget_lock_acquire_recursive>:
 801b532:	4770      	bx	lr

0801b534 <__retarget_lock_release_recursive>:
 801b534:	4770      	bx	lr
	...

0801b538 <malloc>:
 801b538:	4b02      	ldr	r3, [pc, #8]	; (801b544 <malloc+0xc>)
 801b53a:	4601      	mov	r1, r0
 801b53c:	6818      	ldr	r0, [r3, #0]
 801b53e:	f000 b8a3 	b.w	801b688 <_malloc_r>
 801b542:	bf00      	nop
 801b544:	20000c10 	.word	0x20000c10

0801b548 <free>:
 801b548:	4b02      	ldr	r3, [pc, #8]	; (801b554 <free+0xc>)
 801b54a:	4601      	mov	r1, r0
 801b54c:	6818      	ldr	r0, [r3, #0]
 801b54e:	f000 b82f 	b.w	801b5b0 <_free_r>
 801b552:	bf00      	nop
 801b554:	20000c10 	.word	0x20000c10

0801b558 <memcpy>:
 801b558:	440a      	add	r2, r1
 801b55a:	4291      	cmp	r1, r2
 801b55c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801b560:	d100      	bne.n	801b564 <memcpy+0xc>
 801b562:	4770      	bx	lr
 801b564:	b510      	push	{r4, lr}
 801b566:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b56a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b56e:	4291      	cmp	r1, r2
 801b570:	d1f9      	bne.n	801b566 <memcpy+0xe>
 801b572:	bd10      	pop	{r4, pc}

0801b574 <memset>:
 801b574:	4402      	add	r2, r0
 801b576:	4603      	mov	r3, r0
 801b578:	4293      	cmp	r3, r2
 801b57a:	d100      	bne.n	801b57e <memset+0xa>
 801b57c:	4770      	bx	lr
 801b57e:	f803 1b01 	strb.w	r1, [r3], #1
 801b582:	e7f9      	b.n	801b578 <memset+0x4>

0801b584 <_calloc_r>:
 801b584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b586:	fba1 2402 	umull	r2, r4, r1, r2
 801b58a:	b94c      	cbnz	r4, 801b5a0 <_calloc_r+0x1c>
 801b58c:	4611      	mov	r1, r2
 801b58e:	9201      	str	r2, [sp, #4]
 801b590:	f000 f87a 	bl	801b688 <_malloc_r>
 801b594:	9a01      	ldr	r2, [sp, #4]
 801b596:	4605      	mov	r5, r0
 801b598:	b930      	cbnz	r0, 801b5a8 <_calloc_r+0x24>
 801b59a:	4628      	mov	r0, r5
 801b59c:	b003      	add	sp, #12
 801b59e:	bd30      	pop	{r4, r5, pc}
 801b5a0:	220c      	movs	r2, #12
 801b5a2:	6002      	str	r2, [r0, #0]
 801b5a4:	2500      	movs	r5, #0
 801b5a6:	e7f8      	b.n	801b59a <_calloc_r+0x16>
 801b5a8:	4621      	mov	r1, r4
 801b5aa:	f7ff ffe3 	bl	801b574 <memset>
 801b5ae:	e7f4      	b.n	801b59a <_calloc_r+0x16>

0801b5b0 <_free_r>:
 801b5b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b5b2:	2900      	cmp	r1, #0
 801b5b4:	d044      	beq.n	801b640 <_free_r+0x90>
 801b5b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b5ba:	9001      	str	r0, [sp, #4]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	f1a1 0404 	sub.w	r4, r1, #4
 801b5c2:	bfb8      	it	lt
 801b5c4:	18e4      	addlt	r4, r4, r3
 801b5c6:	f000 fd9d 	bl	801c104 <__malloc_lock>
 801b5ca:	4a1e      	ldr	r2, [pc, #120]	; (801b644 <_free_r+0x94>)
 801b5cc:	9801      	ldr	r0, [sp, #4]
 801b5ce:	6813      	ldr	r3, [r2, #0]
 801b5d0:	b933      	cbnz	r3, 801b5e0 <_free_r+0x30>
 801b5d2:	6063      	str	r3, [r4, #4]
 801b5d4:	6014      	str	r4, [r2, #0]
 801b5d6:	b003      	add	sp, #12
 801b5d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b5dc:	f000 bd98 	b.w	801c110 <__malloc_unlock>
 801b5e0:	42a3      	cmp	r3, r4
 801b5e2:	d908      	bls.n	801b5f6 <_free_r+0x46>
 801b5e4:	6825      	ldr	r5, [r4, #0]
 801b5e6:	1961      	adds	r1, r4, r5
 801b5e8:	428b      	cmp	r3, r1
 801b5ea:	bf01      	itttt	eq
 801b5ec:	6819      	ldreq	r1, [r3, #0]
 801b5ee:	685b      	ldreq	r3, [r3, #4]
 801b5f0:	1949      	addeq	r1, r1, r5
 801b5f2:	6021      	streq	r1, [r4, #0]
 801b5f4:	e7ed      	b.n	801b5d2 <_free_r+0x22>
 801b5f6:	461a      	mov	r2, r3
 801b5f8:	685b      	ldr	r3, [r3, #4]
 801b5fa:	b10b      	cbz	r3, 801b600 <_free_r+0x50>
 801b5fc:	42a3      	cmp	r3, r4
 801b5fe:	d9fa      	bls.n	801b5f6 <_free_r+0x46>
 801b600:	6811      	ldr	r1, [r2, #0]
 801b602:	1855      	adds	r5, r2, r1
 801b604:	42a5      	cmp	r5, r4
 801b606:	d10b      	bne.n	801b620 <_free_r+0x70>
 801b608:	6824      	ldr	r4, [r4, #0]
 801b60a:	4421      	add	r1, r4
 801b60c:	1854      	adds	r4, r2, r1
 801b60e:	42a3      	cmp	r3, r4
 801b610:	6011      	str	r1, [r2, #0]
 801b612:	d1e0      	bne.n	801b5d6 <_free_r+0x26>
 801b614:	681c      	ldr	r4, [r3, #0]
 801b616:	685b      	ldr	r3, [r3, #4]
 801b618:	6053      	str	r3, [r2, #4]
 801b61a:	4421      	add	r1, r4
 801b61c:	6011      	str	r1, [r2, #0]
 801b61e:	e7da      	b.n	801b5d6 <_free_r+0x26>
 801b620:	d902      	bls.n	801b628 <_free_r+0x78>
 801b622:	230c      	movs	r3, #12
 801b624:	6003      	str	r3, [r0, #0]
 801b626:	e7d6      	b.n	801b5d6 <_free_r+0x26>
 801b628:	6825      	ldr	r5, [r4, #0]
 801b62a:	1961      	adds	r1, r4, r5
 801b62c:	428b      	cmp	r3, r1
 801b62e:	bf04      	itt	eq
 801b630:	6819      	ldreq	r1, [r3, #0]
 801b632:	685b      	ldreq	r3, [r3, #4]
 801b634:	6063      	str	r3, [r4, #4]
 801b636:	bf04      	itt	eq
 801b638:	1949      	addeq	r1, r1, r5
 801b63a:	6021      	streq	r1, [r4, #0]
 801b63c:	6054      	str	r4, [r2, #4]
 801b63e:	e7ca      	b.n	801b5d6 <_free_r+0x26>
 801b640:	b003      	add	sp, #12
 801b642:	bd30      	pop	{r4, r5, pc}
 801b644:	2001ccec 	.word	0x2001ccec

0801b648 <sbrk_aligned>:
 801b648:	b570      	push	{r4, r5, r6, lr}
 801b64a:	4e0e      	ldr	r6, [pc, #56]	; (801b684 <sbrk_aligned+0x3c>)
 801b64c:	460c      	mov	r4, r1
 801b64e:	6831      	ldr	r1, [r6, #0]
 801b650:	4605      	mov	r5, r0
 801b652:	b911      	cbnz	r1, 801b65a <sbrk_aligned+0x12>
 801b654:	f000 f982 	bl	801b95c <_sbrk_r>
 801b658:	6030      	str	r0, [r6, #0]
 801b65a:	4621      	mov	r1, r4
 801b65c:	4628      	mov	r0, r5
 801b65e:	f000 f97d 	bl	801b95c <_sbrk_r>
 801b662:	1c43      	adds	r3, r0, #1
 801b664:	d00a      	beq.n	801b67c <sbrk_aligned+0x34>
 801b666:	1cc4      	adds	r4, r0, #3
 801b668:	f024 0403 	bic.w	r4, r4, #3
 801b66c:	42a0      	cmp	r0, r4
 801b66e:	d007      	beq.n	801b680 <sbrk_aligned+0x38>
 801b670:	1a21      	subs	r1, r4, r0
 801b672:	4628      	mov	r0, r5
 801b674:	f000 f972 	bl	801b95c <_sbrk_r>
 801b678:	3001      	adds	r0, #1
 801b67a:	d101      	bne.n	801b680 <sbrk_aligned+0x38>
 801b67c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b680:	4620      	mov	r0, r4
 801b682:	bd70      	pop	{r4, r5, r6, pc}
 801b684:	2001ccf0 	.word	0x2001ccf0

0801b688 <_malloc_r>:
 801b688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b68c:	1ccd      	adds	r5, r1, #3
 801b68e:	f025 0503 	bic.w	r5, r5, #3
 801b692:	3508      	adds	r5, #8
 801b694:	2d0c      	cmp	r5, #12
 801b696:	bf38      	it	cc
 801b698:	250c      	movcc	r5, #12
 801b69a:	2d00      	cmp	r5, #0
 801b69c:	4607      	mov	r7, r0
 801b69e:	db01      	blt.n	801b6a4 <_malloc_r+0x1c>
 801b6a0:	42a9      	cmp	r1, r5
 801b6a2:	d905      	bls.n	801b6b0 <_malloc_r+0x28>
 801b6a4:	230c      	movs	r3, #12
 801b6a6:	603b      	str	r3, [r7, #0]
 801b6a8:	2600      	movs	r6, #0
 801b6aa:	4630      	mov	r0, r6
 801b6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6b0:	4e2e      	ldr	r6, [pc, #184]	; (801b76c <_malloc_r+0xe4>)
 801b6b2:	f000 fd27 	bl	801c104 <__malloc_lock>
 801b6b6:	6833      	ldr	r3, [r6, #0]
 801b6b8:	461c      	mov	r4, r3
 801b6ba:	bb34      	cbnz	r4, 801b70a <_malloc_r+0x82>
 801b6bc:	4629      	mov	r1, r5
 801b6be:	4638      	mov	r0, r7
 801b6c0:	f7ff ffc2 	bl	801b648 <sbrk_aligned>
 801b6c4:	1c43      	adds	r3, r0, #1
 801b6c6:	4604      	mov	r4, r0
 801b6c8:	d14d      	bne.n	801b766 <_malloc_r+0xde>
 801b6ca:	6834      	ldr	r4, [r6, #0]
 801b6cc:	4626      	mov	r6, r4
 801b6ce:	2e00      	cmp	r6, #0
 801b6d0:	d140      	bne.n	801b754 <_malloc_r+0xcc>
 801b6d2:	6823      	ldr	r3, [r4, #0]
 801b6d4:	4631      	mov	r1, r6
 801b6d6:	4638      	mov	r0, r7
 801b6d8:	eb04 0803 	add.w	r8, r4, r3
 801b6dc:	f000 f93e 	bl	801b95c <_sbrk_r>
 801b6e0:	4580      	cmp	r8, r0
 801b6e2:	d13a      	bne.n	801b75a <_malloc_r+0xd2>
 801b6e4:	6821      	ldr	r1, [r4, #0]
 801b6e6:	3503      	adds	r5, #3
 801b6e8:	1a6d      	subs	r5, r5, r1
 801b6ea:	f025 0503 	bic.w	r5, r5, #3
 801b6ee:	3508      	adds	r5, #8
 801b6f0:	2d0c      	cmp	r5, #12
 801b6f2:	bf38      	it	cc
 801b6f4:	250c      	movcc	r5, #12
 801b6f6:	4629      	mov	r1, r5
 801b6f8:	4638      	mov	r0, r7
 801b6fa:	f7ff ffa5 	bl	801b648 <sbrk_aligned>
 801b6fe:	3001      	adds	r0, #1
 801b700:	d02b      	beq.n	801b75a <_malloc_r+0xd2>
 801b702:	6823      	ldr	r3, [r4, #0]
 801b704:	442b      	add	r3, r5
 801b706:	6023      	str	r3, [r4, #0]
 801b708:	e00e      	b.n	801b728 <_malloc_r+0xa0>
 801b70a:	6822      	ldr	r2, [r4, #0]
 801b70c:	1b52      	subs	r2, r2, r5
 801b70e:	d41e      	bmi.n	801b74e <_malloc_r+0xc6>
 801b710:	2a0b      	cmp	r2, #11
 801b712:	d916      	bls.n	801b742 <_malloc_r+0xba>
 801b714:	1961      	adds	r1, r4, r5
 801b716:	42a3      	cmp	r3, r4
 801b718:	6025      	str	r5, [r4, #0]
 801b71a:	bf18      	it	ne
 801b71c:	6059      	strne	r1, [r3, #4]
 801b71e:	6863      	ldr	r3, [r4, #4]
 801b720:	bf08      	it	eq
 801b722:	6031      	streq	r1, [r6, #0]
 801b724:	5162      	str	r2, [r4, r5]
 801b726:	604b      	str	r3, [r1, #4]
 801b728:	4638      	mov	r0, r7
 801b72a:	f104 060b 	add.w	r6, r4, #11
 801b72e:	f000 fcef 	bl	801c110 <__malloc_unlock>
 801b732:	f026 0607 	bic.w	r6, r6, #7
 801b736:	1d23      	adds	r3, r4, #4
 801b738:	1af2      	subs	r2, r6, r3
 801b73a:	d0b6      	beq.n	801b6aa <_malloc_r+0x22>
 801b73c:	1b9b      	subs	r3, r3, r6
 801b73e:	50a3      	str	r3, [r4, r2]
 801b740:	e7b3      	b.n	801b6aa <_malloc_r+0x22>
 801b742:	6862      	ldr	r2, [r4, #4]
 801b744:	42a3      	cmp	r3, r4
 801b746:	bf0c      	ite	eq
 801b748:	6032      	streq	r2, [r6, #0]
 801b74a:	605a      	strne	r2, [r3, #4]
 801b74c:	e7ec      	b.n	801b728 <_malloc_r+0xa0>
 801b74e:	4623      	mov	r3, r4
 801b750:	6864      	ldr	r4, [r4, #4]
 801b752:	e7b2      	b.n	801b6ba <_malloc_r+0x32>
 801b754:	4634      	mov	r4, r6
 801b756:	6876      	ldr	r6, [r6, #4]
 801b758:	e7b9      	b.n	801b6ce <_malloc_r+0x46>
 801b75a:	230c      	movs	r3, #12
 801b75c:	603b      	str	r3, [r7, #0]
 801b75e:	4638      	mov	r0, r7
 801b760:	f000 fcd6 	bl	801c110 <__malloc_unlock>
 801b764:	e7a1      	b.n	801b6aa <_malloc_r+0x22>
 801b766:	6025      	str	r5, [r4, #0]
 801b768:	e7de      	b.n	801b728 <_malloc_r+0xa0>
 801b76a:	bf00      	nop
 801b76c:	2001ccec 	.word	0x2001ccec

0801b770 <iprintf>:
 801b770:	b40f      	push	{r0, r1, r2, r3}
 801b772:	4b0a      	ldr	r3, [pc, #40]	; (801b79c <iprintf+0x2c>)
 801b774:	b513      	push	{r0, r1, r4, lr}
 801b776:	681c      	ldr	r4, [r3, #0]
 801b778:	b124      	cbz	r4, 801b784 <iprintf+0x14>
 801b77a:	69a3      	ldr	r3, [r4, #24]
 801b77c:	b913      	cbnz	r3, 801b784 <iprintf+0x14>
 801b77e:	4620      	mov	r0, r4
 801b780:	f7ff fd5e 	bl	801b240 <__sinit>
 801b784:	ab05      	add	r3, sp, #20
 801b786:	9a04      	ldr	r2, [sp, #16]
 801b788:	68a1      	ldr	r1, [r4, #8]
 801b78a:	9301      	str	r3, [sp, #4]
 801b78c:	4620      	mov	r0, r4
 801b78e:	f000 fe79 	bl	801c484 <_vfiprintf_r>
 801b792:	b002      	add	sp, #8
 801b794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b798:	b004      	add	sp, #16
 801b79a:	4770      	bx	lr
 801b79c:	20000c10 	.word	0x20000c10

0801b7a0 <srand>:
 801b7a0:	b538      	push	{r3, r4, r5, lr}
 801b7a2:	4b10      	ldr	r3, [pc, #64]	; (801b7e4 <srand+0x44>)
 801b7a4:	681d      	ldr	r5, [r3, #0]
 801b7a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801b7a8:	4604      	mov	r4, r0
 801b7aa:	b9b3      	cbnz	r3, 801b7da <srand+0x3a>
 801b7ac:	2018      	movs	r0, #24
 801b7ae:	f7ff fec3 	bl	801b538 <malloc>
 801b7b2:	4602      	mov	r2, r0
 801b7b4:	63a8      	str	r0, [r5, #56]	; 0x38
 801b7b6:	b920      	cbnz	r0, 801b7c2 <srand+0x22>
 801b7b8:	4b0b      	ldr	r3, [pc, #44]	; (801b7e8 <srand+0x48>)
 801b7ba:	480c      	ldr	r0, [pc, #48]	; (801b7ec <srand+0x4c>)
 801b7bc:	2142      	movs	r1, #66	; 0x42
 801b7be:	f000 fb1b 	bl	801bdf8 <__assert_func>
 801b7c2:	490b      	ldr	r1, [pc, #44]	; (801b7f0 <srand+0x50>)
 801b7c4:	4b0b      	ldr	r3, [pc, #44]	; (801b7f4 <srand+0x54>)
 801b7c6:	e9c0 1300 	strd	r1, r3, [r0]
 801b7ca:	4b0b      	ldr	r3, [pc, #44]	; (801b7f8 <srand+0x58>)
 801b7cc:	6083      	str	r3, [r0, #8]
 801b7ce:	230b      	movs	r3, #11
 801b7d0:	8183      	strh	r3, [r0, #12]
 801b7d2:	2100      	movs	r1, #0
 801b7d4:	2001      	movs	r0, #1
 801b7d6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b7da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801b7dc:	2200      	movs	r2, #0
 801b7de:	611c      	str	r4, [r3, #16]
 801b7e0:	615a      	str	r2, [r3, #20]
 801b7e2:	bd38      	pop	{r3, r4, r5, pc}
 801b7e4:	20000c10 	.word	0x20000c10
 801b7e8:	0801dfc4 	.word	0x0801dfc4
 801b7ec:	0801dfdb 	.word	0x0801dfdb
 801b7f0:	abcd330e 	.word	0xabcd330e
 801b7f4:	e66d1234 	.word	0xe66d1234
 801b7f8:	0005deec 	.word	0x0005deec

0801b7fc <rand>:
 801b7fc:	4b16      	ldr	r3, [pc, #88]	; (801b858 <rand+0x5c>)
 801b7fe:	b510      	push	{r4, lr}
 801b800:	681c      	ldr	r4, [r3, #0]
 801b802:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b804:	b9b3      	cbnz	r3, 801b834 <rand+0x38>
 801b806:	2018      	movs	r0, #24
 801b808:	f7ff fe96 	bl	801b538 <malloc>
 801b80c:	63a0      	str	r0, [r4, #56]	; 0x38
 801b80e:	b928      	cbnz	r0, 801b81c <rand+0x20>
 801b810:	4602      	mov	r2, r0
 801b812:	4b12      	ldr	r3, [pc, #72]	; (801b85c <rand+0x60>)
 801b814:	4812      	ldr	r0, [pc, #72]	; (801b860 <rand+0x64>)
 801b816:	214e      	movs	r1, #78	; 0x4e
 801b818:	f000 faee 	bl	801bdf8 <__assert_func>
 801b81c:	4a11      	ldr	r2, [pc, #68]	; (801b864 <rand+0x68>)
 801b81e:	4b12      	ldr	r3, [pc, #72]	; (801b868 <rand+0x6c>)
 801b820:	e9c0 2300 	strd	r2, r3, [r0]
 801b824:	4b11      	ldr	r3, [pc, #68]	; (801b86c <rand+0x70>)
 801b826:	6083      	str	r3, [r0, #8]
 801b828:	230b      	movs	r3, #11
 801b82a:	8183      	strh	r3, [r0, #12]
 801b82c:	2201      	movs	r2, #1
 801b82e:	2300      	movs	r3, #0
 801b830:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b834:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801b836:	4a0e      	ldr	r2, [pc, #56]	; (801b870 <rand+0x74>)
 801b838:	6920      	ldr	r0, [r4, #16]
 801b83a:	6963      	ldr	r3, [r4, #20]
 801b83c:	490d      	ldr	r1, [pc, #52]	; (801b874 <rand+0x78>)
 801b83e:	4342      	muls	r2, r0
 801b840:	fb01 2203 	mla	r2, r1, r3, r2
 801b844:	fba0 0101 	umull	r0, r1, r0, r1
 801b848:	1c43      	adds	r3, r0, #1
 801b84a:	eb42 0001 	adc.w	r0, r2, r1
 801b84e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801b852:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b856:	bd10      	pop	{r4, pc}
 801b858:	20000c10 	.word	0x20000c10
 801b85c:	0801dfc4 	.word	0x0801dfc4
 801b860:	0801dfdb 	.word	0x0801dfdb
 801b864:	abcd330e 	.word	0xabcd330e
 801b868:	e66d1234 	.word	0xe66d1234
 801b86c:	0005deec 	.word	0x0005deec
 801b870:	5851f42d 	.word	0x5851f42d
 801b874:	4c957f2d 	.word	0x4c957f2d

0801b878 <realloc>:
 801b878:	4b02      	ldr	r3, [pc, #8]	; (801b884 <realloc+0xc>)
 801b87a:	460a      	mov	r2, r1
 801b87c:	4601      	mov	r1, r0
 801b87e:	6818      	ldr	r0, [r3, #0]
 801b880:	f000 bc4c 	b.w	801c11c <_realloc_r>
 801b884:	20000c10 	.word	0x20000c10

0801b888 <cleanup_glue>:
 801b888:	b538      	push	{r3, r4, r5, lr}
 801b88a:	460c      	mov	r4, r1
 801b88c:	6809      	ldr	r1, [r1, #0]
 801b88e:	4605      	mov	r5, r0
 801b890:	b109      	cbz	r1, 801b896 <cleanup_glue+0xe>
 801b892:	f7ff fff9 	bl	801b888 <cleanup_glue>
 801b896:	4621      	mov	r1, r4
 801b898:	4628      	mov	r0, r5
 801b89a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b89e:	f7ff be87 	b.w	801b5b0 <_free_r>
	...

0801b8a4 <_reclaim_reent>:
 801b8a4:	4b2c      	ldr	r3, [pc, #176]	; (801b958 <_reclaim_reent+0xb4>)
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	4283      	cmp	r3, r0
 801b8aa:	b570      	push	{r4, r5, r6, lr}
 801b8ac:	4604      	mov	r4, r0
 801b8ae:	d051      	beq.n	801b954 <_reclaim_reent+0xb0>
 801b8b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b8b2:	b143      	cbz	r3, 801b8c6 <_reclaim_reent+0x22>
 801b8b4:	68db      	ldr	r3, [r3, #12]
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d14a      	bne.n	801b950 <_reclaim_reent+0xac>
 801b8ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b8bc:	6819      	ldr	r1, [r3, #0]
 801b8be:	b111      	cbz	r1, 801b8c6 <_reclaim_reent+0x22>
 801b8c0:	4620      	mov	r0, r4
 801b8c2:	f7ff fe75 	bl	801b5b0 <_free_r>
 801b8c6:	6961      	ldr	r1, [r4, #20]
 801b8c8:	b111      	cbz	r1, 801b8d0 <_reclaim_reent+0x2c>
 801b8ca:	4620      	mov	r0, r4
 801b8cc:	f7ff fe70 	bl	801b5b0 <_free_r>
 801b8d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b8d2:	b111      	cbz	r1, 801b8da <_reclaim_reent+0x36>
 801b8d4:	4620      	mov	r0, r4
 801b8d6:	f7ff fe6b 	bl	801b5b0 <_free_r>
 801b8da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b8dc:	b111      	cbz	r1, 801b8e4 <_reclaim_reent+0x40>
 801b8de:	4620      	mov	r0, r4
 801b8e0:	f7ff fe66 	bl	801b5b0 <_free_r>
 801b8e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b8e6:	b111      	cbz	r1, 801b8ee <_reclaim_reent+0x4a>
 801b8e8:	4620      	mov	r0, r4
 801b8ea:	f7ff fe61 	bl	801b5b0 <_free_r>
 801b8ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b8f0:	b111      	cbz	r1, 801b8f8 <_reclaim_reent+0x54>
 801b8f2:	4620      	mov	r0, r4
 801b8f4:	f7ff fe5c 	bl	801b5b0 <_free_r>
 801b8f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b8fa:	b111      	cbz	r1, 801b902 <_reclaim_reent+0x5e>
 801b8fc:	4620      	mov	r0, r4
 801b8fe:	f7ff fe57 	bl	801b5b0 <_free_r>
 801b902:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b904:	b111      	cbz	r1, 801b90c <_reclaim_reent+0x68>
 801b906:	4620      	mov	r0, r4
 801b908:	f7ff fe52 	bl	801b5b0 <_free_r>
 801b90c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b90e:	b111      	cbz	r1, 801b916 <_reclaim_reent+0x72>
 801b910:	4620      	mov	r0, r4
 801b912:	f7ff fe4d 	bl	801b5b0 <_free_r>
 801b916:	69a3      	ldr	r3, [r4, #24]
 801b918:	b1e3      	cbz	r3, 801b954 <_reclaim_reent+0xb0>
 801b91a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b91c:	4620      	mov	r0, r4
 801b91e:	4798      	blx	r3
 801b920:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b922:	b1b9      	cbz	r1, 801b954 <_reclaim_reent+0xb0>
 801b924:	4620      	mov	r0, r4
 801b926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b92a:	f7ff bfad 	b.w	801b888 <cleanup_glue>
 801b92e:	5949      	ldr	r1, [r1, r5]
 801b930:	b941      	cbnz	r1, 801b944 <_reclaim_reent+0xa0>
 801b932:	3504      	adds	r5, #4
 801b934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b936:	2d80      	cmp	r5, #128	; 0x80
 801b938:	68d9      	ldr	r1, [r3, #12]
 801b93a:	d1f8      	bne.n	801b92e <_reclaim_reent+0x8a>
 801b93c:	4620      	mov	r0, r4
 801b93e:	f7ff fe37 	bl	801b5b0 <_free_r>
 801b942:	e7ba      	b.n	801b8ba <_reclaim_reent+0x16>
 801b944:	680e      	ldr	r6, [r1, #0]
 801b946:	4620      	mov	r0, r4
 801b948:	f7ff fe32 	bl	801b5b0 <_free_r>
 801b94c:	4631      	mov	r1, r6
 801b94e:	e7ef      	b.n	801b930 <_reclaim_reent+0x8c>
 801b950:	2500      	movs	r5, #0
 801b952:	e7ef      	b.n	801b934 <_reclaim_reent+0x90>
 801b954:	bd70      	pop	{r4, r5, r6, pc}
 801b956:	bf00      	nop
 801b958:	20000c10 	.word	0x20000c10

0801b95c <_sbrk_r>:
 801b95c:	b538      	push	{r3, r4, r5, lr}
 801b95e:	4d06      	ldr	r5, [pc, #24]	; (801b978 <_sbrk_r+0x1c>)
 801b960:	2300      	movs	r3, #0
 801b962:	4604      	mov	r4, r0
 801b964:	4608      	mov	r0, r1
 801b966:	602b      	str	r3, [r5, #0]
 801b968:	f7e6 fcd4 	bl	8002314 <_sbrk>
 801b96c:	1c43      	adds	r3, r0, #1
 801b96e:	d102      	bne.n	801b976 <_sbrk_r+0x1a>
 801b970:	682b      	ldr	r3, [r5, #0]
 801b972:	b103      	cbz	r3, 801b976 <_sbrk_r+0x1a>
 801b974:	6023      	str	r3, [r4, #0]
 801b976:	bd38      	pop	{r3, r4, r5, pc}
 801b978:	2001ccf4 	.word	0x2001ccf4

0801b97c <sniprintf>:
 801b97c:	b40c      	push	{r2, r3}
 801b97e:	b530      	push	{r4, r5, lr}
 801b980:	4b17      	ldr	r3, [pc, #92]	; (801b9e0 <sniprintf+0x64>)
 801b982:	1e0c      	subs	r4, r1, #0
 801b984:	681d      	ldr	r5, [r3, #0]
 801b986:	b09d      	sub	sp, #116	; 0x74
 801b988:	da08      	bge.n	801b99c <sniprintf+0x20>
 801b98a:	238b      	movs	r3, #139	; 0x8b
 801b98c:	602b      	str	r3, [r5, #0]
 801b98e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b992:	b01d      	add	sp, #116	; 0x74
 801b994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b998:	b002      	add	sp, #8
 801b99a:	4770      	bx	lr
 801b99c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b9a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b9a4:	bf14      	ite	ne
 801b9a6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801b9aa:	4623      	moveq	r3, r4
 801b9ac:	9304      	str	r3, [sp, #16]
 801b9ae:	9307      	str	r3, [sp, #28]
 801b9b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b9b4:	9002      	str	r0, [sp, #8]
 801b9b6:	9006      	str	r0, [sp, #24]
 801b9b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b9bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b9be:	ab21      	add	r3, sp, #132	; 0x84
 801b9c0:	a902      	add	r1, sp, #8
 801b9c2:	4628      	mov	r0, r5
 801b9c4:	9301      	str	r3, [sp, #4]
 801b9c6:	f000 fc33 	bl	801c230 <_svfiprintf_r>
 801b9ca:	1c43      	adds	r3, r0, #1
 801b9cc:	bfbc      	itt	lt
 801b9ce:	238b      	movlt	r3, #139	; 0x8b
 801b9d0:	602b      	strlt	r3, [r5, #0]
 801b9d2:	2c00      	cmp	r4, #0
 801b9d4:	d0dd      	beq.n	801b992 <sniprintf+0x16>
 801b9d6:	9b02      	ldr	r3, [sp, #8]
 801b9d8:	2200      	movs	r2, #0
 801b9da:	701a      	strb	r2, [r3, #0]
 801b9dc:	e7d9      	b.n	801b992 <sniprintf+0x16>
 801b9de:	bf00      	nop
 801b9e0:	20000c10 	.word	0x20000c10

0801b9e4 <__sread>:
 801b9e4:	b510      	push	{r4, lr}
 801b9e6:	460c      	mov	r4, r1
 801b9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9ec:	f001 f80e 	bl	801ca0c <_read_r>
 801b9f0:	2800      	cmp	r0, #0
 801b9f2:	bfab      	itete	ge
 801b9f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b9f6:	89a3      	ldrhlt	r3, [r4, #12]
 801b9f8:	181b      	addge	r3, r3, r0
 801b9fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b9fe:	bfac      	ite	ge
 801ba00:	6563      	strge	r3, [r4, #84]	; 0x54
 801ba02:	81a3      	strhlt	r3, [r4, #12]
 801ba04:	bd10      	pop	{r4, pc}

0801ba06 <__swrite>:
 801ba06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba0a:	461f      	mov	r7, r3
 801ba0c:	898b      	ldrh	r3, [r1, #12]
 801ba0e:	05db      	lsls	r3, r3, #23
 801ba10:	4605      	mov	r5, r0
 801ba12:	460c      	mov	r4, r1
 801ba14:	4616      	mov	r6, r2
 801ba16:	d505      	bpl.n	801ba24 <__swrite+0x1e>
 801ba18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba1c:	2302      	movs	r3, #2
 801ba1e:	2200      	movs	r2, #0
 801ba20:	f000 faf8 	bl	801c014 <_lseek_r>
 801ba24:	89a3      	ldrh	r3, [r4, #12]
 801ba26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ba2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ba2e:	81a3      	strh	r3, [r4, #12]
 801ba30:	4632      	mov	r2, r6
 801ba32:	463b      	mov	r3, r7
 801ba34:	4628      	mov	r0, r5
 801ba36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ba3a:	f000 b95d 	b.w	801bcf8 <_write_r>

0801ba3e <__sseek>:
 801ba3e:	b510      	push	{r4, lr}
 801ba40:	460c      	mov	r4, r1
 801ba42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba46:	f000 fae5 	bl	801c014 <_lseek_r>
 801ba4a:	1c43      	adds	r3, r0, #1
 801ba4c:	89a3      	ldrh	r3, [r4, #12]
 801ba4e:	bf15      	itete	ne
 801ba50:	6560      	strne	r0, [r4, #84]	; 0x54
 801ba52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ba56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ba5a:	81a3      	strheq	r3, [r4, #12]
 801ba5c:	bf18      	it	ne
 801ba5e:	81a3      	strhne	r3, [r4, #12]
 801ba60:	bd10      	pop	{r4, pc}

0801ba62 <__sclose>:
 801ba62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba66:	f000 b9e5 	b.w	801be34 <_close_r>

0801ba6a <strchr>:
 801ba6a:	b2c9      	uxtb	r1, r1
 801ba6c:	4603      	mov	r3, r0
 801ba6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ba72:	b11a      	cbz	r2, 801ba7c <strchr+0x12>
 801ba74:	428a      	cmp	r2, r1
 801ba76:	d1f9      	bne.n	801ba6c <strchr+0x2>
 801ba78:	4618      	mov	r0, r3
 801ba7a:	4770      	bx	lr
 801ba7c:	2900      	cmp	r1, #0
 801ba7e:	bf18      	it	ne
 801ba80:	2300      	movne	r3, #0
 801ba82:	e7f9      	b.n	801ba78 <strchr+0xe>

0801ba84 <strcpy>:
 801ba84:	4603      	mov	r3, r0
 801ba86:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ba8a:	f803 2b01 	strb.w	r2, [r3], #1
 801ba8e:	2a00      	cmp	r2, #0
 801ba90:	d1f9      	bne.n	801ba86 <strcpy+0x2>
 801ba92:	4770      	bx	lr

0801ba94 <strncmp>:
 801ba94:	b510      	push	{r4, lr}
 801ba96:	b17a      	cbz	r2, 801bab8 <strncmp+0x24>
 801ba98:	4603      	mov	r3, r0
 801ba9a:	3901      	subs	r1, #1
 801ba9c:	1884      	adds	r4, r0, r2
 801ba9e:	f813 0b01 	ldrb.w	r0, [r3], #1
 801baa2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801baa6:	4290      	cmp	r0, r2
 801baa8:	d101      	bne.n	801baae <strncmp+0x1a>
 801baaa:	42a3      	cmp	r3, r4
 801baac:	d101      	bne.n	801bab2 <strncmp+0x1e>
 801baae:	1a80      	subs	r0, r0, r2
 801bab0:	bd10      	pop	{r4, pc}
 801bab2:	2800      	cmp	r0, #0
 801bab4:	d1f3      	bne.n	801ba9e <strncmp+0xa>
 801bab6:	e7fa      	b.n	801baae <strncmp+0x1a>
 801bab8:	4610      	mov	r0, r2
 801baba:	e7f9      	b.n	801bab0 <strncmp+0x1c>

0801babc <strstr>:
 801babc:	780a      	ldrb	r2, [r1, #0]
 801babe:	b570      	push	{r4, r5, r6, lr}
 801bac0:	b96a      	cbnz	r2, 801bade <strstr+0x22>
 801bac2:	bd70      	pop	{r4, r5, r6, pc}
 801bac4:	429a      	cmp	r2, r3
 801bac6:	d109      	bne.n	801badc <strstr+0x20>
 801bac8:	460c      	mov	r4, r1
 801baca:	4605      	mov	r5, r0
 801bacc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d0f6      	beq.n	801bac2 <strstr+0x6>
 801bad4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801bad8:	429e      	cmp	r6, r3
 801bada:	d0f7      	beq.n	801bacc <strstr+0x10>
 801badc:	3001      	adds	r0, #1
 801bade:	7803      	ldrb	r3, [r0, #0]
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d1ef      	bne.n	801bac4 <strstr+0x8>
 801bae4:	4618      	mov	r0, r3
 801bae6:	e7ec      	b.n	801bac2 <strstr+0x6>

0801bae8 <_strtoul_l.constprop.0>:
 801bae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801baec:	4f36      	ldr	r7, [pc, #216]	; (801bbc8 <_strtoul_l.constprop.0+0xe0>)
 801baee:	4686      	mov	lr, r0
 801baf0:	460d      	mov	r5, r1
 801baf2:	4628      	mov	r0, r5
 801baf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801baf8:	5de6      	ldrb	r6, [r4, r7]
 801bafa:	f016 0608 	ands.w	r6, r6, #8
 801bafe:	d1f8      	bne.n	801baf2 <_strtoul_l.constprop.0+0xa>
 801bb00:	2c2d      	cmp	r4, #45	; 0x2d
 801bb02:	d12f      	bne.n	801bb64 <_strtoul_l.constprop.0+0x7c>
 801bb04:	782c      	ldrb	r4, [r5, #0]
 801bb06:	2601      	movs	r6, #1
 801bb08:	1c85      	adds	r5, r0, #2
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d057      	beq.n	801bbbe <_strtoul_l.constprop.0+0xd6>
 801bb0e:	2b10      	cmp	r3, #16
 801bb10:	d109      	bne.n	801bb26 <_strtoul_l.constprop.0+0x3e>
 801bb12:	2c30      	cmp	r4, #48	; 0x30
 801bb14:	d107      	bne.n	801bb26 <_strtoul_l.constprop.0+0x3e>
 801bb16:	7828      	ldrb	r0, [r5, #0]
 801bb18:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801bb1c:	2858      	cmp	r0, #88	; 0x58
 801bb1e:	d149      	bne.n	801bbb4 <_strtoul_l.constprop.0+0xcc>
 801bb20:	786c      	ldrb	r4, [r5, #1]
 801bb22:	2310      	movs	r3, #16
 801bb24:	3502      	adds	r5, #2
 801bb26:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801bb2a:	2700      	movs	r7, #0
 801bb2c:	fbb8 f8f3 	udiv	r8, r8, r3
 801bb30:	fb03 f908 	mul.w	r9, r3, r8
 801bb34:	ea6f 0909 	mvn.w	r9, r9
 801bb38:	4638      	mov	r0, r7
 801bb3a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801bb3e:	f1bc 0f09 	cmp.w	ip, #9
 801bb42:	d814      	bhi.n	801bb6e <_strtoul_l.constprop.0+0x86>
 801bb44:	4664      	mov	r4, ip
 801bb46:	42a3      	cmp	r3, r4
 801bb48:	dd22      	ble.n	801bb90 <_strtoul_l.constprop.0+0xa8>
 801bb4a:	2f00      	cmp	r7, #0
 801bb4c:	db1d      	blt.n	801bb8a <_strtoul_l.constprop.0+0xa2>
 801bb4e:	4580      	cmp	r8, r0
 801bb50:	d31b      	bcc.n	801bb8a <_strtoul_l.constprop.0+0xa2>
 801bb52:	d101      	bne.n	801bb58 <_strtoul_l.constprop.0+0x70>
 801bb54:	45a1      	cmp	r9, r4
 801bb56:	db18      	blt.n	801bb8a <_strtoul_l.constprop.0+0xa2>
 801bb58:	fb00 4003 	mla	r0, r0, r3, r4
 801bb5c:	2701      	movs	r7, #1
 801bb5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bb62:	e7ea      	b.n	801bb3a <_strtoul_l.constprop.0+0x52>
 801bb64:	2c2b      	cmp	r4, #43	; 0x2b
 801bb66:	bf04      	itt	eq
 801bb68:	782c      	ldrbeq	r4, [r5, #0]
 801bb6a:	1c85      	addeq	r5, r0, #2
 801bb6c:	e7cd      	b.n	801bb0a <_strtoul_l.constprop.0+0x22>
 801bb6e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801bb72:	f1bc 0f19 	cmp.w	ip, #25
 801bb76:	d801      	bhi.n	801bb7c <_strtoul_l.constprop.0+0x94>
 801bb78:	3c37      	subs	r4, #55	; 0x37
 801bb7a:	e7e4      	b.n	801bb46 <_strtoul_l.constprop.0+0x5e>
 801bb7c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801bb80:	f1bc 0f19 	cmp.w	ip, #25
 801bb84:	d804      	bhi.n	801bb90 <_strtoul_l.constprop.0+0xa8>
 801bb86:	3c57      	subs	r4, #87	; 0x57
 801bb88:	e7dd      	b.n	801bb46 <_strtoul_l.constprop.0+0x5e>
 801bb8a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801bb8e:	e7e6      	b.n	801bb5e <_strtoul_l.constprop.0+0x76>
 801bb90:	2f00      	cmp	r7, #0
 801bb92:	da07      	bge.n	801bba4 <_strtoul_l.constprop.0+0xbc>
 801bb94:	2322      	movs	r3, #34	; 0x22
 801bb96:	f8ce 3000 	str.w	r3, [lr]
 801bb9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bb9e:	b932      	cbnz	r2, 801bbae <_strtoul_l.constprop.0+0xc6>
 801bba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bba4:	b106      	cbz	r6, 801bba8 <_strtoul_l.constprop.0+0xc0>
 801bba6:	4240      	negs	r0, r0
 801bba8:	2a00      	cmp	r2, #0
 801bbaa:	d0f9      	beq.n	801bba0 <_strtoul_l.constprop.0+0xb8>
 801bbac:	b107      	cbz	r7, 801bbb0 <_strtoul_l.constprop.0+0xc8>
 801bbae:	1e69      	subs	r1, r5, #1
 801bbb0:	6011      	str	r1, [r2, #0]
 801bbb2:	e7f5      	b.n	801bba0 <_strtoul_l.constprop.0+0xb8>
 801bbb4:	2430      	movs	r4, #48	; 0x30
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d1b5      	bne.n	801bb26 <_strtoul_l.constprop.0+0x3e>
 801bbba:	2308      	movs	r3, #8
 801bbbc:	e7b3      	b.n	801bb26 <_strtoul_l.constprop.0+0x3e>
 801bbbe:	2c30      	cmp	r4, #48	; 0x30
 801bbc0:	d0a9      	beq.n	801bb16 <_strtoul_l.constprop.0+0x2e>
 801bbc2:	230a      	movs	r3, #10
 801bbc4:	e7af      	b.n	801bb26 <_strtoul_l.constprop.0+0x3e>
 801bbc6:	bf00      	nop
 801bbc8:	0801de5f 	.word	0x0801de5f

0801bbcc <strtoul>:
 801bbcc:	4613      	mov	r3, r2
 801bbce:	460a      	mov	r2, r1
 801bbd0:	4601      	mov	r1, r0
 801bbd2:	4802      	ldr	r0, [pc, #8]	; (801bbdc <strtoul+0x10>)
 801bbd4:	6800      	ldr	r0, [r0, #0]
 801bbd6:	f7ff bf87 	b.w	801bae8 <_strtoul_l.constprop.0>
 801bbda:	bf00      	nop
 801bbdc:	20000c10 	.word	0x20000c10

0801bbe0 <_vsniprintf_r>:
 801bbe0:	b530      	push	{r4, r5, lr}
 801bbe2:	4614      	mov	r4, r2
 801bbe4:	2c00      	cmp	r4, #0
 801bbe6:	b09b      	sub	sp, #108	; 0x6c
 801bbe8:	4605      	mov	r5, r0
 801bbea:	461a      	mov	r2, r3
 801bbec:	da05      	bge.n	801bbfa <_vsniprintf_r+0x1a>
 801bbee:	238b      	movs	r3, #139	; 0x8b
 801bbf0:	6003      	str	r3, [r0, #0]
 801bbf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bbf6:	b01b      	add	sp, #108	; 0x6c
 801bbf8:	bd30      	pop	{r4, r5, pc}
 801bbfa:	f44f 7302 	mov.w	r3, #520	; 0x208
 801bbfe:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bc02:	bf14      	ite	ne
 801bc04:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801bc08:	4623      	moveq	r3, r4
 801bc0a:	9302      	str	r3, [sp, #8]
 801bc0c:	9305      	str	r3, [sp, #20]
 801bc0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bc12:	9100      	str	r1, [sp, #0]
 801bc14:	9104      	str	r1, [sp, #16]
 801bc16:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bc1a:	4669      	mov	r1, sp
 801bc1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bc1e:	f000 fb07 	bl	801c230 <_svfiprintf_r>
 801bc22:	1c43      	adds	r3, r0, #1
 801bc24:	bfbc      	itt	lt
 801bc26:	238b      	movlt	r3, #139	; 0x8b
 801bc28:	602b      	strlt	r3, [r5, #0]
 801bc2a:	2c00      	cmp	r4, #0
 801bc2c:	d0e3      	beq.n	801bbf6 <_vsniprintf_r+0x16>
 801bc2e:	9b00      	ldr	r3, [sp, #0]
 801bc30:	2200      	movs	r2, #0
 801bc32:	701a      	strb	r2, [r3, #0]
 801bc34:	e7df      	b.n	801bbf6 <_vsniprintf_r+0x16>
	...

0801bc38 <vsniprintf>:
 801bc38:	b507      	push	{r0, r1, r2, lr}
 801bc3a:	9300      	str	r3, [sp, #0]
 801bc3c:	4613      	mov	r3, r2
 801bc3e:	460a      	mov	r2, r1
 801bc40:	4601      	mov	r1, r0
 801bc42:	4803      	ldr	r0, [pc, #12]	; (801bc50 <vsniprintf+0x18>)
 801bc44:	6800      	ldr	r0, [r0, #0]
 801bc46:	f7ff ffcb 	bl	801bbe0 <_vsniprintf_r>
 801bc4a:	b003      	add	sp, #12
 801bc4c:	f85d fb04 	ldr.w	pc, [sp], #4
 801bc50:	20000c10 	.word	0x20000c10

0801bc54 <__swbuf_r>:
 801bc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc56:	460e      	mov	r6, r1
 801bc58:	4614      	mov	r4, r2
 801bc5a:	4605      	mov	r5, r0
 801bc5c:	b118      	cbz	r0, 801bc66 <__swbuf_r+0x12>
 801bc5e:	6983      	ldr	r3, [r0, #24]
 801bc60:	b90b      	cbnz	r3, 801bc66 <__swbuf_r+0x12>
 801bc62:	f7ff faed 	bl	801b240 <__sinit>
 801bc66:	4b21      	ldr	r3, [pc, #132]	; (801bcec <__swbuf_r+0x98>)
 801bc68:	429c      	cmp	r4, r3
 801bc6a:	d12b      	bne.n	801bcc4 <__swbuf_r+0x70>
 801bc6c:	686c      	ldr	r4, [r5, #4]
 801bc6e:	69a3      	ldr	r3, [r4, #24]
 801bc70:	60a3      	str	r3, [r4, #8]
 801bc72:	89a3      	ldrh	r3, [r4, #12]
 801bc74:	071a      	lsls	r2, r3, #28
 801bc76:	d52f      	bpl.n	801bcd8 <__swbuf_r+0x84>
 801bc78:	6923      	ldr	r3, [r4, #16]
 801bc7a:	b36b      	cbz	r3, 801bcd8 <__swbuf_r+0x84>
 801bc7c:	6923      	ldr	r3, [r4, #16]
 801bc7e:	6820      	ldr	r0, [r4, #0]
 801bc80:	1ac0      	subs	r0, r0, r3
 801bc82:	6963      	ldr	r3, [r4, #20]
 801bc84:	b2f6      	uxtb	r6, r6
 801bc86:	4283      	cmp	r3, r0
 801bc88:	4637      	mov	r7, r6
 801bc8a:	dc04      	bgt.n	801bc96 <__swbuf_r+0x42>
 801bc8c:	4621      	mov	r1, r4
 801bc8e:	4628      	mov	r0, r5
 801bc90:	f000 f972 	bl	801bf78 <_fflush_r>
 801bc94:	bb30      	cbnz	r0, 801bce4 <__swbuf_r+0x90>
 801bc96:	68a3      	ldr	r3, [r4, #8]
 801bc98:	3b01      	subs	r3, #1
 801bc9a:	60a3      	str	r3, [r4, #8]
 801bc9c:	6823      	ldr	r3, [r4, #0]
 801bc9e:	1c5a      	adds	r2, r3, #1
 801bca0:	6022      	str	r2, [r4, #0]
 801bca2:	701e      	strb	r6, [r3, #0]
 801bca4:	6963      	ldr	r3, [r4, #20]
 801bca6:	3001      	adds	r0, #1
 801bca8:	4283      	cmp	r3, r0
 801bcaa:	d004      	beq.n	801bcb6 <__swbuf_r+0x62>
 801bcac:	89a3      	ldrh	r3, [r4, #12]
 801bcae:	07db      	lsls	r3, r3, #31
 801bcb0:	d506      	bpl.n	801bcc0 <__swbuf_r+0x6c>
 801bcb2:	2e0a      	cmp	r6, #10
 801bcb4:	d104      	bne.n	801bcc0 <__swbuf_r+0x6c>
 801bcb6:	4621      	mov	r1, r4
 801bcb8:	4628      	mov	r0, r5
 801bcba:	f000 f95d 	bl	801bf78 <_fflush_r>
 801bcbe:	b988      	cbnz	r0, 801bce4 <__swbuf_r+0x90>
 801bcc0:	4638      	mov	r0, r7
 801bcc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcc4:	4b0a      	ldr	r3, [pc, #40]	; (801bcf0 <__swbuf_r+0x9c>)
 801bcc6:	429c      	cmp	r4, r3
 801bcc8:	d101      	bne.n	801bcce <__swbuf_r+0x7a>
 801bcca:	68ac      	ldr	r4, [r5, #8]
 801bccc:	e7cf      	b.n	801bc6e <__swbuf_r+0x1a>
 801bcce:	4b09      	ldr	r3, [pc, #36]	; (801bcf4 <__swbuf_r+0xa0>)
 801bcd0:	429c      	cmp	r4, r3
 801bcd2:	bf08      	it	eq
 801bcd4:	68ec      	ldreq	r4, [r5, #12]
 801bcd6:	e7ca      	b.n	801bc6e <__swbuf_r+0x1a>
 801bcd8:	4621      	mov	r1, r4
 801bcda:	4628      	mov	r0, r5
 801bcdc:	f000 f81e 	bl	801bd1c <__swsetup_r>
 801bce0:	2800      	cmp	r0, #0
 801bce2:	d0cb      	beq.n	801bc7c <__swbuf_r+0x28>
 801bce4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801bce8:	e7ea      	b.n	801bcc0 <__swbuf_r+0x6c>
 801bcea:	bf00      	nop
 801bcec:	0801df80 	.word	0x0801df80
 801bcf0:	0801dfa0 	.word	0x0801dfa0
 801bcf4:	0801df60 	.word	0x0801df60

0801bcf8 <_write_r>:
 801bcf8:	b538      	push	{r3, r4, r5, lr}
 801bcfa:	4d07      	ldr	r5, [pc, #28]	; (801bd18 <_write_r+0x20>)
 801bcfc:	4604      	mov	r4, r0
 801bcfe:	4608      	mov	r0, r1
 801bd00:	4611      	mov	r1, r2
 801bd02:	2200      	movs	r2, #0
 801bd04:	602a      	str	r2, [r5, #0]
 801bd06:	461a      	mov	r2, r3
 801bd08:	f7e6 fae7 	bl	80022da <_write>
 801bd0c:	1c43      	adds	r3, r0, #1
 801bd0e:	d102      	bne.n	801bd16 <_write_r+0x1e>
 801bd10:	682b      	ldr	r3, [r5, #0]
 801bd12:	b103      	cbz	r3, 801bd16 <_write_r+0x1e>
 801bd14:	6023      	str	r3, [r4, #0]
 801bd16:	bd38      	pop	{r3, r4, r5, pc}
 801bd18:	2001ccf4 	.word	0x2001ccf4

0801bd1c <__swsetup_r>:
 801bd1c:	4b32      	ldr	r3, [pc, #200]	; (801bde8 <__swsetup_r+0xcc>)
 801bd1e:	b570      	push	{r4, r5, r6, lr}
 801bd20:	681d      	ldr	r5, [r3, #0]
 801bd22:	4606      	mov	r6, r0
 801bd24:	460c      	mov	r4, r1
 801bd26:	b125      	cbz	r5, 801bd32 <__swsetup_r+0x16>
 801bd28:	69ab      	ldr	r3, [r5, #24]
 801bd2a:	b913      	cbnz	r3, 801bd32 <__swsetup_r+0x16>
 801bd2c:	4628      	mov	r0, r5
 801bd2e:	f7ff fa87 	bl	801b240 <__sinit>
 801bd32:	4b2e      	ldr	r3, [pc, #184]	; (801bdec <__swsetup_r+0xd0>)
 801bd34:	429c      	cmp	r4, r3
 801bd36:	d10f      	bne.n	801bd58 <__swsetup_r+0x3c>
 801bd38:	686c      	ldr	r4, [r5, #4]
 801bd3a:	89a3      	ldrh	r3, [r4, #12]
 801bd3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bd40:	0719      	lsls	r1, r3, #28
 801bd42:	d42c      	bmi.n	801bd9e <__swsetup_r+0x82>
 801bd44:	06dd      	lsls	r5, r3, #27
 801bd46:	d411      	bmi.n	801bd6c <__swsetup_r+0x50>
 801bd48:	2309      	movs	r3, #9
 801bd4a:	6033      	str	r3, [r6, #0]
 801bd4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bd50:	81a3      	strh	r3, [r4, #12]
 801bd52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd56:	e03e      	b.n	801bdd6 <__swsetup_r+0xba>
 801bd58:	4b25      	ldr	r3, [pc, #148]	; (801bdf0 <__swsetup_r+0xd4>)
 801bd5a:	429c      	cmp	r4, r3
 801bd5c:	d101      	bne.n	801bd62 <__swsetup_r+0x46>
 801bd5e:	68ac      	ldr	r4, [r5, #8]
 801bd60:	e7eb      	b.n	801bd3a <__swsetup_r+0x1e>
 801bd62:	4b24      	ldr	r3, [pc, #144]	; (801bdf4 <__swsetup_r+0xd8>)
 801bd64:	429c      	cmp	r4, r3
 801bd66:	bf08      	it	eq
 801bd68:	68ec      	ldreq	r4, [r5, #12]
 801bd6a:	e7e6      	b.n	801bd3a <__swsetup_r+0x1e>
 801bd6c:	0758      	lsls	r0, r3, #29
 801bd6e:	d512      	bpl.n	801bd96 <__swsetup_r+0x7a>
 801bd70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bd72:	b141      	cbz	r1, 801bd86 <__swsetup_r+0x6a>
 801bd74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bd78:	4299      	cmp	r1, r3
 801bd7a:	d002      	beq.n	801bd82 <__swsetup_r+0x66>
 801bd7c:	4630      	mov	r0, r6
 801bd7e:	f7ff fc17 	bl	801b5b0 <_free_r>
 801bd82:	2300      	movs	r3, #0
 801bd84:	6363      	str	r3, [r4, #52]	; 0x34
 801bd86:	89a3      	ldrh	r3, [r4, #12]
 801bd88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bd8c:	81a3      	strh	r3, [r4, #12]
 801bd8e:	2300      	movs	r3, #0
 801bd90:	6063      	str	r3, [r4, #4]
 801bd92:	6923      	ldr	r3, [r4, #16]
 801bd94:	6023      	str	r3, [r4, #0]
 801bd96:	89a3      	ldrh	r3, [r4, #12]
 801bd98:	f043 0308 	orr.w	r3, r3, #8
 801bd9c:	81a3      	strh	r3, [r4, #12]
 801bd9e:	6923      	ldr	r3, [r4, #16]
 801bda0:	b94b      	cbnz	r3, 801bdb6 <__swsetup_r+0x9a>
 801bda2:	89a3      	ldrh	r3, [r4, #12]
 801bda4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bda8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bdac:	d003      	beq.n	801bdb6 <__swsetup_r+0x9a>
 801bdae:	4621      	mov	r1, r4
 801bdb0:	4630      	mov	r0, r6
 801bdb2:	f000 f967 	bl	801c084 <__smakebuf_r>
 801bdb6:	89a0      	ldrh	r0, [r4, #12]
 801bdb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bdbc:	f010 0301 	ands.w	r3, r0, #1
 801bdc0:	d00a      	beq.n	801bdd8 <__swsetup_r+0xbc>
 801bdc2:	2300      	movs	r3, #0
 801bdc4:	60a3      	str	r3, [r4, #8]
 801bdc6:	6963      	ldr	r3, [r4, #20]
 801bdc8:	425b      	negs	r3, r3
 801bdca:	61a3      	str	r3, [r4, #24]
 801bdcc:	6923      	ldr	r3, [r4, #16]
 801bdce:	b943      	cbnz	r3, 801bde2 <__swsetup_r+0xc6>
 801bdd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bdd4:	d1ba      	bne.n	801bd4c <__swsetup_r+0x30>
 801bdd6:	bd70      	pop	{r4, r5, r6, pc}
 801bdd8:	0781      	lsls	r1, r0, #30
 801bdda:	bf58      	it	pl
 801bddc:	6963      	ldrpl	r3, [r4, #20]
 801bdde:	60a3      	str	r3, [r4, #8]
 801bde0:	e7f4      	b.n	801bdcc <__swsetup_r+0xb0>
 801bde2:	2000      	movs	r0, #0
 801bde4:	e7f7      	b.n	801bdd6 <__swsetup_r+0xba>
 801bde6:	bf00      	nop
 801bde8:	20000c10 	.word	0x20000c10
 801bdec:	0801df80 	.word	0x0801df80
 801bdf0:	0801dfa0 	.word	0x0801dfa0
 801bdf4:	0801df60 	.word	0x0801df60

0801bdf8 <__assert_func>:
 801bdf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bdfa:	4614      	mov	r4, r2
 801bdfc:	461a      	mov	r2, r3
 801bdfe:	4b09      	ldr	r3, [pc, #36]	; (801be24 <__assert_func+0x2c>)
 801be00:	681b      	ldr	r3, [r3, #0]
 801be02:	4605      	mov	r5, r0
 801be04:	68d8      	ldr	r0, [r3, #12]
 801be06:	b14c      	cbz	r4, 801be1c <__assert_func+0x24>
 801be08:	4b07      	ldr	r3, [pc, #28]	; (801be28 <__assert_func+0x30>)
 801be0a:	9100      	str	r1, [sp, #0]
 801be0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801be10:	4906      	ldr	r1, [pc, #24]	; (801be2c <__assert_func+0x34>)
 801be12:	462b      	mov	r3, r5
 801be14:	f000 f8ec 	bl	801bff0 <fiprintf>
 801be18:	f000 fe0a 	bl	801ca30 <abort>
 801be1c:	4b04      	ldr	r3, [pc, #16]	; (801be30 <__assert_func+0x38>)
 801be1e:	461c      	mov	r4, r3
 801be20:	e7f3      	b.n	801be0a <__assert_func+0x12>
 801be22:	bf00      	nop
 801be24:	20000c10 	.word	0x20000c10
 801be28:	0801e036 	.word	0x0801e036
 801be2c:	0801e043 	.word	0x0801e043
 801be30:	0801e071 	.word	0x0801e071

0801be34 <_close_r>:
 801be34:	b538      	push	{r3, r4, r5, lr}
 801be36:	4d06      	ldr	r5, [pc, #24]	; (801be50 <_close_r+0x1c>)
 801be38:	2300      	movs	r3, #0
 801be3a:	4604      	mov	r4, r0
 801be3c:	4608      	mov	r0, r1
 801be3e:	602b      	str	r3, [r5, #0]
 801be40:	f7e6 fa9e 	bl	8002380 <_close>
 801be44:	1c43      	adds	r3, r0, #1
 801be46:	d102      	bne.n	801be4e <_close_r+0x1a>
 801be48:	682b      	ldr	r3, [r5, #0]
 801be4a:	b103      	cbz	r3, 801be4e <_close_r+0x1a>
 801be4c:	6023      	str	r3, [r4, #0]
 801be4e:	bd38      	pop	{r3, r4, r5, pc}
 801be50:	2001ccf4 	.word	0x2001ccf4

0801be54 <__env_lock>:
 801be54:	4801      	ldr	r0, [pc, #4]	; (801be5c <__env_lock+0x8>)
 801be56:	f7ff bb6c 	b.w	801b532 <__retarget_lock_acquire_recursive>
 801be5a:	bf00      	nop
 801be5c:	2001cce8 	.word	0x2001cce8

0801be60 <__env_unlock>:
 801be60:	4801      	ldr	r0, [pc, #4]	; (801be68 <__env_unlock+0x8>)
 801be62:	f7ff bb67 	b.w	801b534 <__retarget_lock_release_recursive>
 801be66:	bf00      	nop
 801be68:	2001cce8 	.word	0x2001cce8

0801be6c <__sflush_r>:
 801be6c:	898a      	ldrh	r2, [r1, #12]
 801be6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be72:	4605      	mov	r5, r0
 801be74:	0710      	lsls	r0, r2, #28
 801be76:	460c      	mov	r4, r1
 801be78:	d458      	bmi.n	801bf2c <__sflush_r+0xc0>
 801be7a:	684b      	ldr	r3, [r1, #4]
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	dc05      	bgt.n	801be8c <__sflush_r+0x20>
 801be80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801be82:	2b00      	cmp	r3, #0
 801be84:	dc02      	bgt.n	801be8c <__sflush_r+0x20>
 801be86:	2000      	movs	r0, #0
 801be88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801be8e:	2e00      	cmp	r6, #0
 801be90:	d0f9      	beq.n	801be86 <__sflush_r+0x1a>
 801be92:	2300      	movs	r3, #0
 801be94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801be98:	682f      	ldr	r7, [r5, #0]
 801be9a:	602b      	str	r3, [r5, #0]
 801be9c:	d032      	beq.n	801bf04 <__sflush_r+0x98>
 801be9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bea0:	89a3      	ldrh	r3, [r4, #12]
 801bea2:	075a      	lsls	r2, r3, #29
 801bea4:	d505      	bpl.n	801beb2 <__sflush_r+0x46>
 801bea6:	6863      	ldr	r3, [r4, #4]
 801bea8:	1ac0      	subs	r0, r0, r3
 801beaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801beac:	b10b      	cbz	r3, 801beb2 <__sflush_r+0x46>
 801beae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801beb0:	1ac0      	subs	r0, r0, r3
 801beb2:	2300      	movs	r3, #0
 801beb4:	4602      	mov	r2, r0
 801beb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801beb8:	6a21      	ldr	r1, [r4, #32]
 801beba:	4628      	mov	r0, r5
 801bebc:	47b0      	blx	r6
 801bebe:	1c43      	adds	r3, r0, #1
 801bec0:	89a3      	ldrh	r3, [r4, #12]
 801bec2:	d106      	bne.n	801bed2 <__sflush_r+0x66>
 801bec4:	6829      	ldr	r1, [r5, #0]
 801bec6:	291d      	cmp	r1, #29
 801bec8:	d82c      	bhi.n	801bf24 <__sflush_r+0xb8>
 801beca:	4a2a      	ldr	r2, [pc, #168]	; (801bf74 <__sflush_r+0x108>)
 801becc:	40ca      	lsrs	r2, r1
 801bece:	07d6      	lsls	r6, r2, #31
 801bed0:	d528      	bpl.n	801bf24 <__sflush_r+0xb8>
 801bed2:	2200      	movs	r2, #0
 801bed4:	6062      	str	r2, [r4, #4]
 801bed6:	04d9      	lsls	r1, r3, #19
 801bed8:	6922      	ldr	r2, [r4, #16]
 801beda:	6022      	str	r2, [r4, #0]
 801bedc:	d504      	bpl.n	801bee8 <__sflush_r+0x7c>
 801bede:	1c42      	adds	r2, r0, #1
 801bee0:	d101      	bne.n	801bee6 <__sflush_r+0x7a>
 801bee2:	682b      	ldr	r3, [r5, #0]
 801bee4:	b903      	cbnz	r3, 801bee8 <__sflush_r+0x7c>
 801bee6:	6560      	str	r0, [r4, #84]	; 0x54
 801bee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801beea:	602f      	str	r7, [r5, #0]
 801beec:	2900      	cmp	r1, #0
 801beee:	d0ca      	beq.n	801be86 <__sflush_r+0x1a>
 801bef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bef4:	4299      	cmp	r1, r3
 801bef6:	d002      	beq.n	801befe <__sflush_r+0x92>
 801bef8:	4628      	mov	r0, r5
 801befa:	f7ff fb59 	bl	801b5b0 <_free_r>
 801befe:	2000      	movs	r0, #0
 801bf00:	6360      	str	r0, [r4, #52]	; 0x34
 801bf02:	e7c1      	b.n	801be88 <__sflush_r+0x1c>
 801bf04:	6a21      	ldr	r1, [r4, #32]
 801bf06:	2301      	movs	r3, #1
 801bf08:	4628      	mov	r0, r5
 801bf0a:	47b0      	blx	r6
 801bf0c:	1c41      	adds	r1, r0, #1
 801bf0e:	d1c7      	bne.n	801bea0 <__sflush_r+0x34>
 801bf10:	682b      	ldr	r3, [r5, #0]
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d0c4      	beq.n	801bea0 <__sflush_r+0x34>
 801bf16:	2b1d      	cmp	r3, #29
 801bf18:	d001      	beq.n	801bf1e <__sflush_r+0xb2>
 801bf1a:	2b16      	cmp	r3, #22
 801bf1c:	d101      	bne.n	801bf22 <__sflush_r+0xb6>
 801bf1e:	602f      	str	r7, [r5, #0]
 801bf20:	e7b1      	b.n	801be86 <__sflush_r+0x1a>
 801bf22:	89a3      	ldrh	r3, [r4, #12]
 801bf24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf28:	81a3      	strh	r3, [r4, #12]
 801bf2a:	e7ad      	b.n	801be88 <__sflush_r+0x1c>
 801bf2c:	690f      	ldr	r7, [r1, #16]
 801bf2e:	2f00      	cmp	r7, #0
 801bf30:	d0a9      	beq.n	801be86 <__sflush_r+0x1a>
 801bf32:	0793      	lsls	r3, r2, #30
 801bf34:	680e      	ldr	r6, [r1, #0]
 801bf36:	bf08      	it	eq
 801bf38:	694b      	ldreq	r3, [r1, #20]
 801bf3a:	600f      	str	r7, [r1, #0]
 801bf3c:	bf18      	it	ne
 801bf3e:	2300      	movne	r3, #0
 801bf40:	eba6 0807 	sub.w	r8, r6, r7
 801bf44:	608b      	str	r3, [r1, #8]
 801bf46:	f1b8 0f00 	cmp.w	r8, #0
 801bf4a:	dd9c      	ble.n	801be86 <__sflush_r+0x1a>
 801bf4c:	6a21      	ldr	r1, [r4, #32]
 801bf4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bf50:	4643      	mov	r3, r8
 801bf52:	463a      	mov	r2, r7
 801bf54:	4628      	mov	r0, r5
 801bf56:	47b0      	blx	r6
 801bf58:	2800      	cmp	r0, #0
 801bf5a:	dc06      	bgt.n	801bf6a <__sflush_r+0xfe>
 801bf5c:	89a3      	ldrh	r3, [r4, #12]
 801bf5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf62:	81a3      	strh	r3, [r4, #12]
 801bf64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bf68:	e78e      	b.n	801be88 <__sflush_r+0x1c>
 801bf6a:	4407      	add	r7, r0
 801bf6c:	eba8 0800 	sub.w	r8, r8, r0
 801bf70:	e7e9      	b.n	801bf46 <__sflush_r+0xda>
 801bf72:	bf00      	nop
 801bf74:	20400001 	.word	0x20400001

0801bf78 <_fflush_r>:
 801bf78:	b538      	push	{r3, r4, r5, lr}
 801bf7a:	690b      	ldr	r3, [r1, #16]
 801bf7c:	4605      	mov	r5, r0
 801bf7e:	460c      	mov	r4, r1
 801bf80:	b913      	cbnz	r3, 801bf88 <_fflush_r+0x10>
 801bf82:	2500      	movs	r5, #0
 801bf84:	4628      	mov	r0, r5
 801bf86:	bd38      	pop	{r3, r4, r5, pc}
 801bf88:	b118      	cbz	r0, 801bf92 <_fflush_r+0x1a>
 801bf8a:	6983      	ldr	r3, [r0, #24]
 801bf8c:	b90b      	cbnz	r3, 801bf92 <_fflush_r+0x1a>
 801bf8e:	f7ff f957 	bl	801b240 <__sinit>
 801bf92:	4b14      	ldr	r3, [pc, #80]	; (801bfe4 <_fflush_r+0x6c>)
 801bf94:	429c      	cmp	r4, r3
 801bf96:	d11b      	bne.n	801bfd0 <_fflush_r+0x58>
 801bf98:	686c      	ldr	r4, [r5, #4]
 801bf9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d0ef      	beq.n	801bf82 <_fflush_r+0xa>
 801bfa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bfa4:	07d0      	lsls	r0, r2, #31
 801bfa6:	d404      	bmi.n	801bfb2 <_fflush_r+0x3a>
 801bfa8:	0599      	lsls	r1, r3, #22
 801bfaa:	d402      	bmi.n	801bfb2 <_fflush_r+0x3a>
 801bfac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bfae:	f7ff fac0 	bl	801b532 <__retarget_lock_acquire_recursive>
 801bfb2:	4628      	mov	r0, r5
 801bfb4:	4621      	mov	r1, r4
 801bfb6:	f7ff ff59 	bl	801be6c <__sflush_r>
 801bfba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bfbc:	07da      	lsls	r2, r3, #31
 801bfbe:	4605      	mov	r5, r0
 801bfc0:	d4e0      	bmi.n	801bf84 <_fflush_r+0xc>
 801bfc2:	89a3      	ldrh	r3, [r4, #12]
 801bfc4:	059b      	lsls	r3, r3, #22
 801bfc6:	d4dd      	bmi.n	801bf84 <_fflush_r+0xc>
 801bfc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bfca:	f7ff fab3 	bl	801b534 <__retarget_lock_release_recursive>
 801bfce:	e7d9      	b.n	801bf84 <_fflush_r+0xc>
 801bfd0:	4b05      	ldr	r3, [pc, #20]	; (801bfe8 <_fflush_r+0x70>)
 801bfd2:	429c      	cmp	r4, r3
 801bfd4:	d101      	bne.n	801bfda <_fflush_r+0x62>
 801bfd6:	68ac      	ldr	r4, [r5, #8]
 801bfd8:	e7df      	b.n	801bf9a <_fflush_r+0x22>
 801bfda:	4b04      	ldr	r3, [pc, #16]	; (801bfec <_fflush_r+0x74>)
 801bfdc:	429c      	cmp	r4, r3
 801bfde:	bf08      	it	eq
 801bfe0:	68ec      	ldreq	r4, [r5, #12]
 801bfe2:	e7da      	b.n	801bf9a <_fflush_r+0x22>
 801bfe4:	0801df80 	.word	0x0801df80
 801bfe8:	0801dfa0 	.word	0x0801dfa0
 801bfec:	0801df60 	.word	0x0801df60

0801bff0 <fiprintf>:
 801bff0:	b40e      	push	{r1, r2, r3}
 801bff2:	b503      	push	{r0, r1, lr}
 801bff4:	4601      	mov	r1, r0
 801bff6:	ab03      	add	r3, sp, #12
 801bff8:	4805      	ldr	r0, [pc, #20]	; (801c010 <fiprintf+0x20>)
 801bffa:	f853 2b04 	ldr.w	r2, [r3], #4
 801bffe:	6800      	ldr	r0, [r0, #0]
 801c000:	9301      	str	r3, [sp, #4]
 801c002:	f000 fa3f 	bl	801c484 <_vfiprintf_r>
 801c006:	b002      	add	sp, #8
 801c008:	f85d eb04 	ldr.w	lr, [sp], #4
 801c00c:	b003      	add	sp, #12
 801c00e:	4770      	bx	lr
 801c010:	20000c10 	.word	0x20000c10

0801c014 <_lseek_r>:
 801c014:	b538      	push	{r3, r4, r5, lr}
 801c016:	4d07      	ldr	r5, [pc, #28]	; (801c034 <_lseek_r+0x20>)
 801c018:	4604      	mov	r4, r0
 801c01a:	4608      	mov	r0, r1
 801c01c:	4611      	mov	r1, r2
 801c01e:	2200      	movs	r2, #0
 801c020:	602a      	str	r2, [r5, #0]
 801c022:	461a      	mov	r2, r3
 801c024:	f7e6 f9d3 	bl	80023ce <_lseek>
 801c028:	1c43      	adds	r3, r0, #1
 801c02a:	d102      	bne.n	801c032 <_lseek_r+0x1e>
 801c02c:	682b      	ldr	r3, [r5, #0]
 801c02e:	b103      	cbz	r3, 801c032 <_lseek_r+0x1e>
 801c030:	6023      	str	r3, [r4, #0]
 801c032:	bd38      	pop	{r3, r4, r5, pc}
 801c034:	2001ccf4 	.word	0x2001ccf4

0801c038 <__swhatbuf_r>:
 801c038:	b570      	push	{r4, r5, r6, lr}
 801c03a:	460e      	mov	r6, r1
 801c03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c040:	2900      	cmp	r1, #0
 801c042:	b096      	sub	sp, #88	; 0x58
 801c044:	4614      	mov	r4, r2
 801c046:	461d      	mov	r5, r3
 801c048:	da08      	bge.n	801c05c <__swhatbuf_r+0x24>
 801c04a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c04e:	2200      	movs	r2, #0
 801c050:	602a      	str	r2, [r5, #0]
 801c052:	061a      	lsls	r2, r3, #24
 801c054:	d410      	bmi.n	801c078 <__swhatbuf_r+0x40>
 801c056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c05a:	e00e      	b.n	801c07a <__swhatbuf_r+0x42>
 801c05c:	466a      	mov	r2, sp
 801c05e:	f000 fcef 	bl	801ca40 <_fstat_r>
 801c062:	2800      	cmp	r0, #0
 801c064:	dbf1      	blt.n	801c04a <__swhatbuf_r+0x12>
 801c066:	9a01      	ldr	r2, [sp, #4]
 801c068:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c06c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c070:	425a      	negs	r2, r3
 801c072:	415a      	adcs	r2, r3
 801c074:	602a      	str	r2, [r5, #0]
 801c076:	e7ee      	b.n	801c056 <__swhatbuf_r+0x1e>
 801c078:	2340      	movs	r3, #64	; 0x40
 801c07a:	2000      	movs	r0, #0
 801c07c:	6023      	str	r3, [r4, #0]
 801c07e:	b016      	add	sp, #88	; 0x58
 801c080:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c084 <__smakebuf_r>:
 801c084:	898b      	ldrh	r3, [r1, #12]
 801c086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c088:	079d      	lsls	r5, r3, #30
 801c08a:	4606      	mov	r6, r0
 801c08c:	460c      	mov	r4, r1
 801c08e:	d507      	bpl.n	801c0a0 <__smakebuf_r+0x1c>
 801c090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c094:	6023      	str	r3, [r4, #0]
 801c096:	6123      	str	r3, [r4, #16]
 801c098:	2301      	movs	r3, #1
 801c09a:	6163      	str	r3, [r4, #20]
 801c09c:	b002      	add	sp, #8
 801c09e:	bd70      	pop	{r4, r5, r6, pc}
 801c0a0:	ab01      	add	r3, sp, #4
 801c0a2:	466a      	mov	r2, sp
 801c0a4:	f7ff ffc8 	bl	801c038 <__swhatbuf_r>
 801c0a8:	9900      	ldr	r1, [sp, #0]
 801c0aa:	4605      	mov	r5, r0
 801c0ac:	4630      	mov	r0, r6
 801c0ae:	f7ff faeb 	bl	801b688 <_malloc_r>
 801c0b2:	b948      	cbnz	r0, 801c0c8 <__smakebuf_r+0x44>
 801c0b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c0b8:	059a      	lsls	r2, r3, #22
 801c0ba:	d4ef      	bmi.n	801c09c <__smakebuf_r+0x18>
 801c0bc:	f023 0303 	bic.w	r3, r3, #3
 801c0c0:	f043 0302 	orr.w	r3, r3, #2
 801c0c4:	81a3      	strh	r3, [r4, #12]
 801c0c6:	e7e3      	b.n	801c090 <__smakebuf_r+0xc>
 801c0c8:	4b0d      	ldr	r3, [pc, #52]	; (801c100 <__smakebuf_r+0x7c>)
 801c0ca:	62b3      	str	r3, [r6, #40]	; 0x28
 801c0cc:	89a3      	ldrh	r3, [r4, #12]
 801c0ce:	6020      	str	r0, [r4, #0]
 801c0d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c0d4:	81a3      	strh	r3, [r4, #12]
 801c0d6:	9b00      	ldr	r3, [sp, #0]
 801c0d8:	6163      	str	r3, [r4, #20]
 801c0da:	9b01      	ldr	r3, [sp, #4]
 801c0dc:	6120      	str	r0, [r4, #16]
 801c0de:	b15b      	cbz	r3, 801c0f8 <__smakebuf_r+0x74>
 801c0e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c0e4:	4630      	mov	r0, r6
 801c0e6:	f000 fcbd 	bl	801ca64 <_isatty_r>
 801c0ea:	b128      	cbz	r0, 801c0f8 <__smakebuf_r+0x74>
 801c0ec:	89a3      	ldrh	r3, [r4, #12]
 801c0ee:	f023 0303 	bic.w	r3, r3, #3
 801c0f2:	f043 0301 	orr.w	r3, r3, #1
 801c0f6:	81a3      	strh	r3, [r4, #12]
 801c0f8:	89a0      	ldrh	r0, [r4, #12]
 801c0fa:	4305      	orrs	r5, r0
 801c0fc:	81a5      	strh	r5, [r4, #12]
 801c0fe:	e7cd      	b.n	801c09c <__smakebuf_r+0x18>
 801c100:	0801b1d9 	.word	0x0801b1d9

0801c104 <__malloc_lock>:
 801c104:	4801      	ldr	r0, [pc, #4]	; (801c10c <__malloc_lock+0x8>)
 801c106:	f7ff ba14 	b.w	801b532 <__retarget_lock_acquire_recursive>
 801c10a:	bf00      	nop
 801c10c:	2001cce9 	.word	0x2001cce9

0801c110 <__malloc_unlock>:
 801c110:	4801      	ldr	r0, [pc, #4]	; (801c118 <__malloc_unlock+0x8>)
 801c112:	f7ff ba0f 	b.w	801b534 <__retarget_lock_release_recursive>
 801c116:	bf00      	nop
 801c118:	2001cce9 	.word	0x2001cce9

0801c11c <_realloc_r>:
 801c11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c120:	4680      	mov	r8, r0
 801c122:	4614      	mov	r4, r2
 801c124:	460e      	mov	r6, r1
 801c126:	b921      	cbnz	r1, 801c132 <_realloc_r+0x16>
 801c128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c12c:	4611      	mov	r1, r2
 801c12e:	f7ff baab 	b.w	801b688 <_malloc_r>
 801c132:	b92a      	cbnz	r2, 801c140 <_realloc_r+0x24>
 801c134:	f7ff fa3c 	bl	801b5b0 <_free_r>
 801c138:	4625      	mov	r5, r4
 801c13a:	4628      	mov	r0, r5
 801c13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c140:	f000 fcba 	bl	801cab8 <_malloc_usable_size_r>
 801c144:	4284      	cmp	r4, r0
 801c146:	4607      	mov	r7, r0
 801c148:	d802      	bhi.n	801c150 <_realloc_r+0x34>
 801c14a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c14e:	d812      	bhi.n	801c176 <_realloc_r+0x5a>
 801c150:	4621      	mov	r1, r4
 801c152:	4640      	mov	r0, r8
 801c154:	f7ff fa98 	bl	801b688 <_malloc_r>
 801c158:	4605      	mov	r5, r0
 801c15a:	2800      	cmp	r0, #0
 801c15c:	d0ed      	beq.n	801c13a <_realloc_r+0x1e>
 801c15e:	42bc      	cmp	r4, r7
 801c160:	4622      	mov	r2, r4
 801c162:	4631      	mov	r1, r6
 801c164:	bf28      	it	cs
 801c166:	463a      	movcs	r2, r7
 801c168:	f7ff f9f6 	bl	801b558 <memcpy>
 801c16c:	4631      	mov	r1, r6
 801c16e:	4640      	mov	r0, r8
 801c170:	f7ff fa1e 	bl	801b5b0 <_free_r>
 801c174:	e7e1      	b.n	801c13a <_realloc_r+0x1e>
 801c176:	4635      	mov	r5, r6
 801c178:	e7df      	b.n	801c13a <_realloc_r+0x1e>

0801c17a <__ssputs_r>:
 801c17a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c17e:	688e      	ldr	r6, [r1, #8]
 801c180:	429e      	cmp	r6, r3
 801c182:	4682      	mov	sl, r0
 801c184:	460c      	mov	r4, r1
 801c186:	4690      	mov	r8, r2
 801c188:	461f      	mov	r7, r3
 801c18a:	d838      	bhi.n	801c1fe <__ssputs_r+0x84>
 801c18c:	898a      	ldrh	r2, [r1, #12]
 801c18e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c192:	d032      	beq.n	801c1fa <__ssputs_r+0x80>
 801c194:	6825      	ldr	r5, [r4, #0]
 801c196:	6909      	ldr	r1, [r1, #16]
 801c198:	eba5 0901 	sub.w	r9, r5, r1
 801c19c:	6965      	ldr	r5, [r4, #20]
 801c19e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c1a6:	3301      	adds	r3, #1
 801c1a8:	444b      	add	r3, r9
 801c1aa:	106d      	asrs	r5, r5, #1
 801c1ac:	429d      	cmp	r5, r3
 801c1ae:	bf38      	it	cc
 801c1b0:	461d      	movcc	r5, r3
 801c1b2:	0553      	lsls	r3, r2, #21
 801c1b4:	d531      	bpl.n	801c21a <__ssputs_r+0xa0>
 801c1b6:	4629      	mov	r1, r5
 801c1b8:	f7ff fa66 	bl	801b688 <_malloc_r>
 801c1bc:	4606      	mov	r6, r0
 801c1be:	b950      	cbnz	r0, 801c1d6 <__ssputs_r+0x5c>
 801c1c0:	230c      	movs	r3, #12
 801c1c2:	f8ca 3000 	str.w	r3, [sl]
 801c1c6:	89a3      	ldrh	r3, [r4, #12]
 801c1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c1cc:	81a3      	strh	r3, [r4, #12]
 801c1ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1d6:	6921      	ldr	r1, [r4, #16]
 801c1d8:	464a      	mov	r2, r9
 801c1da:	f7ff f9bd 	bl	801b558 <memcpy>
 801c1de:	89a3      	ldrh	r3, [r4, #12]
 801c1e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c1e8:	81a3      	strh	r3, [r4, #12]
 801c1ea:	6126      	str	r6, [r4, #16]
 801c1ec:	6165      	str	r5, [r4, #20]
 801c1ee:	444e      	add	r6, r9
 801c1f0:	eba5 0509 	sub.w	r5, r5, r9
 801c1f4:	6026      	str	r6, [r4, #0]
 801c1f6:	60a5      	str	r5, [r4, #8]
 801c1f8:	463e      	mov	r6, r7
 801c1fa:	42be      	cmp	r6, r7
 801c1fc:	d900      	bls.n	801c200 <__ssputs_r+0x86>
 801c1fe:	463e      	mov	r6, r7
 801c200:	6820      	ldr	r0, [r4, #0]
 801c202:	4632      	mov	r2, r6
 801c204:	4641      	mov	r1, r8
 801c206:	f000 fc3d 	bl	801ca84 <memmove>
 801c20a:	68a3      	ldr	r3, [r4, #8]
 801c20c:	1b9b      	subs	r3, r3, r6
 801c20e:	60a3      	str	r3, [r4, #8]
 801c210:	6823      	ldr	r3, [r4, #0]
 801c212:	4433      	add	r3, r6
 801c214:	6023      	str	r3, [r4, #0]
 801c216:	2000      	movs	r0, #0
 801c218:	e7db      	b.n	801c1d2 <__ssputs_r+0x58>
 801c21a:	462a      	mov	r2, r5
 801c21c:	f7ff ff7e 	bl	801c11c <_realloc_r>
 801c220:	4606      	mov	r6, r0
 801c222:	2800      	cmp	r0, #0
 801c224:	d1e1      	bne.n	801c1ea <__ssputs_r+0x70>
 801c226:	6921      	ldr	r1, [r4, #16]
 801c228:	4650      	mov	r0, sl
 801c22a:	f7ff f9c1 	bl	801b5b0 <_free_r>
 801c22e:	e7c7      	b.n	801c1c0 <__ssputs_r+0x46>

0801c230 <_svfiprintf_r>:
 801c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c234:	4698      	mov	r8, r3
 801c236:	898b      	ldrh	r3, [r1, #12]
 801c238:	061b      	lsls	r3, r3, #24
 801c23a:	b09d      	sub	sp, #116	; 0x74
 801c23c:	4607      	mov	r7, r0
 801c23e:	460d      	mov	r5, r1
 801c240:	4614      	mov	r4, r2
 801c242:	d50e      	bpl.n	801c262 <_svfiprintf_r+0x32>
 801c244:	690b      	ldr	r3, [r1, #16]
 801c246:	b963      	cbnz	r3, 801c262 <_svfiprintf_r+0x32>
 801c248:	2140      	movs	r1, #64	; 0x40
 801c24a:	f7ff fa1d 	bl	801b688 <_malloc_r>
 801c24e:	6028      	str	r0, [r5, #0]
 801c250:	6128      	str	r0, [r5, #16]
 801c252:	b920      	cbnz	r0, 801c25e <_svfiprintf_r+0x2e>
 801c254:	230c      	movs	r3, #12
 801c256:	603b      	str	r3, [r7, #0]
 801c258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c25c:	e0d1      	b.n	801c402 <_svfiprintf_r+0x1d2>
 801c25e:	2340      	movs	r3, #64	; 0x40
 801c260:	616b      	str	r3, [r5, #20]
 801c262:	2300      	movs	r3, #0
 801c264:	9309      	str	r3, [sp, #36]	; 0x24
 801c266:	2320      	movs	r3, #32
 801c268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c26c:	f8cd 800c 	str.w	r8, [sp, #12]
 801c270:	2330      	movs	r3, #48	; 0x30
 801c272:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c41c <_svfiprintf_r+0x1ec>
 801c276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c27a:	f04f 0901 	mov.w	r9, #1
 801c27e:	4623      	mov	r3, r4
 801c280:	469a      	mov	sl, r3
 801c282:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c286:	b10a      	cbz	r2, 801c28c <_svfiprintf_r+0x5c>
 801c288:	2a25      	cmp	r2, #37	; 0x25
 801c28a:	d1f9      	bne.n	801c280 <_svfiprintf_r+0x50>
 801c28c:	ebba 0b04 	subs.w	fp, sl, r4
 801c290:	d00b      	beq.n	801c2aa <_svfiprintf_r+0x7a>
 801c292:	465b      	mov	r3, fp
 801c294:	4622      	mov	r2, r4
 801c296:	4629      	mov	r1, r5
 801c298:	4638      	mov	r0, r7
 801c29a:	f7ff ff6e 	bl	801c17a <__ssputs_r>
 801c29e:	3001      	adds	r0, #1
 801c2a0:	f000 80aa 	beq.w	801c3f8 <_svfiprintf_r+0x1c8>
 801c2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c2a6:	445a      	add	r2, fp
 801c2a8:	9209      	str	r2, [sp, #36]	; 0x24
 801c2aa:	f89a 3000 	ldrb.w	r3, [sl]
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	f000 80a2 	beq.w	801c3f8 <_svfiprintf_r+0x1c8>
 801c2b4:	2300      	movs	r3, #0
 801c2b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c2ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c2be:	f10a 0a01 	add.w	sl, sl, #1
 801c2c2:	9304      	str	r3, [sp, #16]
 801c2c4:	9307      	str	r3, [sp, #28]
 801c2c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c2ca:	931a      	str	r3, [sp, #104]	; 0x68
 801c2cc:	4654      	mov	r4, sl
 801c2ce:	2205      	movs	r2, #5
 801c2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2d4:	4851      	ldr	r0, [pc, #324]	; (801c41c <_svfiprintf_r+0x1ec>)
 801c2d6:	f7e3 ff93 	bl	8000200 <memchr>
 801c2da:	9a04      	ldr	r2, [sp, #16]
 801c2dc:	b9d8      	cbnz	r0, 801c316 <_svfiprintf_r+0xe6>
 801c2de:	06d0      	lsls	r0, r2, #27
 801c2e0:	bf44      	itt	mi
 801c2e2:	2320      	movmi	r3, #32
 801c2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c2e8:	0711      	lsls	r1, r2, #28
 801c2ea:	bf44      	itt	mi
 801c2ec:	232b      	movmi	r3, #43	; 0x2b
 801c2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c2f2:	f89a 3000 	ldrb.w	r3, [sl]
 801c2f6:	2b2a      	cmp	r3, #42	; 0x2a
 801c2f8:	d015      	beq.n	801c326 <_svfiprintf_r+0xf6>
 801c2fa:	9a07      	ldr	r2, [sp, #28]
 801c2fc:	4654      	mov	r4, sl
 801c2fe:	2000      	movs	r0, #0
 801c300:	f04f 0c0a 	mov.w	ip, #10
 801c304:	4621      	mov	r1, r4
 801c306:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c30a:	3b30      	subs	r3, #48	; 0x30
 801c30c:	2b09      	cmp	r3, #9
 801c30e:	d94e      	bls.n	801c3ae <_svfiprintf_r+0x17e>
 801c310:	b1b0      	cbz	r0, 801c340 <_svfiprintf_r+0x110>
 801c312:	9207      	str	r2, [sp, #28]
 801c314:	e014      	b.n	801c340 <_svfiprintf_r+0x110>
 801c316:	eba0 0308 	sub.w	r3, r0, r8
 801c31a:	fa09 f303 	lsl.w	r3, r9, r3
 801c31e:	4313      	orrs	r3, r2
 801c320:	9304      	str	r3, [sp, #16]
 801c322:	46a2      	mov	sl, r4
 801c324:	e7d2      	b.n	801c2cc <_svfiprintf_r+0x9c>
 801c326:	9b03      	ldr	r3, [sp, #12]
 801c328:	1d19      	adds	r1, r3, #4
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	9103      	str	r1, [sp, #12]
 801c32e:	2b00      	cmp	r3, #0
 801c330:	bfbb      	ittet	lt
 801c332:	425b      	neglt	r3, r3
 801c334:	f042 0202 	orrlt.w	r2, r2, #2
 801c338:	9307      	strge	r3, [sp, #28]
 801c33a:	9307      	strlt	r3, [sp, #28]
 801c33c:	bfb8      	it	lt
 801c33e:	9204      	strlt	r2, [sp, #16]
 801c340:	7823      	ldrb	r3, [r4, #0]
 801c342:	2b2e      	cmp	r3, #46	; 0x2e
 801c344:	d10c      	bne.n	801c360 <_svfiprintf_r+0x130>
 801c346:	7863      	ldrb	r3, [r4, #1]
 801c348:	2b2a      	cmp	r3, #42	; 0x2a
 801c34a:	d135      	bne.n	801c3b8 <_svfiprintf_r+0x188>
 801c34c:	9b03      	ldr	r3, [sp, #12]
 801c34e:	1d1a      	adds	r2, r3, #4
 801c350:	681b      	ldr	r3, [r3, #0]
 801c352:	9203      	str	r2, [sp, #12]
 801c354:	2b00      	cmp	r3, #0
 801c356:	bfb8      	it	lt
 801c358:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c35c:	3402      	adds	r4, #2
 801c35e:	9305      	str	r3, [sp, #20]
 801c360:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c42c <_svfiprintf_r+0x1fc>
 801c364:	7821      	ldrb	r1, [r4, #0]
 801c366:	2203      	movs	r2, #3
 801c368:	4650      	mov	r0, sl
 801c36a:	f7e3 ff49 	bl	8000200 <memchr>
 801c36e:	b140      	cbz	r0, 801c382 <_svfiprintf_r+0x152>
 801c370:	2340      	movs	r3, #64	; 0x40
 801c372:	eba0 000a 	sub.w	r0, r0, sl
 801c376:	fa03 f000 	lsl.w	r0, r3, r0
 801c37a:	9b04      	ldr	r3, [sp, #16]
 801c37c:	4303      	orrs	r3, r0
 801c37e:	3401      	adds	r4, #1
 801c380:	9304      	str	r3, [sp, #16]
 801c382:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c386:	4826      	ldr	r0, [pc, #152]	; (801c420 <_svfiprintf_r+0x1f0>)
 801c388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c38c:	2206      	movs	r2, #6
 801c38e:	f7e3 ff37 	bl	8000200 <memchr>
 801c392:	2800      	cmp	r0, #0
 801c394:	d038      	beq.n	801c408 <_svfiprintf_r+0x1d8>
 801c396:	4b23      	ldr	r3, [pc, #140]	; (801c424 <_svfiprintf_r+0x1f4>)
 801c398:	bb1b      	cbnz	r3, 801c3e2 <_svfiprintf_r+0x1b2>
 801c39a:	9b03      	ldr	r3, [sp, #12]
 801c39c:	3307      	adds	r3, #7
 801c39e:	f023 0307 	bic.w	r3, r3, #7
 801c3a2:	3308      	adds	r3, #8
 801c3a4:	9303      	str	r3, [sp, #12]
 801c3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3a8:	4433      	add	r3, r6
 801c3aa:	9309      	str	r3, [sp, #36]	; 0x24
 801c3ac:	e767      	b.n	801c27e <_svfiprintf_r+0x4e>
 801c3ae:	fb0c 3202 	mla	r2, ip, r2, r3
 801c3b2:	460c      	mov	r4, r1
 801c3b4:	2001      	movs	r0, #1
 801c3b6:	e7a5      	b.n	801c304 <_svfiprintf_r+0xd4>
 801c3b8:	2300      	movs	r3, #0
 801c3ba:	3401      	adds	r4, #1
 801c3bc:	9305      	str	r3, [sp, #20]
 801c3be:	4619      	mov	r1, r3
 801c3c0:	f04f 0c0a 	mov.w	ip, #10
 801c3c4:	4620      	mov	r0, r4
 801c3c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c3ca:	3a30      	subs	r2, #48	; 0x30
 801c3cc:	2a09      	cmp	r2, #9
 801c3ce:	d903      	bls.n	801c3d8 <_svfiprintf_r+0x1a8>
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d0c5      	beq.n	801c360 <_svfiprintf_r+0x130>
 801c3d4:	9105      	str	r1, [sp, #20]
 801c3d6:	e7c3      	b.n	801c360 <_svfiprintf_r+0x130>
 801c3d8:	fb0c 2101 	mla	r1, ip, r1, r2
 801c3dc:	4604      	mov	r4, r0
 801c3de:	2301      	movs	r3, #1
 801c3e0:	e7f0      	b.n	801c3c4 <_svfiprintf_r+0x194>
 801c3e2:	ab03      	add	r3, sp, #12
 801c3e4:	9300      	str	r3, [sp, #0]
 801c3e6:	462a      	mov	r2, r5
 801c3e8:	4b0f      	ldr	r3, [pc, #60]	; (801c428 <_svfiprintf_r+0x1f8>)
 801c3ea:	a904      	add	r1, sp, #16
 801c3ec:	4638      	mov	r0, r7
 801c3ee:	f3af 8000 	nop.w
 801c3f2:	1c42      	adds	r2, r0, #1
 801c3f4:	4606      	mov	r6, r0
 801c3f6:	d1d6      	bne.n	801c3a6 <_svfiprintf_r+0x176>
 801c3f8:	89ab      	ldrh	r3, [r5, #12]
 801c3fa:	065b      	lsls	r3, r3, #25
 801c3fc:	f53f af2c 	bmi.w	801c258 <_svfiprintf_r+0x28>
 801c400:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c402:	b01d      	add	sp, #116	; 0x74
 801c404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c408:	ab03      	add	r3, sp, #12
 801c40a:	9300      	str	r3, [sp, #0]
 801c40c:	462a      	mov	r2, r5
 801c40e:	4b06      	ldr	r3, [pc, #24]	; (801c428 <_svfiprintf_r+0x1f8>)
 801c410:	a904      	add	r1, sp, #16
 801c412:	4638      	mov	r0, r7
 801c414:	f000 f9d4 	bl	801c7c0 <_printf_i>
 801c418:	e7eb      	b.n	801c3f2 <_svfiprintf_r+0x1c2>
 801c41a:	bf00      	nop
 801c41c:	0801e072 	.word	0x0801e072
 801c420:	0801e07c 	.word	0x0801e07c
 801c424:	00000000 	.word	0x00000000
 801c428:	0801c17b 	.word	0x0801c17b
 801c42c:	0801e078 	.word	0x0801e078

0801c430 <__sfputc_r>:
 801c430:	6893      	ldr	r3, [r2, #8]
 801c432:	3b01      	subs	r3, #1
 801c434:	2b00      	cmp	r3, #0
 801c436:	b410      	push	{r4}
 801c438:	6093      	str	r3, [r2, #8]
 801c43a:	da08      	bge.n	801c44e <__sfputc_r+0x1e>
 801c43c:	6994      	ldr	r4, [r2, #24]
 801c43e:	42a3      	cmp	r3, r4
 801c440:	db01      	blt.n	801c446 <__sfputc_r+0x16>
 801c442:	290a      	cmp	r1, #10
 801c444:	d103      	bne.n	801c44e <__sfputc_r+0x1e>
 801c446:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c44a:	f7ff bc03 	b.w	801bc54 <__swbuf_r>
 801c44e:	6813      	ldr	r3, [r2, #0]
 801c450:	1c58      	adds	r0, r3, #1
 801c452:	6010      	str	r0, [r2, #0]
 801c454:	7019      	strb	r1, [r3, #0]
 801c456:	4608      	mov	r0, r1
 801c458:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c45c:	4770      	bx	lr

0801c45e <__sfputs_r>:
 801c45e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c460:	4606      	mov	r6, r0
 801c462:	460f      	mov	r7, r1
 801c464:	4614      	mov	r4, r2
 801c466:	18d5      	adds	r5, r2, r3
 801c468:	42ac      	cmp	r4, r5
 801c46a:	d101      	bne.n	801c470 <__sfputs_r+0x12>
 801c46c:	2000      	movs	r0, #0
 801c46e:	e007      	b.n	801c480 <__sfputs_r+0x22>
 801c470:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c474:	463a      	mov	r2, r7
 801c476:	4630      	mov	r0, r6
 801c478:	f7ff ffda 	bl	801c430 <__sfputc_r>
 801c47c:	1c43      	adds	r3, r0, #1
 801c47e:	d1f3      	bne.n	801c468 <__sfputs_r+0xa>
 801c480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c484 <_vfiprintf_r>:
 801c484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c488:	460d      	mov	r5, r1
 801c48a:	b09d      	sub	sp, #116	; 0x74
 801c48c:	4614      	mov	r4, r2
 801c48e:	4698      	mov	r8, r3
 801c490:	4606      	mov	r6, r0
 801c492:	b118      	cbz	r0, 801c49c <_vfiprintf_r+0x18>
 801c494:	6983      	ldr	r3, [r0, #24]
 801c496:	b90b      	cbnz	r3, 801c49c <_vfiprintf_r+0x18>
 801c498:	f7fe fed2 	bl	801b240 <__sinit>
 801c49c:	4b89      	ldr	r3, [pc, #548]	; (801c6c4 <_vfiprintf_r+0x240>)
 801c49e:	429d      	cmp	r5, r3
 801c4a0:	d11b      	bne.n	801c4da <_vfiprintf_r+0x56>
 801c4a2:	6875      	ldr	r5, [r6, #4]
 801c4a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c4a6:	07d9      	lsls	r1, r3, #31
 801c4a8:	d405      	bmi.n	801c4b6 <_vfiprintf_r+0x32>
 801c4aa:	89ab      	ldrh	r3, [r5, #12]
 801c4ac:	059a      	lsls	r2, r3, #22
 801c4ae:	d402      	bmi.n	801c4b6 <_vfiprintf_r+0x32>
 801c4b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c4b2:	f7ff f83e 	bl	801b532 <__retarget_lock_acquire_recursive>
 801c4b6:	89ab      	ldrh	r3, [r5, #12]
 801c4b8:	071b      	lsls	r3, r3, #28
 801c4ba:	d501      	bpl.n	801c4c0 <_vfiprintf_r+0x3c>
 801c4bc:	692b      	ldr	r3, [r5, #16]
 801c4be:	b9eb      	cbnz	r3, 801c4fc <_vfiprintf_r+0x78>
 801c4c0:	4629      	mov	r1, r5
 801c4c2:	4630      	mov	r0, r6
 801c4c4:	f7ff fc2a 	bl	801bd1c <__swsetup_r>
 801c4c8:	b1c0      	cbz	r0, 801c4fc <_vfiprintf_r+0x78>
 801c4ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c4cc:	07dc      	lsls	r4, r3, #31
 801c4ce:	d50e      	bpl.n	801c4ee <_vfiprintf_r+0x6a>
 801c4d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c4d4:	b01d      	add	sp, #116	; 0x74
 801c4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4da:	4b7b      	ldr	r3, [pc, #492]	; (801c6c8 <_vfiprintf_r+0x244>)
 801c4dc:	429d      	cmp	r5, r3
 801c4de:	d101      	bne.n	801c4e4 <_vfiprintf_r+0x60>
 801c4e0:	68b5      	ldr	r5, [r6, #8]
 801c4e2:	e7df      	b.n	801c4a4 <_vfiprintf_r+0x20>
 801c4e4:	4b79      	ldr	r3, [pc, #484]	; (801c6cc <_vfiprintf_r+0x248>)
 801c4e6:	429d      	cmp	r5, r3
 801c4e8:	bf08      	it	eq
 801c4ea:	68f5      	ldreq	r5, [r6, #12]
 801c4ec:	e7da      	b.n	801c4a4 <_vfiprintf_r+0x20>
 801c4ee:	89ab      	ldrh	r3, [r5, #12]
 801c4f0:	0598      	lsls	r0, r3, #22
 801c4f2:	d4ed      	bmi.n	801c4d0 <_vfiprintf_r+0x4c>
 801c4f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c4f6:	f7ff f81d 	bl	801b534 <__retarget_lock_release_recursive>
 801c4fa:	e7e9      	b.n	801c4d0 <_vfiprintf_r+0x4c>
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	9309      	str	r3, [sp, #36]	; 0x24
 801c500:	2320      	movs	r3, #32
 801c502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c506:	f8cd 800c 	str.w	r8, [sp, #12]
 801c50a:	2330      	movs	r3, #48	; 0x30
 801c50c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c6d0 <_vfiprintf_r+0x24c>
 801c510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c514:	f04f 0901 	mov.w	r9, #1
 801c518:	4623      	mov	r3, r4
 801c51a:	469a      	mov	sl, r3
 801c51c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c520:	b10a      	cbz	r2, 801c526 <_vfiprintf_r+0xa2>
 801c522:	2a25      	cmp	r2, #37	; 0x25
 801c524:	d1f9      	bne.n	801c51a <_vfiprintf_r+0x96>
 801c526:	ebba 0b04 	subs.w	fp, sl, r4
 801c52a:	d00b      	beq.n	801c544 <_vfiprintf_r+0xc0>
 801c52c:	465b      	mov	r3, fp
 801c52e:	4622      	mov	r2, r4
 801c530:	4629      	mov	r1, r5
 801c532:	4630      	mov	r0, r6
 801c534:	f7ff ff93 	bl	801c45e <__sfputs_r>
 801c538:	3001      	adds	r0, #1
 801c53a:	f000 80aa 	beq.w	801c692 <_vfiprintf_r+0x20e>
 801c53e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c540:	445a      	add	r2, fp
 801c542:	9209      	str	r2, [sp, #36]	; 0x24
 801c544:	f89a 3000 	ldrb.w	r3, [sl]
 801c548:	2b00      	cmp	r3, #0
 801c54a:	f000 80a2 	beq.w	801c692 <_vfiprintf_r+0x20e>
 801c54e:	2300      	movs	r3, #0
 801c550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c558:	f10a 0a01 	add.w	sl, sl, #1
 801c55c:	9304      	str	r3, [sp, #16]
 801c55e:	9307      	str	r3, [sp, #28]
 801c560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c564:	931a      	str	r3, [sp, #104]	; 0x68
 801c566:	4654      	mov	r4, sl
 801c568:	2205      	movs	r2, #5
 801c56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c56e:	4858      	ldr	r0, [pc, #352]	; (801c6d0 <_vfiprintf_r+0x24c>)
 801c570:	f7e3 fe46 	bl	8000200 <memchr>
 801c574:	9a04      	ldr	r2, [sp, #16]
 801c576:	b9d8      	cbnz	r0, 801c5b0 <_vfiprintf_r+0x12c>
 801c578:	06d1      	lsls	r1, r2, #27
 801c57a:	bf44      	itt	mi
 801c57c:	2320      	movmi	r3, #32
 801c57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c582:	0713      	lsls	r3, r2, #28
 801c584:	bf44      	itt	mi
 801c586:	232b      	movmi	r3, #43	; 0x2b
 801c588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c58c:	f89a 3000 	ldrb.w	r3, [sl]
 801c590:	2b2a      	cmp	r3, #42	; 0x2a
 801c592:	d015      	beq.n	801c5c0 <_vfiprintf_r+0x13c>
 801c594:	9a07      	ldr	r2, [sp, #28]
 801c596:	4654      	mov	r4, sl
 801c598:	2000      	movs	r0, #0
 801c59a:	f04f 0c0a 	mov.w	ip, #10
 801c59e:	4621      	mov	r1, r4
 801c5a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c5a4:	3b30      	subs	r3, #48	; 0x30
 801c5a6:	2b09      	cmp	r3, #9
 801c5a8:	d94e      	bls.n	801c648 <_vfiprintf_r+0x1c4>
 801c5aa:	b1b0      	cbz	r0, 801c5da <_vfiprintf_r+0x156>
 801c5ac:	9207      	str	r2, [sp, #28]
 801c5ae:	e014      	b.n	801c5da <_vfiprintf_r+0x156>
 801c5b0:	eba0 0308 	sub.w	r3, r0, r8
 801c5b4:	fa09 f303 	lsl.w	r3, r9, r3
 801c5b8:	4313      	orrs	r3, r2
 801c5ba:	9304      	str	r3, [sp, #16]
 801c5bc:	46a2      	mov	sl, r4
 801c5be:	e7d2      	b.n	801c566 <_vfiprintf_r+0xe2>
 801c5c0:	9b03      	ldr	r3, [sp, #12]
 801c5c2:	1d19      	adds	r1, r3, #4
 801c5c4:	681b      	ldr	r3, [r3, #0]
 801c5c6:	9103      	str	r1, [sp, #12]
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	bfbb      	ittet	lt
 801c5cc:	425b      	neglt	r3, r3
 801c5ce:	f042 0202 	orrlt.w	r2, r2, #2
 801c5d2:	9307      	strge	r3, [sp, #28]
 801c5d4:	9307      	strlt	r3, [sp, #28]
 801c5d6:	bfb8      	it	lt
 801c5d8:	9204      	strlt	r2, [sp, #16]
 801c5da:	7823      	ldrb	r3, [r4, #0]
 801c5dc:	2b2e      	cmp	r3, #46	; 0x2e
 801c5de:	d10c      	bne.n	801c5fa <_vfiprintf_r+0x176>
 801c5e0:	7863      	ldrb	r3, [r4, #1]
 801c5e2:	2b2a      	cmp	r3, #42	; 0x2a
 801c5e4:	d135      	bne.n	801c652 <_vfiprintf_r+0x1ce>
 801c5e6:	9b03      	ldr	r3, [sp, #12]
 801c5e8:	1d1a      	adds	r2, r3, #4
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	9203      	str	r2, [sp, #12]
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	bfb8      	it	lt
 801c5f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c5f6:	3402      	adds	r4, #2
 801c5f8:	9305      	str	r3, [sp, #20]
 801c5fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c6e0 <_vfiprintf_r+0x25c>
 801c5fe:	7821      	ldrb	r1, [r4, #0]
 801c600:	2203      	movs	r2, #3
 801c602:	4650      	mov	r0, sl
 801c604:	f7e3 fdfc 	bl	8000200 <memchr>
 801c608:	b140      	cbz	r0, 801c61c <_vfiprintf_r+0x198>
 801c60a:	2340      	movs	r3, #64	; 0x40
 801c60c:	eba0 000a 	sub.w	r0, r0, sl
 801c610:	fa03 f000 	lsl.w	r0, r3, r0
 801c614:	9b04      	ldr	r3, [sp, #16]
 801c616:	4303      	orrs	r3, r0
 801c618:	3401      	adds	r4, #1
 801c61a:	9304      	str	r3, [sp, #16]
 801c61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c620:	482c      	ldr	r0, [pc, #176]	; (801c6d4 <_vfiprintf_r+0x250>)
 801c622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c626:	2206      	movs	r2, #6
 801c628:	f7e3 fdea 	bl	8000200 <memchr>
 801c62c:	2800      	cmp	r0, #0
 801c62e:	d03f      	beq.n	801c6b0 <_vfiprintf_r+0x22c>
 801c630:	4b29      	ldr	r3, [pc, #164]	; (801c6d8 <_vfiprintf_r+0x254>)
 801c632:	bb1b      	cbnz	r3, 801c67c <_vfiprintf_r+0x1f8>
 801c634:	9b03      	ldr	r3, [sp, #12]
 801c636:	3307      	adds	r3, #7
 801c638:	f023 0307 	bic.w	r3, r3, #7
 801c63c:	3308      	adds	r3, #8
 801c63e:	9303      	str	r3, [sp, #12]
 801c640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c642:	443b      	add	r3, r7
 801c644:	9309      	str	r3, [sp, #36]	; 0x24
 801c646:	e767      	b.n	801c518 <_vfiprintf_r+0x94>
 801c648:	fb0c 3202 	mla	r2, ip, r2, r3
 801c64c:	460c      	mov	r4, r1
 801c64e:	2001      	movs	r0, #1
 801c650:	e7a5      	b.n	801c59e <_vfiprintf_r+0x11a>
 801c652:	2300      	movs	r3, #0
 801c654:	3401      	adds	r4, #1
 801c656:	9305      	str	r3, [sp, #20]
 801c658:	4619      	mov	r1, r3
 801c65a:	f04f 0c0a 	mov.w	ip, #10
 801c65e:	4620      	mov	r0, r4
 801c660:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c664:	3a30      	subs	r2, #48	; 0x30
 801c666:	2a09      	cmp	r2, #9
 801c668:	d903      	bls.n	801c672 <_vfiprintf_r+0x1ee>
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d0c5      	beq.n	801c5fa <_vfiprintf_r+0x176>
 801c66e:	9105      	str	r1, [sp, #20]
 801c670:	e7c3      	b.n	801c5fa <_vfiprintf_r+0x176>
 801c672:	fb0c 2101 	mla	r1, ip, r1, r2
 801c676:	4604      	mov	r4, r0
 801c678:	2301      	movs	r3, #1
 801c67a:	e7f0      	b.n	801c65e <_vfiprintf_r+0x1da>
 801c67c:	ab03      	add	r3, sp, #12
 801c67e:	9300      	str	r3, [sp, #0]
 801c680:	462a      	mov	r2, r5
 801c682:	4b16      	ldr	r3, [pc, #88]	; (801c6dc <_vfiprintf_r+0x258>)
 801c684:	a904      	add	r1, sp, #16
 801c686:	4630      	mov	r0, r6
 801c688:	f3af 8000 	nop.w
 801c68c:	4607      	mov	r7, r0
 801c68e:	1c78      	adds	r0, r7, #1
 801c690:	d1d6      	bne.n	801c640 <_vfiprintf_r+0x1bc>
 801c692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c694:	07d9      	lsls	r1, r3, #31
 801c696:	d405      	bmi.n	801c6a4 <_vfiprintf_r+0x220>
 801c698:	89ab      	ldrh	r3, [r5, #12]
 801c69a:	059a      	lsls	r2, r3, #22
 801c69c:	d402      	bmi.n	801c6a4 <_vfiprintf_r+0x220>
 801c69e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c6a0:	f7fe ff48 	bl	801b534 <__retarget_lock_release_recursive>
 801c6a4:	89ab      	ldrh	r3, [r5, #12]
 801c6a6:	065b      	lsls	r3, r3, #25
 801c6a8:	f53f af12 	bmi.w	801c4d0 <_vfiprintf_r+0x4c>
 801c6ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c6ae:	e711      	b.n	801c4d4 <_vfiprintf_r+0x50>
 801c6b0:	ab03      	add	r3, sp, #12
 801c6b2:	9300      	str	r3, [sp, #0]
 801c6b4:	462a      	mov	r2, r5
 801c6b6:	4b09      	ldr	r3, [pc, #36]	; (801c6dc <_vfiprintf_r+0x258>)
 801c6b8:	a904      	add	r1, sp, #16
 801c6ba:	4630      	mov	r0, r6
 801c6bc:	f000 f880 	bl	801c7c0 <_printf_i>
 801c6c0:	e7e4      	b.n	801c68c <_vfiprintf_r+0x208>
 801c6c2:	bf00      	nop
 801c6c4:	0801df80 	.word	0x0801df80
 801c6c8:	0801dfa0 	.word	0x0801dfa0
 801c6cc:	0801df60 	.word	0x0801df60
 801c6d0:	0801e072 	.word	0x0801e072
 801c6d4:	0801e07c 	.word	0x0801e07c
 801c6d8:	00000000 	.word	0x00000000
 801c6dc:	0801c45f 	.word	0x0801c45f
 801c6e0:	0801e078 	.word	0x0801e078

0801c6e4 <_printf_common>:
 801c6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6e8:	4616      	mov	r6, r2
 801c6ea:	4699      	mov	r9, r3
 801c6ec:	688a      	ldr	r2, [r1, #8]
 801c6ee:	690b      	ldr	r3, [r1, #16]
 801c6f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c6f4:	4293      	cmp	r3, r2
 801c6f6:	bfb8      	it	lt
 801c6f8:	4613      	movlt	r3, r2
 801c6fa:	6033      	str	r3, [r6, #0]
 801c6fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c700:	4607      	mov	r7, r0
 801c702:	460c      	mov	r4, r1
 801c704:	b10a      	cbz	r2, 801c70a <_printf_common+0x26>
 801c706:	3301      	adds	r3, #1
 801c708:	6033      	str	r3, [r6, #0]
 801c70a:	6823      	ldr	r3, [r4, #0]
 801c70c:	0699      	lsls	r1, r3, #26
 801c70e:	bf42      	ittt	mi
 801c710:	6833      	ldrmi	r3, [r6, #0]
 801c712:	3302      	addmi	r3, #2
 801c714:	6033      	strmi	r3, [r6, #0]
 801c716:	6825      	ldr	r5, [r4, #0]
 801c718:	f015 0506 	ands.w	r5, r5, #6
 801c71c:	d106      	bne.n	801c72c <_printf_common+0x48>
 801c71e:	f104 0a19 	add.w	sl, r4, #25
 801c722:	68e3      	ldr	r3, [r4, #12]
 801c724:	6832      	ldr	r2, [r6, #0]
 801c726:	1a9b      	subs	r3, r3, r2
 801c728:	42ab      	cmp	r3, r5
 801c72a:	dc26      	bgt.n	801c77a <_printf_common+0x96>
 801c72c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c730:	1e13      	subs	r3, r2, #0
 801c732:	6822      	ldr	r2, [r4, #0]
 801c734:	bf18      	it	ne
 801c736:	2301      	movne	r3, #1
 801c738:	0692      	lsls	r2, r2, #26
 801c73a:	d42b      	bmi.n	801c794 <_printf_common+0xb0>
 801c73c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c740:	4649      	mov	r1, r9
 801c742:	4638      	mov	r0, r7
 801c744:	47c0      	blx	r8
 801c746:	3001      	adds	r0, #1
 801c748:	d01e      	beq.n	801c788 <_printf_common+0xa4>
 801c74a:	6823      	ldr	r3, [r4, #0]
 801c74c:	68e5      	ldr	r5, [r4, #12]
 801c74e:	6832      	ldr	r2, [r6, #0]
 801c750:	f003 0306 	and.w	r3, r3, #6
 801c754:	2b04      	cmp	r3, #4
 801c756:	bf08      	it	eq
 801c758:	1aad      	subeq	r5, r5, r2
 801c75a:	68a3      	ldr	r3, [r4, #8]
 801c75c:	6922      	ldr	r2, [r4, #16]
 801c75e:	bf0c      	ite	eq
 801c760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c764:	2500      	movne	r5, #0
 801c766:	4293      	cmp	r3, r2
 801c768:	bfc4      	itt	gt
 801c76a:	1a9b      	subgt	r3, r3, r2
 801c76c:	18ed      	addgt	r5, r5, r3
 801c76e:	2600      	movs	r6, #0
 801c770:	341a      	adds	r4, #26
 801c772:	42b5      	cmp	r5, r6
 801c774:	d11a      	bne.n	801c7ac <_printf_common+0xc8>
 801c776:	2000      	movs	r0, #0
 801c778:	e008      	b.n	801c78c <_printf_common+0xa8>
 801c77a:	2301      	movs	r3, #1
 801c77c:	4652      	mov	r2, sl
 801c77e:	4649      	mov	r1, r9
 801c780:	4638      	mov	r0, r7
 801c782:	47c0      	blx	r8
 801c784:	3001      	adds	r0, #1
 801c786:	d103      	bne.n	801c790 <_printf_common+0xac>
 801c788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c790:	3501      	adds	r5, #1
 801c792:	e7c6      	b.n	801c722 <_printf_common+0x3e>
 801c794:	18e1      	adds	r1, r4, r3
 801c796:	1c5a      	adds	r2, r3, #1
 801c798:	2030      	movs	r0, #48	; 0x30
 801c79a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c79e:	4422      	add	r2, r4
 801c7a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c7a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c7a8:	3302      	adds	r3, #2
 801c7aa:	e7c7      	b.n	801c73c <_printf_common+0x58>
 801c7ac:	2301      	movs	r3, #1
 801c7ae:	4622      	mov	r2, r4
 801c7b0:	4649      	mov	r1, r9
 801c7b2:	4638      	mov	r0, r7
 801c7b4:	47c0      	blx	r8
 801c7b6:	3001      	adds	r0, #1
 801c7b8:	d0e6      	beq.n	801c788 <_printf_common+0xa4>
 801c7ba:	3601      	adds	r6, #1
 801c7bc:	e7d9      	b.n	801c772 <_printf_common+0x8e>
	...

0801c7c0 <_printf_i>:
 801c7c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c7c4:	7e0f      	ldrb	r7, [r1, #24]
 801c7c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c7c8:	2f78      	cmp	r7, #120	; 0x78
 801c7ca:	4691      	mov	r9, r2
 801c7cc:	4680      	mov	r8, r0
 801c7ce:	460c      	mov	r4, r1
 801c7d0:	469a      	mov	sl, r3
 801c7d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c7d6:	d807      	bhi.n	801c7e8 <_printf_i+0x28>
 801c7d8:	2f62      	cmp	r7, #98	; 0x62
 801c7da:	d80a      	bhi.n	801c7f2 <_printf_i+0x32>
 801c7dc:	2f00      	cmp	r7, #0
 801c7de:	f000 80d8 	beq.w	801c992 <_printf_i+0x1d2>
 801c7e2:	2f58      	cmp	r7, #88	; 0x58
 801c7e4:	f000 80a3 	beq.w	801c92e <_printf_i+0x16e>
 801c7e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c7ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c7f0:	e03a      	b.n	801c868 <_printf_i+0xa8>
 801c7f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c7f6:	2b15      	cmp	r3, #21
 801c7f8:	d8f6      	bhi.n	801c7e8 <_printf_i+0x28>
 801c7fa:	a101      	add	r1, pc, #4	; (adr r1, 801c800 <_printf_i+0x40>)
 801c7fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c800:	0801c859 	.word	0x0801c859
 801c804:	0801c86d 	.word	0x0801c86d
 801c808:	0801c7e9 	.word	0x0801c7e9
 801c80c:	0801c7e9 	.word	0x0801c7e9
 801c810:	0801c7e9 	.word	0x0801c7e9
 801c814:	0801c7e9 	.word	0x0801c7e9
 801c818:	0801c86d 	.word	0x0801c86d
 801c81c:	0801c7e9 	.word	0x0801c7e9
 801c820:	0801c7e9 	.word	0x0801c7e9
 801c824:	0801c7e9 	.word	0x0801c7e9
 801c828:	0801c7e9 	.word	0x0801c7e9
 801c82c:	0801c979 	.word	0x0801c979
 801c830:	0801c89d 	.word	0x0801c89d
 801c834:	0801c95b 	.word	0x0801c95b
 801c838:	0801c7e9 	.word	0x0801c7e9
 801c83c:	0801c7e9 	.word	0x0801c7e9
 801c840:	0801c99b 	.word	0x0801c99b
 801c844:	0801c7e9 	.word	0x0801c7e9
 801c848:	0801c89d 	.word	0x0801c89d
 801c84c:	0801c7e9 	.word	0x0801c7e9
 801c850:	0801c7e9 	.word	0x0801c7e9
 801c854:	0801c963 	.word	0x0801c963
 801c858:	682b      	ldr	r3, [r5, #0]
 801c85a:	1d1a      	adds	r2, r3, #4
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	602a      	str	r2, [r5, #0]
 801c860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c868:	2301      	movs	r3, #1
 801c86a:	e0a3      	b.n	801c9b4 <_printf_i+0x1f4>
 801c86c:	6820      	ldr	r0, [r4, #0]
 801c86e:	6829      	ldr	r1, [r5, #0]
 801c870:	0606      	lsls	r6, r0, #24
 801c872:	f101 0304 	add.w	r3, r1, #4
 801c876:	d50a      	bpl.n	801c88e <_printf_i+0xce>
 801c878:	680e      	ldr	r6, [r1, #0]
 801c87a:	602b      	str	r3, [r5, #0]
 801c87c:	2e00      	cmp	r6, #0
 801c87e:	da03      	bge.n	801c888 <_printf_i+0xc8>
 801c880:	232d      	movs	r3, #45	; 0x2d
 801c882:	4276      	negs	r6, r6
 801c884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c888:	485e      	ldr	r0, [pc, #376]	; (801ca04 <_printf_i+0x244>)
 801c88a:	230a      	movs	r3, #10
 801c88c:	e019      	b.n	801c8c2 <_printf_i+0x102>
 801c88e:	680e      	ldr	r6, [r1, #0]
 801c890:	602b      	str	r3, [r5, #0]
 801c892:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c896:	bf18      	it	ne
 801c898:	b236      	sxthne	r6, r6
 801c89a:	e7ef      	b.n	801c87c <_printf_i+0xbc>
 801c89c:	682b      	ldr	r3, [r5, #0]
 801c89e:	6820      	ldr	r0, [r4, #0]
 801c8a0:	1d19      	adds	r1, r3, #4
 801c8a2:	6029      	str	r1, [r5, #0]
 801c8a4:	0601      	lsls	r1, r0, #24
 801c8a6:	d501      	bpl.n	801c8ac <_printf_i+0xec>
 801c8a8:	681e      	ldr	r6, [r3, #0]
 801c8aa:	e002      	b.n	801c8b2 <_printf_i+0xf2>
 801c8ac:	0646      	lsls	r6, r0, #25
 801c8ae:	d5fb      	bpl.n	801c8a8 <_printf_i+0xe8>
 801c8b0:	881e      	ldrh	r6, [r3, #0]
 801c8b2:	4854      	ldr	r0, [pc, #336]	; (801ca04 <_printf_i+0x244>)
 801c8b4:	2f6f      	cmp	r7, #111	; 0x6f
 801c8b6:	bf0c      	ite	eq
 801c8b8:	2308      	moveq	r3, #8
 801c8ba:	230a      	movne	r3, #10
 801c8bc:	2100      	movs	r1, #0
 801c8be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c8c2:	6865      	ldr	r5, [r4, #4]
 801c8c4:	60a5      	str	r5, [r4, #8]
 801c8c6:	2d00      	cmp	r5, #0
 801c8c8:	bfa2      	ittt	ge
 801c8ca:	6821      	ldrge	r1, [r4, #0]
 801c8cc:	f021 0104 	bicge.w	r1, r1, #4
 801c8d0:	6021      	strge	r1, [r4, #0]
 801c8d2:	b90e      	cbnz	r6, 801c8d8 <_printf_i+0x118>
 801c8d4:	2d00      	cmp	r5, #0
 801c8d6:	d04d      	beq.n	801c974 <_printf_i+0x1b4>
 801c8d8:	4615      	mov	r5, r2
 801c8da:	fbb6 f1f3 	udiv	r1, r6, r3
 801c8de:	fb03 6711 	mls	r7, r3, r1, r6
 801c8e2:	5dc7      	ldrb	r7, [r0, r7]
 801c8e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c8e8:	4637      	mov	r7, r6
 801c8ea:	42bb      	cmp	r3, r7
 801c8ec:	460e      	mov	r6, r1
 801c8ee:	d9f4      	bls.n	801c8da <_printf_i+0x11a>
 801c8f0:	2b08      	cmp	r3, #8
 801c8f2:	d10b      	bne.n	801c90c <_printf_i+0x14c>
 801c8f4:	6823      	ldr	r3, [r4, #0]
 801c8f6:	07de      	lsls	r6, r3, #31
 801c8f8:	d508      	bpl.n	801c90c <_printf_i+0x14c>
 801c8fa:	6923      	ldr	r3, [r4, #16]
 801c8fc:	6861      	ldr	r1, [r4, #4]
 801c8fe:	4299      	cmp	r1, r3
 801c900:	bfde      	ittt	le
 801c902:	2330      	movle	r3, #48	; 0x30
 801c904:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c908:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801c90c:	1b52      	subs	r2, r2, r5
 801c90e:	6122      	str	r2, [r4, #16]
 801c910:	f8cd a000 	str.w	sl, [sp]
 801c914:	464b      	mov	r3, r9
 801c916:	aa03      	add	r2, sp, #12
 801c918:	4621      	mov	r1, r4
 801c91a:	4640      	mov	r0, r8
 801c91c:	f7ff fee2 	bl	801c6e4 <_printf_common>
 801c920:	3001      	adds	r0, #1
 801c922:	d14c      	bne.n	801c9be <_printf_i+0x1fe>
 801c924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c928:	b004      	add	sp, #16
 801c92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c92e:	4835      	ldr	r0, [pc, #212]	; (801ca04 <_printf_i+0x244>)
 801c930:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c934:	6829      	ldr	r1, [r5, #0]
 801c936:	6823      	ldr	r3, [r4, #0]
 801c938:	f851 6b04 	ldr.w	r6, [r1], #4
 801c93c:	6029      	str	r1, [r5, #0]
 801c93e:	061d      	lsls	r5, r3, #24
 801c940:	d514      	bpl.n	801c96c <_printf_i+0x1ac>
 801c942:	07df      	lsls	r7, r3, #31
 801c944:	bf44      	itt	mi
 801c946:	f043 0320 	orrmi.w	r3, r3, #32
 801c94a:	6023      	strmi	r3, [r4, #0]
 801c94c:	b91e      	cbnz	r6, 801c956 <_printf_i+0x196>
 801c94e:	6823      	ldr	r3, [r4, #0]
 801c950:	f023 0320 	bic.w	r3, r3, #32
 801c954:	6023      	str	r3, [r4, #0]
 801c956:	2310      	movs	r3, #16
 801c958:	e7b0      	b.n	801c8bc <_printf_i+0xfc>
 801c95a:	6823      	ldr	r3, [r4, #0]
 801c95c:	f043 0320 	orr.w	r3, r3, #32
 801c960:	6023      	str	r3, [r4, #0]
 801c962:	2378      	movs	r3, #120	; 0x78
 801c964:	4828      	ldr	r0, [pc, #160]	; (801ca08 <_printf_i+0x248>)
 801c966:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c96a:	e7e3      	b.n	801c934 <_printf_i+0x174>
 801c96c:	0659      	lsls	r1, r3, #25
 801c96e:	bf48      	it	mi
 801c970:	b2b6      	uxthmi	r6, r6
 801c972:	e7e6      	b.n	801c942 <_printf_i+0x182>
 801c974:	4615      	mov	r5, r2
 801c976:	e7bb      	b.n	801c8f0 <_printf_i+0x130>
 801c978:	682b      	ldr	r3, [r5, #0]
 801c97a:	6826      	ldr	r6, [r4, #0]
 801c97c:	6961      	ldr	r1, [r4, #20]
 801c97e:	1d18      	adds	r0, r3, #4
 801c980:	6028      	str	r0, [r5, #0]
 801c982:	0635      	lsls	r5, r6, #24
 801c984:	681b      	ldr	r3, [r3, #0]
 801c986:	d501      	bpl.n	801c98c <_printf_i+0x1cc>
 801c988:	6019      	str	r1, [r3, #0]
 801c98a:	e002      	b.n	801c992 <_printf_i+0x1d2>
 801c98c:	0670      	lsls	r0, r6, #25
 801c98e:	d5fb      	bpl.n	801c988 <_printf_i+0x1c8>
 801c990:	8019      	strh	r1, [r3, #0]
 801c992:	2300      	movs	r3, #0
 801c994:	6123      	str	r3, [r4, #16]
 801c996:	4615      	mov	r5, r2
 801c998:	e7ba      	b.n	801c910 <_printf_i+0x150>
 801c99a:	682b      	ldr	r3, [r5, #0]
 801c99c:	1d1a      	adds	r2, r3, #4
 801c99e:	602a      	str	r2, [r5, #0]
 801c9a0:	681d      	ldr	r5, [r3, #0]
 801c9a2:	6862      	ldr	r2, [r4, #4]
 801c9a4:	2100      	movs	r1, #0
 801c9a6:	4628      	mov	r0, r5
 801c9a8:	f7e3 fc2a 	bl	8000200 <memchr>
 801c9ac:	b108      	cbz	r0, 801c9b2 <_printf_i+0x1f2>
 801c9ae:	1b40      	subs	r0, r0, r5
 801c9b0:	6060      	str	r0, [r4, #4]
 801c9b2:	6863      	ldr	r3, [r4, #4]
 801c9b4:	6123      	str	r3, [r4, #16]
 801c9b6:	2300      	movs	r3, #0
 801c9b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c9bc:	e7a8      	b.n	801c910 <_printf_i+0x150>
 801c9be:	6923      	ldr	r3, [r4, #16]
 801c9c0:	462a      	mov	r2, r5
 801c9c2:	4649      	mov	r1, r9
 801c9c4:	4640      	mov	r0, r8
 801c9c6:	47d0      	blx	sl
 801c9c8:	3001      	adds	r0, #1
 801c9ca:	d0ab      	beq.n	801c924 <_printf_i+0x164>
 801c9cc:	6823      	ldr	r3, [r4, #0]
 801c9ce:	079b      	lsls	r3, r3, #30
 801c9d0:	d413      	bmi.n	801c9fa <_printf_i+0x23a>
 801c9d2:	68e0      	ldr	r0, [r4, #12]
 801c9d4:	9b03      	ldr	r3, [sp, #12]
 801c9d6:	4298      	cmp	r0, r3
 801c9d8:	bfb8      	it	lt
 801c9da:	4618      	movlt	r0, r3
 801c9dc:	e7a4      	b.n	801c928 <_printf_i+0x168>
 801c9de:	2301      	movs	r3, #1
 801c9e0:	4632      	mov	r2, r6
 801c9e2:	4649      	mov	r1, r9
 801c9e4:	4640      	mov	r0, r8
 801c9e6:	47d0      	blx	sl
 801c9e8:	3001      	adds	r0, #1
 801c9ea:	d09b      	beq.n	801c924 <_printf_i+0x164>
 801c9ec:	3501      	adds	r5, #1
 801c9ee:	68e3      	ldr	r3, [r4, #12]
 801c9f0:	9903      	ldr	r1, [sp, #12]
 801c9f2:	1a5b      	subs	r3, r3, r1
 801c9f4:	42ab      	cmp	r3, r5
 801c9f6:	dcf2      	bgt.n	801c9de <_printf_i+0x21e>
 801c9f8:	e7eb      	b.n	801c9d2 <_printf_i+0x212>
 801c9fa:	2500      	movs	r5, #0
 801c9fc:	f104 0619 	add.w	r6, r4, #25
 801ca00:	e7f5      	b.n	801c9ee <_printf_i+0x22e>
 801ca02:	bf00      	nop
 801ca04:	0801e083 	.word	0x0801e083
 801ca08:	0801e094 	.word	0x0801e094

0801ca0c <_read_r>:
 801ca0c:	b538      	push	{r3, r4, r5, lr}
 801ca0e:	4d07      	ldr	r5, [pc, #28]	; (801ca2c <_read_r+0x20>)
 801ca10:	4604      	mov	r4, r0
 801ca12:	4608      	mov	r0, r1
 801ca14:	4611      	mov	r1, r2
 801ca16:	2200      	movs	r2, #0
 801ca18:	602a      	str	r2, [r5, #0]
 801ca1a:	461a      	mov	r2, r3
 801ca1c:	f7e5 fc40 	bl	80022a0 <_read>
 801ca20:	1c43      	adds	r3, r0, #1
 801ca22:	d102      	bne.n	801ca2a <_read_r+0x1e>
 801ca24:	682b      	ldr	r3, [r5, #0]
 801ca26:	b103      	cbz	r3, 801ca2a <_read_r+0x1e>
 801ca28:	6023      	str	r3, [r4, #0]
 801ca2a:	bd38      	pop	{r3, r4, r5, pc}
 801ca2c:	2001ccf4 	.word	0x2001ccf4

0801ca30 <abort>:
 801ca30:	b508      	push	{r3, lr}
 801ca32:	2006      	movs	r0, #6
 801ca34:	f000 f870 	bl	801cb18 <raise>
 801ca38:	2001      	movs	r0, #1
 801ca3a:	f7e5 fc27 	bl	800228c <_exit>
	...

0801ca40 <_fstat_r>:
 801ca40:	b538      	push	{r3, r4, r5, lr}
 801ca42:	4d07      	ldr	r5, [pc, #28]	; (801ca60 <_fstat_r+0x20>)
 801ca44:	2300      	movs	r3, #0
 801ca46:	4604      	mov	r4, r0
 801ca48:	4608      	mov	r0, r1
 801ca4a:	4611      	mov	r1, r2
 801ca4c:	602b      	str	r3, [r5, #0]
 801ca4e:	f7e5 fca3 	bl	8002398 <_fstat>
 801ca52:	1c43      	adds	r3, r0, #1
 801ca54:	d102      	bne.n	801ca5c <_fstat_r+0x1c>
 801ca56:	682b      	ldr	r3, [r5, #0]
 801ca58:	b103      	cbz	r3, 801ca5c <_fstat_r+0x1c>
 801ca5a:	6023      	str	r3, [r4, #0]
 801ca5c:	bd38      	pop	{r3, r4, r5, pc}
 801ca5e:	bf00      	nop
 801ca60:	2001ccf4 	.word	0x2001ccf4

0801ca64 <_isatty_r>:
 801ca64:	b538      	push	{r3, r4, r5, lr}
 801ca66:	4d06      	ldr	r5, [pc, #24]	; (801ca80 <_isatty_r+0x1c>)
 801ca68:	2300      	movs	r3, #0
 801ca6a:	4604      	mov	r4, r0
 801ca6c:	4608      	mov	r0, r1
 801ca6e:	602b      	str	r3, [r5, #0]
 801ca70:	f7e5 fca2 	bl	80023b8 <_isatty>
 801ca74:	1c43      	adds	r3, r0, #1
 801ca76:	d102      	bne.n	801ca7e <_isatty_r+0x1a>
 801ca78:	682b      	ldr	r3, [r5, #0]
 801ca7a:	b103      	cbz	r3, 801ca7e <_isatty_r+0x1a>
 801ca7c:	6023      	str	r3, [r4, #0]
 801ca7e:	bd38      	pop	{r3, r4, r5, pc}
 801ca80:	2001ccf4 	.word	0x2001ccf4

0801ca84 <memmove>:
 801ca84:	4288      	cmp	r0, r1
 801ca86:	b510      	push	{r4, lr}
 801ca88:	eb01 0402 	add.w	r4, r1, r2
 801ca8c:	d902      	bls.n	801ca94 <memmove+0x10>
 801ca8e:	4284      	cmp	r4, r0
 801ca90:	4623      	mov	r3, r4
 801ca92:	d807      	bhi.n	801caa4 <memmove+0x20>
 801ca94:	1e43      	subs	r3, r0, #1
 801ca96:	42a1      	cmp	r1, r4
 801ca98:	d008      	beq.n	801caac <memmove+0x28>
 801ca9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ca9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801caa2:	e7f8      	b.n	801ca96 <memmove+0x12>
 801caa4:	4402      	add	r2, r0
 801caa6:	4601      	mov	r1, r0
 801caa8:	428a      	cmp	r2, r1
 801caaa:	d100      	bne.n	801caae <memmove+0x2a>
 801caac:	bd10      	pop	{r4, pc}
 801caae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801cab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801cab6:	e7f7      	b.n	801caa8 <memmove+0x24>

0801cab8 <_malloc_usable_size_r>:
 801cab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cabc:	1f18      	subs	r0, r3, #4
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	bfbc      	itt	lt
 801cac2:	580b      	ldrlt	r3, [r1, r0]
 801cac4:	18c0      	addlt	r0, r0, r3
 801cac6:	4770      	bx	lr

0801cac8 <_raise_r>:
 801cac8:	291f      	cmp	r1, #31
 801caca:	b538      	push	{r3, r4, r5, lr}
 801cacc:	4604      	mov	r4, r0
 801cace:	460d      	mov	r5, r1
 801cad0:	d904      	bls.n	801cadc <_raise_r+0x14>
 801cad2:	2316      	movs	r3, #22
 801cad4:	6003      	str	r3, [r0, #0]
 801cad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cada:	bd38      	pop	{r3, r4, r5, pc}
 801cadc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801cade:	b112      	cbz	r2, 801cae6 <_raise_r+0x1e>
 801cae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cae4:	b94b      	cbnz	r3, 801cafa <_raise_r+0x32>
 801cae6:	4620      	mov	r0, r4
 801cae8:	f000 f830 	bl	801cb4c <_getpid_r>
 801caec:	462a      	mov	r2, r5
 801caee:	4601      	mov	r1, r0
 801caf0:	4620      	mov	r0, r4
 801caf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801caf6:	f000 b817 	b.w	801cb28 <_kill_r>
 801cafa:	2b01      	cmp	r3, #1
 801cafc:	d00a      	beq.n	801cb14 <_raise_r+0x4c>
 801cafe:	1c59      	adds	r1, r3, #1
 801cb00:	d103      	bne.n	801cb0a <_raise_r+0x42>
 801cb02:	2316      	movs	r3, #22
 801cb04:	6003      	str	r3, [r0, #0]
 801cb06:	2001      	movs	r0, #1
 801cb08:	e7e7      	b.n	801cada <_raise_r+0x12>
 801cb0a:	2400      	movs	r4, #0
 801cb0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cb10:	4628      	mov	r0, r5
 801cb12:	4798      	blx	r3
 801cb14:	2000      	movs	r0, #0
 801cb16:	e7e0      	b.n	801cada <_raise_r+0x12>

0801cb18 <raise>:
 801cb18:	4b02      	ldr	r3, [pc, #8]	; (801cb24 <raise+0xc>)
 801cb1a:	4601      	mov	r1, r0
 801cb1c:	6818      	ldr	r0, [r3, #0]
 801cb1e:	f7ff bfd3 	b.w	801cac8 <_raise_r>
 801cb22:	bf00      	nop
 801cb24:	20000c10 	.word	0x20000c10

0801cb28 <_kill_r>:
 801cb28:	b538      	push	{r3, r4, r5, lr}
 801cb2a:	4d07      	ldr	r5, [pc, #28]	; (801cb48 <_kill_r+0x20>)
 801cb2c:	2300      	movs	r3, #0
 801cb2e:	4604      	mov	r4, r0
 801cb30:	4608      	mov	r0, r1
 801cb32:	4611      	mov	r1, r2
 801cb34:	602b      	str	r3, [r5, #0]
 801cb36:	f7e5 fb99 	bl	800226c <_kill>
 801cb3a:	1c43      	adds	r3, r0, #1
 801cb3c:	d102      	bne.n	801cb44 <_kill_r+0x1c>
 801cb3e:	682b      	ldr	r3, [r5, #0]
 801cb40:	b103      	cbz	r3, 801cb44 <_kill_r+0x1c>
 801cb42:	6023      	str	r3, [r4, #0]
 801cb44:	bd38      	pop	{r3, r4, r5, pc}
 801cb46:	bf00      	nop
 801cb48:	2001ccf4 	.word	0x2001ccf4

0801cb4c <_getpid_r>:
 801cb4c:	f7e5 bb86 	b.w	800225c <_getpid>

0801cb50 <_init>:
 801cb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb52:	bf00      	nop
 801cb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cb56:	bc08      	pop	{r3}
 801cb58:	469e      	mov	lr, r3
 801cb5a:	4770      	bx	lr

0801cb5c <_fini>:
 801cb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb5e:	bf00      	nop
 801cb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cb62:	bc08      	pop	{r3}
 801cb64:	469e      	mov	lr, r3
 801cb66:	4770      	bx	lr
