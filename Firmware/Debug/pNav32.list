
pNav32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bc3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001298  0801bdd0  0801bdd0  0002bdd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d068  0801d068  000308e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801d068  0801d068  0002d068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d070  0801d070  000308e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0801d070  0801d070  0002d070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d084  0801d084  0002d084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008e8  20000000  0801d088  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000308e8  2**0
                  CONTENTS
 10 .bss          0001c080  200008e8  200008e8  000308e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2001c968  2001c968  000308e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000308e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000313c8  00000000  00000000  00030918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000709d  00000000  00000000  00061ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002588  00000000  00000000  00068d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002298  00000000  00000000  0006b308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e2c8  00000000  00000000  0006d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032e78  00000000  00000000  0009b868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f63f9  00000000  00000000  000ce6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000083  00000000  00000000  001c4ad9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ab24  00000000  00000000  001c4b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200008e8 	.word	0x200008e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bdb4 	.word	0x0801bdb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200008ec 	.word	0x200008ec
 80001cc:	0801bdb4 	.word	0x0801bdb4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_ldivmod>:
 80006b8:	b97b      	cbnz	r3, 80006da <__aeabi_ldivmod+0x22>
 80006ba:	b972      	cbnz	r2, 80006da <__aeabi_ldivmod+0x22>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bfbe      	ittt	lt
 80006c0:	2000      	movlt	r0, #0
 80006c2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80006c6:	e006      	blt.n	80006d6 <__aeabi_ldivmod+0x1e>
 80006c8:	bf08      	it	eq
 80006ca:	2800      	cmpeq	r0, #0
 80006cc:	bf1c      	itt	ne
 80006ce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80006d2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006d6:	f000 b9bf 	b.w	8000a58 <__aeabi_idiv0>
 80006da:	f1ad 0c08 	sub.w	ip, sp, #8
 80006de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e2:	2900      	cmp	r1, #0
 80006e4:	db09      	blt.n	80006fa <__aeabi_ldivmod+0x42>
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db1a      	blt.n	8000720 <__aeabi_ldivmod+0x68>
 80006ea:	f000 f84d 	bl	8000788 <__udivmoddi4>
 80006ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f6:	b004      	add	sp, #16
 80006f8:	4770      	bx	lr
 80006fa:	4240      	negs	r0, r0
 80006fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000700:	2b00      	cmp	r3, #0
 8000702:	db1b      	blt.n	800073c <__aeabi_ldivmod+0x84>
 8000704:	f000 f840 	bl	8000788 <__udivmoddi4>
 8000708:	f8dd e004 	ldr.w	lr, [sp, #4]
 800070c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000710:	b004      	add	sp, #16
 8000712:	4240      	negs	r0, r0
 8000714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000718:	4252      	negs	r2, r2
 800071a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800071e:	4770      	bx	lr
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	f000 f82f 	bl	8000788 <__udivmoddi4>
 800072a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800072e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000732:	b004      	add	sp, #16
 8000734:	4240      	negs	r0, r0
 8000736:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073a:	4770      	bx	lr
 800073c:	4252      	negs	r2, r2
 800073e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000742:	f000 f821 	bl	8000788 <__udivmoddi4>
 8000746:	f8dd e004 	ldr.w	lr, [sp, #4]
 800074a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800074e:	b004      	add	sp, #16
 8000750:	4252      	negs	r2, r2
 8000752:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000756:	4770      	bx	lr

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000768:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800076c:	f000 b974 	b.w	8000a58 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f806 	bl	8000788 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__udivmoddi4>:
 8000788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800078c:	9d08      	ldr	r5, [sp, #32]
 800078e:	4604      	mov	r4, r0
 8000790:	468e      	mov	lr, r1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d14d      	bne.n	8000832 <__udivmoddi4+0xaa>
 8000796:	428a      	cmp	r2, r1
 8000798:	4694      	mov	ip, r2
 800079a:	d969      	bls.n	8000870 <__udivmoddi4+0xe8>
 800079c:	fab2 f282 	clz	r2, r2
 80007a0:	b152      	cbz	r2, 80007b8 <__udivmoddi4+0x30>
 80007a2:	fa01 f302 	lsl.w	r3, r1, r2
 80007a6:	f1c2 0120 	rsb	r1, r2, #32
 80007aa:	fa20 f101 	lsr.w	r1, r0, r1
 80007ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80007b2:	ea41 0e03 	orr.w	lr, r1, r3
 80007b6:	4094      	lsls	r4, r2
 80007b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007bc:	0c21      	lsrs	r1, r4, #16
 80007be:	fbbe f6f8 	udiv	r6, lr, r8
 80007c2:	fa1f f78c 	uxth.w	r7, ip
 80007c6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ce:	fb06 f107 	mul.w	r1, r6, r7
 80007d2:	4299      	cmp	r1, r3
 80007d4:	d90a      	bls.n	80007ec <__udivmoddi4+0x64>
 80007d6:	eb1c 0303 	adds.w	r3, ip, r3
 80007da:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007de:	f080 811f 	bcs.w	8000a20 <__udivmoddi4+0x298>
 80007e2:	4299      	cmp	r1, r3
 80007e4:	f240 811c 	bls.w	8000a20 <__udivmoddi4+0x298>
 80007e8:	3e02      	subs	r6, #2
 80007ea:	4463      	add	r3, ip
 80007ec:	1a5b      	subs	r3, r3, r1
 80007ee:	b2a4      	uxth	r4, r4
 80007f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007f4:	fb08 3310 	mls	r3, r8, r0, r3
 80007f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007fc:	fb00 f707 	mul.w	r7, r0, r7
 8000800:	42a7      	cmp	r7, r4
 8000802:	d90a      	bls.n	800081a <__udivmoddi4+0x92>
 8000804:	eb1c 0404 	adds.w	r4, ip, r4
 8000808:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800080c:	f080 810a 	bcs.w	8000a24 <__udivmoddi4+0x29c>
 8000810:	42a7      	cmp	r7, r4
 8000812:	f240 8107 	bls.w	8000a24 <__udivmoddi4+0x29c>
 8000816:	4464      	add	r4, ip
 8000818:	3802      	subs	r0, #2
 800081a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800081e:	1be4      	subs	r4, r4, r7
 8000820:	2600      	movs	r6, #0
 8000822:	b11d      	cbz	r5, 800082c <__udivmoddi4+0xa4>
 8000824:	40d4      	lsrs	r4, r2
 8000826:	2300      	movs	r3, #0
 8000828:	e9c5 4300 	strd	r4, r3, [r5]
 800082c:	4631      	mov	r1, r6
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	428b      	cmp	r3, r1
 8000834:	d909      	bls.n	800084a <__udivmoddi4+0xc2>
 8000836:	2d00      	cmp	r5, #0
 8000838:	f000 80ef 	beq.w	8000a1a <__udivmoddi4+0x292>
 800083c:	2600      	movs	r6, #0
 800083e:	e9c5 0100 	strd	r0, r1, [r5]
 8000842:	4630      	mov	r0, r6
 8000844:	4631      	mov	r1, r6
 8000846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084a:	fab3 f683 	clz	r6, r3
 800084e:	2e00      	cmp	r6, #0
 8000850:	d14a      	bne.n	80008e8 <__udivmoddi4+0x160>
 8000852:	428b      	cmp	r3, r1
 8000854:	d302      	bcc.n	800085c <__udivmoddi4+0xd4>
 8000856:	4282      	cmp	r2, r0
 8000858:	f200 80f9 	bhi.w	8000a4e <__udivmoddi4+0x2c6>
 800085c:	1a84      	subs	r4, r0, r2
 800085e:	eb61 0303 	sbc.w	r3, r1, r3
 8000862:	2001      	movs	r0, #1
 8000864:	469e      	mov	lr, r3
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e0      	beq.n	800082c <__udivmoddi4+0xa4>
 800086a:	e9c5 4e00 	strd	r4, lr, [r5]
 800086e:	e7dd      	b.n	800082c <__udivmoddi4+0xa4>
 8000870:	b902      	cbnz	r2, 8000874 <__udivmoddi4+0xec>
 8000872:	deff      	udf	#255	; 0xff
 8000874:	fab2 f282 	clz	r2, r2
 8000878:	2a00      	cmp	r2, #0
 800087a:	f040 8092 	bne.w	80009a2 <__udivmoddi4+0x21a>
 800087e:	eba1 010c 	sub.w	r1, r1, ip
 8000882:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000886:	fa1f fe8c 	uxth.w	lr, ip
 800088a:	2601      	movs	r6, #1
 800088c:	0c20      	lsrs	r0, r4, #16
 800088e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000892:	fb07 1113 	mls	r1, r7, r3, r1
 8000896:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089a:	fb0e f003 	mul.w	r0, lr, r3
 800089e:	4288      	cmp	r0, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0x12c>
 80008a2:	eb1c 0101 	adds.w	r1, ip, r1
 80008a6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x12a>
 80008ac:	4288      	cmp	r0, r1
 80008ae:	f200 80cb 	bhi.w	8000a48 <__udivmoddi4+0x2c0>
 80008b2:	4643      	mov	r3, r8
 80008b4:	1a09      	subs	r1, r1, r0
 80008b6:	b2a4      	uxth	r4, r4
 80008b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008bc:	fb07 1110 	mls	r1, r7, r0, r1
 80008c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008c4:	fb0e fe00 	mul.w	lr, lr, r0
 80008c8:	45a6      	cmp	lr, r4
 80008ca:	d908      	bls.n	80008de <__udivmoddi4+0x156>
 80008cc:	eb1c 0404 	adds.w	r4, ip, r4
 80008d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008d4:	d202      	bcs.n	80008dc <__udivmoddi4+0x154>
 80008d6:	45a6      	cmp	lr, r4
 80008d8:	f200 80bb 	bhi.w	8000a52 <__udivmoddi4+0x2ca>
 80008dc:	4608      	mov	r0, r1
 80008de:	eba4 040e 	sub.w	r4, r4, lr
 80008e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008e6:	e79c      	b.n	8000822 <__udivmoddi4+0x9a>
 80008e8:	f1c6 0720 	rsb	r7, r6, #32
 80008ec:	40b3      	lsls	r3, r6
 80008ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80008f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008f6:	fa20 f407 	lsr.w	r4, r0, r7
 80008fa:	fa01 f306 	lsl.w	r3, r1, r6
 80008fe:	431c      	orrs	r4, r3
 8000900:	40f9      	lsrs	r1, r7
 8000902:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000906:	fa00 f306 	lsl.w	r3, r0, r6
 800090a:	fbb1 f8f9 	udiv	r8, r1, r9
 800090e:	0c20      	lsrs	r0, r4, #16
 8000910:	fa1f fe8c 	uxth.w	lr, ip
 8000914:	fb09 1118 	mls	r1, r9, r8, r1
 8000918:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800091c:	fb08 f00e 	mul.w	r0, r8, lr
 8000920:	4288      	cmp	r0, r1
 8000922:	fa02 f206 	lsl.w	r2, r2, r6
 8000926:	d90b      	bls.n	8000940 <__udivmoddi4+0x1b8>
 8000928:	eb1c 0101 	adds.w	r1, ip, r1
 800092c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000930:	f080 8088 	bcs.w	8000a44 <__udivmoddi4+0x2bc>
 8000934:	4288      	cmp	r0, r1
 8000936:	f240 8085 	bls.w	8000a44 <__udivmoddi4+0x2bc>
 800093a:	f1a8 0802 	sub.w	r8, r8, #2
 800093e:	4461      	add	r1, ip
 8000940:	1a09      	subs	r1, r1, r0
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb1 f0f9 	udiv	r0, r1, r9
 8000948:	fb09 1110 	mls	r1, r9, r0, r1
 800094c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000950:	fb00 fe0e 	mul.w	lr, r0, lr
 8000954:	458e      	cmp	lr, r1
 8000956:	d908      	bls.n	800096a <__udivmoddi4+0x1e2>
 8000958:	eb1c 0101 	adds.w	r1, ip, r1
 800095c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000960:	d26c      	bcs.n	8000a3c <__udivmoddi4+0x2b4>
 8000962:	458e      	cmp	lr, r1
 8000964:	d96a      	bls.n	8000a3c <__udivmoddi4+0x2b4>
 8000966:	3802      	subs	r0, #2
 8000968:	4461      	add	r1, ip
 800096a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800096e:	fba0 9402 	umull	r9, r4, r0, r2
 8000972:	eba1 010e 	sub.w	r1, r1, lr
 8000976:	42a1      	cmp	r1, r4
 8000978:	46c8      	mov	r8, r9
 800097a:	46a6      	mov	lr, r4
 800097c:	d356      	bcc.n	8000a2c <__udivmoddi4+0x2a4>
 800097e:	d053      	beq.n	8000a28 <__udivmoddi4+0x2a0>
 8000980:	b15d      	cbz	r5, 800099a <__udivmoddi4+0x212>
 8000982:	ebb3 0208 	subs.w	r2, r3, r8
 8000986:	eb61 010e 	sbc.w	r1, r1, lr
 800098a:	fa01 f707 	lsl.w	r7, r1, r7
 800098e:	fa22 f306 	lsr.w	r3, r2, r6
 8000992:	40f1      	lsrs	r1, r6
 8000994:	431f      	orrs	r7, r3
 8000996:	e9c5 7100 	strd	r7, r1, [r5]
 800099a:	2600      	movs	r6, #0
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	f1c2 0320 	rsb	r3, r2, #32
 80009a6:	40d8      	lsrs	r0, r3
 80009a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ac:	fa21 f303 	lsr.w	r3, r1, r3
 80009b0:	4091      	lsls	r1, r2
 80009b2:	4301      	orrs	r1, r0
 80009b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b8:	fa1f fe8c 	uxth.w	lr, ip
 80009bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009c0:	fb07 3610 	mls	r6, r7, r0, r3
 80009c4:	0c0b      	lsrs	r3, r1, #16
 80009c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ca:	fb00 f60e 	mul.w	r6, r0, lr
 80009ce:	429e      	cmp	r6, r3
 80009d0:	fa04 f402 	lsl.w	r4, r4, r2
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x260>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80009de:	d22f      	bcs.n	8000a40 <__udivmoddi4+0x2b8>
 80009e0:	429e      	cmp	r6, r3
 80009e2:	d92d      	bls.n	8000a40 <__udivmoddi4+0x2b8>
 80009e4:	3802      	subs	r0, #2
 80009e6:	4463      	add	r3, ip
 80009e8:	1b9b      	subs	r3, r3, r6
 80009ea:	b289      	uxth	r1, r1
 80009ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80009f0:	fb07 3316 	mls	r3, r7, r6, r3
 80009f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009f8:	fb06 f30e 	mul.w	r3, r6, lr
 80009fc:	428b      	cmp	r3, r1
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x28a>
 8000a00:	eb1c 0101 	adds.w	r1, ip, r1
 8000a04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000a08:	d216      	bcs.n	8000a38 <__udivmoddi4+0x2b0>
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	d914      	bls.n	8000a38 <__udivmoddi4+0x2b0>
 8000a0e:	3e02      	subs	r6, #2
 8000a10:	4461      	add	r1, ip
 8000a12:	1ac9      	subs	r1, r1, r3
 8000a14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a18:	e738      	b.n	800088c <__udivmoddi4+0x104>
 8000a1a:	462e      	mov	r6, r5
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	e705      	b.n	800082c <__udivmoddi4+0xa4>
 8000a20:	4606      	mov	r6, r0
 8000a22:	e6e3      	b.n	80007ec <__udivmoddi4+0x64>
 8000a24:	4618      	mov	r0, r3
 8000a26:	e6f8      	b.n	800081a <__udivmoddi4+0x92>
 8000a28:	454b      	cmp	r3, r9
 8000a2a:	d2a9      	bcs.n	8000980 <__udivmoddi4+0x1f8>
 8000a2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a34:	3801      	subs	r0, #1
 8000a36:	e7a3      	b.n	8000980 <__udivmoddi4+0x1f8>
 8000a38:	4646      	mov	r6, r8
 8000a3a:	e7ea      	b.n	8000a12 <__udivmoddi4+0x28a>
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	e794      	b.n	800096a <__udivmoddi4+0x1e2>
 8000a40:	4640      	mov	r0, r8
 8000a42:	e7d1      	b.n	80009e8 <__udivmoddi4+0x260>
 8000a44:	46d0      	mov	r8, sl
 8000a46:	e77b      	b.n	8000940 <__udivmoddi4+0x1b8>
 8000a48:	3b02      	subs	r3, #2
 8000a4a:	4461      	add	r1, ip
 8000a4c:	e732      	b.n	80008b4 <__udivmoddi4+0x12c>
 8000a4e:	4630      	mov	r0, r6
 8000a50:	e709      	b.n	8000866 <__udivmoddi4+0xde>
 8000a52:	4464      	add	r4, ip
 8000a54:	3802      	subs	r0, #2
 8000a56:	e742      	b.n	80008de <__udivmoddi4+0x156>

08000a58 <__aeabi_idiv0>:
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a70:	4a21      	ldr	r2, [pc, #132]	; (8000af8 <MX_ADC1_Init+0x9c>)
 8000a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <MX_ADC1_Init+0xa0>)
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000abe:	f002 fb5d 	bl	800317c <HAL_ADC_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ac8:	f001 f8a4 	bl	8001c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000ade:	f002 fb91 	bl	8003204 <HAL_ADC_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ae8:	f001 f894 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000904 	.word	0x20000904
 8000af8:	40012000 	.word	0x40012000
 8000afc:	0f000001 	.word	0x0f000001

08000b00 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b06:	463b      	mov	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b12:	4b64      	ldr	r3, [pc, #400]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b14:	4a64      	ldr	r2, [pc, #400]	; (8000ca8 <MX_ADC3_Init+0x1a8>)
 8000b16:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b18:	4b62      	ldr	r3, [pc, #392]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b1e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b20:	4b60      	ldr	r3, [pc, #384]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8000b26:	4b5f      	ldr	r3, [pc, #380]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b2c:	4b5d      	ldr	r3, [pc, #372]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b32:	4b5c      	ldr	r3, [pc, #368]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000b42:	4b58      	ldr	r3, [pc, #352]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b44:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4a:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 12;
 8000b50:	4b54      	ldr	r3, [pc, #336]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b56:	4b53      	ldr	r3, [pc, #332]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b5e:	4b51      	ldr	r3, [pc, #324]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b64:	484f      	ldr	r0, [pc, #316]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b66:	f002 fb09 	bl	800317c <HAL_ADC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8000b70:	f001 f850 	bl	8001c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b74:	230a      	movs	r3, #10
 8000b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	4847      	ldr	r0, [pc, #284]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b86:	f002 fb3d 	bl	8003204 <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000b90:	f001 f840 	bl	8001c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4841      	ldr	r0, [pc, #260]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b9e:	f002 fb31 	bl	8003204 <HAL_ADC_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000ba8:	f001 f834 	bl	8001c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000bac:	2303      	movs	r3, #3
 8000bae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	483b      	ldr	r0, [pc, #236]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000bb6:	f002 fb25 	bl	8003204 <HAL_ADC_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 8000bc0:	f001 f828 	bl	8001c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4835      	ldr	r0, [pc, #212]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000bce:	f002 fb19 	bl	8003204 <HAL_ADC_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000bd8:	f001 f81c 	bl	8001c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8000bdc:	2305      	movs	r3, #5
 8000bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	482f      	ldr	r0, [pc, #188]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000be6:	f002 fb0d 	bl	8003204 <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8000bf0:	f001 f810 	bl	8001c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000bfe:	f002 fb01 	bl	8003204 <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC3_Init+0x10c>
  {
    Error_Handler();
 8000c08:	f001 f804 	bl	8001c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c16:	f002 faf5 	bl	8003204 <HAL_ADC_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC3_Init+0x124>
  {
    Error_Handler();
 8000c20:	f000 fff8 	bl	8001c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 8000c24:	2308      	movs	r3, #8
 8000c26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481d      	ldr	r0, [pc, #116]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c2e:	f002 fae9 	bl	8003204 <HAL_ADC_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC3_Init+0x13c>
  {
    Error_Handler();
 8000c38:	f000 ffec 	bl	8001c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 9;
 8000c3c:	2309      	movs	r3, #9
 8000c3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c46:	f002 fadd 	bl	8003204 <HAL_ADC_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC3_Init+0x154>
  {
    Error_Handler();
 8000c50:	f000 ffe0 	bl	8001c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 10;
 8000c54:	230a      	movs	r3, #10
 8000c56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c5e:	f002 fad1 	bl	8003204 <HAL_ADC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC3_Init+0x16c>
  {
    Error_Handler();
 8000c68:	f000 ffd4 	bl	8001c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 11;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c76:	f002 fac5 	bl	8003204 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC3_Init+0x184>
  {
    Error_Handler();
 8000c80:	f000 ffc8 	bl	8001c14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 12;
 8000c84:	230c      	movs	r3, #12
 8000c86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c8e:	f002 fab9 	bl	8003204 <HAL_ADC_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC3_Init+0x19c>
  {
    Error_Handler();
 8000c98:	f000 ffbc 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000094c 	.word	0x2000094c
 8000ca8:	40012200 	.word	0x40012200

08000cac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08c      	sub	sp, #48	; 0x30
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a53      	ldr	r2, [pc, #332]	; (8000e18 <HAL_ADC_MspInit+0x16c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d142      	bne.n	8000d54 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	4b52      	ldr	r3, [pc, #328]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a51      	ldr	r2, [pc, #324]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b4f      	ldr	r3, [pc, #316]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	4b4b      	ldr	r3, [pc, #300]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a4a      	ldr	r2, [pc, #296]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b48      	ldr	r3, [pc, #288]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a43      	ldr	r2, [pc, #268]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC_VREF_Pin;
 8000d22:	2304      	movs	r3, #4
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d26:	2303      	movs	r3, #3
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_VREF_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	483a      	ldr	r0, [pc, #232]	; (8000e20 <HAL_ADC_MspInit+0x174>)
 8000d36:	f003 f983 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_TEMP_Pin;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4835      	ldr	r0, [pc, #212]	; (8000e24 <HAL_ADC_MspInit+0x178>)
 8000d4e:	f003 f977 	bl	8004040 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000d52:	e05d      	b.n	8000e10 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC3)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a33      	ldr	r2, [pc, #204]	; (8000e28 <HAL_ADC_MspInit+0x17c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d158      	bne.n	8000e10 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a2d      	ldr	r2, [pc, #180]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a26      	ldr	r2, [pc, #152]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_MOT1_CUR_Pin|ADC_MOT2_CUR_Pin|ADC_VREF_Pin;
 8000d96:	2307      	movs	r3, #7
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	481d      	ldr	r0, [pc, #116]	; (8000e20 <HAL_ADC_MspInit+0x174>)
 8000daa:	f003 f949 	bl	8004040 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000db0:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <HAL_ADC_MspInit+0x184>)
 8000db2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000db6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000dba:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dce:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dd6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dde:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dec:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000df6:	f002 fd21 	bl	800383c <HAL_DMA_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_ADC_MspInit+0x158>
      Error_Handler();
 8000e00:	f000 ff08 	bl	8001c14 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	; 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020800 	.word	0x40020800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40012200 	.word	0x40012200
 8000e2c:	20000994 	.word	0x20000994
 8000e30:	40026410 	.word	0x40026410

08000e34 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_CRC_Init+0x20>)
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <MX_CRC_Init+0x24>)
 8000e3c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_CRC_Init+0x20>)
 8000e40:	f002 fce0 	bl	8003804 <HAL_CRC_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e4a:	f000 fee3 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200009f4 	.word	0x200009f4
 8000e58:	40023000 	.word	0x40023000

08000e5c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <HAL_CRC_MspInit+0x3c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10d      	bne.n	8000e8a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023000 	.word	0x40023000
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000eac:	f00c fe6e 	bl	800db8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000eb0:	4b58      	ldr	r3, [pc, #352]	; (8001014 <pvPortMallocMicroROS+0x174>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000eb8:	f000 f980 	bl	80011bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000ebc:	4b56      	ldr	r3, [pc, #344]	; (8001018 <pvPortMallocMicroROS+0x178>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f040 808e 	bne.w	8000fe6 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d01d      	beq.n	8000f0c <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d014      	beq.n	8000f0c <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f023 0307 	bic.w	r3, r3, #7
 8000ee8:	3308      	adds	r3, #8
 8000eea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00a      	beq.n	8000f0c <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efa:	f383 8811 	msr	BASEPRI, r3
 8000efe:	f3bf 8f6f 	isb	sy
 8000f02:	f3bf 8f4f 	dsb	sy
 8000f06:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000f08:	bf00      	nop
 8000f0a:	e7fe      	b.n	8000f0a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d069      	beq.n	8000fe6 <pvPortMallocMicroROS+0x146>
 8000f12:	4b42      	ldr	r3, [pc, #264]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d864      	bhi.n	8000fe6 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000f1c:	4b40      	ldr	r3, [pc, #256]	; (8001020 <pvPortMallocMicroROS+0x180>)
 8000f1e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000f20:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <pvPortMallocMicroROS+0x180>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f26:	e004      	b.n	8000f32 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d903      	bls.n	8000f44 <pvPortMallocMicroROS+0xa4>
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f1      	bne.n	8000f28 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000f44:	4b33      	ldr	r3, [pc, #204]	; (8001014 <pvPortMallocMicroROS+0x174>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d04b      	beq.n	8000fe6 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2208      	movs	r2, #8
 8000f54:	4413      	add	r3, r2
 8000f56:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1ad2      	subs	r2, r2, r3
 8000f68:	2308      	movs	r3, #8
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d91f      	bls.n	8000fb0 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00a      	beq.n	8000f98 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f86:	f383 8811 	msr	BASEPRI, r3
 8000f8a:	f3bf 8f6f 	isb	sy
 8000f8e:	f3bf 8f4f 	dsb	sy
 8000f92:	613b      	str	r3, [r7, #16]
}
 8000f94:	bf00      	nop
 8000f96:	e7fe      	b.n	8000f96 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	1ad2      	subs	r2, r2, r3
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000faa:	69b8      	ldr	r0, [r7, #24]
 8000fac:	f000 f968 	bl	8001280 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	4a18      	ldr	r2, [pc, #96]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <pvPortMallocMicroROS+0x184>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d203      	bcs.n	8000fd2 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <pvPortMallocMicroROS+0x184>)
 8000fd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <pvPortMallocMicroROS+0x178>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000fe6:	f00c fddf 	bl	800dba8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff8:	f383 8811 	msr	BASEPRI, r3
 8000ffc:	f3bf 8f6f 	isb	sy
 8001000:	f3bf 8f4f 	dsb	sy
 8001004:	60fb      	str	r3, [r7, #12]
}
 8001006:	bf00      	nop
 8001008:	e7fe      	b.n	8001008 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800100a:	69fb      	ldr	r3, [r7, #28]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20004604 	.word	0x20004604
 8001018:	20004610 	.word	0x20004610
 800101c:	20004608 	.word	0x20004608
 8001020:	200045fc 	.word	0x200045fc
 8001024:	2000460c 	.word	0x2000460c

08001028 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d048      	beq.n	80010cc <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800103a:	2308      	movs	r3, #8
 800103c:	425b      	negs	r3, r3
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4413      	add	r3, r2
 8001042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <vPortFreeMicroROS+0xac>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4013      	ands	r3, r2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <vPortFreeMicroROS+0x44>
	__asm volatile
 8001056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105a:	f383 8811 	msr	BASEPRI, r3
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	f3bf 8f4f 	dsb	sy
 8001066:	60fb      	str	r3, [r7, #12]
}
 8001068:	bf00      	nop
 800106a:	e7fe      	b.n	800106a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00a      	beq.n	800108a <vPortFreeMicroROS+0x62>
	__asm volatile
 8001074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001078:	f383 8811 	msr	BASEPRI, r3
 800107c:	f3bf 8f6f 	isb	sy
 8001080:	f3bf 8f4f 	dsb	sy
 8001084:	60bb      	str	r3, [r7, #8]
}
 8001086:	bf00      	nop
 8001088:	e7fe      	b.n	8001088 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <vPortFreeMicroROS+0xac>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4013      	ands	r3, r2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d019      	beq.n	80010cc <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d115      	bne.n	80010cc <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <vPortFreeMicroROS+0xac>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	401a      	ands	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80010b0:	f00c fd6c 	bl	800db8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <vPortFreeMicroROS+0xb0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <vPortFreeMicroROS+0xb0>)
 80010c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80010c2:	6938      	ldr	r0, [r7, #16]
 80010c4:	f000 f8dc 	bl	8001280 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80010c8:	f00c fd6e 	bl	800dba8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20004610 	.word	0x20004610
 80010d8:	20004608 	.word	0x20004608

080010dc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80010e8:	2308      	movs	r3, #8
 80010ea:	425b      	negs	r3, r3
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	4413      	add	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <getBlockSize+0x38>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	43db      	mvns	r3, r3
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]

	return count;
 8001104:	68fb      	ldr	r3, [r7, #12]
}
 8001106:	4618      	mov	r0, r3
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20004610 	.word	0x20004610

08001118 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001122:	f00c fd33 	bl	800db8c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f7ff feba 	bl	8000ea0 <pvPortMallocMicroROS>
 800112c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d017      	beq.n	8001164 <pvPortReallocMicroROS+0x4c>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d014      	beq.n	8001164 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffce 	bl	80010dc <getBlockSize>
 8001140:	4603      	mov	r3, r0
 8001142:	2208      	movs	r2, #8
 8001144:	1a9b      	subs	r3, r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d201      	bcs.n	8001154 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f019 fb2f 	bl	801a7bc <memcpy>

		vPortFreeMicroROS(pv);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ff62 	bl	8001028 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001164:	f00c fd20 	bl	800dba8 <xTaskResumeAll>

	return newmem;
 8001168:	68bb      	ldr	r3, [r7, #8]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800117c:	f00c fd06 	bl	800db8c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff fe88 	bl	8000ea0 <pvPortMallocMicroROS>
 8001190:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001196:	e004      	b.n	80011a2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	613a      	str	r2, [r7, #16]
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	1e5a      	subs	r2, r3, #1
 80011a6:	617a      	str	r2, [r7, #20]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f5      	bne.n	8001198 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80011ac:	f00c fcfc 	bl	800dba8 <xTaskResumeAll>
  	return mem;
 80011b0:	68fb      	ldr	r3, [r7, #12]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80011c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80011c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <prvHeapInit+0xac>)
 80011ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00c      	beq.n	80011f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3307      	adds	r3, #7
 80011da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f023 0307 	bic.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <prvHeapInit+0xac>)
 80011ec:	4413      	add	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80011f4:	4a1d      	ldr	r2, [pc, #116]	; (800126c <prvHeapInit+0xb0>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <prvHeapInit+0xb0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	4413      	add	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001208:	2208      	movs	r2, #8
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f023 0307 	bic.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <prvHeapInit+0xb4>)
 800121c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <prvHeapInit+0xb4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <prvHeapInit+0xb4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	1ad2      	subs	r2, r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <prvHeapInit+0xb4>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <prvHeapInit+0xb8>)
 800124a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <prvHeapInit+0xbc>)
 8001252:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <prvHeapInit+0xc0>)
 8001256:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	200009fc 	.word	0x200009fc
 800126c:	200045fc 	.word	0x200045fc
 8001270:	20004604 	.word	0x20004604
 8001274:	2000460c 	.word	0x2000460c
 8001278:	20004608 	.word	0x20004608
 800127c:	20004610 	.word	0x20004610

08001280 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <prvInsertBlockIntoFreeList+0xac>)
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	e002      	b.n	8001294 <prvInsertBlockIntoFreeList+0x14>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	d8f7      	bhi.n	800128e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4413      	add	r3, r2
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d108      	bne.n	80012c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	441a      	add	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	441a      	add	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d118      	bne.n	8001308 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <prvInsertBlockIntoFreeList+0xb0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d00d      	beq.n	80012fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	441a      	add	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	e008      	b.n	8001310 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <prvInsertBlockIntoFreeList+0xb0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e003      	b.n	8001310 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	d002      	beq.n	800131e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200045fc 	.word	0x200045fc
 8001330:	20004604 	.word	0x20004604

08001334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_DMA_Init+0x98>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <MX_DMA_Init+0x98>)
 8001344:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <MX_DMA_Init+0x98>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_DMA_Init+0x98>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <MX_DMA_Init+0x98>)
 8001360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_DMA_Init+0x98>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2105      	movs	r1, #5
 8001376:	200c      	movs	r0, #12
 8001378:	f002 fa1a 	bl	80037b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800137c:	200c      	movs	r0, #12
 800137e:	f002 fa33 	bl	80037e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2105      	movs	r1, #5
 8001386:	200e      	movs	r0, #14
 8001388:	f002 fa12 	bl	80037b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800138c:	200e      	movs	r0, #14
 800138e:	f002 fa2b 	bl	80037e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2105      	movs	r1, #5
 8001396:	2038      	movs	r0, #56	; 0x38
 8001398:	f002 fa0a 	bl	80037b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800139c:	2038      	movs	r0, #56	; 0x38
 800139e:	f002 fa23 	bl	80037e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2105      	movs	r1, #5
 80013a6:	203a      	movs	r0, #58	; 0x3a
 80013a8:	f002 fa02 	bl	80037b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80013ac:	203a      	movs	r0, #58	; 0x3a
 80013ae:	f002 fa1b 	bl	80037e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2105      	movs	r1, #5
 80013b6:	2046      	movs	r0, #70	; 0x46
 80013b8:	f002 f9fa 	bl	80037b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80013bc:	2046      	movs	r0, #70	; 0x46
 80013be:	f002 fa13 	bl	80037e8 <HAL_NVIC_EnableIRQ>

}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80013de:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80013e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e4:	4904      	ldr	r1, [pc, #16]	; (80013f8 <cubemx_transport_open+0x28>)
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f006 fcf0 	bl	8007dcc <HAL_UART_Receive_DMA>
    return true;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20004614 	.word	0x20004614

080013fc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800140a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f006 fd0d 	bl	8007e2c <HAL_UART_DMAStop>
    return true;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001430:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b20      	cmp	r3, #32
 800143c:	d11c      	bne.n	8001478 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	b29b      	uxth	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f006 fc42 	bl	8007cd0 <HAL_UART_Transmit_DMA>
 800144c:	4603      	mov	r3, r0
 800144e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001450:	e002      	b.n	8001458 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001452:	2001      	movs	r0, #1
 8001454:	f00b fb4e 	bl	800caf4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001458:	7cfb      	ldrb	r3, [r7, #19]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d105      	bne.n	800146a <cubemx_transport_write+0x4e>
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b20      	cmp	r3, #32
 8001468:	d1f3      	bne.n	8001452 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800146a:	7cfb      	ldrb	r3, [r7, #19]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <cubemx_transport_write+0x58>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	e002      	b.n	800147a <cubemx_transport_write+0x5e>
 8001474:	2300      	movs	r3, #0
 8001476:	e000      	b.n	800147a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001478:	2300      	movs	r3, #0
    }
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001498:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149e:	b672      	cpsid	i
}
 80014a0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <cubemx_transport_read+0x9c>)
 80014b0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014b2:	b662      	cpsie	i
}
 80014b4:	bf00      	nop
        __enable_irq();
        ms_used++;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80014bc:	2001      	movs	r0, #1
 80014be:	f00b fb19 	bl	800caf4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <cubemx_transport_read+0xa0>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <cubemx_transport_read+0x9c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d103      	bne.n	80014d6 <cubemx_transport_read+0x52>
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbe3      	blt.n	800149e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80014da:	e011      	b.n	8001500 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <cubemx_transport_read+0xa0>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	440b      	add	r3, r1
 80014e6:	4910      	ldr	r1, [pc, #64]	; (8001528 <cubemx_transport_read+0xa4>)
 80014e8:	5c8a      	ldrb	r2, [r1, r2]
 80014ea:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <cubemx_transport_read+0xa0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <cubemx_transport_read+0xa0>)
 80014f8:	6013      	str	r3, [r2, #0]
        wrote++;
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <cubemx_transport_read+0xa0>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <cubemx_transport_read+0x9c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d003      	beq.n	8001514 <cubemx_transport_read+0x90>
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	d3e3      	bcc.n	80014dc <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001514:	69bb      	ldr	r3, [r7, #24]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20004e18 	.word	0x20004e18
 8001524:	20004e14 	.word	0x20004e14
 8001528:	20004614 	.word	0x20004614

0800152c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of rosTaskLed */
  rosTaskLedHandle = osThreadNew(StartTaskLed, NULL, &rosTaskLed_attributes);
 8001530:	4a08      	ldr	r2, [pc, #32]	; (8001554 <MX_FREERTOS_Init+0x28>)
 8001532:	2100      	movs	r1, #0
 8001534:	4808      	ldr	r0, [pc, #32]	; (8001558 <MX_FREERTOS_Init+0x2c>)
 8001536:	f00b fa4b 	bl	800c9d0 <osThreadNew>
 800153a:	4603      	mov	r3, r0
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <MX_FREERTOS_Init+0x30>)
 800153e:	6013      	str	r3, [r2, #0]

  /* creation of rosTaskCom */
  rosTaskComHandle = osThreadNew(StartTaskCom, NULL, &rosTaskCom_attributes);
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <MX_FREERTOS_Init+0x34>)
 8001542:	2100      	movs	r1, #0
 8001544:	4807      	ldr	r0, [pc, #28]	; (8001564 <MX_FREERTOS_Init+0x38>)
 8001546:	f00b fa43 	bl	800c9d0 <osThreadNew>
 800154a:	4603      	mov	r3, r0
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <MX_FREERTOS_Init+0x3c>)
 800154e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	0801bec4 	.word	0x0801bec4
 8001558:	0800156d 	.word	0x0800156d
 800155c:	20004e1c 	.word	0x20004e1c
 8001560:	0801bee8 	.word	0x0801bee8
 8001564:	080015a1 	.word	0x080015a1
 8001568:	200056dc 	.word	0x200056dc

0800156c <StartTaskLed>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskLed */
void StartTaskLed(void *argument)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001574:	f00d ff82 	bl	800f47c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartTaskLed */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 1);
 8001578:	2201      	movs	r2, #1
 800157a:	2140      	movs	r1, #64	; 0x40
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <StartTaskLed+0x30>)
 800157e:	f002 fefb 	bl	8004378 <HAL_GPIO_WritePin>
		osDelay(100);
 8001582:	2064      	movs	r0, #100	; 0x64
 8001584:	f00b fab6 	bl	800caf4 <osDelay>
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <StartTaskLed+0x30>)
 800158e:	f002 fef3 	bl	8004378 <HAL_GPIO_WritePin>
		osDelay(200);
 8001592:	20c8      	movs	r0, #200	; 0xc8
 8001594:	f00b faae 	bl	800caf4 <osDelay>
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 1);
 8001598:	e7ee      	b.n	8001578 <StartTaskLed+0xc>
 800159a:	bf00      	nop
 800159c:	40020000 	.word	0x40020000

080015a0 <StartTaskCom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCom */
void StartTaskCom(void *argument)
{
 80015a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015a4:	b0de      	sub	sp, #376	; 0x178
 80015a6:	af02      	add	r7, sp, #8
 80015a8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80015ac:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80015b0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTaskCom */
	rmw_uros_set_custom_transport(
 80015b2:	4b87      	ldr	r3, [pc, #540]	; (80017d0 <StartTaskCom+0x230>)
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	4b87      	ldr	r3, [pc, #540]	; (80017d4 <StartTaskCom+0x234>)
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4b87      	ldr	r3, [pc, #540]	; (80017d8 <StartTaskCom+0x238>)
 80015bc:	4a87      	ldr	r2, [pc, #540]	; (80017dc <StartTaskCom+0x23c>)
 80015be:	4988      	ldr	r1, [pc, #544]	; (80017e0 <StartTaskCom+0x240>)
 80015c0:	2001      	movs	r0, #1
 80015c2:	f00e fe7d 	bl	80102c0 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80015c6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00e fdfa 	bl	80101c4 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80015d0:	4b84      	ldr	r3, [pc, #528]	; (80017e4 <StartTaskCom+0x244>)
 80015d2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	freeRTOS_allocator.deallocate = microros_deallocate;
 80015d6:	4b84      	ldr	r3, [pc, #528]	; (80017e8 <StartTaskCom+0x248>)
 80015d8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	freeRTOS_allocator.reallocate = microros_reallocate;
 80015dc:	4b83      	ldr	r3, [pc, #524]	; (80017ec <StartTaskCom+0x24c>)
 80015de:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80015e2:	4b83      	ldr	r3, [pc, #524]	; (80017f0 <StartTaskCom+0x250>)
 80015e4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

	if (!rcutils_set_default_allocator(&freeRTOS_allocator))
 80015e8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00e fdf7 	bl	80101e0 <rcutils_set_default_allocator>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f083 0301 	eor.w	r3, r3, #1
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <StartTaskCom+0x66>
	{	printf("Error on default allocators (line %d)\n", __LINE__);
 80015fe:	21cb      	movs	r1, #203	; 0xcb
 8001600:	487c      	ldr	r0, [pc, #496]	; (80017f4 <StartTaskCom+0x254>)
 8001602:	f019 f9e7 	bl	801a9d4 <iprintf>

	rclc_support_t support;
	rcl_allocator_t allocator;
	rcl_node_t node;

	allocator = rcl_get_default_allocator();
 8001606:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800160a:	f5a3 74a2 	sub.w	r4, r3, #324	; 0x144
 800160e:	463b      	mov	r3, r7
 8001610:	4618      	mov	r0, r3
 8001612:	f00e fe03 	bl	801021c <rcutils_get_default_allocator>
 8001616:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800161a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800161e:	461d      	mov	r5, r3
 8001620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001624:	682b      	ldr	r3, [r5, #0]
 8001626:	6023      	str	r3, [r4, #0]

	//create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 8001628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800162c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001630:	2200      	movs	r2, #0
 8001632:	2100      	movs	r1, #0
 8001634:	f00e fd04 	bl	8010040 <rclc_support_init>

	// create node
	rclc_node_init_default(&node, "pnav32", "", &support);
 8001638:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800163c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001640:	4a6d      	ldr	r2, [pc, #436]	; (80017f8 <StartTaskCom+0x258>)
 8001642:	496e      	ldr	r1, [pc, #440]	; (80017fc <StartTaskCom+0x25c>)
 8001644:	f00e fd46 	bl	80100d4 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_default( &publisher0, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), "pInt32");
 8001648:	f00f fdfc 	bl	8011244 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800164c:	4602      	mov	r2, r0
 800164e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001652:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8001656:	4b6a      	ldr	r3, [pc, #424]	; (8001800 <StartTaskCom+0x260>)
 8001658:	f00e fd78 	bl	801014c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher1, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int64), "pInt64");
 800165c:	f00f fe0a 	bl	8011274 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>
 8001660:	4602      	mov	r2, r0
 8001662:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001666:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 800166a:	4b66      	ldr	r3, [pc, #408]	; (8001804 <StartTaskCom+0x264>)
 800166c:	f00e fd6e 	bl	801014c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher2, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, BatteryState), "pBatt");
 8001670:	f00f faa0 	bl	8010bb4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>
 8001674:	4602      	mov	r2, r0
 8001676:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800167a:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 800167e:	4b62      	ldr	r3, [pc, #392]	; (8001808 <StartTaskCom+0x268>)
 8001680:	f00e fd64 	bl	801014c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher3, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Temperature), "pTemp");
 8001684:	f00f faae 	bl	8010be4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>
 8001688:	4602      	mov	r2, r0
 800168a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800168e:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8001692:	4b5e      	ldr	r3, [pc, #376]	; (800180c <StartTaskCom+0x26c>)
 8001694:	f00e fd5a 	bl	801014c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher4, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Temperature), "pFloat64M");
 8001698:	f00f faa4 	bl	8010be4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>
 800169c:	4602      	mov	r2, r0
 800169e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80016a2:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 80016a6:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <StartTaskCom+0x270>)
 80016a8:	f00e fd50 	bl	801014c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher5, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Temperature), "pColorRGBA");
 80016ac:	f00f fa9a 	bl	8010be4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80016b6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80016ba:	4b56      	ldr	r3, [pc, #344]	; (8001814 <StartTaskCom+0x274>)
 80016bc:	f00e fd46 	bl	801014c <rclc_publisher_init_default>

	// preinit with test value
	msg0.data = 1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	msg1.data = 10;
 80016c6:	f04f 020a 	mov.w	r2, #10
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	msg2.voltage = 24.9;
 80016d2:	4b51      	ldr	r3, [pc, #324]	; (8001818 <StartTaskCom+0x278>)
 80016d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	msg2.charge = 35;
 80016d8:	4b50      	ldr	r3, [pc, #320]	; (800181c <StartTaskCom+0x27c>)
 80016da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	msg2.current = 10;
 80016de:	4b50      	ldr	r3, [pc, #320]	; (8001820 <StartTaskCom+0x280>)
 80016e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	msg3.temperature = 45;
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <StartTaskCom+0x284>)
 80016ea:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	msg5.r= 127;
 80016ee:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <StartTaskCom+0x288>)
 80016f0:	677b      	str	r3, [r7, #116]	; 0x74
	msg5.g= 127;
 80016f2:	4b4d      	ldr	r3, [pc, #308]	; (8001828 <StartTaskCom+0x288>)
 80016f4:	67bb      	str	r3, [r7, #120]	; 0x78
	msg5.b= 100;
 80016f6:	4b4d      	ldr	r3, [pc, #308]	; (800182c <StartTaskCom+0x28c>)
 80016f8:	67fb      	str	r3, [r7, #124]	; 0x7c
	msg5.a= 200;
 80016fa:	4b4d      	ldr	r3, [pc, #308]	; (8001830 <StartTaskCom+0x290>)
 80016fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  for(;;)
  {

	// Led ON
	HAL_GPIO_WritePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	484b      	ldr	r0, [pc, #300]	; (8001834 <StartTaskCom+0x294>)
 8001706:	f002 fe37 	bl	8004378 <HAL_GPIO_WritePin>

	msg0.data++;
 800170a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800170e:	3301      	adds	r3, #1
 8001710:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	msg1.data++;
 8001714:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001718:	f112 0801 	adds.w	r8, r2, #1
 800171c:	f143 0900 	adc.w	r9, r3, #0
 8001720:	e9c7 8950 	strd	r8, r9, [r7, #320]	; 0x140
	msg2.voltage += 0.001;
 8001724:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff1d 	bl	8000568 <__aeabi_f2d>
 800172e:	a326      	add	r3, pc, #152	; (adr r3, 80017c8 <StartTaskCom+0x228>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7fe fdba 	bl	80002ac <__adddf3>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f7fe ff6a 	bl	8000618 <__aeabi_d2f>
 8001744:	4603      	mov	r3, r0
 8001746:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	msg3.temperature += 0.001;
 800174a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800174e:	a31e      	add	r3, pc, #120	; (adr r3, 80017c8 <StartTaskCom+0x228>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe fdaa 	bl	80002ac <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	msg5.g++;
 8001760:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001768:	ee77 7a87 	vadd.f32	s15, s15, s14
 800176c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	rcl_ret_t ret;
	ret = rcl_publish(&publisher0, &msg0, NULL);
 8001770:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001774:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001778:	2200      	movs	r2, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f00e fc3c 	bl	800fff8 <rcl_publish>
 8001780:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
	ret += rcl_publish(&publisher1, &msg1, NULL);
 8001784:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001788:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800178c:	2200      	movs	r2, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f00e fc32 	bl	800fff8 <rcl_publish>
 8001794:	4602      	mov	r2, r0
 8001796:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800179a:	4413      	add	r3, r2
 800179c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
//	ret += rcl_publish(&publisher2, &msg2, NULL);
//	ret += rcl_publish(&publisher3, &msg3, NULL);
//	ret += rcl_publish(&publisher4, &msg4, NULL);
//	ret += rcl_publish(&publisher4, &msg4, NULL);

	if (ret != RCL_RET_OK)
 80017a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <StartTaskCom+0x212>
	{
	  printf("Error publishing (line %d)\n", __LINE__);
 80017a8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80017ac:	4822      	ldr	r0, [pc, #136]	; (8001838 <StartTaskCom+0x298>)
 80017ae:	f019 f911 	bl	801a9d4 <iprintf>
	}

	// Led turn Off
	HAL_GPIO_WritePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin, 1);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	481f      	ldr	r0, [pc, #124]	; (8001834 <StartTaskCom+0x294>)
 80017b8:	f002 fdde 	bl	8004378 <HAL_GPIO_WritePin>
	osDelay(100);
 80017bc:	2064      	movs	r0, #100	; 0x64
 80017be:	f00b f999 	bl	800caf4 <osDelay>
  {
 80017c2:	e79d      	b.n	8001700 <StartTaskCom+0x160>
 80017c4:	f3af 8000 	nop.w
 80017c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017cc:	3f50624d 	.word	0x3f50624d
 80017d0:	08001485 	.word	0x08001485
 80017d4:	0800141d 	.word	0x0800141d
 80017d8:	080013fd 	.word	0x080013fd
 80017dc:	080013d1 	.word	0x080013d1
 80017e0:	20011624 	.word	0x20011624
 80017e4:	08001c21 	.word	0x08001c21
 80017e8:	08001c65 	.word	0x08001c65
 80017ec:	08001c9d 	.word	0x08001c9d
 80017f0:	08001d09 	.word	0x08001d09
 80017f4:	0801bde8 	.word	0x0801bde8
 80017f8:	0801be10 	.word	0x0801be10
 80017fc:	0801be14 	.word	0x0801be14
 8001800:	0801be1c 	.word	0x0801be1c
 8001804:	0801be24 	.word	0x0801be24
 8001808:	0801be2c 	.word	0x0801be2c
 800180c:	0801be34 	.word	0x0801be34
 8001810:	0801be3c 	.word	0x0801be3c
 8001814:	0801be48 	.word	0x0801be48
 8001818:	41c73333 	.word	0x41c73333
 800181c:	420c0000 	.word	0x420c0000
 8001820:	41200000 	.word	0x41200000
 8001824:	40468000 	.word	0x40468000
 8001828:	42fe0000 	.word	0x42fe0000
 800182c:	42c80000 	.word	0x42c80000
 8001830:	43480000 	.word	0x43480000
 8001834:	40020000 	.word	0x40020000
 8001838:	0801be54 	.word	0x0801be54

0800183c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> S_TIM11_CH1
*/
void MX_GPIO_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	4b59      	ldr	r3, [pc, #356]	; (80019bc <MX_GPIO_Init+0x180>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a58      	ldr	r2, [pc, #352]	; (80019bc <MX_GPIO_Init+0x180>)
 800185c:	f043 0310 	orr.w	r3, r3, #16
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b56      	ldr	r3, [pc, #344]	; (80019bc <MX_GPIO_Init+0x180>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	4b52      	ldr	r3, [pc, #328]	; (80019bc <MX_GPIO_Init+0x180>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a51      	ldr	r2, [pc, #324]	; (80019bc <MX_GPIO_Init+0x180>)
 8001878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b4f      	ldr	r3, [pc, #316]	; (80019bc <MX_GPIO_Init+0x180>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b4b      	ldr	r3, [pc, #300]	; (80019bc <MX_GPIO_Init+0x180>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a4a      	ldr	r2, [pc, #296]	; (80019bc <MX_GPIO_Init+0x180>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b48      	ldr	r3, [pc, #288]	; (80019bc <MX_GPIO_Init+0x180>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b44      	ldr	r3, [pc, #272]	; (80019bc <MX_GPIO_Init+0x180>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a43      	ldr	r2, [pc, #268]	; (80019bc <MX_GPIO_Init+0x180>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b41      	ldr	r3, [pc, #260]	; (80019bc <MX_GPIO_Init+0x180>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <MX_GPIO_Init+0x180>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a3c      	ldr	r2, [pc, #240]	; (80019bc <MX_GPIO_Init+0x180>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <MX_GPIO_Init+0x180>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b36      	ldr	r3, [pc, #216]	; (80019bc <MX_GPIO_Init+0x180>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a35      	ldr	r2, [pc, #212]	; (80019bc <MX_GPIO_Init+0x180>)
 80018e8:	f043 0308 	orr.w	r3, r3, #8
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b33      	ldr	r3, [pc, #204]	; (80019bc <MX_GPIO_Init+0x180>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8001900:	482f      	ldr	r0, [pc, #188]	; (80019c0 <MX_GPIO_Init+0x184>)
 8001902:	f002 fd39 	bl	8004378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_MOT_ENABLE_Pin|O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 6164 	mov.w	r1, #3648	; 0xe40
 800190c:	482d      	ldr	r0, [pc, #180]	; (80019c4 <MX_GPIO_Init+0x188>)
 800190e:	f002 fd33 	bl	8004378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_PWR_REG_EN_GPIO_Port, O_PWR_REG_EN_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001918:	482b      	ldr	r0, [pc, #172]	; (80019c8 <MX_GPIO_Init+0x18c>)
 800191a:	f002 fd2d 	bl	8004378 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = I_KEY1_Pin|I_KEY0_Pin;
 800191e:	2318      	movs	r3, #24
 8001920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001926:	2301      	movs	r3, #1
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	4619      	mov	r1, r3
 8001930:	4826      	ldr	r0, [pc, #152]	; (80019cc <MX_GPIO_Init+0x190>)
 8001932:	f002 fb85 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin;
 8001936:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800193a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	481c      	ldr	r0, [pc, #112]	; (80019c0 <MX_GPIO_Init+0x184>)
 8001950:	f002 fb76 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = O_MOT_ENABLE_Pin|O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin;
 8001954:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	2301      	movs	r3, #1
 800195c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4619      	mov	r1, r3
 800196c:	4815      	ldr	r0, [pc, #84]	; (80019c4 <MX_GPIO_Init+0x188>)
 800196e:	f002 fb67 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_PWR_REG_EN_Pin;
 8001972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(O_PWR_REG_EN_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	480f      	ldr	r0, [pc, #60]	; (80019c8 <MX_GPIO_Init+0x18c>)
 800198c:	f002 fb58 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TIM_AUX2_PWM_Pin;
 8001990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80019a2:	2303      	movs	r3, #3
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TIM_AUX2_PWM_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	4806      	ldr	r0, [pc, #24]	; (80019c8 <MX_GPIO_Init+0x18c>)
 80019ae:	f002 fb47 	bl	8004040 <HAL_GPIO_Init>

}
 80019b2:	bf00      	nop
 80019b4:	3730      	adds	r7, #48	; 0x30
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40021000 	.word	0x40021000

080019d0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_I2C2_Init+0x50>)
 80019d6:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <MX_I2C2_Init+0x54>)
 80019d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_I2C2_Init+0x50>)
 80019dc:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_I2C2_Init+0x58>)
 80019de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_I2C2_Init+0x50>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_I2C2_Init+0x50>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_I2C2_Init+0x50>)
 80019ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <MX_I2C2_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_I2C2_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <MX_I2C2_Init+0x50>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_I2C2_Init+0x50>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_I2C2_Init+0x50>)
 8001a0e:	f002 fccd 	bl	80043ac <HAL_I2C_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a18:	f000 f8fc 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2001131c 	.word	0x2001131c
 8001a24:	40005800 	.word	0x40005800
 8001a28:	000186a0 	.word	0x000186a0

08001a2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <HAL_I2C_MspInit+0x84>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d12c      	bne.n	8001aa8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_I2C_MspInit+0x88>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <HAL_I2C_MspInit+0x88>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_I2C_MspInit+0x88>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001a6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a70:	2312      	movs	r3, #18
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <HAL_I2C_MspInit+0x8c>)
 8001a88:	f002 fada 	bl	8004040 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_I2C_MspInit+0x88>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_I2C_MspInit+0x88>)
 8001a96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_I2C_MspInit+0x88>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3728      	adds	r7, #40	; 0x28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40005800 	.word	0x40005800
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020400 	.word	0x40020400

08001abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac0:	f001 faf6 	bl	80030b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac4:	f000 f82a 	bl	8001b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac8:	f7ff feb8 	bl	800183c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001acc:	f000 fc92 	bl	80023f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ad0:	f000 fce8 	bl	80024a4 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001ad4:	f000 fe14 	bl	8002700 <MX_TIM8_Init>
  MX_I2C2_Init();
 8001ad8:	f7ff ff7a 	bl	80019d0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001adc:	f000 fa3a 	bl	8001f54 <MX_SPI1_Init>
  MX_DMA_Init();
 8001ae0:	f7ff fc28 	bl	8001334 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001ae4:	f001 f8ae 	bl	8002c44 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001ae8:	f7fe ffb8 	bl	8000a5c <MX_ADC1_Init>
  MX_ADC3_Init();
 8001aec:	f7ff f808 	bl	8000b00 <MX_ADC3_Init>
  MX_TIM3_Init();
 8001af0:	f000 fd2c 	bl	800254c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001af4:	f000 fda6 	bl	8002644 <MX_TIM4_Init>
  MX_UART5_Init();
 8001af8:	f001 f87a 	bl	8002bf0 <MX_UART5_Init>
  MX_CRC_Init();
 8001afc:	f7ff f99a 	bl	8000e34 <MX_CRC_Init>
  MX_RNG_Init();
 8001b00:	f000 f9f2 	bl	8001ee8 <MX_RNG_Init>
  MX_TIM14_Init();
 8001b04:	f000 feaa 	bl	800285c <MX_TIM14_Init>
  MX_USART3_UART_Init();
 8001b08:	f001 f8c6 	bl	8002c98 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001b0c:	f00a ff16 	bl	800c93c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001b10:	f7ff fd0c 	bl	800152c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b14:	f00a ff36 	bl	800c984 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <main+0x5c>
	...

08001b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b094      	sub	sp, #80	; 0x50
 8001b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b22:	f107 0320 	add.w	r3, r7, #32
 8001b26:	2230      	movs	r2, #48	; 0x30
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f018 fe54 	bl	801a7d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <SystemClock_Config+0xcc>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	4a27      	ldr	r2, [pc, #156]	; (8001be8 <SystemClock_Config+0xcc>)
 8001b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b50:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <SystemClock_Config+0xcc>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <SystemClock_Config+0xd0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a21      	ldr	r2, [pc, #132]	; (8001bec <SystemClock_Config+0xd0>)
 8001b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <SystemClock_Config+0xd0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b82:	2302      	movs	r3, #2
 8001b84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b90:	23a8      	movs	r3, #168	; 0xa8
 8001b92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b94:	2302      	movs	r3, #2
 8001b96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b98:	2307      	movs	r3, #7
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b9c:	f107 0320 	add.w	r3, r7, #32
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 ffc5 	bl	8005b30 <HAL_RCC_OscConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bac:	f000 f832 	bl	8001c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	2105      	movs	r1, #5
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f004 fa26 	bl	8006020 <HAL_RCC_ClockConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bda:	f000 f81b 	bl	8001c14 <Error_Handler>
  }
}
 8001bde:	bf00      	nop
 8001be0:	3750      	adds	r7, #80	; 0x50
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40007000 	.word	0x40007000

08001bf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c02:	f001 fa77 	bl	80030f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40014400 	.word	0x40014400

08001c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
}
 8001c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <Error_Handler+0x8>
	...

08001c20 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <microros_allocate+0x3c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <microros_allocate+0x3c>)
 8001c38:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <microros_allocate+0x40>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <microros_allocate+0x40>)
 8001c48:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff f928 	bl	8000ea0 <pvPortMallocMicroROS>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20011370 	.word	0x20011370
 8001c60:	20011374 	.word	0x20011374

08001c64 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00c      	beq.n	8001c8e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fa31 	bl	80010dc <getBlockSize>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <microros_deallocate+0x34>)
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <microros_deallocate+0x34>)
 8001c86:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff f9cd 	bl	8001028 <vPortFreeMicroROS>
  }
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20011374 	.word	0x20011374

08001c9c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <microros_reallocate+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <microros_reallocate+0x64>)
 8001cb6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <microros_reallocate+0x68>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <microros_reallocate+0x68>)
 8001cc6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d104      	bne.n	8001cd8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001cce:	68b8      	ldr	r0, [r7, #8]
 8001cd0:	f7ff f8e6 	bl	8000ea0 <pvPortMallocMicroROS>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	e00e      	b.n	8001cf6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7ff f9ff 	bl	80010dc <getBlockSize>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <microros_reallocate+0x68>)
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <microros_reallocate+0x68>)
 8001cea:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7ff fa12 	bl	8001118 <pvPortReallocMicroROS>
 8001cf4:	4603      	mov	r3, r0
  }
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20011370 	.word	0x20011370
 8001d04:	20011374 	.word	0x20011374

08001d08 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <microros_zero_allocate+0x48>)
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	4413      	add	r3, r2
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <microros_zero_allocate+0x48>)
 8001d26:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <microros_zero_allocate+0x4c>)
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <microros_zero_allocate+0x4c>)
 8001d3a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f7ff fa17 	bl	8001172 <pvPortCallocMicroROS>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20011370 	.word	0x20011370
 8001d54:	20011374 	.word	0x20011374

08001d58 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001d58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001d6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d6e:	a320      	add	r3, pc, #128	; (adr r3, 8001df0 <UTILS_NanosecondsToTimespec+0x98>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fca0 	bl	80006b8 <__aeabi_ldivmod>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001d82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d86:	a31a      	add	r3, pc, #104	; (adr r3, 8001df0 <UTILS_NanosecondsToTimespec+0x98>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fc94 	bl	80006b8 <__aeabi_ldivmod>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	da20      	bge.n	8001dde <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <UTILS_NanosecondsToTimespec+0x90>)
 8001da2:	fb82 1203 	smull	r1, r2, r2, r3
 8001da6:	1712      	asrs	r2, r2, #28
 8001da8:	17db      	asrs	r3, r3, #31
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	6979      	ldr	r1, [r7, #20]
 8001db8:	17c8      	asrs	r0, r1, #31
 8001dba:	460c      	mov	r4, r1
 8001dbc:	4605      	mov	r5, r0
 8001dbe:	ebb2 0804 	subs.w	r8, r2, r4
 8001dc2:	eb63 0905 	sbc.w	r9, r3, r5
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	4906      	ldr	r1, [pc, #24]	; (8001dec <UTILS_NanosecondsToTimespec+0x94>)
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	441a      	add	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
    }
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001de8:	44b82fa1 	.word	0x44b82fa1
 8001dec:	3b9aca00 	.word	0x3b9aca00
 8001df0:	3b9aca00 	.word	0x3b9aca00
 8001df4:	00000000 	.word	0x00000000

08001df8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dfc:	b08e      	sub	sp, #56	; 0x38
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6278      	str	r0, [r7, #36]	; 0x24
 8001e02:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001e04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e08:	2300      	movs	r3, #0
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f00c f942 	bl	800e0a8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	17da      	asrs	r2, r3, #31
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	61fa      	str	r2, [r7, #28]
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	69b9      	ldr	r1, [r7, #24]
 8001e36:	000b      	movs	r3, r1
 8001e38:	2200      	movs	r2, #0
 8001e3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	2200      	movs	r2, #0
 8001e42:	461c      	mov	r4, r3
 8001e44:	4615      	mov	r5, r2
 8001e46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e4a:	1911      	adds	r1, r2, r4
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	416b      	adcs	r3, r5
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e56:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001e5a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	f04f 0400 	mov.w	r4, #0
 8001e66:	f04f 0500 	mov.w	r5, #0
 8001e6a:	015d      	lsls	r5, r3, #5
 8001e6c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001e70:	0154      	lsls	r4, r2, #5
 8001e72:	4622      	mov	r2, r4
 8001e74:	462b      	mov	r3, r5
 8001e76:	ebb2 0800 	subs.w	r8, r2, r0
 8001e7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001e8a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001e8e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001e92:	4690      	mov	r8, r2
 8001e94:	4699      	mov	r9, r3
 8001e96:	eb18 0a00 	adds.w	sl, r8, r0
 8001e9a:	eb49 0b01 	adc.w	fp, r9, r1
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001eaa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eb2:	ebb2 040a 	subs.w	r4, r2, sl
 8001eb6:	603c      	str	r4, [r7, #0]
 8001eb8:	eb63 030b 	sbc.w	r3, r3, fp
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ec2:	4623      	mov	r3, r4
 8001ec4:	181b      	adds	r3, r3, r0
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	462b      	mov	r3, r5
 8001eca:	eb41 0303 	adc.w	r3, r1, r3
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	6a3a      	ldr	r2, [r7, #32]
 8001ed2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ed6:	f7ff ff3f 	bl	8001d58 <UTILS_NanosecondsToTimespec>

    return 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	3738      	adds	r7, #56	; 0x38
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001ee8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_RNG_Init+0x20>)
 8001eee:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <MX_RNG_Init+0x24>)
 8001ef0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_RNG_Init+0x20>)
 8001ef4:	f004 fae6 	bl	80064c4 <HAL_RNG_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001efe:	f7ff fe89 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20011378 	.word	0x20011378
 8001f0c:	50060800 	.word	0x50060800

08001f10 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <HAL_RNG_MspInit+0x3c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10d      	bne.n	8001f3e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_RNG_MspInit+0x40>)
 8001f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2a:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_RNG_MspInit+0x40>)
 8001f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f30:	6353      	str	r3, [r2, #52]	; 0x34
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <HAL_RNG_MspInit+0x40>)
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	50060800 	.word	0x50060800
 8001f50:	40023800 	.word	0x40023800

08001f54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <MX_SPI1_Init+0x64>)
 8001f5a:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <MX_SPI1_Init+0x68>)
 8001f5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <MX_SPI1_Init+0x64>)
 8001f60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <MX_SPI1_Init+0x64>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <MX_SPI1_Init+0x64>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_SPI1_Init+0x64>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <MX_SPI1_Init+0x64>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_SPI1_Init+0x64>)
 8001f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_SPI1_Init+0x64>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <MX_SPI1_Init+0x64>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_SPI1_Init+0x64>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <MX_SPI1_Init+0x64>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_SPI1_Init+0x64>)
 8001fa0:	220a      	movs	r2, #10
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fa4:	4804      	ldr	r0, [pc, #16]	; (8001fb8 <MX_SPI1_Init+0x64>)
 8001fa6:	f004 fab7 	bl	8006518 <HAL_SPI_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fb0:	f7ff fe30 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20011388 	.word	0x20011388
 8001fbc:	40013000 	.word	0x40013000

08001fc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_SPI_MspInit+0x84>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d12b      	bne.n	800203a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <HAL_SPI_MspInit+0x88>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a17      	ldr	r2, [pc, #92]	; (8002048 <HAL_SPI_MspInit+0x88>)
 8001fec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_SPI_MspInit+0x88>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_SPI_MspInit+0x88>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a10      	ldr	r2, [pc, #64]	; (8002048 <HAL_SPI_MspInit+0x88>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_SPI_MspInit+0x88>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800201a:	2338      	movs	r3, #56	; 0x38
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002026:	2303      	movs	r3, #3
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800202a:	2305      	movs	r3, #5
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	4805      	ldr	r0, [pc, #20]	; (800204c <HAL_SPI_MspInit+0x8c>)
 8002036:	f002 f803 	bl	8004040 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800203a:	bf00      	nop
 800203c:	3728      	adds	r7, #40	; 0x28
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40013000 	.word	0x40013000
 8002048:	40023800 	.word	0x40023800
 800204c:	40020400 	.word	0x40020400

08002050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_MspInit+0x54>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <HAL_MspInit+0x54>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	6453      	str	r3, [r2, #68]	; 0x44
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_MspInit+0x54>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_MspInit+0x54>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_MspInit+0x54>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002080:	6413      	str	r3, [r2, #64]	; 0x40
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_MspInit+0x54>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	210f      	movs	r1, #15
 8002092:	f06f 0001 	mvn.w	r0, #1
 8002096:	f001 fb8b 	bl	80037b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	; 0x30
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	2019      	movs	r0, #25
 80020be:	f001 fb77 	bl	80037b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020c2:	2019      	movs	r0, #25
 80020c4:	f001 fb90 	bl	80037e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <HAL_InitTick+0xa4>)
 80020ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d0:	4a1e      	ldr	r2, [pc, #120]	; (800214c <HAL_InitTick+0xa4>)
 80020d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d6:	6453      	str	r3, [r2, #68]	; 0x44
 80020d8:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_InitTick+0xa4>)
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020e4:	f107 0210 	add.w	r2, r7, #16
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f004 f9b6 	bl	8006460 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80020f4:	f004 f9a0 	bl	8006438 <HAL_RCC_GetPCLK2Freq>
 80020f8:	4603      	mov	r3, r0
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	4a13      	ldr	r2, [pc, #76]	; (8002150 <HAL_InitTick+0xa8>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	0c9b      	lsrs	r3, r3, #18
 8002108:	3b01      	subs	r3, #1
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_InitTick+0xac>)
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <HAL_InitTick+0xb0>)
 8002110:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_InitTick+0xac>)
 8002114:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002118:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800211a:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <HAL_InitTick+0xac>)
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_InitTick+0xac>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_InitTick+0xac>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <HAL_InitTick+0xac>)
 800212e:	f004 fa7c 	bl	800662a <HAL_TIM_Base_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d104      	bne.n	8002142 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8002138:	4806      	ldr	r0, [pc, #24]	; (8002154 <HAL_InitTick+0xac>)
 800213a:	f004 fac5 	bl	80066c8 <HAL_TIM_Base_Start_IT>
 800213e:	4603      	mov	r3, r0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3730      	adds	r7, #48	; 0x30
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	431bde83 	.word	0x431bde83
 8002154:	200113e0 	.word	0x200113e0
 8002158:	40014400 	.word	0x40014400

0800215c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <NMI_Handler+0x4>

08002162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <MemManage_Handler+0x4>

0800216e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <BusFault_Handler+0x4>

08002174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <UsageFault_Handler+0x4>

0800217a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <DMA1_Stream1_IRQHandler+0x10>)
 800218e:	f001 fced 	bl	8003b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2001176c 	.word	0x2001176c

0800219c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <DMA1_Stream3_IRQHandler+0x10>)
 80021a2:	f001 fce3 	bl	8003b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200117cc 	.word	0x200117cc

080021b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021b4:	4803      	ldr	r0, [pc, #12]	; (80021c4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80021b6:	f004 fc94 	bl	8006ae2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80021ba:	4803      	ldr	r0, [pc, #12]	; (80021c8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80021bc:	f004 fc91 	bl	8006ae2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20011430 	.word	0x20011430
 80021c8:	200113e0 	.word	0x200113e0

080021cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <USART1_IRQHandler+0x10>)
 80021d2:	f005 feab 	bl	8007f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20011624 	.word	0x20011624

080021e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <USART3_IRQHandler+0x10>)
 80021e6:	f005 fea1 	bl	8007f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20011668 	.word	0x20011668

080021f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <DMA2_Stream0_IRQHandler+0x10>)
 80021fa:	f001 fcb7 	bl	8003b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000994 	.word	0x20000994

08002208 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <DMA2_Stream2_IRQHandler+0x10>)
 800220e:	f001 fcad 	bl	8003b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200116ac 	.word	0x200116ac

0800221c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <OTG_FS_IRQHandler+0x10>)
 8002222:	f002 fb57 	bl	80048d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20017720 	.word	0x20017720

08002230 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <DMA2_Stream7_IRQHandler+0x10>)
 8002236:	f001 fc99 	bl	8003b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2001170c 	.word	0x2001170c

08002244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
	return 1;
 8002248:	2301      	movs	r3, #1
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <_kill>:

int _kill(int pid, int sig)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800225e:	f018 f8af 	bl	801a3c0 <__errno>
 8002262:	4603      	mov	r3, r0
 8002264:	2216      	movs	r2, #22
 8002266:	601a      	str	r2, [r3, #0]
	return -1;
 8002268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_exit>:

void _exit (int status)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800227c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ffe7 	bl	8002254 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002286:	e7fe      	b.n	8002286 <_exit+0x12>

08002288 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	e00a      	b.n	80022b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800229a:	f3af 8000 	nop.w
 800229e:	4601      	mov	r1, r0
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	60ba      	str	r2, [r7, #8]
 80022a6:	b2ca      	uxtb	r2, r1
 80022a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	3301      	adds	r3, #1
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	dbf0      	blt.n	800229a <_read+0x12>
	}

return len;
 80022b8:	687b      	ldr	r3, [r7, #4]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	e009      	b.n	80022e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	60ba      	str	r2, [r7, #8]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dbf1      	blt.n	80022d4 <_write+0x12>
	}
	return len;
 80022f0:	687b      	ldr	r3, [r7, #4]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <_sbrk>:

caddr_t _sbrk(int incr) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    extern char __heap_start__ asm("end");  // Defined by the linker.
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == NULL) heap_end = &__heap_start__;
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <_sbrk+0x5c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <_sbrk+0x16>
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <_sbrk+0x5c>)
 800230e:	4a13      	ldr	r2, [pc, #76]	; (800235c <_sbrk+0x60>)
 8002310:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <_sbrk+0x5c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	60fb      	str	r3, [r7, #12]

    if (heap_end + incr > &_estack - _Min_Stack_Size) {
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <_sbrk+0x5c>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	441a      	add	r2, r3
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <_sbrk+0x64>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	425b      	negs	r3, r3
 8002326:	490f      	ldr	r1, [pc, #60]	; (8002364 <_sbrk+0x68>)
 8002328:	440b      	add	r3, r1
 800232a:	429a      	cmp	r2, r3
 800232c:	d908      	bls.n	8002340 <_sbrk+0x44>
    		__asm("BKPT #0\n");
 800232e:	be00      	bkpt	0x0000
        errno = ENOMEM;
 8002330:	f018 f846 	bl	801a3c0 <__errno>
 8002334:	4603      	mov	r3, r0
 8002336:	220c      	movs	r2, #12
 8002338:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800233e:	e006      	b.n	800234e <_sbrk+0x52>

    }

    heap_end += incr;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <_sbrk+0x5c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	4a03      	ldr	r2, [pc, #12]	; (8002358 <_sbrk+0x5c>)
 800234a:	6013      	str	r3, [r2, #0]
    return (caddr_t)prev_heap_end;
 800234c:	68fb      	ldr	r3, [r7, #12]

}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2001142c 	.word	0x2001142c
 800235c:	2001c968 	.word	0x2001c968
 8002360:	00000400 	.word	0x00000400
 8002364:	20020000 	.word	0x20020000

08002368 <_close>:

int _close(int file)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	return -1;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002390:	605a      	str	r2, [r3, #4]
	return 0;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <_isatty>:

int _isatty(int file)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	return 1;
 80023a8:	2301      	movs	r3, #1
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
	return 0;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <SystemInit+0x20>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <SystemInit+0x20>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	; 0x30
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	2224      	movs	r2, #36	; 0x24
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f018 f9e8 	bl	801a7d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002410:	4b22      	ldr	r3, [pc, #136]	; (800249c <MX_TIM1_Init+0xa8>)
 8002412:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <MX_TIM1_Init+0xac>)
 8002414:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002416:	4b21      	ldr	r3, [pc, #132]	; (800249c <MX_TIM1_Init+0xa8>)
 8002418:	2200      	movs	r2, #0
 800241a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241c:	4b1f      	ldr	r3, [pc, #124]	; (800249c <MX_TIM1_Init+0xa8>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002422:	4b1e      	ldr	r3, [pc, #120]	; (800249c <MX_TIM1_Init+0xa8>)
 8002424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002428:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <MX_TIM1_Init+0xa8>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <MX_TIM1_Init+0xa8>)
 8002432:	2200      	movs	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <MX_TIM1_Init+0xa8>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800243c:	2303      	movs	r3, #3
 800243e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002444:	2301      	movs	r3, #1
 8002446:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002450:	2300      	movs	r3, #0
 8002452:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002454:	2301      	movs	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002458:	2300      	movs	r3, #0
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002460:	f107 030c 	add.w	r3, r7, #12
 8002464:	4619      	mov	r1, r3
 8002466:	480d      	ldr	r0, [pc, #52]	; (800249c <MX_TIM1_Init+0xa8>)
 8002468:	f004 fa95 	bl	8006996 <HAL_TIM_Encoder_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002472:	f7ff fbcf 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4806      	ldr	r0, [pc, #24]	; (800249c <MX_TIM1_Init+0xa8>)
 8002484:	f005 faf4 	bl	8007a70 <HAL_TIMEx_MasterConfigSynchronization>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800248e:	f7ff fbc1 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	3730      	adds	r7, #48	; 0x30
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20011430 	.word	0x20011430
 80024a0:	40010000 	.word	0x40010000

080024a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	; 0x30
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	2224      	movs	r2, #36	; 0x24
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f018 f990 	bl	801a7d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <MX_TIM2_Init+0xa4>)
 80024c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024c8:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <MX_TIM2_Init+0xa4>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <MX_TIM2_Init+0xa4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80024d4:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <MX_TIM2_Init+0xa4>)
 80024d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024dc:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <MX_TIM2_Init+0xa4>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e2:	4b19      	ldr	r3, [pc, #100]	; (8002548 <MX_TIM2_Init+0xa4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024e8:	2303      	movs	r3, #3
 80024ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024f0:	2301      	movs	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002500:	2301      	movs	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002504:	2300      	movs	r3, #0
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	4619      	mov	r1, r3
 8002512:	480d      	ldr	r0, [pc, #52]	; (8002548 <MX_TIM2_Init+0xa4>)
 8002514:	f004 fa3f 	bl	8006996 <HAL_TIM_Encoder_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800251e:	f7ff fb79 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4806      	ldr	r0, [pc, #24]	; (8002548 <MX_TIM2_Init+0xa4>)
 8002530:	f005 fa9e 	bl	8007a70 <HAL_TIMEx_MasterConfigSynchronization>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800253a:	f7ff fb6b 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	3730      	adds	r7, #48	; 0x30
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20011478 	.word	0x20011478

0800254c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08e      	sub	sp, #56	; 0x38
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002552:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
 800256c:	615a      	str	r2, [r3, #20]
 800256e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800257c:	4b2f      	ldr	r3, [pc, #188]	; (800263c <MX_TIM3_Init+0xf0>)
 800257e:	4a30      	ldr	r2, [pc, #192]	; (8002640 <MX_TIM3_Init+0xf4>)
 8002580:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002582:	4b2e      	ldr	r3, [pc, #184]	; (800263c <MX_TIM3_Init+0xf0>)
 8002584:	2200      	movs	r2, #0
 8002586:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002588:	4b2c      	ldr	r3, [pc, #176]	; (800263c <MX_TIM3_Init+0xf0>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800258e:	4b2b      	ldr	r3, [pc, #172]	; (800263c <MX_TIM3_Init+0xf0>)
 8002590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002594:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002596:	4b29      	ldr	r3, [pc, #164]	; (800263c <MX_TIM3_Init+0xf0>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <MX_TIM3_Init+0xf0>)
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025a2:	4826      	ldr	r0, [pc, #152]	; (800263c <MX_TIM3_Init+0xf0>)
 80025a4:	f004 f94f 	bl	8006846 <HAL_TIM_PWM_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80025ae:	f7ff fb31 	bl	8001c14 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80025b2:	4822      	ldr	r0, [pc, #136]	; (800263c <MX_TIM3_Init+0xf0>)
 80025b4:	f004 f996 	bl	80068e4 <HAL_TIM_IC_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80025be:	f7ff fb29 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025ce:	4619      	mov	r1, r3
 80025d0:	481a      	ldr	r0, [pc, #104]	; (800263c <MX_TIM3_Init+0xf0>)
 80025d2:	f005 fa4d 	bl	8007a70 <HAL_TIMEx_MasterConfigSynchronization>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80025dc:	f7ff fb1a 	bl	8001c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e0:	2360      	movs	r3, #96	; 0x60
 80025e2:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2208      	movs	r2, #8
 80025f6:	4619      	mov	r1, r3
 80025f8:	4810      	ldr	r0, [pc, #64]	; (800263c <MX_TIM3_Init+0xf0>)
 80025fa:	f004 fc73 	bl	8006ee4 <HAL_TIM_PWM_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8002604:	f7ff fb06 	bl	8001c14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002608:	2300      	movs	r3, #0
 800260a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800260c:	2301      	movs	r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	220c      	movs	r2, #12
 800261c:	4619      	mov	r1, r3
 800261e:	4807      	ldr	r0, [pc, #28]	; (800263c <MX_TIM3_Init+0xf0>)
 8002620:	f004 fbc4 	bl	8006dac <HAL_TIM_IC_ConfigChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800262a:	f7ff faf3 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800262e:	4803      	ldr	r0, [pc, #12]	; (800263c <MX_TIM3_Init+0xf0>)
 8002630:	f000 fa5c 	bl	8002aec <HAL_TIM_MspPostInit>

}
 8002634:	bf00      	nop
 8002636:	3738      	adds	r7, #56	; 0x38
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	200114c0 	.word	0x200114c0
 8002640:	40000400 	.word	0x40000400

08002644 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800264a:	f107 0320 	add.w	r3, r7, #32
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	615a      	str	r2, [r3, #20]
 8002664:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <MX_TIM4_Init+0xb4>)
 8002668:	4a24      	ldr	r2, [pc, #144]	; (80026fc <MX_TIM4_Init+0xb8>)
 800266a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800266c:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <MX_TIM4_Init+0xb4>)
 800266e:	2200      	movs	r2, #0
 8002670:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002672:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <MX_TIM4_Init+0xb4>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <MX_TIM4_Init+0xb4>)
 800267a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800267e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002680:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <MX_TIM4_Init+0xb4>)
 8002682:	2200      	movs	r2, #0
 8002684:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <MX_TIM4_Init+0xb4>)
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800268c:	481a      	ldr	r0, [pc, #104]	; (80026f8 <MX_TIM4_Init+0xb4>)
 800268e:	f004 f88b 	bl	80067a8 <HAL_TIM_OC_Init>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002698:	f7ff fabc 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269c:	2300      	movs	r3, #0
 800269e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026a4:	f107 0320 	add.w	r3, r7, #32
 80026a8:	4619      	mov	r1, r3
 80026aa:	4813      	ldr	r0, [pc, #76]	; (80026f8 <MX_TIM4_Init+0xb4>)
 80026ac:	f005 f9e0 	bl	8007a70 <HAL_TIMEx_MasterConfigSynchronization>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80026b6:	f7ff faad 	bl	8001c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	220c      	movs	r2, #12
 80026ce:	4619      	mov	r1, r3
 80026d0:	4809      	ldr	r0, [pc, #36]	; (80026f8 <MX_TIM4_Init+0xb4>)
 80026d2:	f004 fb0f 	bl	8006cf4 <HAL_TIM_OC_ConfigChannel>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80026dc:	f7ff fa9a 	bl	8001c14 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <MX_TIM4_Init+0xb4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	69da      	ldr	r2, [r3, #28]
 80026e6:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <MX_TIM4_Init+0xb4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ee:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026f0:	bf00      	nop
 80026f2:	3728      	adds	r7, #40	; 0x28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20011508 	.word	0x20011508
 80026fc:	40000800 	.word	0x40000800

08002700 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b096      	sub	sp, #88	; 0x58
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002706:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002714:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800271e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	611a      	str	r2, [r3, #16]
 800272e:	615a      	str	r2, [r3, #20]
 8002730:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	2220      	movs	r2, #32
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f018 f84d 	bl	801a7d8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800273e:	4b45      	ldr	r3, [pc, #276]	; (8002854 <MX_TIM8_Init+0x154>)
 8002740:	4a45      	ldr	r2, [pc, #276]	; (8002858 <MX_TIM8_Init+0x158>)
 8002742:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002744:	4b43      	ldr	r3, [pc, #268]	; (8002854 <MX_TIM8_Init+0x154>)
 8002746:	2200      	movs	r2, #0
 8002748:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274a:	4b42      	ldr	r3, [pc, #264]	; (8002854 <MX_TIM8_Init+0x154>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002750:	4b40      	ldr	r3, [pc, #256]	; (8002854 <MX_TIM8_Init+0x154>)
 8002752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002756:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002758:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <MX_TIM8_Init+0x154>)
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <MX_TIM8_Init+0x154>)
 8002760:	2200      	movs	r2, #0
 8002762:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002764:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <MX_TIM8_Init+0x154>)
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800276a:	483a      	ldr	r0, [pc, #232]	; (8002854 <MX_TIM8_Init+0x154>)
 800276c:	f003 ff5d 	bl	800662a <HAL_TIM_Base_Init>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002776:	f7ff fa4d 	bl	8001c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800277a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002780:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002784:	4619      	mov	r1, r3
 8002786:	4833      	ldr	r0, [pc, #204]	; (8002854 <MX_TIM8_Init+0x154>)
 8002788:	f004 fc6e 	bl	8007068 <HAL_TIM_ConfigClockSource>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002792:	f7ff fa3f 	bl	8001c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002796:	482f      	ldr	r0, [pc, #188]	; (8002854 <MX_TIM8_Init+0x154>)
 8002798:	f004 f855 	bl	8006846 <HAL_TIM_PWM_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80027a2:	f7ff fa37 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a6:	2300      	movs	r3, #0
 80027a8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80027ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027b2:	4619      	mov	r1, r3
 80027b4:	4827      	ldr	r0, [pc, #156]	; (8002854 <MX_TIM8_Init+0x154>)
 80027b6:	f005 f95b 	bl	8007a70 <HAL_TIMEx_MasterConfigSynchronization>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80027c0:	f7ff fa28 	bl	8001c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027c4:	2360      	movs	r3, #96	; 0x60
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 512;
 80027c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ce:	2300      	movs	r3, #0
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027d2:	2300      	movs	r3, #0
 80027d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e6:	2204      	movs	r2, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	481a      	ldr	r0, [pc, #104]	; (8002854 <MX_TIM8_Init+0x154>)
 80027ec:	f004 fb7a 	bl	8006ee4 <HAL_TIM_PWM_ConfigChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80027f6:	f7ff fa0d 	bl	8001c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fe:	2208      	movs	r2, #8
 8002800:	4619      	mov	r1, r3
 8002802:	4814      	ldr	r0, [pc, #80]	; (8002854 <MX_TIM8_Init+0x154>)
 8002804:	f004 fb6e 	bl	8006ee4 <HAL_TIM_PWM_ConfigChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 800280e:	f7ff fa01 	bl	8001c14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 2;
 800281e:	2302      	movs	r3, #2
 8002820:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800282a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	4619      	mov	r1, r3
 8002834:	4807      	ldr	r0, [pc, #28]	; (8002854 <MX_TIM8_Init+0x154>)
 8002836:	f005 f997 	bl	8007b68 <HAL_TIMEx_ConfigBreakDeadTime>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8002840:	f7ff f9e8 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002844:	4803      	ldr	r0, [pc, #12]	; (8002854 <MX_TIM8_Init+0x154>)
 8002846:	f000 f951 	bl	8002aec <HAL_TIM_MspPostInit>

}
 800284a:	bf00      	nop
 800284c:	3758      	adds	r7, #88	; 0x58
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20011550 	.word	0x20011550
 8002858:	40010400 	.word	0x40010400

0800285c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <MX_TIM14_Init+0x40>)
 8002862:	4a0f      	ldr	r2, [pc, #60]	; (80028a0 <MX_TIM14_Init+0x44>)
 8002864:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8002866:	4b0d      	ldr	r3, [pc, #52]	; (800289c <MX_TIM14_Init+0x40>)
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <MX_TIM14_Init+0x40>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <MX_TIM14_Init+0x40>)
 8002874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002878:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <MX_TIM14_Init+0x40>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <MX_TIM14_Init+0x40>)
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002886:	4805      	ldr	r0, [pc, #20]	; (800289c <MX_TIM14_Init+0x40>)
 8002888:	f003 fecf 	bl	800662a <HAL_TIM_Base_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002892:	f7ff f9bf 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20011598 	.word	0x20011598
 80028a0:	40002000 	.word	0x40002000

080028a4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08c      	sub	sp, #48	; 0x30
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 031c 	add.w	r3, r7, #28
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a36      	ldr	r2, [pc, #216]	; (800299c <HAL_TIM_Encoder_MspInit+0xf8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d135      	bne.n	8002932 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	4b35      	ldr	r3, [pc, #212]	; (80029a0 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a34      	ldr	r2, [pc, #208]	; (80029a0 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b32      	ldr	r3, [pc, #200]	; (80029a0 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a2d      	ldr	r2, [pc, #180]	; (80029a0 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM_ENC1_A_Pin|TIM_ENC1_B_Pin;
 80028fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002910:	2301      	movs	r3, #1
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	4619      	mov	r1, r3
 800291a:	4822      	ldr	r0, [pc, #136]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x100>)
 800291c:	f001 fb90 	bl	8004040 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002920:	2200      	movs	r2, #0
 8002922:	2105      	movs	r1, #5
 8002924:	2019      	movs	r0, #25
 8002926:	f000 ff43 	bl	80037b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800292a:	2019      	movs	r0, #25
 800292c:	f000 ff5c 	bl	80037e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002930:	e030      	b.n	8002994 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM2)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293a:	d12b      	bne.n	8002994 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6413      	str	r3, [r2, #64]	; 0x40
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <HAL_TIM_Encoder_MspInit+0xfc>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <HAL_TIM_Encoder_MspInit+0xfc>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6313      	str	r3, [r2, #48]	; 0x30
 8002968:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_TIM_Encoder_MspInit+0xfc>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_ENC2_B_Pin|TIM_ENC2_A_Pin;
 8002974:	2322      	movs	r3, #34	; 0x22
 8002976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2302      	movs	r3, #2
 800297a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002984:	2301      	movs	r3, #1
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002988:	f107 031c 	add.w	r3, r7, #28
 800298c:	4619      	mov	r1, r3
 800298e:	4805      	ldr	r0, [pc, #20]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x100>)
 8002990:	f001 fb56 	bl	8004040 <HAL_GPIO_Init>
}
 8002994:	bf00      	nop
 8002996:	3730      	adds	r7, #48	; 0x30
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40010000 	.word	0x40010000
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020000 	.word	0x40020000

080029a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM3)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_TIM_PWM_MspInit+0x84>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d12b      	bne.n	8002a22 <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_TIM_PWM_MspInit+0x88>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_TIM_PWM_MspInit+0x88>)
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_TIM_PWM_MspInit+0x88>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_TIM_PWM_MspInit+0x88>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a10      	ldr	r2, [pc, #64]	; (8002a30 <HAL_TIM_PWM_MspInit+0x88>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_TIM_PWM_MspInit+0x88>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_FAN_INDEX_Pin;
 8002a02:	2302      	movs	r3, #2
 8002a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a12:	2302      	movs	r3, #2
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_FAN_INDEX_GPIO_Port, &GPIO_InitStruct);
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4805      	ldr	r0, [pc, #20]	; (8002a34 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a1e:	f001 fb0f 	bl	8004040 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a22:	bf00      	nop
 8002a24:	3728      	adds	r7, #40	; 0x28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020400 	.word	0x40020400

08002a38 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <HAL_TIM_OC_MspInit+0x3c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10d      	bne.n	8002a66 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_TIM_OC_MspInit+0x40>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <HAL_TIM_OC_MspInit+0x40>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_TIM_OC_MspInit+0x40>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40000800 	.word	0x40000800
 8002a78:	40023800 	.word	0x40023800

08002a7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a15      	ldr	r2, [pc, #84]	; (8002ae0 <HAL_TIM_Base_MspInit+0x64>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10e      	bne.n	8002aac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <HAL_TIM_Base_MspInit+0x68>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <HAL_TIM_Base_MspInit+0x68>)
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_TIM_Base_MspInit+0x68>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002aaa:	e012      	b.n	8002ad2 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM14)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <HAL_TIM_Base_MspInit+0x6c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d10d      	bne.n	8002ad2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_TIM_Base_MspInit+0x68>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <HAL_TIM_Base_MspInit+0x68>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <HAL_TIM_Base_MspInit+0x68>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40010400 	.word	0x40010400
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40002000 	.word	0x40002000

08002aec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a34      	ldr	r2, [pc, #208]	; (8002bdc <HAL_TIM_MspPostInit+0xf0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d11e      	bne.n	8002b4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b33      	ldr	r3, [pc, #204]	; (8002be0 <HAL_TIM_MspPostInit+0xf4>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a32      	ldr	r2, [pc, #200]	; (8002be0 <HAL_TIM_MspPostInit+0xf4>)
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <HAL_TIM_MspPostInit+0xf4>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = TIM_FAN_PWM_Pin;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4619      	mov	r1, r3
 8002b44:	4827      	ldr	r0, [pc, #156]	; (8002be4 <HAL_TIM_MspPostInit+0xf8>)
 8002b46:	f001 fa7b 	bl	8004040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002b4a:	e042      	b.n	8002bd2 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <HAL_TIM_MspPostInit+0xfc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d13d      	bne.n	8002bd2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <HAL_TIM_MspPostInit+0xf4>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a20      	ldr	r2, [pc, #128]	; (8002be0 <HAL_TIM_MspPostInit+0xf4>)
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <HAL_TIM_MspPostInit+0xf4>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <HAL_TIM_MspPostInit+0xf4>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a19      	ldr	r2, [pc, #100]	; (8002be0 <HAL_TIM_MspPostInit+0xf4>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <HAL_TIM_MspPostInit+0xf4>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM_MOT1_B_Pin|TIM_MOT2_B_Pin;
 8002b8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480e      	ldr	r0, [pc, #56]	; (8002be4 <HAL_TIM_MspPostInit+0xf8>)
 8002bac:	f001 fa48 	bl	8004040 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM_MOT1_A_Pin|TIM_MOT2_A_Pin;
 8002bb0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc6:	f107 0314 	add.w	r3, r7, #20
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4807      	ldr	r0, [pc, #28]	; (8002bec <HAL_TIM_MspPostInit+0x100>)
 8002bce:	f001 fa37 	bl	8004040 <HAL_GPIO_Init>
}
 8002bd2:	bf00      	nop
 8002bd4:	3728      	adds	r7, #40	; 0x28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40020400 	.word	0x40020400
 8002be8:	40010400 	.word	0x40010400
 8002bec:	40020800 	.word	0x40020800

08002bf0 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <MX_UART5_Init+0x4c>)
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <MX_UART5_Init+0x50>)
 8002bf8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <MX_UART5_Init+0x4c>)
 8002bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c00:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002c02:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <MX_UART5_Init+0x4c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <MX_UART5_Init+0x4c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <MX_UART5_Init+0x4c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <MX_UART5_Init+0x4c>)
 8002c16:	220c      	movs	r2, #12
 8002c18:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <MX_UART5_Init+0x4c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <MX_UART5_Init+0x4c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002c26:	4805      	ldr	r0, [pc, #20]	; (8002c3c <MX_UART5_Init+0x4c>)
 8002c28:	f005 f804 	bl	8007c34 <HAL_UART_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002c32:	f7fe ffef 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200115e0 	.word	0x200115e0
 8002c40:	40005000 	.word	0x40005000

08002c44 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <MX_USART1_UART_Init+0x4c>)
 8002c4a:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <MX_USART1_UART_Init+0x50>)
 8002c4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <MX_USART1_UART_Init+0x4c>)
 8002c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <MX_USART1_UART_Init+0x4c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <MX_USART1_UART_Init+0x4c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <MX_USART1_UART_Init+0x4c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <MX_USART1_UART_Init+0x4c>)
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <MX_USART1_UART_Init+0x4c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <MX_USART1_UART_Init+0x4c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c7a:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_USART1_UART_Init+0x4c>)
 8002c7c:	f004 ffda 	bl	8007c34 <HAL_UART_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c86:	f7fe ffc5 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20011624 	.word	0x20011624
 8002c94:	40011000 	.word	0x40011000

08002c98 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <MX_USART3_UART_Init+0x50>)
 8002ca0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ca8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cce:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cd0:	f004 ffb0 	bl	8007c34 <HAL_UART_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002cda:	f7fe ff9b 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20011668 	.word	0x20011668
 8002ce8:	40004800 	.word	0x40004800

08002cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08e      	sub	sp, #56	; 0x38
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a74      	ldr	r2, [pc, #464]	; (8002edc <HAL_UART_MspInit+0x1f0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d14b      	bne.n	8002da6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	4b73      	ldr	r3, [pc, #460]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a72      	ldr	r2, [pc, #456]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1e:	4b70      	ldr	r3, [pc, #448]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d26:	623b      	str	r3, [r7, #32]
 8002d28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	4b6c      	ldr	r3, [pc, #432]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a6b      	ldr	r2, [pc, #428]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b69      	ldr	r3, [pc, #420]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	4b65      	ldr	r3, [pc, #404]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a64      	ldr	r2, [pc, #400]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002d50:	f043 0308 	orr.w	r3, r3, #8
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b62      	ldr	r3, [pc, #392]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = SER2_TX_Pin;
 8002d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d70:	2303      	movs	r3, #3
 8002d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d74:	2308      	movs	r3, #8
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SER2_TX_GPIO_Port, &GPIO_InitStruct);
 8002d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4859      	ldr	r0, [pc, #356]	; (8002ee4 <HAL_UART_MspInit+0x1f8>)
 8002d80:	f001 f95e 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SER2_RX_Pin;
 8002d84:	2304      	movs	r3, #4
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d90:	2303      	movs	r3, #3
 8002d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d94:	2308      	movs	r3, #8
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SER2_RX_GPIO_Port, &GPIO_InitStruct);
 8002d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4852      	ldr	r0, [pc, #328]	; (8002ee8 <HAL_UART_MspInit+0x1fc>)
 8002da0:	f001 f94e 	bl	8004040 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002da4:	e148      	b.n	8003038 <HAL_UART_MspInit+0x34c>
  else if(uartHandle->Instance==USART1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a50      	ldr	r2, [pc, #320]	; (8002eec <HAL_UART_MspInit+0x200>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	f040 80a9 	bne.w	8002f04 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	4a49      	ldr	r2, [pc, #292]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002dbc:	f043 0310 	orr.w	r3, r3, #16
 8002dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	4b43      	ldr	r3, [pc, #268]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a42      	ldr	r2, [pc, #264]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b40      	ldr	r3, [pc, #256]	; (8002ee0 <HAL_UART_MspInit+0x1f4>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dea:	23c0      	movs	r3, #192	; 0xc0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dee:	2302      	movs	r3, #2
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df6:	2303      	movs	r3, #3
 8002df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e02:	4619      	mov	r1, r3
 8002e04:	483a      	ldr	r0, [pc, #232]	; (8002ef0 <HAL_UART_MspInit+0x204>)
 8002e06:	f001 f91b 	bl	8004040 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002e0a:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <HAL_UART_MspInit+0x208>)
 8002e0c:	4a3a      	ldr	r2, [pc, #232]	; (8002ef8 <HAL_UART_MspInit+0x20c>)
 8002e0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002e10:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <HAL_UART_MspInit+0x208>)
 8002e12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e16:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_UART_MspInit+0x208>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1e:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <HAL_UART_MspInit+0x208>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e24:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <HAL_UART_MspInit+0x208>)
 8002e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e2c:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <HAL_UART_MspInit+0x208>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e32:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <HAL_UART_MspInit+0x208>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e38:	4b2e      	ldr	r3, [pc, #184]	; (8002ef4 <HAL_UART_MspInit+0x208>)
 8002e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e40:	4b2c      	ldr	r3, [pc, #176]	; (8002ef4 <HAL_UART_MspInit+0x208>)
 8002e42:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e46:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e48:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <HAL_UART_MspInit+0x208>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e4e:	4829      	ldr	r0, [pc, #164]	; (8002ef4 <HAL_UART_MspInit+0x208>)
 8002e50:	f000 fcf4 	bl	800383c <HAL_DMA_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002e5a:	f7fe fedb 	bl	8001c14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <HAL_UART_MspInit+0x208>)
 8002e62:	639a      	str	r2, [r3, #56]	; 0x38
 8002e64:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <HAL_UART_MspInit+0x208>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <HAL_UART_MspInit+0x210>)
 8002e6c:	4a24      	ldr	r2, [pc, #144]	; (8002f00 <HAL_UART_MspInit+0x214>)
 8002e6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002e70:	4b22      	ldr	r3, [pc, #136]	; (8002efc <HAL_UART_MspInit+0x210>)
 8002e72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e76:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e78:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_UART_MspInit+0x210>)
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e7e:	4b1f      	ldr	r3, [pc, #124]	; (8002efc <HAL_UART_MspInit+0x210>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_UART_MspInit+0x210>)
 8002e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_UART_MspInit+0x210>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e92:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_UART_MspInit+0x210>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002e98:	4b18      	ldr	r3, [pc, #96]	; (8002efc <HAL_UART_MspInit+0x210>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e9e:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_UART_MspInit+0x210>)
 8002ea0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ea4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <HAL_UART_MspInit+0x210>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002eac:	4813      	ldr	r0, [pc, #76]	; (8002efc <HAL_UART_MspInit+0x210>)
 8002eae:	f000 fcc5 	bl	800383c <HAL_DMA_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8002eb8:	f7fe feac 	bl	8001c14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a0f      	ldr	r2, [pc, #60]	; (8002efc <HAL_UART_MspInit+0x210>)
 8002ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <HAL_UART_MspInit+0x210>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2105      	movs	r1, #5
 8002ecc:	2025      	movs	r0, #37	; 0x25
 8002ece:	f000 fc6f 	bl	80037b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ed2:	2025      	movs	r0, #37	; 0x25
 8002ed4:	f000 fc88 	bl	80037e8 <HAL_NVIC_EnableIRQ>
}
 8002ed8:	e0ae      	b.n	8003038 <HAL_UART_MspInit+0x34c>
 8002eda:	bf00      	nop
 8002edc:	40005000 	.word	0x40005000
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40020800 	.word	0x40020800
 8002ee8:	40020c00 	.word	0x40020c00
 8002eec:	40011000 	.word	0x40011000
 8002ef0:	40020400 	.word	0x40020400
 8002ef4:	200116ac 	.word	0x200116ac
 8002ef8:	40026440 	.word	0x40026440
 8002efc:	2001170c 	.word	0x2001170c
 8002f00:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a4d      	ldr	r2, [pc, #308]	; (8003040 <HAL_UART_MspInit+0x354>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	f040 8094 	bne.w	8003038 <HAL_UART_MspInit+0x34c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	4b4b      	ldr	r3, [pc, #300]	; (8003044 <HAL_UART_MspInit+0x358>)
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	4a4a      	ldr	r2, [pc, #296]	; (8003044 <HAL_UART_MspInit+0x358>)
 8002f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f20:	4b48      	ldr	r3, [pc, #288]	; (8003044 <HAL_UART_MspInit+0x358>)
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	4b44      	ldr	r3, [pc, #272]	; (8003044 <HAL_UART_MspInit+0x358>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	4a43      	ldr	r2, [pc, #268]	; (8003044 <HAL_UART_MspInit+0x358>)
 8002f36:	f043 0308 	orr.w	r3, r3, #8
 8002f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3c:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_UART_MspInit+0x358>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f56:	2303      	movs	r3, #3
 8002f58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f62:	4619      	mov	r1, r3
 8002f64:	4838      	ldr	r0, [pc, #224]	; (8003048 <HAL_UART_MspInit+0x35c>)
 8002f66:	f001 f86b 	bl	8004040 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002f6a:	4b38      	ldr	r3, [pc, #224]	; (800304c <HAL_UART_MspInit+0x360>)
 8002f6c:	4a38      	ldr	r2, [pc, #224]	; (8003050 <HAL_UART_MspInit+0x364>)
 8002f6e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002f70:	4b36      	ldr	r3, [pc, #216]	; (800304c <HAL_UART_MspInit+0x360>)
 8002f72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f76:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f78:	4b34      	ldr	r3, [pc, #208]	; (800304c <HAL_UART_MspInit+0x360>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f7e:	4b33      	ldr	r3, [pc, #204]	; (800304c <HAL_UART_MspInit+0x360>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f84:	4b31      	ldr	r3, [pc, #196]	; (800304c <HAL_UART_MspInit+0x360>)
 8002f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f8a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f8c:	4b2f      	ldr	r3, [pc, #188]	; (800304c <HAL_UART_MspInit+0x360>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f92:	4b2e      	ldr	r3, [pc, #184]	; (800304c <HAL_UART_MspInit+0x360>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002f98:	4b2c      	ldr	r3, [pc, #176]	; (800304c <HAL_UART_MspInit+0x360>)
 8002f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f9e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fa0:	4b2a      	ldr	r3, [pc, #168]	; (800304c <HAL_UART_MspInit+0x360>)
 8002fa2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002fa6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fa8:	4b28      	ldr	r3, [pc, #160]	; (800304c <HAL_UART_MspInit+0x360>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002fae:	4827      	ldr	r0, [pc, #156]	; (800304c <HAL_UART_MspInit+0x360>)
 8002fb0:	f000 fc44 	bl	800383c <HAL_DMA_Init>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 8002fba:	f7fe fe2b 	bl	8001c14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a22      	ldr	r2, [pc, #136]	; (800304c <HAL_UART_MspInit+0x360>)
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
 8002fc4:	4a21      	ldr	r2, [pc, #132]	; (800304c <HAL_UART_MspInit+0x360>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002fca:	4b22      	ldr	r3, [pc, #136]	; (8003054 <HAL_UART_MspInit+0x368>)
 8002fcc:	4a22      	ldr	r2, [pc, #136]	; (8003058 <HAL_UART_MspInit+0x36c>)
 8002fce:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002fd0:	4b20      	ldr	r3, [pc, #128]	; (8003054 <HAL_UART_MspInit+0x368>)
 8002fd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fd6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fd8:	4b1e      	ldr	r3, [pc, #120]	; (8003054 <HAL_UART_MspInit+0x368>)
 8002fda:	2240      	movs	r2, #64	; 0x40
 8002fdc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fde:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_UART_MspInit+0x368>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_UART_MspInit+0x368>)
 8002fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fea:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_UART_MspInit+0x368>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <HAL_UART_MspInit+0x368>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ff8:	4b16      	ldr	r3, [pc, #88]	; (8003054 <HAL_UART_MspInit+0x368>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ffe:	4b15      	ldr	r3, [pc, #84]	; (8003054 <HAL_UART_MspInit+0x368>)
 8003000:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003004:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <HAL_UART_MspInit+0x368>)
 8003008:	2200      	movs	r2, #0
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800300c:	4811      	ldr	r0, [pc, #68]	; (8003054 <HAL_UART_MspInit+0x368>)
 800300e:	f000 fc15 	bl	800383c <HAL_DMA_Init>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_UART_MspInit+0x330>
      Error_Handler();
 8003018:	f7fe fdfc 	bl	8001c14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a0d      	ldr	r2, [pc, #52]	; (8003054 <HAL_UART_MspInit+0x368>)
 8003020:	635a      	str	r2, [r3, #52]	; 0x34
 8003022:	4a0c      	ldr	r2, [pc, #48]	; (8003054 <HAL_UART_MspInit+0x368>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003028:	2200      	movs	r2, #0
 800302a:	2105      	movs	r1, #5
 800302c:	2027      	movs	r0, #39	; 0x27
 800302e:	f000 fbbf 	bl	80037b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003032:	2027      	movs	r0, #39	; 0x27
 8003034:	f000 fbd8 	bl	80037e8 <HAL_NVIC_EnableIRQ>
}
 8003038:	bf00      	nop
 800303a:	3738      	adds	r7, #56	; 0x38
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40004800 	.word	0x40004800
 8003044:	40023800 	.word	0x40023800
 8003048:	40020c00 	.word	0x40020c00
 800304c:	2001176c 	.word	0x2001176c
 8003050:	40026028 	.word	0x40026028
 8003054:	200117cc 	.word	0x200117cc
 8003058:	40026058 	.word	0x40026058

0800305c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800305c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003094 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003060:	480d      	ldr	r0, [pc, #52]	; (8003098 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003062:	490e      	ldr	r1, [pc, #56]	; (800309c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003064:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003068:	e002      	b.n	8003070 <LoopCopyDataInit>

0800306a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800306a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800306c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800306e:	3304      	adds	r3, #4

08003070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003074:	d3f9      	bcc.n	800306a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003076:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003078:	4c0b      	ldr	r4, [pc, #44]	; (80030a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800307a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800307c:	e001      	b.n	8003082 <LoopFillZerobss>

0800307e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800307e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003080:	3204      	adds	r2, #4

08003082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003084:	d3fb      	bcc.n	800307e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003086:	f7ff f9a3 	bl	80023d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800308a:	f017 fb5f 	bl	801a74c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800308e:	f7fe fd15 	bl	8001abc <main>
  bx  lr    
 8003092:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800309c:	200008e8 	.word	0x200008e8
  ldr r2, =_sidata
 80030a0:	0801d088 	.word	0x0801d088
  ldr r2, =_sbss
 80030a4:	200008e8 	.word	0x200008e8
  ldr r4, =_ebss
 80030a8:	2001c968 	.word	0x2001c968

080030ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030ac:	e7fe      	b.n	80030ac <ADC_IRQHandler>
	...

080030b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_Init+0x40>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <HAL_Init+0x40>)
 80030ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <HAL_Init+0x40>)
 80030c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030cc:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <HAL_Init+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a07      	ldr	r2, [pc, #28]	; (80030f0 <HAL_Init+0x40>)
 80030d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d8:	2003      	movs	r0, #3
 80030da:	f000 fb5e 	bl	800379a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030de:	2005      	movs	r0, #5
 80030e0:	f7fe ffe2 	bl	80020a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030e4:	f7fe ffb4 	bl	8002050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023c00 	.word	0x40023c00

080030f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_IncTick+0x20>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_IncTick+0x24>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4413      	add	r3, r2
 8003104:	4a04      	ldr	r2, [pc, #16]	; (8003118 <HAL_IncTick+0x24>)
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	2000000c 	.word	0x2000000c
 8003118:	2001182c 	.word	0x2001182c

0800311c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return uwTick;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HAL_GetTick+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	2001182c 	.word	0x2001182c

08003134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800313c:	f7ff ffee 	bl	800311c <HAL_GetTick>
 8003140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800314c:	d005      	beq.n	800315a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_Delay+0x44>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800315a:	bf00      	nop
 800315c:	f7ff ffde 	bl	800311c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	429a      	cmp	r2, r3
 800316a:	d8f7      	bhi.n	800315c <HAL_Delay+0x28>
  {
  }
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	2000000c 	.word	0x2000000c

0800317c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e033      	b.n	80031fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd fd86 	bl	8000cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d118      	bne.n	80031ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031c2:	f023 0302 	bic.w	r3, r3, #2
 80031c6:	f043 0202 	orr.w	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f93a 	bl	8003448 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	f043 0201 	orr.w	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
 80031ea:	e001      	b.n	80031f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x1c>
 800321c:	2302      	movs	r3, #2
 800321e:	e105      	b.n	800342c <HAL_ADC_ConfigChannel+0x228>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b09      	cmp	r3, #9
 800322e:	d925      	bls.n	800327c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68d9      	ldr	r1, [r3, #12]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	3b1e      	subs	r3, #30
 8003246:	2207      	movs	r2, #7
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43da      	mvns	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	400a      	ands	r2, r1
 8003254:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68d9      	ldr	r1, [r3, #12]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	4618      	mov	r0, r3
 8003268:	4603      	mov	r3, r0
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4403      	add	r3, r0
 800326e:	3b1e      	subs	r3, #30
 8003270:	409a      	lsls	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	e022      	b.n	80032c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6919      	ldr	r1, [r3, #16]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	2207      	movs	r2, #7
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43da      	mvns	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	400a      	ands	r2, r1
 800329e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6919      	ldr	r1, [r3, #16]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	4618      	mov	r0, r3
 80032b2:	4603      	mov	r3, r0
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4403      	add	r3, r0
 80032b8:	409a      	lsls	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d824      	bhi.n	8003314 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	3b05      	subs	r3, #5
 80032dc:	221f      	movs	r2, #31
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	400a      	ands	r2, r1
 80032ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	4618      	mov	r0, r3
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	3b05      	subs	r3, #5
 8003306:	fa00 f203 	lsl.w	r2, r0, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	635a      	str	r2, [r3, #52]	; 0x34
 8003312:	e04c      	b.n	80033ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b0c      	cmp	r3, #12
 800331a:	d824      	bhi.n	8003366 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	3b23      	subs	r3, #35	; 0x23
 800332e:	221f      	movs	r2, #31
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43da      	mvns	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	400a      	ands	r2, r1
 800333c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	4618      	mov	r0, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	3b23      	subs	r3, #35	; 0x23
 8003358:	fa00 f203 	lsl.w	r2, r0, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
 8003364:	e023      	b.n	80033ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	3b41      	subs	r3, #65	; 0x41
 8003378:	221f      	movs	r2, #31
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	400a      	ands	r2, r1
 8003386:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	4618      	mov	r0, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	3b41      	subs	r3, #65	; 0x41
 80033a2:	fa00 f203 	lsl.w	r2, r0, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ae:	4b22      	ldr	r3, [pc, #136]	; (8003438 <HAL_ADC_ConfigChannel+0x234>)
 80033b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a21      	ldr	r2, [pc, #132]	; (800343c <HAL_ADC_ConfigChannel+0x238>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d109      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x1cc>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b12      	cmp	r3, #18
 80033c2:	d105      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a19      	ldr	r2, [pc, #100]	; (800343c <HAL_ADC_ConfigChannel+0x238>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d123      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x21e>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d003      	beq.n	80033ea <HAL_ADC_ConfigChannel+0x1e6>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b11      	cmp	r3, #17
 80033e8:	d11b      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b10      	cmp	r3, #16
 80033fc:	d111      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_ADC_ConfigChannel+0x23c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a10      	ldr	r2, [pc, #64]	; (8003444 <HAL_ADC_ConfigChannel+0x240>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	0c9a      	lsrs	r2, r3, #18
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003414:	e002      	b.n	800341c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	3b01      	subs	r3, #1
 800341a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f9      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	40012300 	.word	0x40012300
 800343c:	40012000 	.word	0x40012000
 8003440:	20000004 	.word	0x20000004
 8003444:	431bde83 	.word	0x431bde83

08003448 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003450:	4b79      	ldr	r3, [pc, #484]	; (8003638 <ADC_Init+0x1f0>)
 8003452:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	431a      	orrs	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800347c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	021a      	lsls	r2, r3, #8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6899      	ldr	r1, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	4a58      	ldr	r2, [pc, #352]	; (800363c <ADC_Init+0x1f4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d022      	beq.n	8003526 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6899      	ldr	r1, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6899      	ldr	r1, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	e00f      	b.n	8003546 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003544:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0202 	bic.w	r2, r2, #2
 8003554:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6899      	ldr	r1, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	7e1b      	ldrb	r3, [r3, #24]
 8003560:	005a      	lsls	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01b      	beq.n	80035ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003582:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003592:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6859      	ldr	r1, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	3b01      	subs	r3, #1
 80035a0:	035a      	lsls	r2, r3, #13
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	e007      	b.n	80035bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	051a      	lsls	r2, r3, #20
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6899      	ldr	r1, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035fe:	025a      	lsls	r2, r3, #9
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6899      	ldr	r1, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	029a      	lsls	r2, r3, #10
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40012300 	.word	0x40012300
 800363c:	0f000001 	.word	0x0f000001

08003640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <__NVIC_SetPriorityGrouping+0x44>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800365c:	4013      	ands	r3, r2
 800365e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800366c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003672:	4a04      	ldr	r2, [pc, #16]	; (8003684 <__NVIC_SetPriorityGrouping+0x44>)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	60d3      	str	r3, [r2, #12]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800368c:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <__NVIC_GetPriorityGrouping+0x18>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	f003 0307 	and.w	r3, r3, #7
}
 8003696:	4618      	mov	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	db0b      	blt.n	80036ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	f003 021f 	and.w	r2, r3, #31
 80036bc:	4907      	ldr	r1, [pc, #28]	; (80036dc <__NVIC_EnableIRQ+0x38>)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	2001      	movs	r0, #1
 80036c6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000e100 	.word	0xe000e100

080036e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	6039      	str	r1, [r7, #0]
 80036ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	db0a      	blt.n	800370a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	490c      	ldr	r1, [pc, #48]	; (800372c <__NVIC_SetPriority+0x4c>)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	0112      	lsls	r2, r2, #4
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	440b      	add	r3, r1
 8003704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003708:	e00a      	b.n	8003720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4908      	ldr	r1, [pc, #32]	; (8003730 <__NVIC_SetPriority+0x50>)
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	3b04      	subs	r3, #4
 8003718:	0112      	lsls	r2, r2, #4
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	440b      	add	r3, r1
 800371e:	761a      	strb	r2, [r3, #24]
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000e100 	.word	0xe000e100
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	; 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f1c3 0307 	rsb	r3, r3, #7
 800374e:	2b04      	cmp	r3, #4
 8003750:	bf28      	it	cs
 8003752:	2304      	movcs	r3, #4
 8003754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3304      	adds	r3, #4
 800375a:	2b06      	cmp	r3, #6
 800375c:	d902      	bls.n	8003764 <NVIC_EncodePriority+0x30>
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3b03      	subs	r3, #3
 8003762:	e000      	b.n	8003766 <NVIC_EncodePriority+0x32>
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43da      	mvns	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	401a      	ands	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800377c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	fa01 f303 	lsl.w	r3, r1, r3
 8003786:	43d9      	mvns	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378c:	4313      	orrs	r3, r2
         );
}
 800378e:	4618      	mov	r0, r3
 8003790:	3724      	adds	r7, #36	; 0x24
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff ff4c 	bl	8003640 <__NVIC_SetPriorityGrouping>
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037c2:	f7ff ff61 	bl	8003688 <__NVIC_GetPriorityGrouping>
 80037c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	6978      	ldr	r0, [r7, #20]
 80037ce:	f7ff ffb1 	bl	8003734 <NVIC_EncodePriority>
 80037d2:	4602      	mov	r2, r0
 80037d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d8:	4611      	mov	r1, r2
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff ff80 	bl	80036e0 <__NVIC_SetPriority>
}
 80037e0:	bf00      	nop
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff ff54 	bl	80036a4 <__NVIC_EnableIRQ>
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e00e      	b.n	8003834 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	795b      	ldrb	r3, [r3, #5]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd fb18 	bl	8000e5c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003848:	f7ff fc68 	bl	800311c <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e099      	b.n	800398c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003878:	e00f      	b.n	800389a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800387a:	f7ff fc4f 	bl	800311c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b05      	cmp	r3, #5
 8003886:	d908      	bls.n	800389a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2203      	movs	r2, #3
 8003892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e078      	b.n	800398c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e8      	bne.n	800387a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4b38      	ldr	r3, [pc, #224]	; (8003994 <HAL_DMA_Init+0x158>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d107      	bne.n	8003904 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	4313      	orrs	r3, r2
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 0307 	bic.w	r3, r3, #7
 800391a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	2b04      	cmp	r3, #4
 800392c:	d117      	bne.n	800395e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00e      	beq.n	800395e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fb01 	bl	8003f48 <DMA_CheckFifoParam>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2240      	movs	r2, #64	; 0x40
 8003950:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800395a:	2301      	movs	r3, #1
 800395c:	e016      	b.n	800398c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fab8 	bl	8003edc <DMA_CalcBaseAndBitshift>
 800396c:	4603      	mov	r3, r0
 800396e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	223f      	movs	r2, #63	; 0x3f
 8003976:	409a      	lsls	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	f010803f 	.word	0xf010803f

08003998 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_DMA_Start_IT+0x26>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e040      	b.n	8003a40 <HAL_DMA_Start_IT+0xa8>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d12f      	bne.n	8003a32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2202      	movs	r2, #2
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fa4a 	bl	8003e80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f0:	223f      	movs	r2, #63	; 0x3f
 80039f2:	409a      	lsls	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0216 	orr.w	r2, r2, #22
 8003a06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0208 	orr.w	r2, r2, #8
 8003a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e005      	b.n	8003a3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a56:	f7ff fb61 	bl	800311c <HAL_GetTick>
 8003a5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d008      	beq.n	8003a7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2280      	movs	r2, #128	; 0x80
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e052      	b.n	8003b20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0216 	bic.w	r2, r2, #22
 8003a88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <HAL_DMA_Abort+0x62>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0208 	bic.w	r2, r2, #8
 8003ab8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aca:	e013      	b.n	8003af4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003acc:	f7ff fb26 	bl	800311c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d90c      	bls.n	8003af4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e015      	b.n	8003b20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e4      	bne.n	8003acc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	223f      	movs	r2, #63	; 0x3f
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d004      	beq.n	8003b46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e00c      	b.n	8003b60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2205      	movs	r2, #5
 8003b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b78:	4b8e      	ldr	r3, [pc, #568]	; (8003db4 <HAL_DMA_IRQHandler+0x248>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a8e      	ldr	r2, [pc, #568]	; (8003db8 <HAL_DMA_IRQHandler+0x24c>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	0a9b      	lsrs	r3, r3, #10
 8003b84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	2208      	movs	r2, #8
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01a      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d013      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0204 	bic.w	r2, r2, #4
 8003bbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd0:	f043 0201 	orr.w	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	2201      	movs	r2, #1
 8003bde:	409a      	lsls	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d012      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	f043 0202 	orr.w	r2, r3, #2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	2204      	movs	r2, #4
 8003c14:	409a      	lsls	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d012      	beq.n	8003c44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00b      	beq.n	8003c44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c30:	2204      	movs	r2, #4
 8003c32:	409a      	lsls	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f043 0204 	orr.w	r2, r3, #4
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	2210      	movs	r2, #16
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d043      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d03c      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c66:	2210      	movs	r2, #16
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d018      	beq.n	8003cae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d108      	bne.n	8003c9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d024      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	4798      	blx	r3
 8003c9a:	e01f      	b.n	8003cdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01b      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4798      	blx	r3
 8003cac:	e016      	b.n	8003cdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d107      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0208 	bic.w	r2, r2, #8
 8003cca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 808f 	beq.w	8003e0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8087 	beq.w	8003e0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	2220      	movs	r2, #32
 8003d04:	409a      	lsls	r2, r3
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b05      	cmp	r3, #5
 8003d14:	d136      	bne.n	8003d84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0216 	bic.w	r2, r2, #22
 8003d24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <HAL_DMA_IRQHandler+0x1da>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0208 	bic.w	r2, r2, #8
 8003d54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5a:	223f      	movs	r2, #63	; 0x3f
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d07e      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4798      	blx	r3
        }
        return;
 8003d82:	e079      	b.n	8003e78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01d      	beq.n	8003dce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10d      	bne.n	8003dbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d031      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
 8003db0:	e02c      	b.n	8003e0c <HAL_DMA_IRQHandler+0x2a0>
 8003db2:	bf00      	nop
 8003db4:	20000004 	.word	0x20000004
 8003db8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d023      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4798      	blx	r3
 8003dcc:	e01e      	b.n	8003e0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10f      	bne.n	8003dfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0210 	bic.w	r2, r2, #16
 8003dea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d032      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d022      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2205      	movs	r2, #5
 8003e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d307      	bcc.n	8003e54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f2      	bne.n	8003e38 <HAL_DMA_IRQHandler+0x2cc>
 8003e52:	e000      	b.n	8003e56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	4798      	blx	r3
 8003e76:	e000      	b.n	8003e7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e78:	bf00      	nop
    }
  }
}
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b40      	cmp	r3, #64	; 0x40
 8003eac:	d108      	bne.n	8003ec0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ebe:	e007      	b.n	8003ed0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	3b10      	subs	r3, #16
 8003eec:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <DMA_CalcBaseAndBitshift+0x64>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ef6:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <DMA_CalcBaseAndBitshift+0x68>)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d909      	bls.n	8003f1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	1d1a      	adds	r2, r3, #4
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	659a      	str	r2, [r3, #88]	; 0x58
 8003f1c:	e007      	b.n	8003f2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f26:	f023 0303 	bic.w	r3, r3, #3
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	aaaaaaab 	.word	0xaaaaaaab
 8003f44:	0801bf24 	.word	0x0801bf24

08003f48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d11f      	bne.n	8003fa2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d856      	bhi.n	8004016 <DMA_CheckFifoParam+0xce>
 8003f68:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <DMA_CheckFifoParam+0x28>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f93 	.word	0x08003f93
 8003f78:	08003f81 	.word	0x08003f81
 8003f7c:	08004017 	.word	0x08004017
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d046      	beq.n	800401a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f90:	e043      	b.n	800401a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f9a:	d140      	bne.n	800401e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa0:	e03d      	b.n	800401e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003faa:	d121      	bne.n	8003ff0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d837      	bhi.n	8004022 <DMA_CheckFifoParam+0xda>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <DMA_CheckFifoParam+0x70>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08003fc9 	.word	0x08003fc9
 8003fbc:	08003fcf 	.word	0x08003fcf
 8003fc0:	08003fc9 	.word	0x08003fc9
 8003fc4:	08003fe1 	.word	0x08003fe1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
      break;
 8003fcc:	e030      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d025      	beq.n	8004026 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fde:	e022      	b.n	8004026 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fe8:	d11f      	bne.n	800402a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fee:	e01c      	b.n	800402a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d903      	bls.n	8003ffe <DMA_CheckFifoParam+0xb6>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d003      	beq.n	8004004 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ffc:	e018      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
      break;
 8004002:	e015      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00e      	beq.n	800402e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
      break;
 8004014:	e00b      	b.n	800402e <DMA_CheckFifoParam+0xe6>
      break;
 8004016:	bf00      	nop
 8004018:	e00a      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
      break;
 800401a:	bf00      	nop
 800401c:	e008      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
      break;
 800401e:	bf00      	nop
 8004020:	e006      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
      break;
 8004022:	bf00      	nop
 8004024:	e004      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
      break;
 8004026:	bf00      	nop
 8004028:	e002      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
      break;   
 800402a:	bf00      	nop
 800402c:	e000      	b.n	8004030 <DMA_CheckFifoParam+0xe8>
      break;
 800402e:	bf00      	nop
    }
  } 
  
  return status; 
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop

08004040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	; 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	e16b      	b.n	8004334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800405c:	2201      	movs	r2, #1
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	f040 815a 	bne.w	800432e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d005      	beq.n	8004092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800408e:	2b02      	cmp	r3, #2
 8004090:	d130      	bne.n	80040f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	2203      	movs	r2, #3
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4013      	ands	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040c8:	2201      	movs	r2, #1
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	f003 0201 	and.w	r2, r3, #1
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d017      	beq.n	8004130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d123      	bne.n	8004184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	08da      	lsrs	r2, r3, #3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3208      	adds	r2, #8
 8004144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	220f      	movs	r2, #15
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	08da      	lsrs	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3208      	adds	r2, #8
 800417e:	69b9      	ldr	r1, [r7, #24]
 8004180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2203      	movs	r2, #3
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 0203 	and.w	r2, r3, #3
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80b4 	beq.w	800432e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	4b60      	ldr	r3, [pc, #384]	; (800434c <HAL_GPIO_Init+0x30c>)
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	4a5f      	ldr	r2, [pc, #380]	; (800434c <HAL_GPIO_Init+0x30c>)
 80041d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041d4:	6453      	str	r3, [r2, #68]	; 0x44
 80041d6:	4b5d      	ldr	r3, [pc, #372]	; (800434c <HAL_GPIO_Init+0x30c>)
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041e2:	4a5b      	ldr	r2, [pc, #364]	; (8004350 <HAL_GPIO_Init+0x310>)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	089b      	lsrs	r3, r3, #2
 80041e8:	3302      	adds	r3, #2
 80041ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	220f      	movs	r2, #15
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a52      	ldr	r2, [pc, #328]	; (8004354 <HAL_GPIO_Init+0x314>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d02b      	beq.n	8004266 <HAL_GPIO_Init+0x226>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a51      	ldr	r2, [pc, #324]	; (8004358 <HAL_GPIO_Init+0x318>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d025      	beq.n	8004262 <HAL_GPIO_Init+0x222>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a50      	ldr	r2, [pc, #320]	; (800435c <HAL_GPIO_Init+0x31c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01f      	beq.n	800425e <HAL_GPIO_Init+0x21e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a4f      	ldr	r2, [pc, #316]	; (8004360 <HAL_GPIO_Init+0x320>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d019      	beq.n	800425a <HAL_GPIO_Init+0x21a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a4e      	ldr	r2, [pc, #312]	; (8004364 <HAL_GPIO_Init+0x324>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_GPIO_Init+0x216>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a4d      	ldr	r2, [pc, #308]	; (8004368 <HAL_GPIO_Init+0x328>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00d      	beq.n	8004252 <HAL_GPIO_Init+0x212>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a4c      	ldr	r2, [pc, #304]	; (800436c <HAL_GPIO_Init+0x32c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <HAL_GPIO_Init+0x20e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a4b      	ldr	r2, [pc, #300]	; (8004370 <HAL_GPIO_Init+0x330>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d101      	bne.n	800424a <HAL_GPIO_Init+0x20a>
 8004246:	2307      	movs	r3, #7
 8004248:	e00e      	b.n	8004268 <HAL_GPIO_Init+0x228>
 800424a:	2308      	movs	r3, #8
 800424c:	e00c      	b.n	8004268 <HAL_GPIO_Init+0x228>
 800424e:	2306      	movs	r3, #6
 8004250:	e00a      	b.n	8004268 <HAL_GPIO_Init+0x228>
 8004252:	2305      	movs	r3, #5
 8004254:	e008      	b.n	8004268 <HAL_GPIO_Init+0x228>
 8004256:	2304      	movs	r3, #4
 8004258:	e006      	b.n	8004268 <HAL_GPIO_Init+0x228>
 800425a:	2303      	movs	r3, #3
 800425c:	e004      	b.n	8004268 <HAL_GPIO_Init+0x228>
 800425e:	2302      	movs	r3, #2
 8004260:	e002      	b.n	8004268 <HAL_GPIO_Init+0x228>
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <HAL_GPIO_Init+0x228>
 8004266:	2300      	movs	r3, #0
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	f002 0203 	and.w	r2, r2, #3
 800426e:	0092      	lsls	r2, r2, #2
 8004270:	4093      	lsls	r3, r2
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004278:	4935      	ldr	r1, [pc, #212]	; (8004350 <HAL_GPIO_Init+0x310>)
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	089b      	lsrs	r3, r3, #2
 800427e:	3302      	adds	r3, #2
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004286:	4b3b      	ldr	r3, [pc, #236]	; (8004374 <HAL_GPIO_Init+0x334>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	43db      	mvns	r3, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4013      	ands	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042aa:	4a32      	ldr	r2, [pc, #200]	; (8004374 <HAL_GPIO_Init+0x334>)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042b0:	4b30      	ldr	r3, [pc, #192]	; (8004374 <HAL_GPIO_Init+0x334>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042d4:	4a27      	ldr	r2, [pc, #156]	; (8004374 <HAL_GPIO_Init+0x334>)
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042da:	4b26      	ldr	r3, [pc, #152]	; (8004374 <HAL_GPIO_Init+0x334>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	43db      	mvns	r3, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4013      	ands	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042fe:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <HAL_GPIO_Init+0x334>)
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <HAL_GPIO_Init+0x334>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	43db      	mvns	r3, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004328:	4a12      	ldr	r2, [pc, #72]	; (8004374 <HAL_GPIO_Init+0x334>)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	3301      	adds	r3, #1
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	2b0f      	cmp	r3, #15
 8004338:	f67f ae90 	bls.w	800405c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	3724      	adds	r7, #36	; 0x24
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
 8004350:	40013800 	.word	0x40013800
 8004354:	40020000 	.word	0x40020000
 8004358:	40020400 	.word	0x40020400
 800435c:	40020800 	.word	0x40020800
 8004360:	40020c00 	.word	0x40020c00
 8004364:	40021000 	.word	0x40021000
 8004368:	40021400 	.word	0x40021400
 800436c:	40021800 	.word	0x40021800
 8004370:	40021c00 	.word	0x40021c00
 8004374:	40013c00 	.word	0x40013c00

08004378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
 8004384:	4613      	mov	r3, r2
 8004386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004388:	787b      	ldrb	r3, [r7, #1]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800438e:	887a      	ldrh	r2, [r7, #2]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004394:	e003      	b.n	800439e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004396:	887b      	ldrh	r3, [r7, #2]
 8004398:	041a      	lsls	r2, r3, #16
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	619a      	str	r2, [r3, #24]
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e12b      	b.n	8004616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd fb2a 	bl	8001a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2224      	movs	r2, #36	; 0x24
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0201 	bic.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800440e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004410:	f001 fffe 	bl	8006410 <HAL_RCC_GetPCLK1Freq>
 8004414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4a81      	ldr	r2, [pc, #516]	; (8004620 <HAL_I2C_Init+0x274>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d807      	bhi.n	8004430 <HAL_I2C_Init+0x84>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a80      	ldr	r2, [pc, #512]	; (8004624 <HAL_I2C_Init+0x278>)
 8004424:	4293      	cmp	r3, r2
 8004426:	bf94      	ite	ls
 8004428:	2301      	movls	r3, #1
 800442a:	2300      	movhi	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e006      	b.n	800443e <HAL_I2C_Init+0x92>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a7d      	ldr	r2, [pc, #500]	; (8004628 <HAL_I2C_Init+0x27c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	bf94      	ite	ls
 8004438:	2301      	movls	r3, #1
 800443a:	2300      	movhi	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e0e7      	b.n	8004616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a78      	ldr	r2, [pc, #480]	; (800462c <HAL_I2C_Init+0x280>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	0c9b      	lsrs	r3, r3, #18
 8004450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4a6a      	ldr	r2, [pc, #424]	; (8004620 <HAL_I2C_Init+0x274>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d802      	bhi.n	8004480 <HAL_I2C_Init+0xd4>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	3301      	adds	r3, #1
 800447e:	e009      	b.n	8004494 <HAL_I2C_Init+0xe8>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	4a69      	ldr	r2, [pc, #420]	; (8004630 <HAL_I2C_Init+0x284>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	099b      	lsrs	r3, r3, #6
 8004492:	3301      	adds	r3, #1
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	430b      	orrs	r3, r1
 800449a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	495c      	ldr	r1, [pc, #368]	; (8004620 <HAL_I2C_Init+0x274>)
 80044b0:	428b      	cmp	r3, r1
 80044b2:	d819      	bhi.n	80044e8 <HAL_I2C_Init+0x13c>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1e59      	subs	r1, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	fbb1 f3f3 	udiv	r3, r1, r3
 80044c2:	1c59      	adds	r1, r3, #1
 80044c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044c8:	400b      	ands	r3, r1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_I2C_Init+0x138>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1e59      	subs	r1, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80044dc:	3301      	adds	r3, #1
 80044de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e2:	e051      	b.n	8004588 <HAL_I2C_Init+0x1dc>
 80044e4:	2304      	movs	r3, #4
 80044e6:	e04f      	b.n	8004588 <HAL_I2C_Init+0x1dc>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d111      	bne.n	8004514 <HAL_I2C_Init+0x168>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1e58      	subs	r0, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6859      	ldr	r1, [r3, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	440b      	add	r3, r1
 80044fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004502:	3301      	adds	r3, #1
 8004504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004508:	2b00      	cmp	r3, #0
 800450a:	bf0c      	ite	eq
 800450c:	2301      	moveq	r3, #1
 800450e:	2300      	movne	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	e012      	b.n	800453a <HAL_I2C_Init+0x18e>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1e58      	subs	r0, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6859      	ldr	r1, [r3, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	0099      	lsls	r1, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	fbb0 f3f3 	udiv	r3, r0, r3
 800452a:	3301      	adds	r3, #1
 800452c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_I2C_Init+0x196>
 800453e:	2301      	movs	r3, #1
 8004540:	e022      	b.n	8004588 <HAL_I2C_Init+0x1dc>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10e      	bne.n	8004568 <HAL_I2C_Init+0x1bc>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1e58      	subs	r0, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6859      	ldr	r1, [r3, #4]
 8004552:	460b      	mov	r3, r1
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	440b      	add	r3, r1
 8004558:	fbb0 f3f3 	udiv	r3, r0, r3
 800455c:	3301      	adds	r3, #1
 800455e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004566:	e00f      	b.n	8004588 <HAL_I2C_Init+0x1dc>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1e58      	subs	r0, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6859      	ldr	r1, [r3, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	0099      	lsls	r1, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	fbb0 f3f3 	udiv	r3, r0, r3
 800457e:	3301      	adds	r3, #1
 8004580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	6809      	ldr	r1, [r1, #0]
 800458c:	4313      	orrs	r3, r2
 800458e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69da      	ldr	r2, [r3, #28]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6911      	ldr	r1, [r2, #16]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	68d2      	ldr	r2, [r2, #12]
 80045c2:	4311      	orrs	r1, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	000186a0 	.word	0x000186a0
 8004624:	001e847f 	.word	0x001e847f
 8004628:	003d08ff 	.word	0x003d08ff
 800462c:	431bde83 	.word	0x431bde83
 8004630:	10624dd3 	.word	0x10624dd3

08004634 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004636:	b08f      	sub	sp, #60	; 0x3c
 8004638:	af0a      	add	r7, sp, #40	; 0x28
 800463a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e10f      	b.n	8004866 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f00b f8eb 	bl	800f83c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2203      	movs	r2, #3
 800466a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004676:	2b00      	cmp	r3, #0
 8004678:	d102      	bne.n	8004680 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f004 fe5a 	bl	800933e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	687e      	ldr	r6, [r7, #4]
 8004692:	466d      	mov	r5, sp
 8004694:	f106 0410 	add.w	r4, r6, #16
 8004698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800469a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800469c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800469e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80046a8:	1d33      	adds	r3, r6, #4
 80046aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046ac:	6838      	ldr	r0, [r7, #0]
 80046ae:	f004 fd31 	bl	8009114 <USB_CoreInit>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0d0      	b.n	8004866 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f004 fe48 	bl	8009360 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	73fb      	strb	r3, [r7, #15]
 80046d4:	e04a      	b.n	800476c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046d6:	7bfa      	ldrb	r2, [r7, #15]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	333d      	adds	r3, #61	; 0x3d
 80046e6:	2201      	movs	r2, #1
 80046e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046ea:	7bfa      	ldrb	r2, [r7, #15]
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	333c      	adds	r3, #60	; 0x3c
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046fe:	7bfa      	ldrb	r2, [r7, #15]
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	b298      	uxth	r0, r3
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	440b      	add	r3, r1
 8004710:	3344      	adds	r3, #68	; 0x44
 8004712:	4602      	mov	r2, r0
 8004714:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004716:	7bfa      	ldrb	r2, [r7, #15]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3340      	adds	r3, #64	; 0x40
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800472a:	7bfa      	ldrb	r2, [r7, #15]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	3348      	adds	r3, #72	; 0x48
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800473e:	7bfa      	ldrb	r2, [r7, #15]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	334c      	adds	r3, #76	; 0x4c
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004752:	7bfa      	ldrb	r2, [r7, #15]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	3354      	adds	r3, #84	; 0x54
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	3301      	adds	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
 800476c:	7bfa      	ldrb	r2, [r7, #15]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	429a      	cmp	r2, r3
 8004774:	d3af      	bcc.n	80046d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
 800477a:	e044      	b.n	8004806 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800477c:	7bfa      	ldrb	r2, [r7, #15]
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	4413      	add	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800478e:	2200      	movs	r2, #0
 8004790:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004792:	7bfa      	ldrb	r2, [r7, #15]
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	4613      	mov	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	440b      	add	r3, r1
 80047a0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80047a4:	7bfa      	ldrb	r2, [r7, #15]
 80047a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047a8:	7bfa      	ldrb	r2, [r7, #15]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80047ba:	2200      	movs	r2, #0
 80047bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047be:	7bfa      	ldrb	r2, [r7, #15]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047d4:	7bfa      	ldrb	r2, [r7, #15]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047ea:	7bfa      	ldrb	r2, [r7, #15]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	3301      	adds	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
 8004806:	7bfa      	ldrb	r2, [r7, #15]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	429a      	cmp	r2, r3
 800480e:	d3b5      	bcc.n	800477c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	687e      	ldr	r6, [r7, #4]
 8004818:	466d      	mov	r5, sp
 800481a:	f106 0410 	add.w	r4, r6, #16
 800481e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004820:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004826:	e894 0003 	ldmia.w	r4, {r0, r1}
 800482a:	e885 0003 	stmia.w	r5, {r0, r1}
 800482e:	1d33      	adds	r3, r6, #4
 8004830:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004832:	6838      	ldr	r0, [r7, #0]
 8004834:	f004 fde0 	bl	80093f8 <USB_DevInit>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2202      	movs	r2, #2
 8004842:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e00d      	b.n	8004866 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f005 ff2f 	bl	800a6c2 <USB_DevDisconnect>

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800486e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_PCD_Start+0x1c>
 8004886:	2302      	movs	r3, #2
 8004888:	e020      	b.n	80048cc <HAL_PCD_Start+0x5e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	2b01      	cmp	r3, #1
 8004898:	d109      	bne.n	80048ae <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d005      	beq.n	80048ae <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f004 fd32 	bl	800931c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f005 fedf 	bl	800a680 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80048d4:	b590      	push	{r4, r7, lr}
 80048d6:	b08d      	sub	sp, #52	; 0x34
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f005 ff9d 	bl	800a82a <USB_GetMode>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f040 848a 	bne.w	800520c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f005 ff01 	bl	800a704 <USB_ReadInterrupts>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8480 	beq.w	800520a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	0a1b      	lsrs	r3, r3, #8
 8004914:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f005 feee 	bl	800a704 <USB_ReadInterrupts>
 8004928:	4603      	mov	r3, r0
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d107      	bne.n	8004942 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f002 0202 	and.w	r2, r2, #2
 8004940:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f005 fedc 	bl	800a704 <USB_ReadInterrupts>
 800494c:	4603      	mov	r3, r0
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	2b10      	cmp	r3, #16
 8004954:	d161      	bne.n	8004a1a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699a      	ldr	r2, [r3, #24]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0210 	bic.w	r2, r2, #16
 8004964:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f003 020f 	and.w	r2, r3, #15
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	4413      	add	r3, r2
 8004982:	3304      	adds	r3, #4
 8004984:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	0c5b      	lsrs	r3, r3, #17
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	2b02      	cmp	r3, #2
 8004990:	d124      	bne.n	80049dc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d035      	beq.n	8004a0a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80049a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	6a38      	ldr	r0, [r7, #32]
 80049b2:	f005 fd13 	bl	800a3dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049c2:	441a      	add	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	6a1a      	ldr	r2, [r3, #32]
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049d4:	441a      	add	r2, r3
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	621a      	str	r2, [r3, #32]
 80049da:	e016      	b.n	8004a0a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	0c5b      	lsrs	r3, r3, #17
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	2b06      	cmp	r3, #6
 80049e6:	d110      	bne.n	8004a0a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80049ee:	2208      	movs	r2, #8
 80049f0:	4619      	mov	r1, r3
 80049f2:	6a38      	ldr	r0, [r7, #32]
 80049f4:	f005 fcf2 	bl	800a3dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	6a1a      	ldr	r2, [r3, #32]
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	091b      	lsrs	r3, r3, #4
 8004a00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a04:	441a      	add	r2, r3
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0210 	orr.w	r2, r2, #16
 8004a18:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f005 fe70 	bl	800a704 <USB_ReadInterrupts>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a2e:	f040 80a7 	bne.w	8004b80 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f005 fe75 	bl	800a72a <USB_ReadDevAllOutEpInterrupt>
 8004a40:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004a42:	e099      	b.n	8004b78 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 808e 	beq.w	8004b6c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	4611      	mov	r1, r2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f005 fe99 	bl	800a792 <USB_ReadDevOutEPInterrupt>
 8004a60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00c      	beq.n	8004a86 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a78:	461a      	mov	r2, r3
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fec3 	bl	800580c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00c      	beq.n	8004aaa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 ff99 	bl	80059dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	2310      	movs	r3, #16
 8004ac4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d030      	beq.n	8004b32 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad8:	2b80      	cmp	r3, #128	; 0x80
 8004ada:	d109      	bne.n	8004af0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af2:	4613      	mov	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	4413      	add	r3, r2
 8004b02:	3304      	adds	r3, #4
 8004b04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	78db      	ldrb	r3, [r3, #3]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d108      	bne.n	8004b20 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2200      	movs	r2, #0
 8004b12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f00a ff94 	bl	800fa48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2302      	movs	r3, #2
 8004b30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b48:	461a      	mov	r2, r3
 8004b4a:	2320      	movs	r3, #32
 8004b4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d009      	beq.n	8004b6c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b64:	461a      	mov	r2, r3
 8004b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	3301      	adds	r3, #1
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f47f af62 	bne.w	8004a44 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f005 fdbd 	bl	800a704 <USB_ReadInterrupts>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b94:	f040 80db 	bne.w	8004d4e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f005 fdde 	bl	800a75e <USB_ReadDevAllInEpInterrupt>
 8004ba2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ba8:	e0cd      	b.n	8004d46 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80c2 	beq.w	8004d3a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f005 fe04 	bl	800a7ce <USB_ReadDevInEPInterrupt>
 8004bc6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d057      	beq.n	8004c82 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	2201      	movs	r2, #1
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	43db      	mvns	r3, r3
 8004bec:	69f9      	ldr	r1, [r7, #28]
 8004bee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c02:	461a      	mov	r2, r3
 8004c04:	2301      	movs	r3, #1
 8004c06:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d132      	bne.n	8004c76 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c14:	4613      	mov	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	334c      	adds	r3, #76	; 0x4c
 8004c20:	6819      	ldr	r1, [r3, #0]
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4403      	add	r3, r0
 8004c30:	3348      	adds	r3, #72	; 0x48
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4419      	add	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4403      	add	r3, r0
 8004c44:	334c      	adds	r3, #76	; 0x4c
 8004c46:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d113      	bne.n	8004c76 <HAL_PCD_IRQHandler+0x3a2>
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c52:	4613      	mov	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3354      	adds	r3, #84	; 0x54
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d108      	bne.n	8004c76 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c6e:	461a      	mov	r2, r3
 8004c70:	2101      	movs	r1, #1
 8004c72:	f005 fe0b 	bl	800a88c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f00a fe5e 	bl	800f93e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	461a      	mov	r2, r3
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2310      	movs	r3, #16
 8004cb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	2340      	movs	r3, #64	; 0x40
 8004cd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d023      	beq.n	8004d28 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004ce0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ce2:	6a38      	ldr	r0, [r7, #32]
 8004ce4:	f004 fcec 	bl	80096c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cea:	4613      	mov	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	3338      	adds	r3, #56	; 0x38
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	78db      	ldrb	r3, [r3, #3]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d108      	bne.n	8004d16 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2200      	movs	r2, #0
 8004d08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f00a feab 	bl	800fa6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	461a      	mov	r2, r3
 8004d24:	2302      	movs	r3, #2
 8004d26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fcdb 	bl	80056f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	085b      	lsrs	r3, r3, #1
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f47f af2e 	bne.w	8004baa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f005 fcd6 	bl	800a704 <USB_ReadInterrupts>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d62:	d122      	bne.n	8004daa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d72:	f023 0301 	bic.w	r3, r3, #1
 8004d76:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d108      	bne.n	8004d94 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fec3 	bl	8005b18 <HAL_PCDEx_LPM_Callback>
 8004d92:	e002      	b.n	8004d9a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f00a fe49 	bl	800fa2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695a      	ldr	r2, [r3, #20]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f005 fca8 	bl	800a704 <USB_ReadInterrupts>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dbe:	d112      	bne.n	8004de6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d102      	bne.n	8004dd6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f00a fe05 	bl	800f9e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695a      	ldr	r2, [r3, #20]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004de4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f005 fc8a 	bl	800a704 <USB_ReadInterrupts>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfa:	f040 80b7 	bne.w	8004f6c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2110      	movs	r1, #16
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f004 fc51 	bl	80096c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e22:	e046      	b.n	8004eb2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e30:	461a      	mov	r2, r3
 8004e32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e36:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e64:	461a      	mov	r2, r3
 8004e66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e6a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004eaa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	3301      	adds	r3, #1
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d3b3      	bcc.n	8004e24 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004ece:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d016      	beq.n	8004f06 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee8:	f043 030b 	orr.w	r3, r3, #11
 8004eec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004efe:	f043 030b 	orr.w	r3, r3, #11
 8004f02:	6453      	str	r3, [r2, #68]	; 0x44
 8004f04:	e015      	b.n	8004f32 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f18:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004f1c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f2c:	f043 030b 	orr.w	r3, r3, #11
 8004f30:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f44:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f56:	461a      	mov	r2, r3
 8004f58:	f005 fc98 	bl	800a88c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004f6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f005 fbc7 	bl	800a704 <USB_ReadInterrupts>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f80:	d124      	bne.n	8004fcc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f005 fc5d 	bl	800a846 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f004 fc12 	bl	80097ba <USB_GetDevSpeed>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681c      	ldr	r4, [r3, #0]
 8004fa2:	f001 fa29 	bl	80063f8 <HAL_RCC_GetHCLKFreq>
 8004fa6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f004 f911 	bl	80091d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f00a fce9 	bl	800f98e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695a      	ldr	r2, [r3, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f005 fb97 	bl	800a704 <USB_ReadInterrupts>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d10a      	bne.n	8004ff6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f00a fcc6 	bl	800f972 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f002 0208 	and.w	r2, r2, #8
 8004ff4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f005 fb82 	bl	800a704 <USB_ReadInterrupts>
 8005000:	4603      	mov	r3, r0
 8005002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d122      	bne.n	8005050 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005016:	2301      	movs	r3, #1
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
 800501a:	e014      	b.n	8005046 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005020:	4613      	mov	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d105      	bne.n	8005040 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	b2db      	uxtb	r3, r3
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fb27 	bl	800568e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	3301      	adds	r3, #1
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504c:	429a      	cmp	r2, r3
 800504e:	d3e5      	bcc.n	800501c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f005 fb55 	bl	800a704 <USB_ReadInterrupts>
 800505a:	4603      	mov	r3, r0
 800505c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005064:	d13b      	bne.n	80050de <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005066:	2301      	movs	r3, #1
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
 800506a:	e02b      	b.n	80050c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005080:	4613      	mov	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	3340      	adds	r3, #64	; 0x40
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d115      	bne.n	80050be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005092:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005094:	2b00      	cmp	r3, #0
 8005096:	da12      	bge.n	80050be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509c:	4613      	mov	r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	333f      	adds	r3, #63	; 0x3f
 80050a8:	2201      	movs	r2, #1
 80050aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	4619      	mov	r1, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fae8 	bl	800568e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	3301      	adds	r3, #1
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d3ce      	bcc.n	800506c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80050dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f005 fb0e 	bl	800a704 <USB_ReadInterrupts>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f2:	d155      	bne.n	80051a0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050f4:	2301      	movs	r3, #1
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
 80050f8:	e045      	b.n	8005186 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510e:	4613      	mov	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d12e      	bne.n	8005180 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005122:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005124:	2b00      	cmp	r3, #0
 8005126:	da2b      	bge.n	8005180 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005134:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005138:	429a      	cmp	r2, r3
 800513a:	d121      	bne.n	8005180 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005140:	4613      	mov	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800514e:	2201      	movs	r2, #1
 8005150:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800517c:	6053      	str	r3, [r2, #4]
            break;
 800517e:	e007      	b.n	8005190 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	3301      	adds	r3, #1
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	429a      	cmp	r2, r3
 800518e:	d3b4      	bcc.n	80050fa <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695a      	ldr	r2, [r3, #20]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800519e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f005 faad 	bl	800a704 <USB_ReadInterrupts>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b4:	d10a      	bne.n	80051cc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f00a fc6a 	bl	800fa90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695a      	ldr	r2, [r3, #20]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80051ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f005 fa97 	bl	800a704 <USB_ReadInterrupts>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d115      	bne.n	800520c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f00a fc5a 	bl	800faac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6859      	ldr	r1, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	430a      	orrs	r2, r1
 8005206:	605a      	str	r2, [r3, #4]
 8005208:	e000      	b.n	800520c <HAL_PCD_IRQHandler+0x938>
      return;
 800520a:	bf00      	nop
    }
  }
}
 800520c:	3734      	adds	r7, #52	; 0x34
 800520e:	46bd      	mov	sp, r7
 8005210:	bd90      	pop	{r4, r7, pc}

08005212 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	460b      	mov	r3, r1
 800521c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_PCD_SetAddress+0x1a>
 8005228:	2302      	movs	r3, #2
 800522a:	e013      	b.n	8005254 <HAL_PCD_SetAddress+0x42>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	4611      	mov	r1, r2
 8005244:	4618      	mov	r0, r3
 8005246:	f005 f9f5 	bl	800a634 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	461a      	mov	r2, r3
 800526a:	4603      	mov	r3, r0
 800526c:	70fb      	strb	r3, [r7, #3]
 800526e:	460b      	mov	r3, r1
 8005270:	803b      	strh	r3, [r7, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800527a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800527e:	2b00      	cmp	r3, #0
 8005280:	da0f      	bge.n	80052a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005282:	78fb      	ldrb	r3, [r7, #3]
 8005284:	f003 020f 	and.w	r2, r3, #15
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	3338      	adds	r3, #56	; 0x38
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	4413      	add	r3, r2
 8005296:	3304      	adds	r3, #4
 8005298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	705a      	strb	r2, [r3, #1]
 80052a0:	e00f      	b.n	80052c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	f003 020f 	and.w	r2, r3, #15
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4413      	add	r3, r2
 80052b8:	3304      	adds	r3, #4
 80052ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	f003 030f 	and.w	r3, r3, #15
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80052ce:	883a      	ldrh	r2, [r7, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	78ba      	ldrb	r2, [r7, #2]
 80052d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d004      	beq.n	80052ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052ec:	78bb      	ldrb	r3, [r7, #2]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d102      	bne.n	80052f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_PCD_EP_Open+0xaa>
 8005302:	2302      	movs	r3, #2
 8005304:	e00e      	b.n	8005324 <HAL_PCD_EP_Open+0xc8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68f9      	ldr	r1, [r7, #12]
 8005314:	4618      	mov	r0, r3
 8005316:	f004 fa75 	bl	8009804 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005322:	7afb      	ldrb	r3, [r7, #11]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800533c:	2b00      	cmp	r3, #0
 800533e:	da0f      	bge.n	8005360 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	f003 020f 	and.w	r2, r3, #15
 8005346:	4613      	mov	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	3338      	adds	r3, #56	; 0x38
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	4413      	add	r3, r2
 8005354:	3304      	adds	r3, #4
 8005356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2201      	movs	r2, #1
 800535c:	705a      	strb	r2, [r3, #1]
 800535e:	e00f      	b.n	8005380 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	f003 020f 	and.w	r2, r3, #15
 8005366:	4613      	mov	r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4413      	add	r3, r2
 8005376:	3304      	adds	r3, #4
 8005378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	b2da      	uxtb	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_PCD_EP_Close+0x6e>
 8005396:	2302      	movs	r3, #2
 8005398:	e00e      	b.n	80053b8 <HAL_PCD_EP_Close+0x8c>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f004 fab3 	bl	8009914 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	460b      	mov	r3, r1
 80053ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053d0:	7afb      	ldrb	r3, [r7, #11]
 80053d2:	f003 020f 	and.w	r2, r3, #15
 80053d6:	4613      	mov	r3, r2
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	3304      	adds	r3, #4
 80053e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2200      	movs	r2, #0
 80053fa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2200      	movs	r2, #0
 8005400:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005402:	7afb      	ldrb	r3, [r7, #11]
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	b2da      	uxtb	r2, r3
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d102      	bne.n	800541c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800541c:	7afb      	ldrb	r3, [r7, #11]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	6979      	ldr	r1, [r7, #20]
 8005434:	f004 fd92 	bl	8009f5c <USB_EP0StartXfer>
 8005438:	e008      	b.n	800544c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	6979      	ldr	r1, [r7, #20]
 8005448:	f004 fb40 	bl	8009acc <USB_EPStartXfer>
  }

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	460b      	mov	r3, r1
 8005460:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005462:	78fb      	ldrb	r3, [r7, #3]
 8005464:	f003 020f 	and.w	r2, r3, #15
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005478:	681b      	ldr	r3, [r3, #0]
}
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b086      	sub	sp, #24
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	460b      	mov	r3, r1
 8005494:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005496:	7afb      	ldrb	r3, [r7, #11]
 8005498:	f003 020f 	and.w	r2, r3, #15
 800549c:	4613      	mov	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	3338      	adds	r3, #56	; 0x38
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	3304      	adds	r3, #4
 80054ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2200      	movs	r2, #0
 80054be:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2201      	movs	r2, #1
 80054c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054c6:	7afb      	ldrb	r3, [r7, #11]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d102      	bne.n	80054e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054e0:	7afb      	ldrb	r3, [r7, #11]
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d109      	bne.n	80054fe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	6979      	ldr	r1, [r7, #20]
 80054f8:	f004 fd30 	bl	8009f5c <USB_EP0StartXfer>
 80054fc:	e008      	b.n	8005510 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
 800550a:	6979      	ldr	r1, [r7, #20]
 800550c:	f004 fade 	bl	8009acc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	460b      	mov	r3, r1
 8005524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	f003 020f 	and.w	r2, r3, #15
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	d901      	bls.n	8005538 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e050      	b.n	80055da <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800553c:	2b00      	cmp	r3, #0
 800553e:	da0f      	bge.n	8005560 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	f003 020f 	and.w	r2, r3, #15
 8005546:	4613      	mov	r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	3338      	adds	r3, #56	; 0x38
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	3304      	adds	r3, #4
 8005556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	705a      	strb	r2, [r3, #1]
 800555e:	e00d      	b.n	800557c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005560:	78fa      	ldrb	r2, [r7, #3]
 8005562:	4613      	mov	r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4413      	add	r3, r2
 8005572:	3304      	adds	r3, #4
 8005574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	b2da      	uxtb	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_PCD_EP_SetStall+0x82>
 8005598:	2302      	movs	r3, #2
 800559a:	e01e      	b.n	80055da <HAL_PCD_EP_SetStall+0xc0>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68f9      	ldr	r1, [r7, #12]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f004 ff6e 	bl	800a48c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	b2d9      	uxtb	r1, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055ca:	461a      	mov	r2, r3
 80055cc:	f005 f95e 	bl	800a88c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	460b      	mov	r3, r1
 80055ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	f003 020f 	and.w	r2, r3, #15
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d901      	bls.n	8005600 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e042      	b.n	8005686 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005604:	2b00      	cmp	r3, #0
 8005606:	da0f      	bge.n	8005628 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	f003 020f 	and.w	r2, r3, #15
 800560e:	4613      	mov	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	3338      	adds	r3, #56	; 0x38
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	4413      	add	r3, r2
 800561c:	3304      	adds	r3, #4
 800561e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	705a      	strb	r2, [r3, #1]
 8005626:	e00f      	b.n	8005648 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	f003 020f 	and.w	r2, r3, #15
 800562e:	4613      	mov	r3, r2
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	4413      	add	r3, r2
 800563e:	3304      	adds	r3, #4
 8005640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800564e:	78fb      	ldrb	r3, [r7, #3]
 8005650:	f003 030f 	and.w	r3, r3, #15
 8005654:	b2da      	uxtb	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_PCD_EP_ClrStall+0x86>
 8005664:	2302      	movs	r3, #2
 8005666:	e00e      	b.n	8005686 <HAL_PCD_EP_ClrStall+0xa4>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68f9      	ldr	r1, [r7, #12]
 8005676:	4618      	mov	r0, r3
 8005678:	f004 ff76 	bl	800a568 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	460b      	mov	r3, r1
 8005698:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800569a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	da0c      	bge.n	80056bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	f003 020f 	and.w	r2, r3, #15
 80056a8:	4613      	mov	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	3338      	adds	r3, #56	; 0x38
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	4413      	add	r3, r2
 80056b6:	3304      	adds	r3, #4
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	e00c      	b.n	80056d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	f003 020f 	and.w	r2, r3, #15
 80056c2:	4613      	mov	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	3304      	adds	r3, #4
 80056d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68f9      	ldr	r1, [r7, #12]
 80056dc:	4618      	mov	r0, r3
 80056de:	f004 fd95 	bl	800a20c <USB_EPStopXfer>
 80056e2:	4603      	mov	r3, r0
 80056e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80056e6:	7afb      	ldrb	r3, [r7, #11]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	; 0x28
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	4613      	mov	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	3338      	adds	r3, #56	; 0x38
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	4413      	add	r3, r2
 8005714:	3304      	adds	r3, #4
 8005716:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a1a      	ldr	r2, [r3, #32]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	429a      	cmp	r2, r3
 8005722:	d901      	bls.n	8005728 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e06c      	b.n	8005802 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	429a      	cmp	r2, r3
 800573c:	d902      	bls.n	8005744 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	3303      	adds	r3, #3
 8005748:	089b      	lsrs	r3, r3, #2
 800574a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800574c:	e02b      	b.n	80057a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	429a      	cmp	r2, r3
 8005762:	d902      	bls.n	800576a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3303      	adds	r3, #3
 800576e:	089b      	lsrs	r3, r3, #2
 8005770:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6919      	ldr	r1, [r3, #16]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	b2da      	uxtb	r2, r3
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005782:	b2db      	uxtb	r3, r3
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	4603      	mov	r3, r0
 8005788:	6978      	ldr	r0, [r7, #20]
 800578a:	f004 fde9 	bl	800a360 <USB_WritePacket>

    ep->xfer_buff  += len;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	691a      	ldr	r2, [r3, #16]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	441a      	add	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1a      	ldr	r2, [r3, #32]
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	441a      	add	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d809      	bhi.n	80057d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a1a      	ldr	r2, [r3, #32]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d203      	bcs.n	80057d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1be      	bne.n	800574e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	699a      	ldr	r2, [r3, #24]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d811      	bhi.n	8005800 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	2201      	movs	r2, #1
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	43db      	mvns	r3, r3
 80057f6:	6939      	ldr	r1, [r7, #16]
 80057f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057fc:	4013      	ands	r3, r2
 80057fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	333c      	adds	r3, #60	; 0x3c
 8005824:	3304      	adds	r3, #4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d17b      	bne.n	800593a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	2b00      	cmp	r3, #0
 800584a:	d015      	beq.n	8005878 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	4a61      	ldr	r2, [pc, #388]	; (80059d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	f240 80b9 	bls.w	80059c8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80b3 	beq.w	80059c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	461a      	mov	r2, r3
 8005870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005874:	6093      	str	r3, [r2, #8]
 8005876:	e0a7      	b.n	80059c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588e:	461a      	mov	r2, r3
 8005890:	2320      	movs	r3, #32
 8005892:	6093      	str	r3, [r2, #8]
 8005894:	e098      	b.n	80059c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	f040 8093 	bne.w	80059c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	4a4b      	ldr	r2, [pc, #300]	; (80059d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d90f      	bls.n	80058ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	461a      	mov	r2, r3
 80058c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c6:	6093      	str	r3, [r2, #8]
 80058c8:	e07e      	b.n	80059c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	4613      	mov	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	4413      	add	r3, r2
 80058dc:	3304      	adds	r3, #4
 80058de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	0159      	lsls	r1, r3, #5
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	440b      	add	r3, r1
 80058ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f6:	1ad2      	subs	r2, r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d114      	bne.n	800592c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005914:	461a      	mov	r2, r3
 8005916:	2101      	movs	r1, #1
 8005918:	f004 ffb8 	bl	800a88c <USB_EP0_OutStart>
 800591c:	e006      	b.n	800592c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	441a      	add	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f009 ffe8 	bl	800f908 <HAL_PCD_DataOutStageCallback>
 8005938:	e046      	b.n	80059c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d124      	bne.n	800598c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	461a      	mov	r2, r3
 800595a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800595e:	6093      	str	r3, [r2, #8]
 8005960:	e032      	b.n	80059c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005978:	461a      	mov	r2, r3
 800597a:	2320      	movs	r3, #32
 800597c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f009 ffbf 	bl	800f908 <HAL_PCD_DataOutStageCallback>
 800598a:	e01d      	b.n	80059c8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d114      	bne.n	80059bc <PCD_EP_OutXfrComplete_int+0x1b0>
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	4613      	mov	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d108      	bne.n	80059bc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80059b4:	461a      	mov	r2, r3
 80059b6:	2100      	movs	r1, #0
 80059b8:	f004 ff68 	bl	800a88c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f009 ffa0 	bl	800f908 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	4f54300a 	.word	0x4f54300a
 80059d8:	4f54310a 	.word	0x4f54310a

080059dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	333c      	adds	r3, #60	; 0x3c
 80059f4:	3304      	adds	r3, #4
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <PCD_EP_OutSetupPacket_int+0x88>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d90e      	bls.n	8005a30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d009      	beq.n	8005a30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f009 ff57 	bl	800f8e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <PCD_EP_OutSetupPacket_int+0x88>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d90c      	bls.n	8005a58 <PCD_EP_OutSetupPacket_int+0x7c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d108      	bne.n	8005a58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a50:	461a      	mov	r2, r3
 8005a52:	2101      	movs	r1, #1
 8005a54:	f004 ff1a 	bl	800a88c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	4f54300a 	.word	0x4f54300a

08005a68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	70fb      	strb	r3, [r7, #3]
 8005a74:	4613      	mov	r3, r2
 8005a76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d107      	bne.n	8005a96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005a86:	883b      	ldrh	r3, [r7, #0]
 8005a88:	0419      	lsls	r1, r3, #16
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28
 8005a94:	e028      	b.n	8005ae8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]
 8005aa8:	e00d      	b.n	8005ac6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	3340      	adds	r3, #64	; 0x40
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	0c1b      	lsrs	r3, r3, #16
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	4413      	add	r3, r2
 8005abe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
 8005ac6:	7bfa      	ldrb	r2, [r7, #15]
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d3ec      	bcc.n	8005aaa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ad0:	883b      	ldrh	r3, [r7, #0]
 8005ad2:	0418      	lsls	r0, r3, #16
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6819      	ldr	r1, [r3, #0]
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	4302      	orrs	r2, r0
 8005ae0:	3340      	adds	r3, #64	; 0x40
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	460b      	mov	r3, r1
 8005b00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	887a      	ldrh	r2, [r7, #2]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e267      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d075      	beq.n	8005c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b4e:	4b88      	ldr	r3, [pc, #544]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 030c 	and.w	r3, r3, #12
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d00c      	beq.n	8005b74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b5a:	4b85      	ldr	r3, [pc, #532]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d112      	bne.n	8005b8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b66:	4b82      	ldr	r3, [pc, #520]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b72:	d10b      	bne.n	8005b8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b74:	4b7e      	ldr	r3, [pc, #504]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d05b      	beq.n	8005c38 <HAL_RCC_OscConfig+0x108>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d157      	bne.n	8005c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e242      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b94:	d106      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x74>
 8005b96:	4b76      	ldr	r3, [pc, #472]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a75      	ldr	r2, [pc, #468]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e01d      	b.n	8005be0 <HAL_RCC_OscConfig+0xb0>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bac:	d10c      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x98>
 8005bae:	4b70      	ldr	r3, [pc, #448]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a6f      	ldr	r2, [pc, #444]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	4b6d      	ldr	r3, [pc, #436]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a6c      	ldr	r2, [pc, #432]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	e00b      	b.n	8005be0 <HAL_RCC_OscConfig+0xb0>
 8005bc8:	4b69      	ldr	r3, [pc, #420]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a68      	ldr	r2, [pc, #416]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	4b66      	ldr	r3, [pc, #408]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a65      	ldr	r2, [pc, #404]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d013      	beq.n	8005c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be8:	f7fd fa98 	bl	800311c <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bf0:	f7fd fa94 	bl	800311c <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b64      	cmp	r3, #100	; 0x64
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e207      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c02:	4b5b      	ldr	r3, [pc, #364]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0f0      	beq.n	8005bf0 <HAL_RCC_OscConfig+0xc0>
 8005c0e:	e014      	b.n	8005c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c10:	f7fd fa84 	bl	800311c <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c18:	f7fd fa80 	bl	800311c <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b64      	cmp	r3, #100	; 0x64
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e1f3      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c2a:	4b51      	ldr	r3, [pc, #324]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <HAL_RCC_OscConfig+0xe8>
 8005c36:	e000      	b.n	8005c3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d063      	beq.n	8005d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c46:	4b4a      	ldr	r3, [pc, #296]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 030c 	and.w	r3, r3, #12
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c52:	4b47      	ldr	r3, [pc, #284]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	d11c      	bne.n	8005c98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c5e:	4b44      	ldr	r3, [pc, #272]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d116      	bne.n	8005c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c6a:	4b41      	ldr	r3, [pc, #260]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <HAL_RCC_OscConfig+0x152>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d001      	beq.n	8005c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e1c7      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c82:	4b3b      	ldr	r3, [pc, #236]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	4937      	ldr	r1, [pc, #220]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c96:	e03a      	b.n	8005d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d020      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ca0:	4b34      	ldr	r3, [pc, #208]	; (8005d74 <HAL_RCC_OscConfig+0x244>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca6:	f7fd fa39 	bl	800311c <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cae:	f7fd fa35 	bl	800311c <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e1a8      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cc0:	4b2b      	ldr	r3, [pc, #172]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f0      	beq.n	8005cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ccc:	4b28      	ldr	r3, [pc, #160]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4925      	ldr	r1, [pc, #148]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	600b      	str	r3, [r1, #0]
 8005ce0:	e015      	b.n	8005d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ce2:	4b24      	ldr	r3, [pc, #144]	; (8005d74 <HAL_RCC_OscConfig+0x244>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce8:	f7fd fa18 	bl	800311c <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cf0:	f7fd fa14 	bl	800311c <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e187      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d02:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d036      	beq.n	8005d88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d016      	beq.n	8005d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d22:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <HAL_RCC_OscConfig+0x248>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d28:	f7fd f9f8 	bl	800311c <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d30:	f7fd f9f4 	bl	800311c <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e167      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d42:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <HAL_RCC_OscConfig+0x240>)
 8005d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0f0      	beq.n	8005d30 <HAL_RCC_OscConfig+0x200>
 8005d4e:	e01b      	b.n	8005d88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d50:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <HAL_RCC_OscConfig+0x248>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d56:	f7fd f9e1 	bl	800311c <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d5c:	e00e      	b.n	8005d7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d5e:	f7fd f9dd 	bl	800311c <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d907      	bls.n	8005d7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e150      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
 8005d70:	40023800 	.word	0x40023800
 8005d74:	42470000 	.word	0x42470000
 8005d78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d7c:	4b88      	ldr	r3, [pc, #544]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1ea      	bne.n	8005d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 8097 	beq.w	8005ec4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d96:	2300      	movs	r3, #0
 8005d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d9a:	4b81      	ldr	r3, [pc, #516]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10f      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005da6:	2300      	movs	r3, #0
 8005da8:	60bb      	str	r3, [r7, #8]
 8005daa:	4b7d      	ldr	r3, [pc, #500]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	4a7c      	ldr	r2, [pc, #496]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db4:	6413      	str	r3, [r2, #64]	; 0x40
 8005db6:	4b7a      	ldr	r3, [pc, #488]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	60bb      	str	r3, [r7, #8]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc6:	4b77      	ldr	r3, [pc, #476]	; (8005fa4 <HAL_RCC_OscConfig+0x474>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d118      	bne.n	8005e04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dd2:	4b74      	ldr	r3, [pc, #464]	; (8005fa4 <HAL_RCC_OscConfig+0x474>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a73      	ldr	r2, [pc, #460]	; (8005fa4 <HAL_RCC_OscConfig+0x474>)
 8005dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dde:	f7fd f99d 	bl	800311c <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de6:	f7fd f999 	bl	800311c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e10c      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df8:	4b6a      	ldr	r3, [pc, #424]	; (8005fa4 <HAL_RCC_OscConfig+0x474>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f0      	beq.n	8005de6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d106      	bne.n	8005e1a <HAL_RCC_OscConfig+0x2ea>
 8005e0c:	4b64      	ldr	r3, [pc, #400]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e10:	4a63      	ldr	r2, [pc, #396]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	6713      	str	r3, [r2, #112]	; 0x70
 8005e18:	e01c      	b.n	8005e54 <HAL_RCC_OscConfig+0x324>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	2b05      	cmp	r3, #5
 8005e20:	d10c      	bne.n	8005e3c <HAL_RCC_OscConfig+0x30c>
 8005e22:	4b5f      	ldr	r3, [pc, #380]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	4a5e      	ldr	r2, [pc, #376]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005e28:	f043 0304 	orr.w	r3, r3, #4
 8005e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e2e:	4b5c      	ldr	r3, [pc, #368]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e32:	4a5b      	ldr	r2, [pc, #364]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	6713      	str	r3, [r2, #112]	; 0x70
 8005e3a:	e00b      	b.n	8005e54 <HAL_RCC_OscConfig+0x324>
 8005e3c:	4b58      	ldr	r3, [pc, #352]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e40:	4a57      	ldr	r2, [pc, #348]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005e42:	f023 0301 	bic.w	r3, r3, #1
 8005e46:	6713      	str	r3, [r2, #112]	; 0x70
 8005e48:	4b55      	ldr	r3, [pc, #340]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	4a54      	ldr	r2, [pc, #336]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005e4e:	f023 0304 	bic.w	r3, r3, #4
 8005e52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d015      	beq.n	8005e88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5c:	f7fd f95e 	bl	800311c <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e62:	e00a      	b.n	8005e7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e64:	f7fd f95a 	bl	800311c <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e0cb      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7a:	4b49      	ldr	r3, [pc, #292]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0ee      	beq.n	8005e64 <HAL_RCC_OscConfig+0x334>
 8005e86:	e014      	b.n	8005eb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e88:	f7fd f948 	bl	800311c <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e8e:	e00a      	b.n	8005ea6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e90:	f7fd f944 	bl	800311c <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e0b5      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea6:	4b3e      	ldr	r3, [pc, #248]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1ee      	bne.n	8005e90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d105      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb8:	4b39      	ldr	r3, [pc, #228]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	4a38      	ldr	r2, [pc, #224]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ec2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 80a1 	beq.w	8006010 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ece:	4b34      	ldr	r3, [pc, #208]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	d05c      	beq.n	8005f94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d141      	bne.n	8005f66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee2:	4b31      	ldr	r3, [pc, #196]	; (8005fa8 <HAL_RCC_OscConfig+0x478>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee8:	f7fd f918 	bl	800311c <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ef0:	f7fd f914 	bl	800311c <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e087      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f02:	4b27      	ldr	r3, [pc, #156]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69da      	ldr	r2, [r3, #28]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	019b      	lsls	r3, r3, #6
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f24:	085b      	lsrs	r3, r3, #1
 8005f26:	3b01      	subs	r3, #1
 8005f28:	041b      	lsls	r3, r3, #16
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	061b      	lsls	r3, r3, #24
 8005f32:	491b      	ldr	r1, [pc, #108]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f38:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <HAL_RCC_OscConfig+0x478>)
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3e:	f7fd f8ed 	bl	800311c <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f46:	f7fd f8e9 	bl	800311c <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e05c      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f58:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0f0      	beq.n	8005f46 <HAL_RCC_OscConfig+0x416>
 8005f64:	e054      	b.n	8006010 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f66:	4b10      	ldr	r3, [pc, #64]	; (8005fa8 <HAL_RCC_OscConfig+0x478>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f6c:	f7fd f8d6 	bl	800311c <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f74:	f7fd f8d2 	bl	800311c <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e045      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f86:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <HAL_RCC_OscConfig+0x470>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f0      	bne.n	8005f74 <HAL_RCC_OscConfig+0x444>
 8005f92:	e03d      	b.n	8006010 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d107      	bne.n	8005fac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e038      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	40007000 	.word	0x40007000
 8005fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fac:	4b1b      	ldr	r3, [pc, #108]	; (800601c <HAL_RCC_OscConfig+0x4ec>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d028      	beq.n	800600c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d121      	bne.n	800600c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d11a      	bne.n	800600c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fdc:	4013      	ands	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d111      	bne.n	800600c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	085b      	lsrs	r3, r3, #1
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d107      	bne.n	800600c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006008:	429a      	cmp	r2, r3
 800600a:	d001      	beq.n	8006010 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40023800 	.word	0x40023800

08006020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e0cc      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006034:	4b68      	ldr	r3, [pc, #416]	; (80061d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d90c      	bls.n	800605c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006042:	4b65      	ldr	r3, [pc, #404]	; (80061d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800604a:	4b63      	ldr	r3, [pc, #396]	; (80061d8 <HAL_RCC_ClockConfig+0x1b8>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d001      	beq.n	800605c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e0b8      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d020      	beq.n	80060aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006074:	4b59      	ldr	r3, [pc, #356]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	4a58      	ldr	r2, [pc, #352]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 800607a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800607e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800608c:	4b53      	ldr	r3, [pc, #332]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	4a52      	ldr	r2, [pc, #328]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006098:	4b50      	ldr	r3, [pc, #320]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	494d      	ldr	r1, [pc, #308]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d044      	beq.n	8006140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d107      	bne.n	80060ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060be:	4b47      	ldr	r3, [pc, #284]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d119      	bne.n	80060fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e07f      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d003      	beq.n	80060de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d107      	bne.n	80060ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060de:	4b3f      	ldr	r3, [pc, #252]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e06f      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ee:	4b3b      	ldr	r3, [pc, #236]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e067      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060fe:	4b37      	ldr	r3, [pc, #220]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f023 0203 	bic.w	r2, r3, #3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	4934      	ldr	r1, [pc, #208]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 800610c:	4313      	orrs	r3, r2
 800610e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006110:	f7fd f804 	bl	800311c <HAL_GetTick>
 8006114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006116:	e00a      	b.n	800612e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006118:	f7fd f800 	bl	800311c <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	f241 3288 	movw	r2, #5000	; 0x1388
 8006126:	4293      	cmp	r3, r2
 8006128:	d901      	bls.n	800612e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e04f      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800612e:	4b2b      	ldr	r3, [pc, #172]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 020c 	and.w	r2, r3, #12
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	429a      	cmp	r2, r3
 800613e:	d1eb      	bne.n	8006118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006140:	4b25      	ldr	r3, [pc, #148]	; (80061d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d20c      	bcs.n	8006168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800614e:	4b22      	ldr	r3, [pc, #136]	; (80061d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006156:	4b20      	ldr	r3, [pc, #128]	; (80061d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d001      	beq.n	8006168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e032      	b.n	80061ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006174:	4b19      	ldr	r3, [pc, #100]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	4916      	ldr	r1, [pc, #88]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006182:	4313      	orrs	r3, r2
 8006184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006192:	4b12      	ldr	r3, [pc, #72]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	490e      	ldr	r1, [pc, #56]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061a6:	f000 f821 	bl	80061ec <HAL_RCC_GetSysClockFreq>
 80061aa:	4602      	mov	r2, r0
 80061ac:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	091b      	lsrs	r3, r3, #4
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	490a      	ldr	r1, [pc, #40]	; (80061e0 <HAL_RCC_ClockConfig+0x1c0>)
 80061b8:	5ccb      	ldrb	r3, [r1, r3]
 80061ba:	fa22 f303 	lsr.w	r3, r2, r3
 80061be:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <HAL_RCC_ClockConfig+0x1c4>)
 80061c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061c2:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <HAL_RCC_ClockConfig+0x1c8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fb ff6e 	bl	80020a8 <HAL_InitTick>

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40023c00 	.word	0x40023c00
 80061dc:	40023800 	.word	0x40023800
 80061e0:	0801bf0c 	.word	0x0801bf0c
 80061e4:	20000004 	.word	0x20000004
 80061e8:	20000008 	.word	0x20000008

080061ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061f0:	b094      	sub	sp, #80	; 0x50
 80061f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	647b      	str	r3, [r7, #68]	; 0x44
 80061f8:	2300      	movs	r3, #0
 80061fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061fc:	2300      	movs	r3, #0
 80061fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006204:	4b79      	ldr	r3, [pc, #484]	; (80063ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 030c 	and.w	r3, r3, #12
 800620c:	2b08      	cmp	r3, #8
 800620e:	d00d      	beq.n	800622c <HAL_RCC_GetSysClockFreq+0x40>
 8006210:	2b08      	cmp	r3, #8
 8006212:	f200 80e1 	bhi.w	80063d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <HAL_RCC_GetSysClockFreq+0x34>
 800621a:	2b04      	cmp	r3, #4
 800621c:	d003      	beq.n	8006226 <HAL_RCC_GetSysClockFreq+0x3a>
 800621e:	e0db      	b.n	80063d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006220:	4b73      	ldr	r3, [pc, #460]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006222:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006224:	e0db      	b.n	80063de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006226:	4b73      	ldr	r3, [pc, #460]	; (80063f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006228:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800622a:	e0d8      	b.n	80063de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800622c:	4b6f      	ldr	r3, [pc, #444]	; (80063ec <HAL_RCC_GetSysClockFreq+0x200>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006234:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006236:	4b6d      	ldr	r3, [pc, #436]	; (80063ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d063      	beq.n	800630a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006242:	4b6a      	ldr	r3, [pc, #424]	; (80063ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	099b      	lsrs	r3, r3, #6
 8006248:	2200      	movs	r2, #0
 800624a:	63bb      	str	r3, [r7, #56]	; 0x38
 800624c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006254:	633b      	str	r3, [r7, #48]	; 0x30
 8006256:	2300      	movs	r3, #0
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
 800625a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800625e:	4622      	mov	r2, r4
 8006260:	462b      	mov	r3, r5
 8006262:	f04f 0000 	mov.w	r0, #0
 8006266:	f04f 0100 	mov.w	r1, #0
 800626a:	0159      	lsls	r1, r3, #5
 800626c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006270:	0150      	lsls	r0, r2, #5
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4621      	mov	r1, r4
 8006278:	1a51      	subs	r1, r2, r1
 800627a:	6139      	str	r1, [r7, #16]
 800627c:	4629      	mov	r1, r5
 800627e:	eb63 0301 	sbc.w	r3, r3, r1
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	f04f 0200 	mov.w	r2, #0
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006290:	4659      	mov	r1, fp
 8006292:	018b      	lsls	r3, r1, #6
 8006294:	4651      	mov	r1, sl
 8006296:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800629a:	4651      	mov	r1, sl
 800629c:	018a      	lsls	r2, r1, #6
 800629e:	4651      	mov	r1, sl
 80062a0:	ebb2 0801 	subs.w	r8, r2, r1
 80062a4:	4659      	mov	r1, fp
 80062a6:	eb63 0901 	sbc.w	r9, r3, r1
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	f04f 0300 	mov.w	r3, #0
 80062b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062be:	4690      	mov	r8, r2
 80062c0:	4699      	mov	r9, r3
 80062c2:	4623      	mov	r3, r4
 80062c4:	eb18 0303 	adds.w	r3, r8, r3
 80062c8:	60bb      	str	r3, [r7, #8]
 80062ca:	462b      	mov	r3, r5
 80062cc:	eb49 0303 	adc.w	r3, r9, r3
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062de:	4629      	mov	r1, r5
 80062e0:	024b      	lsls	r3, r1, #9
 80062e2:	4621      	mov	r1, r4
 80062e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062e8:	4621      	mov	r1, r4
 80062ea:	024a      	lsls	r2, r1, #9
 80062ec:	4610      	mov	r0, r2
 80062ee:	4619      	mov	r1, r3
 80062f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f2:	2200      	movs	r2, #0
 80062f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062fc:	f7fa fa2c 	bl	8000758 <__aeabi_uldivmod>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4613      	mov	r3, r2
 8006306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006308:	e058      	b.n	80063bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800630a:	4b38      	ldr	r3, [pc, #224]	; (80063ec <HAL_RCC_GetSysClockFreq+0x200>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	099b      	lsrs	r3, r3, #6
 8006310:	2200      	movs	r2, #0
 8006312:	4618      	mov	r0, r3
 8006314:	4611      	mov	r1, r2
 8006316:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800631a:	623b      	str	r3, [r7, #32]
 800631c:	2300      	movs	r3, #0
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
 8006320:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	f04f 0000 	mov.w	r0, #0
 800632c:	f04f 0100 	mov.w	r1, #0
 8006330:	0159      	lsls	r1, r3, #5
 8006332:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006336:	0150      	lsls	r0, r2, #5
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	4641      	mov	r1, r8
 800633e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006342:	4649      	mov	r1, r9
 8006344:	eb63 0b01 	sbc.w	fp, r3, r1
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006354:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006358:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800635c:	ebb2 040a 	subs.w	r4, r2, sl
 8006360:	eb63 050b 	sbc.w	r5, r3, fp
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	00eb      	lsls	r3, r5, #3
 800636e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006372:	00e2      	lsls	r2, r4, #3
 8006374:	4614      	mov	r4, r2
 8006376:	461d      	mov	r5, r3
 8006378:	4643      	mov	r3, r8
 800637a:	18e3      	adds	r3, r4, r3
 800637c:	603b      	str	r3, [r7, #0]
 800637e:	464b      	mov	r3, r9
 8006380:	eb45 0303 	adc.w	r3, r5, r3
 8006384:	607b      	str	r3, [r7, #4]
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	f04f 0300 	mov.w	r3, #0
 800638e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006392:	4629      	mov	r1, r5
 8006394:	028b      	lsls	r3, r1, #10
 8006396:	4621      	mov	r1, r4
 8006398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800639c:	4621      	mov	r1, r4
 800639e:	028a      	lsls	r2, r1, #10
 80063a0:	4610      	mov	r0, r2
 80063a2:	4619      	mov	r1, r3
 80063a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a6:	2200      	movs	r2, #0
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	61fa      	str	r2, [r7, #28]
 80063ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063b0:	f7fa f9d2 	bl	8000758 <__aeabi_uldivmod>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4613      	mov	r3, r2
 80063ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <HAL_RCC_GetSysClockFreq+0x200>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	0c1b      	lsrs	r3, r3, #16
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	3301      	adds	r3, #1
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80063cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063d6:	e002      	b.n	80063de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063d8:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80063da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3750      	adds	r7, #80	; 0x50
 80063e4:	46bd      	mov	sp, r7
 80063e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ea:	bf00      	nop
 80063ec:	40023800 	.word	0x40023800
 80063f0:	00f42400 	.word	0x00f42400
 80063f4:	007a1200 	.word	0x007a1200

080063f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063fc:	4b03      	ldr	r3, [pc, #12]	; (800640c <HAL_RCC_GetHCLKFreq+0x14>)
 80063fe:	681b      	ldr	r3, [r3, #0]
}
 8006400:	4618      	mov	r0, r3
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	20000004 	.word	0x20000004

08006410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006414:	f7ff fff0 	bl	80063f8 <HAL_RCC_GetHCLKFreq>
 8006418:	4602      	mov	r2, r0
 800641a:	4b05      	ldr	r3, [pc, #20]	; (8006430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	0a9b      	lsrs	r3, r3, #10
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	4903      	ldr	r1, [pc, #12]	; (8006434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006426:	5ccb      	ldrb	r3, [r1, r3]
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800642c:	4618      	mov	r0, r3
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40023800 	.word	0x40023800
 8006434:	0801bf1c 	.word	0x0801bf1c

08006438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800643c:	f7ff ffdc 	bl	80063f8 <HAL_RCC_GetHCLKFreq>
 8006440:	4602      	mov	r2, r0
 8006442:	4b05      	ldr	r3, [pc, #20]	; (8006458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	0b5b      	lsrs	r3, r3, #13
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	4903      	ldr	r1, [pc, #12]	; (800645c <HAL_RCC_GetPCLK2Freq+0x24>)
 800644e:	5ccb      	ldrb	r3, [r1, r3]
 8006450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006454:	4618      	mov	r0, r3
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40023800 	.word	0x40023800
 800645c:	0801bf1c 	.word	0x0801bf1c

08006460 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	220f      	movs	r2, #15
 800646e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006470:	4b12      	ldr	r3, [pc, #72]	; (80064bc <HAL_RCC_GetClockConfig+0x5c>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0203 	and.w	r2, r3, #3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800647c:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <HAL_RCC_GetClockConfig+0x5c>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006488:	4b0c      	ldr	r3, [pc, #48]	; (80064bc <HAL_RCC_GetClockConfig+0x5c>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006494:	4b09      	ldr	r3, [pc, #36]	; (80064bc <HAL_RCC_GetClockConfig+0x5c>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	08db      	lsrs	r3, r3, #3
 800649a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064a2:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <HAL_RCC_GetClockConfig+0x60>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0207 	and.w	r2, r3, #7
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	601a      	str	r2, [r3, #0]
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40023800 	.word	0x40023800
 80064c0:	40023c00 	.word	0x40023c00

080064c4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e01c      	b.n	8006510 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	795b      	ldrb	r3, [r3, #5]
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d105      	bne.n	80064ec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fb fd12 	bl	8001f10 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0204 	orr.w	r2, r2, #4
 8006500:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e07b      	b.n	8006622 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	2b00      	cmp	r3, #0
 8006530:	d108      	bne.n	8006544 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800653a:	d009      	beq.n	8006550 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	61da      	str	r2, [r3, #28]
 8006542:	e005      	b.n	8006550 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fb fd28 	bl	8001fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006586:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065c0:	431a      	orrs	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d4:	ea42 0103 	orr.w	r1, r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	0c1b      	lsrs	r3, r3, #16
 80065ee:	f003 0104 	and.w	r1, r3, #4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	f003 0210 	and.w	r2, r3, #16
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006610:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b082      	sub	sp, #8
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e041      	b.n	80066c0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d106      	bne.n	8006656 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7fc fa13 	bl	8002a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2202      	movs	r2, #2
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3304      	adds	r3, #4
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f000 fded 	bl	8007248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d001      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e04e      	b.n	800677e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0201 	orr.w	r2, r2, #1
 80066f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a23      	ldr	r2, [pc, #140]	; (800678c <HAL_TIM_Base_Start_IT+0xc4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d022      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670a:	d01d      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a1f      	ldr	r2, [pc, #124]	; (8006790 <HAL_TIM_Base_Start_IT+0xc8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d018      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a1e      	ldr	r2, [pc, #120]	; (8006794 <HAL_TIM_Base_Start_IT+0xcc>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d013      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a1c      	ldr	r2, [pc, #112]	; (8006798 <HAL_TIM_Base_Start_IT+0xd0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00e      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1b      	ldr	r2, [pc, #108]	; (800679c <HAL_TIM_Base_Start_IT+0xd4>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d009      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a19      	ldr	r2, [pc, #100]	; (80067a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0x80>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a18      	ldr	r2, [pc, #96]	; (80067a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d111      	bne.n	800676c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b06      	cmp	r3, #6
 8006758:	d010      	beq.n	800677c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f042 0201 	orr.w	r2, r2, #1
 8006768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800676a:	e007      	b.n	800677c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40010000 	.word	0x40010000
 8006790:	40000400 	.word	0x40000400
 8006794:	40000800 	.word	0x40000800
 8006798:	40000c00 	.word	0x40000c00
 800679c:	40010400 	.word	0x40010400
 80067a0:	40014000 	.word	0x40014000
 80067a4:	40001800 	.word	0x40001800

080067a8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e041      	b.n	800683e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fc f932 	bl	8002a38 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4619      	mov	r1, r3
 80067e6:	4610      	mov	r0, r2
 80067e8:	f000 fd2e 	bl	8007248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b082      	sub	sp, #8
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e041      	b.n	80068dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	d106      	bne.n	8006872 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7fc f89b 	bl	80029a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2202      	movs	r2, #2
 8006876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3304      	adds	r3, #4
 8006882:	4619      	mov	r1, r3
 8006884:	4610      	mov	r0, r2
 8006886:	f000 fcdf 	bl	8007248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e041      	b.n	800697a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f839 	bl	8006982 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3304      	adds	r3, #4
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f000 fc90 	bl	8007248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b086      	sub	sp, #24
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e097      	b.n	8006ada <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fb ff70 	bl	80028a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069da:	f023 0307 	bic.w	r3, r3, #7
 80069de:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	3304      	adds	r3, #4
 80069e8:	4619      	mov	r1, r3
 80069ea:	4610      	mov	r0, r2
 80069ec:	f000 fc2c 	bl	8007248 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a18:	f023 0303 	bic.w	r3, r3, #3
 8006a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	021b      	lsls	r3, r3, #8
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006a36:	f023 030c 	bic.w	r3, r3, #12
 8006a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	021b      	lsls	r3, r3, #8
 8006a52:	4313      	orrs	r3, r2
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	011a      	lsls	r2, r3, #4
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	031b      	lsls	r3, r3, #12
 8006a66:	4313      	orrs	r3, r2
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006a74:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006a7c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b082      	sub	sp, #8
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d122      	bne.n	8006b3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d11b      	bne.n	8006b3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f06f 0202 	mvn.w	r2, #2
 8006b0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	f003 0303 	and.w	r3, r3, #3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fb70 	bl	800720a <HAL_TIM_IC_CaptureCallback>
 8006b2a:	e005      	b.n	8006b38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fb62 	bl	80071f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fb73 	bl	800721e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d122      	bne.n	8006b92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d11b      	bne.n	8006b92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f06f 0204 	mvn.w	r2, #4
 8006b62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fb46 	bl	800720a <HAL_TIM_IC_CaptureCallback>
 8006b7e:	e005      	b.n	8006b8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fb38 	bl	80071f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fb49 	bl	800721e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f003 0308 	and.w	r3, r3, #8
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d122      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b08      	cmp	r3, #8
 8006bac:	d11b      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f06f 0208 	mvn.w	r2, #8
 8006bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2204      	movs	r2, #4
 8006bbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	f003 0303 	and.w	r3, r3, #3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fb1c 	bl	800720a <HAL_TIM_IC_CaptureCallback>
 8006bd2:	e005      	b.n	8006be0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fb0e 	bl	80071f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fb1f 	bl	800721e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b10      	cmp	r3, #16
 8006bf2:	d122      	bne.n	8006c3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f003 0310 	and.w	r3, r3, #16
 8006bfe:	2b10      	cmp	r3, #16
 8006c00:	d11b      	bne.n	8006c3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f06f 0210 	mvn.w	r2, #16
 8006c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2208      	movs	r2, #8
 8006c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 faf2 	bl	800720a <HAL_TIM_IC_CaptureCallback>
 8006c26:	e005      	b.n	8006c34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fae4 	bl	80071f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 faf5 	bl	800721e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d10e      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d107      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f06f 0201 	mvn.w	r2, #1
 8006c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7fa ffc5 	bl	8001bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c70:	2b80      	cmp	r3, #128	; 0x80
 8006c72:	d10e      	bne.n	8006c92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7e:	2b80      	cmp	r3, #128	; 0x80
 8006c80:	d107      	bne.n	8006c92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 ffc7 	bl	8007c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9c:	2b40      	cmp	r3, #64	; 0x40
 8006c9e:	d10e      	bne.n	8006cbe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006caa:	2b40      	cmp	r3, #64	; 0x40
 8006cac:	d107      	bne.n	8006cbe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 faba 	bl	8007232 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b20      	cmp	r3, #32
 8006cca:	d10e      	bne.n	8006cea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f003 0320 	and.w	r3, r3, #32
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d107      	bne.n	8006cea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f06f 0220 	mvn.w	r2, #32
 8006ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 ff91 	bl	8007c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cea:	bf00      	nop
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e048      	b.n	8006da4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b0c      	cmp	r3, #12
 8006d1e:	d839      	bhi.n	8006d94 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d5d 	.word	0x08006d5d
 8006d2c:	08006d95 	.word	0x08006d95
 8006d30:	08006d95 	.word	0x08006d95
 8006d34:	08006d95 	.word	0x08006d95
 8006d38:	08006d6b 	.word	0x08006d6b
 8006d3c:	08006d95 	.word	0x08006d95
 8006d40:	08006d95 	.word	0x08006d95
 8006d44:	08006d95 	.word	0x08006d95
 8006d48:	08006d79 	.word	0x08006d79
 8006d4c:	08006d95 	.word	0x08006d95
 8006d50:	08006d95 	.word	0x08006d95
 8006d54:	08006d95 	.word	0x08006d95
 8006d58:	08006d87 	.word	0x08006d87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fb10 	bl	8007388 <TIM_OC1_SetConfig>
      break;
 8006d68:	e017      	b.n	8006d9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fb79 	bl	8007468 <TIM_OC2_SetConfig>
      break;
 8006d76:	e010      	b.n	8006d9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68b9      	ldr	r1, [r7, #8]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fbe8 	bl	8007554 <TIM_OC3_SetConfig>
      break;
 8006d84:	e009      	b.n	8006d9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68b9      	ldr	r1, [r7, #8]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fc55 	bl	800763c <TIM_OC4_SetConfig>
      break;
 8006d92:	e002      	b.n	8006d9a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	75fb      	strb	r3, [r7, #23]
      break;
 8006d98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <HAL_TIM_IC_ConfigChannel+0x1e>
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	e088      	b.n	8006edc <HAL_TIM_IC_ConfigChannel+0x130>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d11b      	bne.n	8006e10 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6818      	ldr	r0, [r3, #0]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6819      	ldr	r1, [r3, #0]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f000 fc7e 	bl	80076e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 020c 	bic.w	r2, r2, #12
 8006dfa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6999      	ldr	r1, [r3, #24]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	619a      	str	r2, [r3, #24]
 8006e0e:	e060      	b.n	8006ed2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d11c      	bne.n	8006e50 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6818      	ldr	r0, [r3, #0]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6819      	ldr	r1, [r3, #0]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f000 fd02 	bl	800782e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	699a      	ldr	r2, [r3, #24]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6999      	ldr	r1, [r3, #24]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	021a      	lsls	r2, r3, #8
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	619a      	str	r2, [r3, #24]
 8006e4e:	e040      	b.n	8006ed2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d11b      	bne.n	8006e8e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6818      	ldr	r0, [r3, #0]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	6819      	ldr	r1, [r3, #0]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f000 fd4f 	bl	8007908 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69da      	ldr	r2, [r3, #28]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 020c 	bic.w	r2, r2, #12
 8006e78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69d9      	ldr	r1, [r3, #28]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	61da      	str	r2, [r3, #28]
 8006e8c:	e021      	b.n	8006ed2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b0c      	cmp	r3, #12
 8006e92:	d11c      	bne.n	8006ece <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	6819      	ldr	r1, [r3, #0]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f000 fd6c 	bl	8007980 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	69da      	ldr	r2, [r3, #28]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006eb6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	69d9      	ldr	r1, [r3, #28]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	021a      	lsls	r2, r3, #8
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	61da      	str	r2, [r3, #28]
 8006ecc:	e001      	b.n	8006ed2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006efe:	2302      	movs	r3, #2
 8006f00:	e0ae      	b.n	8007060 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b0c      	cmp	r3, #12
 8006f0e:	f200 809f 	bhi.w	8007050 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f12:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006f4d 	.word	0x08006f4d
 8006f1c:	08007051 	.word	0x08007051
 8006f20:	08007051 	.word	0x08007051
 8006f24:	08007051 	.word	0x08007051
 8006f28:	08006f8d 	.word	0x08006f8d
 8006f2c:	08007051 	.word	0x08007051
 8006f30:	08007051 	.word	0x08007051
 8006f34:	08007051 	.word	0x08007051
 8006f38:	08006fcf 	.word	0x08006fcf
 8006f3c:	08007051 	.word	0x08007051
 8006f40:	08007051 	.word	0x08007051
 8006f44:	08007051 	.word	0x08007051
 8006f48:	0800700f 	.word	0x0800700f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68b9      	ldr	r1, [r7, #8]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fa18 	bl	8007388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0208 	orr.w	r2, r2, #8
 8006f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0204 	bic.w	r2, r2, #4
 8006f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6999      	ldr	r1, [r3, #24]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	691a      	ldr	r2, [r3, #16]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	619a      	str	r2, [r3, #24]
      break;
 8006f8a:	e064      	b.n	8007056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fa68 	bl	8007468 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6999      	ldr	r1, [r3, #24]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	021a      	lsls	r2, r3, #8
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	619a      	str	r2, [r3, #24]
      break;
 8006fcc:	e043      	b.n	8007056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fabd 	bl	8007554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69da      	ldr	r2, [r3, #28]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f042 0208 	orr.w	r2, r2, #8
 8006fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	69da      	ldr	r2, [r3, #28]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0204 	bic.w	r2, r2, #4
 8006ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69d9      	ldr	r1, [r3, #28]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	691a      	ldr	r2, [r3, #16]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	61da      	str	r2, [r3, #28]
      break;
 800700c:	e023      	b.n	8007056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68b9      	ldr	r1, [r7, #8]
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fb11 	bl	800763c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69da      	ldr	r2, [r3, #28]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69d9      	ldr	r1, [r3, #28]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	021a      	lsls	r2, r3, #8
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	61da      	str	r2, [r3, #28]
      break;
 800704e:	e002      	b.n	8007056 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]
      break;
 8007054:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800705e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800707c:	2b01      	cmp	r3, #1
 800707e:	d101      	bne.n	8007084 <HAL_TIM_ConfigClockSource+0x1c>
 8007080:	2302      	movs	r3, #2
 8007082:	e0b4      	b.n	80071ee <HAL_TIM_ConfigClockSource+0x186>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070bc:	d03e      	beq.n	800713c <HAL_TIM_ConfigClockSource+0xd4>
 80070be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070c2:	f200 8087 	bhi.w	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ca:	f000 8086 	beq.w	80071da <HAL_TIM_ConfigClockSource+0x172>
 80070ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d2:	d87f      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070d4:	2b70      	cmp	r3, #112	; 0x70
 80070d6:	d01a      	beq.n	800710e <HAL_TIM_ConfigClockSource+0xa6>
 80070d8:	2b70      	cmp	r3, #112	; 0x70
 80070da:	d87b      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070dc:	2b60      	cmp	r3, #96	; 0x60
 80070de:	d050      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0x11a>
 80070e0:	2b60      	cmp	r3, #96	; 0x60
 80070e2:	d877      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070e4:	2b50      	cmp	r3, #80	; 0x50
 80070e6:	d03c      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0xfa>
 80070e8:	2b50      	cmp	r3, #80	; 0x50
 80070ea:	d873      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070ec:	2b40      	cmp	r3, #64	; 0x40
 80070ee:	d058      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x13a>
 80070f0:	2b40      	cmp	r3, #64	; 0x40
 80070f2:	d86f      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070f4:	2b30      	cmp	r3, #48	; 0x30
 80070f6:	d064      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x15a>
 80070f8:	2b30      	cmp	r3, #48	; 0x30
 80070fa:	d86b      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d060      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007100:	2b20      	cmp	r3, #32
 8007102:	d867      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d05c      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007108:	2b10      	cmp	r3, #16
 800710a:	d05a      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x15a>
 800710c:	e062      	b.n	80071d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6899      	ldr	r1, [r3, #8]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f000 fc87 	bl	8007a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	609a      	str	r2, [r3, #8]
      break;
 800713a:	e04f      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6818      	ldr	r0, [r3, #0]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	6899      	ldr	r1, [r3, #8]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f000 fc70 	bl	8007a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800715e:	609a      	str	r2, [r3, #8]
      break;
 8007160:	e03c      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6859      	ldr	r1, [r3, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	461a      	mov	r2, r3
 8007170:	f000 fb2e 	bl	80077d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2150      	movs	r1, #80	; 0x50
 800717a:	4618      	mov	r0, r3
 800717c:	f000 fc3d 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 8007180:	e02c      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6859      	ldr	r1, [r3, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	461a      	mov	r2, r3
 8007190:	f000 fb8a 	bl	80078a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2160      	movs	r1, #96	; 0x60
 800719a:	4618      	mov	r0, r3
 800719c:	f000 fc2d 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 80071a0:	e01c      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6818      	ldr	r0, [r3, #0]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	6859      	ldr	r1, [r3, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	461a      	mov	r2, r3
 80071b0:	f000 fb0e 	bl	80077d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2140      	movs	r1, #64	; 0x40
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 fc1d 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 80071c0:	e00c      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f000 fc14 	bl	80079fa <TIM_ITRx_SetConfig>
      break;
 80071d2:	e003      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	73fb      	strb	r3, [r7, #15]
      break;
 80071d8:	e000      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80071da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800723a:	bf00      	nop
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
	...

08007248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a40      	ldr	r2, [pc, #256]	; (800735c <TIM_Base_SetConfig+0x114>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d013      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007266:	d00f      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a3d      	ldr	r2, [pc, #244]	; (8007360 <TIM_Base_SetConfig+0x118>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00b      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a3c      	ldr	r2, [pc, #240]	; (8007364 <TIM_Base_SetConfig+0x11c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d007      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a3b      	ldr	r2, [pc, #236]	; (8007368 <TIM_Base_SetConfig+0x120>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d003      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a3a      	ldr	r2, [pc, #232]	; (800736c <TIM_Base_SetConfig+0x124>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d108      	bne.n	800729a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a2f      	ldr	r2, [pc, #188]	; (800735c <TIM_Base_SetConfig+0x114>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d02b      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a8:	d027      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a2c      	ldr	r2, [pc, #176]	; (8007360 <TIM_Base_SetConfig+0x118>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d023      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a2b      	ldr	r2, [pc, #172]	; (8007364 <TIM_Base_SetConfig+0x11c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d01f      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a2a      	ldr	r2, [pc, #168]	; (8007368 <TIM_Base_SetConfig+0x120>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d01b      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a29      	ldr	r2, [pc, #164]	; (800736c <TIM_Base_SetConfig+0x124>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d017      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a28      	ldr	r2, [pc, #160]	; (8007370 <TIM_Base_SetConfig+0x128>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d013      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a27      	ldr	r2, [pc, #156]	; (8007374 <TIM_Base_SetConfig+0x12c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d00f      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a26      	ldr	r2, [pc, #152]	; (8007378 <TIM_Base_SetConfig+0x130>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00b      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a25      	ldr	r2, [pc, #148]	; (800737c <TIM_Base_SetConfig+0x134>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d007      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a24      	ldr	r2, [pc, #144]	; (8007380 <TIM_Base_SetConfig+0x138>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d003      	beq.n	80072fa <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a23      	ldr	r2, [pc, #140]	; (8007384 <TIM_Base_SetConfig+0x13c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d108      	bne.n	800730c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4313      	orrs	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	4313      	orrs	r3, r2
 8007318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a0a      	ldr	r2, [pc, #40]	; (800735c <TIM_Base_SetConfig+0x114>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d003      	beq.n	8007340 <TIM_Base_SetConfig+0xf8>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a0c      	ldr	r2, [pc, #48]	; (800736c <TIM_Base_SetConfig+0x124>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d103      	bne.n	8007348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	615a      	str	r2, [r3, #20]
}
 800734e:	bf00      	nop
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40010000 	.word	0x40010000
 8007360:	40000400 	.word	0x40000400
 8007364:	40000800 	.word	0x40000800
 8007368:	40000c00 	.word	0x40000c00
 800736c:	40010400 	.word	0x40010400
 8007370:	40014000 	.word	0x40014000
 8007374:	40014400 	.word	0x40014400
 8007378:	40014800 	.word	0x40014800
 800737c:	40001800 	.word	0x40001800
 8007380:	40001c00 	.word	0x40001c00
 8007384:	40002000 	.word	0x40002000

08007388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	f023 0201 	bic.w	r2, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f023 0302 	bic.w	r3, r3, #2
 80073d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a20      	ldr	r2, [pc, #128]	; (8007460 <TIM_OC1_SetConfig+0xd8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d003      	beq.n	80073ec <TIM_OC1_SetConfig+0x64>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a1f      	ldr	r2, [pc, #124]	; (8007464 <TIM_OC1_SetConfig+0xdc>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d10c      	bne.n	8007406 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f023 0308 	bic.w	r3, r3, #8
 80073f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f023 0304 	bic.w	r3, r3, #4
 8007404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a15      	ldr	r2, [pc, #84]	; (8007460 <TIM_OC1_SetConfig+0xd8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d003      	beq.n	8007416 <TIM_OC1_SetConfig+0x8e>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a14      	ldr	r2, [pc, #80]	; (8007464 <TIM_OC1_SetConfig+0xdc>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d111      	bne.n	800743a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800741c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4313      	orrs	r3, r2
 8007438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	621a      	str	r2, [r3, #32]
}
 8007454:	bf00      	nop
 8007456:	371c      	adds	r7, #28
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	40010000 	.word	0x40010000
 8007464:	40010400 	.word	0x40010400

08007468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f023 0210 	bic.w	r2, r3, #16
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800749e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	021b      	lsls	r3, r3, #8
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f023 0320 	bic.w	r3, r3, #32
 80074b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	4313      	orrs	r3, r2
 80074be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a22      	ldr	r2, [pc, #136]	; (800754c <TIM_OC2_SetConfig+0xe4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d003      	beq.n	80074d0 <TIM_OC2_SetConfig+0x68>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a21      	ldr	r2, [pc, #132]	; (8007550 <TIM_OC2_SetConfig+0xe8>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d10d      	bne.n	80074ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a17      	ldr	r2, [pc, #92]	; (800754c <TIM_OC2_SetConfig+0xe4>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d003      	beq.n	80074fc <TIM_OC2_SetConfig+0x94>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a16      	ldr	r2, [pc, #88]	; (8007550 <TIM_OC2_SetConfig+0xe8>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d113      	bne.n	8007524 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007502:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800750a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	621a      	str	r2, [r3, #32]
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	40010000 	.word	0x40010000
 8007550:	40010400 	.word	0x40010400

08007554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0303 	bic.w	r3, r3, #3
 800758a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800759c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	021b      	lsls	r3, r3, #8
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a21      	ldr	r2, [pc, #132]	; (8007634 <TIM_OC3_SetConfig+0xe0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d003      	beq.n	80075ba <TIM_OC3_SetConfig+0x66>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a20      	ldr	r2, [pc, #128]	; (8007638 <TIM_OC3_SetConfig+0xe4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d10d      	bne.n	80075d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a16      	ldr	r2, [pc, #88]	; (8007634 <TIM_OC3_SetConfig+0xe0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d003      	beq.n	80075e6 <TIM_OC3_SetConfig+0x92>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a15      	ldr	r2, [pc, #84]	; (8007638 <TIM_OC3_SetConfig+0xe4>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d113      	bne.n	800760e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	4313      	orrs	r3, r2
 800760c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	621a      	str	r2, [r3, #32]
}
 8007628:	bf00      	nop
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	40010000 	.word	0x40010000
 8007638:	40010400 	.word	0x40010400

0800763c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	031b      	lsls	r3, r3, #12
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a12      	ldr	r2, [pc, #72]	; (80076e0 <TIM_OC4_SetConfig+0xa4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_OC4_SetConfig+0x68>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a11      	ldr	r2, [pc, #68]	; (80076e4 <TIM_OC4_SetConfig+0xa8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d109      	bne.n	80076b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	019b      	lsls	r3, r3, #6
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	621a      	str	r2, [r3, #32]
}
 80076d2:	bf00      	nop
 80076d4:	371c      	adds	r7, #28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	40010000 	.word	0x40010000
 80076e4:	40010400 	.word	0x40010400

080076e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f023 0201 	bic.w	r2, r3, #1
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a28      	ldr	r2, [pc, #160]	; (80077b4 <TIM_TI1_SetConfig+0xcc>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d01b      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771c:	d017      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4a25      	ldr	r2, [pc, #148]	; (80077b8 <TIM_TI1_SetConfig+0xd0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4a24      	ldr	r2, [pc, #144]	; (80077bc <TIM_TI1_SetConfig+0xd4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00f      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4a23      	ldr	r2, [pc, #140]	; (80077c0 <TIM_TI1_SetConfig+0xd8>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00b      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4a22      	ldr	r2, [pc, #136]	; (80077c4 <TIM_TI1_SetConfig+0xdc>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d007      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4a21      	ldr	r2, [pc, #132]	; (80077c8 <TIM_TI1_SetConfig+0xe0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d003      	beq.n	800774e <TIM_TI1_SetConfig+0x66>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4a20      	ldr	r2, [pc, #128]	; (80077cc <TIM_TI1_SetConfig+0xe4>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d101      	bne.n	8007752 <TIM_TI1_SetConfig+0x6a>
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <TIM_TI1_SetConfig+0x6c>
 8007752:	2300      	movs	r3, #0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d008      	beq.n	800776a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4313      	orrs	r3, r2
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	e003      	b.n	8007772 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f043 0301 	orr.w	r3, r3, #1
 8007770:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	011b      	lsls	r3, r3, #4
 800777e:	b2db      	uxtb	r3, r3
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f023 030a 	bic.w	r3, r3, #10
 800778c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f003 030a 	and.w	r3, r3, #10
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	4313      	orrs	r3, r2
 8007798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	621a      	str	r2, [r3, #32]
}
 80077a6:	bf00      	nop
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40010000 	.word	0x40010000
 80077b8:	40000400 	.word	0x40000400
 80077bc:	40000800 	.word	0x40000800
 80077c0:	40000c00 	.word	0x40000c00
 80077c4:	40010400 	.word	0x40010400
 80077c8:	40014000 	.word	0x40014000
 80077cc:	40001800 	.word	0x40001800

080077d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	f023 0201 	bic.w	r2, r3, #1
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	4313      	orrs	r3, r2
 8007804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f023 030a 	bic.w	r3, r3, #10
 800780c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	621a      	str	r2, [r3, #32]
}
 8007822:	bf00      	nop
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800782e:	b480      	push	{r7}
 8007830:	b087      	sub	sp, #28
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	f023 0210 	bic.w	r2, r3, #16
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800785a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4313      	orrs	r3, r2
 8007864:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800786c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	031b      	lsls	r3, r3, #12
 8007872:	b29b      	uxth	r3, r3
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007880:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4313      	orrs	r3, r2
 800788e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	621a      	str	r2, [r3, #32]
}
 800789c:	bf00      	nop
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	f023 0210 	bic.w	r2, r3, #16
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	031b      	lsls	r3, r3, #12
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	621a      	str	r2, [r3, #32]
}
 80078fc:	bf00      	nop
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f023 0303 	bic.w	r3, r3, #3
 8007934:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007944:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	011b      	lsls	r3, r3, #4
 800794a:	b2db      	uxtb	r3, r3
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007958:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4313      	orrs	r3, r2
 8007966:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	621a      	str	r2, [r3, #32]
}
 8007974:	bf00      	nop
 8007976:	371c      	adds	r7, #28
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	021b      	lsls	r3, r3, #8
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	031b      	lsls	r3, r3, #12
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80079d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	031b      	lsls	r3, r3, #12
 80079d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	621a      	str	r2, [r3, #32]
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f043 0307 	orr.w	r3, r3, #7
 8007a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	609a      	str	r2, [r3, #8]
}
 8007a24:	bf00      	nop
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	021a      	lsls	r2, r3, #8
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	609a      	str	r2, [r3, #8]
}
 8007a64:	bf00      	nop
 8007a66:	371c      	adds	r7, #28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d101      	bne.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a84:	2302      	movs	r3, #2
 8007a86:	e05a      	b.n	8007b3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a21      	ldr	r2, [pc, #132]	; (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d022      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad4:	d01d      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a1d      	ldr	r2, [pc, #116]	; (8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d018      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1b      	ldr	r2, [pc, #108]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d013      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a1a      	ldr	r2, [pc, #104]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00e      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a18      	ldr	r2, [pc, #96]	; (8007b5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d009      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a17      	ldr	r2, [pc, #92]	; (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d004      	beq.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a15      	ldr	r2, [pc, #84]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d10c      	bne.n	8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40000400 	.word	0x40000400
 8007b54:	40000800 	.word	0x40000800
 8007b58:	40000c00 	.word	0x40000c00
 8007b5c:	40010400 	.word	0x40010400
 8007b60:	40014000 	.word	0x40014000
 8007b64:	40001800 	.word	0x40001800

08007b68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d101      	bne.n	8007b84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b80:	2302      	movs	r3, #2
 8007b82:	e03d      	b.n	8007c00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e03f      	b.n	8007cc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d106      	bne.n	8007c60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7fb f846 	bl	8002cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2224      	movs	r2, #36	; 0x24
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 ffd7 	bl	8008c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	691a      	ldr	r2, [r3, #16]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	695a      	ldr	r2, [r3, #20]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08c      	sub	sp, #48	; 0x30
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	d165      	bne.n	8007db6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <HAL_UART_Transmit_DMA+0x26>
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e05e      	b.n	8007db8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_UART_Transmit_DMA+0x38>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e057      	b.n	8007db8 <HAL_UART_Transmit_DMA+0xe8>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	88fa      	ldrh	r2, [r7, #6]
 8007d1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	88fa      	ldrh	r2, [r7, #6]
 8007d20:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2221      	movs	r2, #33	; 0x21
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d34:	4a22      	ldr	r2, [pc, #136]	; (8007dc0 <HAL_UART_Transmit_DMA+0xf0>)
 8007d36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3c:	4a21      	ldr	r2, [pc, #132]	; (8007dc4 <HAL_UART_Transmit_DMA+0xf4>)
 8007d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d44:	4a20      	ldr	r2, [pc, #128]	; (8007dc8 <HAL_UART_Transmit_DMA+0xf8>)
 8007d46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007d50:	f107 0308 	add.w	r3, r7, #8
 8007d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5c:	6819      	ldr	r1, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3304      	adds	r3, #4
 8007d64:	461a      	mov	r2, r3
 8007d66:	88fb      	ldrh	r3, [r7, #6]
 8007d68:	f7fb fe16 	bl	8003998 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d74:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3314      	adds	r3, #20
 8007d84:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3314      	adds	r3, #20
 8007d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d9e:	627a      	str	r2, [r7, #36]	; 0x24
 8007da0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6a39      	ldr	r1, [r7, #32]
 8007da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e5      	bne.n	8007d7e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	e000      	b.n	8007db8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007db6:	2302      	movs	r3, #2
  }
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3730      	adds	r7, #48	; 0x30
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	080084c5 	.word	0x080084c5
 8007dc4:	0800855f 	.word	0x0800855f
 8007dc8:	080086d7 	.word	0x080086d7

08007dcc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b20      	cmp	r3, #32
 8007de4:	d11d      	bne.n	8007e22 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <HAL_UART_Receive_DMA+0x26>
 8007dec:	88fb      	ldrh	r3, [r7, #6]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e016      	b.n	8007e24 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d101      	bne.n	8007e04 <HAL_UART_Receive_DMA+0x38>
 8007e00:	2302      	movs	r3, #2
 8007e02:	e00f      	b.n	8007e24 <HAL_UART_Receive_DMA+0x58>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e12:	88fb      	ldrh	r3, [r7, #6]
 8007e14:	461a      	mov	r2, r3
 8007e16:	68b9      	ldr	r1, [r7, #8]
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 fca7 	bl	800876c <UART_Start_Receive_DMA>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	e000      	b.n	8007e24 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e22:	2302      	movs	r3, #2
  }
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b090      	sub	sp, #64	; 0x40
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e42:	2b80      	cmp	r3, #128	; 0x80
 8007e44:	bf0c      	ite	eq
 8007e46:	2301      	moveq	r3, #1
 8007e48:	2300      	movne	r3, #0
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b21      	cmp	r3, #33	; 0x21
 8007e58:	d128      	bne.n	8007eac <HAL_UART_DMAStop+0x80>
 8007e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d025      	beq.n	8007eac <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3314      	adds	r3, #20
 8007e66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	623b      	str	r3, [r7, #32]
   return(result);
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3314      	adds	r3, #20
 8007e7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e80:	633a      	str	r2, [r7, #48]	; 0x30
 8007e82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e5      	bne.n	8007e60 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d004      	beq.n	8007ea6 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fb fdd1 	bl	8003a48 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fcfe 	bl	80088a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb6:	2b40      	cmp	r3, #64	; 0x40
 8007eb8:	bf0c      	ite	eq
 8007eba:	2301      	moveq	r3, #1
 8007ebc:	2300      	movne	r3, #0
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b22      	cmp	r3, #34	; 0x22
 8007ecc:	d128      	bne.n	8007f20 <HAL_UART_DMAStop+0xf4>
 8007ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d025      	beq.n	8007f20 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3314      	adds	r3, #20
 8007eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3314      	adds	r3, #20
 8007ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ef4:	61fa      	str	r2, [r7, #28]
 8007ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	69b9      	ldr	r1, [r7, #24]
 8007efa:	69fa      	ldr	r2, [r7, #28]
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	617b      	str	r3, [r7, #20]
   return(result);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e5      	bne.n	8007ed4 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d004      	beq.n	8007f1a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fb fd97 	bl	8003a48 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fcec 	bl	80088f8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3740      	adds	r7, #64	; 0x40
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b0ba      	sub	sp, #232	; 0xe8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f62:	f003 030f 	and.w	r3, r3, #15
 8007f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10f      	bne.n	8007f92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f76:	f003 0320 	and.w	r3, r3, #32
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d009      	beq.n	8007f92 <HAL_UART_IRQHandler+0x66>
 8007f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fd93 	bl	8008ab6 <UART_Receive_IT>
      return;
 8007f90:	e256      	b.n	8008440 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 80de 	beq.w	8008158 <HAL_UART_IRQHandler+0x22c>
 8007f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d106      	bne.n	8007fb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 80d1 	beq.w	8008158 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00b      	beq.n	8007fda <HAL_UART_IRQHandler+0xae>
 8007fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d005      	beq.n	8007fda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd2:	f043 0201 	orr.w	r2, r3, #1
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fde:	f003 0304 	and.w	r3, r3, #4
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00b      	beq.n	8007ffe <HAL_UART_IRQHandler+0xd2>
 8007fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d005      	beq.n	8007ffe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff6:	f043 0202 	orr.w	r2, r3, #2
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00b      	beq.n	8008022 <HAL_UART_IRQHandler+0xf6>
 800800a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801a:	f043 0204 	orr.w	r2, r3, #4
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d011      	beq.n	8008052 <HAL_UART_IRQHandler+0x126>
 800802e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008032:	f003 0320 	and.w	r3, r3, #32
 8008036:	2b00      	cmp	r3, #0
 8008038:	d105      	bne.n	8008046 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800803a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	f043 0208 	orr.w	r2, r3, #8
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 81ed 	beq.w	8008436 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800805c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008060:	f003 0320 	and.w	r3, r3, #32
 8008064:	2b00      	cmp	r3, #0
 8008066:	d008      	beq.n	800807a <HAL_UART_IRQHandler+0x14e>
 8008068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800806c:	f003 0320 	and.w	r3, r3, #32
 8008070:	2b00      	cmp	r3, #0
 8008072:	d002      	beq.n	800807a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fd1e 	bl	8008ab6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008084:	2b40      	cmp	r3, #64	; 0x40
 8008086:	bf0c      	ite	eq
 8008088:	2301      	moveq	r3, #1
 800808a:	2300      	movne	r3, #0
 800808c:	b2db      	uxtb	r3, r3
 800808e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	f003 0308 	and.w	r3, r3, #8
 800809a:	2b00      	cmp	r3, #0
 800809c:	d103      	bne.n	80080a6 <HAL_UART_IRQHandler+0x17a>
 800809e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d04f      	beq.n	8008146 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fc26 	bl	80088f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b6:	2b40      	cmp	r3, #64	; 0x40
 80080b8:	d141      	bne.n	800813e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3314      	adds	r3, #20
 80080c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080c8:	e853 3f00 	ldrex	r3, [r3]
 80080cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3314      	adds	r3, #20
 80080e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1d9      	bne.n	80080ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	2b00      	cmp	r3, #0
 800810c:	d013      	beq.n	8008136 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008112:	4a7d      	ldr	r2, [pc, #500]	; (8008308 <HAL_UART_IRQHandler+0x3dc>)
 8008114:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811a:	4618      	mov	r0, r3
 800811c:	f7fb fd04 	bl	8003b28 <HAL_DMA_Abort_IT>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d016      	beq.n	8008154 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008130:	4610      	mov	r0, r2
 8008132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008134:	e00e      	b.n	8008154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f9ae 	bl	8008498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800813c:	e00a      	b.n	8008154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f9aa 	bl	8008498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008144:	e006      	b.n	8008154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f9a6 	bl	8008498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008152:	e170      	b.n	8008436 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008154:	bf00      	nop
    return;
 8008156:	e16e      	b.n	8008436 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815c:	2b01      	cmp	r3, #1
 800815e:	f040 814a 	bne.w	80083f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008166:	f003 0310 	and.w	r3, r3, #16
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 8143 	beq.w	80083f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 813c 	beq.w	80083f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800817e:	2300      	movs	r3, #0
 8008180:	60bb      	str	r3, [r7, #8]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	60bb      	str	r3, [r7, #8]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	60bb      	str	r3, [r7, #8]
 8008192:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819e:	2b40      	cmp	r3, #64	; 0x40
 80081a0:	f040 80b4 	bne.w	800830c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8140 	beq.w	800843a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081c2:	429a      	cmp	r2, r3
 80081c4:	f080 8139 	bcs.w	800843a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081da:	f000 8088 	beq.w	80082ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	330c      	adds	r3, #12
 80081e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	330c      	adds	r3, #12
 8008206:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800820a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800820e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008216:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1d9      	bne.n	80081de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3314      	adds	r3, #20
 8008230:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800823a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800823c:	f023 0301 	bic.w	r3, r3, #1
 8008240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3314      	adds	r3, #20
 800824a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800824e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008252:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008254:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008256:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800825a:	e841 2300 	strex	r3, r2, [r1]
 800825e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1e1      	bne.n	800822a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3314      	adds	r3, #20
 800826c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800827c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3314      	adds	r3, #20
 8008286:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800828a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800828c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008290:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e3      	bne.n	8008266 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	330c      	adds	r3, #12
 80082b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082be:	f023 0310 	bic.w	r3, r3, #16
 80082c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	330c      	adds	r3, #12
 80082cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80082d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80082d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082d8:	e841 2300 	strex	r3, r2, [r1]
 80082dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e3      	bne.n	80082ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fb fbad 	bl	8003a48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f8d4 	bl	80084ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008304:	e099      	b.n	800843a <HAL_UART_IRQHandler+0x50e>
 8008306:	bf00      	nop
 8008308:	080089bf 	.word	0x080089bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008314:	b29b      	uxth	r3, r3
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 808b 	beq.w	800843e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 8086 	beq.w	800843e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	330c      	adds	r3, #12
 8008338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	e853 3f00 	ldrex	r3, [r3]
 8008340:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008348:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	330c      	adds	r3, #12
 8008352:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008356:	647a      	str	r2, [r7, #68]	; 0x44
 8008358:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800835c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e3      	bne.n	8008332 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3314      	adds	r3, #20
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	623b      	str	r3, [r7, #32]
   return(result);
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	f023 0301 	bic.w	r3, r3, #1
 8008380:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3314      	adds	r3, #20
 800838a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800838e:	633a      	str	r2, [r7, #48]	; 0x30
 8008390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1e3      	bne.n	800836a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2220      	movs	r2, #32
 80083a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	330c      	adds	r3, #12
 80083b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	e853 3f00 	ldrex	r3, [r3]
 80083be:	60fb      	str	r3, [r7, #12]
   return(result);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f023 0310 	bic.w	r3, r3, #16
 80083c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	330c      	adds	r3, #12
 80083d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80083d4:	61fa      	str	r2, [r7, #28]
 80083d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d8:	69b9      	ldr	r1, [r7, #24]
 80083da:	69fa      	ldr	r2, [r7, #28]
 80083dc:	e841 2300 	strex	r3, r2, [r1]
 80083e0:	617b      	str	r3, [r7, #20]
   return(result);
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1e3      	bne.n	80083b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f85c 	bl	80084ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083f4:	e023      	b.n	800843e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80083f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d009      	beq.n	8008416 <HAL_UART_IRQHandler+0x4ea>
 8008402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fae9 	bl	80089e6 <UART_Transmit_IT>
    return;
 8008414:	e014      	b.n	8008440 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00e      	beq.n	8008440 <HAL_UART_IRQHandler+0x514>
 8008422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842a:	2b00      	cmp	r3, #0
 800842c:	d008      	beq.n	8008440 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fb29 	bl	8008a86 <UART_EndTransmit_IT>
    return;
 8008434:	e004      	b.n	8008440 <HAL_UART_IRQHandler+0x514>
    return;
 8008436:	bf00      	nop
 8008438:	e002      	b.n	8008440 <HAL_UART_IRQHandler+0x514>
      return;
 800843a:	bf00      	nop
 800843c:	e000      	b.n	8008440 <HAL_UART_IRQHandler+0x514>
      return;
 800843e:	bf00      	nop
  }
}
 8008440:	37e8      	adds	r7, #232	; 0xe8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop

08008448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b090      	sub	sp, #64	; 0x40
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d137      	bne.n	8008550 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80084e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e2:	2200      	movs	r2, #0
 80084e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3314      	adds	r3, #20
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	623b      	str	r3, [r7, #32]
   return(result);
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80084fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3314      	adds	r3, #20
 8008504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008506:	633a      	str	r2, [r7, #48]	; 0x30
 8008508:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800850c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850e:	e841 2300 	strex	r3, r2, [r1]
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1e5      	bne.n	80084e6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800851a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	330c      	adds	r3, #12
 8008520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	e853 3f00 	ldrex	r3, [r3]
 8008528:	60fb      	str	r3, [r7, #12]
   return(result);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008530:	637b      	str	r3, [r7, #52]	; 0x34
 8008532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	330c      	adds	r3, #12
 8008538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800853a:	61fa      	str	r2, [r7, #28]
 800853c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853e:	69b9      	ldr	r1, [r7, #24]
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	e841 2300 	strex	r3, r2, [r1]
 8008546:	617b      	str	r3, [r7, #20]
   return(result);
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1e5      	bne.n	800851a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800854e:	e002      	b.n	8008556 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008550:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008552:	f7ff ff79 	bl	8008448 <HAL_UART_TxCpltCallback>
}
 8008556:	bf00      	nop
 8008558:	3740      	adds	r7, #64	; 0x40
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f7ff ff75 	bl	800845c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b09c      	sub	sp, #112	; 0x70
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008586:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008592:	2b00      	cmp	r3, #0
 8008594:	d172      	bne.n	800867c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008598:	2200      	movs	r2, #0
 800859a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800859c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	330c      	adds	r3, #12
 80085a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a6:	e853 3f00 	ldrex	r3, [r3]
 80085aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80085b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	330c      	adds	r3, #12
 80085ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80085be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085c4:	e841 2300 	strex	r3, r2, [r1]
 80085c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1e5      	bne.n	800859c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3314      	adds	r3, #20
 80085d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	e853 3f00 	ldrex	r3, [r3]
 80085de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e2:	f023 0301 	bic.w	r3, r3, #1
 80085e6:	667b      	str	r3, [r7, #100]	; 0x64
 80085e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3314      	adds	r3, #20
 80085ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085f0:	647a      	str	r2, [r7, #68]	; 0x44
 80085f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e5      	bne.n	80085d0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3314      	adds	r3, #20
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	e853 3f00 	ldrex	r3, [r3]
 8008612:	623b      	str	r3, [r7, #32]
   return(result);
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800861a:	663b      	str	r3, [r7, #96]	; 0x60
 800861c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3314      	adds	r3, #20
 8008622:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008624:	633a      	str	r2, [r7, #48]	; 0x30
 8008626:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008628:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800862a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800862c:	e841 2300 	strex	r3, r2, [r1]
 8008630:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1e5      	bne.n	8008604 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800863a:	2220      	movs	r2, #32
 800863c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008644:	2b01      	cmp	r3, #1
 8008646:	d119      	bne.n	800867c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	330c      	adds	r3, #12
 800864e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	e853 3f00 	ldrex	r3, [r3]
 8008656:	60fb      	str	r3, [r7, #12]
   return(result);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0310 	bic.w	r3, r3, #16
 800865e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	330c      	adds	r3, #12
 8008666:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008668:	61fa      	str	r2, [r7, #28]
 800866a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866c:	69b9      	ldr	r1, [r7, #24]
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	e841 2300 	strex	r3, r2, [r1]
 8008674:	617b      	str	r3, [r7, #20]
   return(result);
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e5      	bne.n	8008648 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800867c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008680:	2b01      	cmp	r3, #1
 8008682:	d106      	bne.n	8008692 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008686:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008688:	4619      	mov	r1, r3
 800868a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800868c:	f7ff ff0e 	bl	80084ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008690:	e002      	b.n	8008698 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008692:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008694:	f7ff feec 	bl	8008470 <HAL_UART_RxCpltCallback>
}
 8008698:	bf00      	nop
 800869a:	3770      	adds	r7, #112	; 0x70
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d108      	bne.n	80086c8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086ba:	085b      	lsrs	r3, r3, #1
 80086bc:	b29b      	uxth	r3, r3
 80086be:	4619      	mov	r1, r3
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f7ff fef3 	bl	80084ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086c6:	e002      	b.n	80086ce <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7ff fedb 	bl	8008484 <HAL_UART_RxHalfCpltCallback>
}
 80086ce:	bf00      	nop
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f2:	2b80      	cmp	r3, #128	; 0x80
 80086f4:	bf0c      	ite	eq
 80086f6:	2301      	moveq	r3, #1
 80086f8:	2300      	movne	r3, #0
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b21      	cmp	r3, #33	; 0x21
 8008708:	d108      	bne.n	800871c <UART_DMAError+0x46>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d005      	beq.n	800871c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2200      	movs	r2, #0
 8008714:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008716:	68b8      	ldr	r0, [r7, #8]
 8008718:	f000 f8c6 	bl	80088a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008726:	2b40      	cmp	r3, #64	; 0x40
 8008728:	bf0c      	ite	eq
 800872a:	2301      	moveq	r3, #1
 800872c:	2300      	movne	r3, #0
 800872e:	b2db      	uxtb	r3, r3
 8008730:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b22      	cmp	r3, #34	; 0x22
 800873c:	d108      	bne.n	8008750 <UART_DMAError+0x7a>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d005      	beq.n	8008750 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2200      	movs	r2, #0
 8008748:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800874a:	68b8      	ldr	r0, [r7, #8]
 800874c:	f000 f8d4 	bl	80088f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008754:	f043 0210 	orr.w	r2, r3, #16
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800875c:	68b8      	ldr	r0, [r7, #8]
 800875e:	f7ff fe9b 	bl	8008498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008762:	bf00      	nop
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b098      	sub	sp, #96	; 0x60
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	88fa      	ldrh	r2, [r7, #6]
 8008784:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2222      	movs	r2, #34	; 0x22
 8008790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	4a40      	ldr	r2, [pc, #256]	; (800889c <UART_Start_Receive_DMA+0x130>)
 800879a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a0:	4a3f      	ldr	r2, [pc, #252]	; (80088a0 <UART_Start_Receive_DMA+0x134>)
 80087a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	4a3e      	ldr	r2, [pc, #248]	; (80088a4 <UART_Start_Receive_DMA+0x138>)
 80087aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	2200      	movs	r2, #0
 80087b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80087b4:	f107 0308 	add.w	r3, r7, #8
 80087b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3304      	adds	r3, #4
 80087c4:	4619      	mov	r1, r3
 80087c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	88fb      	ldrh	r3, [r7, #6]
 80087cc:	f7fb f8e4 	bl	8003998 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80087d0:	2300      	movs	r3, #0
 80087d2:	613b      	str	r3, [r7, #16]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	613b      	str	r3, [r7, #16]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	613b      	str	r3, [r7, #16]
 80087e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d019      	beq.n	800882a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	330c      	adds	r3, #12
 80087fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800880c:	65bb      	str	r3, [r7, #88]	; 0x58
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	330c      	adds	r3, #12
 8008814:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008816:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008818:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800881c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e5      	bne.n	80087f6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3314      	adds	r3, #20
 8008830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800883a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883c:	f043 0301 	orr.w	r3, r3, #1
 8008840:	657b      	str	r3, [r7, #84]	; 0x54
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3314      	adds	r3, #20
 8008848:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800884a:	63ba      	str	r2, [r7, #56]	; 0x38
 800884c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e5      	bne.n	800882a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3314      	adds	r3, #20
 8008864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	e853 3f00 	ldrex	r3, [r3]
 800886c:	617b      	str	r3, [r7, #20]
   return(result);
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008874:	653b      	str	r3, [r7, #80]	; 0x50
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3314      	adds	r3, #20
 800887c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800887e:	627a      	str	r2, [r7, #36]	; 0x24
 8008880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	6a39      	ldr	r1, [r7, #32]
 8008884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	61fb      	str	r3, [r7, #28]
   return(result);
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e5      	bne.n	800885e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3760      	adds	r7, #96	; 0x60
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	0800857b 	.word	0x0800857b
 80088a0:	080086a1 	.word	0x080086a1
 80088a4:	080086d7 	.word	0x080086d7

080088a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b089      	sub	sp, #36	; 0x24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	330c      	adds	r3, #12
 80088b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	60bb      	str	r3, [r7, #8]
   return(result);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80088c6:	61fb      	str	r3, [r7, #28]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	330c      	adds	r3, #12
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	61ba      	str	r2, [r7, #24]
 80088d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6979      	ldr	r1, [r7, #20]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	613b      	str	r3, [r7, #16]
   return(result);
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e5      	bne.n	80088b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80088ec:	bf00      	nop
 80088ee:	3724      	adds	r7, #36	; 0x24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b095      	sub	sp, #84	; 0x54
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	330c      	adds	r3, #12
 8008906:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890a:	e853 3f00 	ldrex	r3, [r3]
 800890e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008912:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	330c      	adds	r3, #12
 800891e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008920:	643a      	str	r2, [r7, #64]	; 0x40
 8008922:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008926:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e5      	bne.n	8008900 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3314      	adds	r3, #20
 800893a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	61fb      	str	r3, [r7, #28]
   return(result);
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	f023 0301 	bic.w	r3, r3, #1
 800894a:	64bb      	str	r3, [r7, #72]	; 0x48
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3314      	adds	r3, #20
 8008952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008954:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008956:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800895a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800895c:	e841 2300 	strex	r3, r2, [r1]
 8008960:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e5      	bne.n	8008934 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	2b01      	cmp	r3, #1
 800896e:	d119      	bne.n	80089a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	330c      	adds	r3, #12
 8008976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f023 0310 	bic.w	r3, r3, #16
 8008986:	647b      	str	r3, [r7, #68]	; 0x44
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	330c      	adds	r3, #12
 800898e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008990:	61ba      	str	r2, [r7, #24]
 8008992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008994:	6979      	ldr	r1, [r7, #20]
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	e841 2300 	strex	r3, r2, [r1]
 800899c:	613b      	str	r3, [r7, #16]
   return(result);
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e5      	bne.n	8008970 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80089b2:	bf00      	nop
 80089b4:	3754      	adds	r7, #84	; 0x54
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr

080089be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f7ff fd5d 	bl	8008498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089de:	bf00      	nop
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b085      	sub	sp, #20
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b21      	cmp	r3, #33	; 0x21
 80089f8:	d13e      	bne.n	8008a78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a02:	d114      	bne.n	8008a2e <UART_Transmit_IT+0x48>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d110      	bne.n	8008a2e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	881b      	ldrh	r3, [r3, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	1c9a      	adds	r2, r3, #2
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	621a      	str	r2, [r3, #32]
 8008a2c:	e008      	b.n	8008a40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	1c59      	adds	r1, r3, #1
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6211      	str	r1, [r2, #32]
 8008a38:	781a      	ldrb	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	3b01      	subs	r3, #1
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10f      	bne.n	8008a74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	e000      	b.n	8008a7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a78:	2302      	movs	r3, #2
  }
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68da      	ldr	r2, [r3, #12]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff fcce 	bl	8008448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b08c      	sub	sp, #48	; 0x30
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b22      	cmp	r3, #34	; 0x22
 8008ac8:	f040 80ab 	bne.w	8008c22 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad4:	d117      	bne.n	8008b06 <UART_Receive_IT+0x50>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d113      	bne.n	8008b06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afe:	1c9a      	adds	r2, r3, #2
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	629a      	str	r2, [r3, #40]	; 0x28
 8008b04:	e026      	b.n	8008b54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b18:	d007      	beq.n	8008b2a <UART_Receive_IT+0x74>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10a      	bne.n	8008b38 <UART_Receive_IT+0x82>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d106      	bne.n	8008b38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	701a      	strb	r2, [r3, #0]
 8008b36:	e008      	b.n	8008b4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4e:	1c5a      	adds	r2, r3, #1
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	4619      	mov	r1, r3
 8008b62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d15a      	bne.n	8008c1e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68da      	ldr	r2, [r3, #12]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0220 	bic.w	r2, r2, #32
 8008b76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695a      	ldr	r2, [r3, #20]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f022 0201 	bic.w	r2, r2, #1
 8008b96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2220      	movs	r2, #32
 8008b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d135      	bne.n	8008c14 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	330c      	adds	r3, #12
 8008bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f023 0310 	bic.w	r3, r3, #16
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	330c      	adds	r3, #12
 8008bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bce:	623a      	str	r2, [r7, #32]
 8008bd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd2:	69f9      	ldr	r1, [r7, #28]
 8008bd4:	6a3a      	ldr	r2, [r7, #32]
 8008bd6:	e841 2300 	strex	r3, r2, [r1]
 8008bda:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e5      	bne.n	8008bae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0310 	and.w	r3, r3, #16
 8008bec:	2b10      	cmp	r3, #16
 8008bee:	d10a      	bne.n	8008c06 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff fc4d 	bl	80084ac <HAL_UARTEx_RxEventCallback>
 8008c12:	e002      	b.n	8008c1a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7ff fc2b 	bl	8008470 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e002      	b.n	8008c24 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e000      	b.n	8008c24 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008c22:	2302      	movs	r3, #2
  }
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3730      	adds	r7, #48	; 0x30
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c30:	b0c0      	sub	sp, #256	; 0x100
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c48:	68d9      	ldr	r1, [r3, #12]
 8008c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	ea40 0301 	orr.w	r3, r0, r1
 8008c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	431a      	orrs	r2, r3
 8008c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c84:	f021 010c 	bic.w	r1, r1, #12
 8008c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c92:	430b      	orrs	r3, r1
 8008c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca6:	6999      	ldr	r1, [r3, #24]
 8008ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	ea40 0301 	orr.w	r3, r0, r1
 8008cb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	4b8f      	ldr	r3, [pc, #572]	; (8008ef8 <UART_SetConfig+0x2cc>)
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d005      	beq.n	8008ccc <UART_SetConfig+0xa0>
 8008cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	4b8d      	ldr	r3, [pc, #564]	; (8008efc <UART_SetConfig+0x2d0>)
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d104      	bne.n	8008cd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ccc:	f7fd fbb4 	bl	8006438 <HAL_RCC_GetPCLK2Freq>
 8008cd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008cd4:	e003      	b.n	8008cde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cd6:	f7fd fb9b 	bl	8006410 <HAL_RCC_GetPCLK1Freq>
 8008cda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ce8:	f040 810c 	bne.w	8008f04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008cfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008cfe:	4622      	mov	r2, r4
 8008d00:	462b      	mov	r3, r5
 8008d02:	1891      	adds	r1, r2, r2
 8008d04:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d06:	415b      	adcs	r3, r3
 8008d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d0e:	4621      	mov	r1, r4
 8008d10:	eb12 0801 	adds.w	r8, r2, r1
 8008d14:	4629      	mov	r1, r5
 8008d16:	eb43 0901 	adc.w	r9, r3, r1
 8008d1a:	f04f 0200 	mov.w	r2, #0
 8008d1e:	f04f 0300 	mov.w	r3, #0
 8008d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d2e:	4690      	mov	r8, r2
 8008d30:	4699      	mov	r9, r3
 8008d32:	4623      	mov	r3, r4
 8008d34:	eb18 0303 	adds.w	r3, r8, r3
 8008d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	eb49 0303 	adc.w	r3, r9, r3
 8008d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	18db      	adds	r3, r3, r3
 8008d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8008d60:	4613      	mov	r3, r2
 8008d62:	eb42 0303 	adc.w	r3, r2, r3
 8008d66:	657b      	str	r3, [r7, #84]	; 0x54
 8008d68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008d6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d70:	f7f7 fcf2 	bl	8000758 <__aeabi_uldivmod>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	4b61      	ldr	r3, [pc, #388]	; (8008f00 <UART_SetConfig+0x2d4>)
 8008d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d7e:	095b      	lsrs	r3, r3, #5
 8008d80:	011c      	lsls	r4, r3, #4
 8008d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d86:	2200      	movs	r2, #0
 8008d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d94:	4642      	mov	r2, r8
 8008d96:	464b      	mov	r3, r9
 8008d98:	1891      	adds	r1, r2, r2
 8008d9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d9c:	415b      	adcs	r3, r3
 8008d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008da4:	4641      	mov	r1, r8
 8008da6:	eb12 0a01 	adds.w	sl, r2, r1
 8008daa:	4649      	mov	r1, r9
 8008dac:	eb43 0b01 	adc.w	fp, r3, r1
 8008db0:	f04f 0200 	mov.w	r2, #0
 8008db4:	f04f 0300 	mov.w	r3, #0
 8008db8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008dbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dc4:	4692      	mov	sl, r2
 8008dc6:	469b      	mov	fp, r3
 8008dc8:	4643      	mov	r3, r8
 8008dca:	eb1a 0303 	adds.w	r3, sl, r3
 8008dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dd2:	464b      	mov	r3, r9
 8008dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8008dd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008de8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008dec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008df0:	460b      	mov	r3, r1
 8008df2:	18db      	adds	r3, r3, r3
 8008df4:	643b      	str	r3, [r7, #64]	; 0x40
 8008df6:	4613      	mov	r3, r2
 8008df8:	eb42 0303 	adc.w	r3, r2, r3
 8008dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8008dfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008e06:	f7f7 fca7 	bl	8000758 <__aeabi_uldivmod>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4b3b      	ldr	r3, [pc, #236]	; (8008f00 <UART_SetConfig+0x2d4>)
 8008e12:	fba3 2301 	umull	r2, r3, r3, r1
 8008e16:	095b      	lsrs	r3, r3, #5
 8008e18:	2264      	movs	r2, #100	; 0x64
 8008e1a:	fb02 f303 	mul.w	r3, r2, r3
 8008e1e:	1acb      	subs	r3, r1, r3
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008e26:	4b36      	ldr	r3, [pc, #216]	; (8008f00 <UART_SetConfig+0x2d4>)
 8008e28:	fba3 2302 	umull	r2, r3, r3, r2
 8008e2c:	095b      	lsrs	r3, r3, #5
 8008e2e:	005b      	lsls	r3, r3, #1
 8008e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e34:	441c      	add	r4, r3
 8008e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008e44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008e48:	4642      	mov	r2, r8
 8008e4a:	464b      	mov	r3, r9
 8008e4c:	1891      	adds	r1, r2, r2
 8008e4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e50:	415b      	adcs	r3, r3
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e58:	4641      	mov	r1, r8
 8008e5a:	1851      	adds	r1, r2, r1
 8008e5c:	6339      	str	r1, [r7, #48]	; 0x30
 8008e5e:	4649      	mov	r1, r9
 8008e60:	414b      	adcs	r3, r1
 8008e62:	637b      	str	r3, [r7, #52]	; 0x34
 8008e64:	f04f 0200 	mov.w	r2, #0
 8008e68:	f04f 0300 	mov.w	r3, #0
 8008e6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e70:	4659      	mov	r1, fp
 8008e72:	00cb      	lsls	r3, r1, #3
 8008e74:	4651      	mov	r1, sl
 8008e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e7a:	4651      	mov	r1, sl
 8008e7c:	00ca      	lsls	r2, r1, #3
 8008e7e:	4610      	mov	r0, r2
 8008e80:	4619      	mov	r1, r3
 8008e82:	4603      	mov	r3, r0
 8008e84:	4642      	mov	r2, r8
 8008e86:	189b      	adds	r3, r3, r2
 8008e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e8c:	464b      	mov	r3, r9
 8008e8e:	460a      	mov	r2, r1
 8008e90:	eb42 0303 	adc.w	r3, r2, r3
 8008e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ea4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008eac:	460b      	mov	r3, r1
 8008eae:	18db      	adds	r3, r3, r3
 8008eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	eb42 0303 	adc.w	r3, r2, r3
 8008eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ebe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008ec2:	f7f7 fc49 	bl	8000758 <__aeabi_uldivmod>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4b0d      	ldr	r3, [pc, #52]	; (8008f00 <UART_SetConfig+0x2d4>)
 8008ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8008ed0:	095b      	lsrs	r3, r3, #5
 8008ed2:	2164      	movs	r1, #100	; 0x64
 8008ed4:	fb01 f303 	mul.w	r3, r1, r3
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	00db      	lsls	r3, r3, #3
 8008edc:	3332      	adds	r3, #50	; 0x32
 8008ede:	4a08      	ldr	r2, [pc, #32]	; (8008f00 <UART_SetConfig+0x2d4>)
 8008ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee4:	095b      	lsrs	r3, r3, #5
 8008ee6:	f003 0207 	and.w	r2, r3, #7
 8008eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4422      	add	r2, r4
 8008ef2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ef4:	e105      	b.n	8009102 <UART_SetConfig+0x4d6>
 8008ef6:	bf00      	nop
 8008ef8:	40011000 	.word	0x40011000
 8008efc:	40011400 	.word	0x40011400
 8008f00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008f16:	4642      	mov	r2, r8
 8008f18:	464b      	mov	r3, r9
 8008f1a:	1891      	adds	r1, r2, r2
 8008f1c:	6239      	str	r1, [r7, #32]
 8008f1e:	415b      	adcs	r3, r3
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
 8008f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f26:	4641      	mov	r1, r8
 8008f28:	1854      	adds	r4, r2, r1
 8008f2a:	4649      	mov	r1, r9
 8008f2c:	eb43 0501 	adc.w	r5, r3, r1
 8008f30:	f04f 0200 	mov.w	r2, #0
 8008f34:	f04f 0300 	mov.w	r3, #0
 8008f38:	00eb      	lsls	r3, r5, #3
 8008f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f3e:	00e2      	lsls	r2, r4, #3
 8008f40:	4614      	mov	r4, r2
 8008f42:	461d      	mov	r5, r3
 8008f44:	4643      	mov	r3, r8
 8008f46:	18e3      	adds	r3, r4, r3
 8008f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f4c:	464b      	mov	r3, r9
 8008f4e:	eb45 0303 	adc.w	r3, r5, r3
 8008f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f66:	f04f 0200 	mov.w	r2, #0
 8008f6a:	f04f 0300 	mov.w	r3, #0
 8008f6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f72:	4629      	mov	r1, r5
 8008f74:	008b      	lsls	r3, r1, #2
 8008f76:	4621      	mov	r1, r4
 8008f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	008a      	lsls	r2, r1, #2
 8008f80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f84:	f7f7 fbe8 	bl	8000758 <__aeabi_uldivmod>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4b60      	ldr	r3, [pc, #384]	; (8009110 <UART_SetConfig+0x4e4>)
 8008f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f92:	095b      	lsrs	r3, r3, #5
 8008f94:	011c      	lsls	r4, r3, #4
 8008f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008fa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008fa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008fa8:	4642      	mov	r2, r8
 8008faa:	464b      	mov	r3, r9
 8008fac:	1891      	adds	r1, r2, r2
 8008fae:	61b9      	str	r1, [r7, #24]
 8008fb0:	415b      	adcs	r3, r3
 8008fb2:	61fb      	str	r3, [r7, #28]
 8008fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fb8:	4641      	mov	r1, r8
 8008fba:	1851      	adds	r1, r2, r1
 8008fbc:	6139      	str	r1, [r7, #16]
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	414b      	adcs	r3, r1
 8008fc2:	617b      	str	r3, [r7, #20]
 8008fc4:	f04f 0200 	mov.w	r2, #0
 8008fc8:	f04f 0300 	mov.w	r3, #0
 8008fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fd0:	4659      	mov	r1, fp
 8008fd2:	00cb      	lsls	r3, r1, #3
 8008fd4:	4651      	mov	r1, sl
 8008fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fda:	4651      	mov	r1, sl
 8008fdc:	00ca      	lsls	r2, r1, #3
 8008fde:	4610      	mov	r0, r2
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	4642      	mov	r2, r8
 8008fe6:	189b      	adds	r3, r3, r2
 8008fe8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fec:	464b      	mov	r3, r9
 8008fee:	460a      	mov	r2, r1
 8008ff0:	eb42 0303 	adc.w	r3, r2, r3
 8008ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	67bb      	str	r3, [r7, #120]	; 0x78
 8009002:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009004:	f04f 0200 	mov.w	r2, #0
 8009008:	f04f 0300 	mov.w	r3, #0
 800900c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009010:	4649      	mov	r1, r9
 8009012:	008b      	lsls	r3, r1, #2
 8009014:	4641      	mov	r1, r8
 8009016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800901a:	4641      	mov	r1, r8
 800901c:	008a      	lsls	r2, r1, #2
 800901e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009022:	f7f7 fb99 	bl	8000758 <__aeabi_uldivmod>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4b39      	ldr	r3, [pc, #228]	; (8009110 <UART_SetConfig+0x4e4>)
 800902c:	fba3 1302 	umull	r1, r3, r3, r2
 8009030:	095b      	lsrs	r3, r3, #5
 8009032:	2164      	movs	r1, #100	; 0x64
 8009034:	fb01 f303 	mul.w	r3, r1, r3
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	3332      	adds	r3, #50	; 0x32
 800903e:	4a34      	ldr	r2, [pc, #208]	; (8009110 <UART_SetConfig+0x4e4>)
 8009040:	fba2 2303 	umull	r2, r3, r2, r3
 8009044:	095b      	lsrs	r3, r3, #5
 8009046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800904a:	441c      	add	r4, r3
 800904c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009050:	2200      	movs	r2, #0
 8009052:	673b      	str	r3, [r7, #112]	; 0x70
 8009054:	677a      	str	r2, [r7, #116]	; 0x74
 8009056:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800905a:	4642      	mov	r2, r8
 800905c:	464b      	mov	r3, r9
 800905e:	1891      	adds	r1, r2, r2
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	415b      	adcs	r3, r3
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800906a:	4641      	mov	r1, r8
 800906c:	1851      	adds	r1, r2, r1
 800906e:	6039      	str	r1, [r7, #0]
 8009070:	4649      	mov	r1, r9
 8009072:	414b      	adcs	r3, r1
 8009074:	607b      	str	r3, [r7, #4]
 8009076:	f04f 0200 	mov.w	r2, #0
 800907a:	f04f 0300 	mov.w	r3, #0
 800907e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009082:	4659      	mov	r1, fp
 8009084:	00cb      	lsls	r3, r1, #3
 8009086:	4651      	mov	r1, sl
 8009088:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800908c:	4651      	mov	r1, sl
 800908e:	00ca      	lsls	r2, r1, #3
 8009090:	4610      	mov	r0, r2
 8009092:	4619      	mov	r1, r3
 8009094:	4603      	mov	r3, r0
 8009096:	4642      	mov	r2, r8
 8009098:	189b      	adds	r3, r3, r2
 800909a:	66bb      	str	r3, [r7, #104]	; 0x68
 800909c:	464b      	mov	r3, r9
 800909e:	460a      	mov	r2, r1
 80090a0:	eb42 0303 	adc.w	r3, r2, r3
 80090a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	663b      	str	r3, [r7, #96]	; 0x60
 80090b0:	667a      	str	r2, [r7, #100]	; 0x64
 80090b2:	f04f 0200 	mov.w	r2, #0
 80090b6:	f04f 0300 	mov.w	r3, #0
 80090ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80090be:	4649      	mov	r1, r9
 80090c0:	008b      	lsls	r3, r1, #2
 80090c2:	4641      	mov	r1, r8
 80090c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090c8:	4641      	mov	r1, r8
 80090ca:	008a      	lsls	r2, r1, #2
 80090cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80090d0:	f7f7 fb42 	bl	8000758 <__aeabi_uldivmod>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4b0d      	ldr	r3, [pc, #52]	; (8009110 <UART_SetConfig+0x4e4>)
 80090da:	fba3 1302 	umull	r1, r3, r3, r2
 80090de:	095b      	lsrs	r3, r3, #5
 80090e0:	2164      	movs	r1, #100	; 0x64
 80090e2:	fb01 f303 	mul.w	r3, r1, r3
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	011b      	lsls	r3, r3, #4
 80090ea:	3332      	adds	r3, #50	; 0x32
 80090ec:	4a08      	ldr	r2, [pc, #32]	; (8009110 <UART_SetConfig+0x4e4>)
 80090ee:	fba2 2303 	umull	r2, r3, r2, r3
 80090f2:	095b      	lsrs	r3, r3, #5
 80090f4:	f003 020f 	and.w	r2, r3, #15
 80090f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4422      	add	r2, r4
 8009100:	609a      	str	r2, [r3, #8]
}
 8009102:	bf00      	nop
 8009104:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009108:	46bd      	mov	sp, r7
 800910a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800910e:	bf00      	nop
 8009110:	51eb851f 	.word	0x51eb851f

08009114 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009114:	b084      	sub	sp, #16
 8009116:	b580      	push	{r7, lr}
 8009118:	b084      	sub	sp, #16
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	f107 001c 	add.w	r0, r7, #28
 8009122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	2b01      	cmp	r3, #1
 800912a:	d122      	bne.n	8009172 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009130:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009156:	2b01      	cmp	r3, #1
 8009158:	d105      	bne.n	8009166 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 fbee 	bl	800a948 <USB_CoreReset>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]
 8009170:	e01a      	b.n	80091a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 fbe2 	bl	800a948 <USB_CoreReset>
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800918a:	2b00      	cmp	r3, #0
 800918c:	d106      	bne.n	800919c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009192:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	639a      	str	r2, [r3, #56]	; 0x38
 800919a:	e005      	b.n	80091a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d10b      	bne.n	80091c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f043 0206 	orr.w	r2, r3, #6
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f043 0220 	orr.w	r2, r3, #32
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091d2:	b004      	add	sp, #16
 80091d4:	4770      	bx	lr
	...

080091d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80091d8:	b480      	push	{r7}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	4613      	mov	r3, r2
 80091e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d165      	bne.n	80092b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	4a41      	ldr	r2, [pc, #260]	; (80092f4 <USB_SetTurnaroundTime+0x11c>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d906      	bls.n	8009202 <USB_SetTurnaroundTime+0x2a>
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	4a40      	ldr	r2, [pc, #256]	; (80092f8 <USB_SetTurnaroundTime+0x120>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d202      	bcs.n	8009202 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80091fc:	230f      	movs	r3, #15
 80091fe:	617b      	str	r3, [r7, #20]
 8009200:	e062      	b.n	80092c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	4a3c      	ldr	r2, [pc, #240]	; (80092f8 <USB_SetTurnaroundTime+0x120>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d306      	bcc.n	8009218 <USB_SetTurnaroundTime+0x40>
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	4a3b      	ldr	r2, [pc, #236]	; (80092fc <USB_SetTurnaroundTime+0x124>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d202      	bcs.n	8009218 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009212:	230e      	movs	r3, #14
 8009214:	617b      	str	r3, [r7, #20]
 8009216:	e057      	b.n	80092c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	4a38      	ldr	r2, [pc, #224]	; (80092fc <USB_SetTurnaroundTime+0x124>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d306      	bcc.n	800922e <USB_SetTurnaroundTime+0x56>
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	4a37      	ldr	r2, [pc, #220]	; (8009300 <USB_SetTurnaroundTime+0x128>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d202      	bcs.n	800922e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009228:	230d      	movs	r3, #13
 800922a:	617b      	str	r3, [r7, #20]
 800922c:	e04c      	b.n	80092c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	4a33      	ldr	r2, [pc, #204]	; (8009300 <USB_SetTurnaroundTime+0x128>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d306      	bcc.n	8009244 <USB_SetTurnaroundTime+0x6c>
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	4a32      	ldr	r2, [pc, #200]	; (8009304 <USB_SetTurnaroundTime+0x12c>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d802      	bhi.n	8009244 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800923e:	230c      	movs	r3, #12
 8009240:	617b      	str	r3, [r7, #20]
 8009242:	e041      	b.n	80092c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	4a2f      	ldr	r2, [pc, #188]	; (8009304 <USB_SetTurnaroundTime+0x12c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d906      	bls.n	800925a <USB_SetTurnaroundTime+0x82>
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	4a2e      	ldr	r2, [pc, #184]	; (8009308 <USB_SetTurnaroundTime+0x130>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d802      	bhi.n	800925a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009254:	230b      	movs	r3, #11
 8009256:	617b      	str	r3, [r7, #20]
 8009258:	e036      	b.n	80092c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	4a2a      	ldr	r2, [pc, #168]	; (8009308 <USB_SetTurnaroundTime+0x130>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d906      	bls.n	8009270 <USB_SetTurnaroundTime+0x98>
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	4a29      	ldr	r2, [pc, #164]	; (800930c <USB_SetTurnaroundTime+0x134>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d802      	bhi.n	8009270 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800926a:	230a      	movs	r3, #10
 800926c:	617b      	str	r3, [r7, #20]
 800926e:	e02b      	b.n	80092c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	4a26      	ldr	r2, [pc, #152]	; (800930c <USB_SetTurnaroundTime+0x134>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d906      	bls.n	8009286 <USB_SetTurnaroundTime+0xae>
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	4a25      	ldr	r2, [pc, #148]	; (8009310 <USB_SetTurnaroundTime+0x138>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d202      	bcs.n	8009286 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009280:	2309      	movs	r3, #9
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	e020      	b.n	80092c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	4a21      	ldr	r2, [pc, #132]	; (8009310 <USB_SetTurnaroundTime+0x138>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d306      	bcc.n	800929c <USB_SetTurnaroundTime+0xc4>
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	4a20      	ldr	r2, [pc, #128]	; (8009314 <USB_SetTurnaroundTime+0x13c>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d802      	bhi.n	800929c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009296:	2308      	movs	r3, #8
 8009298:	617b      	str	r3, [r7, #20]
 800929a:	e015      	b.n	80092c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	4a1d      	ldr	r2, [pc, #116]	; (8009314 <USB_SetTurnaroundTime+0x13c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d906      	bls.n	80092b2 <USB_SetTurnaroundTime+0xda>
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	4a1c      	ldr	r2, [pc, #112]	; (8009318 <USB_SetTurnaroundTime+0x140>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d202      	bcs.n	80092b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80092ac:	2307      	movs	r3, #7
 80092ae:	617b      	str	r3, [r7, #20]
 80092b0:	e00a      	b.n	80092c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80092b2:	2306      	movs	r3, #6
 80092b4:	617b      	str	r3, [r7, #20]
 80092b6:	e007      	b.n	80092c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d102      	bne.n	80092c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80092be:	2309      	movs	r3, #9
 80092c0:	617b      	str	r3, [r7, #20]
 80092c2:	e001      	b.n	80092c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80092c4:	2309      	movs	r3, #9
 80092c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	029b      	lsls	r3, r3, #10
 80092dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80092e0:	431a      	orrs	r2, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	371c      	adds	r7, #28
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	00d8acbf 	.word	0x00d8acbf
 80092f8:	00e4e1c0 	.word	0x00e4e1c0
 80092fc:	00f42400 	.word	0x00f42400
 8009300:	01067380 	.word	0x01067380
 8009304:	011a499f 	.word	0x011a499f
 8009308:	01312cff 	.word	0x01312cff
 800930c:	014ca43f 	.word	0x014ca43f
 8009310:	016e3600 	.word	0x016e3600
 8009314:	01a6ab1f 	.word	0x01a6ab1f
 8009318:	01e84800 	.word	0x01e84800

0800931c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f043 0201 	orr.w	r2, r3, #1
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f023 0201 	bic.w	r2, r3, #1
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d115      	bne.n	80093ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800938e:	2001      	movs	r0, #1
 8009390:	f7f9 fed0 	bl	8003134 <HAL_Delay>
      ms++;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	3301      	adds	r3, #1
 8009398:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f001 fa45 	bl	800a82a <USB_GetMode>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d01e      	beq.n	80093e4 <USB_SetCurrentMode+0x84>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b31      	cmp	r3, #49	; 0x31
 80093aa:	d9f0      	bls.n	800938e <USB_SetCurrentMode+0x2e>
 80093ac:	e01a      	b.n	80093e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80093ae:	78fb      	ldrb	r3, [r7, #3]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d115      	bne.n	80093e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80093c0:	2001      	movs	r0, #1
 80093c2:	f7f9 feb7 	bl	8003134 <HAL_Delay>
      ms++;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3301      	adds	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f001 fa2c 	bl	800a82a <USB_GetMode>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d005      	beq.n	80093e4 <USB_SetCurrentMode+0x84>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2b31      	cmp	r3, #49	; 0x31
 80093dc:	d9f0      	bls.n	80093c0 <USB_SetCurrentMode+0x60>
 80093de:	e001      	b.n	80093e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e005      	b.n	80093f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b32      	cmp	r3, #50	; 0x32
 80093e8:	d101      	bne.n	80093ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e000      	b.n	80093f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093f8:	b084      	sub	sp, #16
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b086      	sub	sp, #24
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009412:	2300      	movs	r3, #0
 8009414:	613b      	str	r3, [r7, #16]
 8009416:	e009      	b.n	800942c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	3340      	adds	r3, #64	; 0x40
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	2200      	movs	r2, #0
 8009424:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	3301      	adds	r3, #1
 800942a:	613b      	str	r3, [r7, #16]
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	2b0e      	cmp	r3, #14
 8009430:	d9f2      	bls.n	8009418 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d11c      	bne.n	8009472 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009446:	f043 0302 	orr.w	r3, r3, #2
 800944a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009450:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009468:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	639a      	str	r2, [r3, #56]	; 0x38
 8009470:	e00b      	b.n	800948a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009476:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009482:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009490:	461a      	mov	r2, r3
 8009492:	2300      	movs	r3, #0
 8009494:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800949c:	4619      	mov	r1, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a4:	461a      	mov	r2, r3
 80094a6:	680b      	ldr	r3, [r1, #0]
 80094a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d10c      	bne.n	80094ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d104      	bne.n	80094c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094b6:	2100      	movs	r1, #0
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f965 	bl	8009788 <USB_SetDevSpeed>
 80094be:	e008      	b.n	80094d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80094c0:	2101      	movs	r1, #1
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f960 	bl	8009788 <USB_SetDevSpeed>
 80094c8:	e003      	b.n	80094d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80094ca:	2103      	movs	r1, #3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f95b 	bl	8009788 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80094d2:	2110      	movs	r1, #16
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f8f3 	bl	80096c0 <USB_FlushTxFifo>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d001      	beq.n	80094e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f91f 	bl	8009728 <USB_FlushRxFifo>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d001      	beq.n	80094f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094fa:	461a      	mov	r2, r3
 80094fc:	2300      	movs	r3, #0
 80094fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009506:	461a      	mov	r2, r3
 8009508:	2300      	movs	r3, #0
 800950a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009512:	461a      	mov	r2, r3
 8009514:	2300      	movs	r3, #0
 8009516:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009518:	2300      	movs	r3, #0
 800951a:	613b      	str	r3, [r7, #16]
 800951c:	e043      	b.n	80095a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	4413      	add	r3, r2
 8009526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009534:	d118      	bne.n	8009568 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10a      	bne.n	8009552 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4413      	add	r3, r2
 8009544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009548:	461a      	mov	r2, r3
 800954a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	e013      	b.n	800957a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	4413      	add	r3, r2
 800955a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955e:	461a      	mov	r2, r3
 8009560:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	e008      	b.n	800957a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009574:	461a      	mov	r2, r3
 8009576:	2300      	movs	r3, #0
 8009578:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	015a      	lsls	r2, r3, #5
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4413      	add	r3, r2
 8009582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009586:	461a      	mov	r2, r3
 8009588:	2300      	movs	r3, #0
 800958a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4413      	add	r3, r2
 8009594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009598:	461a      	mov	r2, r3
 800959a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800959e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	3301      	adds	r3, #1
 80095a4:	613b      	str	r3, [r7, #16]
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d3b7      	bcc.n	800951e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095ae:	2300      	movs	r3, #0
 80095b0:	613b      	str	r3, [r7, #16]
 80095b2:	e043      	b.n	800963c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095ca:	d118      	bne.n	80095fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095de:	461a      	mov	r2, r3
 80095e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	e013      	b.n	8009610 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f4:	461a      	mov	r2, r3
 80095f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	e008      	b.n	8009610 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	015a      	lsls	r2, r3, #5
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	4413      	add	r3, r2
 8009606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800960a:	461a      	mov	r2, r3
 800960c:	2300      	movs	r3, #0
 800960e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961c:	461a      	mov	r2, r3
 800961e:	2300      	movs	r3, #0
 8009620:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	4413      	add	r3, r2
 800962a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962e:	461a      	mov	r2, r3
 8009630:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009634:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	3301      	adds	r3, #1
 800963a:	613b      	str	r3, [r7, #16]
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	429a      	cmp	r2, r3
 8009642:	d3b7      	bcc.n	80095b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009656:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009664:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	2b00      	cmp	r3, #0
 800966a:	d105      	bne.n	8009678 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	f043 0210 	orr.w	r2, r3, #16
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	699a      	ldr	r2, [r3, #24]
 800967c:	4b0f      	ldr	r3, [pc, #60]	; (80096bc <USB_DevInit+0x2c4>)
 800967e:	4313      	orrs	r3, r2
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009686:	2b00      	cmp	r3, #0
 8009688:	d005      	beq.n	8009696 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	f043 0208 	orr.w	r2, r3, #8
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009698:	2b01      	cmp	r3, #1
 800969a:	d107      	bne.n	80096ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096a4:	f043 0304 	orr.w	r3, r3, #4
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80096ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096b8:	b004      	add	sp, #16
 80096ba:	4770      	bx	lr
 80096bc:	803c3800 	.word	0x803c3800

080096c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3301      	adds	r3, #1
 80096d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4a13      	ldr	r2, [pc, #76]	; (8009724 <USB_FlushTxFifo+0x64>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d901      	bls.n	80096e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e01b      	b.n	8009718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	daf2      	bge.n	80096ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	019b      	lsls	r3, r3, #6
 80096f0:	f043 0220 	orr.w	r2, r3, #32
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3301      	adds	r3, #1
 80096fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4a08      	ldr	r2, [pc, #32]	; (8009724 <USB_FlushTxFifo+0x64>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d901      	bls.n	800970a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e006      	b.n	8009718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	2b20      	cmp	r3, #32
 8009714:	d0f0      	beq.n	80096f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	00030d40 	.word	0x00030d40

08009728 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009730:	2300      	movs	r3, #0
 8009732:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	3301      	adds	r3, #1
 8009738:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4a11      	ldr	r2, [pc, #68]	; (8009784 <USB_FlushRxFifo+0x5c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d901      	bls.n	8009746 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	e018      	b.n	8009778 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	daf2      	bge.n	8009734 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800974e:	2300      	movs	r3, #0
 8009750:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2210      	movs	r2, #16
 8009756:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3301      	adds	r3, #1
 800975c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	4a08      	ldr	r2, [pc, #32]	; (8009784 <USB_FlushRxFifo+0x5c>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d901      	bls.n	800976a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009766:	2303      	movs	r3, #3
 8009768:	e006      	b.n	8009778 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	f003 0310 	and.w	r3, r3, #16
 8009772:	2b10      	cmp	r3, #16
 8009774:	d0f0      	beq.n	8009758 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	00030d40 	.word	0x00030d40

08009788 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	68f9      	ldr	r1, [r7, #12]
 80097a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097a8:	4313      	orrs	r3, r2
 80097aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b087      	sub	sp, #28
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f003 0306 	and.w	r3, r3, #6
 80097d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d102      	bne.n	80097e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80097da:	2300      	movs	r3, #0
 80097dc:	75fb      	strb	r3, [r7, #23]
 80097de:	e00a      	b.n	80097f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d002      	beq.n	80097ec <USB_GetDevSpeed+0x32>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b06      	cmp	r3, #6
 80097ea:	d102      	bne.n	80097f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80097ec:	2302      	movs	r3, #2
 80097ee:	75fb      	strb	r3, [r7, #23]
 80097f0:	e001      	b.n	80097f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80097f2:	230f      	movs	r3, #15
 80097f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	785b      	ldrb	r3, [r3, #1]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d13a      	bne.n	8009896 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009826:	69da      	ldr	r2, [r3, #28]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	f003 030f 	and.w	r3, r3, #15
 8009830:	2101      	movs	r1, #1
 8009832:	fa01 f303 	lsl.w	r3, r1, r3
 8009836:	b29b      	uxth	r3, r3
 8009838:	68f9      	ldr	r1, [r7, #12]
 800983a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800983e:	4313      	orrs	r3, r2
 8009840:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	4413      	add	r3, r2
 800984a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d155      	bne.n	8009904 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	791b      	ldrb	r3, [r3, #4]
 8009872:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009874:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	059b      	lsls	r3, r3, #22
 800987a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800987c:	4313      	orrs	r3, r2
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	0151      	lsls	r1, r2, #5
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	440a      	add	r2, r1
 8009886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800988a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800988e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009892:	6013      	str	r3, [r2, #0]
 8009894:	e036      	b.n	8009904 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800989c:	69da      	ldr	r2, [r3, #28]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	f003 030f 	and.w	r3, r3, #15
 80098a6:	2101      	movs	r1, #1
 80098a8:	fa01 f303 	lsl.w	r3, r1, r3
 80098ac:	041b      	lsls	r3, r3, #16
 80098ae:	68f9      	ldr	r1, [r7, #12]
 80098b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098b4:	4313      	orrs	r3, r2
 80098b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d11a      	bne.n	8009904 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	015a      	lsls	r2, r3, #5
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	4413      	add	r3, r2
 80098d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	791b      	ldrb	r3, [r3, #4]
 80098e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80098ea:	430b      	orrs	r3, r1
 80098ec:	4313      	orrs	r3, r2
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	0151      	lsls	r1, r2, #5
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	440a      	add	r2, r1
 80098f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009902:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
	...

08009914 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	785b      	ldrb	r3, [r3, #1]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d161      	bne.n	80099f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009946:	d11f      	bne.n	8009988 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	015a      	lsls	r2, r3, #5
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	4413      	add	r3, r2
 8009950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	0151      	lsls	r1, r2, #5
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	440a      	add	r2, r1
 800995e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009962:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009966:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	0151      	lsls	r1, r2, #5
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	440a      	add	r2, r1
 800997e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009986:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800998e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	f003 030f 	and.w	r3, r3, #15
 8009998:	2101      	movs	r1, #1
 800999a:	fa01 f303 	lsl.w	r3, r1, r3
 800999e:	b29b      	uxth	r3, r3
 80099a0:	43db      	mvns	r3, r3
 80099a2:	68f9      	ldr	r1, [r7, #12]
 80099a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099a8:	4013      	ands	r3, r2
 80099aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b2:	69da      	ldr	r2, [r3, #28]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	f003 030f 	and.w	r3, r3, #15
 80099bc:	2101      	movs	r1, #1
 80099be:	fa01 f303 	lsl.w	r3, r1, r3
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	43db      	mvns	r3, r3
 80099c6:	68f9      	ldr	r1, [r7, #12]
 80099c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099cc:	4013      	ands	r3, r2
 80099ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	0159      	lsls	r1, r3, #5
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	440b      	add	r3, r1
 80099e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ea:	4619      	mov	r1, r3
 80099ec:	4b35      	ldr	r3, [pc, #212]	; (8009ac4 <USB_DeactivateEndpoint+0x1b0>)
 80099ee:	4013      	ands	r3, r2
 80099f0:	600b      	str	r3, [r1, #0]
 80099f2:	e060      	b.n	8009ab6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a0a:	d11f      	bne.n	8009a4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	015a      	lsls	r2, r3, #5
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	0151      	lsls	r1, r2, #5
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	440a      	add	r2, r1
 8009a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	015a      	lsls	r2, r3, #5
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	4413      	add	r3, r2
 8009a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	0151      	lsls	r1, r2, #5
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	440a      	add	r2, r1
 8009a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	f003 030f 	and.w	r3, r3, #15
 8009a5c:	2101      	movs	r1, #1
 8009a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a62:	041b      	lsls	r3, r3, #16
 8009a64:	43db      	mvns	r3, r3
 8009a66:	68f9      	ldr	r1, [r7, #12]
 8009a68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a76:	69da      	ldr	r2, [r3, #28]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	f003 030f 	and.w	r3, r3, #15
 8009a80:	2101      	movs	r1, #1
 8009a82:	fa01 f303 	lsl.w	r3, r1, r3
 8009a86:	041b      	lsls	r3, r3, #16
 8009a88:	43db      	mvns	r3, r3
 8009a8a:	68f9      	ldr	r1, [r7, #12]
 8009a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a90:	4013      	ands	r3, r2
 8009a92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	0159      	lsls	r1, r3, #5
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	440b      	add	r3, r1
 8009aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aae:	4619      	mov	r1, r3
 8009ab0:	4b05      	ldr	r3, [pc, #20]	; (8009ac8 <USB_DeactivateEndpoint+0x1b4>)
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	ec337800 	.word	0xec337800
 8009ac8:	eff37800 	.word	0xeff37800

08009acc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08a      	sub	sp, #40	; 0x28
 8009ad0:	af02      	add	r7, sp, #8
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	785b      	ldrb	r3, [r3, #1]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	f040 815c 	bne.w	8009da6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d132      	bne.n	8009b5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	015a      	lsls	r2, r3, #5
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	4413      	add	r3, r2
 8009afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	69ba      	ldr	r2, [r7, #24]
 8009b06:	0151      	lsls	r1, r2, #5
 8009b08:	69fa      	ldr	r2, [r7, #28]
 8009b0a:	440a      	add	r2, r1
 8009b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	015a      	lsls	r2, r3, #5
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	4413      	add	r3, r2
 8009b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	69ba      	ldr	r2, [r7, #24]
 8009b2a:	0151      	lsls	r1, r2, #5
 8009b2c:	69fa      	ldr	r2, [r7, #28]
 8009b2e:	440a      	add	r2, r1
 8009b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	0151      	lsls	r1, r2, #5
 8009b4c:	69fa      	ldr	r2, [r7, #28]
 8009b4e:	440a      	add	r2, r1
 8009b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b54:	0cdb      	lsrs	r3, r3, #19
 8009b56:	04db      	lsls	r3, r3, #19
 8009b58:	6113      	str	r3, [r2, #16]
 8009b5a:	e074      	b.n	8009c46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	69ba      	ldr	r2, [r7, #24]
 8009b6c:	0151      	lsls	r1, r2, #5
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	440a      	add	r2, r1
 8009b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b76:	0cdb      	lsrs	r3, r3, #19
 8009b78:	04db      	lsls	r3, r3, #19
 8009b7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	015a      	lsls	r2, r3, #5
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	69ba      	ldr	r2, [r7, #24]
 8009b8c:	0151      	lsls	r1, r2, #5
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	440a      	add	r2, r1
 8009b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	6999      	ldr	r1, [r3, #24]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	440b      	add	r3, r1
 8009bb8:	1e59      	subs	r1, r3, #1
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8009bc2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009bc4:	4b9d      	ldr	r3, [pc, #628]	; (8009e3c <USB_EPStartXfer+0x370>)
 8009bc6:	400b      	ands	r3, r1
 8009bc8:	69b9      	ldr	r1, [r7, #24]
 8009bca:	0148      	lsls	r0, r1, #5
 8009bcc:	69f9      	ldr	r1, [r7, #28]
 8009bce:	4401      	add	r1, r0
 8009bd0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be4:	691a      	ldr	r2, [r3, #16]
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bee:	69b9      	ldr	r1, [r7, #24]
 8009bf0:	0148      	lsls	r0, r1, #5
 8009bf2:	69f9      	ldr	r1, [r7, #28]
 8009bf4:	4401      	add	r1, r0
 8009bf6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	791b      	ldrb	r3, [r3, #4]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d11f      	bne.n	8009c46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	0151      	lsls	r1, r2, #5
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	440a      	add	r2, r1
 8009c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009c24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	015a      	lsls	r2, r3, #5
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	69ba      	ldr	r2, [r7, #24]
 8009c36:	0151      	lsls	r1, r2, #5
 8009c38:	69fa      	ldr	r2, [r7, #28]
 8009c3a:	440a      	add	r2, r1
 8009c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009c46:	79fb      	ldrb	r3, [r7, #7]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d14b      	bne.n	8009ce4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d009      	beq.n	8009c68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	015a      	lsls	r2, r3, #5
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c60:	461a      	mov	r2, r3
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	791b      	ldrb	r3, [r3, #4]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d128      	bne.n	8009cc2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d110      	bne.n	8009ca2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	69ba      	ldr	r2, [r7, #24]
 8009c90:	0151      	lsls	r1, r2, #5
 8009c92:	69fa      	ldr	r2, [r7, #28]
 8009c94:	440a      	add	r2, r1
 8009c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	e00f      	b.n	8009cc2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	015a      	lsls	r2, r3, #5
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	4413      	add	r3, r2
 8009caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	0151      	lsls	r1, r2, #5
 8009cb4:	69fa      	ldr	r2, [r7, #28]
 8009cb6:	440a      	add	r2, r1
 8009cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cc0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	69ba      	ldr	r2, [r7, #24]
 8009cd2:	0151      	lsls	r1, r2, #5
 8009cd4:	69fa      	ldr	r2, [r7, #28]
 8009cd6:	440a      	add	r2, r1
 8009cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	e133      	b.n	8009f4c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	015a      	lsls	r2, r3, #5
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	4413      	add	r3, r2
 8009cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	69ba      	ldr	r2, [r7, #24]
 8009cf4:	0151      	lsls	r1, r2, #5
 8009cf6:	69fa      	ldr	r2, [r7, #28]
 8009cf8:	440a      	add	r2, r1
 8009cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	791b      	ldrb	r3, [r3, #4]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d015      	beq.n	8009d38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 811b 	beq.w	8009f4c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	f003 030f 	and.w	r3, r3, #15
 8009d26:	2101      	movs	r1, #1
 8009d28:	fa01 f303 	lsl.w	r3, r1, r3
 8009d2c:	69f9      	ldr	r1, [r7, #28]
 8009d2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d32:	4313      	orrs	r3, r2
 8009d34:	634b      	str	r3, [r1, #52]	; 0x34
 8009d36:	e109      	b.n	8009f4c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d110      	bne.n	8009d6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	0151      	lsls	r1, r2, #5
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	440a      	add	r2, r1
 8009d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d66:	6013      	str	r3, [r2, #0]
 8009d68:	e00f      	b.n	8009d8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	69ba      	ldr	r2, [r7, #24]
 8009d7a:	0151      	lsls	r1, r2, #5
 8009d7c:	69fa      	ldr	r2, [r7, #28]
 8009d7e:	440a      	add	r2, r1
 8009d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	6919      	ldr	r1, [r3, #16]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	781a      	ldrb	r2, [r3, #0]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	b298      	uxth	r0, r3
 8009d98:	79fb      	ldrb	r3, [r7, #7]
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f000 fade 	bl	800a360 <USB_WritePacket>
 8009da4:	e0d2      	b.n	8009f4c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	69ba      	ldr	r2, [r7, #24]
 8009db6:	0151      	lsls	r1, r2, #5
 8009db8:	69fa      	ldr	r2, [r7, #28]
 8009dba:	440a      	add	r2, r1
 8009dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dc0:	0cdb      	lsrs	r3, r3, #19
 8009dc2:	04db      	lsls	r3, r3, #19
 8009dc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	015a      	lsls	r2, r3, #5
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	69ba      	ldr	r2, [r7, #24]
 8009dd6:	0151      	lsls	r1, r2, #5
 8009dd8:	69fa      	ldr	r2, [r7, #28]
 8009dda:	440a      	add	r2, r1
 8009ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009de0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009de4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009de8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d126      	bne.n	8009e40 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dfe:	691a      	ldr	r2, [r3, #16]
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e08:	69b9      	ldr	r1, [r7, #24]
 8009e0a:	0148      	lsls	r0, r1, #5
 8009e0c:	69f9      	ldr	r1, [r7, #28]
 8009e0e:	4401      	add	r1, r0
 8009e10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e14:	4313      	orrs	r3, r2
 8009e16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	015a      	lsls	r2, r3, #5
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	69ba      	ldr	r2, [r7, #24]
 8009e28:	0151      	lsls	r1, r2, #5
 8009e2a:	69fa      	ldr	r2, [r7, #28]
 8009e2c:	440a      	add	r2, r1
 8009e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e36:	6113      	str	r3, [r2, #16]
 8009e38:	e03a      	b.n	8009eb0 <USB_EPStartXfer+0x3e4>
 8009e3a:	bf00      	nop
 8009e3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	699a      	ldr	r2, [r3, #24]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	4413      	add	r3, r2
 8009e4a:	1e5a      	subs	r2, r3, #1
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e54:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	8afa      	ldrh	r2, [r7, #22]
 8009e5c:	fb03 f202 	mul.w	r2, r3, r2
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e70:	691a      	ldr	r2, [r3, #16]
 8009e72:	8afb      	ldrh	r3, [r7, #22]
 8009e74:	04d9      	lsls	r1, r3, #19
 8009e76:	4b38      	ldr	r3, [pc, #224]	; (8009f58 <USB_EPStartXfer+0x48c>)
 8009e78:	400b      	ands	r3, r1
 8009e7a:	69b9      	ldr	r1, [r7, #24]
 8009e7c:	0148      	lsls	r0, r1, #5
 8009e7e:	69f9      	ldr	r1, [r7, #28]
 8009e80:	4401      	add	r1, r0
 8009e82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e86:	4313      	orrs	r3, r2
 8009e88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e96:	691a      	ldr	r2, [r3, #16]
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ea0:	69b9      	ldr	r1, [r7, #24]
 8009ea2:	0148      	lsls	r0, r1, #5
 8009ea4:	69f9      	ldr	r1, [r7, #28]
 8009ea6:	4401      	add	r1, r0
 8009ea8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009eac:	4313      	orrs	r3, r2
 8009eae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009eb0:	79fb      	ldrb	r3, [r7, #7]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d10d      	bne.n	8009ed2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d009      	beq.n	8009ed2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	6919      	ldr	r1, [r3, #16]
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	015a      	lsls	r2, r3, #5
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	4413      	add	r3, r2
 8009eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ece:	460a      	mov	r2, r1
 8009ed0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	791b      	ldrb	r3, [r3, #4]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d128      	bne.n	8009f2c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d110      	bne.n	8009f0c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	015a      	lsls	r2, r3, #5
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	69ba      	ldr	r2, [r7, #24]
 8009efa:	0151      	lsls	r1, r2, #5
 8009efc:	69fa      	ldr	r2, [r7, #28]
 8009efe:	440a      	add	r2, r1
 8009f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f08:	6013      	str	r3, [r2, #0]
 8009f0a:	e00f      	b.n	8009f2c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	0151      	lsls	r1, r2, #5
 8009f1e:	69fa      	ldr	r2, [r7, #28]
 8009f20:	440a      	add	r2, r1
 8009f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	69ba      	ldr	r2, [r7, #24]
 8009f3c:	0151      	lsls	r1, r2, #5
 8009f3e:	69fa      	ldr	r2, [r7, #28]
 8009f40:	440a      	add	r2, r1
 8009f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3720      	adds	r7, #32
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	1ff80000 	.word	0x1ff80000

08009f5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b087      	sub	sp, #28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	4613      	mov	r3, r2
 8009f68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	785b      	ldrb	r3, [r3, #1]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	f040 80ce 	bne.w	800a11a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	699b      	ldr	r3, [r3, #24]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d132      	bne.n	8009fec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	015a      	lsls	r2, r3, #5
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	0151      	lsls	r1, r2, #5
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	440a      	add	r2, r1
 8009f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009fa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009fa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	0151      	lsls	r1, r2, #5
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	440a      	add	r2, r1
 8009fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	015a      	lsls	r2, r3, #5
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	0151      	lsls	r1, r2, #5
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	440a      	add	r2, r1
 8009fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fe4:	0cdb      	lsrs	r3, r3, #19
 8009fe6:	04db      	lsls	r3, r3, #19
 8009fe8:	6113      	str	r3, [r2, #16]
 8009fea:	e04e      	b.n	800a08a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	0151      	lsls	r1, r2, #5
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	440a      	add	r2, r1
 800a002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a006:	0cdb      	lsrs	r3, r3, #19
 800a008:	04db      	lsls	r3, r3, #19
 800a00a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	0151      	lsls	r1, r2, #5
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	440a      	add	r2, r1
 800a022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a026:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a02a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a02e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	699a      	ldr	r2, [r3, #24]
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d903      	bls.n	800a044 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	68da      	ldr	r2, [r3, #12]
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	015a      	lsls	r2, r3, #5
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	4413      	add	r3, r2
 800a04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	0151      	lsls	r1, r2, #5
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	440a      	add	r2, r1
 800a05a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a05e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a070:	691a      	ldr	r2, [r3, #16]
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a07a:	6939      	ldr	r1, [r7, #16]
 800a07c:	0148      	lsls	r0, r1, #5
 800a07e:	6979      	ldr	r1, [r7, #20]
 800a080:	4401      	add	r1, r0
 800a082:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a086:	4313      	orrs	r3, r2
 800a088:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d11e      	bne.n	800a0ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d009      	beq.n	800a0ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	0151      	lsls	r1, r2, #5
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	440a      	add	r2, r1
 800a0c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0ca:	6013      	str	r3, [r2, #0]
 800a0cc:	e097      	b.n	800a1fe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	015a      	lsls	r2, r3, #5
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	0151      	lsls	r1, r2, #5
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	440a      	add	r2, r1
 800a0e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 8083 	beq.w	800a1fe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	f003 030f 	and.w	r3, r3, #15
 800a108:	2101      	movs	r1, #1
 800a10a:	fa01 f303 	lsl.w	r3, r1, r3
 800a10e:	6979      	ldr	r1, [r7, #20]
 800a110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a114:	4313      	orrs	r3, r2
 800a116:	634b      	str	r3, [r1, #52]	; 0x34
 800a118:	e071      	b.n	800a1fe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	015a      	lsls	r2, r3, #5
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	4413      	add	r3, r2
 800a122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	0151      	lsls	r1, r2, #5
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	440a      	add	r2, r1
 800a130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a134:	0cdb      	lsrs	r3, r3, #19
 800a136:	04db      	lsls	r3, r3, #19
 800a138:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	015a      	lsls	r2, r3, #5
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	4413      	add	r3, r2
 800a142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	0151      	lsls	r1, r2, #5
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	440a      	add	r2, r1
 800a150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a154:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a158:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a15c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d003      	beq.n	800a16e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	68da      	ldr	r2, [r3, #12]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	68da      	ldr	r2, [r3, #12]
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	0151      	lsls	r1, r2, #5
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	440a      	add	r2, r1
 800a18c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a190:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a194:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1a2:	691a      	ldr	r2, [r3, #16]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	69db      	ldr	r3, [r3, #28]
 800a1a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1ac:	6939      	ldr	r1, [r7, #16]
 800a1ae:	0148      	lsls	r0, r1, #5
 800a1b0:	6979      	ldr	r1, [r7, #20]
 800a1b2:	4401      	add	r1, r0
 800a1b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d10d      	bne.n	800a1de <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d009      	beq.n	800a1de <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	6919      	ldr	r1, [r3, #16]
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	015a      	lsls	r2, r3, #5
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1da:	460a      	mov	r2, r1
 800a1dc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	0151      	lsls	r1, r2, #5
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	440a      	add	r2, r1
 800a1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	371c      	adds	r7, #28
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a216:	2300      	movs	r3, #0
 800a218:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	785b      	ldrb	r3, [r3, #1]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d14a      	bne.n	800a2c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a23e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a242:	f040 8086 	bne.w	800a352 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	015a      	lsls	r2, r3, #5
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	4413      	add	r3, r2
 800a250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	7812      	ldrb	r2, [r2, #0]
 800a25a:	0151      	lsls	r1, r2, #5
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	440a      	add	r2, r1
 800a260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a264:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a268:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	4413      	add	r3, r2
 800a274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	7812      	ldrb	r2, [r2, #0]
 800a27e:	0151      	lsls	r1, r2, #5
 800a280:	693a      	ldr	r2, [r7, #16]
 800a282:	440a      	add	r2, r1
 800a284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a28c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3301      	adds	r3, #1
 800a292:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f242 7210 	movw	r2, #10000	; 0x2710
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d902      	bls.n	800a2a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	75fb      	strb	r3, [r7, #23]
          break;
 800a2a2:	e056      	b.n	800a352 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2bc:	d0e7      	beq.n	800a28e <USB_EPStopXfer+0x82>
 800a2be:	e048      	b.n	800a352 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	015a      	lsls	r2, r3, #5
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2d8:	d13b      	bne.n	800a352 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	7812      	ldrb	r2, [r2, #0]
 800a2ee:	0151      	lsls	r1, r2, #5
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	440a      	add	r2, r1
 800a2f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a2fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	015a      	lsls	r2, r3, #5
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	4413      	add	r3, r2
 800a308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	7812      	ldrb	r2, [r2, #0]
 800a312:	0151      	lsls	r1, r2, #5
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	440a      	add	r2, r1
 800a318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a31c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a320:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a32e:	4293      	cmp	r3, r2
 800a330:	d902      	bls.n	800a338 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	75fb      	strb	r3, [r7, #23]
          break;
 800a336:	e00c      	b.n	800a352 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	4413      	add	r3, r2
 800a342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a34c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a350:	d0e7      	beq.n	800a322 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a352:	7dfb      	ldrb	r3, [r7, #23]
}
 800a354:	4618      	mov	r0, r3
 800a356:	371c      	adds	r7, #28
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a360:	b480      	push	{r7}
 800a362:	b089      	sub	sp, #36	; 0x24
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	4611      	mov	r1, r2
 800a36c:	461a      	mov	r2, r3
 800a36e:	460b      	mov	r3, r1
 800a370:	71fb      	strb	r3, [r7, #7]
 800a372:	4613      	mov	r3, r2
 800a374:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a37e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a382:	2b00      	cmp	r3, #0
 800a384:	d123      	bne.n	800a3ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a386:	88bb      	ldrh	r3, [r7, #4]
 800a388:	3303      	adds	r3, #3
 800a38a:	089b      	lsrs	r3, r3, #2
 800a38c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a38e:	2300      	movs	r3, #0
 800a390:	61bb      	str	r3, [r7, #24]
 800a392:	e018      	b.n	800a3c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a394:	79fb      	ldrb	r3, [r7, #7]
 800a396:	031a      	lsls	r2, r3, #12
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	4413      	add	r3, r2
 800a39c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	61bb      	str	r3, [r7, #24]
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d3e2      	bcc.n	800a394 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3724      	adds	r7, #36	; 0x24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b08b      	sub	sp, #44	; 0x2c
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a3f2:	88fb      	ldrh	r3, [r7, #6]
 800a3f4:	089b      	lsrs	r3, r3, #2
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a3fa:	88fb      	ldrh	r3, [r7, #6]
 800a3fc:	f003 0303 	and.w	r3, r3, #3
 800a400:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a402:	2300      	movs	r3, #0
 800a404:	623b      	str	r3, [r7, #32]
 800a406:	e014      	b.n	800a432 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	601a      	str	r2, [r3, #0]
    pDest++;
 800a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a416:	3301      	adds	r3, #1
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	3301      	adds	r3, #1
 800a41e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	3301      	adds	r3, #1
 800a424:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	3301      	adds	r3, #1
 800a42a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	3301      	adds	r3, #1
 800a430:	623b      	str	r3, [r7, #32]
 800a432:	6a3a      	ldr	r2, [r7, #32]
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	429a      	cmp	r2, r3
 800a438:	d3e6      	bcc.n	800a408 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a43a:	8bfb      	ldrh	r3, [r7, #30]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d01e      	beq.n	800a47e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a44a:	461a      	mov	r2, r3
 800a44c:	f107 0310 	add.w	r3, r7, #16
 800a450:	6812      	ldr	r2, [r2, #0]
 800a452:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	fa22 f303 	lsr.w	r3, r2, r3
 800a460:	b2da      	uxtb	r2, r3
 800a462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a464:	701a      	strb	r2, [r3, #0]
      i++;
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	3301      	adds	r3, #1
 800a46a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46e:	3301      	adds	r3, #1
 800a470:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a472:	8bfb      	ldrh	r3, [r7, #30]
 800a474:	3b01      	subs	r3, #1
 800a476:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a478:	8bfb      	ldrh	r3, [r7, #30]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1ea      	bne.n	800a454 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a480:	4618      	mov	r0, r3
 800a482:	372c      	adds	r7, #44	; 0x2c
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	785b      	ldrb	r3, [r3, #1]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d12c      	bne.n	800a502 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	015a      	lsls	r2, r3, #5
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	db12      	blt.n	800a4e0 <USB_EPSetStall+0x54>
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00f      	beq.n	800a4e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	015a      	lsls	r2, r3, #5
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	0151      	lsls	r1, r2, #5
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	440a      	add	r2, r1
 800a4d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a4de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	0151      	lsls	r1, r2, #5
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	440a      	add	r2, r1
 800a4f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a4fe:	6013      	str	r3, [r2, #0]
 800a500:	e02b      	b.n	800a55a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	015a      	lsls	r2, r3, #5
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4413      	add	r3, r2
 800a50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	db12      	blt.n	800a53a <USB_EPSetStall+0xae>
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00f      	beq.n	800a53a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	0151      	lsls	r1, r2, #5
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	440a      	add	r2, r1
 800a530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a534:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a538:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	015a      	lsls	r2, r3, #5
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	4413      	add	r3, r2
 800a542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	0151      	lsls	r1, r2, #5
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	440a      	add	r2, r1
 800a550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a558:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3714      	adds	r7, #20
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	785b      	ldrb	r3, [r3, #1]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d128      	bne.n	800a5d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	0151      	lsls	r1, r2, #5
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	440a      	add	r2, r1
 800a59a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a59e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	791b      	ldrb	r3, [r3, #4]
 800a5a8:	2b03      	cmp	r3, #3
 800a5aa:	d003      	beq.n	800a5b4 <USB_EPClearStall+0x4c>
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	791b      	ldrb	r3, [r3, #4]
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d138      	bne.n	800a626 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	0151      	lsls	r1, r2, #5
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	440a      	add	r2, r1
 800a5ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5d2:	6013      	str	r3, [r2, #0]
 800a5d4:	e027      	b.n	800a626 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	015a      	lsls	r2, r3, #5
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	0151      	lsls	r1, r2, #5
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	440a      	add	r2, r1
 800a5ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	791b      	ldrb	r3, [r3, #4]
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d003      	beq.n	800a606 <USB_EPClearStall+0x9e>
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	791b      	ldrb	r3, [r3, #4]
 800a602:	2b02      	cmp	r3, #2
 800a604:	d10f      	bne.n	800a626 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	015a      	lsls	r2, r3, #5
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	4413      	add	r3, r2
 800a60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	0151      	lsls	r1, r2, #5
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	440a      	add	r2, r1
 800a61c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a624:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a652:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a656:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	78fb      	ldrb	r3, [r7, #3]
 800a662:	011b      	lsls	r3, r3, #4
 800a664:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a668:	68f9      	ldr	r1, [r7, #12]
 800a66a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a66e:	4313      	orrs	r3, r2
 800a670:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3714      	adds	r7, #20
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a69a:	f023 0303 	bic.w	r3, r3, #3
 800a69e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6ae:	f023 0302 	bic.w	r3, r3, #2
 800a6b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	b085      	sub	sp, #20
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a6dc:	f023 0303 	bic.w	r3, r3, #3
 800a6e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6f0:	f043 0302 	orr.w	r3, r3, #2
 800a6f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	4013      	ands	r3, r2
 800a71a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a71c:	68fb      	ldr	r3, [r7, #12]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b085      	sub	sp, #20
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a746:	69db      	ldr	r3, [r3, #28]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	4013      	ands	r3, r2
 800a74c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	0c1b      	lsrs	r3, r3, #16
}
 800a752:	4618      	mov	r0, r3
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a75e:	b480      	push	{r7}
 800a760:	b085      	sub	sp, #20
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a770:	699b      	ldr	r3, [r3, #24]
 800a772:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a77a:	69db      	ldr	r3, [r3, #28]
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	4013      	ands	r3, r2
 800a780:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	b29b      	uxth	r3, r3
}
 800a786:	4618      	mov	r0, r3
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a792:	b480      	push	{r7}
 800a794:	b085      	sub	sp, #20
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	460b      	mov	r3, r1
 800a79c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a7a2:	78fb      	ldrb	r3, [r7, #3]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	4013      	ands	r3, r2
 800a7be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a7c0:	68bb      	ldr	r3, [r7, #8]
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b087      	sub	sp, #28
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a7f2:	78fb      	ldrb	r3, [r7, #3]
 800a7f4:	f003 030f 	and.w	r3, r3, #15
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a7fe:	01db      	lsls	r3, r3, #7
 800a800:	b2db      	uxtb	r3, r3
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	4313      	orrs	r3, r2
 800a806:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a808:	78fb      	ldrb	r3, [r7, #3]
 800a80a:	015a      	lsls	r2, r3, #5
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	4413      	add	r3, r2
 800a810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	4013      	ands	r3, r2
 800a81a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a81c:	68bb      	ldr	r3, [r7, #8]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	371c      	adds	r7, #28
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	f003 0301 	and.w	r3, r3, #1
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	370c      	adds	r7, #12
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a846:	b480      	push	{r7}
 800a848:	b085      	sub	sp, #20
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a860:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a864:	f023 0307 	bic.w	r3, r3, #7
 800a868:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a87c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3714      	adds	r7, #20
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b087      	sub	sp, #28
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	460b      	mov	r3, r1
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	333c      	adds	r3, #60	; 0x3c
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	4a26      	ldr	r2, [pc, #152]	; (800a944 <USB_EP0_OutStart+0xb8>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d90a      	bls.n	800a8c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8c0:	d101      	bne.n	800a8c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e037      	b.n	800a936 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	697a      	ldr	r2, [r7, #20]
 800a8dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a8e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8f4:	f043 0318 	orr.w	r3, r3, #24
 800a8f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	697a      	ldr	r2, [r7, #20]
 800a904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a908:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a90c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a90e:	7afb      	ldrb	r3, [r7, #11]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d10f      	bne.n	800a934 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a91a:	461a      	mov	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a92e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a932:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	371c      	adds	r7, #28
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	4f54300a 	.word	0x4f54300a

0800a948 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a950:	2300      	movs	r3, #0
 800a952:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3301      	adds	r3, #1
 800a958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4a13      	ldr	r2, [pc, #76]	; (800a9ac <USB_CoreReset+0x64>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d901      	bls.n	800a966 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e01b      	b.n	800a99e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	daf2      	bge.n	800a954 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a96e:	2300      	movs	r3, #0
 800a970:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	f043 0201 	orr.w	r2, r3, #1
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	3301      	adds	r3, #1
 800a982:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4a09      	ldr	r2, [pc, #36]	; (800a9ac <USB_CoreReset+0x64>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d901      	bls.n	800a990 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a98c:	2303      	movs	r3, #3
 800a98e:	e006      	b.n	800a99e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	f003 0301 	and.w	r3, r3, #1
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d0f0      	beq.n	800a97e <USB_CoreReset+0x36>

  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	00030d40 	.word	0x00030d40

0800a9b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a9bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a9c0:	f005 fa0c 	bl	800fddc <USBD_static_malloc>
 800a9c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d109      	bne.n	800a9e0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	32b0      	adds	r2, #176	; 0xb0
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a9dc:	2302      	movs	r3, #2
 800a9de:	e0d4      	b.n	800ab8a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a9e0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f00f fef6 	bl	801a7d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	32b0      	adds	r2, #176	; 0xb0
 800a9f6:	68f9      	ldr	r1, [r7, #12]
 800a9f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	32b0      	adds	r2, #176	; 0xb0
 800aa06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	7c1b      	ldrb	r3, [r3, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d138      	bne.n	800aa8a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aa18:	4b5e      	ldr	r3, [pc, #376]	; (800ab94 <USBD_CDC_Init+0x1e4>)
 800aa1a:	7819      	ldrb	r1, [r3, #0]
 800aa1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa20:	2202      	movs	r2, #2
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f005 f8b7 	bl	800fb96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aa28:	4b5a      	ldr	r3, [pc, #360]	; (800ab94 <USBD_CDC_Init+0x1e4>)
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	f003 020f 	and.w	r2, r3, #15
 800aa30:	6879      	ldr	r1, [r7, #4]
 800aa32:	4613      	mov	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	440b      	add	r3, r1
 800aa3c:	3324      	adds	r3, #36	; 0x24
 800aa3e:	2201      	movs	r2, #1
 800aa40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aa42:	4b55      	ldr	r3, [pc, #340]	; (800ab98 <USBD_CDC_Init+0x1e8>)
 800aa44:	7819      	ldrb	r1, [r3, #0]
 800aa46:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa4a:	2202      	movs	r2, #2
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f005 f8a2 	bl	800fb96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aa52:	4b51      	ldr	r3, [pc, #324]	; (800ab98 <USBD_CDC_Init+0x1e8>)
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	f003 020f 	and.w	r2, r3, #15
 800aa5a:	6879      	ldr	r1, [r7, #4]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	440b      	add	r3, r1
 800aa66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aa6e:	4b4b      	ldr	r3, [pc, #300]	; (800ab9c <USBD_CDC_Init+0x1ec>)
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	f003 020f 	and.w	r2, r3, #15
 800aa76:	6879      	ldr	r1, [r7, #4]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4413      	add	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	440b      	add	r3, r1
 800aa82:	3326      	adds	r3, #38	; 0x26
 800aa84:	2210      	movs	r2, #16
 800aa86:	801a      	strh	r2, [r3, #0]
 800aa88:	e035      	b.n	800aaf6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aa8a:	4b42      	ldr	r3, [pc, #264]	; (800ab94 <USBD_CDC_Init+0x1e4>)
 800aa8c:	7819      	ldrb	r1, [r3, #0]
 800aa8e:	2340      	movs	r3, #64	; 0x40
 800aa90:	2202      	movs	r2, #2
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f005 f87f 	bl	800fb96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aa98:	4b3e      	ldr	r3, [pc, #248]	; (800ab94 <USBD_CDC_Init+0x1e4>)
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	f003 020f 	and.w	r2, r3, #15
 800aaa0:	6879      	ldr	r1, [r7, #4]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	440b      	add	r3, r1
 800aaac:	3324      	adds	r3, #36	; 0x24
 800aaae:	2201      	movs	r2, #1
 800aab0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aab2:	4b39      	ldr	r3, [pc, #228]	; (800ab98 <USBD_CDC_Init+0x1e8>)
 800aab4:	7819      	ldrb	r1, [r3, #0]
 800aab6:	2340      	movs	r3, #64	; 0x40
 800aab8:	2202      	movs	r2, #2
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f005 f86b 	bl	800fb96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aac0:	4b35      	ldr	r3, [pc, #212]	; (800ab98 <USBD_CDC_Init+0x1e8>)
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	f003 020f 	and.w	r2, r3, #15
 800aac8:	6879      	ldr	r1, [r7, #4]
 800aaca:	4613      	mov	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	440b      	add	r3, r1
 800aad4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aad8:	2201      	movs	r2, #1
 800aada:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aadc:	4b2f      	ldr	r3, [pc, #188]	; (800ab9c <USBD_CDC_Init+0x1ec>)
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	f003 020f 	and.w	r2, r3, #15
 800aae4:	6879      	ldr	r1, [r7, #4]
 800aae6:	4613      	mov	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	440b      	add	r3, r1
 800aaf0:	3326      	adds	r3, #38	; 0x26
 800aaf2:	2210      	movs	r2, #16
 800aaf4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aaf6:	4b29      	ldr	r3, [pc, #164]	; (800ab9c <USBD_CDC_Init+0x1ec>)
 800aaf8:	7819      	ldrb	r1, [r3, #0]
 800aafa:	2308      	movs	r3, #8
 800aafc:	2203      	movs	r2, #3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f005 f849 	bl	800fb96 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ab04:	4b25      	ldr	r3, [pc, #148]	; (800ab9c <USBD_CDC_Init+0x1ec>)
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	f003 020f 	and.w	r2, r3, #15
 800ab0c:	6879      	ldr	r1, [r7, #4]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	4413      	add	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	440b      	add	r3, r1
 800ab18:	3324      	adds	r3, #36	; 0x24
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	33b0      	adds	r3, #176	; 0xb0
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ab54:	2302      	movs	r3, #2
 800ab56:	e018      	b.n	800ab8a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	7c1b      	ldrb	r3, [r3, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10a      	bne.n	800ab76 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab60:	4b0d      	ldr	r3, [pc, #52]	; (800ab98 <USBD_CDC_Init+0x1e8>)
 800ab62:	7819      	ldrb	r1, [r3, #0]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f005 f900 	bl	800fd74 <USBD_LL_PrepareReceive>
 800ab74:	e008      	b.n	800ab88 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab76:	4b08      	ldr	r3, [pc, #32]	; (800ab98 <USBD_CDC_Init+0x1e8>)
 800ab78:	7819      	ldrb	r1, [r3, #0]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ab80:	2340      	movs	r3, #64	; 0x40
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f005 f8f6 	bl	800fd74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20000097 	.word	0x20000097
 800ab98:	20000098 	.word	0x20000098
 800ab9c:	20000099 	.word	0x20000099

0800aba0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800abac:	4b3a      	ldr	r3, [pc, #232]	; (800ac98 <USBD_CDC_DeInit+0xf8>)
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	4619      	mov	r1, r3
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f005 f815 	bl	800fbe2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800abb8:	4b37      	ldr	r3, [pc, #220]	; (800ac98 <USBD_CDC_DeInit+0xf8>)
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	f003 020f 	and.w	r2, r3, #15
 800abc0:	6879      	ldr	r1, [r7, #4]
 800abc2:	4613      	mov	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	440b      	add	r3, r1
 800abcc:	3324      	adds	r3, #36	; 0x24
 800abce:	2200      	movs	r2, #0
 800abd0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800abd2:	4b32      	ldr	r3, [pc, #200]	; (800ac9c <USBD_CDC_DeInit+0xfc>)
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	4619      	mov	r1, r3
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f005 f802 	bl	800fbe2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800abde:	4b2f      	ldr	r3, [pc, #188]	; (800ac9c <USBD_CDC_DeInit+0xfc>)
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	f003 020f 	and.w	r2, r3, #15
 800abe6:	6879      	ldr	r1, [r7, #4]
 800abe8:	4613      	mov	r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4413      	add	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	440b      	add	r3, r1
 800abf2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800abf6:	2200      	movs	r2, #0
 800abf8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800abfa:	4b29      	ldr	r3, [pc, #164]	; (800aca0 <USBD_CDC_DeInit+0x100>)
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	4619      	mov	r1, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f004 ffee 	bl	800fbe2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ac06:	4b26      	ldr	r3, [pc, #152]	; (800aca0 <USBD_CDC_DeInit+0x100>)
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	f003 020f 	and.w	r2, r3, #15
 800ac0e:	6879      	ldr	r1, [r7, #4]
 800ac10:	4613      	mov	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	440b      	add	r3, r1
 800ac1a:	3324      	adds	r3, #36	; 0x24
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ac20:	4b1f      	ldr	r3, [pc, #124]	; (800aca0 <USBD_CDC_DeInit+0x100>)
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	f003 020f 	and.w	r2, r3, #15
 800ac28:	6879      	ldr	r1, [r7, #4]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	4413      	add	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	440b      	add	r3, r1
 800ac34:	3326      	adds	r3, #38	; 0x26
 800ac36:	2200      	movs	r2, #0
 800ac38:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	32b0      	adds	r2, #176	; 0xb0
 800ac44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d01f      	beq.n	800ac8c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	33b0      	adds	r3, #176	; 0xb0
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	32b0      	adds	r2, #176	; 0xb0
 800ac6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f005 f8c2 	bl	800fdf8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	32b0      	adds	r2, #176	; 0xb0
 800ac7e:	2100      	movs	r1, #0
 800ac80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	20000097 	.word	0x20000097
 800ac9c:	20000098 	.word	0x20000098
 800aca0:	20000099 	.word	0x20000099

0800aca4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	32b0      	adds	r2, #176	; 0xb0
 800acb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acbc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800acbe:	2300      	movs	r3, #0
 800acc0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800acc2:	2300      	movs	r3, #0
 800acc4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800acd0:	2303      	movs	r3, #3
 800acd2:	e0bf      	b.n	800ae54 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d050      	beq.n	800ad82 <USBD_CDC_Setup+0xde>
 800ace0:	2b20      	cmp	r3, #32
 800ace2:	f040 80af 	bne.w	800ae44 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	88db      	ldrh	r3, [r3, #6]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d03a      	beq.n	800ad64 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	b25b      	sxtb	r3, r3
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	da1b      	bge.n	800ad30 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	33b0      	adds	r3, #176	; 0xb0
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ad0e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad10:	683a      	ldr	r2, [r7, #0]
 800ad12:	88d2      	ldrh	r2, [r2, #6]
 800ad14:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	88db      	ldrh	r3, [r3, #6]
 800ad1a:	2b07      	cmp	r3, #7
 800ad1c:	bf28      	it	cs
 800ad1e:	2307      	movcs	r3, #7
 800ad20:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	89fa      	ldrh	r2, [r7, #14]
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f001 fd43 	bl	800c7b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ad2e:	e090      	b.n	800ae52 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	785a      	ldrb	r2, [r3, #1]
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	88db      	ldrh	r3, [r3, #6]
 800ad3e:	2b3f      	cmp	r3, #63	; 0x3f
 800ad40:	d803      	bhi.n	800ad4a <USBD_CDC_Setup+0xa6>
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	88db      	ldrh	r3, [r3, #6]
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	e000      	b.n	800ad4c <USBD_CDC_Setup+0xa8>
 800ad4a:	2240      	movs	r2, #64	; 0x40
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ad52:	6939      	ldr	r1, [r7, #16]
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f001 fd55 	bl	800c80c <USBD_CtlPrepareRx>
      break;
 800ad62:	e076      	b.n	800ae52 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	33b0      	adds	r3, #176	; 0xb0
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	4413      	add	r3, r2
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	7850      	ldrb	r0, [r2, #1]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	4798      	blx	r3
      break;
 800ad80:	e067      	b.n	800ae52 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	785b      	ldrb	r3, [r3, #1]
 800ad86:	2b0b      	cmp	r3, #11
 800ad88:	d851      	bhi.n	800ae2e <USBD_CDC_Setup+0x18a>
 800ad8a:	a201      	add	r2, pc, #4	; (adr r2, 800ad90 <USBD_CDC_Setup+0xec>)
 800ad8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad90:	0800adc1 	.word	0x0800adc1
 800ad94:	0800ae3d 	.word	0x0800ae3d
 800ad98:	0800ae2f 	.word	0x0800ae2f
 800ad9c:	0800ae2f 	.word	0x0800ae2f
 800ada0:	0800ae2f 	.word	0x0800ae2f
 800ada4:	0800ae2f 	.word	0x0800ae2f
 800ada8:	0800ae2f 	.word	0x0800ae2f
 800adac:	0800ae2f 	.word	0x0800ae2f
 800adb0:	0800ae2f 	.word	0x0800ae2f
 800adb4:	0800ae2f 	.word	0x0800ae2f
 800adb8:	0800adeb 	.word	0x0800adeb
 800adbc:	0800ae15 	.word	0x0800ae15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	2b03      	cmp	r3, #3
 800adca:	d107      	bne.n	800addc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800adcc:	f107 030a 	add.w	r3, r7, #10
 800add0:	2202      	movs	r2, #2
 800add2:	4619      	mov	r1, r3
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 fced 	bl	800c7b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800adda:	e032      	b.n	800ae42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f001 fc77 	bl	800c6d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ade4:	2303      	movs	r3, #3
 800ade6:	75fb      	strb	r3, [r7, #23]
          break;
 800ade8:	e02b      	b.n	800ae42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d107      	bne.n	800ae06 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800adf6:	f107 030d 	add.w	r3, r7, #13
 800adfa:	2201      	movs	r2, #1
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f001 fcd8 	bl	800c7b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae04:	e01d      	b.n	800ae42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f001 fc62 	bl	800c6d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	75fb      	strb	r3, [r7, #23]
          break;
 800ae12:	e016      	b.n	800ae42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d00f      	beq.n	800ae40 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f001 fc55 	bl	800c6d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ae2c:	e008      	b.n	800ae40 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f001 fc4e 	bl	800c6d2 <USBD_CtlError>
          ret = USBD_FAIL;
 800ae36:	2303      	movs	r3, #3
 800ae38:	75fb      	strb	r3, [r7, #23]
          break;
 800ae3a:	e002      	b.n	800ae42 <USBD_CDC_Setup+0x19e>
          break;
 800ae3c:	bf00      	nop
 800ae3e:	e008      	b.n	800ae52 <USBD_CDC_Setup+0x1ae>
          break;
 800ae40:	bf00      	nop
      }
      break;
 800ae42:	e006      	b.n	800ae52 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f001 fc43 	bl	800c6d2 <USBD_CtlError>
      ret = USBD_FAIL;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	75fb      	strb	r3, [r7, #23]
      break;
 800ae50:	bf00      	nop
  }

  return (uint8_t)ret;
 800ae52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3718      	adds	r7, #24
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	32b0      	adds	r2, #176	; 0xb0
 800ae7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ae82:	2303      	movs	r3, #3
 800ae84:	e065      	b.n	800af52 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	32b0      	adds	r2, #176	; 0xb0
 800ae90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ae96:	78fb      	ldrb	r3, [r7, #3]
 800ae98:	f003 020f 	and.w	r2, r3, #15
 800ae9c:	6879      	ldr	r1, [r7, #4]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	4413      	add	r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	440b      	add	r3, r1
 800aea8:	3318      	adds	r3, #24
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d02f      	beq.n	800af10 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aeb0:	78fb      	ldrb	r3, [r7, #3]
 800aeb2:	f003 020f 	and.w	r2, r3, #15
 800aeb6:	6879      	ldr	r1, [r7, #4]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	440b      	add	r3, r1
 800aec2:	3318      	adds	r3, #24
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	78fb      	ldrb	r3, [r7, #3]
 800aec8:	f003 010f 	and.w	r1, r3, #15
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	460b      	mov	r3, r1
 800aed0:	00db      	lsls	r3, r3, #3
 800aed2:	440b      	add	r3, r1
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4403      	add	r3, r0
 800aed8:	3348      	adds	r3, #72	; 0x48
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	fbb2 f1f3 	udiv	r1, r2, r3
 800aee0:	fb01 f303 	mul.w	r3, r1, r3
 800aee4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d112      	bne.n	800af10 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aeea:	78fb      	ldrb	r3, [r7, #3]
 800aeec:	f003 020f 	and.w	r2, r3, #15
 800aef0:	6879      	ldr	r1, [r7, #4]
 800aef2:	4613      	mov	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4413      	add	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	440b      	add	r3, r1
 800aefc:	3318      	adds	r3, #24
 800aefe:	2200      	movs	r2, #0
 800af00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af02:	78f9      	ldrb	r1, [r7, #3]
 800af04:	2300      	movs	r3, #0
 800af06:	2200      	movs	r2, #0
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f004 ff12 	bl	800fd32 <USBD_LL_Transmit>
 800af0e:	e01f      	b.n	800af50 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	2200      	movs	r2, #0
 800af14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	33b0      	adds	r3, #176	; 0xb0
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4413      	add	r3, r2
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d010      	beq.n	800af50 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	33b0      	adds	r3, #176	; 0xb0
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4413      	add	r3, r2
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	68ba      	ldr	r2, [r7, #8]
 800af42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800af4c:	78fa      	ldrb	r2, [r7, #3]
 800af4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b084      	sub	sp, #16
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	460b      	mov	r3, r1
 800af64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	32b0      	adds	r2, #176	; 0xb0
 800af70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af74:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	32b0      	adds	r2, #176	; 0xb0
 800af80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d101      	bne.n	800af8c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800af88:	2303      	movs	r3, #3
 800af8a:	e01a      	b.n	800afc2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800af8c:	78fb      	ldrb	r3, [r7, #3]
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f004 ff10 	bl	800fdb6 <USBD_LL_GetRxDataSize>
 800af96:	4602      	mov	r2, r0
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	33b0      	adds	r3, #176	; 0xb0
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800afbc:	4611      	mov	r1, r2
 800afbe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b084      	sub	sp, #16
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	32b0      	adds	r2, #176	; 0xb0
 800afdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800afe8:	2303      	movs	r3, #3
 800afea:	e025      	b.n	800b038 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	33b0      	adds	r3, #176	; 0xb0
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d01a      	beq.n	800b036 <USBD_CDC_EP0_RxReady+0x6c>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b006:	2bff      	cmp	r3, #255	; 0xff
 800b008:	d015      	beq.n	800b036 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	33b0      	adds	r3, #176	; 0xb0
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b022:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b02a:	b292      	uxth	r2, r2
 800b02c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	22ff      	movs	r2, #255	; 0xff
 800b032:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b048:	2182      	movs	r1, #130	; 0x82
 800b04a:	4818      	ldr	r0, [pc, #96]	; (800b0ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b04c:	f000 fd09 	bl	800ba62 <USBD_GetEpDesc>
 800b050:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b052:	2101      	movs	r1, #1
 800b054:	4815      	ldr	r0, [pc, #84]	; (800b0ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b056:	f000 fd04 	bl	800ba62 <USBD_GetEpDesc>
 800b05a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b05c:	2181      	movs	r1, #129	; 0x81
 800b05e:	4813      	ldr	r0, [pc, #76]	; (800b0ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b060:	f000 fcff 	bl	800ba62 <USBD_GetEpDesc>
 800b064:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d002      	beq.n	800b072 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	2210      	movs	r2, #16
 800b070:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d006      	beq.n	800b086 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b080:	711a      	strb	r2, [r3, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d006      	beq.n	800b09a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b094:	711a      	strb	r2, [r3, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2243      	movs	r2, #67	; 0x43
 800b09e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b0a0:	4b02      	ldr	r3, [pc, #8]	; (800b0ac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3718      	adds	r7, #24
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	20000054 	.word	0x20000054

0800b0b0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b0b8:	2182      	movs	r1, #130	; 0x82
 800b0ba:	4818      	ldr	r0, [pc, #96]	; (800b11c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b0bc:	f000 fcd1 	bl	800ba62 <USBD_GetEpDesc>
 800b0c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	4815      	ldr	r0, [pc, #84]	; (800b11c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b0c6:	f000 fccc 	bl	800ba62 <USBD_GetEpDesc>
 800b0ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b0cc:	2181      	movs	r1, #129	; 0x81
 800b0ce:	4813      	ldr	r0, [pc, #76]	; (800b11c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b0d0:	f000 fcc7 	bl	800ba62 <USBD_GetEpDesc>
 800b0d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	2210      	movs	r2, #16
 800b0e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d006      	beq.n	800b0f6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	711a      	strb	r2, [r3, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f042 0202 	orr.w	r2, r2, #2
 800b0f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d006      	beq.n	800b10a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2200      	movs	r2, #0
 800b100:	711a      	strb	r2, [r3, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f042 0202 	orr.w	r2, r2, #2
 800b108:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2243      	movs	r2, #67	; 0x43
 800b10e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b110:	4b02      	ldr	r3, [pc, #8]	; (800b11c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b112:	4618      	mov	r0, r3
 800b114:	3718      	adds	r7, #24
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	20000054 	.word	0x20000054

0800b120 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b128:	2182      	movs	r1, #130	; 0x82
 800b12a:	4818      	ldr	r0, [pc, #96]	; (800b18c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b12c:	f000 fc99 	bl	800ba62 <USBD_GetEpDesc>
 800b130:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b132:	2101      	movs	r1, #1
 800b134:	4815      	ldr	r0, [pc, #84]	; (800b18c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b136:	f000 fc94 	bl	800ba62 <USBD_GetEpDesc>
 800b13a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b13c:	2181      	movs	r1, #129	; 0x81
 800b13e:	4813      	ldr	r0, [pc, #76]	; (800b18c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b140:	f000 fc8f 	bl	800ba62 <USBD_GetEpDesc>
 800b144:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	2210      	movs	r2, #16
 800b150:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d006      	beq.n	800b166 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b160:	711a      	strb	r2, [r3, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d006      	beq.n	800b17a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b174:	711a      	strb	r2, [r3, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2243      	movs	r2, #67	; 0x43
 800b17e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b180:	4b02      	ldr	r3, [pc, #8]	; (800b18c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b182:	4618      	mov	r0, r3
 800b184:	3718      	adds	r7, #24
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	20000054 	.word	0x20000054

0800b190 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	220a      	movs	r2, #10
 800b19c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b19e:	4b03      	ldr	r3, [pc, #12]	; (800b1ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	20000010 	.word	0x20000010

0800b1b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d101      	bne.n	800b1c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	e009      	b.n	800b1d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	33b0      	adds	r3, #176	; 0xb0
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	32b0      	adds	r2, #176	; 0xb0
 800b1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1fe:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d101      	bne.n	800b20a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b206:	2303      	movs	r3, #3
 800b208:	e008      	b.n	800b21c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	371c      	adds	r7, #28
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	32b0      	adds	r2, #176	; 0xb0
 800b23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b240:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d101      	bne.n	800b24c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b248:	2303      	movs	r3, #3
 800b24a:	e004      	b.n	800b256 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3714      	adds	r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
	...

0800b264 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	32b0      	adds	r2, #176	; 0xb0
 800b276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	32b0      	adds	r2, #176	; 0xb0
 800b286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d101      	bne.n	800b292 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b28e:	2303      	movs	r3, #3
 800b290:	e018      	b.n	800b2c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	7c1b      	ldrb	r3, [r3, #16]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10a      	bne.n	800b2b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b29a:	4b0c      	ldr	r3, [pc, #48]	; (800b2cc <USBD_CDC_ReceivePacket+0x68>)
 800b29c:	7819      	ldrb	r1, [r3, #0]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f004 fd63 	bl	800fd74 <USBD_LL_PrepareReceive>
 800b2ae:	e008      	b.n	800b2c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2b0:	4b06      	ldr	r3, [pc, #24]	; (800b2cc <USBD_CDC_ReceivePacket+0x68>)
 800b2b2:	7819      	ldrb	r1, [r3, #0]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2ba:	2340      	movs	r3, #64	; 0x40
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f004 fd59 	bl	800fd74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	20000098 	.word	0x20000098

0800b2d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	4613      	mov	r3, r2
 800b2dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d101      	bne.n	800b2e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e01f      	b.n	800b328 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d003      	beq.n	800b30e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2201      	movs	r2, #1
 800b312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	79fa      	ldrb	r2, [r7, #7]
 800b31a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b31c:	68f8      	ldr	r0, [r7, #12]
 800b31e:	f004 fbd3 	bl	800fac8 <USBD_LL_Init>
 800b322:	4603      	mov	r3, r0
 800b324:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b326:	7dfb      	ldrb	r3, [r7, #23]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3718      	adds	r7, #24
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b33a:	2300      	movs	r3, #0
 800b33c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b344:	2303      	movs	r3, #3
 800b346:	e025      	b.n	800b394 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	32ae      	adds	r2, #174	; 0xae
 800b35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00f      	beq.n	800b384 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	32ae      	adds	r2, #174	; 0xae
 800b36e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b374:	f107 020e 	add.w	r2, r7, #14
 800b378:	4610      	mov	r0, r2
 800b37a:	4798      	blx	r3
 800b37c:	4602      	mov	r2, r0
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f004 fbdb 	bl	800fb60 <USBD_LL_Start>
 800b3aa:	4603      	mov	r3, r0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	370c      	adds	r7, #12
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b084      	sub	sp, #16
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d009      	beq.n	800b3f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	78fa      	ldrb	r2, [r7, #3]
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	4798      	blx	r3
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	460b      	mov	r3, r1
 800b40c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b40e:	2300      	movs	r3, #0
 800b410:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	78fa      	ldrb	r2, [r7, #3]
 800b41c:	4611      	mov	r1, r2
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	4798      	blx	r3
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b428:	2303      	movs	r3, #3
 800b42a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b084      	sub	sp, #16
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	4618      	mov	r0, r3
 800b44a:	f001 f908 	bl	800c65e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b45c:	461a      	mov	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b46a:	f003 031f 	and.w	r3, r3, #31
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d01a      	beq.n	800b4a8 <USBD_LL_SetupStage+0x72>
 800b472:	2b02      	cmp	r3, #2
 800b474:	d822      	bhi.n	800b4bc <USBD_LL_SetupStage+0x86>
 800b476:	2b00      	cmp	r3, #0
 800b478:	d002      	beq.n	800b480 <USBD_LL_SetupStage+0x4a>
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d00a      	beq.n	800b494 <USBD_LL_SetupStage+0x5e>
 800b47e:	e01d      	b.n	800b4bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b486:	4619      	mov	r1, r3
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f000 fb5f 	bl	800bb4c <USBD_StdDevReq>
 800b48e:	4603      	mov	r3, r0
 800b490:	73fb      	strb	r3, [r7, #15]
      break;
 800b492:	e020      	b.n	800b4d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b49a:	4619      	mov	r1, r3
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fbc7 	bl	800bc30 <USBD_StdItfReq>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b4a6:	e016      	b.n	800b4d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fc29 	bl	800bd08 <USBD_StdEPReq>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ba:	e00c      	b.n	800b4d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b4c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f004 fba8 	bl	800fc20 <USBD_LL_StallEP>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b4d4:	bf00      	nop
  }

  return ret;
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	607a      	str	r2, [r7, #4]
 800b4ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b4f2:	7afb      	ldrb	r3, [r7, #11]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d16e      	bne.n	800b5d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b4fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b506:	2b03      	cmp	r3, #3
 800b508:	f040 8098 	bne.w	800b63c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	689a      	ldr	r2, [r3, #8]
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	429a      	cmp	r2, r3
 800b516:	d913      	bls.n	800b540 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	689a      	ldr	r2, [r3, #8]
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	1ad2      	subs	r2, r2, r3
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	4293      	cmp	r3, r2
 800b530:	bf28      	it	cs
 800b532:	4613      	movcs	r3, r2
 800b534:	461a      	mov	r2, r3
 800b536:	6879      	ldr	r1, [r7, #4]
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f001 f984 	bl	800c846 <USBD_CtlContinueRx>
 800b53e:	e07d      	b.n	800b63c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b546:	f003 031f 	and.w	r3, r3, #31
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	d014      	beq.n	800b578 <USBD_LL_DataOutStage+0x98>
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d81d      	bhi.n	800b58e <USBD_LL_DataOutStage+0xae>
 800b552:	2b00      	cmp	r3, #0
 800b554:	d002      	beq.n	800b55c <USBD_LL_DataOutStage+0x7c>
 800b556:	2b01      	cmp	r3, #1
 800b558:	d003      	beq.n	800b562 <USBD_LL_DataOutStage+0x82>
 800b55a:	e018      	b.n	800b58e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b55c:	2300      	movs	r3, #0
 800b55e:	75bb      	strb	r3, [r7, #22]
            break;
 800b560:	e018      	b.n	800b594 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	4619      	mov	r1, r3
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f000 fa5e 	bl	800ba2e <USBD_CoreFindIF>
 800b572:	4603      	mov	r3, r0
 800b574:	75bb      	strb	r3, [r7, #22]
            break;
 800b576:	e00d      	b.n	800b594 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	4619      	mov	r1, r3
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 fa60 	bl	800ba48 <USBD_CoreFindEP>
 800b588:	4603      	mov	r3, r0
 800b58a:	75bb      	strb	r3, [r7, #22]
            break;
 800b58c:	e002      	b.n	800b594 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b58e:	2300      	movs	r3, #0
 800b590:	75bb      	strb	r3, [r7, #22]
            break;
 800b592:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b594:	7dbb      	ldrb	r3, [r7, #22]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d119      	bne.n	800b5ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b03      	cmp	r3, #3
 800b5a4:	d113      	bne.n	800b5ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b5a6:	7dba      	ldrb	r2, [r7, #22]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	32ae      	adds	r2, #174	; 0xae
 800b5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00b      	beq.n	800b5ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b5b6:	7dba      	ldrb	r2, [r7, #22]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b5be:	7dba      	ldrb	r2, [r7, #22]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	32ae      	adds	r2, #174	; 0xae
 800b5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f001 f94a 	bl	800c868 <USBD_CtlSendStatus>
 800b5d4:	e032      	b.n	800b63c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b5d6:	7afb      	ldrb	r3, [r7, #11]
 800b5d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	4619      	mov	r1, r3
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f000 fa31 	bl	800ba48 <USBD_CoreFindEP>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5ea:	7dbb      	ldrb	r3, [r7, #22]
 800b5ec:	2bff      	cmp	r3, #255	; 0xff
 800b5ee:	d025      	beq.n	800b63c <USBD_LL_DataOutStage+0x15c>
 800b5f0:	7dbb      	ldrb	r3, [r7, #22]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d122      	bne.n	800b63c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b03      	cmp	r3, #3
 800b600:	d117      	bne.n	800b632 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b602:	7dba      	ldrb	r2, [r7, #22]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	32ae      	adds	r2, #174	; 0xae
 800b608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b60c:	699b      	ldr	r3, [r3, #24]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00f      	beq.n	800b632 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b612:	7dba      	ldrb	r2, [r7, #22]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b61a:	7dba      	ldrb	r2, [r7, #22]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	32ae      	adds	r2, #174	; 0xae
 800b620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	7afa      	ldrb	r2, [r7, #11]
 800b628:	4611      	mov	r1, r2
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	4798      	blx	r3
 800b62e:	4603      	mov	r3, r0
 800b630:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b632:	7dfb      	ldrb	r3, [r7, #23]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b638:	7dfb      	ldrb	r3, [r7, #23]
 800b63a:	e000      	b.n	800b63e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3718      	adds	r7, #24
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b086      	sub	sp, #24
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	60f8      	str	r0, [r7, #12]
 800b64e:	460b      	mov	r3, r1
 800b650:	607a      	str	r2, [r7, #4]
 800b652:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b654:	7afb      	ldrb	r3, [r7, #11]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d16f      	bne.n	800b73a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	3314      	adds	r3, #20
 800b65e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b666:	2b02      	cmp	r3, #2
 800b668:	d15a      	bne.n	800b720 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	689a      	ldr	r2, [r3, #8]
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	429a      	cmp	r2, r3
 800b674:	d914      	bls.n	800b6a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	689a      	ldr	r2, [r3, #8]
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	1ad2      	subs	r2, r2, r3
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	461a      	mov	r2, r3
 800b68a:	6879      	ldr	r1, [r7, #4]
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f001 f8ac 	bl	800c7ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b692:	2300      	movs	r3, #0
 800b694:	2200      	movs	r2, #0
 800b696:	2100      	movs	r1, #0
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f004 fb6b 	bl	800fd74 <USBD_LL_PrepareReceive>
 800b69e:	e03f      	b.n	800b720 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	68da      	ldr	r2, [r3, #12]
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d11c      	bne.n	800b6e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	685a      	ldr	r2, [r3, #4]
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d316      	bcc.n	800b6e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	685a      	ldr	r2, [r3, #4]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d20f      	bcs.n	800b6e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f001 f88d 	bl	800c7ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6d8:	2300      	movs	r3, #0
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2100      	movs	r1, #0
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f004 fb48 	bl	800fd74 <USBD_LL_PrepareReceive>
 800b6e4:	e01c      	b.n	800b720 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d10f      	bne.n	800b712 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d009      	beq.n	800b712 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2200      	movs	r2, #0
 800b702:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b712:	2180      	movs	r1, #128	; 0x80
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f004 fa83 	bl	800fc20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f001 f8b7 	bl	800c88e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d03a      	beq.n	800b7a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f7ff fe42 	bl	800b3b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b738:	e032      	b.n	800b7a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b73a:	7afb      	ldrb	r3, [r7, #11]
 800b73c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b740:	b2db      	uxtb	r3, r3
 800b742:	4619      	mov	r1, r3
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f000 f97f 	bl	800ba48 <USBD_CoreFindEP>
 800b74a:	4603      	mov	r3, r0
 800b74c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
 800b750:	2bff      	cmp	r3, #255	; 0xff
 800b752:	d025      	beq.n	800b7a0 <USBD_LL_DataInStage+0x15a>
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d122      	bne.n	800b7a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b760:	b2db      	uxtb	r3, r3
 800b762:	2b03      	cmp	r3, #3
 800b764:	d11c      	bne.n	800b7a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b766:	7dfa      	ldrb	r2, [r7, #23]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	32ae      	adds	r2, #174	; 0xae
 800b76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b770:	695b      	ldr	r3, [r3, #20]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d014      	beq.n	800b7a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b776:	7dfa      	ldrb	r2, [r7, #23]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b77e:	7dfa      	ldrb	r2, [r7, #23]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	32ae      	adds	r2, #174	; 0xae
 800b784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	7afa      	ldrb	r2, [r7, #11]
 800b78c:	4611      	mov	r1, r2
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	4798      	blx	r3
 800b792:	4603      	mov	r3, r0
 800b794:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b796:	7dbb      	ldrb	r3, [r7, #22]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b79c:	7dbb      	ldrb	r3, [r7, #22]
 800b79e:	e000      	b.n	800b7a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3718      	adds	r7, #24
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d014      	beq.n	800b810 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00e      	beq.n	800b810 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	6852      	ldr	r2, [r2, #4]
 800b7fe:	b2d2      	uxtb	r2, r2
 800b800:	4611      	mov	r1, r2
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	4798      	blx	r3
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d001      	beq.n	800b810 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b80c:	2303      	movs	r3, #3
 800b80e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b810:	2340      	movs	r3, #64	; 0x40
 800b812:	2200      	movs	r2, #0
 800b814:	2100      	movs	r1, #0
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f004 f9bd 	bl	800fb96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2240      	movs	r2, #64	; 0x40
 800b828:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b82c:	2340      	movs	r3, #64	; 0x40
 800b82e:	2200      	movs	r2, #0
 800b830:	2180      	movs	r1, #128	; 0x80
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f004 f9af 	bl	800fb96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2240      	movs	r2, #64	; 0x40
 800b842:	621a      	str	r2, [r3, #32]

  return ret;
 800b844:	7bfb      	ldrb	r3, [r7, #15]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b84e:	b480      	push	{r7}
 800b850:	b083      	sub	sp, #12
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	460b      	mov	r3, r1
 800b858:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	78fa      	ldrb	r2, [r7, #3]
 800b85e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	370c      	adds	r7, #12
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b86e:	b480      	push	{r7}
 800b870:	b083      	sub	sp, #12
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2204      	movs	r2, #4
 800b888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b89a:	b480      	push	{r7}
 800b89c:	b083      	sub	sp, #12
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b04      	cmp	r3, #4
 800b8ac:	d106      	bne.n	800b8bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	370c      	adds	r7, #12
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d110      	bne.n	800b900 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00b      	beq.n	800b900 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ee:	69db      	ldr	r3, [r3, #28]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d005      	beq.n	800b900 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8fa:	69db      	ldr	r3, [r3, #28]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3708      	adds	r7, #8
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b082      	sub	sp, #8
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	460b      	mov	r3, r1
 800b914:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	32ae      	adds	r2, #174	; 0xae
 800b920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d101      	bne.n	800b92c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b928:	2303      	movs	r3, #3
 800b92a:	e01c      	b.n	800b966 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b932:	b2db      	uxtb	r3, r3
 800b934:	2b03      	cmp	r3, #3
 800b936:	d115      	bne.n	800b964 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	32ae      	adds	r2, #174	; 0xae
 800b942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b946:	6a1b      	ldr	r3, [r3, #32]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00b      	beq.n	800b964 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	32ae      	adds	r2, #174	; 0xae
 800b956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95a:	6a1b      	ldr	r3, [r3, #32]
 800b95c:	78fa      	ldrb	r2, [r7, #3]
 800b95e:	4611      	mov	r1, r2
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b082      	sub	sp, #8
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	460b      	mov	r3, r1
 800b978:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	32ae      	adds	r2, #174	; 0xae
 800b984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d101      	bne.n	800b990 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b98c:	2303      	movs	r3, #3
 800b98e:	e01c      	b.n	800b9ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b996:	b2db      	uxtb	r3, r3
 800b998:	2b03      	cmp	r3, #3
 800b99a:	d115      	bne.n	800b9c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	32ae      	adds	r2, #174	; 0xae
 800b9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00b      	beq.n	800b9c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	32ae      	adds	r2, #174	; 0xae
 800b9ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c0:	78fa      	ldrb	r2, [r7, #3]
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9c8:	2300      	movs	r3, #0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b9d2:	b480      	push	{r7}
 800b9d4:	b083      	sub	sp, #12
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00e      	beq.n	800ba24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	6852      	ldr	r2, [r2, #4]
 800ba12:	b2d2      	uxtb	r2, r2
 800ba14:	4611      	mov	r1, r2
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	4798      	blx	r3
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d001      	beq.n	800ba24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ba20:	2303      	movs	r3, #3
 800ba22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b083      	sub	sp, #12
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	460b      	mov	r3, r1
 800ba38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	460b      	mov	r3, r1
 800ba52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b086      	sub	sp, #24
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ba76:	2300      	movs	r3, #0
 800ba78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	885b      	ldrh	r3, [r3, #2]
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d920      	bls.n	800bacc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ba92:	e013      	b.n	800babc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ba94:	f107 030a 	add.w	r3, r7, #10
 800ba98:	4619      	mov	r1, r3
 800ba9a:	6978      	ldr	r0, [r7, #20]
 800ba9c:	f000 f81b 	bl	800bad6 <USBD_GetNextDesc>
 800baa0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	785b      	ldrb	r3, [r3, #1]
 800baa6:	2b05      	cmp	r3, #5
 800baa8:	d108      	bne.n	800babc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	789b      	ldrb	r3, [r3, #2]
 800bab2:	78fa      	ldrb	r2, [r7, #3]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d008      	beq.n	800baca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bab8:	2300      	movs	r3, #0
 800baba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	885b      	ldrh	r3, [r3, #2]
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	897b      	ldrh	r3, [r7, #10]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d8e5      	bhi.n	800ba94 <USBD_GetEpDesc+0x32>
 800bac8:	e000      	b.n	800bacc <USBD_GetEpDesc+0x6a>
          break;
 800baca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bacc:	693b      	ldr	r3, [r7, #16]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3718      	adds	r7, #24
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b085      	sub	sp, #20
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
 800bade:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	881a      	ldrh	r2, [r3, #0]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	b29b      	uxth	r3, r3
 800baee:	4413      	add	r3, r2
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4413      	add	r3, r2
 800bb00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb02:	68fb      	ldr	r3, [r7, #12]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b087      	sub	sp, #28
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	3301      	adds	r3, #1
 800bb26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb2e:	8a3b      	ldrh	r3, [r7, #16]
 800bb30:	021b      	lsls	r3, r3, #8
 800bb32:	b21a      	sxth	r2, r3
 800bb34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	b21b      	sxth	r3, r3
 800bb3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bb3e:	89fb      	ldrh	r3, [r7, #14]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	371c      	adds	r7, #28
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb62:	2b40      	cmp	r3, #64	; 0x40
 800bb64:	d005      	beq.n	800bb72 <USBD_StdDevReq+0x26>
 800bb66:	2b40      	cmp	r3, #64	; 0x40
 800bb68:	d857      	bhi.n	800bc1a <USBD_StdDevReq+0xce>
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00f      	beq.n	800bb8e <USBD_StdDevReq+0x42>
 800bb6e:	2b20      	cmp	r3, #32
 800bb70:	d153      	bne.n	800bc1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	32ae      	adds	r2, #174	; 0xae
 800bb7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	6839      	ldr	r1, [r7, #0]
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	4798      	blx	r3
 800bb88:	4603      	mov	r3, r0
 800bb8a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb8c:	e04a      	b.n	800bc24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	785b      	ldrb	r3, [r3, #1]
 800bb92:	2b09      	cmp	r3, #9
 800bb94:	d83b      	bhi.n	800bc0e <USBD_StdDevReq+0xc2>
 800bb96:	a201      	add	r2, pc, #4	; (adr r2, 800bb9c <USBD_StdDevReq+0x50>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bbf1 	.word	0x0800bbf1
 800bba0:	0800bc05 	.word	0x0800bc05
 800bba4:	0800bc0f 	.word	0x0800bc0f
 800bba8:	0800bbfb 	.word	0x0800bbfb
 800bbac:	0800bc0f 	.word	0x0800bc0f
 800bbb0:	0800bbcf 	.word	0x0800bbcf
 800bbb4:	0800bbc5 	.word	0x0800bbc5
 800bbb8:	0800bc0f 	.word	0x0800bc0f
 800bbbc:	0800bbe7 	.word	0x0800bbe7
 800bbc0:	0800bbd9 	.word	0x0800bbd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fa3c 	bl	800c044 <USBD_GetDescriptor>
          break;
 800bbcc:	e024      	b.n	800bc18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fba1 	bl	800c318 <USBD_SetAddress>
          break;
 800bbd6:	e01f      	b.n	800bc18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bbd8:	6839      	ldr	r1, [r7, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fbe0 	bl	800c3a0 <USBD_SetConfig>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73fb      	strb	r3, [r7, #15]
          break;
 800bbe4:	e018      	b.n	800bc18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fc83 	bl	800c4f4 <USBD_GetConfig>
          break;
 800bbee:	e013      	b.n	800bc18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bbf0:	6839      	ldr	r1, [r7, #0]
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 fcb4 	bl	800c560 <USBD_GetStatus>
          break;
 800bbf8:	e00e      	b.n	800bc18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bbfa:	6839      	ldr	r1, [r7, #0]
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 fce3 	bl	800c5c8 <USBD_SetFeature>
          break;
 800bc02:	e009      	b.n	800bc18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fd07 	bl	800c61a <USBD_ClrFeature>
          break;
 800bc0c:	e004      	b.n	800bc18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bc0e:	6839      	ldr	r1, [r7, #0]
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 fd5e 	bl	800c6d2 <USBD_CtlError>
          break;
 800bc16:	bf00      	nop
      }
      break;
 800bc18:	e004      	b.n	800bc24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bc1a:	6839      	ldr	r1, [r7, #0]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 fd58 	bl	800c6d2 <USBD_CtlError>
      break;
 800bc22:	bf00      	nop
  }

  return ret;
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop

0800bc30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc46:	2b40      	cmp	r3, #64	; 0x40
 800bc48:	d005      	beq.n	800bc56 <USBD_StdItfReq+0x26>
 800bc4a:	2b40      	cmp	r3, #64	; 0x40
 800bc4c:	d852      	bhi.n	800bcf4 <USBD_StdItfReq+0xc4>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d001      	beq.n	800bc56 <USBD_StdItfReq+0x26>
 800bc52:	2b20      	cmp	r3, #32
 800bc54:	d14e      	bne.n	800bcf4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d840      	bhi.n	800bce6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	889b      	ldrh	r3, [r3, #4]
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d836      	bhi.n	800bcdc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	889b      	ldrh	r3, [r3, #4]
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	4619      	mov	r1, r3
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7ff fed9 	bl	800ba2e <USBD_CoreFindIF>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc80:	7bbb      	ldrb	r3, [r7, #14]
 800bc82:	2bff      	cmp	r3, #255	; 0xff
 800bc84:	d01d      	beq.n	800bcc2 <USBD_StdItfReq+0x92>
 800bc86:	7bbb      	ldrb	r3, [r7, #14]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d11a      	bne.n	800bcc2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bc8c:	7bba      	ldrb	r2, [r7, #14]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	32ae      	adds	r2, #174	; 0xae
 800bc92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00f      	beq.n	800bcbc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bc9c:	7bba      	ldrb	r2, [r7, #14]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bca4:	7bba      	ldrb	r2, [r7, #14]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	32ae      	adds	r2, #174	; 0xae
 800bcaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	4798      	blx	r3
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bcba:	e004      	b.n	800bcc6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bcbc:	2303      	movs	r3, #3
 800bcbe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bcc0:	e001      	b.n	800bcc6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	88db      	ldrh	r3, [r3, #6]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d110      	bne.n	800bcf0 <USBD_StdItfReq+0xc0>
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10d      	bne.n	800bcf0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 fdc7 	bl	800c868 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bcda:	e009      	b.n	800bcf0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bcdc:	6839      	ldr	r1, [r7, #0]
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 fcf7 	bl	800c6d2 <USBD_CtlError>
          break;
 800bce4:	e004      	b.n	800bcf0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bce6:	6839      	ldr	r1, [r7, #0]
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fcf2 	bl	800c6d2 <USBD_CtlError>
          break;
 800bcee:	e000      	b.n	800bcf2 <USBD_StdItfReq+0xc2>
          break;
 800bcf0:	bf00      	nop
      }
      break;
 800bcf2:	e004      	b.n	800bcfe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fceb 	bl	800c6d2 <USBD_CtlError>
      break;
 800bcfc:	bf00      	nop
  }

  return ret;
 800bcfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	889b      	ldrh	r3, [r3, #4]
 800bd1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd24:	2b40      	cmp	r3, #64	; 0x40
 800bd26:	d007      	beq.n	800bd38 <USBD_StdEPReq+0x30>
 800bd28:	2b40      	cmp	r3, #64	; 0x40
 800bd2a:	f200 817f 	bhi.w	800c02c <USBD_StdEPReq+0x324>
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d02a      	beq.n	800bd88 <USBD_StdEPReq+0x80>
 800bd32:	2b20      	cmp	r3, #32
 800bd34:	f040 817a 	bne.w	800c02c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd38:	7bbb      	ldrb	r3, [r7, #14]
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7ff fe83 	bl	800ba48 <USBD_CoreFindEP>
 800bd42:	4603      	mov	r3, r0
 800bd44:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd46:	7b7b      	ldrb	r3, [r7, #13]
 800bd48:	2bff      	cmp	r3, #255	; 0xff
 800bd4a:	f000 8174 	beq.w	800c036 <USBD_StdEPReq+0x32e>
 800bd4e:	7b7b      	ldrb	r3, [r7, #13]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	f040 8170 	bne.w	800c036 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bd56:	7b7a      	ldrb	r2, [r7, #13]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bd5e:	7b7a      	ldrb	r2, [r7, #13]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	32ae      	adds	r2, #174	; 0xae
 800bd64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 8163 	beq.w	800c036 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bd70:	7b7a      	ldrb	r2, [r7, #13]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	32ae      	adds	r2, #174	; 0xae
 800bd76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	6839      	ldr	r1, [r7, #0]
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	4798      	blx	r3
 800bd82:	4603      	mov	r3, r0
 800bd84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bd86:	e156      	b.n	800c036 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	785b      	ldrb	r3, [r3, #1]
 800bd8c:	2b03      	cmp	r3, #3
 800bd8e:	d008      	beq.n	800bda2 <USBD_StdEPReq+0x9a>
 800bd90:	2b03      	cmp	r3, #3
 800bd92:	f300 8145 	bgt.w	800c020 <USBD_StdEPReq+0x318>
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f000 809b 	beq.w	800bed2 <USBD_StdEPReq+0x1ca>
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d03c      	beq.n	800be1a <USBD_StdEPReq+0x112>
 800bda0:	e13e      	b.n	800c020 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	d002      	beq.n	800bdb4 <USBD_StdEPReq+0xac>
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	d016      	beq.n	800bde0 <USBD_StdEPReq+0xd8>
 800bdb2:	e02c      	b.n	800be0e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdb4:	7bbb      	ldrb	r3, [r7, #14]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00d      	beq.n	800bdd6 <USBD_StdEPReq+0xce>
 800bdba:	7bbb      	ldrb	r3, [r7, #14]
 800bdbc:	2b80      	cmp	r3, #128	; 0x80
 800bdbe:	d00a      	beq.n	800bdd6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdc0:	7bbb      	ldrb	r3, [r7, #14]
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f003 ff2b 	bl	800fc20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdca:	2180      	movs	r1, #128	; 0x80
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f003 ff27 	bl	800fc20 <USBD_LL_StallEP>
 800bdd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bdd4:	e020      	b.n	800be18 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bdd6:	6839      	ldr	r1, [r7, #0]
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fc7a 	bl	800c6d2 <USBD_CtlError>
              break;
 800bdde:	e01b      	b.n	800be18 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	885b      	ldrh	r3, [r3, #2]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10e      	bne.n	800be06 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bde8:	7bbb      	ldrb	r3, [r7, #14]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00b      	beq.n	800be06 <USBD_StdEPReq+0xfe>
 800bdee:	7bbb      	ldrb	r3, [r7, #14]
 800bdf0:	2b80      	cmp	r3, #128	; 0x80
 800bdf2:	d008      	beq.n	800be06 <USBD_StdEPReq+0xfe>
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	88db      	ldrh	r3, [r3, #6]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d104      	bne.n	800be06 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdfc:	7bbb      	ldrb	r3, [r7, #14]
 800bdfe:	4619      	mov	r1, r3
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f003 ff0d 	bl	800fc20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fd2e 	bl	800c868 <USBD_CtlSendStatus>

              break;
 800be0c:	e004      	b.n	800be18 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 fc5e 	bl	800c6d2 <USBD_CtlError>
              break;
 800be16:	bf00      	nop
          }
          break;
 800be18:	e107      	b.n	800c02a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be20:	b2db      	uxtb	r3, r3
 800be22:	2b02      	cmp	r3, #2
 800be24:	d002      	beq.n	800be2c <USBD_StdEPReq+0x124>
 800be26:	2b03      	cmp	r3, #3
 800be28:	d016      	beq.n	800be58 <USBD_StdEPReq+0x150>
 800be2a:	e04b      	b.n	800bec4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be2c:	7bbb      	ldrb	r3, [r7, #14]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00d      	beq.n	800be4e <USBD_StdEPReq+0x146>
 800be32:	7bbb      	ldrb	r3, [r7, #14]
 800be34:	2b80      	cmp	r3, #128	; 0x80
 800be36:	d00a      	beq.n	800be4e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be38:	7bbb      	ldrb	r3, [r7, #14]
 800be3a:	4619      	mov	r1, r3
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f003 feef 	bl	800fc20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be42:	2180      	movs	r1, #128	; 0x80
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f003 feeb 	bl	800fc20 <USBD_LL_StallEP>
 800be4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be4c:	e040      	b.n	800bed0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fc3e 	bl	800c6d2 <USBD_CtlError>
              break;
 800be56:	e03b      	b.n	800bed0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	885b      	ldrh	r3, [r3, #2]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d136      	bne.n	800bece <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800be60:	7bbb      	ldrb	r3, [r7, #14]
 800be62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be66:	2b00      	cmp	r3, #0
 800be68:	d004      	beq.n	800be74 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800be6a:	7bbb      	ldrb	r3, [r7, #14]
 800be6c:	4619      	mov	r1, r3
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f003 fef5 	bl	800fc5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 fcf7 	bl	800c868 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800be7a:	7bbb      	ldrb	r3, [r7, #14]
 800be7c:	4619      	mov	r1, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f7ff fde2 	bl	800ba48 <USBD_CoreFindEP>
 800be84:	4603      	mov	r3, r0
 800be86:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be88:	7b7b      	ldrb	r3, [r7, #13]
 800be8a:	2bff      	cmp	r3, #255	; 0xff
 800be8c:	d01f      	beq.n	800bece <USBD_StdEPReq+0x1c6>
 800be8e:	7b7b      	ldrb	r3, [r7, #13]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d11c      	bne.n	800bece <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800be94:	7b7a      	ldrb	r2, [r7, #13]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800be9c:	7b7a      	ldrb	r2, [r7, #13]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	32ae      	adds	r2, #174	; 0xae
 800bea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d010      	beq.n	800bece <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800beac:	7b7a      	ldrb	r2, [r7, #13]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	32ae      	adds	r2, #174	; 0xae
 800beb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	6839      	ldr	r1, [r7, #0]
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	4798      	blx	r3
 800bebe:	4603      	mov	r3, r0
 800bec0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bec2:	e004      	b.n	800bece <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fc03 	bl	800c6d2 <USBD_CtlError>
              break;
 800becc:	e000      	b.n	800bed0 <USBD_StdEPReq+0x1c8>
              break;
 800bece:	bf00      	nop
          }
          break;
 800bed0:	e0ab      	b.n	800c02a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d002      	beq.n	800bee4 <USBD_StdEPReq+0x1dc>
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d032      	beq.n	800bf48 <USBD_StdEPReq+0x240>
 800bee2:	e097      	b.n	800c014 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bee4:	7bbb      	ldrb	r3, [r7, #14]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d007      	beq.n	800befa <USBD_StdEPReq+0x1f2>
 800beea:	7bbb      	ldrb	r3, [r7, #14]
 800beec:	2b80      	cmp	r3, #128	; 0x80
 800beee:	d004      	beq.n	800befa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bef0:	6839      	ldr	r1, [r7, #0]
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 fbed 	bl	800c6d2 <USBD_CtlError>
                break;
 800bef8:	e091      	b.n	800c01e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800befa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	da0b      	bge.n	800bf1a <USBD_StdEPReq+0x212>
 800bf02:	7bbb      	ldrb	r3, [r7, #14]
 800bf04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf08:	4613      	mov	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4413      	add	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	3310      	adds	r3, #16
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	4413      	add	r3, r2
 800bf16:	3304      	adds	r3, #4
 800bf18:	e00b      	b.n	800bf32 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf1a:	7bbb      	ldrb	r3, [r7, #14]
 800bf1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf20:	4613      	mov	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	4413      	add	r3, r2
 800bf30:	3304      	adds	r3, #4
 800bf32:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	2200      	movs	r2, #0
 800bf38:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	2202      	movs	r2, #2
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 fc37 	bl	800c7b4 <USBD_CtlSendData>
              break;
 800bf46:	e06a      	b.n	800c01e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bf48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	da11      	bge.n	800bf74 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	f003 020f 	and.w	r2, r3, #15
 800bf56:	6879      	ldr	r1, [r7, #4]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	440b      	add	r3, r1
 800bf62:	3324      	adds	r3, #36	; 0x24
 800bf64:	881b      	ldrh	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d117      	bne.n	800bf9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bf6a:	6839      	ldr	r1, [r7, #0]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fbb0 	bl	800c6d2 <USBD_CtlError>
                  break;
 800bf72:	e054      	b.n	800c01e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bf74:	7bbb      	ldrb	r3, [r7, #14]
 800bf76:	f003 020f 	and.w	r2, r3, #15
 800bf7a:	6879      	ldr	r1, [r7, #4]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4413      	add	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	440b      	add	r3, r1
 800bf86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d104      	bne.n	800bf9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bf90:	6839      	ldr	r1, [r7, #0]
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 fb9d 	bl	800c6d2 <USBD_CtlError>
                  break;
 800bf98:	e041      	b.n	800c01e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	da0b      	bge.n	800bfba <USBD_StdEPReq+0x2b2>
 800bfa2:	7bbb      	ldrb	r3, [r7, #14]
 800bfa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	4413      	add	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	3310      	adds	r3, #16
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	e00b      	b.n	800bfd2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bfba:	7bbb      	ldrb	r3, [r7, #14]
 800bfbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4413      	add	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	4413      	add	r3, r2
 800bfd0:	3304      	adds	r3, #4
 800bfd2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d002      	beq.n	800bfe0 <USBD_StdEPReq+0x2d8>
 800bfda:	7bbb      	ldrb	r3, [r7, #14]
 800bfdc:	2b80      	cmp	r3, #128	; 0x80
 800bfde:	d103      	bne.n	800bfe8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	e00e      	b.n	800c006 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bfe8:	7bbb      	ldrb	r3, [r7, #14]
 800bfea:	4619      	mov	r1, r3
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f003 fe55 	bl	800fc9c <USBD_LL_IsStallEP>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d003      	beq.n	800c000 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	2201      	movs	r2, #1
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	e002      	b.n	800c006 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2200      	movs	r2, #0
 800c004:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	2202      	movs	r2, #2
 800c00a:	4619      	mov	r1, r3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 fbd1 	bl	800c7b4 <USBD_CtlSendData>
              break;
 800c012:	e004      	b.n	800c01e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c014:	6839      	ldr	r1, [r7, #0]
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fb5b 	bl	800c6d2 <USBD_CtlError>
              break;
 800c01c:	bf00      	nop
          }
          break;
 800c01e:	e004      	b.n	800c02a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fb55 	bl	800c6d2 <USBD_CtlError>
          break;
 800c028:	bf00      	nop
      }
      break;
 800c02a:	e005      	b.n	800c038 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fb4f 	bl	800c6d2 <USBD_CtlError>
      break;
 800c034:	e000      	b.n	800c038 <USBD_StdEPReq+0x330>
      break;
 800c036:	bf00      	nop
  }

  return ret;
 800c038:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
	...

0800c044 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c04e:	2300      	movs	r3, #0
 800c050:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c052:	2300      	movs	r3, #0
 800c054:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c056:	2300      	movs	r3, #0
 800c058:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	885b      	ldrh	r3, [r3, #2]
 800c05e:	0a1b      	lsrs	r3, r3, #8
 800c060:	b29b      	uxth	r3, r3
 800c062:	3b01      	subs	r3, #1
 800c064:	2b06      	cmp	r3, #6
 800c066:	f200 8128 	bhi.w	800c2ba <USBD_GetDescriptor+0x276>
 800c06a:	a201      	add	r2, pc, #4	; (adr r2, 800c070 <USBD_GetDescriptor+0x2c>)
 800c06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c070:	0800c08d 	.word	0x0800c08d
 800c074:	0800c0a5 	.word	0x0800c0a5
 800c078:	0800c0e5 	.word	0x0800c0e5
 800c07c:	0800c2bb 	.word	0x0800c2bb
 800c080:	0800c2bb 	.word	0x0800c2bb
 800c084:	0800c25b 	.word	0x0800c25b
 800c088:	0800c287 	.word	0x0800c287
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	7c12      	ldrb	r2, [r2, #16]
 800c098:	f107 0108 	add.w	r1, r7, #8
 800c09c:	4610      	mov	r0, r2
 800c09e:	4798      	blx	r3
 800c0a0:	60f8      	str	r0, [r7, #12]
      break;
 800c0a2:	e112      	b.n	800c2ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	7c1b      	ldrb	r3, [r3, #16]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10d      	bne.n	800c0c8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b4:	f107 0208 	add.w	r2, r7, #8
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	4798      	blx	r3
 800c0bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c0c6:	e100      	b.n	800c2ca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d0:	f107 0208 	add.w	r2, r7, #8
 800c0d4:	4610      	mov	r0, r2
 800c0d6:	4798      	blx	r3
 800c0d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	2202      	movs	r2, #2
 800c0e0:	701a      	strb	r2, [r3, #0]
      break;
 800c0e2:	e0f2      	b.n	800c2ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	885b      	ldrh	r3, [r3, #2]
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b05      	cmp	r3, #5
 800c0ec:	f200 80ac 	bhi.w	800c248 <USBD_GetDescriptor+0x204>
 800c0f0:	a201      	add	r2, pc, #4	; (adr r2, 800c0f8 <USBD_GetDescriptor+0xb4>)
 800c0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f6:	bf00      	nop
 800c0f8:	0800c111 	.word	0x0800c111
 800c0fc:	0800c145 	.word	0x0800c145
 800c100:	0800c179 	.word	0x0800c179
 800c104:	0800c1ad 	.word	0x0800c1ad
 800c108:	0800c1e1 	.word	0x0800c1e1
 800c10c:	0800c215 	.word	0x0800c215
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00b      	beq.n	800c134 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	7c12      	ldrb	r2, [r2, #16]
 800c128:	f107 0108 	add.w	r1, r7, #8
 800c12c:	4610      	mov	r0, r2
 800c12e:	4798      	blx	r3
 800c130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c132:	e091      	b.n	800c258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 facb 	bl	800c6d2 <USBD_CtlError>
            err++;
 800c13c:	7afb      	ldrb	r3, [r7, #11]
 800c13e:	3301      	adds	r3, #1
 800c140:	72fb      	strb	r3, [r7, #11]
          break;
 800c142:	e089      	b.n	800c258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00b      	beq.n	800c168 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	7c12      	ldrb	r2, [r2, #16]
 800c15c:	f107 0108 	add.w	r1, r7, #8
 800c160:	4610      	mov	r0, r2
 800c162:	4798      	blx	r3
 800c164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c166:	e077      	b.n	800c258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fab1 	bl	800c6d2 <USBD_CtlError>
            err++;
 800c170:	7afb      	ldrb	r3, [r7, #11]
 800c172:	3301      	adds	r3, #1
 800c174:	72fb      	strb	r3, [r7, #11]
          break;
 800c176:	e06f      	b.n	800c258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00b      	beq.n	800c19c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	7c12      	ldrb	r2, [r2, #16]
 800c190:	f107 0108 	add.w	r1, r7, #8
 800c194:	4610      	mov	r0, r2
 800c196:	4798      	blx	r3
 800c198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c19a:	e05d      	b.n	800c258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fa97 	bl	800c6d2 <USBD_CtlError>
            err++;
 800c1a4:	7afb      	ldrb	r3, [r7, #11]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c1aa:	e055      	b.n	800c258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00b      	beq.n	800c1d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	7c12      	ldrb	r2, [r2, #16]
 800c1c4:	f107 0108 	add.w	r1, r7, #8
 800c1c8:	4610      	mov	r0, r2
 800c1ca:	4798      	blx	r3
 800c1cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1ce:	e043      	b.n	800c258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1d0:	6839      	ldr	r1, [r7, #0]
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fa7d 	bl	800c6d2 <USBD_CtlError>
            err++;
 800c1d8:	7afb      	ldrb	r3, [r7, #11]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c1de:	e03b      	b.n	800c258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1e6:	695b      	ldr	r3, [r3, #20]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00b      	beq.n	800c204 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	7c12      	ldrb	r2, [r2, #16]
 800c1f8:	f107 0108 	add.w	r1, r7, #8
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	4798      	blx	r3
 800c200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c202:	e029      	b.n	800c258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fa63 	bl	800c6d2 <USBD_CtlError>
            err++;
 800c20c:	7afb      	ldrb	r3, [r7, #11]
 800c20e:	3301      	adds	r3, #1
 800c210:	72fb      	strb	r3, [r7, #11]
          break;
 800c212:	e021      	b.n	800c258 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c21a:	699b      	ldr	r3, [r3, #24]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00b      	beq.n	800c238 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c226:	699b      	ldr	r3, [r3, #24]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	7c12      	ldrb	r2, [r2, #16]
 800c22c:	f107 0108 	add.w	r1, r7, #8
 800c230:	4610      	mov	r0, r2
 800c232:	4798      	blx	r3
 800c234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c236:	e00f      	b.n	800c258 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fa49 	bl	800c6d2 <USBD_CtlError>
            err++;
 800c240:	7afb      	ldrb	r3, [r7, #11]
 800c242:	3301      	adds	r3, #1
 800c244:	72fb      	strb	r3, [r7, #11]
          break;
 800c246:	e007      	b.n	800c258 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c248:	6839      	ldr	r1, [r7, #0]
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 fa41 	bl	800c6d2 <USBD_CtlError>
          err++;
 800c250:	7afb      	ldrb	r3, [r7, #11]
 800c252:	3301      	adds	r3, #1
 800c254:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c256:	bf00      	nop
      }
      break;
 800c258:	e037      	b.n	800c2ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	7c1b      	ldrb	r3, [r3, #16]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d109      	bne.n	800c276 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c26a:	f107 0208 	add.w	r2, r7, #8
 800c26e:	4610      	mov	r0, r2
 800c270:	4798      	blx	r3
 800c272:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c274:	e029      	b.n	800c2ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fa2a 	bl	800c6d2 <USBD_CtlError>
        err++;
 800c27e:	7afb      	ldrb	r3, [r7, #11]
 800c280:	3301      	adds	r3, #1
 800c282:	72fb      	strb	r3, [r7, #11]
      break;
 800c284:	e021      	b.n	800c2ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	7c1b      	ldrb	r3, [r3, #16]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10d      	bne.n	800c2aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c296:	f107 0208 	add.w	r2, r7, #8
 800c29a:	4610      	mov	r0, r2
 800c29c:	4798      	blx	r3
 800c29e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	2207      	movs	r2, #7
 800c2a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2a8:	e00f      	b.n	800c2ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c2aa:	6839      	ldr	r1, [r7, #0]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 fa10 	bl	800c6d2 <USBD_CtlError>
        err++;
 800c2b2:	7afb      	ldrb	r3, [r7, #11]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	72fb      	strb	r3, [r7, #11]
      break;
 800c2b8:	e007      	b.n	800c2ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c2ba:	6839      	ldr	r1, [r7, #0]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 fa08 	bl	800c6d2 <USBD_CtlError>
      err++;
 800c2c2:	7afb      	ldrb	r3, [r7, #11]
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c2c8:	bf00      	nop
  }

  if (err != 0U)
 800c2ca:	7afb      	ldrb	r3, [r7, #11]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d11e      	bne.n	800c30e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	88db      	ldrh	r3, [r3, #6]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d016      	beq.n	800c306 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c2d8:	893b      	ldrh	r3, [r7, #8]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00e      	beq.n	800c2fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	88da      	ldrh	r2, [r3, #6]
 800c2e2:	893b      	ldrh	r3, [r7, #8]
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	bf28      	it	cs
 800c2e8:	4613      	movcs	r3, r2
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c2ee:	893b      	ldrh	r3, [r7, #8]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	68f9      	ldr	r1, [r7, #12]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fa5d 	bl	800c7b4 <USBD_CtlSendData>
 800c2fa:	e009      	b.n	800c310 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f9e7 	bl	800c6d2 <USBD_CtlError>
 800c304:	e004      	b.n	800c310 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 faae 	bl	800c868 <USBD_CtlSendStatus>
 800c30c:	e000      	b.n	800c310 <USBD_GetDescriptor+0x2cc>
    return;
 800c30e:	bf00      	nop
  }
}
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop

0800c318 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	889b      	ldrh	r3, [r3, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d131      	bne.n	800c38e <USBD_SetAddress+0x76>
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	88db      	ldrh	r3, [r3, #6]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d12d      	bne.n	800c38e <USBD_SetAddress+0x76>
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	885b      	ldrh	r3, [r3, #2]
 800c336:	2b7f      	cmp	r3, #127	; 0x7f
 800c338:	d829      	bhi.n	800c38e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	885b      	ldrh	r3, [r3, #2]
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c344:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	2b03      	cmp	r3, #3
 800c350:	d104      	bne.n	800c35c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f9bc 	bl	800c6d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c35a:	e01d      	b.n	800c398 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	7bfa      	ldrb	r2, [r7, #15]
 800c360:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c364:	7bfb      	ldrb	r3, [r7, #15]
 800c366:	4619      	mov	r1, r3
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f003 fcc3 	bl	800fcf4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fa7a 	bl	800c868 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c374:	7bfb      	ldrb	r3, [r7, #15]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d004      	beq.n	800c384 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2202      	movs	r2, #2
 800c37e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c382:	e009      	b.n	800c398 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c38c:	e004      	b.n	800c398 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c38e:	6839      	ldr	r1, [r7, #0]
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 f99e 	bl	800c6d2 <USBD_CtlError>
  }
}
 800c396:	bf00      	nop
 800c398:	bf00      	nop
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	885b      	ldrh	r3, [r3, #2]
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	4b4e      	ldr	r3, [pc, #312]	; (800c4f0 <USBD_SetConfig+0x150>)
 800c3b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c3b8:	4b4d      	ldr	r3, [pc, #308]	; (800c4f0 <USBD_SetConfig+0x150>)
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d905      	bls.n	800c3cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c3c0:	6839      	ldr	r1, [r7, #0]
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 f985 	bl	800c6d2 <USBD_CtlError>
    return USBD_FAIL;
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	e08c      	b.n	800c4e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d002      	beq.n	800c3de <USBD_SetConfig+0x3e>
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d029      	beq.n	800c430 <USBD_SetConfig+0x90>
 800c3dc:	e075      	b.n	800c4ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c3de:	4b44      	ldr	r3, [pc, #272]	; (800c4f0 <USBD_SetConfig+0x150>)
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d020      	beq.n	800c428 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c3e6:	4b42      	ldr	r3, [pc, #264]	; (800c4f0 <USBD_SetConfig+0x150>)
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3f0:	4b3f      	ldr	r3, [pc, #252]	; (800c4f0 <USBD_SetConfig+0x150>)
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7fe ffe7 	bl	800b3ca <USBD_SetClassConfig>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c400:	7bfb      	ldrb	r3, [r7, #15]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d008      	beq.n	800c418 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 f962 	bl	800c6d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2202      	movs	r2, #2
 800c412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c416:	e065      	b.n	800c4e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fa25 	bl	800c868 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2203      	movs	r2, #3
 800c422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c426:	e05d      	b.n	800c4e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 fa1d 	bl	800c868 <USBD_CtlSendStatus>
      break;
 800c42e:	e059      	b.n	800c4e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c430:	4b2f      	ldr	r3, [pc, #188]	; (800c4f0 <USBD_SetConfig+0x150>)
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d112      	bne.n	800c45e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2202      	movs	r2, #2
 800c43c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c440:	4b2b      	ldr	r3, [pc, #172]	; (800c4f0 <USBD_SetConfig+0x150>)
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	461a      	mov	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c44a:	4b29      	ldr	r3, [pc, #164]	; (800c4f0 <USBD_SetConfig+0x150>)
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	4619      	mov	r1, r3
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7fe ffd6 	bl	800b402 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fa06 	bl	800c868 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c45c:	e042      	b.n	800c4e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c45e:	4b24      	ldr	r3, [pc, #144]	; (800c4f0 <USBD_SetConfig+0x150>)
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	461a      	mov	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d02a      	beq.n	800c4c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	b2db      	uxtb	r3, r3
 800c472:	4619      	mov	r1, r3
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f7fe ffc4 	bl	800b402 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c47a:	4b1d      	ldr	r3, [pc, #116]	; (800c4f0 <USBD_SetConfig+0x150>)
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	461a      	mov	r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c484:	4b1a      	ldr	r3, [pc, #104]	; (800c4f0 <USBD_SetConfig+0x150>)
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7fe ff9d 	bl	800b3ca <USBD_SetClassConfig>
 800c490:	4603      	mov	r3, r0
 800c492:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c494:	7bfb      	ldrb	r3, [r7, #15]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00f      	beq.n	800c4ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f918 	bl	800c6d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7fe ffa9 	bl	800b402 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c4b8:	e014      	b.n	800c4e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f9d4 	bl	800c868 <USBD_CtlSendStatus>
      break;
 800c4c0:	e010      	b.n	800c4e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f9d0 	bl	800c868 <USBD_CtlSendStatus>
      break;
 800c4c8:	e00c      	b.n	800c4e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c4ca:	6839      	ldr	r1, [r7, #0]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 f900 	bl	800c6d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4d2:	4b07      	ldr	r3, [pc, #28]	; (800c4f0 <USBD_SetConfig+0x150>)
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f7fe ff92 	bl	800b402 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c4de:	2303      	movs	r3, #3
 800c4e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c4e2:	bf00      	nop
  }

  return ret;
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	20011830 	.word	0x20011830

0800c4f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	88db      	ldrh	r3, [r3, #6]
 800c502:	2b01      	cmp	r3, #1
 800c504:	d004      	beq.n	800c510 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 f8e2 	bl	800c6d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c50e:	e023      	b.n	800c558 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c516:	b2db      	uxtb	r3, r3
 800c518:	2b02      	cmp	r3, #2
 800c51a:	dc02      	bgt.n	800c522 <USBD_GetConfig+0x2e>
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	dc03      	bgt.n	800c528 <USBD_GetConfig+0x34>
 800c520:	e015      	b.n	800c54e <USBD_GetConfig+0x5a>
 800c522:	2b03      	cmp	r3, #3
 800c524:	d00b      	beq.n	800c53e <USBD_GetConfig+0x4a>
 800c526:	e012      	b.n	800c54e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	3308      	adds	r3, #8
 800c532:	2201      	movs	r2, #1
 800c534:	4619      	mov	r1, r3
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 f93c 	bl	800c7b4 <USBD_CtlSendData>
        break;
 800c53c:	e00c      	b.n	800c558 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	3304      	adds	r3, #4
 800c542:	2201      	movs	r2, #1
 800c544:	4619      	mov	r1, r3
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f934 	bl	800c7b4 <USBD_CtlSendData>
        break;
 800c54c:	e004      	b.n	800c558 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c54e:	6839      	ldr	r1, [r7, #0]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 f8be 	bl	800c6d2 <USBD_CtlError>
        break;
 800c556:	bf00      	nop
}
 800c558:	bf00      	nop
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c570:	b2db      	uxtb	r3, r3
 800c572:	3b01      	subs	r3, #1
 800c574:	2b02      	cmp	r3, #2
 800c576:	d81e      	bhi.n	800c5b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	88db      	ldrh	r3, [r3, #6]
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	d004      	beq.n	800c58a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c580:	6839      	ldr	r1, [r7, #0]
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 f8a5 	bl	800c6d2 <USBD_CtlError>
        break;
 800c588:	e01a      	b.n	800c5c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c596:	2b00      	cmp	r3, #0
 800c598:	d005      	beq.n	800c5a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	f043 0202 	orr.w	r2, r3, #2
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	330c      	adds	r3, #12
 800c5aa:	2202      	movs	r2, #2
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 f900 	bl	800c7b4 <USBD_CtlSendData>
      break;
 800c5b4:	e004      	b.n	800c5c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c5b6:	6839      	ldr	r1, [r7, #0]
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 f88a 	bl	800c6d2 <USBD_CtlError>
      break;
 800c5be:	bf00      	nop
  }
}
 800c5c0:	bf00      	nop
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	885b      	ldrh	r3, [r3, #2]
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d107      	bne.n	800c5ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 f940 	bl	800c868 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c5e8:	e013      	b.n	800c612 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	885b      	ldrh	r3, [r3, #2]
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	d10b      	bne.n	800c60a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	889b      	ldrh	r3, [r3, #4]
 800c5f6:	0a1b      	lsrs	r3, r3, #8
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	b2da      	uxtb	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 f930 	bl	800c868 <USBD_CtlSendStatus>
}
 800c608:	e003      	b.n	800c612 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c60a:	6839      	ldr	r1, [r7, #0]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 f860 	bl	800c6d2 <USBD_CtlError>
}
 800c612:	bf00      	nop
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b082      	sub	sp, #8
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	3b01      	subs	r3, #1
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d80b      	bhi.n	800c64a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	885b      	ldrh	r3, [r3, #2]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d10c      	bne.n	800c654 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 f910 	bl	800c868 <USBD_CtlSendStatus>
      }
      break;
 800c648:	e004      	b.n	800c654 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c64a:	6839      	ldr	r1, [r7, #0]
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 f840 	bl	800c6d2 <USBD_CtlError>
      break;
 800c652:	e000      	b.n	800c656 <USBD_ClrFeature+0x3c>
      break;
 800c654:	bf00      	nop
  }
}
 800c656:	bf00      	nop
 800c658:	3708      	adds	r7, #8
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b084      	sub	sp, #16
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
 800c666:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	781a      	ldrb	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	3301      	adds	r3, #1
 800c678:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	781a      	ldrb	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	3301      	adds	r3, #1
 800c686:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c688:	68f8      	ldr	r0, [r7, #12]
 800c68a:	f7ff fa41 	bl	800bb10 <SWAPBYTE>
 800c68e:	4603      	mov	r3, r0
 800c690:	461a      	mov	r2, r3
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	3301      	adds	r3, #1
 800c69a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	f7ff fa34 	bl	800bb10 <SWAPBYTE>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f7ff fa27 	bl	800bb10 <SWAPBYTE>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	80da      	strh	r2, [r3, #6]
}
 800c6ca:	bf00      	nop
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b082      	sub	sp, #8
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6dc:	2180      	movs	r1, #128	; 0x80
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f003 fa9e 	bl	800fc20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f003 fa9a 	bl	800fc20 <USBD_LL_StallEP>
}
 800c6ec:	bf00      	nop
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c700:	2300      	movs	r3, #0
 800c702:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d036      	beq.n	800c778 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c70e:	6938      	ldr	r0, [r7, #16]
 800c710:	f000 f836 	bl	800c780 <USBD_GetLen>
 800c714:	4603      	mov	r3, r0
 800c716:	3301      	adds	r3, #1
 800c718:	b29b      	uxth	r3, r3
 800c71a:	005b      	lsls	r3, r3, #1
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c722:	7dfb      	ldrb	r3, [r7, #23]
 800c724:	68ba      	ldr	r2, [r7, #8]
 800c726:	4413      	add	r3, r2
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	7812      	ldrb	r2, [r2, #0]
 800c72c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c72e:	7dfb      	ldrb	r3, [r7, #23]
 800c730:	3301      	adds	r3, #1
 800c732:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c734:	7dfb      	ldrb	r3, [r7, #23]
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	4413      	add	r3, r2
 800c73a:	2203      	movs	r2, #3
 800c73c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c73e:	7dfb      	ldrb	r3, [r7, #23]
 800c740:	3301      	adds	r3, #1
 800c742:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c744:	e013      	b.n	800c76e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c746:	7dfb      	ldrb	r3, [r7, #23]
 800c748:	68ba      	ldr	r2, [r7, #8]
 800c74a:	4413      	add	r3, r2
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	7812      	ldrb	r2, [r2, #0]
 800c750:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	3301      	adds	r3, #1
 800c756:	613b      	str	r3, [r7, #16]
    idx++;
 800c758:	7dfb      	ldrb	r3, [r7, #23]
 800c75a:	3301      	adds	r3, #1
 800c75c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c75e:	7dfb      	ldrb	r3, [r7, #23]
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	4413      	add	r3, r2
 800c764:	2200      	movs	r2, #0
 800c766:	701a      	strb	r2, [r3, #0]
    idx++;
 800c768:	7dfb      	ldrb	r3, [r7, #23]
 800c76a:	3301      	adds	r3, #1
 800c76c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d1e7      	bne.n	800c746 <USBD_GetString+0x52>
 800c776:	e000      	b.n	800c77a <USBD_GetString+0x86>
    return;
 800c778:	bf00      	nop
  }
}
 800c77a:	3718      	adds	r7, #24
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c788:	2300      	movs	r3, #0
 800c78a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c790:	e005      	b.n	800c79e <USBD_GetLen+0x1e>
  {
    len++;
 800c792:	7bfb      	ldrb	r3, [r7, #15]
 800c794:	3301      	adds	r3, #1
 800c796:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	3301      	adds	r3, #1
 800c79c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1f5      	bne.n	800c792 <USBD_GetLen+0x12>
  }

  return len;
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3714      	adds	r7, #20
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2202      	movs	r2, #2
 800c7c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	68ba      	ldr	r2, [r7, #8]
 800c7d8:	2100      	movs	r1, #0
 800c7da:	68f8      	ldr	r0, [r7, #12]
 800c7dc:	f003 faa9 	bl	800fd32 <USBD_LL_Transmit>

  return USBD_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b084      	sub	sp, #16
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	60f8      	str	r0, [r7, #12]
 800c7f2:	60b9      	str	r1, [r7, #8]
 800c7f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f003 fa98 	bl	800fd32 <USBD_LL_Transmit>

  return USBD_OK;
 800c802:	2300      	movs	r3, #0
}
 800c804:	4618      	mov	r0, r3
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2203      	movs	r2, #3
 800c81c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	2100      	movs	r1, #0
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f003 fa9c 	bl	800fd74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b084      	sub	sp, #16
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	60f8      	str	r0, [r7, #12]
 800c84e:	60b9      	str	r1, [r7, #8]
 800c850:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	2100      	movs	r1, #0
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f003 fa8b 	bl	800fd74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c85e:	2300      	movs	r3, #0
}
 800c860:	4618      	mov	r0, r3
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2204      	movs	r2, #4
 800c874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c878:	2300      	movs	r3, #0
 800c87a:	2200      	movs	r2, #0
 800c87c:	2100      	movs	r1, #0
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f003 fa57 	bl	800fd32 <USBD_LL_Transmit>

  return USBD_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b082      	sub	sp, #8
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2205      	movs	r2, #5
 800c89a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c89e:	2300      	movs	r3, #0
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f003 fa65 	bl	800fd74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3708      	adds	r7, #8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <__NVIC_SetPriority>:
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	6039      	str	r1, [r7, #0]
 800c8be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c8c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	db0a      	blt.n	800c8de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	490c      	ldr	r1, [pc, #48]	; (800c900 <__NVIC_SetPriority+0x4c>)
 800c8ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8d2:	0112      	lsls	r2, r2, #4
 800c8d4:	b2d2      	uxtb	r2, r2
 800c8d6:	440b      	add	r3, r1
 800c8d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c8dc:	e00a      	b.n	800c8f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	4908      	ldr	r1, [pc, #32]	; (800c904 <__NVIC_SetPriority+0x50>)
 800c8e4:	79fb      	ldrb	r3, [r7, #7]
 800c8e6:	f003 030f 	and.w	r3, r3, #15
 800c8ea:	3b04      	subs	r3, #4
 800c8ec:	0112      	lsls	r2, r2, #4
 800c8ee:	b2d2      	uxtb	r2, r2
 800c8f0:	440b      	add	r3, r1
 800c8f2:	761a      	strb	r2, [r3, #24]
}
 800c8f4:	bf00      	nop
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr
 800c900:	e000e100 	.word	0xe000e100
 800c904:	e000ed00 	.word	0xe000ed00

0800c908 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c908:	b580      	push	{r7, lr}
 800c90a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c90c:	4b05      	ldr	r3, [pc, #20]	; (800c924 <SysTick_Handler+0x1c>)
 800c90e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c910:	f001 fd4e 	bl	800e3b0 <xTaskGetSchedulerState>
 800c914:	4603      	mov	r3, r0
 800c916:	2b01      	cmp	r3, #1
 800c918:	d001      	beq.n	800c91e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c91a:	f002 fb35 	bl	800ef88 <xPortSysTickHandler>
  }
}
 800c91e:	bf00      	nop
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	e000e010 	.word	0xe000e010

0800c928 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c928:	b580      	push	{r7, lr}
 800c92a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c92c:	2100      	movs	r1, #0
 800c92e:	f06f 0004 	mvn.w	r0, #4
 800c932:	f7ff ffbf 	bl	800c8b4 <__NVIC_SetPriority>
#endif
}
 800c936:	bf00      	nop
 800c938:	bd80      	pop	{r7, pc}
	...

0800c93c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c942:	f3ef 8305 	mrs	r3, IPSR
 800c946:	603b      	str	r3, [r7, #0]
  return(result);
 800c948:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d003      	beq.n	800c956 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c94e:	f06f 0305 	mvn.w	r3, #5
 800c952:	607b      	str	r3, [r7, #4]
 800c954:	e00c      	b.n	800c970 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c956:	4b0a      	ldr	r3, [pc, #40]	; (800c980 <osKernelInitialize+0x44>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d105      	bne.n	800c96a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c95e:	4b08      	ldr	r3, [pc, #32]	; (800c980 <osKernelInitialize+0x44>)
 800c960:	2201      	movs	r2, #1
 800c962:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c964:	2300      	movs	r3, #0
 800c966:	607b      	str	r3, [r7, #4]
 800c968:	e002      	b.n	800c970 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c96a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c96e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c970:	687b      	ldr	r3, [r7, #4]
}
 800c972:	4618      	mov	r0, r3
 800c974:	370c      	adds	r7, #12
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	20011834 	.word	0x20011834

0800c984 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c98a:	f3ef 8305 	mrs	r3, IPSR
 800c98e:	603b      	str	r3, [r7, #0]
  return(result);
 800c990:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c992:	2b00      	cmp	r3, #0
 800c994:	d003      	beq.n	800c99e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c996:	f06f 0305 	mvn.w	r3, #5
 800c99a:	607b      	str	r3, [r7, #4]
 800c99c:	e010      	b.n	800c9c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c99e:	4b0b      	ldr	r3, [pc, #44]	; (800c9cc <osKernelStart+0x48>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d109      	bne.n	800c9ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c9a6:	f7ff ffbf 	bl	800c928 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c9aa:	4b08      	ldr	r3, [pc, #32]	; (800c9cc <osKernelStart+0x48>)
 800c9ac:	2202      	movs	r2, #2
 800c9ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c9b0:	f001 f87c 	bl	800daac <vTaskStartScheduler>
      stat = osOK;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	607b      	str	r3, [r7, #4]
 800c9b8:	e002      	b.n	800c9c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c9ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c9c0:	687b      	ldr	r3, [r7, #4]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	20011834 	.word	0x20011834

0800c9d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b08e      	sub	sp, #56	; 0x38
 800c9d4:	af04      	add	r7, sp, #16
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9e0:	f3ef 8305 	mrs	r3, IPSR
 800c9e4:	617b      	str	r3, [r7, #20]
  return(result);
 800c9e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d17e      	bne.n	800caea <osThreadNew+0x11a>
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d07b      	beq.n	800caea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c9f2:	2380      	movs	r3, #128	; 0x80
 800c9f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c9f6:	2318      	movs	r3, #24
 800c9f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c9fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca02:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d045      	beq.n	800ca96 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d002      	beq.n	800ca18 <osThreadNew+0x48>
        name = attr->name;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	699b      	ldr	r3, [r3, #24]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d002      	beq.n	800ca26 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	699b      	ldr	r3, [r3, #24]
 800ca24:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d008      	beq.n	800ca3e <osThreadNew+0x6e>
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	2b38      	cmp	r3, #56	; 0x38
 800ca30:	d805      	bhi.n	800ca3e <osThreadNew+0x6e>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	f003 0301 	and.w	r3, r3, #1
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d001      	beq.n	800ca42 <osThreadNew+0x72>
        return (NULL);
 800ca3e:	2300      	movs	r3, #0
 800ca40:	e054      	b.n	800caec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	695b      	ldr	r3, [r3, #20]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d003      	beq.n	800ca52 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	695b      	ldr	r3, [r3, #20]
 800ca4e:	089b      	lsrs	r3, r3, #2
 800ca50:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00e      	beq.n	800ca78 <osThreadNew+0xa8>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	2bbb      	cmp	r3, #187	; 0xbb
 800ca60:	d90a      	bls.n	800ca78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d006      	beq.n	800ca78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	695b      	ldr	r3, [r3, #20]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d002      	beq.n	800ca78 <osThreadNew+0xa8>
        mem = 1;
 800ca72:	2301      	movs	r3, #1
 800ca74:	61bb      	str	r3, [r7, #24]
 800ca76:	e010      	b.n	800ca9a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10c      	bne.n	800ca9a <osThreadNew+0xca>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d108      	bne.n	800ca9a <osThreadNew+0xca>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	691b      	ldr	r3, [r3, #16]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d104      	bne.n	800ca9a <osThreadNew+0xca>
          mem = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	61bb      	str	r3, [r7, #24]
 800ca94:	e001      	b.n	800ca9a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ca96:	2300      	movs	r3, #0
 800ca98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d110      	bne.n	800cac2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800caa8:	9202      	str	r2, [sp, #8]
 800caaa:	9301      	str	r3, [sp, #4]
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	9300      	str	r3, [sp, #0]
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	6a3a      	ldr	r2, [r7, #32]
 800cab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f000 fe0c 	bl	800d6d4 <xTaskCreateStatic>
 800cabc:	4603      	mov	r3, r0
 800cabe:	613b      	str	r3, [r7, #16]
 800cac0:	e013      	b.n	800caea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d110      	bne.n	800caea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cac8:	6a3b      	ldr	r3, [r7, #32]
 800caca:	b29a      	uxth	r2, r3
 800cacc:	f107 0310 	add.w	r3, r7, #16
 800cad0:	9301      	str	r3, [sp, #4]
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	9300      	str	r3, [sp, #0]
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f000 fe57 	bl	800d78e <xTaskCreate>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d001      	beq.n	800caea <osThreadNew+0x11a>
            hTask = NULL;
 800cae6:	2300      	movs	r3, #0
 800cae8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800caea:	693b      	ldr	r3, [r7, #16]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3728      	adds	r7, #40	; 0x28
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cafc:	f3ef 8305 	mrs	r3, IPSR
 800cb00:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb02:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d003      	beq.n	800cb10 <osDelay+0x1c>
    stat = osErrorISR;
 800cb08:	f06f 0305 	mvn.w	r3, #5
 800cb0c:	60fb      	str	r3, [r7, #12]
 800cb0e:	e007      	b.n	800cb20 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cb10:	2300      	movs	r3, #0
 800cb12:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d002      	beq.n	800cb20 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 ff92 	bl	800da44 <vTaskDelay>
    }
  }

  return (stat);
 800cb20:	68fb      	ldr	r3, [r7, #12]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
	...

0800cb2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cb2c:	b480      	push	{r7}
 800cb2e:	b085      	sub	sp, #20
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	4a07      	ldr	r2, [pc, #28]	; (800cb58 <vApplicationGetIdleTaskMemory+0x2c>)
 800cb3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	4a06      	ldr	r2, [pc, #24]	; (800cb5c <vApplicationGetIdleTaskMemory+0x30>)
 800cb42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2280      	movs	r2, #128	; 0x80
 800cb48:	601a      	str	r2, [r3, #0]
}
 800cb4a:	bf00      	nop
 800cb4c:	3714      	adds	r7, #20
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	20011838 	.word	0x20011838
 800cb5c:	200118f4 	.word	0x200118f4

0800cb60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	4a07      	ldr	r2, [pc, #28]	; (800cb8c <vApplicationGetTimerTaskMemory+0x2c>)
 800cb70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	4a06      	ldr	r2, [pc, #24]	; (800cb90 <vApplicationGetTimerTaskMemory+0x30>)
 800cb76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb7e:	601a      	str	r2, [r3, #0]
}
 800cb80:	bf00      	nop
 800cb82:	3714      	adds	r7, #20
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr
 800cb8c:	20011af4 	.word	0x20011af4
 800cb90:	20011bb0 	.word	0x20011bb0

0800cb94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f103 0208 	add.w	r2, r3, #8
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f103 0208 	add.w	r2, r3, #8
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f103 0208 	add.w	r2, r3, #8
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cbc8:	bf00      	nop
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cbe2:	bf00      	nop
 800cbe4:	370c      	adds	r7, #12
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr

0800cbee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cbee:	b480      	push	{r7}
 800cbf0:	b085      	sub	sp, #20
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	68fa      	ldr	r2, [r7, #12]
 800cc02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	689a      	ldr	r2, [r3, #8]
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	1c5a      	adds	r2, r3, #1
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	601a      	str	r2, [r3, #0]
}
 800cc2a:	bf00      	nop
 800cc2c:	3714      	adds	r7, #20
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr

0800cc36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc36:	b480      	push	{r7}
 800cc38:	b085      	sub	sp, #20
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc4c:	d103      	bne.n	800cc56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	691b      	ldr	r3, [r3, #16]
 800cc52:	60fb      	str	r3, [r7, #12]
 800cc54:	e00c      	b.n	800cc70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	3308      	adds	r3, #8
 800cc5a:	60fb      	str	r3, [r7, #12]
 800cc5c:	e002      	b.n	800cc64 <vListInsert+0x2e>
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68ba      	ldr	r2, [r7, #8]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d2f6      	bcs.n	800cc5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	683a      	ldr	r2, [r7, #0]
 800cc7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	683a      	ldr	r2, [r7, #0]
 800cc8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	1c5a      	adds	r2, r3, #1
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	601a      	str	r2, [r3, #0]
}
 800cc9c:	bf00      	nop
 800cc9e:	3714      	adds	r7, #20
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	691b      	ldr	r3, [r3, #16]
 800ccb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	6892      	ldr	r2, [r2, #8]
 800ccbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	689b      	ldr	r3, [r3, #8]
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	6852      	ldr	r2, [r2, #4]
 800ccc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d103      	bne.n	800ccdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	689a      	ldr	r2, [r3, #8]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	1e5a      	subs	r2, r3, #1
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3714      	adds	r7, #20
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10a      	bne.n	800cd26 <xQueueGenericReset+0x2a>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	60bb      	str	r3, [r7, #8]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cd26:	f002 f89d 	bl	800ee64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd32:	68f9      	ldr	r1, [r7, #12]
 800cd34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd36:	fb01 f303 	mul.w	r3, r1, r3
 800cd3a:	441a      	add	r2, r3
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd56:	3b01      	subs	r3, #1
 800cd58:	68f9      	ldr	r1, [r7, #12]
 800cd5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd5c:	fb01 f303 	mul.w	r3, r1, r3
 800cd60:	441a      	add	r2, r3
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	22ff      	movs	r2, #255	; 0xff
 800cd6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	22ff      	movs	r2, #255	; 0xff
 800cd72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d114      	bne.n	800cda6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d01a      	beq.n	800cdba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	3310      	adds	r3, #16
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f001 f929 	bl	800dfe0 <xTaskRemoveFromEventList>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d012      	beq.n	800cdba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cd94:	4b0c      	ldr	r3, [pc, #48]	; (800cdc8 <xQueueGenericReset+0xcc>)
 800cd96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd9a:	601a      	str	r2, [r3, #0]
 800cd9c:	f3bf 8f4f 	dsb	sy
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	e009      	b.n	800cdba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	3310      	adds	r3, #16
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff fef2 	bl	800cb94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	3324      	adds	r3, #36	; 0x24
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7ff feed 	bl	800cb94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cdba:	f002 f883 	bl	800eec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cdbe:	2301      	movs	r3, #1
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	e000ed04 	.word	0xe000ed04

0800cdcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b08e      	sub	sp, #56	; 0x38
 800cdd0:	af02      	add	r7, sp, #8
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
 800cdd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10a      	bne.n	800cdf6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cdf2:	bf00      	nop
 800cdf4:	e7fe      	b.n	800cdf4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10a      	bne.n	800ce12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce00:	f383 8811 	msr	BASEPRI, r3
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce0e:	bf00      	nop
 800ce10:	e7fe      	b.n	800ce10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d002      	beq.n	800ce1e <xQueueGenericCreateStatic+0x52>
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d001      	beq.n	800ce22 <xQueueGenericCreateStatic+0x56>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e000      	b.n	800ce24 <xQueueGenericCreateStatic+0x58>
 800ce22:	2300      	movs	r3, #0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10a      	bne.n	800ce3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ce28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2c:	f383 8811 	msr	BASEPRI, r3
 800ce30:	f3bf 8f6f 	isb	sy
 800ce34:	f3bf 8f4f 	dsb	sy
 800ce38:	623b      	str	r3, [r7, #32]
}
 800ce3a:	bf00      	nop
 800ce3c:	e7fe      	b.n	800ce3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d102      	bne.n	800ce4a <xQueueGenericCreateStatic+0x7e>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d101      	bne.n	800ce4e <xQueueGenericCreateStatic+0x82>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e000      	b.n	800ce50 <xQueueGenericCreateStatic+0x84>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d10a      	bne.n	800ce6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ce54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce58:	f383 8811 	msr	BASEPRI, r3
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	61fb      	str	r3, [r7, #28]
}
 800ce66:	bf00      	nop
 800ce68:	e7fe      	b.n	800ce68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ce6a:	2350      	movs	r3, #80	; 0x50
 800ce6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	2b50      	cmp	r3, #80	; 0x50
 800ce72:	d00a      	beq.n	800ce8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ce74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce78:	f383 8811 	msr	BASEPRI, r3
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f3bf 8f4f 	dsb	sy
 800ce84:	61bb      	str	r3, [r7, #24]
}
 800ce86:	bf00      	nop
 800ce88:	e7fe      	b.n	800ce88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ce90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00d      	beq.n	800ceb2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	4613      	mov	r3, r2
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	68b9      	ldr	r1, [r7, #8]
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f000 f805 	bl	800cebc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ceb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3730      	adds	r7, #48	; 0x30
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d103      	bne.n	800ced8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	69ba      	ldr	r2, [r7, #24]
 800ced4:	601a      	str	r2, [r3, #0]
 800ced6:	e002      	b.n	800cede <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	68ba      	ldr	r2, [r7, #8]
 800cee8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ceea:	2101      	movs	r1, #1
 800ceec:	69b8      	ldr	r0, [r7, #24]
 800ceee:	f7ff ff05 	bl	800ccfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	78fa      	ldrb	r2, [r7, #3]
 800cef6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cefa:	bf00      	nop
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
	...

0800cf04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b08e      	sub	sp, #56	; 0x38
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	607a      	str	r2, [r7, #4]
 800cf10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf12:	2300      	movs	r3, #0
 800cf14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10a      	bne.n	800cf36 <xQueueGenericSend+0x32>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf32:	bf00      	nop
 800cf34:	e7fe      	b.n	800cf34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d103      	bne.n	800cf44 <xQueueGenericSend+0x40>
 800cf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d101      	bne.n	800cf48 <xQueueGenericSend+0x44>
 800cf44:	2301      	movs	r3, #1
 800cf46:	e000      	b.n	800cf4a <xQueueGenericSend+0x46>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10a      	bne.n	800cf64 <xQueueGenericSend+0x60>
	__asm volatile
 800cf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf60:	bf00      	nop
 800cf62:	e7fe      	b.n	800cf62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d103      	bne.n	800cf72 <xQueueGenericSend+0x6e>
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d101      	bne.n	800cf76 <xQueueGenericSend+0x72>
 800cf72:	2301      	movs	r3, #1
 800cf74:	e000      	b.n	800cf78 <xQueueGenericSend+0x74>
 800cf76:	2300      	movs	r3, #0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10a      	bne.n	800cf92 <xQueueGenericSend+0x8e>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	623b      	str	r3, [r7, #32]
}
 800cf8e:	bf00      	nop
 800cf90:	e7fe      	b.n	800cf90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf92:	f001 fa0d 	bl	800e3b0 <xTaskGetSchedulerState>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d102      	bne.n	800cfa2 <xQueueGenericSend+0x9e>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d101      	bne.n	800cfa6 <xQueueGenericSend+0xa2>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e000      	b.n	800cfa8 <xQueueGenericSend+0xa4>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10a      	bne.n	800cfc2 <xQueueGenericSend+0xbe>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	61fb      	str	r3, [r7, #28]
}
 800cfbe:	bf00      	nop
 800cfc0:	e7fe      	b.n	800cfc0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cfc2:	f001 ff4f 	bl	800ee64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d302      	bcc.n	800cfd8 <xQueueGenericSend+0xd4>
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	2b02      	cmp	r3, #2
 800cfd6:	d129      	bne.n	800d02c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfd8:	683a      	ldr	r2, [r7, #0]
 800cfda:	68b9      	ldr	r1, [r7, #8]
 800cfdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfde:	f000 fa0b 	bl	800d3f8 <prvCopyDataToQueue>
 800cfe2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d010      	beq.n	800d00e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfee:	3324      	adds	r3, #36	; 0x24
 800cff0:	4618      	mov	r0, r3
 800cff2:	f000 fff5 	bl	800dfe0 <xTaskRemoveFromEventList>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d013      	beq.n	800d024 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cffc:	4b3f      	ldr	r3, [pc, #252]	; (800d0fc <xQueueGenericSend+0x1f8>)
 800cffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	e00a      	b.n	800d024 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d010:	2b00      	cmp	r3, #0
 800d012:	d007      	beq.n	800d024 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d014:	4b39      	ldr	r3, [pc, #228]	; (800d0fc <xQueueGenericSend+0x1f8>)
 800d016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d01a:	601a      	str	r2, [r3, #0]
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d024:	f001 ff4e 	bl	800eec4 <vPortExitCritical>
				return pdPASS;
 800d028:	2301      	movs	r3, #1
 800d02a:	e063      	b.n	800d0f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d103      	bne.n	800d03a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d032:	f001 ff47 	bl	800eec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d036:	2300      	movs	r3, #0
 800d038:	e05c      	b.n	800d0f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d106      	bne.n	800d04e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d040:	f107 0314 	add.w	r3, r7, #20
 800d044:	4618      	mov	r0, r3
 800d046:	f001 f855 	bl	800e0f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d04a:	2301      	movs	r3, #1
 800d04c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d04e:	f001 ff39 	bl	800eec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d052:	f000 fd9b 	bl	800db8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d056:	f001 ff05 	bl	800ee64 <vPortEnterCritical>
 800d05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d060:	b25b      	sxtb	r3, r3
 800d062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d066:	d103      	bne.n	800d070 <xQueueGenericSend+0x16c>
 800d068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06a:	2200      	movs	r2, #0
 800d06c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d076:	b25b      	sxtb	r3, r3
 800d078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d07c:	d103      	bne.n	800d086 <xQueueGenericSend+0x182>
 800d07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d080:	2200      	movs	r2, #0
 800d082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d086:	f001 ff1d 	bl	800eec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d08a:	1d3a      	adds	r2, r7, #4
 800d08c:	f107 0314 	add.w	r3, r7, #20
 800d090:	4611      	mov	r1, r2
 800d092:	4618      	mov	r0, r3
 800d094:	f001 f844 	bl	800e120 <xTaskCheckForTimeOut>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d124      	bne.n	800d0e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d09e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0a0:	f000 faa2 	bl	800d5e8 <prvIsQueueFull>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d018      	beq.n	800d0dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	3310      	adds	r3, #16
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 ff44 	bl	800df40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d0b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0ba:	f000 fa2d 	bl	800d518 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d0be:	f000 fd73 	bl	800dba8 <xTaskResumeAll>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	f47f af7c 	bne.w	800cfc2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d0ca:	4b0c      	ldr	r3, [pc, #48]	; (800d0fc <xQueueGenericSend+0x1f8>)
 800d0cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0d0:	601a      	str	r2, [r3, #0]
 800d0d2:	f3bf 8f4f 	dsb	sy
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	e772      	b.n	800cfc2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d0dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0de:	f000 fa1b 	bl	800d518 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0e2:	f000 fd61 	bl	800dba8 <xTaskResumeAll>
 800d0e6:	e76c      	b.n	800cfc2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d0e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0ea:	f000 fa15 	bl	800d518 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0ee:	f000 fd5b 	bl	800dba8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d0f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3738      	adds	r7, #56	; 0x38
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	e000ed04 	.word	0xe000ed04

0800d100 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b090      	sub	sp, #64	; 0x40
 800d104:	af00      	add	r7, sp, #0
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	60b9      	str	r1, [r7, #8]
 800d10a:	607a      	str	r2, [r7, #4]
 800d10c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10a      	bne.n	800d12e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d12a:	bf00      	nop
 800d12c:	e7fe      	b.n	800d12c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d103      	bne.n	800d13c <xQueueGenericSendFromISR+0x3c>
 800d134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d101      	bne.n	800d140 <xQueueGenericSendFromISR+0x40>
 800d13c:	2301      	movs	r3, #1
 800d13e:	e000      	b.n	800d142 <xQueueGenericSendFromISR+0x42>
 800d140:	2300      	movs	r3, #0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d10a      	bne.n	800d15c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14a:	f383 8811 	msr	BASEPRI, r3
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f3bf 8f4f 	dsb	sy
 800d156:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d158:	bf00      	nop
 800d15a:	e7fe      	b.n	800d15a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d103      	bne.n	800d16a <xQueueGenericSendFromISR+0x6a>
 800d162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d166:	2b01      	cmp	r3, #1
 800d168:	d101      	bne.n	800d16e <xQueueGenericSendFromISR+0x6e>
 800d16a:	2301      	movs	r3, #1
 800d16c:	e000      	b.n	800d170 <xQueueGenericSendFromISR+0x70>
 800d16e:	2300      	movs	r3, #0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d10a      	bne.n	800d18a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d178:	f383 8811 	msr	BASEPRI, r3
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	623b      	str	r3, [r7, #32]
}
 800d186:	bf00      	nop
 800d188:	e7fe      	b.n	800d188 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d18a:	f001 ff4d 	bl	800f028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d18e:	f3ef 8211 	mrs	r2, BASEPRI
 800d192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d196:	f383 8811 	msr	BASEPRI, r3
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	61fa      	str	r2, [r7, #28]
 800d1a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d1a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d302      	bcc.n	800d1bc <xQueueGenericSendFromISR+0xbc>
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	2b02      	cmp	r3, #2
 800d1ba:	d12f      	bne.n	800d21c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	68b9      	ldr	r1, [r7, #8]
 800d1d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1d2:	f000 f911 	bl	800d3f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d1d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d1da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1de:	d112      	bne.n	800d206 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d016      	beq.n	800d216 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ea:	3324      	adds	r3, #36	; 0x24
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f000 fef7 	bl	800dfe0 <xTaskRemoveFromEventList>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d00e      	beq.n	800d216 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00b      	beq.n	800d216 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	601a      	str	r2, [r3, #0]
 800d204:	e007      	b.n	800d216 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d206:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d20a:	3301      	adds	r3, #1
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	b25a      	sxtb	r2, r3
 800d210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d216:	2301      	movs	r3, #1
 800d218:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d21a:	e001      	b.n	800d220 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d21c:	2300      	movs	r3, #0
 800d21e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d222:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d22a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3740      	adds	r7, #64	; 0x40
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
	...

0800d238 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b08c      	sub	sp, #48	; 0x30
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d244:	2300      	movs	r3, #0
 800d246:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10a      	bne.n	800d268 <xQueueReceive+0x30>
	__asm volatile
 800d252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d256:	f383 8811 	msr	BASEPRI, r3
 800d25a:	f3bf 8f6f 	isb	sy
 800d25e:	f3bf 8f4f 	dsb	sy
 800d262:	623b      	str	r3, [r7, #32]
}
 800d264:	bf00      	nop
 800d266:	e7fe      	b.n	800d266 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d103      	bne.n	800d276 <xQueueReceive+0x3e>
 800d26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d272:	2b00      	cmp	r3, #0
 800d274:	d101      	bne.n	800d27a <xQueueReceive+0x42>
 800d276:	2301      	movs	r3, #1
 800d278:	e000      	b.n	800d27c <xQueueReceive+0x44>
 800d27a:	2300      	movs	r3, #0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d10a      	bne.n	800d296 <xQueueReceive+0x5e>
	__asm volatile
 800d280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	61fb      	str	r3, [r7, #28]
}
 800d292:	bf00      	nop
 800d294:	e7fe      	b.n	800d294 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d296:	f001 f88b 	bl	800e3b0 <xTaskGetSchedulerState>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d102      	bne.n	800d2a6 <xQueueReceive+0x6e>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d101      	bne.n	800d2aa <xQueueReceive+0x72>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e000      	b.n	800d2ac <xQueueReceive+0x74>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10a      	bne.n	800d2c6 <xQueueReceive+0x8e>
	__asm volatile
 800d2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	61bb      	str	r3, [r7, #24]
}
 800d2c2:	bf00      	nop
 800d2c4:	e7fe      	b.n	800d2c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2c6:	f001 fdcd 	bl	800ee64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d01f      	beq.n	800d316 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2d6:	68b9      	ldr	r1, [r7, #8]
 800d2d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2da:	f000 f8f7 	bl	800d4cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e0:	1e5a      	subs	r2, r3, #1
 800d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00f      	beq.n	800d30e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f0:	3310      	adds	r3, #16
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f000 fe74 	bl	800dfe0 <xTaskRemoveFromEventList>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d007      	beq.n	800d30e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2fe:	4b3d      	ldr	r3, [pc, #244]	; (800d3f4 <xQueueReceive+0x1bc>)
 800d300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d304:	601a      	str	r2, [r3, #0]
 800d306:	f3bf 8f4f 	dsb	sy
 800d30a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d30e:	f001 fdd9 	bl	800eec4 <vPortExitCritical>
				return pdPASS;
 800d312:	2301      	movs	r3, #1
 800d314:	e069      	b.n	800d3ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d103      	bne.n	800d324 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d31c:	f001 fdd2 	bl	800eec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d320:	2300      	movs	r3, #0
 800d322:	e062      	b.n	800d3ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d326:	2b00      	cmp	r3, #0
 800d328:	d106      	bne.n	800d338 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d32a:	f107 0310 	add.w	r3, r7, #16
 800d32e:	4618      	mov	r0, r3
 800d330:	f000 fee0 	bl	800e0f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d334:	2301      	movs	r3, #1
 800d336:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d338:	f001 fdc4 	bl	800eec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d33c:	f000 fc26 	bl	800db8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d340:	f001 fd90 	bl	800ee64 <vPortEnterCritical>
 800d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d34a:	b25b      	sxtb	r3, r3
 800d34c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d350:	d103      	bne.n	800d35a <xQueueReceive+0x122>
 800d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d354:	2200      	movs	r2, #0
 800d356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d360:	b25b      	sxtb	r3, r3
 800d362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d366:	d103      	bne.n	800d370 <xQueueReceive+0x138>
 800d368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36a:	2200      	movs	r2, #0
 800d36c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d370:	f001 fda8 	bl	800eec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d374:	1d3a      	adds	r2, r7, #4
 800d376:	f107 0310 	add.w	r3, r7, #16
 800d37a:	4611      	mov	r1, r2
 800d37c:	4618      	mov	r0, r3
 800d37e:	f000 fecf 	bl	800e120 <xTaskCheckForTimeOut>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d123      	bne.n	800d3d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d38a:	f000 f917 	bl	800d5bc <prvIsQueueEmpty>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d017      	beq.n	800d3c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d396:	3324      	adds	r3, #36	; 0x24
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	4611      	mov	r1, r2
 800d39c:	4618      	mov	r0, r3
 800d39e:	f000 fdcf 	bl	800df40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d3a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3a4:	f000 f8b8 	bl	800d518 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d3a8:	f000 fbfe 	bl	800dba8 <xTaskResumeAll>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d189      	bne.n	800d2c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d3b2:	4b10      	ldr	r3, [pc, #64]	; (800d3f4 <xQueueReceive+0x1bc>)
 800d3b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3b8:	601a      	str	r2, [r3, #0]
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	e780      	b.n	800d2c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d3c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3c6:	f000 f8a7 	bl	800d518 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3ca:	f000 fbed 	bl	800dba8 <xTaskResumeAll>
 800d3ce:	e77a      	b.n	800d2c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d3d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3d2:	f000 f8a1 	bl	800d518 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3d6:	f000 fbe7 	bl	800dba8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3dc:	f000 f8ee 	bl	800d5bc <prvIsQueueEmpty>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f43f af6f 	beq.w	800d2c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d3e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3730      	adds	r7, #48	; 0x30
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	e000ed04 	.word	0xe000ed04

0800d3f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b086      	sub	sp, #24
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d404:	2300      	movs	r3, #0
 800d406:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d40c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d412:	2b00      	cmp	r3, #0
 800d414:	d10d      	bne.n	800d432 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d14d      	bne.n	800d4ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	4618      	mov	r0, r3
 800d424:	f000 ffe2 	bl	800e3ec <xTaskPriorityDisinherit>
 800d428:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	609a      	str	r2, [r3, #8]
 800d430:	e043      	b.n	800d4ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d119      	bne.n	800d46c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6858      	ldr	r0, [r3, #4]
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d440:	461a      	mov	r2, r3
 800d442:	68b9      	ldr	r1, [r7, #8]
 800d444:	f00d f9ba 	bl	801a7bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d450:	441a      	add	r2, r3
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	685a      	ldr	r2, [r3, #4]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	689b      	ldr	r3, [r3, #8]
 800d45e:	429a      	cmp	r2, r3
 800d460:	d32b      	bcc.n	800d4ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681a      	ldr	r2, [r3, #0]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	605a      	str	r2, [r3, #4]
 800d46a:	e026      	b.n	800d4ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	68d8      	ldr	r0, [r3, #12]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d474:	461a      	mov	r2, r3
 800d476:	68b9      	ldr	r1, [r7, #8]
 800d478:	f00d f9a0 	bl	801a7bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	68da      	ldr	r2, [r3, #12]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d484:	425b      	negs	r3, r3
 800d486:	441a      	add	r2, r3
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	68da      	ldr	r2, [r3, #12]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	429a      	cmp	r2, r3
 800d496:	d207      	bcs.n	800d4a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	689a      	ldr	r2, [r3, #8]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a0:	425b      	negs	r3, r3
 800d4a2:	441a      	add	r2, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b02      	cmp	r3, #2
 800d4ac:	d105      	bne.n	800d4ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d002      	beq.n	800d4ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	1c5a      	adds	r2, r3, #1
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d4c2:	697b      	ldr	r3, [r7, #20]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d018      	beq.n	800d510 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	68da      	ldr	r2, [r3, #12]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e6:	441a      	add	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	68da      	ldr	r2, [r3, #12]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d303      	bcc.n	800d500 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68d9      	ldr	r1, [r3, #12]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d508:	461a      	mov	r2, r3
 800d50a:	6838      	ldr	r0, [r7, #0]
 800d50c:	f00d f956 	bl	801a7bc <memcpy>
	}
}
 800d510:	bf00      	nop
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d520:	f001 fca0 	bl	800ee64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d52a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d52c:	e011      	b.n	800d552 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d532:	2b00      	cmp	r3, #0
 800d534:	d012      	beq.n	800d55c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	3324      	adds	r3, #36	; 0x24
 800d53a:	4618      	mov	r0, r3
 800d53c:	f000 fd50 	bl	800dfe0 <xTaskRemoveFromEventList>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	d001      	beq.n	800d54a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d546:	f000 fe4d 	bl	800e1e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d54a:	7bfb      	ldrb	r3, [r7, #15]
 800d54c:	3b01      	subs	r3, #1
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d556:	2b00      	cmp	r3, #0
 800d558:	dce9      	bgt.n	800d52e <prvUnlockQueue+0x16>
 800d55a:	e000      	b.n	800d55e <prvUnlockQueue+0x46>
					break;
 800d55c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	22ff      	movs	r2, #255	; 0xff
 800d562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d566:	f001 fcad 	bl	800eec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d56a:	f001 fc7b 	bl	800ee64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d574:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d576:	e011      	b.n	800d59c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d012      	beq.n	800d5a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	3310      	adds	r3, #16
 800d584:	4618      	mov	r0, r3
 800d586:	f000 fd2b 	bl	800dfe0 <xTaskRemoveFromEventList>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d001      	beq.n	800d594 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d590:	f000 fe28 	bl	800e1e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d594:	7bbb      	ldrb	r3, [r7, #14]
 800d596:	3b01      	subs	r3, #1
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d59c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	dce9      	bgt.n	800d578 <prvUnlockQueue+0x60>
 800d5a4:	e000      	b.n	800d5a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d5a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	22ff      	movs	r2, #255	; 0xff
 800d5ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d5b0:	f001 fc88 	bl	800eec4 <vPortExitCritical>
}
 800d5b4:	bf00      	nop
 800d5b6:	3710      	adds	r7, #16
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5c4:	f001 fc4e 	bl	800ee64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d102      	bne.n	800d5d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	60fb      	str	r3, [r7, #12]
 800d5d4:	e001      	b.n	800d5da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5da:	f001 fc73 	bl	800eec4 <vPortExitCritical>

	return xReturn;
 800d5de:	68fb      	ldr	r3, [r7, #12]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3710      	adds	r7, #16
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5f0:	f001 fc38 	bl	800ee64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d102      	bne.n	800d606 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d600:	2301      	movs	r3, #1
 800d602:	60fb      	str	r3, [r7, #12]
 800d604:	e001      	b.n	800d60a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d606:	2300      	movs	r3, #0
 800d608:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d60a:	f001 fc5b 	bl	800eec4 <vPortExitCritical>

	return xReturn;
 800d60e:	68fb      	ldr	r3, [r7, #12]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d618:	b480      	push	{r7}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d622:	2300      	movs	r3, #0
 800d624:	60fb      	str	r3, [r7, #12]
 800d626:	e014      	b.n	800d652 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d628:	4a0f      	ldr	r2, [pc, #60]	; (800d668 <vQueueAddToRegistry+0x50>)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10b      	bne.n	800d64c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d634:	490c      	ldr	r1, [pc, #48]	; (800d668 <vQueueAddToRegistry+0x50>)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	683a      	ldr	r2, [r7, #0]
 800d63a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d63e:	4a0a      	ldr	r2, [pc, #40]	; (800d668 <vQueueAddToRegistry+0x50>)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	00db      	lsls	r3, r3, #3
 800d644:	4413      	add	r3, r2
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d64a:	e006      	b.n	800d65a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	3301      	adds	r3, #1
 800d650:	60fb      	str	r3, [r7, #12]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2b07      	cmp	r3, #7
 800d656:	d9e7      	bls.n	800d628 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d658:	bf00      	nop
 800d65a:	bf00      	nop
 800d65c:	3714      	adds	r7, #20
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	20011fb0 	.word	0x20011fb0

0800d66c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b086      	sub	sp, #24
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d67c:	f001 fbf2 	bl	800ee64 <vPortEnterCritical>
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d686:	b25b      	sxtb	r3, r3
 800d688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d68c:	d103      	bne.n	800d696 <vQueueWaitForMessageRestricted+0x2a>
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	2200      	movs	r2, #0
 800d692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d69c:	b25b      	sxtb	r3, r3
 800d69e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6a2:	d103      	bne.n	800d6ac <vQueueWaitForMessageRestricted+0x40>
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6ac:	f001 fc0a 	bl	800eec4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d106      	bne.n	800d6c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	3324      	adds	r3, #36	; 0x24
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	68b9      	ldr	r1, [r7, #8]
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f000 fc61 	bl	800df88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d6c6:	6978      	ldr	r0, [r7, #20]
 800d6c8:	f7ff ff26 	bl	800d518 <prvUnlockQueue>
	}
 800d6cc:	bf00      	nop
 800d6ce:	3718      	adds	r7, #24
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b08e      	sub	sp, #56	; 0x38
 800d6d8:	af04      	add	r7, sp, #16
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
 800d6e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10a      	bne.n	800d6fe <xTaskCreateStatic+0x2a>
	__asm volatile
 800d6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	623b      	str	r3, [r7, #32]
}
 800d6fa:	bf00      	nop
 800d6fc:	e7fe      	b.n	800d6fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10a      	bne.n	800d71a <xTaskCreateStatic+0x46>
	__asm volatile
 800d704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	61fb      	str	r3, [r7, #28]
}
 800d716:	bf00      	nop
 800d718:	e7fe      	b.n	800d718 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d71a:	23bc      	movs	r3, #188	; 0xbc
 800d71c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	2bbc      	cmp	r3, #188	; 0xbc
 800d722:	d00a      	beq.n	800d73a <xTaskCreateStatic+0x66>
	__asm volatile
 800d724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	61bb      	str	r3, [r7, #24]
}
 800d736:	bf00      	nop
 800d738:	e7fe      	b.n	800d738 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d73a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d01e      	beq.n	800d780 <xTaskCreateStatic+0xac>
 800d742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d744:	2b00      	cmp	r3, #0
 800d746:	d01b      	beq.n	800d780 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d750:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d754:	2202      	movs	r2, #2
 800d756:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d75a:	2300      	movs	r3, #0
 800d75c:	9303      	str	r3, [sp, #12]
 800d75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d760:	9302      	str	r3, [sp, #8]
 800d762:	f107 0314 	add.w	r3, r7, #20
 800d766:	9301      	str	r3, [sp, #4]
 800d768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	68b9      	ldr	r1, [r7, #8]
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f000 f850 	bl	800d818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d77a:	f000 f8f3 	bl	800d964 <prvAddNewTaskToReadyList>
 800d77e:	e001      	b.n	800d784 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d780:	2300      	movs	r3, #0
 800d782:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d784:	697b      	ldr	r3, [r7, #20]
	}
 800d786:	4618      	mov	r0, r3
 800d788:	3728      	adds	r7, #40	; 0x28
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b08c      	sub	sp, #48	; 0x30
 800d792:	af04      	add	r7, sp, #16
 800d794:	60f8      	str	r0, [r7, #12]
 800d796:	60b9      	str	r1, [r7, #8]
 800d798:	603b      	str	r3, [r7, #0]
 800d79a:	4613      	mov	r3, r2
 800d79c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d79e:	88fb      	ldrh	r3, [r7, #6]
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f001 fc80 	bl	800f0a8 <pvPortMalloc>
 800d7a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00e      	beq.n	800d7ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7b0:	20bc      	movs	r0, #188	; 0xbc
 800d7b2:	f001 fc79 	bl	800f0a8 <pvPortMalloc>
 800d7b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d003      	beq.n	800d7c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	697a      	ldr	r2, [r7, #20]
 800d7c2:	631a      	str	r2, [r3, #48]	; 0x30
 800d7c4:	e005      	b.n	800d7d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7c6:	6978      	ldr	r0, [r7, #20]
 800d7c8:	f001 fd3a 	bl	800f240 <vPortFree>
 800d7cc:	e001      	b.n	800d7d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d017      	beq.n	800d808 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d7e0:	88fa      	ldrh	r2, [r7, #6]
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	9303      	str	r3, [sp, #12]
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	9302      	str	r3, [sp, #8]
 800d7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ec:	9301      	str	r3, [sp, #4]
 800d7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	68b9      	ldr	r1, [r7, #8]
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	f000 f80e 	bl	800d818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7fc:	69f8      	ldr	r0, [r7, #28]
 800d7fe:	f000 f8b1 	bl	800d964 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d802:	2301      	movs	r3, #1
 800d804:	61bb      	str	r3, [r7, #24]
 800d806:	e002      	b.n	800d80e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d80c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d80e:	69bb      	ldr	r3, [r7, #24]
	}
 800d810:	4618      	mov	r0, r3
 800d812:	3720      	adds	r7, #32
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b088      	sub	sp, #32
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
 800d824:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d828:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	461a      	mov	r2, r3
 800d830:	21a5      	movs	r1, #165	; 0xa5
 800d832:	f00c ffd1 	bl	801a7d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d840:	3b01      	subs	r3, #1
 800d842:	009b      	lsls	r3, r3, #2
 800d844:	4413      	add	r3, r2
 800d846:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	f023 0307 	bic.w	r3, r3, #7
 800d84e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	f003 0307 	and.w	r3, r3, #7
 800d856:	2b00      	cmp	r3, #0
 800d858:	d00a      	beq.n	800d870 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85e:	f383 8811 	msr	BASEPRI, r3
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	f3bf 8f4f 	dsb	sy
 800d86a:	617b      	str	r3, [r7, #20]
}
 800d86c:	bf00      	nop
 800d86e:	e7fe      	b.n	800d86e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d01f      	beq.n	800d8b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d876:	2300      	movs	r3, #0
 800d878:	61fb      	str	r3, [r7, #28]
 800d87a:	e012      	b.n	800d8a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d87c:	68ba      	ldr	r2, [r7, #8]
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	4413      	add	r3, r2
 800d882:	7819      	ldrb	r1, [r3, #0]
 800d884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	4413      	add	r3, r2
 800d88a:	3334      	adds	r3, #52	; 0x34
 800d88c:	460a      	mov	r2, r1
 800d88e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d890:	68ba      	ldr	r2, [r7, #8]
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	4413      	add	r3, r2
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d006      	beq.n	800d8aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	61fb      	str	r3, [r7, #28]
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	2b0f      	cmp	r3, #15
 800d8a6:	d9e9      	bls.n	800d87c <prvInitialiseNewTask+0x64>
 800d8a8:	e000      	b.n	800d8ac <prvInitialiseNewTask+0x94>
			{
				break;
 800d8aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8b4:	e003      	b.n	800d8be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c0:	2b37      	cmp	r3, #55	; 0x37
 800d8c2:	d901      	bls.n	800d8c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8c4:	2337      	movs	r3, #55	; 0x37
 800d8c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8dc:	3304      	adds	r3, #4
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff f978 	bl	800cbd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e6:	3318      	adds	r3, #24
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7ff f973 	bl	800cbd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d902:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d906:	2200      	movs	r2, #0
 800d908:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d916:	3354      	adds	r3, #84	; 0x54
 800d918:	2260      	movs	r2, #96	; 0x60
 800d91a:	2100      	movs	r1, #0
 800d91c:	4618      	mov	r0, r3
 800d91e:	f00c ff5b 	bl	801a7d8 <memset>
 800d922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d924:	4a0c      	ldr	r2, [pc, #48]	; (800d958 <prvInitialiseNewTask+0x140>)
 800d926:	659a      	str	r2, [r3, #88]	; 0x58
 800d928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92a:	4a0c      	ldr	r2, [pc, #48]	; (800d95c <prvInitialiseNewTask+0x144>)
 800d92c:	65da      	str	r2, [r3, #92]	; 0x5c
 800d92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d930:	4a0b      	ldr	r2, [pc, #44]	; (800d960 <prvInitialiseNewTask+0x148>)
 800d932:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d934:	683a      	ldr	r2, [r7, #0]
 800d936:	68f9      	ldr	r1, [r7, #12]
 800d938:	69b8      	ldr	r0, [r7, #24]
 800d93a:	f001 f967 	bl	800ec0c <pxPortInitialiseStack>
 800d93e:	4602      	mov	r2, r0
 800d940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d942:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d946:	2b00      	cmp	r3, #0
 800d948:	d002      	beq.n	800d950 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d94e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d950:	bf00      	nop
 800d952:	3720      	adds	r7, #32
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	0801cf40 	.word	0x0801cf40
 800d95c:	0801cf60 	.word	0x0801cf60
 800d960:	0801cf20 	.word	0x0801cf20

0800d964 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d96c:	f001 fa7a 	bl	800ee64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d970:	4b2d      	ldr	r3, [pc, #180]	; (800da28 <prvAddNewTaskToReadyList+0xc4>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	3301      	adds	r3, #1
 800d976:	4a2c      	ldr	r2, [pc, #176]	; (800da28 <prvAddNewTaskToReadyList+0xc4>)
 800d978:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d97a:	4b2c      	ldr	r3, [pc, #176]	; (800da2c <prvAddNewTaskToReadyList+0xc8>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d109      	bne.n	800d996 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d982:	4a2a      	ldr	r2, [pc, #168]	; (800da2c <prvAddNewTaskToReadyList+0xc8>)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d988:	4b27      	ldr	r3, [pc, #156]	; (800da28 <prvAddNewTaskToReadyList+0xc4>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d110      	bne.n	800d9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d990:	f000 fc4c 	bl	800e22c <prvInitialiseTaskLists>
 800d994:	e00d      	b.n	800d9b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d996:	4b26      	ldr	r3, [pc, #152]	; (800da30 <prvAddNewTaskToReadyList+0xcc>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d109      	bne.n	800d9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d99e:	4b23      	ldr	r3, [pc, #140]	; (800da2c <prvAddNewTaskToReadyList+0xc8>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d802      	bhi.n	800d9b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d9ac:	4a1f      	ldr	r2, [pc, #124]	; (800da2c <prvAddNewTaskToReadyList+0xc8>)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d9b2:	4b20      	ldr	r3, [pc, #128]	; (800da34 <prvAddNewTaskToReadyList+0xd0>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	4a1e      	ldr	r2, [pc, #120]	; (800da34 <prvAddNewTaskToReadyList+0xd0>)
 800d9ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d9bc:	4b1d      	ldr	r3, [pc, #116]	; (800da34 <prvAddNewTaskToReadyList+0xd0>)
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c8:	4b1b      	ldr	r3, [pc, #108]	; (800da38 <prvAddNewTaskToReadyList+0xd4>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d903      	bls.n	800d9d8 <prvAddNewTaskToReadyList+0x74>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d4:	4a18      	ldr	r2, [pc, #96]	; (800da38 <prvAddNewTaskToReadyList+0xd4>)
 800d9d6:	6013      	str	r3, [r2, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9dc:	4613      	mov	r3, r2
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	4413      	add	r3, r2
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	4a15      	ldr	r2, [pc, #84]	; (800da3c <prvAddNewTaskToReadyList+0xd8>)
 800d9e6:	441a      	add	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	3304      	adds	r3, #4
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	4610      	mov	r0, r2
 800d9f0:	f7ff f8fd 	bl	800cbee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d9f4:	f001 fa66 	bl	800eec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d9f8:	4b0d      	ldr	r3, [pc, #52]	; (800da30 <prvAddNewTaskToReadyList+0xcc>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d00e      	beq.n	800da1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da00:	4b0a      	ldr	r3, [pc, #40]	; (800da2c <prvAddNewTaskToReadyList+0xc8>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d207      	bcs.n	800da1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da0e:	4b0c      	ldr	r3, [pc, #48]	; (800da40 <prvAddNewTaskToReadyList+0xdc>)
 800da10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da14:	601a      	str	r2, [r3, #0]
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da1e:	bf00      	nop
 800da20:	3708      	adds	r7, #8
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	200124c4 	.word	0x200124c4
 800da2c:	20011ff0 	.word	0x20011ff0
 800da30:	200124d0 	.word	0x200124d0
 800da34:	200124e0 	.word	0x200124e0
 800da38:	200124cc 	.word	0x200124cc
 800da3c:	20011ff4 	.word	0x20011ff4
 800da40:	e000ed04 	.word	0xe000ed04

0800da44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da4c:	2300      	movs	r3, #0
 800da4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d017      	beq.n	800da86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800da56:	4b13      	ldr	r3, [pc, #76]	; (800daa4 <vTaskDelay+0x60>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00a      	beq.n	800da74 <vTaskDelay+0x30>
	__asm volatile
 800da5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da62:	f383 8811 	msr	BASEPRI, r3
 800da66:	f3bf 8f6f 	isb	sy
 800da6a:	f3bf 8f4f 	dsb	sy
 800da6e:	60bb      	str	r3, [r7, #8]
}
 800da70:	bf00      	nop
 800da72:	e7fe      	b.n	800da72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800da74:	f000 f88a 	bl	800db8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da78:	2100      	movs	r1, #0
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 fd24 	bl	800e4c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da80:	f000 f892 	bl	800dba8 <xTaskResumeAll>
 800da84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d107      	bne.n	800da9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800da8c:	4b06      	ldr	r3, [pc, #24]	; (800daa8 <vTaskDelay+0x64>)
 800da8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da92:	601a      	str	r2, [r3, #0]
 800da94:	f3bf 8f4f 	dsb	sy
 800da98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da9c:	bf00      	nop
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	200124ec 	.word	0x200124ec
 800daa8:	e000ed04 	.word	0xe000ed04

0800daac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b08a      	sub	sp, #40	; 0x28
 800dab0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dab2:	2300      	movs	r3, #0
 800dab4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dab6:	2300      	movs	r3, #0
 800dab8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800daba:	463a      	mov	r2, r7
 800dabc:	1d39      	adds	r1, r7, #4
 800dabe:	f107 0308 	add.w	r3, r7, #8
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7ff f832 	bl	800cb2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dac8:	6839      	ldr	r1, [r7, #0]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	68ba      	ldr	r2, [r7, #8]
 800dace:	9202      	str	r2, [sp, #8]
 800dad0:	9301      	str	r3, [sp, #4]
 800dad2:	2300      	movs	r3, #0
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	2300      	movs	r3, #0
 800dad8:	460a      	mov	r2, r1
 800dada:	4924      	ldr	r1, [pc, #144]	; (800db6c <vTaskStartScheduler+0xc0>)
 800dadc:	4824      	ldr	r0, [pc, #144]	; (800db70 <vTaskStartScheduler+0xc4>)
 800dade:	f7ff fdf9 	bl	800d6d4 <xTaskCreateStatic>
 800dae2:	4603      	mov	r3, r0
 800dae4:	4a23      	ldr	r2, [pc, #140]	; (800db74 <vTaskStartScheduler+0xc8>)
 800dae6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dae8:	4b22      	ldr	r3, [pc, #136]	; (800db74 <vTaskStartScheduler+0xc8>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800daf0:	2301      	movs	r3, #1
 800daf2:	617b      	str	r3, [r7, #20]
 800daf4:	e001      	b.n	800dafa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800daf6:	2300      	movs	r3, #0
 800daf8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d102      	bne.n	800db06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800db00:	f000 fd36 	bl	800e570 <xTimerCreateTimerTask>
 800db04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d11b      	bne.n	800db44 <vTaskStartScheduler+0x98>
	__asm volatile
 800db0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db10:	f383 8811 	msr	BASEPRI, r3
 800db14:	f3bf 8f6f 	isb	sy
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	613b      	str	r3, [r7, #16]
}
 800db1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db20:	4b15      	ldr	r3, [pc, #84]	; (800db78 <vTaskStartScheduler+0xcc>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	3354      	adds	r3, #84	; 0x54
 800db26:	4a15      	ldr	r2, [pc, #84]	; (800db7c <vTaskStartScheduler+0xd0>)
 800db28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db2a:	4b15      	ldr	r3, [pc, #84]	; (800db80 <vTaskStartScheduler+0xd4>)
 800db2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800db32:	4b14      	ldr	r3, [pc, #80]	; (800db84 <vTaskStartScheduler+0xd8>)
 800db34:	2201      	movs	r2, #1
 800db36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800db38:	4b13      	ldr	r3, [pc, #76]	; (800db88 <vTaskStartScheduler+0xdc>)
 800db3a:	2200      	movs	r2, #0
 800db3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800db3e:	f001 f8ef 	bl	800ed20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800db42:	e00e      	b.n	800db62 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db4a:	d10a      	bne.n	800db62 <vTaskStartScheduler+0xb6>
	__asm volatile
 800db4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db50:	f383 8811 	msr	BASEPRI, r3
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	60fb      	str	r3, [r7, #12]
}
 800db5e:	bf00      	nop
 800db60:	e7fe      	b.n	800db60 <vTaskStartScheduler+0xb4>
}
 800db62:	bf00      	nop
 800db64:	3718      	adds	r7, #24
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	0801be70 	.word	0x0801be70
 800db70:	0800e1fd 	.word	0x0800e1fd
 800db74:	200124e8 	.word	0x200124e8
 800db78:	20011ff0 	.word	0x20011ff0
 800db7c:	20000884 	.word	0x20000884
 800db80:	200124e4 	.word	0x200124e4
 800db84:	200124d0 	.word	0x200124d0
 800db88:	200124c8 	.word	0x200124c8

0800db8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db8c:	b480      	push	{r7}
 800db8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800db90:	4b04      	ldr	r3, [pc, #16]	; (800dba4 <vTaskSuspendAll+0x18>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	3301      	adds	r3, #1
 800db96:	4a03      	ldr	r2, [pc, #12]	; (800dba4 <vTaskSuspendAll+0x18>)
 800db98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800db9a:	bf00      	nop
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr
 800dba4:	200124ec 	.word	0x200124ec

0800dba8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dbb6:	4b42      	ldr	r3, [pc, #264]	; (800dcc0 <xTaskResumeAll+0x118>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10a      	bne.n	800dbd4 <xTaskResumeAll+0x2c>
	__asm volatile
 800dbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc2:	f383 8811 	msr	BASEPRI, r3
 800dbc6:	f3bf 8f6f 	isb	sy
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	603b      	str	r3, [r7, #0]
}
 800dbd0:	bf00      	nop
 800dbd2:	e7fe      	b.n	800dbd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dbd4:	f001 f946 	bl	800ee64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dbd8:	4b39      	ldr	r3, [pc, #228]	; (800dcc0 <xTaskResumeAll+0x118>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	3b01      	subs	r3, #1
 800dbde:	4a38      	ldr	r2, [pc, #224]	; (800dcc0 <xTaskResumeAll+0x118>)
 800dbe0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbe2:	4b37      	ldr	r3, [pc, #220]	; (800dcc0 <xTaskResumeAll+0x118>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d162      	bne.n	800dcb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dbea:	4b36      	ldr	r3, [pc, #216]	; (800dcc4 <xTaskResumeAll+0x11c>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d05e      	beq.n	800dcb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbf2:	e02f      	b.n	800dc54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbf4:	4b34      	ldr	r3, [pc, #208]	; (800dcc8 <xTaskResumeAll+0x120>)
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	3318      	adds	r3, #24
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7ff f851 	bl	800cca8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	3304      	adds	r3, #4
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7ff f84c 	bl	800cca8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc14:	4b2d      	ldr	r3, [pc, #180]	; (800dccc <xTaskResumeAll+0x124>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d903      	bls.n	800dc24 <xTaskResumeAll+0x7c>
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc20:	4a2a      	ldr	r2, [pc, #168]	; (800dccc <xTaskResumeAll+0x124>)
 800dc22:	6013      	str	r3, [r2, #0]
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc28:	4613      	mov	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	4413      	add	r3, r2
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4a27      	ldr	r2, [pc, #156]	; (800dcd0 <xTaskResumeAll+0x128>)
 800dc32:	441a      	add	r2, r3
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	3304      	adds	r3, #4
 800dc38:	4619      	mov	r1, r3
 800dc3a:	4610      	mov	r0, r2
 800dc3c:	f7fe ffd7 	bl	800cbee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc44:	4b23      	ldr	r3, [pc, #140]	; (800dcd4 <xTaskResumeAll+0x12c>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d302      	bcc.n	800dc54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dc4e:	4b22      	ldr	r3, [pc, #136]	; (800dcd8 <xTaskResumeAll+0x130>)
 800dc50:	2201      	movs	r2, #1
 800dc52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc54:	4b1c      	ldr	r3, [pc, #112]	; (800dcc8 <xTaskResumeAll+0x120>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d1cb      	bne.n	800dbf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc62:	f000 fb85 	bl	800e370 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dc66:	4b1d      	ldr	r3, [pc, #116]	; (800dcdc <xTaskResumeAll+0x134>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d010      	beq.n	800dc94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc72:	f000 f847 	bl	800dd04 <xTaskIncrementTick>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d002      	beq.n	800dc82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dc7c:	4b16      	ldr	r3, [pc, #88]	; (800dcd8 <xTaskResumeAll+0x130>)
 800dc7e:	2201      	movs	r2, #1
 800dc80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	3b01      	subs	r3, #1
 800dc86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d1f1      	bne.n	800dc72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dc8e:	4b13      	ldr	r3, [pc, #76]	; (800dcdc <xTaskResumeAll+0x134>)
 800dc90:	2200      	movs	r2, #0
 800dc92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc94:	4b10      	ldr	r3, [pc, #64]	; (800dcd8 <xTaskResumeAll+0x130>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d009      	beq.n	800dcb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dca0:	4b0f      	ldr	r3, [pc, #60]	; (800dce0 <xTaskResumeAll+0x138>)
 800dca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dca6:	601a      	str	r2, [r3, #0]
 800dca8:	f3bf 8f4f 	dsb	sy
 800dcac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dcb0:	f001 f908 	bl	800eec4 <vPortExitCritical>

	return xAlreadyYielded;
 800dcb4:	68bb      	ldr	r3, [r7, #8]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3710      	adds	r7, #16
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	200124ec 	.word	0x200124ec
 800dcc4:	200124c4 	.word	0x200124c4
 800dcc8:	20012484 	.word	0x20012484
 800dccc:	200124cc 	.word	0x200124cc
 800dcd0:	20011ff4 	.word	0x20011ff4
 800dcd4:	20011ff0 	.word	0x20011ff0
 800dcd8:	200124d8 	.word	0x200124d8
 800dcdc:	200124d4 	.word	0x200124d4
 800dce0:	e000ed04 	.word	0xe000ed04

0800dce4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dcea:	4b05      	ldr	r3, [pc, #20]	; (800dd00 <xTaskGetTickCount+0x1c>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dcf0:	687b      	ldr	r3, [r7, #4]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	370c      	adds	r7, #12
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfc:	4770      	bx	lr
 800dcfe:	bf00      	nop
 800dd00:	200124c8 	.word	0x200124c8

0800dd04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b086      	sub	sp, #24
 800dd08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd0e:	4b4f      	ldr	r3, [pc, #316]	; (800de4c <xTaskIncrementTick+0x148>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	f040 808f 	bne.w	800de36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd18:	4b4d      	ldr	r3, [pc, #308]	; (800de50 <xTaskIncrementTick+0x14c>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd20:	4a4b      	ldr	r2, [pc, #300]	; (800de50 <xTaskIncrementTick+0x14c>)
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d120      	bne.n	800dd6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd2c:	4b49      	ldr	r3, [pc, #292]	; (800de54 <xTaskIncrementTick+0x150>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d00a      	beq.n	800dd4c <xTaskIncrementTick+0x48>
	__asm volatile
 800dd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3a:	f383 8811 	msr	BASEPRI, r3
 800dd3e:	f3bf 8f6f 	isb	sy
 800dd42:	f3bf 8f4f 	dsb	sy
 800dd46:	603b      	str	r3, [r7, #0]
}
 800dd48:	bf00      	nop
 800dd4a:	e7fe      	b.n	800dd4a <xTaskIncrementTick+0x46>
 800dd4c:	4b41      	ldr	r3, [pc, #260]	; (800de54 <xTaskIncrementTick+0x150>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	60fb      	str	r3, [r7, #12]
 800dd52:	4b41      	ldr	r3, [pc, #260]	; (800de58 <xTaskIncrementTick+0x154>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a3f      	ldr	r2, [pc, #252]	; (800de54 <xTaskIncrementTick+0x150>)
 800dd58:	6013      	str	r3, [r2, #0]
 800dd5a:	4a3f      	ldr	r2, [pc, #252]	; (800de58 <xTaskIncrementTick+0x154>)
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	6013      	str	r3, [r2, #0]
 800dd60:	4b3e      	ldr	r3, [pc, #248]	; (800de5c <xTaskIncrementTick+0x158>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	3301      	adds	r3, #1
 800dd66:	4a3d      	ldr	r2, [pc, #244]	; (800de5c <xTaskIncrementTick+0x158>)
 800dd68:	6013      	str	r3, [r2, #0]
 800dd6a:	f000 fb01 	bl	800e370 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd6e:	4b3c      	ldr	r3, [pc, #240]	; (800de60 <xTaskIncrementTick+0x15c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	693a      	ldr	r2, [r7, #16]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d349      	bcc.n	800de0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd78:	4b36      	ldr	r3, [pc, #216]	; (800de54 <xTaskIncrementTick+0x150>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d104      	bne.n	800dd8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd82:	4b37      	ldr	r3, [pc, #220]	; (800de60 <xTaskIncrementTick+0x15c>)
 800dd84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd88:	601a      	str	r2, [r3, #0]
					break;
 800dd8a:	e03f      	b.n	800de0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd8c:	4b31      	ldr	r3, [pc, #196]	; (800de54 <xTaskIncrementTick+0x150>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd9c:	693a      	ldr	r2, [r7, #16]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d203      	bcs.n	800ddac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dda4:	4a2e      	ldr	r2, [pc, #184]	; (800de60 <xTaskIncrementTick+0x15c>)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ddaa:	e02f      	b.n	800de0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	3304      	adds	r3, #4
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7fe ff79 	bl	800cca8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d004      	beq.n	800ddc8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	3318      	adds	r3, #24
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fe ff70 	bl	800cca8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddcc:	4b25      	ldr	r3, [pc, #148]	; (800de64 <xTaskIncrementTick+0x160>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d903      	bls.n	800dddc <xTaskIncrementTick+0xd8>
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd8:	4a22      	ldr	r2, [pc, #136]	; (800de64 <xTaskIncrementTick+0x160>)
 800ddda:	6013      	str	r3, [r2, #0]
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde0:	4613      	mov	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	4413      	add	r3, r2
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	4a1f      	ldr	r2, [pc, #124]	; (800de68 <xTaskIncrementTick+0x164>)
 800ddea:	441a      	add	r2, r3
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	3304      	adds	r3, #4
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	4610      	mov	r0, r2
 800ddf4:	f7fe fefb 	bl	800cbee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfc:	4b1b      	ldr	r3, [pc, #108]	; (800de6c <xTaskIncrementTick+0x168>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de02:	429a      	cmp	r2, r3
 800de04:	d3b8      	bcc.n	800dd78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800de06:	2301      	movs	r3, #1
 800de08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de0a:	e7b5      	b.n	800dd78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de0c:	4b17      	ldr	r3, [pc, #92]	; (800de6c <xTaskIncrementTick+0x168>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de12:	4915      	ldr	r1, [pc, #84]	; (800de68 <xTaskIncrementTick+0x164>)
 800de14:	4613      	mov	r3, r2
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	4413      	add	r3, r2
 800de1a:	009b      	lsls	r3, r3, #2
 800de1c:	440b      	add	r3, r1
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2b01      	cmp	r3, #1
 800de22:	d901      	bls.n	800de28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800de24:	2301      	movs	r3, #1
 800de26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de28:	4b11      	ldr	r3, [pc, #68]	; (800de70 <xTaskIncrementTick+0x16c>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d007      	beq.n	800de40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800de30:	2301      	movs	r3, #1
 800de32:	617b      	str	r3, [r7, #20]
 800de34:	e004      	b.n	800de40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800de36:	4b0f      	ldr	r3, [pc, #60]	; (800de74 <xTaskIncrementTick+0x170>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	3301      	adds	r3, #1
 800de3c:	4a0d      	ldr	r2, [pc, #52]	; (800de74 <xTaskIncrementTick+0x170>)
 800de3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800de40:	697b      	ldr	r3, [r7, #20]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3718      	adds	r7, #24
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	200124ec 	.word	0x200124ec
 800de50:	200124c8 	.word	0x200124c8
 800de54:	2001247c 	.word	0x2001247c
 800de58:	20012480 	.word	0x20012480
 800de5c:	200124dc 	.word	0x200124dc
 800de60:	200124e4 	.word	0x200124e4
 800de64:	200124cc 	.word	0x200124cc
 800de68:	20011ff4 	.word	0x20011ff4
 800de6c:	20011ff0 	.word	0x20011ff0
 800de70:	200124d8 	.word	0x200124d8
 800de74:	200124d4 	.word	0x200124d4

0800de78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de7e:	4b2a      	ldr	r3, [pc, #168]	; (800df28 <vTaskSwitchContext+0xb0>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d003      	beq.n	800de8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de86:	4b29      	ldr	r3, [pc, #164]	; (800df2c <vTaskSwitchContext+0xb4>)
 800de88:	2201      	movs	r2, #1
 800de8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de8c:	e046      	b.n	800df1c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800de8e:	4b27      	ldr	r3, [pc, #156]	; (800df2c <vTaskSwitchContext+0xb4>)
 800de90:	2200      	movs	r2, #0
 800de92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de94:	4b26      	ldr	r3, [pc, #152]	; (800df30 <vTaskSwitchContext+0xb8>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	60fb      	str	r3, [r7, #12]
 800de9a:	e010      	b.n	800debe <vTaskSwitchContext+0x46>
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d10a      	bne.n	800deb8 <vTaskSwitchContext+0x40>
	__asm volatile
 800dea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea6:	f383 8811 	msr	BASEPRI, r3
 800deaa:	f3bf 8f6f 	isb	sy
 800deae:	f3bf 8f4f 	dsb	sy
 800deb2:	607b      	str	r3, [r7, #4]
}
 800deb4:	bf00      	nop
 800deb6:	e7fe      	b.n	800deb6 <vTaskSwitchContext+0x3e>
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	3b01      	subs	r3, #1
 800debc:	60fb      	str	r3, [r7, #12]
 800debe:	491d      	ldr	r1, [pc, #116]	; (800df34 <vTaskSwitchContext+0xbc>)
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	4613      	mov	r3, r2
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	4413      	add	r3, r2
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	440b      	add	r3, r1
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d0e4      	beq.n	800de9c <vTaskSwitchContext+0x24>
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	4613      	mov	r3, r2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	4413      	add	r3, r2
 800deda:	009b      	lsls	r3, r3, #2
 800dedc:	4a15      	ldr	r2, [pc, #84]	; (800df34 <vTaskSwitchContext+0xbc>)
 800dede:	4413      	add	r3, r2
 800dee0:	60bb      	str	r3, [r7, #8]
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	685a      	ldr	r2, [r3, #4]
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	605a      	str	r2, [r3, #4]
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	685a      	ldr	r2, [r3, #4]
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	3308      	adds	r3, #8
 800def4:	429a      	cmp	r2, r3
 800def6:	d104      	bne.n	800df02 <vTaskSwitchContext+0x8a>
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	685a      	ldr	r2, [r3, #4]
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	605a      	str	r2, [r3, #4]
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	4a0b      	ldr	r2, [pc, #44]	; (800df38 <vTaskSwitchContext+0xc0>)
 800df0a:	6013      	str	r3, [r2, #0]
 800df0c:	4a08      	ldr	r2, [pc, #32]	; (800df30 <vTaskSwitchContext+0xb8>)
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df12:	4b09      	ldr	r3, [pc, #36]	; (800df38 <vTaskSwitchContext+0xc0>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3354      	adds	r3, #84	; 0x54
 800df18:	4a08      	ldr	r2, [pc, #32]	; (800df3c <vTaskSwitchContext+0xc4>)
 800df1a:	6013      	str	r3, [r2, #0]
}
 800df1c:	bf00      	nop
 800df1e:	3714      	adds	r7, #20
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr
 800df28:	200124ec 	.word	0x200124ec
 800df2c:	200124d8 	.word	0x200124d8
 800df30:	200124cc 	.word	0x200124cc
 800df34:	20011ff4 	.word	0x20011ff4
 800df38:	20011ff0 	.word	0x20011ff0
 800df3c:	20000884 	.word	0x20000884

0800df40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d10a      	bne.n	800df66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800df50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df54:	f383 8811 	msr	BASEPRI, r3
 800df58:	f3bf 8f6f 	isb	sy
 800df5c:	f3bf 8f4f 	dsb	sy
 800df60:	60fb      	str	r3, [r7, #12]
}
 800df62:	bf00      	nop
 800df64:	e7fe      	b.n	800df64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df66:	4b07      	ldr	r3, [pc, #28]	; (800df84 <vTaskPlaceOnEventList+0x44>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	3318      	adds	r3, #24
 800df6c:	4619      	mov	r1, r3
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7fe fe61 	bl	800cc36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df74:	2101      	movs	r1, #1
 800df76:	6838      	ldr	r0, [r7, #0]
 800df78:	f000 faa6 	bl	800e4c8 <prvAddCurrentTaskToDelayedList>
}
 800df7c:	bf00      	nop
 800df7e:	3710      	adds	r7, #16
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	20011ff0 	.word	0x20011ff0

0800df88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b086      	sub	sp, #24
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d10a      	bne.n	800dfb0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800df9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9e:	f383 8811 	msr	BASEPRI, r3
 800dfa2:	f3bf 8f6f 	isb	sy
 800dfa6:	f3bf 8f4f 	dsb	sy
 800dfaa:	617b      	str	r3, [r7, #20]
}
 800dfac:	bf00      	nop
 800dfae:	e7fe      	b.n	800dfae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfb0:	4b0a      	ldr	r3, [pc, #40]	; (800dfdc <vTaskPlaceOnEventListRestricted+0x54>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	3318      	adds	r3, #24
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f7fe fe18 	bl	800cbee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dfc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dfca:	6879      	ldr	r1, [r7, #4]
 800dfcc:	68b8      	ldr	r0, [r7, #8]
 800dfce:	f000 fa7b 	bl	800e4c8 <prvAddCurrentTaskToDelayedList>
	}
 800dfd2:	bf00      	nop
 800dfd4:	3718      	adds	r7, #24
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	20011ff0 	.word	0x20011ff0

0800dfe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d10a      	bne.n	800e00c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffa:	f383 8811 	msr	BASEPRI, r3
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	f3bf 8f4f 	dsb	sy
 800e006:	60fb      	str	r3, [r7, #12]
}
 800e008:	bf00      	nop
 800e00a:	e7fe      	b.n	800e00a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	3318      	adds	r3, #24
 800e010:	4618      	mov	r0, r3
 800e012:	f7fe fe49 	bl	800cca8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e016:	4b1e      	ldr	r3, [pc, #120]	; (800e090 <xTaskRemoveFromEventList+0xb0>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d11d      	bne.n	800e05a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	3304      	adds	r3, #4
 800e022:	4618      	mov	r0, r3
 800e024:	f7fe fe40 	bl	800cca8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e02c:	4b19      	ldr	r3, [pc, #100]	; (800e094 <xTaskRemoveFromEventList+0xb4>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	429a      	cmp	r2, r3
 800e032:	d903      	bls.n	800e03c <xTaskRemoveFromEventList+0x5c>
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e038:	4a16      	ldr	r2, [pc, #88]	; (800e094 <xTaskRemoveFromEventList+0xb4>)
 800e03a:	6013      	str	r3, [r2, #0]
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e040:	4613      	mov	r3, r2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	4413      	add	r3, r2
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	4a13      	ldr	r2, [pc, #76]	; (800e098 <xTaskRemoveFromEventList+0xb8>)
 800e04a:	441a      	add	r2, r3
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	3304      	adds	r3, #4
 800e050:	4619      	mov	r1, r3
 800e052:	4610      	mov	r0, r2
 800e054:	f7fe fdcb 	bl	800cbee <vListInsertEnd>
 800e058:	e005      	b.n	800e066 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	3318      	adds	r3, #24
 800e05e:	4619      	mov	r1, r3
 800e060:	480e      	ldr	r0, [pc, #56]	; (800e09c <xTaskRemoveFromEventList+0xbc>)
 800e062:	f7fe fdc4 	bl	800cbee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e06a:	4b0d      	ldr	r3, [pc, #52]	; (800e0a0 <xTaskRemoveFromEventList+0xc0>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e070:	429a      	cmp	r2, r3
 800e072:	d905      	bls.n	800e080 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e074:	2301      	movs	r3, #1
 800e076:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e078:	4b0a      	ldr	r3, [pc, #40]	; (800e0a4 <xTaskRemoveFromEventList+0xc4>)
 800e07a:	2201      	movs	r2, #1
 800e07c:	601a      	str	r2, [r3, #0]
 800e07e:	e001      	b.n	800e084 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e080:	2300      	movs	r3, #0
 800e082:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e084:	697b      	ldr	r3, [r7, #20]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3718      	adds	r7, #24
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	200124ec 	.word	0x200124ec
 800e094:	200124cc 	.word	0x200124cc
 800e098:	20011ff4 	.word	0x20011ff4
 800e09c:	20012484 	.word	0x20012484
 800e0a0:	20011ff0 	.word	0x20011ff0
 800e0a4:	200124d8 	.word	0x200124d8

0800e0a8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d10a      	bne.n	800e0cc <vTaskSetTimeOutState+0x24>
	__asm volatile
 800e0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ba:	f383 8811 	msr	BASEPRI, r3
 800e0be:	f3bf 8f6f 	isb	sy
 800e0c2:	f3bf 8f4f 	dsb	sy
 800e0c6:	60fb      	str	r3, [r7, #12]
}
 800e0c8:	bf00      	nop
 800e0ca:	e7fe      	b.n	800e0ca <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800e0cc:	f000 feca 	bl	800ee64 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0d0:	4b06      	ldr	r3, [pc, #24]	; (800e0ec <vTaskSetTimeOutState+0x44>)
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800e0d8:	4b05      	ldr	r3, [pc, #20]	; (800e0f0 <vTaskSetTimeOutState+0x48>)
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800e0e0:	f000 fef0 	bl	800eec4 <vPortExitCritical>
}
 800e0e4:	bf00      	nop
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	200124dc 	.word	0x200124dc
 800e0f0:	200124c8 	.word	0x200124c8

0800e0f4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0fc:	4b06      	ldr	r3, [pc, #24]	; (800e118 <vTaskInternalSetTimeOutState+0x24>)
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e104:	4b05      	ldr	r3, [pc, #20]	; (800e11c <vTaskInternalSetTimeOutState+0x28>)
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	605a      	str	r2, [r3, #4]
}
 800e10c:	bf00      	nop
 800e10e:	370c      	adds	r7, #12
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr
 800e118:	200124dc 	.word	0x200124dc
 800e11c:	200124c8 	.word	0x200124c8

0800e120 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b088      	sub	sp, #32
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10a      	bne.n	800e146 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e134:	f383 8811 	msr	BASEPRI, r3
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	613b      	str	r3, [r7, #16]
}
 800e142:	bf00      	nop
 800e144:	e7fe      	b.n	800e144 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d10a      	bne.n	800e162 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e150:	f383 8811 	msr	BASEPRI, r3
 800e154:	f3bf 8f6f 	isb	sy
 800e158:	f3bf 8f4f 	dsb	sy
 800e15c:	60fb      	str	r3, [r7, #12]
}
 800e15e:	bf00      	nop
 800e160:	e7fe      	b.n	800e160 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e162:	f000 fe7f 	bl	800ee64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e166:	4b1d      	ldr	r3, [pc, #116]	; (800e1dc <xTaskCheckForTimeOut+0xbc>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	69ba      	ldr	r2, [r7, #24]
 800e172:	1ad3      	subs	r3, r2, r3
 800e174:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e17e:	d102      	bne.n	800e186 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e180:	2300      	movs	r3, #0
 800e182:	61fb      	str	r3, [r7, #28]
 800e184:	e023      	b.n	800e1ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	4b15      	ldr	r3, [pc, #84]	; (800e1e0 <xTaskCheckForTimeOut+0xc0>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d007      	beq.n	800e1a2 <xTaskCheckForTimeOut+0x82>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	69ba      	ldr	r2, [r7, #24]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d302      	bcc.n	800e1a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e19c:	2301      	movs	r3, #1
 800e19e:	61fb      	str	r3, [r7, #28]
 800e1a0:	e015      	b.n	800e1ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	697a      	ldr	r2, [r7, #20]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d20b      	bcs.n	800e1c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	1ad2      	subs	r2, r2, r3
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7ff ff9b 	bl	800e0f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	61fb      	str	r3, [r7, #28]
 800e1c2:	e004      	b.n	800e1ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e1ce:	f000 fe79 	bl	800eec4 <vPortExitCritical>

	return xReturn;
 800e1d2:	69fb      	ldr	r3, [r7, #28]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3720      	adds	r7, #32
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	200124c8 	.word	0x200124c8
 800e1e0:	200124dc 	.word	0x200124dc

0800e1e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e1e8:	4b03      	ldr	r3, [pc, #12]	; (800e1f8 <vTaskMissedYield+0x14>)
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	601a      	str	r2, [r3, #0]
}
 800e1ee:	bf00      	nop
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr
 800e1f8:	200124d8 	.word	0x200124d8

0800e1fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e204:	f000 f852 	bl	800e2ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e208:	4b06      	ldr	r3, [pc, #24]	; (800e224 <prvIdleTask+0x28>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d9f9      	bls.n	800e204 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e210:	4b05      	ldr	r3, [pc, #20]	; (800e228 <prvIdleTask+0x2c>)
 800e212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e216:	601a      	str	r2, [r3, #0]
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e220:	e7f0      	b.n	800e204 <prvIdleTask+0x8>
 800e222:	bf00      	nop
 800e224:	20011ff4 	.word	0x20011ff4
 800e228:	e000ed04 	.word	0xe000ed04

0800e22c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e232:	2300      	movs	r3, #0
 800e234:	607b      	str	r3, [r7, #4]
 800e236:	e00c      	b.n	800e252 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	4613      	mov	r3, r2
 800e23c:	009b      	lsls	r3, r3, #2
 800e23e:	4413      	add	r3, r2
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	4a12      	ldr	r2, [pc, #72]	; (800e28c <prvInitialiseTaskLists+0x60>)
 800e244:	4413      	add	r3, r2
 800e246:	4618      	mov	r0, r3
 800e248:	f7fe fca4 	bl	800cb94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	3301      	adds	r3, #1
 800e250:	607b      	str	r3, [r7, #4]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b37      	cmp	r3, #55	; 0x37
 800e256:	d9ef      	bls.n	800e238 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e258:	480d      	ldr	r0, [pc, #52]	; (800e290 <prvInitialiseTaskLists+0x64>)
 800e25a:	f7fe fc9b 	bl	800cb94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e25e:	480d      	ldr	r0, [pc, #52]	; (800e294 <prvInitialiseTaskLists+0x68>)
 800e260:	f7fe fc98 	bl	800cb94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e264:	480c      	ldr	r0, [pc, #48]	; (800e298 <prvInitialiseTaskLists+0x6c>)
 800e266:	f7fe fc95 	bl	800cb94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e26a:	480c      	ldr	r0, [pc, #48]	; (800e29c <prvInitialiseTaskLists+0x70>)
 800e26c:	f7fe fc92 	bl	800cb94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e270:	480b      	ldr	r0, [pc, #44]	; (800e2a0 <prvInitialiseTaskLists+0x74>)
 800e272:	f7fe fc8f 	bl	800cb94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e276:	4b0b      	ldr	r3, [pc, #44]	; (800e2a4 <prvInitialiseTaskLists+0x78>)
 800e278:	4a05      	ldr	r2, [pc, #20]	; (800e290 <prvInitialiseTaskLists+0x64>)
 800e27a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e27c:	4b0a      	ldr	r3, [pc, #40]	; (800e2a8 <prvInitialiseTaskLists+0x7c>)
 800e27e:	4a05      	ldr	r2, [pc, #20]	; (800e294 <prvInitialiseTaskLists+0x68>)
 800e280:	601a      	str	r2, [r3, #0]
}
 800e282:	bf00      	nop
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	20011ff4 	.word	0x20011ff4
 800e290:	20012454 	.word	0x20012454
 800e294:	20012468 	.word	0x20012468
 800e298:	20012484 	.word	0x20012484
 800e29c:	20012498 	.word	0x20012498
 800e2a0:	200124b0 	.word	0x200124b0
 800e2a4:	2001247c 	.word	0x2001247c
 800e2a8:	20012480 	.word	0x20012480

0800e2ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2b2:	e019      	b.n	800e2e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e2b4:	f000 fdd6 	bl	800ee64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2b8:	4b10      	ldr	r3, [pc, #64]	; (800e2fc <prvCheckTasksWaitingTermination+0x50>)
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	68db      	ldr	r3, [r3, #12]
 800e2be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	3304      	adds	r3, #4
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7fe fcef 	bl	800cca8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e2ca:	4b0d      	ldr	r3, [pc, #52]	; (800e300 <prvCheckTasksWaitingTermination+0x54>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	3b01      	subs	r3, #1
 800e2d0:	4a0b      	ldr	r2, [pc, #44]	; (800e300 <prvCheckTasksWaitingTermination+0x54>)
 800e2d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e2d4:	4b0b      	ldr	r3, [pc, #44]	; (800e304 <prvCheckTasksWaitingTermination+0x58>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	4a0a      	ldr	r2, [pc, #40]	; (800e304 <prvCheckTasksWaitingTermination+0x58>)
 800e2dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e2de:	f000 fdf1 	bl	800eec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 f810 	bl	800e308 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2e8:	4b06      	ldr	r3, [pc, #24]	; (800e304 <prvCheckTasksWaitingTermination+0x58>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d1e1      	bne.n	800e2b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e2f0:	bf00      	nop
 800e2f2:	bf00      	nop
 800e2f4:	3708      	adds	r7, #8
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	20012498 	.word	0x20012498
 800e300:	200124c4 	.word	0x200124c4
 800e304:	200124ac 	.word	0x200124ac

0800e308 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	3354      	adds	r3, #84	; 0x54
 800e314:	4618      	mov	r0, r3
 800e316:	f00c fbf7 	bl	801ab08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e320:	2b00      	cmp	r3, #0
 800e322:	d108      	bne.n	800e336 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e328:	4618      	mov	r0, r3
 800e32a:	f000 ff89 	bl	800f240 <vPortFree>
				vPortFree( pxTCB );
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 ff86 	bl	800f240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e334:	e018      	b.n	800e368 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d103      	bne.n	800e348 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 ff7d 	bl	800f240 <vPortFree>
	}
 800e346:	e00f      	b.n	800e368 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e34e:	2b02      	cmp	r3, #2
 800e350:	d00a      	beq.n	800e368 <prvDeleteTCB+0x60>
	__asm volatile
 800e352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e356:	f383 8811 	msr	BASEPRI, r3
 800e35a:	f3bf 8f6f 	isb	sy
 800e35e:	f3bf 8f4f 	dsb	sy
 800e362:	60fb      	str	r3, [r7, #12]
}
 800e364:	bf00      	nop
 800e366:	e7fe      	b.n	800e366 <prvDeleteTCB+0x5e>
	}
 800e368:	bf00      	nop
 800e36a:	3710      	adds	r7, #16
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e376:	4b0c      	ldr	r3, [pc, #48]	; (800e3a8 <prvResetNextTaskUnblockTime+0x38>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d104      	bne.n	800e38a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e380:	4b0a      	ldr	r3, [pc, #40]	; (800e3ac <prvResetNextTaskUnblockTime+0x3c>)
 800e382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e386:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e388:	e008      	b.n	800e39c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e38a:	4b07      	ldr	r3, [pc, #28]	; (800e3a8 <prvResetNextTaskUnblockTime+0x38>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	4a04      	ldr	r2, [pc, #16]	; (800e3ac <prvResetNextTaskUnblockTime+0x3c>)
 800e39a:	6013      	str	r3, [r2, #0]
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr
 800e3a8:	2001247c 	.word	0x2001247c
 800e3ac:	200124e4 	.word	0x200124e4

0800e3b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b083      	sub	sp, #12
 800e3b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e3b6:	4b0b      	ldr	r3, [pc, #44]	; (800e3e4 <xTaskGetSchedulerState+0x34>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d102      	bne.n	800e3c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e3be:	2301      	movs	r3, #1
 800e3c0:	607b      	str	r3, [r7, #4]
 800e3c2:	e008      	b.n	800e3d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3c4:	4b08      	ldr	r3, [pc, #32]	; (800e3e8 <xTaskGetSchedulerState+0x38>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d102      	bne.n	800e3d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e3cc:	2302      	movs	r3, #2
 800e3ce:	607b      	str	r3, [r7, #4]
 800e3d0:	e001      	b.n	800e3d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e3d6:	687b      	ldr	r3, [r7, #4]
	}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	200124d0 	.word	0x200124d0
 800e3e8:	200124ec 	.word	0x200124ec

0800e3ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b086      	sub	sp, #24
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d056      	beq.n	800e4b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e402:	4b2e      	ldr	r3, [pc, #184]	; (800e4bc <xTaskPriorityDisinherit+0xd0>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	693a      	ldr	r2, [r7, #16]
 800e408:	429a      	cmp	r2, r3
 800e40a:	d00a      	beq.n	800e422 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e410:	f383 8811 	msr	BASEPRI, r3
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	f3bf 8f4f 	dsb	sy
 800e41c:	60fb      	str	r3, [r7, #12]
}
 800e41e:	bf00      	nop
 800e420:	e7fe      	b.n	800e420 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e426:	2b00      	cmp	r3, #0
 800e428:	d10a      	bne.n	800e440 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e42e:	f383 8811 	msr	BASEPRI, r3
 800e432:	f3bf 8f6f 	isb	sy
 800e436:	f3bf 8f4f 	dsb	sy
 800e43a:	60bb      	str	r3, [r7, #8]
}
 800e43c:	bf00      	nop
 800e43e:	e7fe      	b.n	800e43e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e444:	1e5a      	subs	r2, r3, #1
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e452:	429a      	cmp	r2, r3
 800e454:	d02c      	beq.n	800e4b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d128      	bne.n	800e4b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	3304      	adds	r3, #4
 800e462:	4618      	mov	r0, r3
 800e464:	f7fe fc20 	bl	800cca8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e474:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e480:	4b0f      	ldr	r3, [pc, #60]	; (800e4c0 <xTaskPriorityDisinherit+0xd4>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	429a      	cmp	r2, r3
 800e486:	d903      	bls.n	800e490 <xTaskPriorityDisinherit+0xa4>
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e48c:	4a0c      	ldr	r2, [pc, #48]	; (800e4c0 <xTaskPriorityDisinherit+0xd4>)
 800e48e:	6013      	str	r3, [r2, #0]
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e494:	4613      	mov	r3, r2
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	4413      	add	r3, r2
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	4a09      	ldr	r2, [pc, #36]	; (800e4c4 <xTaskPriorityDisinherit+0xd8>)
 800e49e:	441a      	add	r2, r3
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	3304      	adds	r3, #4
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	4610      	mov	r0, r2
 800e4a8:	f7fe fba1 	bl	800cbee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e4b0:	697b      	ldr	r3, [r7, #20]
	}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3718      	adds	r7, #24
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	20011ff0 	.word	0x20011ff0
 800e4c0:	200124cc 	.word	0x200124cc
 800e4c4:	20011ff4 	.word	0x20011ff4

0800e4c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e4d2:	4b21      	ldr	r3, [pc, #132]	; (800e558 <prvAddCurrentTaskToDelayedList+0x90>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4d8:	4b20      	ldr	r3, [pc, #128]	; (800e55c <prvAddCurrentTaskToDelayedList+0x94>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	3304      	adds	r3, #4
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fe fbe2 	bl	800cca8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4ea:	d10a      	bne.n	800e502 <prvAddCurrentTaskToDelayedList+0x3a>
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d007      	beq.n	800e502 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4f2:	4b1a      	ldr	r3, [pc, #104]	; (800e55c <prvAddCurrentTaskToDelayedList+0x94>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	4819      	ldr	r0, [pc, #100]	; (800e560 <prvAddCurrentTaskToDelayedList+0x98>)
 800e4fc:	f7fe fb77 	bl	800cbee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e500:	e026      	b.n	800e550 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e502:	68fa      	ldr	r2, [r7, #12]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	4413      	add	r3, r2
 800e508:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e50a:	4b14      	ldr	r3, [pc, #80]	; (800e55c <prvAddCurrentTaskToDelayedList+0x94>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e512:	68ba      	ldr	r2, [r7, #8]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	429a      	cmp	r2, r3
 800e518:	d209      	bcs.n	800e52e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e51a:	4b12      	ldr	r3, [pc, #72]	; (800e564 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	4b0f      	ldr	r3, [pc, #60]	; (800e55c <prvAddCurrentTaskToDelayedList+0x94>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	3304      	adds	r3, #4
 800e524:	4619      	mov	r1, r3
 800e526:	4610      	mov	r0, r2
 800e528:	f7fe fb85 	bl	800cc36 <vListInsert>
}
 800e52c:	e010      	b.n	800e550 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e52e:	4b0e      	ldr	r3, [pc, #56]	; (800e568 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e530:	681a      	ldr	r2, [r3, #0]
 800e532:	4b0a      	ldr	r3, [pc, #40]	; (800e55c <prvAddCurrentTaskToDelayedList+0x94>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	3304      	adds	r3, #4
 800e538:	4619      	mov	r1, r3
 800e53a:	4610      	mov	r0, r2
 800e53c:	f7fe fb7b 	bl	800cc36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e540:	4b0a      	ldr	r3, [pc, #40]	; (800e56c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	68ba      	ldr	r2, [r7, #8]
 800e546:	429a      	cmp	r2, r3
 800e548:	d202      	bcs.n	800e550 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e54a:	4a08      	ldr	r2, [pc, #32]	; (800e56c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	6013      	str	r3, [r2, #0]
}
 800e550:	bf00      	nop
 800e552:	3710      	adds	r7, #16
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	200124c8 	.word	0x200124c8
 800e55c:	20011ff0 	.word	0x20011ff0
 800e560:	200124b0 	.word	0x200124b0
 800e564:	20012480 	.word	0x20012480
 800e568:	2001247c 	.word	0x2001247c
 800e56c:	200124e4 	.word	0x200124e4

0800e570 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b08a      	sub	sp, #40	; 0x28
 800e574:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e576:	2300      	movs	r3, #0
 800e578:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e57a:	f000 fb07 	bl	800eb8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e57e:	4b1c      	ldr	r3, [pc, #112]	; (800e5f0 <xTimerCreateTimerTask+0x80>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d021      	beq.n	800e5ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e586:	2300      	movs	r3, #0
 800e588:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e58a:	2300      	movs	r3, #0
 800e58c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e58e:	1d3a      	adds	r2, r7, #4
 800e590:	f107 0108 	add.w	r1, r7, #8
 800e594:	f107 030c 	add.w	r3, r7, #12
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fe fae1 	bl	800cb60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e59e:	6879      	ldr	r1, [r7, #4]
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	68fa      	ldr	r2, [r7, #12]
 800e5a4:	9202      	str	r2, [sp, #8]
 800e5a6:	9301      	str	r3, [sp, #4]
 800e5a8:	2302      	movs	r3, #2
 800e5aa:	9300      	str	r3, [sp, #0]
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	460a      	mov	r2, r1
 800e5b0:	4910      	ldr	r1, [pc, #64]	; (800e5f4 <xTimerCreateTimerTask+0x84>)
 800e5b2:	4811      	ldr	r0, [pc, #68]	; (800e5f8 <xTimerCreateTimerTask+0x88>)
 800e5b4:	f7ff f88e 	bl	800d6d4 <xTaskCreateStatic>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	4a10      	ldr	r2, [pc, #64]	; (800e5fc <xTimerCreateTimerTask+0x8c>)
 800e5bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e5be:	4b0f      	ldr	r3, [pc, #60]	; (800e5fc <xTimerCreateTimerTask+0x8c>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d001      	beq.n	800e5ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d10a      	bne.n	800e5e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d4:	f383 8811 	msr	BASEPRI, r3
 800e5d8:	f3bf 8f6f 	isb	sy
 800e5dc:	f3bf 8f4f 	dsb	sy
 800e5e0:	613b      	str	r3, [r7, #16]
}
 800e5e2:	bf00      	nop
 800e5e4:	e7fe      	b.n	800e5e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e5e6:	697b      	ldr	r3, [r7, #20]
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3718      	adds	r7, #24
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	20012520 	.word	0x20012520
 800e5f4:	0801be78 	.word	0x0801be78
 800e5f8:	0800e735 	.word	0x0800e735
 800e5fc:	20012524 	.word	0x20012524

0800e600 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b08a      	sub	sp, #40	; 0x28
 800e604:	af00      	add	r7, sp, #0
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	607a      	str	r2, [r7, #4]
 800e60c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e60e:	2300      	movs	r3, #0
 800e610:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10a      	bne.n	800e62e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	623b      	str	r3, [r7, #32]
}
 800e62a:	bf00      	nop
 800e62c:	e7fe      	b.n	800e62c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e62e:	4b1a      	ldr	r3, [pc, #104]	; (800e698 <xTimerGenericCommand+0x98>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d02a      	beq.n	800e68c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	2b05      	cmp	r3, #5
 800e646:	dc18      	bgt.n	800e67a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e648:	f7ff feb2 	bl	800e3b0 <xTaskGetSchedulerState>
 800e64c:	4603      	mov	r3, r0
 800e64e:	2b02      	cmp	r3, #2
 800e650:	d109      	bne.n	800e666 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e652:	4b11      	ldr	r3, [pc, #68]	; (800e698 <xTimerGenericCommand+0x98>)
 800e654:	6818      	ldr	r0, [r3, #0]
 800e656:	f107 0110 	add.w	r1, r7, #16
 800e65a:	2300      	movs	r3, #0
 800e65c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e65e:	f7fe fc51 	bl	800cf04 <xQueueGenericSend>
 800e662:	6278      	str	r0, [r7, #36]	; 0x24
 800e664:	e012      	b.n	800e68c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e666:	4b0c      	ldr	r3, [pc, #48]	; (800e698 <xTimerGenericCommand+0x98>)
 800e668:	6818      	ldr	r0, [r3, #0]
 800e66a:	f107 0110 	add.w	r1, r7, #16
 800e66e:	2300      	movs	r3, #0
 800e670:	2200      	movs	r2, #0
 800e672:	f7fe fc47 	bl	800cf04 <xQueueGenericSend>
 800e676:	6278      	str	r0, [r7, #36]	; 0x24
 800e678:	e008      	b.n	800e68c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e67a:	4b07      	ldr	r3, [pc, #28]	; (800e698 <xTimerGenericCommand+0x98>)
 800e67c:	6818      	ldr	r0, [r3, #0]
 800e67e:	f107 0110 	add.w	r1, r7, #16
 800e682:	2300      	movs	r3, #0
 800e684:	683a      	ldr	r2, [r7, #0]
 800e686:	f7fe fd3b 	bl	800d100 <xQueueGenericSendFromISR>
 800e68a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3728      	adds	r7, #40	; 0x28
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	20012520 	.word	0x20012520

0800e69c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b088      	sub	sp, #32
 800e6a0:	af02      	add	r7, sp, #8
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6a6:	4b22      	ldr	r3, [pc, #136]	; (800e730 <prvProcessExpiredTimer+0x94>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	3304      	adds	r3, #4
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fe faf7 	bl	800cca8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6c0:	f003 0304 	and.w	r3, r3, #4
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d022      	beq.n	800e70e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	699a      	ldr	r2, [r3, #24]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	18d1      	adds	r1, r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	683a      	ldr	r2, [r7, #0]
 800e6d4:	6978      	ldr	r0, [r7, #20]
 800e6d6:	f000 f8d1 	bl	800e87c <prvInsertTimerInActiveList>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d01f      	beq.n	800e720 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	6978      	ldr	r0, [r7, #20]
 800e6ec:	f7ff ff88 	bl	800e600 <xTimerGenericCommand>
 800e6f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d113      	bne.n	800e720 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fc:	f383 8811 	msr	BASEPRI, r3
 800e700:	f3bf 8f6f 	isb	sy
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	60fb      	str	r3, [r7, #12]
}
 800e70a:	bf00      	nop
 800e70c:	e7fe      	b.n	800e70c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e714:	f023 0301 	bic.w	r3, r3, #1
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	6a1b      	ldr	r3, [r3, #32]
 800e724:	6978      	ldr	r0, [r7, #20]
 800e726:	4798      	blx	r3
}
 800e728:	bf00      	nop
 800e72a:	3718      	adds	r7, #24
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	20012518 	.word	0x20012518

0800e734 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e73c:	f107 0308 	add.w	r3, r7, #8
 800e740:	4618      	mov	r0, r3
 800e742:	f000 f857 	bl	800e7f4 <prvGetNextExpireTime>
 800e746:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	4619      	mov	r1, r3
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f000 f803 	bl	800e758 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e752:	f000 f8d5 	bl	800e900 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e756:	e7f1      	b.n	800e73c <prvTimerTask+0x8>

0800e758 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e762:	f7ff fa13 	bl	800db8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e766:	f107 0308 	add.w	r3, r7, #8
 800e76a:	4618      	mov	r0, r3
 800e76c:	f000 f866 	bl	800e83c <prvSampleTimeNow>
 800e770:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d130      	bne.n	800e7da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d10a      	bne.n	800e794 <prvProcessTimerOrBlockTask+0x3c>
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	429a      	cmp	r2, r3
 800e784:	d806      	bhi.n	800e794 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e786:	f7ff fa0f 	bl	800dba8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e78a:	68f9      	ldr	r1, [r7, #12]
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f7ff ff85 	bl	800e69c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e792:	e024      	b.n	800e7de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d008      	beq.n	800e7ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e79a:	4b13      	ldr	r3, [pc, #76]	; (800e7e8 <prvProcessTimerOrBlockTask+0x90>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d101      	bne.n	800e7a8 <prvProcessTimerOrBlockTask+0x50>
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	e000      	b.n	800e7aa <prvProcessTimerOrBlockTask+0x52>
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e7ac:	4b0f      	ldr	r3, [pc, #60]	; (800e7ec <prvProcessTimerOrBlockTask+0x94>)
 800e7ae:	6818      	ldr	r0, [r3, #0]
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	1ad3      	subs	r3, r2, r3
 800e7b6:	683a      	ldr	r2, [r7, #0]
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	f7fe ff57 	bl	800d66c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e7be:	f7ff f9f3 	bl	800dba8 <xTaskResumeAll>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d10a      	bne.n	800e7de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e7c8:	4b09      	ldr	r3, [pc, #36]	; (800e7f0 <prvProcessTimerOrBlockTask+0x98>)
 800e7ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7ce:	601a      	str	r2, [r3, #0]
 800e7d0:	f3bf 8f4f 	dsb	sy
 800e7d4:	f3bf 8f6f 	isb	sy
}
 800e7d8:	e001      	b.n	800e7de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e7da:	f7ff f9e5 	bl	800dba8 <xTaskResumeAll>
}
 800e7de:	bf00      	nop
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	2001251c 	.word	0x2001251c
 800e7ec:	20012520 	.word	0x20012520
 800e7f0:	e000ed04 	.word	0xe000ed04

0800e7f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e7fc:	4b0e      	ldr	r3, [pc, #56]	; (800e838 <prvGetNextExpireTime+0x44>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <prvGetNextExpireTime+0x16>
 800e806:	2201      	movs	r2, #1
 800e808:	e000      	b.n	800e80c <prvGetNextExpireTime+0x18>
 800e80a:	2200      	movs	r2, #0
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d105      	bne.n	800e824 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e818:	4b07      	ldr	r3, [pc, #28]	; (800e838 <prvGetNextExpireTime+0x44>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	60fb      	str	r3, [r7, #12]
 800e822:	e001      	b.n	800e828 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e824:	2300      	movs	r3, #0
 800e826:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e828:	68fb      	ldr	r3, [r7, #12]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3714      	adds	r7, #20
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	20012518 	.word	0x20012518

0800e83c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e844:	f7ff fa4e 	bl	800dce4 <xTaskGetTickCount>
 800e848:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e84a:	4b0b      	ldr	r3, [pc, #44]	; (800e878 <prvSampleTimeNow+0x3c>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	429a      	cmp	r2, r3
 800e852:	d205      	bcs.n	800e860 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e854:	f000 f936 	bl	800eac4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2201      	movs	r2, #1
 800e85c:	601a      	str	r2, [r3, #0]
 800e85e:	e002      	b.n	800e866 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e866:	4a04      	ldr	r2, [pc, #16]	; (800e878 <prvSampleTimeNow+0x3c>)
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e86c:	68fb      	ldr	r3, [r7, #12]
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	20012528 	.word	0x20012528

0800e87c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b086      	sub	sp, #24
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e88a:	2300      	movs	r3, #0
 800e88c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	68fa      	ldr	r2, [r7, #12]
 800e898:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d812      	bhi.n	800e8c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	1ad2      	subs	r2, r2, r3
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	699b      	ldr	r3, [r3, #24]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d302      	bcc.n	800e8b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	617b      	str	r3, [r7, #20]
 800e8b4:	e01b      	b.n	800e8ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e8b6:	4b10      	ldr	r3, [pc, #64]	; (800e8f8 <prvInsertTimerInActiveList+0x7c>)
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	3304      	adds	r3, #4
 800e8be:	4619      	mov	r1, r3
 800e8c0:	4610      	mov	r0, r2
 800e8c2:	f7fe f9b8 	bl	800cc36 <vListInsert>
 800e8c6:	e012      	b.n	800e8ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e8c8:	687a      	ldr	r2, [r7, #4]
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d206      	bcs.n	800e8de <prvInsertTimerInActiveList+0x62>
 800e8d0:	68ba      	ldr	r2, [r7, #8]
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d302      	bcc.n	800e8de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	617b      	str	r3, [r7, #20]
 800e8dc:	e007      	b.n	800e8ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8de:	4b07      	ldr	r3, [pc, #28]	; (800e8fc <prvInsertTimerInActiveList+0x80>)
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	3304      	adds	r3, #4
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	4610      	mov	r0, r2
 800e8ea:	f7fe f9a4 	bl	800cc36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e8ee:	697b      	ldr	r3, [r7, #20]
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3718      	adds	r7, #24
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	2001251c 	.word	0x2001251c
 800e8fc:	20012518 	.word	0x20012518

0800e900 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b08e      	sub	sp, #56	; 0x38
 800e904:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e906:	e0ca      	b.n	800ea9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	da18      	bge.n	800e940 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e90e:	1d3b      	adds	r3, r7, #4
 800e910:	3304      	adds	r3, #4
 800e912:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e916:	2b00      	cmp	r3, #0
 800e918:	d10a      	bne.n	800e930 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91e:	f383 8811 	msr	BASEPRI, r3
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	f3bf 8f4f 	dsb	sy
 800e92a:	61fb      	str	r3, [r7, #28]
}
 800e92c:	bf00      	nop
 800e92e:	e7fe      	b.n	800e92e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e936:	6850      	ldr	r0, [r2, #4]
 800e938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e93a:	6892      	ldr	r2, [r2, #8]
 800e93c:	4611      	mov	r1, r2
 800e93e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	f2c0 80aa 	blt.w	800ea9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94e:	695b      	ldr	r3, [r3, #20]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d004      	beq.n	800e95e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e956:	3304      	adds	r3, #4
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fe f9a5 	bl	800cca8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e95e:	463b      	mov	r3, r7
 800e960:	4618      	mov	r0, r3
 800e962:	f7ff ff6b 	bl	800e83c <prvSampleTimeNow>
 800e966:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2b09      	cmp	r3, #9
 800e96c:	f200 8097 	bhi.w	800ea9e <prvProcessReceivedCommands+0x19e>
 800e970:	a201      	add	r2, pc, #4	; (adr r2, 800e978 <prvProcessReceivedCommands+0x78>)
 800e972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e976:	bf00      	nop
 800e978:	0800e9a1 	.word	0x0800e9a1
 800e97c:	0800e9a1 	.word	0x0800e9a1
 800e980:	0800e9a1 	.word	0x0800e9a1
 800e984:	0800ea15 	.word	0x0800ea15
 800e988:	0800ea29 	.word	0x0800ea29
 800e98c:	0800ea73 	.word	0x0800ea73
 800e990:	0800e9a1 	.word	0x0800e9a1
 800e994:	0800e9a1 	.word	0x0800e9a1
 800e998:	0800ea15 	.word	0x0800ea15
 800e99c:	0800ea29 	.word	0x0800ea29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9a6:	f043 0301 	orr.w	r3, r3, #1
 800e9aa:	b2da      	uxtb	r2, r3
 800e9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e9b2:	68ba      	ldr	r2, [r7, #8]
 800e9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b6:	699b      	ldr	r3, [r3, #24]
 800e9b8:	18d1      	adds	r1, r2, r3
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9c0:	f7ff ff5c 	bl	800e87c <prvInsertTimerInActiveList>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d069      	beq.n	800ea9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9cc:	6a1b      	ldr	r3, [r3, #32]
 800e9ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9d8:	f003 0304 	and.w	r3, r3, #4
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d05e      	beq.n	800ea9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e9e0:	68ba      	ldr	r2, [r7, #8]
 800e9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e4:	699b      	ldr	r3, [r3, #24]
 800e9e6:	441a      	add	r2, r3
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	9300      	str	r3, [sp, #0]
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	2100      	movs	r1, #0
 800e9f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9f2:	f7ff fe05 	bl	800e600 <xTimerGenericCommand>
 800e9f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e9f8:	6a3b      	ldr	r3, [r7, #32]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d14f      	bne.n	800ea9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea02:	f383 8811 	msr	BASEPRI, r3
 800ea06:	f3bf 8f6f 	isb	sy
 800ea0a:	f3bf 8f4f 	dsb	sy
 800ea0e:	61bb      	str	r3, [r7, #24]
}
 800ea10:	bf00      	nop
 800ea12:	e7fe      	b.n	800ea12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea1a:	f023 0301 	bic.w	r3, r3, #1
 800ea1e:	b2da      	uxtb	r2, r3
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ea26:	e03a      	b.n	800ea9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea2e:	f043 0301 	orr.w	r3, r3, #1
 800ea32:	b2da      	uxtb	r2, r3
 800ea34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ea3a:	68ba      	ldr	r2, [r7, #8]
 800ea3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ea40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea42:	699b      	ldr	r3, [r3, #24]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d10a      	bne.n	800ea5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ea48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4c:	f383 8811 	msr	BASEPRI, r3
 800ea50:	f3bf 8f6f 	isb	sy
 800ea54:	f3bf 8f4f 	dsb	sy
 800ea58:	617b      	str	r3, [r7, #20]
}
 800ea5a:	bf00      	nop
 800ea5c:	e7fe      	b.n	800ea5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea60:	699a      	ldr	r2, [r3, #24]
 800ea62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea64:	18d1      	adds	r1, r2, r3
 800ea66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea6c:	f7ff ff06 	bl	800e87c <prvInsertTimerInActiveList>
					break;
 800ea70:	e015      	b.n	800ea9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea78:	f003 0302 	and.w	r3, r3, #2
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d103      	bne.n	800ea88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ea80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea82:	f000 fbdd 	bl	800f240 <vPortFree>
 800ea86:	e00a      	b.n	800ea9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea8e:	f023 0301 	bic.w	r3, r3, #1
 800ea92:	b2da      	uxtb	r2, r3
 800ea94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ea9a:	e000      	b.n	800ea9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ea9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea9e:	4b08      	ldr	r3, [pc, #32]	; (800eac0 <prvProcessReceivedCommands+0x1c0>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	1d39      	adds	r1, r7, #4
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7fe fbc6 	bl	800d238 <xQueueReceive>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	f47f af2a 	bne.w	800e908 <prvProcessReceivedCommands+0x8>
	}
}
 800eab4:	bf00      	nop
 800eab6:	bf00      	nop
 800eab8:	3730      	adds	r7, #48	; 0x30
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	20012520 	.word	0x20012520

0800eac4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b088      	sub	sp, #32
 800eac8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eaca:	e048      	b.n	800eb5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eacc:	4b2d      	ldr	r3, [pc, #180]	; (800eb84 <prvSwitchTimerLists+0xc0>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ead6:	4b2b      	ldr	r3, [pc, #172]	; (800eb84 <prvSwitchTimerLists+0xc0>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	68db      	ldr	r3, [r3, #12]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	3304      	adds	r3, #4
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7fe f8df 	bl	800cca8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	6a1b      	ldr	r3, [r3, #32]
 800eaee:	68f8      	ldr	r0, [r7, #12]
 800eaf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eaf8:	f003 0304 	and.w	r3, r3, #4
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d02e      	beq.n	800eb5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	699b      	ldr	r3, [r3, #24]
 800eb04:	693a      	ldr	r2, [r7, #16]
 800eb06:	4413      	add	r3, r2
 800eb08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d90e      	bls.n	800eb30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	68ba      	ldr	r2, [r7, #8]
 800eb16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	68fa      	ldr	r2, [r7, #12]
 800eb1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb1e:	4b19      	ldr	r3, [pc, #100]	; (800eb84 <prvSwitchTimerLists+0xc0>)
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	3304      	adds	r3, #4
 800eb26:	4619      	mov	r1, r3
 800eb28:	4610      	mov	r0, r2
 800eb2a:	f7fe f884 	bl	800cc36 <vListInsert>
 800eb2e:	e016      	b.n	800eb5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb30:	2300      	movs	r3, #0
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	2300      	movs	r3, #0
 800eb36:	693a      	ldr	r2, [r7, #16]
 800eb38:	2100      	movs	r1, #0
 800eb3a:	68f8      	ldr	r0, [r7, #12]
 800eb3c:	f7ff fd60 	bl	800e600 <xTimerGenericCommand>
 800eb40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d10a      	bne.n	800eb5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4c:	f383 8811 	msr	BASEPRI, r3
 800eb50:	f3bf 8f6f 	isb	sy
 800eb54:	f3bf 8f4f 	dsb	sy
 800eb58:	603b      	str	r3, [r7, #0]
}
 800eb5a:	bf00      	nop
 800eb5c:	e7fe      	b.n	800eb5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb5e:	4b09      	ldr	r3, [pc, #36]	; (800eb84 <prvSwitchTimerLists+0xc0>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1b1      	bne.n	800eacc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eb68:	4b06      	ldr	r3, [pc, #24]	; (800eb84 <prvSwitchTimerLists+0xc0>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eb6e:	4b06      	ldr	r3, [pc, #24]	; (800eb88 <prvSwitchTimerLists+0xc4>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4a04      	ldr	r2, [pc, #16]	; (800eb84 <prvSwitchTimerLists+0xc0>)
 800eb74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eb76:	4a04      	ldr	r2, [pc, #16]	; (800eb88 <prvSwitchTimerLists+0xc4>)
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	6013      	str	r3, [r2, #0]
}
 800eb7c:	bf00      	nop
 800eb7e:	3718      	adds	r7, #24
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	20012518 	.word	0x20012518
 800eb88:	2001251c 	.word	0x2001251c

0800eb8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eb92:	f000 f967 	bl	800ee64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eb96:	4b15      	ldr	r3, [pc, #84]	; (800ebec <prvCheckForValidListAndQueue+0x60>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d120      	bne.n	800ebe0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eb9e:	4814      	ldr	r0, [pc, #80]	; (800ebf0 <prvCheckForValidListAndQueue+0x64>)
 800eba0:	f7fd fff8 	bl	800cb94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eba4:	4813      	ldr	r0, [pc, #76]	; (800ebf4 <prvCheckForValidListAndQueue+0x68>)
 800eba6:	f7fd fff5 	bl	800cb94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ebaa:	4b13      	ldr	r3, [pc, #76]	; (800ebf8 <prvCheckForValidListAndQueue+0x6c>)
 800ebac:	4a10      	ldr	r2, [pc, #64]	; (800ebf0 <prvCheckForValidListAndQueue+0x64>)
 800ebae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ebb0:	4b12      	ldr	r3, [pc, #72]	; (800ebfc <prvCheckForValidListAndQueue+0x70>)
 800ebb2:	4a10      	ldr	r2, [pc, #64]	; (800ebf4 <prvCheckForValidListAndQueue+0x68>)
 800ebb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	9300      	str	r3, [sp, #0]
 800ebba:	4b11      	ldr	r3, [pc, #68]	; (800ec00 <prvCheckForValidListAndQueue+0x74>)
 800ebbc:	4a11      	ldr	r2, [pc, #68]	; (800ec04 <prvCheckForValidListAndQueue+0x78>)
 800ebbe:	2110      	movs	r1, #16
 800ebc0:	200a      	movs	r0, #10
 800ebc2:	f7fe f903 	bl	800cdcc <xQueueGenericCreateStatic>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	4a08      	ldr	r2, [pc, #32]	; (800ebec <prvCheckForValidListAndQueue+0x60>)
 800ebca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ebcc:	4b07      	ldr	r3, [pc, #28]	; (800ebec <prvCheckForValidListAndQueue+0x60>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d005      	beq.n	800ebe0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ebd4:	4b05      	ldr	r3, [pc, #20]	; (800ebec <prvCheckForValidListAndQueue+0x60>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	490b      	ldr	r1, [pc, #44]	; (800ec08 <prvCheckForValidListAndQueue+0x7c>)
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7fe fd1c 	bl	800d618 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ebe0:	f000 f970 	bl	800eec4 <vPortExitCritical>
}
 800ebe4:	bf00      	nop
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	20012520 	.word	0x20012520
 800ebf0:	200124f0 	.word	0x200124f0
 800ebf4:	20012504 	.word	0x20012504
 800ebf8:	20012518 	.word	0x20012518
 800ebfc:	2001251c 	.word	0x2001251c
 800ec00:	200125cc 	.word	0x200125cc
 800ec04:	2001252c 	.word	0x2001252c
 800ec08:	0801be80 	.word	0x0801be80

0800ec0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	60f8      	str	r0, [r7, #12]
 800ec14:	60b9      	str	r1, [r7, #8]
 800ec16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	3b04      	subs	r3, #4
 800ec1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ec24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	3b04      	subs	r3, #4
 800ec2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	f023 0201 	bic.w	r2, r3, #1
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	3b04      	subs	r3, #4
 800ec3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ec3c:	4a0c      	ldr	r2, [pc, #48]	; (800ec70 <pxPortInitialiseStack+0x64>)
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	3b14      	subs	r3, #20
 800ec46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ec48:	687a      	ldr	r2, [r7, #4]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	3b04      	subs	r3, #4
 800ec52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f06f 0202 	mvn.w	r2, #2
 800ec5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	3b20      	subs	r3, #32
 800ec60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ec62:	68fb      	ldr	r3, [r7, #12]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3714      	adds	r7, #20
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr
 800ec70:	0800ec75 	.word	0x0800ec75

0800ec74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec74:	b480      	push	{r7}
 800ec76:	b085      	sub	sp, #20
 800ec78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec7e:	4b12      	ldr	r3, [pc, #72]	; (800ecc8 <prvTaskExitError+0x54>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec86:	d00a      	beq.n	800ec9e <prvTaskExitError+0x2a>
	__asm volatile
 800ec88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8c:	f383 8811 	msr	BASEPRI, r3
 800ec90:	f3bf 8f6f 	isb	sy
 800ec94:	f3bf 8f4f 	dsb	sy
 800ec98:	60fb      	str	r3, [r7, #12]
}
 800ec9a:	bf00      	nop
 800ec9c:	e7fe      	b.n	800ec9c <prvTaskExitError+0x28>
	__asm volatile
 800ec9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca2:	f383 8811 	msr	BASEPRI, r3
 800eca6:	f3bf 8f6f 	isb	sy
 800ecaa:	f3bf 8f4f 	dsb	sy
 800ecae:	60bb      	str	r3, [r7, #8]
}
 800ecb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ecb2:	bf00      	nop
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d0fc      	beq.n	800ecb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ecba:	bf00      	nop
 800ecbc:	bf00      	nop
 800ecbe:	3714      	adds	r7, #20
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr
 800ecc8:	2000009c 	.word	0x2000009c
 800eccc:	00000000 	.word	0x00000000

0800ecd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ecd0:	4b07      	ldr	r3, [pc, #28]	; (800ecf0 <pxCurrentTCBConst2>)
 800ecd2:	6819      	ldr	r1, [r3, #0]
 800ecd4:	6808      	ldr	r0, [r1, #0]
 800ecd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecda:	f380 8809 	msr	PSP, r0
 800ecde:	f3bf 8f6f 	isb	sy
 800ece2:	f04f 0000 	mov.w	r0, #0
 800ece6:	f380 8811 	msr	BASEPRI, r0
 800ecea:	4770      	bx	lr
 800ecec:	f3af 8000 	nop.w

0800ecf0 <pxCurrentTCBConst2>:
 800ecf0:	20011ff0 	.word	0x20011ff0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ecf4:	bf00      	nop
 800ecf6:	bf00      	nop

0800ecf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ecf8:	4808      	ldr	r0, [pc, #32]	; (800ed1c <prvPortStartFirstTask+0x24>)
 800ecfa:	6800      	ldr	r0, [r0, #0]
 800ecfc:	6800      	ldr	r0, [r0, #0]
 800ecfe:	f380 8808 	msr	MSP, r0
 800ed02:	f04f 0000 	mov.w	r0, #0
 800ed06:	f380 8814 	msr	CONTROL, r0
 800ed0a:	b662      	cpsie	i
 800ed0c:	b661      	cpsie	f
 800ed0e:	f3bf 8f4f 	dsb	sy
 800ed12:	f3bf 8f6f 	isb	sy
 800ed16:	df00      	svc	0
 800ed18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ed1a:	bf00      	nop
 800ed1c:	e000ed08 	.word	0xe000ed08

0800ed20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ed26:	4b46      	ldr	r3, [pc, #280]	; (800ee40 <xPortStartScheduler+0x120>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a46      	ldr	r2, [pc, #280]	; (800ee44 <xPortStartScheduler+0x124>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d10a      	bne.n	800ed46 <xPortStartScheduler+0x26>
	__asm volatile
 800ed30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed34:	f383 8811 	msr	BASEPRI, r3
 800ed38:	f3bf 8f6f 	isb	sy
 800ed3c:	f3bf 8f4f 	dsb	sy
 800ed40:	613b      	str	r3, [r7, #16]
}
 800ed42:	bf00      	nop
 800ed44:	e7fe      	b.n	800ed44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ed46:	4b3e      	ldr	r3, [pc, #248]	; (800ee40 <xPortStartScheduler+0x120>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4a3f      	ldr	r2, [pc, #252]	; (800ee48 <xPortStartScheduler+0x128>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d10a      	bne.n	800ed66 <xPortStartScheduler+0x46>
	__asm volatile
 800ed50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed54:	f383 8811 	msr	BASEPRI, r3
 800ed58:	f3bf 8f6f 	isb	sy
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	60fb      	str	r3, [r7, #12]
}
 800ed62:	bf00      	nop
 800ed64:	e7fe      	b.n	800ed64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ed66:	4b39      	ldr	r3, [pc, #228]	; (800ee4c <xPortStartScheduler+0x12c>)
 800ed68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	22ff      	movs	r2, #255	; 0xff
 800ed76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed80:	78fb      	ldrb	r3, [r7, #3]
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ed88:	b2da      	uxtb	r2, r3
 800ed8a:	4b31      	ldr	r3, [pc, #196]	; (800ee50 <xPortStartScheduler+0x130>)
 800ed8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed8e:	4b31      	ldr	r3, [pc, #196]	; (800ee54 <xPortStartScheduler+0x134>)
 800ed90:	2207      	movs	r2, #7
 800ed92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed94:	e009      	b.n	800edaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ed96:	4b2f      	ldr	r3, [pc, #188]	; (800ee54 <xPortStartScheduler+0x134>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	3b01      	subs	r3, #1
 800ed9c:	4a2d      	ldr	r2, [pc, #180]	; (800ee54 <xPortStartScheduler+0x134>)
 800ed9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eda0:	78fb      	ldrb	r3, [r7, #3]
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	005b      	lsls	r3, r3, #1
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800edaa:	78fb      	ldrb	r3, [r7, #3]
 800edac:	b2db      	uxtb	r3, r3
 800edae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edb2:	2b80      	cmp	r3, #128	; 0x80
 800edb4:	d0ef      	beq.n	800ed96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800edb6:	4b27      	ldr	r3, [pc, #156]	; (800ee54 <xPortStartScheduler+0x134>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f1c3 0307 	rsb	r3, r3, #7
 800edbe:	2b04      	cmp	r3, #4
 800edc0:	d00a      	beq.n	800edd8 <xPortStartScheduler+0xb8>
	__asm volatile
 800edc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc6:	f383 8811 	msr	BASEPRI, r3
 800edca:	f3bf 8f6f 	isb	sy
 800edce:	f3bf 8f4f 	dsb	sy
 800edd2:	60bb      	str	r3, [r7, #8]
}
 800edd4:	bf00      	nop
 800edd6:	e7fe      	b.n	800edd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800edd8:	4b1e      	ldr	r3, [pc, #120]	; (800ee54 <xPortStartScheduler+0x134>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	021b      	lsls	r3, r3, #8
 800edde:	4a1d      	ldr	r2, [pc, #116]	; (800ee54 <xPortStartScheduler+0x134>)
 800ede0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ede2:	4b1c      	ldr	r3, [pc, #112]	; (800ee54 <xPortStartScheduler+0x134>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800edea:	4a1a      	ldr	r2, [pc, #104]	; (800ee54 <xPortStartScheduler+0x134>)
 800edec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	b2da      	uxtb	r2, r3
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800edf6:	4b18      	ldr	r3, [pc, #96]	; (800ee58 <xPortStartScheduler+0x138>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a17      	ldr	r2, [pc, #92]	; (800ee58 <xPortStartScheduler+0x138>)
 800edfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ee00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ee02:	4b15      	ldr	r3, [pc, #84]	; (800ee58 <xPortStartScheduler+0x138>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	4a14      	ldr	r2, [pc, #80]	; (800ee58 <xPortStartScheduler+0x138>)
 800ee08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ee0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ee0e:	f000 f8dd 	bl	800efcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ee12:	4b12      	ldr	r3, [pc, #72]	; (800ee5c <xPortStartScheduler+0x13c>)
 800ee14:	2200      	movs	r2, #0
 800ee16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ee18:	f000 f8fc 	bl	800f014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ee1c:	4b10      	ldr	r3, [pc, #64]	; (800ee60 <xPortStartScheduler+0x140>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4a0f      	ldr	r2, [pc, #60]	; (800ee60 <xPortStartScheduler+0x140>)
 800ee22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ee26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ee28:	f7ff ff66 	bl	800ecf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ee2c:	f7ff f824 	bl	800de78 <vTaskSwitchContext>
	prvTaskExitError();
 800ee30:	f7ff ff20 	bl	800ec74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ee34:	2300      	movs	r3, #0
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3718      	adds	r7, #24
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	e000ed00 	.word	0xe000ed00
 800ee44:	410fc271 	.word	0x410fc271
 800ee48:	410fc270 	.word	0x410fc270
 800ee4c:	e000e400 	.word	0xe000e400
 800ee50:	2001261c 	.word	0x2001261c
 800ee54:	20012620 	.word	0x20012620
 800ee58:	e000ed20 	.word	0xe000ed20
 800ee5c:	2000009c 	.word	0x2000009c
 800ee60:	e000ef34 	.word	0xe000ef34

0800ee64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
	__asm volatile
 800ee6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6e:	f383 8811 	msr	BASEPRI, r3
 800ee72:	f3bf 8f6f 	isb	sy
 800ee76:	f3bf 8f4f 	dsb	sy
 800ee7a:	607b      	str	r3, [r7, #4]
}
 800ee7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ee7e:	4b0f      	ldr	r3, [pc, #60]	; (800eebc <vPortEnterCritical+0x58>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	3301      	adds	r3, #1
 800ee84:	4a0d      	ldr	r2, [pc, #52]	; (800eebc <vPortEnterCritical+0x58>)
 800ee86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ee88:	4b0c      	ldr	r3, [pc, #48]	; (800eebc <vPortEnterCritical+0x58>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d10f      	bne.n	800eeb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ee90:	4b0b      	ldr	r3, [pc, #44]	; (800eec0 <vPortEnterCritical+0x5c>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d00a      	beq.n	800eeb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ee9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee9e:	f383 8811 	msr	BASEPRI, r3
 800eea2:	f3bf 8f6f 	isb	sy
 800eea6:	f3bf 8f4f 	dsb	sy
 800eeaa:	603b      	str	r3, [r7, #0]
}
 800eeac:	bf00      	nop
 800eeae:	e7fe      	b.n	800eeae <vPortEnterCritical+0x4a>
	}
}
 800eeb0:	bf00      	nop
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	2000009c 	.word	0x2000009c
 800eec0:	e000ed04 	.word	0xe000ed04

0800eec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eeca:	4b12      	ldr	r3, [pc, #72]	; (800ef14 <vPortExitCritical+0x50>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d10a      	bne.n	800eee8 <vPortExitCritical+0x24>
	__asm volatile
 800eed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed6:	f383 8811 	msr	BASEPRI, r3
 800eeda:	f3bf 8f6f 	isb	sy
 800eede:	f3bf 8f4f 	dsb	sy
 800eee2:	607b      	str	r3, [r7, #4]
}
 800eee4:	bf00      	nop
 800eee6:	e7fe      	b.n	800eee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eee8:	4b0a      	ldr	r3, [pc, #40]	; (800ef14 <vPortExitCritical+0x50>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	3b01      	subs	r3, #1
 800eeee:	4a09      	ldr	r2, [pc, #36]	; (800ef14 <vPortExitCritical+0x50>)
 800eef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eef2:	4b08      	ldr	r3, [pc, #32]	; (800ef14 <vPortExitCritical+0x50>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d105      	bne.n	800ef06 <vPortExitCritical+0x42>
 800eefa:	2300      	movs	r3, #0
 800eefc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	f383 8811 	msr	BASEPRI, r3
}
 800ef04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ef06:	bf00      	nop
 800ef08:	370c      	adds	r7, #12
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	2000009c 	.word	0x2000009c
	...

0800ef20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ef20:	f3ef 8009 	mrs	r0, PSP
 800ef24:	f3bf 8f6f 	isb	sy
 800ef28:	4b15      	ldr	r3, [pc, #84]	; (800ef80 <pxCurrentTCBConst>)
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	f01e 0f10 	tst.w	lr, #16
 800ef30:	bf08      	it	eq
 800ef32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ef36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef3a:	6010      	str	r0, [r2, #0]
 800ef3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ef40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ef44:	f380 8811 	msr	BASEPRI, r0
 800ef48:	f3bf 8f4f 	dsb	sy
 800ef4c:	f3bf 8f6f 	isb	sy
 800ef50:	f7fe ff92 	bl	800de78 <vTaskSwitchContext>
 800ef54:	f04f 0000 	mov.w	r0, #0
 800ef58:	f380 8811 	msr	BASEPRI, r0
 800ef5c:	bc09      	pop	{r0, r3}
 800ef5e:	6819      	ldr	r1, [r3, #0]
 800ef60:	6808      	ldr	r0, [r1, #0]
 800ef62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef66:	f01e 0f10 	tst.w	lr, #16
 800ef6a:	bf08      	it	eq
 800ef6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef70:	f380 8809 	msr	PSP, r0
 800ef74:	f3bf 8f6f 	isb	sy
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop
 800ef7c:	f3af 8000 	nop.w

0800ef80 <pxCurrentTCBConst>:
 800ef80:	20011ff0 	.word	0x20011ff0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ef84:	bf00      	nop
 800ef86:	bf00      	nop

0800ef88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef92:	f383 8811 	msr	BASEPRI, r3
 800ef96:	f3bf 8f6f 	isb	sy
 800ef9a:	f3bf 8f4f 	dsb	sy
 800ef9e:	607b      	str	r3, [r7, #4]
}
 800efa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800efa2:	f7fe feaf 	bl	800dd04 <xTaskIncrementTick>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d003      	beq.n	800efb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800efac:	4b06      	ldr	r3, [pc, #24]	; (800efc8 <xPortSysTickHandler+0x40>)
 800efae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efb2:	601a      	str	r2, [r3, #0]
 800efb4:	2300      	movs	r3, #0
 800efb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	f383 8811 	msr	BASEPRI, r3
}
 800efbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800efc0:	bf00      	nop
 800efc2:	3708      	adds	r7, #8
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	e000ed04 	.word	0xe000ed04

0800efcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800efcc:	b480      	push	{r7}
 800efce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800efd0:	4b0b      	ldr	r3, [pc, #44]	; (800f000 <vPortSetupTimerInterrupt+0x34>)
 800efd2:	2200      	movs	r2, #0
 800efd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800efd6:	4b0b      	ldr	r3, [pc, #44]	; (800f004 <vPortSetupTimerInterrupt+0x38>)
 800efd8:	2200      	movs	r2, #0
 800efda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800efdc:	4b0a      	ldr	r3, [pc, #40]	; (800f008 <vPortSetupTimerInterrupt+0x3c>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	4a0a      	ldr	r2, [pc, #40]	; (800f00c <vPortSetupTimerInterrupt+0x40>)
 800efe2:	fba2 2303 	umull	r2, r3, r2, r3
 800efe6:	099b      	lsrs	r3, r3, #6
 800efe8:	4a09      	ldr	r2, [pc, #36]	; (800f010 <vPortSetupTimerInterrupt+0x44>)
 800efea:	3b01      	subs	r3, #1
 800efec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800efee:	4b04      	ldr	r3, [pc, #16]	; (800f000 <vPortSetupTimerInterrupt+0x34>)
 800eff0:	2207      	movs	r2, #7
 800eff2:	601a      	str	r2, [r3, #0]
}
 800eff4:	bf00      	nop
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop
 800f000:	e000e010 	.word	0xe000e010
 800f004:	e000e018 	.word	0xe000e018
 800f008:	20000004 	.word	0x20000004
 800f00c:	10624dd3 	.word	0x10624dd3
 800f010:	e000e014 	.word	0xe000e014

0800f014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f024 <vPortEnableVFP+0x10>
 800f018:	6801      	ldr	r1, [r0, #0]
 800f01a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f01e:	6001      	str	r1, [r0, #0]
 800f020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f022:	bf00      	nop
 800f024:	e000ed88 	.word	0xe000ed88

0800f028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f028:	b480      	push	{r7}
 800f02a:	b085      	sub	sp, #20
 800f02c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f02e:	f3ef 8305 	mrs	r3, IPSR
 800f032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2b0f      	cmp	r3, #15
 800f038:	d914      	bls.n	800f064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f03a:	4a17      	ldr	r2, [pc, #92]	; (800f098 <vPortValidateInterruptPriority+0x70>)
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	4413      	add	r3, r2
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f044:	4b15      	ldr	r3, [pc, #84]	; (800f09c <vPortValidateInterruptPriority+0x74>)
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	7afa      	ldrb	r2, [r7, #11]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d20a      	bcs.n	800f064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f052:	f383 8811 	msr	BASEPRI, r3
 800f056:	f3bf 8f6f 	isb	sy
 800f05a:	f3bf 8f4f 	dsb	sy
 800f05e:	607b      	str	r3, [r7, #4]
}
 800f060:	bf00      	nop
 800f062:	e7fe      	b.n	800f062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f064:	4b0e      	ldr	r3, [pc, #56]	; (800f0a0 <vPortValidateInterruptPriority+0x78>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f06c:	4b0d      	ldr	r3, [pc, #52]	; (800f0a4 <vPortValidateInterruptPriority+0x7c>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	429a      	cmp	r2, r3
 800f072:	d90a      	bls.n	800f08a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f078:	f383 8811 	msr	BASEPRI, r3
 800f07c:	f3bf 8f6f 	isb	sy
 800f080:	f3bf 8f4f 	dsb	sy
 800f084:	603b      	str	r3, [r7, #0]
}
 800f086:	bf00      	nop
 800f088:	e7fe      	b.n	800f088 <vPortValidateInterruptPriority+0x60>
	}
 800f08a:	bf00      	nop
 800f08c:	3714      	adds	r7, #20
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr
 800f096:	bf00      	nop
 800f098:	e000e3f0 	.word	0xe000e3f0
 800f09c:	2001261c 	.word	0x2001261c
 800f0a0:	e000ed0c 	.word	0xe000ed0c
 800f0a4:	20012620 	.word	0x20012620

0800f0a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b08a      	sub	sp, #40	; 0x28
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f0b4:	f7fe fd6a 	bl	800db8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f0b8:	4b5b      	ldr	r3, [pc, #364]	; (800f228 <pvPortMalloc+0x180>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d101      	bne.n	800f0c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f0c0:	f000 f920 	bl	800f304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f0c4:	4b59      	ldr	r3, [pc, #356]	; (800f22c <pvPortMalloc+0x184>)
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	4013      	ands	r3, r2
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	f040 8093 	bne.w	800f1f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d01d      	beq.n	800f114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f0d8:	2208      	movs	r2, #8
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	4413      	add	r3, r2
 800f0de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f003 0307 	and.w	r3, r3, #7
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d014      	beq.n	800f114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f023 0307 	bic.w	r3, r3, #7
 800f0f0:	3308      	adds	r3, #8
 800f0f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f003 0307 	and.w	r3, r3, #7
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00a      	beq.n	800f114 <pvPortMalloc+0x6c>
	__asm volatile
 800f0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f102:	f383 8811 	msr	BASEPRI, r3
 800f106:	f3bf 8f6f 	isb	sy
 800f10a:	f3bf 8f4f 	dsb	sy
 800f10e:	617b      	str	r3, [r7, #20]
}
 800f110:	bf00      	nop
 800f112:	e7fe      	b.n	800f112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d06e      	beq.n	800f1f8 <pvPortMalloc+0x150>
 800f11a:	4b45      	ldr	r3, [pc, #276]	; (800f230 <pvPortMalloc+0x188>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	429a      	cmp	r2, r3
 800f122:	d869      	bhi.n	800f1f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f124:	4b43      	ldr	r3, [pc, #268]	; (800f234 <pvPortMalloc+0x18c>)
 800f126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f128:	4b42      	ldr	r3, [pc, #264]	; (800f234 <pvPortMalloc+0x18c>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f12e:	e004      	b.n	800f13a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	429a      	cmp	r2, r3
 800f142:	d903      	bls.n	800f14c <pvPortMalloc+0xa4>
 800f144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d1f1      	bne.n	800f130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f14c:	4b36      	ldr	r3, [pc, #216]	; (800f228 <pvPortMalloc+0x180>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f152:	429a      	cmp	r2, r3
 800f154:	d050      	beq.n	800f1f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f156:	6a3b      	ldr	r3, [r7, #32]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2208      	movs	r2, #8
 800f15c:	4413      	add	r3, r2
 800f15e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	6a3b      	ldr	r3, [r7, #32]
 800f166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f16a:	685a      	ldr	r2, [r3, #4]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	1ad2      	subs	r2, r2, r3
 800f170:	2308      	movs	r3, #8
 800f172:	005b      	lsls	r3, r3, #1
 800f174:	429a      	cmp	r2, r3
 800f176:	d91f      	bls.n	800f1b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	4413      	add	r3, r2
 800f17e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f180:	69bb      	ldr	r3, [r7, #24]
 800f182:	f003 0307 	and.w	r3, r3, #7
 800f186:	2b00      	cmp	r3, #0
 800f188:	d00a      	beq.n	800f1a0 <pvPortMalloc+0xf8>
	__asm volatile
 800f18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18e:	f383 8811 	msr	BASEPRI, r3
 800f192:	f3bf 8f6f 	isb	sy
 800f196:	f3bf 8f4f 	dsb	sy
 800f19a:	613b      	str	r3, [r7, #16]
}
 800f19c:	bf00      	nop
 800f19e:	e7fe      	b.n	800f19e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a2:	685a      	ldr	r2, [r3, #4]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	1ad2      	subs	r2, r2, r3
 800f1a8:	69bb      	ldr	r3, [r7, #24]
 800f1aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f1b2:	69b8      	ldr	r0, [r7, #24]
 800f1b4:	f000 f908 	bl	800f3c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f1b8:	4b1d      	ldr	r3, [pc, #116]	; (800f230 <pvPortMalloc+0x188>)
 800f1ba:	681a      	ldr	r2, [r3, #0]
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	1ad3      	subs	r3, r2, r3
 800f1c2:	4a1b      	ldr	r2, [pc, #108]	; (800f230 <pvPortMalloc+0x188>)
 800f1c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f1c6:	4b1a      	ldr	r3, [pc, #104]	; (800f230 <pvPortMalloc+0x188>)
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	4b1b      	ldr	r3, [pc, #108]	; (800f238 <pvPortMalloc+0x190>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d203      	bcs.n	800f1da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f1d2:	4b17      	ldr	r3, [pc, #92]	; (800f230 <pvPortMalloc+0x188>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	4a18      	ldr	r2, [pc, #96]	; (800f238 <pvPortMalloc+0x190>)
 800f1d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1dc:	685a      	ldr	r2, [r3, #4]
 800f1de:	4b13      	ldr	r3, [pc, #76]	; (800f22c <pvPortMalloc+0x184>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	431a      	orrs	r2, r3
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f1ee:	4b13      	ldr	r3, [pc, #76]	; (800f23c <pvPortMalloc+0x194>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	4a11      	ldr	r2, [pc, #68]	; (800f23c <pvPortMalloc+0x194>)
 800f1f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f1f8:	f7fe fcd6 	bl	800dba8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	f003 0307 	and.w	r3, r3, #7
 800f202:	2b00      	cmp	r3, #0
 800f204:	d00a      	beq.n	800f21c <pvPortMalloc+0x174>
	__asm volatile
 800f206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20a:	f383 8811 	msr	BASEPRI, r3
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	60fb      	str	r3, [r7, #12]
}
 800f218:	bf00      	nop
 800f21a:	e7fe      	b.n	800f21a <pvPortMalloc+0x172>
	return pvReturn;
 800f21c:	69fb      	ldr	r3, [r7, #28]
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3728      	adds	r7, #40	; 0x28
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
 800f226:	bf00      	nop
 800f228:	2001622c 	.word	0x2001622c
 800f22c:	20016240 	.word	0x20016240
 800f230:	20016230 	.word	0x20016230
 800f234:	20016224 	.word	0x20016224
 800f238:	20016234 	.word	0x20016234
 800f23c:	20016238 	.word	0x20016238

0800f240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b086      	sub	sp, #24
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d04d      	beq.n	800f2ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f252:	2308      	movs	r3, #8
 800f254:	425b      	negs	r3, r3
 800f256:	697a      	ldr	r2, [r7, #20]
 800f258:	4413      	add	r3, r2
 800f25a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	685a      	ldr	r2, [r3, #4]
 800f264:	4b24      	ldr	r3, [pc, #144]	; (800f2f8 <vPortFree+0xb8>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	4013      	ands	r3, r2
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d10a      	bne.n	800f284 <vPortFree+0x44>
	__asm volatile
 800f26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f272:	f383 8811 	msr	BASEPRI, r3
 800f276:	f3bf 8f6f 	isb	sy
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	60fb      	str	r3, [r7, #12]
}
 800f280:	bf00      	nop
 800f282:	e7fe      	b.n	800f282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00a      	beq.n	800f2a2 <vPortFree+0x62>
	__asm volatile
 800f28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f290:	f383 8811 	msr	BASEPRI, r3
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	f3bf 8f4f 	dsb	sy
 800f29c:	60bb      	str	r3, [r7, #8]
}
 800f29e:	bf00      	nop
 800f2a0:	e7fe      	b.n	800f2a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	685a      	ldr	r2, [r3, #4]
 800f2a6:	4b14      	ldr	r3, [pc, #80]	; (800f2f8 <vPortFree+0xb8>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	4013      	ands	r3, r2
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d01e      	beq.n	800f2ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f2b0:	693b      	ldr	r3, [r7, #16]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d11a      	bne.n	800f2ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	685a      	ldr	r2, [r3, #4]
 800f2bc:	4b0e      	ldr	r3, [pc, #56]	; (800f2f8 <vPortFree+0xb8>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	43db      	mvns	r3, r3
 800f2c2:	401a      	ands	r2, r3
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f2c8:	f7fe fc60 	bl	800db8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	685a      	ldr	r2, [r3, #4]
 800f2d0:	4b0a      	ldr	r3, [pc, #40]	; (800f2fc <vPortFree+0xbc>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	4a09      	ldr	r2, [pc, #36]	; (800f2fc <vPortFree+0xbc>)
 800f2d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f2da:	6938      	ldr	r0, [r7, #16]
 800f2dc:	f000 f874 	bl	800f3c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f2e0:	4b07      	ldr	r3, [pc, #28]	; (800f300 <vPortFree+0xc0>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	4a06      	ldr	r2, [pc, #24]	; (800f300 <vPortFree+0xc0>)
 800f2e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f2ea:	f7fe fc5d 	bl	800dba8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f2ee:	bf00      	nop
 800f2f0:	3718      	adds	r7, #24
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	20016240 	.word	0x20016240
 800f2fc:	20016230 	.word	0x20016230
 800f300:	2001623c 	.word	0x2001623c

0800f304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f304:	b480      	push	{r7}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f30a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f30e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f310:	4b27      	ldr	r3, [pc, #156]	; (800f3b0 <prvHeapInit+0xac>)
 800f312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f003 0307 	and.w	r3, r3, #7
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d00c      	beq.n	800f338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	3307      	adds	r3, #7
 800f322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f023 0307 	bic.w	r3, r3, #7
 800f32a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f32c:	68ba      	ldr	r2, [r7, #8]
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	1ad3      	subs	r3, r2, r3
 800f332:	4a1f      	ldr	r2, [pc, #124]	; (800f3b0 <prvHeapInit+0xac>)
 800f334:	4413      	add	r3, r2
 800f336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f33c:	4a1d      	ldr	r2, [pc, #116]	; (800f3b4 <prvHeapInit+0xb0>)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f342:	4b1c      	ldr	r3, [pc, #112]	; (800f3b4 <prvHeapInit+0xb0>)
 800f344:	2200      	movs	r2, #0
 800f346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	68ba      	ldr	r2, [r7, #8]
 800f34c:	4413      	add	r3, r2
 800f34e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f350:	2208      	movs	r2, #8
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	1a9b      	subs	r3, r3, r2
 800f356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f023 0307 	bic.w	r3, r3, #7
 800f35e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	4a15      	ldr	r2, [pc, #84]	; (800f3b8 <prvHeapInit+0xb4>)
 800f364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f366:	4b14      	ldr	r3, [pc, #80]	; (800f3b8 <prvHeapInit+0xb4>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2200      	movs	r2, #0
 800f36c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f36e:	4b12      	ldr	r3, [pc, #72]	; (800f3b8 <prvHeapInit+0xb4>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2200      	movs	r2, #0
 800f374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	1ad2      	subs	r2, r2, r3
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f384:	4b0c      	ldr	r3, [pc, #48]	; (800f3b8 <prvHeapInit+0xb4>)
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	4a0a      	ldr	r2, [pc, #40]	; (800f3bc <prvHeapInit+0xb8>)
 800f392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	4a09      	ldr	r2, [pc, #36]	; (800f3c0 <prvHeapInit+0xbc>)
 800f39a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f39c:	4b09      	ldr	r3, [pc, #36]	; (800f3c4 <prvHeapInit+0xc0>)
 800f39e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f3a2:	601a      	str	r2, [r3, #0]
}
 800f3a4:	bf00      	nop
 800f3a6:	3714      	adds	r7, #20
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr
 800f3b0:	20012624 	.word	0x20012624
 800f3b4:	20016224 	.word	0x20016224
 800f3b8:	2001622c 	.word	0x2001622c
 800f3bc:	20016234 	.word	0x20016234
 800f3c0:	20016230 	.word	0x20016230
 800f3c4:	20016240 	.word	0x20016240

0800f3c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b085      	sub	sp, #20
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f3d0:	4b28      	ldr	r3, [pc, #160]	; (800f474 <prvInsertBlockIntoFreeList+0xac>)
 800f3d2:	60fb      	str	r3, [r7, #12]
 800f3d4:	e002      	b.n	800f3dc <prvInsertBlockIntoFreeList+0x14>
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	60fb      	str	r3, [r7, #12]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	687a      	ldr	r2, [r7, #4]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d8f7      	bhi.n	800f3d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	68ba      	ldr	r2, [r7, #8]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d108      	bne.n	800f40a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	685a      	ldr	r2, [r3, #4]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	441a      	add	r2, r3
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	68ba      	ldr	r2, [r7, #8]
 800f414:	441a      	add	r2, r3
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d118      	bne.n	800f450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	4b15      	ldr	r3, [pc, #84]	; (800f478 <prvInsertBlockIntoFreeList+0xb0>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	429a      	cmp	r2, r3
 800f428:	d00d      	beq.n	800f446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	685a      	ldr	r2, [r3, #4]
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	441a      	add	r2, r3
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	601a      	str	r2, [r3, #0]
 800f444:	e008      	b.n	800f458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f446:	4b0c      	ldr	r3, [pc, #48]	; (800f478 <prvInsertBlockIntoFreeList+0xb0>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	601a      	str	r2, [r3, #0]
 800f44e:	e003      	b.n	800f458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681a      	ldr	r2, [r3, #0]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d002      	beq.n	800f466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f466:	bf00      	nop
 800f468:	3714      	adds	r7, #20
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr
 800f472:	bf00      	nop
 800f474:	20016224 	.word	0x20016224
 800f478:	2001622c 	.word	0x2001622c

0800f47c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f480:	2200      	movs	r2, #0
 800f482:	4912      	ldr	r1, [pc, #72]	; (800f4cc <MX_USB_DEVICE_Init+0x50>)
 800f484:	4812      	ldr	r0, [pc, #72]	; (800f4d0 <MX_USB_DEVICE_Init+0x54>)
 800f486:	f7fb ff23 	bl	800b2d0 <USBD_Init>
 800f48a:	4603      	mov	r3, r0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d001      	beq.n	800f494 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f490:	f7f2 fbc0 	bl	8001c14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f494:	490f      	ldr	r1, [pc, #60]	; (800f4d4 <MX_USB_DEVICE_Init+0x58>)
 800f496:	480e      	ldr	r0, [pc, #56]	; (800f4d0 <MX_USB_DEVICE_Init+0x54>)
 800f498:	f7fb ff4a 	bl	800b330 <USBD_RegisterClass>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d001      	beq.n	800f4a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f4a2:	f7f2 fbb7 	bl	8001c14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f4a6:	490c      	ldr	r1, [pc, #48]	; (800f4d8 <MX_USB_DEVICE_Init+0x5c>)
 800f4a8:	4809      	ldr	r0, [pc, #36]	; (800f4d0 <MX_USB_DEVICE_Init+0x54>)
 800f4aa:	f7fb fe81 	bl	800b1b0 <USBD_CDC_RegisterInterface>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d001      	beq.n	800f4b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f4b4:	f7f2 fbae 	bl	8001c14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f4b8:	4805      	ldr	r0, [pc, #20]	; (800f4d0 <MX_USB_DEVICE_Init+0x54>)
 800f4ba:	f7fb ff6f 	bl	800b39c <USBD_Start>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d001      	beq.n	800f4c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f4c4:	f7f2 fba6 	bl	8001c14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f4c8:	bf00      	nop
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	200000b4 	.word	0x200000b4
 800f4d0:	20016244 	.word	0x20016244
 800f4d4:	2000001c 	.word	0x2000001c
 800f4d8:	200000a0 	.word	0x200000a0

0800f4dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	4905      	ldr	r1, [pc, #20]	; (800f4f8 <CDC_Init_FS+0x1c>)
 800f4e4:	4805      	ldr	r0, [pc, #20]	; (800f4fc <CDC_Init_FS+0x20>)
 800f4e6:	f7fb fe7d 	bl	800b1e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f4ea:	4905      	ldr	r1, [pc, #20]	; (800f500 <CDC_Init_FS+0x24>)
 800f4ec:	4803      	ldr	r0, [pc, #12]	; (800f4fc <CDC_Init_FS+0x20>)
 800f4ee:	f7fb fe9b 	bl	800b228 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f4f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	20016d20 	.word	0x20016d20
 800f4fc:	20016244 	.word	0x20016244
 800f500:	20016520 	.word	0x20016520

0800f504 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f504:	b480      	push	{r7}
 800f506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f508:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	46bd      	mov	sp, r7
 800f50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f512:	4770      	bx	lr

0800f514 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f514:	b480      	push	{r7}
 800f516:	b083      	sub	sp, #12
 800f518:	af00      	add	r7, sp, #0
 800f51a:	4603      	mov	r3, r0
 800f51c:	6039      	str	r1, [r7, #0]
 800f51e:	71fb      	strb	r3, [r7, #7]
 800f520:	4613      	mov	r3, r2
 800f522:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f524:	79fb      	ldrb	r3, [r7, #7]
 800f526:	2b23      	cmp	r3, #35	; 0x23
 800f528:	d84a      	bhi.n	800f5c0 <CDC_Control_FS+0xac>
 800f52a:	a201      	add	r2, pc, #4	; (adr r2, 800f530 <CDC_Control_FS+0x1c>)
 800f52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f530:	0800f5c1 	.word	0x0800f5c1
 800f534:	0800f5c1 	.word	0x0800f5c1
 800f538:	0800f5c1 	.word	0x0800f5c1
 800f53c:	0800f5c1 	.word	0x0800f5c1
 800f540:	0800f5c1 	.word	0x0800f5c1
 800f544:	0800f5c1 	.word	0x0800f5c1
 800f548:	0800f5c1 	.word	0x0800f5c1
 800f54c:	0800f5c1 	.word	0x0800f5c1
 800f550:	0800f5c1 	.word	0x0800f5c1
 800f554:	0800f5c1 	.word	0x0800f5c1
 800f558:	0800f5c1 	.word	0x0800f5c1
 800f55c:	0800f5c1 	.word	0x0800f5c1
 800f560:	0800f5c1 	.word	0x0800f5c1
 800f564:	0800f5c1 	.word	0x0800f5c1
 800f568:	0800f5c1 	.word	0x0800f5c1
 800f56c:	0800f5c1 	.word	0x0800f5c1
 800f570:	0800f5c1 	.word	0x0800f5c1
 800f574:	0800f5c1 	.word	0x0800f5c1
 800f578:	0800f5c1 	.word	0x0800f5c1
 800f57c:	0800f5c1 	.word	0x0800f5c1
 800f580:	0800f5c1 	.word	0x0800f5c1
 800f584:	0800f5c1 	.word	0x0800f5c1
 800f588:	0800f5c1 	.word	0x0800f5c1
 800f58c:	0800f5c1 	.word	0x0800f5c1
 800f590:	0800f5c1 	.word	0x0800f5c1
 800f594:	0800f5c1 	.word	0x0800f5c1
 800f598:	0800f5c1 	.word	0x0800f5c1
 800f59c:	0800f5c1 	.word	0x0800f5c1
 800f5a0:	0800f5c1 	.word	0x0800f5c1
 800f5a4:	0800f5c1 	.word	0x0800f5c1
 800f5a8:	0800f5c1 	.word	0x0800f5c1
 800f5ac:	0800f5c1 	.word	0x0800f5c1
 800f5b0:	0800f5c1 	.word	0x0800f5c1
 800f5b4:	0800f5c1 	.word	0x0800f5c1
 800f5b8:	0800f5c1 	.word	0x0800f5c1
 800f5bc:	0800f5c1 	.word	0x0800f5c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f5c0:	bf00      	nop
  }

  return (USBD_OK);
 800f5c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f5da:	6879      	ldr	r1, [r7, #4]
 800f5dc:	4805      	ldr	r0, [pc, #20]	; (800f5f4 <CDC_Receive_FS+0x24>)
 800f5de:	f7fb fe23 	bl	800b228 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f5e2:	4804      	ldr	r0, [pc, #16]	; (800f5f4 <CDC_Receive_FS+0x24>)
 800f5e4:	f7fb fe3e 	bl	800b264 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f5e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3708      	adds	r7, #8
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	20016244 	.word	0x20016244

0800f5f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b087      	sub	sp, #28
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	4613      	mov	r3, r2
 800f604:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f606:	2300      	movs	r3, #0
 800f608:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f60a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f60e:	4618      	mov	r0, r3
 800f610:	371c      	adds	r7, #28
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr
	...

0800f61c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
 800f622:	4603      	mov	r3, r0
 800f624:	6039      	str	r1, [r7, #0]
 800f626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	2212      	movs	r2, #18
 800f62c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f62e:	4b03      	ldr	r3, [pc, #12]	; (800f63c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f630:	4618      	mov	r0, r3
 800f632:	370c      	adds	r7, #12
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	4770      	bx	lr
 800f63c:	200000d0 	.word	0x200000d0

0800f640 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	4603      	mov	r3, r0
 800f648:	6039      	str	r1, [r7, #0]
 800f64a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	2204      	movs	r2, #4
 800f650:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f652:	4b03      	ldr	r3, [pc, #12]	; (800f660 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f654:	4618      	mov	r0, r3
 800f656:	370c      	adds	r7, #12
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr
 800f660:	200000e4 	.word	0x200000e4

0800f664 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	4603      	mov	r3, r0
 800f66c:	6039      	str	r1, [r7, #0]
 800f66e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f670:	79fb      	ldrb	r3, [r7, #7]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d105      	bne.n	800f682 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f676:	683a      	ldr	r2, [r7, #0]
 800f678:	4907      	ldr	r1, [pc, #28]	; (800f698 <USBD_FS_ProductStrDescriptor+0x34>)
 800f67a:	4808      	ldr	r0, [pc, #32]	; (800f69c <USBD_FS_ProductStrDescriptor+0x38>)
 800f67c:	f7fd f83a 	bl	800c6f4 <USBD_GetString>
 800f680:	e004      	b.n	800f68c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f682:	683a      	ldr	r2, [r7, #0]
 800f684:	4904      	ldr	r1, [pc, #16]	; (800f698 <USBD_FS_ProductStrDescriptor+0x34>)
 800f686:	4805      	ldr	r0, [pc, #20]	; (800f69c <USBD_FS_ProductStrDescriptor+0x38>)
 800f688:	f7fd f834 	bl	800c6f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f68c:	4b02      	ldr	r3, [pc, #8]	; (800f698 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3708      	adds	r7, #8
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	20017520 	.word	0x20017520
 800f69c:	0801be88 	.word	0x0801be88

0800f6a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	6039      	str	r1, [r7, #0]
 800f6aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f6ac:	683a      	ldr	r2, [r7, #0]
 800f6ae:	4904      	ldr	r1, [pc, #16]	; (800f6c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f6b0:	4804      	ldr	r0, [pc, #16]	; (800f6c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f6b2:	f7fd f81f 	bl	800c6f4 <USBD_GetString>
  return USBD_StrDesc;
 800f6b6:	4b02      	ldr	r3, [pc, #8]	; (800f6c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3708      	adds	r7, #8
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	20017520 	.word	0x20017520
 800f6c4:	0801be94 	.word	0x0801be94

0800f6c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	6039      	str	r1, [r7, #0]
 800f6d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	221a      	movs	r2, #26
 800f6d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f6da:	f000 f843 	bl	800f764 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f6de:	4b02      	ldr	r3, [pc, #8]	; (800f6e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3708      	adds	r7, #8
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	200000e8 	.word	0x200000e8

0800f6ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	6039      	str	r1, [r7, #0]
 800f6f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f6f8:	79fb      	ldrb	r3, [r7, #7]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d105      	bne.n	800f70a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f6fe:	683a      	ldr	r2, [r7, #0]
 800f700:	4907      	ldr	r1, [pc, #28]	; (800f720 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f702:	4808      	ldr	r0, [pc, #32]	; (800f724 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f704:	f7fc fff6 	bl	800c6f4 <USBD_GetString>
 800f708:	e004      	b.n	800f714 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f70a:	683a      	ldr	r2, [r7, #0]
 800f70c:	4904      	ldr	r1, [pc, #16]	; (800f720 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f70e:	4805      	ldr	r0, [pc, #20]	; (800f724 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f710:	f7fc fff0 	bl	800c6f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f714:	4b02      	ldr	r3, [pc, #8]	; (800f720 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f716:	4618      	mov	r0, r3
 800f718:	3708      	adds	r7, #8
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	bf00      	nop
 800f720:	20017520 	.word	0x20017520
 800f724:	0801be9c 	.word	0x0801be9c

0800f728 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	4603      	mov	r3, r0
 800f730:	6039      	str	r1, [r7, #0]
 800f732:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f734:	79fb      	ldrb	r3, [r7, #7]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d105      	bne.n	800f746 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f73a:	683a      	ldr	r2, [r7, #0]
 800f73c:	4907      	ldr	r1, [pc, #28]	; (800f75c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f73e:	4808      	ldr	r0, [pc, #32]	; (800f760 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f740:	f7fc ffd8 	bl	800c6f4 <USBD_GetString>
 800f744:	e004      	b.n	800f750 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f746:	683a      	ldr	r2, [r7, #0]
 800f748:	4904      	ldr	r1, [pc, #16]	; (800f75c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f74a:	4805      	ldr	r0, [pc, #20]	; (800f760 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f74c:	f7fc ffd2 	bl	800c6f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f750:	4b02      	ldr	r3, [pc, #8]	; (800f75c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f752:	4618      	mov	r0, r3
 800f754:	3708      	adds	r7, #8
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	20017520 	.word	0x20017520
 800f760:	0801bea8 	.word	0x0801bea8

0800f764 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f76a:	4b0f      	ldr	r3, [pc, #60]	; (800f7a8 <Get_SerialNum+0x44>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f770:	4b0e      	ldr	r3, [pc, #56]	; (800f7ac <Get_SerialNum+0x48>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f776:	4b0e      	ldr	r3, [pc, #56]	; (800f7b0 <Get_SerialNum+0x4c>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f77c:	68fa      	ldr	r2, [r7, #12]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4413      	add	r3, r2
 800f782:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d009      	beq.n	800f79e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f78a:	2208      	movs	r2, #8
 800f78c:	4909      	ldr	r1, [pc, #36]	; (800f7b4 <Get_SerialNum+0x50>)
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f000 f814 	bl	800f7bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f794:	2204      	movs	r2, #4
 800f796:	4908      	ldr	r1, [pc, #32]	; (800f7b8 <Get_SerialNum+0x54>)
 800f798:	68b8      	ldr	r0, [r7, #8]
 800f79a:	f000 f80f 	bl	800f7bc <IntToUnicode>
  }
}
 800f79e:	bf00      	nop
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	1fff7a10 	.word	0x1fff7a10
 800f7ac:	1fff7a14 	.word	0x1fff7a14
 800f7b0:	1fff7a18 	.word	0x1fff7a18
 800f7b4:	200000ea 	.word	0x200000ea
 800f7b8:	200000fa 	.word	0x200000fa

0800f7bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f7bc:	b480      	push	{r7}
 800f7be:	b087      	sub	sp, #28
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	60f8      	str	r0, [r7, #12]
 800f7c4:	60b9      	str	r1, [r7, #8]
 800f7c6:	4613      	mov	r3, r2
 800f7c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	75fb      	strb	r3, [r7, #23]
 800f7d2:	e027      	b.n	800f824 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	0f1b      	lsrs	r3, r3, #28
 800f7d8:	2b09      	cmp	r3, #9
 800f7da:	d80b      	bhi.n	800f7f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	0f1b      	lsrs	r3, r3, #28
 800f7e0:	b2da      	uxtb	r2, r3
 800f7e2:	7dfb      	ldrb	r3, [r7, #23]
 800f7e4:	005b      	lsls	r3, r3, #1
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	440b      	add	r3, r1
 800f7ec:	3230      	adds	r2, #48	; 0x30
 800f7ee:	b2d2      	uxtb	r2, r2
 800f7f0:	701a      	strb	r2, [r3, #0]
 800f7f2:	e00a      	b.n	800f80a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	0f1b      	lsrs	r3, r3, #28
 800f7f8:	b2da      	uxtb	r2, r3
 800f7fa:	7dfb      	ldrb	r3, [r7, #23]
 800f7fc:	005b      	lsls	r3, r3, #1
 800f7fe:	4619      	mov	r1, r3
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	440b      	add	r3, r1
 800f804:	3237      	adds	r2, #55	; 0x37
 800f806:	b2d2      	uxtb	r2, r2
 800f808:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	011b      	lsls	r3, r3, #4
 800f80e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f810:	7dfb      	ldrb	r3, [r7, #23]
 800f812:	005b      	lsls	r3, r3, #1
 800f814:	3301      	adds	r3, #1
 800f816:	68ba      	ldr	r2, [r7, #8]
 800f818:	4413      	add	r3, r2
 800f81a:	2200      	movs	r2, #0
 800f81c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f81e:	7dfb      	ldrb	r3, [r7, #23]
 800f820:	3301      	adds	r3, #1
 800f822:	75fb      	strb	r3, [r7, #23]
 800f824:	7dfa      	ldrb	r2, [r7, #23]
 800f826:	79fb      	ldrb	r3, [r7, #7]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d3d3      	bcc.n	800f7d4 <IntToUnicode+0x18>
  }
}
 800f82c:	bf00      	nop
 800f82e:	bf00      	nop
 800f830:	371c      	adds	r7, #28
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr
	...

0800f83c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b08a      	sub	sp, #40	; 0x28
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f844:	f107 0314 	add.w	r3, r7, #20
 800f848:	2200      	movs	r2, #0
 800f84a:	601a      	str	r2, [r3, #0]
 800f84c:	605a      	str	r2, [r3, #4]
 800f84e:	609a      	str	r2, [r3, #8]
 800f850:	60da      	str	r2, [r3, #12]
 800f852:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f85c:	d13a      	bne.n	800f8d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f85e:	2300      	movs	r3, #0
 800f860:	613b      	str	r3, [r7, #16]
 800f862:	4b1e      	ldr	r3, [pc, #120]	; (800f8dc <HAL_PCD_MspInit+0xa0>)
 800f864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f866:	4a1d      	ldr	r2, [pc, #116]	; (800f8dc <HAL_PCD_MspInit+0xa0>)
 800f868:	f043 0301 	orr.w	r3, r3, #1
 800f86c:	6313      	str	r3, [r2, #48]	; 0x30
 800f86e:	4b1b      	ldr	r3, [pc, #108]	; (800f8dc <HAL_PCD_MspInit+0xa0>)
 800f870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f872:	f003 0301 	and.w	r3, r3, #1
 800f876:	613b      	str	r3, [r7, #16]
 800f878:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f87a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f87e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f880:	2302      	movs	r3, #2
 800f882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f884:	2300      	movs	r3, #0
 800f886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f888:	2303      	movs	r3, #3
 800f88a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f88c:	230a      	movs	r3, #10
 800f88e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f890:	f107 0314 	add.w	r3, r7, #20
 800f894:	4619      	mov	r1, r3
 800f896:	4812      	ldr	r0, [pc, #72]	; (800f8e0 <HAL_PCD_MspInit+0xa4>)
 800f898:	f7f4 fbd2 	bl	8004040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f89c:	4b0f      	ldr	r3, [pc, #60]	; (800f8dc <HAL_PCD_MspInit+0xa0>)
 800f89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8a0:	4a0e      	ldr	r2, [pc, #56]	; (800f8dc <HAL_PCD_MspInit+0xa0>)
 800f8a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8a6:	6353      	str	r3, [r2, #52]	; 0x34
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	60fb      	str	r3, [r7, #12]
 800f8ac:	4b0b      	ldr	r3, [pc, #44]	; (800f8dc <HAL_PCD_MspInit+0xa0>)
 800f8ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8b0:	4a0a      	ldr	r2, [pc, #40]	; (800f8dc <HAL_PCD_MspInit+0xa0>)
 800f8b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f8b6:	6453      	str	r3, [r2, #68]	; 0x44
 800f8b8:	4b08      	ldr	r3, [pc, #32]	; (800f8dc <HAL_PCD_MspInit+0xa0>)
 800f8ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8c0:	60fb      	str	r3, [r7, #12]
 800f8c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	2105      	movs	r1, #5
 800f8c8:	2043      	movs	r0, #67	; 0x43
 800f8ca:	f7f3 ff71 	bl	80037b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f8ce:	2043      	movs	r0, #67	; 0x43
 800f8d0:	f7f3 ff8a 	bl	80037e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f8d4:	bf00      	nop
 800f8d6:	3728      	adds	r7, #40	; 0x28
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	40023800 	.word	0x40023800
 800f8e0:	40020000 	.word	0x40020000

0800f8e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	4610      	mov	r0, r2
 800f8fc:	f7fb fd9b 	bl	800b436 <USBD_LL_SetupStage>
}
 800f900:	bf00      	nop
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	460b      	mov	r3, r1
 800f912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f91a:	78fa      	ldrb	r2, [r7, #3]
 800f91c:	6879      	ldr	r1, [r7, #4]
 800f91e:	4613      	mov	r3, r2
 800f920:	00db      	lsls	r3, r3, #3
 800f922:	4413      	add	r3, r2
 800f924:	009b      	lsls	r3, r3, #2
 800f926:	440b      	add	r3, r1
 800f928:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	78fb      	ldrb	r3, [r7, #3]
 800f930:	4619      	mov	r1, r3
 800f932:	f7fb fdd5 	bl	800b4e0 <USBD_LL_DataOutStage>
}
 800f936:	bf00      	nop
 800f938:	3708      	adds	r7, #8
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}

0800f93e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f93e:	b580      	push	{r7, lr}
 800f940:	b082      	sub	sp, #8
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
 800f946:	460b      	mov	r3, r1
 800f948:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f950:	78fa      	ldrb	r2, [r7, #3]
 800f952:	6879      	ldr	r1, [r7, #4]
 800f954:	4613      	mov	r3, r2
 800f956:	00db      	lsls	r3, r3, #3
 800f958:	4413      	add	r3, r2
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	440b      	add	r3, r1
 800f95e:	334c      	adds	r3, #76	; 0x4c
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	78fb      	ldrb	r3, [r7, #3]
 800f964:	4619      	mov	r1, r3
 800f966:	f7fb fe6e 	bl	800b646 <USBD_LL_DataInStage>
}
 800f96a:	bf00      	nop
 800f96c:	3708      	adds	r7, #8
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}

0800f972 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f972:	b580      	push	{r7, lr}
 800f974:	b082      	sub	sp, #8
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f980:	4618      	mov	r0, r3
 800f982:	f7fb ffa2 	bl	800b8ca <USBD_LL_SOF>
}
 800f986:	bf00      	nop
 800f988:	3708      	adds	r7, #8
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}

0800f98e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f98e:	b580      	push	{r7, lr}
 800f990:	b084      	sub	sp, #16
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f996:	2301      	movs	r3, #1
 800f998:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d102      	bne.n	800f9a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	73fb      	strb	r3, [r7, #15]
 800f9a6:	e008      	b.n	800f9ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	2b02      	cmp	r3, #2
 800f9ae:	d102      	bne.n	800f9b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	73fb      	strb	r3, [r7, #15]
 800f9b4:	e001      	b.n	800f9ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f9b6:	f7f2 f92d 	bl	8001c14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9c0:	7bfa      	ldrb	r2, [r7, #15]
 800f9c2:	4611      	mov	r1, r2
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7fb ff42 	bl	800b84e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fb feea 	bl	800b7aa <USBD_LL_Reset>
}
 800f9d6:	bf00      	nop
 800f9d8:	3710      	adds	r7, #16
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
	...

0800f9e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fb ff3d 	bl	800b86e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	687a      	ldr	r2, [r7, #4]
 800fa00:	6812      	ldr	r2, [r2, #0]
 800fa02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fa06:	f043 0301 	orr.w	r3, r3, #1
 800fa0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6a1b      	ldr	r3, [r3, #32]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d005      	beq.n	800fa20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa14:	4b04      	ldr	r3, [pc, #16]	; (800fa28 <HAL_PCD_SuspendCallback+0x48>)
 800fa16:	691b      	ldr	r3, [r3, #16]
 800fa18:	4a03      	ldr	r2, [pc, #12]	; (800fa28 <HAL_PCD_SuspendCallback+0x48>)
 800fa1a:	f043 0306 	orr.w	r3, r3, #6
 800fa1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fa20:	bf00      	nop
 800fa22:	3708      	adds	r7, #8
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	e000ed00 	.word	0xe000ed00

0800fa2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b082      	sub	sp, #8
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7fb ff2d 	bl	800b89a <USBD_LL_Resume>
}
 800fa40:	bf00      	nop
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	460b      	mov	r3, r1
 800fa52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa5a:	78fa      	ldrb	r2, [r7, #3]
 800fa5c:	4611      	mov	r1, r2
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7fb ff85 	bl	800b96e <USBD_LL_IsoOUTIncomplete>
}
 800fa64:	bf00      	nop
 800fa66:	3708      	adds	r7, #8
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	460b      	mov	r3, r1
 800fa76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa7e:	78fa      	ldrb	r2, [r7, #3]
 800fa80:	4611      	mov	r1, r2
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7fb ff41 	bl	800b90a <USBD_LL_IsoINIncomplete>
}
 800fa88:	bf00      	nop
 800fa8a:	3708      	adds	r7, #8
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}

0800fa90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fb ff97 	bl	800b9d2 <USBD_LL_DevConnected>
}
 800faa4:	bf00      	nop
 800faa6:	3708      	adds	r7, #8
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}

0800faac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800faba:	4618      	mov	r0, r3
 800fabc:	f7fb ff94 	bl	800b9e8 <USBD_LL_DevDisconnected>
}
 800fac0:	bf00      	nop
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d13c      	bne.n	800fb52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fad8:	4a20      	ldr	r2, [pc, #128]	; (800fb5c <USBD_LL_Init+0x94>)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4a1e      	ldr	r2, [pc, #120]	; (800fb5c <USBD_LL_Init+0x94>)
 800fae4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fae8:	4b1c      	ldr	r3, [pc, #112]	; (800fb5c <USBD_LL_Init+0x94>)
 800faea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800faee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800faf0:	4b1a      	ldr	r3, [pc, #104]	; (800fb5c <USBD_LL_Init+0x94>)
 800faf2:	2204      	movs	r2, #4
 800faf4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800faf6:	4b19      	ldr	r3, [pc, #100]	; (800fb5c <USBD_LL_Init+0x94>)
 800faf8:	2202      	movs	r2, #2
 800fafa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fafc:	4b17      	ldr	r3, [pc, #92]	; (800fb5c <USBD_LL_Init+0x94>)
 800fafe:	2200      	movs	r2, #0
 800fb00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fb02:	4b16      	ldr	r3, [pc, #88]	; (800fb5c <USBD_LL_Init+0x94>)
 800fb04:	2202      	movs	r2, #2
 800fb06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fb08:	4b14      	ldr	r3, [pc, #80]	; (800fb5c <USBD_LL_Init+0x94>)
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fb0e:	4b13      	ldr	r3, [pc, #76]	; (800fb5c <USBD_LL_Init+0x94>)
 800fb10:	2200      	movs	r2, #0
 800fb12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fb14:	4b11      	ldr	r3, [pc, #68]	; (800fb5c <USBD_LL_Init+0x94>)
 800fb16:	2200      	movs	r2, #0
 800fb18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800fb1a:	4b10      	ldr	r3, [pc, #64]	; (800fb5c <USBD_LL_Init+0x94>)
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fb20:	4b0e      	ldr	r3, [pc, #56]	; (800fb5c <USBD_LL_Init+0x94>)
 800fb22:	2200      	movs	r2, #0
 800fb24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fb26:	480d      	ldr	r0, [pc, #52]	; (800fb5c <USBD_LL_Init+0x94>)
 800fb28:	f7f4 fd84 	bl	8004634 <HAL_PCD_Init>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d001      	beq.n	800fb36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fb32:	f7f2 f86f 	bl	8001c14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fb36:	2180      	movs	r1, #128	; 0x80
 800fb38:	4808      	ldr	r0, [pc, #32]	; (800fb5c <USBD_LL_Init+0x94>)
 800fb3a:	f7f5 ffdc 	bl	8005af6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fb3e:	2240      	movs	r2, #64	; 0x40
 800fb40:	2100      	movs	r1, #0
 800fb42:	4806      	ldr	r0, [pc, #24]	; (800fb5c <USBD_LL_Init+0x94>)
 800fb44:	f7f5 ff90 	bl	8005a68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fb48:	2280      	movs	r2, #128	; 0x80
 800fb4a:	2101      	movs	r1, #1
 800fb4c:	4803      	ldr	r0, [pc, #12]	; (800fb5c <USBD_LL_Init+0x94>)
 800fb4e:	f7f5 ff8b 	bl	8005a68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fb52:	2300      	movs	r3, #0
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	20017720 	.word	0x20017720

0800fb60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b084      	sub	sp, #16
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7f4 fe79 	bl	800486e <HAL_PCD_Start>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb80:	7bfb      	ldrb	r3, [r7, #15]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f000 f942 	bl	800fe0c <USBD_Get_USB_Status>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3710      	adds	r7, #16
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b084      	sub	sp, #16
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	6078      	str	r0, [r7, #4]
 800fb9e:	4608      	mov	r0, r1
 800fba0:	4611      	mov	r1, r2
 800fba2:	461a      	mov	r2, r3
 800fba4:	4603      	mov	r3, r0
 800fba6:	70fb      	strb	r3, [r7, #3]
 800fba8:	460b      	mov	r3, r1
 800fbaa:	70bb      	strb	r3, [r7, #2]
 800fbac:	4613      	mov	r3, r2
 800fbae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fbbe:	78bb      	ldrb	r3, [r7, #2]
 800fbc0:	883a      	ldrh	r2, [r7, #0]
 800fbc2:	78f9      	ldrb	r1, [r7, #3]
 800fbc4:	f7f5 fb4a 	bl	800525c <HAL_PCD_EP_Open>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbcc:	7bfb      	ldrb	r3, [r7, #15]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f000 f91c 	bl	800fe0c <USBD_Get_USB_Status>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbe2:	b580      	push	{r7, lr}
 800fbe4:	b084      	sub	sp, #16
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
 800fbea:	460b      	mov	r3, r1
 800fbec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbfc:	78fa      	ldrb	r2, [r7, #3]
 800fbfe:	4611      	mov	r1, r2
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7f5 fb93 	bl	800532c <HAL_PCD_EP_Close>
 800fc06:	4603      	mov	r3, r0
 800fc08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc0a:	7bfb      	ldrb	r3, [r7, #15]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f000 f8fd 	bl	800fe0c <USBD_Get_USB_Status>
 800fc12:	4603      	mov	r3, r0
 800fc14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc16:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3710      	adds	r7, #16
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}

0800fc20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	460b      	mov	r3, r1
 800fc2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc30:	2300      	movs	r3, #0
 800fc32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc3a:	78fa      	ldrb	r2, [r7, #3]
 800fc3c:	4611      	mov	r1, r2
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7f5 fc6b 	bl	800551a <HAL_PCD_EP_SetStall>
 800fc44:	4603      	mov	r3, r0
 800fc46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc48:	7bfb      	ldrb	r3, [r7, #15]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f000 f8de 	bl	800fe0c <USBD_Get_USB_Status>
 800fc50:	4603      	mov	r3, r0
 800fc52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc54:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3710      	adds	r7, #16
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}

0800fc5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc5e:	b580      	push	{r7, lr}
 800fc60:	b084      	sub	sp, #16
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	6078      	str	r0, [r7, #4]
 800fc66:	460b      	mov	r3, r1
 800fc68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc78:	78fa      	ldrb	r2, [r7, #3]
 800fc7a:	4611      	mov	r1, r2
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7f5 fcb0 	bl	80055e2 <HAL_PCD_EP_ClrStall>
 800fc82:	4603      	mov	r3, r0
 800fc84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc86:	7bfb      	ldrb	r3, [r7, #15]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f000 f8bf 	bl	800fe0c <USBD_Get_USB_Status>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc92:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3710      	adds	r7, #16
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b085      	sub	sp, #20
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	460b      	mov	r3, r1
 800fca6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fcb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	da0b      	bge.n	800fcd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fcb8:	78fb      	ldrb	r3, [r7, #3]
 800fcba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fcbe:	68f9      	ldr	r1, [r7, #12]
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	00db      	lsls	r3, r3, #3
 800fcc4:	4413      	add	r3, r2
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	440b      	add	r3, r1
 800fcca:	333e      	adds	r3, #62	; 0x3e
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	e00b      	b.n	800fce8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fcd0:	78fb      	ldrb	r3, [r7, #3]
 800fcd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fcd6:	68f9      	ldr	r1, [r7, #12]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	00db      	lsls	r3, r3, #3
 800fcdc:	4413      	add	r3, r2
 800fcde:	009b      	lsls	r3, r3, #2
 800fce0:	440b      	add	r3, r1
 800fce2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fce6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3714      	adds	r7, #20
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr

0800fcf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd00:	2300      	movs	r3, #0
 800fd02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd04:	2300      	movs	r3, #0
 800fd06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fd0e:	78fa      	ldrb	r2, [r7, #3]
 800fd10:	4611      	mov	r1, r2
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7f5 fa7d 	bl	8005212 <HAL_PCD_SetAddress>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd1c:	7bfb      	ldrb	r3, [r7, #15]
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f000 f874 	bl	800fe0c <USBD_Get_USB_Status>
 800fd24:	4603      	mov	r3, r0
 800fd26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd28:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3710      	adds	r7, #16
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}

0800fd32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b086      	sub	sp, #24
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	60f8      	str	r0, [r7, #12]
 800fd3a:	607a      	str	r2, [r7, #4]
 800fd3c:	603b      	str	r3, [r7, #0]
 800fd3e:	460b      	mov	r3, r1
 800fd40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd42:	2300      	movs	r3, #0
 800fd44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd46:	2300      	movs	r3, #0
 800fd48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fd50:	7af9      	ldrb	r1, [r7, #11]
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	687a      	ldr	r2, [r7, #4]
 800fd56:	f7f5 fb96 	bl	8005486 <HAL_PCD_EP_Transmit>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd5e:	7dfb      	ldrb	r3, [r7, #23]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f000 f853 	bl	800fe0c <USBD_Get_USB_Status>
 800fd66:	4603      	mov	r3, r0
 800fd68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd6a:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3718      	adds	r7, #24
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b086      	sub	sp, #24
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	607a      	str	r2, [r7, #4]
 800fd7e:	603b      	str	r3, [r7, #0]
 800fd80:	460b      	mov	r3, r1
 800fd82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd84:	2300      	movs	r3, #0
 800fd86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fd92:	7af9      	ldrb	r1, [r7, #11]
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	687a      	ldr	r2, [r7, #4]
 800fd98:	f7f5 fb12 	bl	80053c0 <HAL_PCD_EP_Receive>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fda0:	7dfb      	ldrb	r3, [r7, #23]
 800fda2:	4618      	mov	r0, r3
 800fda4:	f000 f832 	bl	800fe0c <USBD_Get_USB_Status>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fdac:	7dbb      	ldrb	r3, [r7, #22]
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3718      	adds	r7, #24
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}

0800fdb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fdb6:	b580      	push	{r7, lr}
 800fdb8:	b082      	sub	sp, #8
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
 800fdbe:	460b      	mov	r3, r1
 800fdc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fdc8:	78fa      	ldrb	r2, [r7, #3]
 800fdca:	4611      	mov	r1, r2
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7f5 fb42 	bl	8005456 <HAL_PCD_EP_GetRxCount>
 800fdd2:	4603      	mov	r3, r0
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3708      	adds	r7, #8
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fde4:	4b03      	ldr	r3, [pc, #12]	; (800fdf4 <USBD_static_malloc+0x18>)
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	370c      	adds	r7, #12
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop
 800fdf4:	20017c2c 	.word	0x20017c2c

0800fdf8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b083      	sub	sp, #12
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]

}
 800fe00:	bf00      	nop
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b085      	sub	sp, #20
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	4603      	mov	r3, r0
 800fe14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe16:	2300      	movs	r3, #0
 800fe18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fe1a:	79fb      	ldrb	r3, [r7, #7]
 800fe1c:	2b03      	cmp	r3, #3
 800fe1e:	d817      	bhi.n	800fe50 <USBD_Get_USB_Status+0x44>
 800fe20:	a201      	add	r2, pc, #4	; (adr r2, 800fe28 <USBD_Get_USB_Status+0x1c>)
 800fe22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe26:	bf00      	nop
 800fe28:	0800fe39 	.word	0x0800fe39
 800fe2c:	0800fe3f 	.word	0x0800fe3f
 800fe30:	0800fe45 	.word	0x0800fe45
 800fe34:	0800fe4b 	.word	0x0800fe4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe3c:	e00b      	b.n	800fe56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe3e:	2303      	movs	r3, #3
 800fe40:	73fb      	strb	r3, [r7, #15]
    break;
 800fe42:	e008      	b.n	800fe56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe44:	2301      	movs	r3, #1
 800fe46:	73fb      	strb	r3, [r7, #15]
    break;
 800fe48:	e005      	b.n	800fe56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe4a:	2303      	movs	r3, #3
 800fe4c:	73fb      	strb	r3, [r7, #15]
    break;
 800fe4e:	e002      	b.n	800fe56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fe50:	2303      	movs	r3, #3
 800fe52:	73fb      	strb	r3, [r7, #15]
    break;
 800fe54:	bf00      	nop
  }
  return usb_status;
 800fe56:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3714      	adds	r7, #20
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <rcl_get_zero_initialized_publisher>:
 800fe64:	4b01      	ldr	r3, [pc, #4]	; (800fe6c <rcl_get_zero_initialized_publisher+0x8>)
 800fe66:	6818      	ldr	r0, [r3, #0]
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	0801bf2c 	.word	0x0801bf2c

0800fe70 <rcl_publisher_init>:
 800fe70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe74:	b088      	sub	sp, #32
 800fe76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800fe78:	2d00      	cmp	r5, #0
 800fe7a:	d069      	beq.n	800ff50 <rcl_publisher_init+0xe0>
 800fe7c:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800fe80:	4604      	mov	r4, r0
 800fe82:	4648      	mov	r0, r9
 800fe84:	460e      	mov	r6, r1
 800fe86:	4690      	mov	r8, r2
 800fe88:	461f      	mov	r7, r3
 800fe8a:	f000 f9d5 	bl	8010238 <rcutils_allocator_is_valid>
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	d05e      	beq.n	800ff50 <rcl_publisher_init+0xe0>
 800fe92:	2c00      	cmp	r4, #0
 800fe94:	d05c      	beq.n	800ff50 <rcl_publisher_init+0xe0>
 800fe96:	f8d4 a000 	ldr.w	sl, [r4]
 800fe9a:	f1ba 0f00 	cmp.w	sl, #0
 800fe9e:	d004      	beq.n	800feaa <rcl_publisher_init+0x3a>
 800fea0:	2764      	movs	r7, #100	; 0x64
 800fea2:	4638      	mov	r0, r7
 800fea4:	b008      	add	sp, #32
 800fea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feaa:	4630      	mov	r0, r6
 800feac:	f006 fa7c 	bl	80163a8 <rcl_node_is_valid>
 800feb0:	2800      	cmp	r0, #0
 800feb2:	d052      	beq.n	800ff5a <rcl_publisher_init+0xea>
 800feb4:	f1b8 0f00 	cmp.w	r8, #0
 800feb8:	d04a      	beq.n	800ff50 <rcl_publisher_init+0xe0>
 800feba:	2f00      	cmp	r7, #0
 800febc:	d048      	beq.n	800ff50 <rcl_publisher_init+0xe0>
 800febe:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800fec2:	aa07      	add	r2, sp, #28
 800fec4:	9205      	str	r2, [sp, #20]
 800fec6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800feca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fece:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fed2:	f8cd a01c 	str.w	sl, [sp, #28]
 800fed6:	4639      	mov	r1, r7
 800fed8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800fedc:	4630      	mov	r0, r6
 800fede:	f006 fab7 	bl	8016450 <rcl_node_resolve_name>
 800fee2:	4607      	mov	r7, r0
 800fee4:	2800      	cmp	r0, #0
 800fee6:	d14f      	bne.n	800ff88 <rcl_publisher_init+0x118>
 800fee8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800feea:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800feec:	20c8      	movs	r0, #200	; 0xc8
 800feee:	4798      	blx	r3
 800fef0:	6020      	str	r0, [r4, #0]
 800fef2:	2800      	cmp	r0, #0
 800fef4:	d04e      	beq.n	800ff94 <rcl_publisher_init+0x124>
 800fef6:	4630      	mov	r0, r6
 800fef8:	f006 fa78 	bl	80163ec <rcl_node_get_rmw_handle>
 800fefc:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800ff00:	9300      	str	r3, [sp, #0]
 800ff02:	9a07      	ldr	r2, [sp, #28]
 800ff04:	6827      	ldr	r7, [r4, #0]
 800ff06:	462b      	mov	r3, r5
 800ff08:	4641      	mov	r1, r8
 800ff0a:	f000 fa53 	bl	80103b4 <rmw_create_publisher>
 800ff0e:	6823      	ldr	r3, [r4, #0]
 800ff10:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800ff14:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800ff18:	b370      	cbz	r0, 800ff78 <rcl_publisher_init+0x108>
 800ff1a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800ff1e:	f000 fb29 	bl	8010574 <rmw_publisher_get_actual_qos>
 800ff22:	6823      	ldr	r3, [r4, #0]
 800ff24:	4607      	mov	r7, r0
 800ff26:	b9d0      	cbnz	r0, 800ff5e <rcl_publisher_init+0xee>
 800ff28:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800ff2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800ff30:	4629      	mov	r1, r5
 800ff32:	2270      	movs	r2, #112	; 0x70
 800ff34:	4618      	mov	r0, r3
 800ff36:	f00a fc41 	bl	801a7bc <memcpy>
 800ff3a:	6832      	ldr	r2, [r6, #0]
 800ff3c:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800ff40:	9807      	ldr	r0, [sp, #28]
 800ff42:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800ff44:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800ff46:	4798      	blx	r3
 800ff48:	4638      	mov	r0, r7
 800ff4a:	b008      	add	sp, #32
 800ff4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff50:	270b      	movs	r7, #11
 800ff52:	4638      	mov	r0, r7
 800ff54:	b008      	add	sp, #32
 800ff56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff5a:	27c8      	movs	r7, #200	; 0xc8
 800ff5c:	e7a1      	b.n	800fea2 <rcl_publisher_init+0x32>
 800ff5e:	b18b      	cbz	r3, 800ff84 <rcl_publisher_init+0x114>
 800ff60:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800ff64:	b142      	cbz	r2, 800ff78 <rcl_publisher_init+0x108>
 800ff66:	4630      	mov	r0, r6
 800ff68:	f006 fa40 	bl	80163ec <rcl_node_get_rmw_handle>
 800ff6c:	6823      	ldr	r3, [r4, #0]
 800ff6e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800ff72:	f000 fb01 	bl	8010578 <rmw_destroy_publisher>
 800ff76:	6823      	ldr	r3, [r4, #0]
 800ff78:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800ff7a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	4790      	blx	r2
 800ff80:	2300      	movs	r3, #0
 800ff82:	6023      	str	r3, [r4, #0]
 800ff84:	2701      	movs	r7, #1
 800ff86:	e7db      	b.n	800ff40 <rcl_publisher_init+0xd0>
 800ff88:	2867      	cmp	r0, #103	; 0x67
 800ff8a:	d0d9      	beq.n	800ff40 <rcl_publisher_init+0xd0>
 800ff8c:	2869      	cmp	r0, #105	; 0x69
 800ff8e:	d003      	beq.n	800ff98 <rcl_publisher_init+0x128>
 800ff90:	280a      	cmp	r0, #10
 800ff92:	d1f7      	bne.n	800ff84 <rcl_publisher_init+0x114>
 800ff94:	270a      	movs	r7, #10
 800ff96:	e7d3      	b.n	800ff40 <rcl_publisher_init+0xd0>
 800ff98:	2767      	movs	r7, #103	; 0x67
 800ff9a:	e7d1      	b.n	800ff40 <rcl_publisher_init+0xd0>

0800ff9c <rcl_publisher_get_default_options>:
 800ff9c:	b570      	push	{r4, r5, r6, lr}
 800ff9e:	4d14      	ldr	r5, [pc, #80]	; (800fff0 <rcl_publisher_get_default_options+0x54>)
 800ffa0:	4914      	ldr	r1, [pc, #80]	; (800fff4 <rcl_publisher_get_default_options+0x58>)
 800ffa2:	b088      	sub	sp, #32
 800ffa4:	4604      	mov	r4, r0
 800ffa6:	2250      	movs	r2, #80	; 0x50
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	f00a fc07 	bl	801a7bc <memcpy>
 800ffae:	a802      	add	r0, sp, #8
 800ffb0:	f000 f934 	bl	801021c <rcutils_get_default_allocator>
 800ffb4:	f10d 0c08 	add.w	ip, sp, #8
 800ffb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ffbc:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800ffc0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ffc4:	466e      	mov	r6, sp
 800ffc6:	f8dc 3000 	ldr.w	r3, [ip]
 800ffca:	f8ce 3000 	str.w	r3, [lr]
 800ffce:	4630      	mov	r0, r6
 800ffd0:	f000 f972 	bl	80102b8 <rmw_get_default_publisher_options>
 800ffd4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ffd8:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800ffdc:	e883 0003 	stmia.w	r3, {r0, r1}
 800ffe0:	2270      	movs	r2, #112	; 0x70
 800ffe2:	4629      	mov	r1, r5
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	f00a fbe9 	bl	801a7bc <memcpy>
 800ffea:	4620      	mov	r0, r4
 800ffec:	b008      	add	sp, #32
 800ffee:	bd70      	pop	{r4, r5, r6, pc}
 800fff0:	20017e50 	.word	0x20017e50
 800fff4:	0801bf30 	.word	0x0801bf30

0800fff8 <rcl_publish>:
 800fff8:	b1f8      	cbz	r0, 801003a <rcl_publish+0x42>
 800fffa:	6803      	ldr	r3, [r0, #0]
 800fffc:	b570      	push	{r4, r5, r6, lr}
 800fffe:	4604      	mov	r4, r0
 8010000:	b1b3      	cbz	r3, 8010030 <rcl_publish+0x38>
 8010002:	4616      	mov	r6, r2
 8010004:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8010008:	b192      	cbz	r2, 8010030 <rcl_publish+0x38>
 801000a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 801000e:	460d      	mov	r5, r1
 8010010:	f005 fdf0 	bl	8015bf4 <rcl_context_is_valid>
 8010014:	b160      	cbz	r0, 8010030 <rcl_publish+0x38>
 8010016:	6823      	ldr	r3, [r4, #0]
 8010018:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 801001c:	b140      	cbz	r0, 8010030 <rcl_publish+0x38>
 801001e:	b155      	cbz	r5, 8010036 <rcl_publish+0x3e>
 8010020:	4632      	mov	r2, r6
 8010022:	4629      	mov	r1, r5
 8010024:	f000 f966 	bl	80102f4 <rmw_publish>
 8010028:	3800      	subs	r0, #0
 801002a:	bf18      	it	ne
 801002c:	2001      	movne	r0, #1
 801002e:	bd70      	pop	{r4, r5, r6, pc}
 8010030:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8010034:	bd70      	pop	{r4, r5, r6, pc}
 8010036:	200b      	movs	r0, #11
 8010038:	bd70      	pop	{r4, r5, r6, pc}
 801003a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801003e:	4770      	bx	lr

08010040 <rclc_support_init>:
 8010040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010044:	b086      	sub	sp, #24
 8010046:	b3b8      	cbz	r0, 80100b8 <rclc_support_init+0x78>
 8010048:	461c      	mov	r4, r3
 801004a:	b3ab      	cbz	r3, 80100b8 <rclc_support_init+0x78>
 801004c:	460f      	mov	r7, r1
 801004e:	4690      	mov	r8, r2
 8010050:	4606      	mov	r6, r0
 8010052:	f005 ff39 	bl	8015ec8 <rcl_get_zero_initialized_init_options>
 8010056:	f104 030c 	add.w	r3, r4, #12
 801005a:	9005      	str	r0, [sp, #20]
 801005c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010060:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010064:	a805      	add	r0, sp, #20
 8010066:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801006a:	f005 ff2f 	bl	8015ecc <rcl_init_options_init>
 801006e:	4605      	mov	r5, r0
 8010070:	b9e0      	cbnz	r0, 80100ac <rclc_support_init+0x6c>
 8010072:	ad02      	add	r5, sp, #8
 8010074:	4628      	mov	r0, r5
 8010076:	f005 fdb3 	bl	8015be0 <rcl_get_zero_initialized_context>
 801007a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801007e:	4633      	mov	r3, r6
 8010080:	e886 0003 	stmia.w	r6, {r0, r1}
 8010084:	aa05      	add	r2, sp, #20
 8010086:	4641      	mov	r1, r8
 8010088:	4638      	mov	r0, r7
 801008a:	f005 fe19 	bl	8015cc0 <rcl_init>
 801008e:	4605      	mov	r5, r0
 8010090:	b9b8      	cbnz	r0, 80100c2 <rclc_support_init+0x82>
 8010092:	60b4      	str	r4, [r6, #8]
 8010094:	4622      	mov	r2, r4
 8010096:	f106 010c 	add.w	r1, r6, #12
 801009a:	2003      	movs	r0, #3
 801009c:	f006 fb94 	bl	80167c8 <rcl_clock_init>
 80100a0:	4605      	mov	r5, r0
 80100a2:	b970      	cbnz	r0, 80100c2 <rclc_support_init+0x82>
 80100a4:	a805      	add	r0, sp, #20
 80100a6:	f005 ff77 	bl	8015f98 <rcl_init_options_fini>
 80100aa:	b108      	cbz	r0, 80100b0 <rclc_support_init+0x70>
 80100ac:	f000 f8e8 	bl	8010280 <rcutils_reset_error>
 80100b0:	4628      	mov	r0, r5
 80100b2:	b006      	add	sp, #24
 80100b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b8:	250b      	movs	r5, #11
 80100ba:	4628      	mov	r0, r5
 80100bc:	b006      	add	sp, #24
 80100be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100c2:	f000 f8dd 	bl	8010280 <rcutils_reset_error>
 80100c6:	a805      	add	r0, sp, #20
 80100c8:	f005 ff66 	bl	8015f98 <rcl_init_options_fini>
 80100cc:	2800      	cmp	r0, #0
 80100ce:	d0ef      	beq.n	80100b0 <rclc_support_init+0x70>
 80100d0:	e7ec      	b.n	80100ac <rclc_support_init+0x6c>
 80100d2:	bf00      	nop

080100d4 <rclc_node_init_default>:
 80100d4:	b3b8      	cbz	r0, 8010146 <rclc_node_init_default+0x72>
 80100d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100da:	460d      	mov	r5, r1
 80100dc:	b0a1      	sub	sp, #132	; 0x84
 80100de:	b329      	cbz	r1, 801012c <rclc_node_init_default+0x58>
 80100e0:	4616      	mov	r6, r2
 80100e2:	b31a      	cbz	r2, 801012c <rclc_node_init_default+0x58>
 80100e4:	461f      	mov	r7, r3
 80100e6:	b30b      	cbz	r3, 801012c <rclc_node_init_default+0x58>
 80100e8:	f10d 0810 	add.w	r8, sp, #16
 80100ec:	4604      	mov	r4, r0
 80100ee:	4640      	mov	r0, r8
 80100f0:	f006 f80a 	bl	8016108 <rcl_get_zero_initialized_node>
 80100f4:	e898 0003 	ldmia.w	r8, {r0, r1}
 80100f8:	f10d 0918 	add.w	r9, sp, #24
 80100fc:	e884 0003 	stmia.w	r4, {r0, r1}
 8010100:	4648      	mov	r0, r9
 8010102:	f006 f979 	bl	80163f8 <rcl_node_get_default_options>
 8010106:	4640      	mov	r0, r8
 8010108:	f005 fffe 	bl	8016108 <rcl_get_zero_initialized_node>
 801010c:	f8cd 9000 	str.w	r9, [sp]
 8010110:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010114:	463b      	mov	r3, r7
 8010116:	e884 0003 	stmia.w	r4, {r0, r1}
 801011a:	4632      	mov	r2, r6
 801011c:	4629      	mov	r1, r5
 801011e:	4620      	mov	r0, r4
 8010120:	f005 fffc 	bl	801611c <rcl_node_init>
 8010124:	b930      	cbnz	r0, 8010134 <rclc_node_init_default+0x60>
 8010126:	b021      	add	sp, #132	; 0x84
 8010128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801012c:	200b      	movs	r0, #11
 801012e:	b021      	add	sp, #132	; 0x84
 8010130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010134:	9003      	str	r0, [sp, #12]
 8010136:	f000 f8a3 	bl	8010280 <rcutils_reset_error>
 801013a:	f000 f8a1 	bl	8010280 <rcutils_reset_error>
 801013e:	9803      	ldr	r0, [sp, #12]
 8010140:	b021      	add	sp, #132	; 0x84
 8010142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010146:	200b      	movs	r0, #11
 8010148:	4770      	bx	lr
 801014a:	bf00      	nop

0801014c <rclc_publisher_init_default>:
 801014c:	b368      	cbz	r0, 80101aa <rclc_publisher_init_default+0x5e>
 801014e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010152:	460d      	mov	r5, r1
 8010154:	b0a0      	sub	sp, #128	; 0x80
 8010156:	b321      	cbz	r1, 80101a2 <rclc_publisher_init_default+0x56>
 8010158:	4616      	mov	r6, r2
 801015a:	b312      	cbz	r2, 80101a2 <rclc_publisher_init_default+0x56>
 801015c:	461f      	mov	r7, r3
 801015e:	b303      	cbz	r3, 80101a2 <rclc_publisher_init_default+0x56>
 8010160:	4604      	mov	r4, r0
 8010162:	f7ff fe7f 	bl	800fe64 <rcl_get_zero_initialized_publisher>
 8010166:	f10d 0810 	add.w	r8, sp, #16
 801016a:	6020      	str	r0, [r4, #0]
 801016c:	4640      	mov	r0, r8
 801016e:	f7ff ff15 	bl	800ff9c <rcl_publisher_get_default_options>
 8010172:	490f      	ldr	r1, [pc, #60]	; (80101b0 <rclc_publisher_init_default+0x64>)
 8010174:	2250      	movs	r2, #80	; 0x50
 8010176:	4640      	mov	r0, r8
 8010178:	f00a fb20 	bl	801a7bc <memcpy>
 801017c:	f8cd 8000 	str.w	r8, [sp]
 8010180:	463b      	mov	r3, r7
 8010182:	4632      	mov	r2, r6
 8010184:	4629      	mov	r1, r5
 8010186:	4620      	mov	r0, r4
 8010188:	f7ff fe72 	bl	800fe70 <rcl_publisher_init>
 801018c:	b910      	cbnz	r0, 8010194 <rclc_publisher_init_default+0x48>
 801018e:	b020      	add	sp, #128	; 0x80
 8010190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010194:	9003      	str	r0, [sp, #12]
 8010196:	f000 f873 	bl	8010280 <rcutils_reset_error>
 801019a:	9803      	ldr	r0, [sp, #12]
 801019c:	b020      	add	sp, #128	; 0x80
 801019e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101a2:	200b      	movs	r0, #11
 80101a4:	b020      	add	sp, #128	; 0x80
 80101a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101aa:	200b      	movs	r0, #11
 80101ac:	4770      	bx	lr
 80101ae:	bf00      	nop
 80101b0:	0801bf80 	.word	0x0801bf80

080101b4 <__default_zero_allocate>:
 80101b4:	f00a b8fc 	b.w	801a3b0 <calloc>

080101b8 <__default_reallocate>:
 80101b8:	f00a bc90 	b.w	801aadc <realloc>

080101bc <__default_deallocate>:
 80101bc:	f00a baf6 	b.w	801a7ac <free>

080101c0 <__default_allocate>:
 80101c0:	f00a baec 	b.w	801a79c <malloc>

080101c4 <rcutils_get_zero_initialized_allocator>:
 80101c4:	b510      	push	{r4, lr}
 80101c6:	4c05      	ldr	r4, [pc, #20]	; (80101dc <rcutils_get_zero_initialized_allocator+0x18>)
 80101c8:	4686      	mov	lr, r0
 80101ca:	4684      	mov	ip, r0
 80101cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80101ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80101d2:	6823      	ldr	r3, [r4, #0]
 80101d4:	f8cc 3000 	str.w	r3, [ip]
 80101d8:	4670      	mov	r0, lr
 80101da:	bd10      	pop	{r4, pc}
 80101dc:	0801bfd0 	.word	0x0801bfd0

080101e0 <rcutils_set_default_allocator>:
 80101e0:	b1a8      	cbz	r0, 801020e <rcutils_set_default_allocator+0x2e>
 80101e2:	6802      	ldr	r2, [r0, #0]
 80101e4:	b1a2      	cbz	r2, 8010210 <rcutils_set_default_allocator+0x30>
 80101e6:	6841      	ldr	r1, [r0, #4]
 80101e8:	b1a1      	cbz	r1, 8010214 <rcutils_set_default_allocator+0x34>
 80101ea:	b410      	push	{r4}
 80101ec:	68c4      	ldr	r4, [r0, #12]
 80101ee:	b164      	cbz	r4, 801020a <rcutils_set_default_allocator+0x2a>
 80101f0:	6880      	ldr	r0, [r0, #8]
 80101f2:	b138      	cbz	r0, 8010204 <rcutils_set_default_allocator+0x24>
 80101f4:	4b08      	ldr	r3, [pc, #32]	; (8010218 <rcutils_set_default_allocator+0x38>)
 80101f6:	601a      	str	r2, [r3, #0]
 80101f8:	2200      	movs	r2, #0
 80101fa:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80101fe:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8010202:	2001      	movs	r0, #1
 8010204:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010208:	4770      	bx	lr
 801020a:	4620      	mov	r0, r4
 801020c:	e7fa      	b.n	8010204 <rcutils_set_default_allocator+0x24>
 801020e:	4770      	bx	lr
 8010210:	4610      	mov	r0, r2
 8010212:	4770      	bx	lr
 8010214:	4608      	mov	r0, r1
 8010216:	4770      	bx	lr
 8010218:	20000104 	.word	0x20000104

0801021c <rcutils_get_default_allocator>:
 801021c:	b510      	push	{r4, lr}
 801021e:	4c05      	ldr	r4, [pc, #20]	; (8010234 <rcutils_get_default_allocator+0x18>)
 8010220:	4686      	mov	lr, r0
 8010222:	4684      	mov	ip, r0
 8010224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010226:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801022a:	6823      	ldr	r3, [r4, #0]
 801022c:	f8cc 3000 	str.w	r3, [ip]
 8010230:	4670      	mov	r0, lr
 8010232:	bd10      	pop	{r4, pc}
 8010234:	20000104 	.word	0x20000104

08010238 <rcutils_allocator_is_valid>:
 8010238:	b158      	cbz	r0, 8010252 <rcutils_allocator_is_valid+0x1a>
 801023a:	6803      	ldr	r3, [r0, #0]
 801023c:	b143      	cbz	r3, 8010250 <rcutils_allocator_is_valid+0x18>
 801023e:	6843      	ldr	r3, [r0, #4]
 8010240:	b133      	cbz	r3, 8010250 <rcutils_allocator_is_valid+0x18>
 8010242:	68c3      	ldr	r3, [r0, #12]
 8010244:	b123      	cbz	r3, 8010250 <rcutils_allocator_is_valid+0x18>
 8010246:	6880      	ldr	r0, [r0, #8]
 8010248:	3800      	subs	r0, #0
 801024a:	bf18      	it	ne
 801024c:	2001      	movne	r0, #1
 801024e:	4770      	bx	lr
 8010250:	4618      	mov	r0, r3
 8010252:	4770      	bx	lr

08010254 <rcutils_get_error_string>:
 8010254:	4b06      	ldr	r3, [pc, #24]	; (8010270 <rcutils_get_error_string+0x1c>)
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	b13b      	cbz	r3, 801026a <rcutils_get_error_string+0x16>
 801025a:	4b06      	ldr	r3, [pc, #24]	; (8010274 <rcutils_get_error_string+0x20>)
 801025c:	781a      	ldrb	r2, [r3, #0]
 801025e:	b90a      	cbnz	r2, 8010264 <rcutils_get_error_string+0x10>
 8010260:	2201      	movs	r2, #1
 8010262:	701a      	strb	r2, [r3, #0]
 8010264:	4b04      	ldr	r3, [pc, #16]	; (8010278 <rcutils_get_error_string+0x24>)
 8010266:	7818      	ldrb	r0, [r3, #0]
 8010268:	4770      	bx	lr
 801026a:	4b04      	ldr	r3, [pc, #16]	; (801027c <rcutils_get_error_string+0x28>)
 801026c:	7818      	ldrb	r0, [r3, #0]
 801026e:	4770      	bx	lr
 8010270:	20017ec0 	.word	0x20017ec0
 8010274:	20017ed9 	.word	0x20017ed9
 8010278:	20017ed8 	.word	0x20017ed8
 801027c:	0801c210 	.word	0x0801c210

08010280 <rcutils_reset_error>:
 8010280:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80102a0 <rcutils_reset_error+0x20>
 8010284:	4a08      	ldr	r2, [pc, #32]	; (80102a8 <rcutils_reset_error+0x28>)
 8010286:	4809      	ldr	r0, [pc, #36]	; (80102ac <rcutils_reset_error+0x2c>)
 8010288:	4909      	ldr	r1, [pc, #36]	; (80102b0 <rcutils_reset_error+0x30>)
 801028a:	2300      	movs	r3, #0
 801028c:	8013      	strh	r3, [r2, #0]
 801028e:	ed82 7b02 	vstr	d7, [r2, #8]
 8010292:	4a08      	ldr	r2, [pc, #32]	; (80102b4 <rcutils_reset_error+0x34>)
 8010294:	7003      	strb	r3, [r0, #0]
 8010296:	700b      	strb	r3, [r1, #0]
 8010298:	7013      	strb	r3, [r2, #0]
 801029a:	4770      	bx	lr
 801029c:	f3af 8000 	nop.w
	...
 80102a8:	20017ec8 	.word	0x20017ec8
 80102ac:	20017ed9 	.word	0x20017ed9
 80102b0:	20017ed8 	.word	0x20017ed8
 80102b4:	20017ec0 	.word	0x20017ec0

080102b8 <rmw_get_default_publisher_options>:
 80102b8:	2200      	movs	r2, #0
 80102ba:	6002      	str	r2, [r0, #0]
 80102bc:	7102      	strb	r2, [r0, #4]
 80102be:	4770      	bx	lr

080102c0 <rmw_uros_set_custom_transport>:
 80102c0:	b470      	push	{r4, r5, r6}
 80102c2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80102c6:	b162      	cbz	r2, 80102e2 <rmw_uros_set_custom_transport+0x22>
 80102c8:	b15b      	cbz	r3, 80102e2 <rmw_uros_set_custom_transport+0x22>
 80102ca:	b155      	cbz	r5, 80102e2 <rmw_uros_set_custom_transport+0x22>
 80102cc:	b14e      	cbz	r6, 80102e2 <rmw_uros_set_custom_transport+0x22>
 80102ce:	4c06      	ldr	r4, [pc, #24]	; (80102e8 <rmw_uros_set_custom_transport+0x28>)
 80102d0:	7020      	strb	r0, [r4, #0]
 80102d2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80102d6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80102da:	6166      	str	r6, [r4, #20]
 80102dc:	2000      	movs	r0, #0
 80102de:	bc70      	pop	{r4, r5, r6}
 80102e0:	4770      	bx	lr
 80102e2:	200b      	movs	r0, #11
 80102e4:	bc70      	pop	{r4, r5, r6}
 80102e6:	4770      	bx	lr
 80102e8:	20017edc 	.word	0x20017edc

080102ec <flush_session>:
 80102ec:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 80102ee:	f003 be01 	b.w	8013ef4 <uxr_run_session_until_confirm_delivery>
 80102f2:	bf00      	nop

080102f4 <rmw_publish>:
 80102f4:	2800      	cmp	r0, #0
 80102f6:	d053      	beq.n	80103a0 <rmw_publish+0xac>
 80102f8:	b570      	push	{r4, r5, r6, lr}
 80102fa:	460d      	mov	r5, r1
 80102fc:	b08e      	sub	sp, #56	; 0x38
 80102fe:	2900      	cmp	r1, #0
 8010300:	d04b      	beq.n	801039a <rmw_publish+0xa6>
 8010302:	4604      	mov	r4, r0
 8010304:	6800      	ldr	r0, [r0, #0]
 8010306:	f000 fc3b 	bl	8010b80 <is_uxrce_rmw_identifier_valid>
 801030a:	2800      	cmp	r0, #0
 801030c:	d045      	beq.n	801039a <rmw_publish+0xa6>
 801030e:	6866      	ldr	r6, [r4, #4]
 8010310:	2e00      	cmp	r6, #0
 8010312:	d042      	beq.n	801039a <rmw_publish+0xa6>
 8010314:	69b4      	ldr	r4, [r6, #24]
 8010316:	4628      	mov	r0, r5
 8010318:	6923      	ldr	r3, [r4, #16]
 801031a:	4798      	blx	r3
 801031c:	69f3      	ldr	r3, [r6, #28]
 801031e:	9005      	str	r0, [sp, #20]
 8010320:	b113      	cbz	r3, 8010328 <rmw_publish+0x34>
 8010322:	a805      	add	r0, sp, #20
 8010324:	4798      	blx	r3
 8010326:	9805      	ldr	r0, [sp, #20]
 8010328:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801032c:	691b      	ldr	r3, [r3, #16]
 801032e:	9000      	str	r0, [sp, #0]
 8010330:	6972      	ldr	r2, [r6, #20]
 8010332:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8010334:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010338:	ab06      	add	r3, sp, #24
 801033a:	f004 fbc7 	bl	8014acc <uxr_prepare_output_stream>
 801033e:	b1d8      	cbz	r0, 8010378 <rmw_publish+0x84>
 8010340:	68a3      	ldr	r3, [r4, #8]
 8010342:	a906      	add	r1, sp, #24
 8010344:	4628      	mov	r0, r5
 8010346:	4798      	blx	r3
 8010348:	6a33      	ldr	r3, [r6, #32]
 801034a:	4604      	mov	r4, r0
 801034c:	b10b      	cbz	r3, 8010352 <rmw_publish+0x5e>
 801034e:	a806      	add	r0, sp, #24
 8010350:	4798      	blx	r3
 8010352:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8010356:	2b01      	cmp	r3, #1
 8010358:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801035c:	d022      	beq.n	80103a4 <rmw_publish+0xb0>
 801035e:	6918      	ldr	r0, [r3, #16]
 8010360:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8010362:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010366:	f003 fdc5 	bl	8013ef4 <uxr_run_session_until_confirm_delivery>
 801036a:	4020      	ands	r0, r4
 801036c:	b2c4      	uxtb	r4, r0
 801036e:	f084 0001 	eor.w	r0, r4, #1
 8010372:	b2c0      	uxtb	r0, r0
 8010374:	b00e      	add	sp, #56	; 0x38
 8010376:	bd70      	pop	{r4, r5, r6, pc}
 8010378:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801037c:	6918      	ldr	r0, [r3, #16]
 801037e:	9b05      	ldr	r3, [sp, #20]
 8010380:	9300      	str	r3, [sp, #0]
 8010382:	4b0b      	ldr	r3, [pc, #44]	; (80103b0 <rmw_publish+0xbc>)
 8010384:	9301      	str	r3, [sp, #4]
 8010386:	9602      	str	r6, [sp, #8]
 8010388:	6972      	ldr	r2, [r6, #20]
 801038a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 801038c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010390:	ab06      	add	r3, sp, #24
 8010392:	f004 fbcb 	bl	8014b2c <uxr_prepare_output_stream_fragmented>
 8010396:	2800      	cmp	r0, #0
 8010398:	d1d2      	bne.n	8010340 <rmw_publish+0x4c>
 801039a:	2001      	movs	r0, #1
 801039c:	b00e      	add	sp, #56	; 0x38
 801039e:	bd70      	pop	{r4, r5, r6, pc}
 80103a0:	2001      	movs	r0, #1
 80103a2:	4770      	bx	lr
 80103a4:	6918      	ldr	r0, [r3, #16]
 80103a6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80103aa:	f003 fa1d 	bl	80137e8 <uxr_flash_output_streams>
 80103ae:	e7de      	b.n	801036e <rmw_publish+0x7a>
 80103b0:	080102ed 	.word	0x080102ed

080103b4 <rmw_create_publisher>:
 80103b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b8:	b087      	sub	sp, #28
 80103ba:	2800      	cmp	r0, #0
 80103bc:	f000 80cf 	beq.w	801055e <rmw_create_publisher+0x1aa>
 80103c0:	460e      	mov	r6, r1
 80103c2:	2900      	cmp	r1, #0
 80103c4:	f000 80cb 	beq.w	801055e <rmw_create_publisher+0x1aa>
 80103c8:	4604      	mov	r4, r0
 80103ca:	6800      	ldr	r0, [r0, #0]
 80103cc:	4615      	mov	r5, r2
 80103ce:	4698      	mov	r8, r3
 80103d0:	f000 fbd6 	bl	8010b80 <is_uxrce_rmw_identifier_valid>
 80103d4:	2800      	cmp	r0, #0
 80103d6:	f000 80c2 	beq.w	801055e <rmw_create_publisher+0x1aa>
 80103da:	2d00      	cmp	r5, #0
 80103dc:	f000 80bf 	beq.w	801055e <rmw_create_publisher+0x1aa>
 80103e0:	782b      	ldrb	r3, [r5, #0]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	f000 80bb 	beq.w	801055e <rmw_create_publisher+0x1aa>
 80103e8:	f1b8 0f00 	cmp.w	r8, #0
 80103ec:	f000 80b7 	beq.w	801055e <rmw_create_publisher+0x1aa>
 80103f0:	485d      	ldr	r0, [pc, #372]	; (8010568 <rmw_create_publisher+0x1b4>)
 80103f2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80103f6:	f006 ff5f 	bl	80172b8 <get_memory>
 80103fa:	2800      	cmp	r0, #0
 80103fc:	f000 80af 	beq.w	801055e <rmw_create_publisher+0x1aa>
 8010400:	6884      	ldr	r4, [r0, #8]
 8010402:	2300      	movs	r3, #0
 8010404:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8010408:	f006 ff7a 	bl	8017300 <rmw_get_implementation_identifier>
 801040c:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8010410:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8010414:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8010418:	4628      	mov	r0, r5
 801041a:	f7ef fee3 	bl	80001e4 <strlen>
 801041e:	3001      	adds	r0, #1
 8010420:	283c      	cmp	r0, #60	; 0x3c
 8010422:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8010426:	f200 8097 	bhi.w	8010558 <rmw_create_publisher+0x1a4>
 801042a:	4a50      	ldr	r2, [pc, #320]	; (801056c <rmw_create_publisher+0x1b8>)
 801042c:	462b      	mov	r3, r5
 801042e:	213c      	movs	r1, #60	; 0x3c
 8010430:	4650      	mov	r0, sl
 8010432:	f00a fbd5 	bl	801abe0 <sniprintf>
 8010436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801043a:	67e3      	str	r3, [r4, #124]	; 0x7c
 801043c:	4641      	mov	r1, r8
 801043e:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8010442:	2250      	movs	r2, #80	; 0x50
 8010444:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8010448:	f00a f9b8 	bl	801a7bc <memcpy>
 801044c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8010450:	4947      	ldr	r1, [pc, #284]	; (8010570 <rmw_create_publisher+0x1bc>)
 8010452:	2b02      	cmp	r3, #2
 8010454:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010458:	bf0c      	ite	eq
 801045a:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 801045e:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8010462:	67a3      	str	r3, [r4, #120]	; 0x78
 8010464:	2300      	movs	r3, #0
 8010466:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801046a:	4630      	mov	r0, r6
 801046c:	f000 fb96 	bl	8010b9c <get_message_typesupport_handle>
 8010470:	2800      	cmp	r0, #0
 8010472:	d071      	beq.n	8010558 <rmw_create_publisher+0x1a4>
 8010474:	6842      	ldr	r2, [r0, #4]
 8010476:	61a2      	str	r2, [r4, #24]
 8010478:	2a00      	cmp	r2, #0
 801047a:	d06d      	beq.n	8010558 <rmw_create_publisher+0x1a4>
 801047c:	4629      	mov	r1, r5
 801047e:	4643      	mov	r3, r8
 8010480:	4648      	mov	r0, r9
 8010482:	f007 f9a3 	bl	80177cc <create_topic>
 8010486:	6260      	str	r0, [r4, #36]	; 0x24
 8010488:	2800      	cmp	r0, #0
 801048a:	d065      	beq.n	8010558 <rmw_create_publisher+0x1a4>
 801048c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010494:	2103      	movs	r1, #3
 8010496:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 801049a:	1c42      	adds	r2, r0, #1
 801049c:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 80104a0:	f003 f854 	bl	801354c <uxr_object_id>
 80104a4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80104a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80104ac:	6120      	str	r0, [r4, #16]
 80104ae:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80104b2:	6910      	ldr	r0, [r2, #16]
 80104b4:	2506      	movs	r5, #6
 80104b6:	9500      	str	r5, [sp, #0]
 80104b8:	6819      	ldr	r1, [r3, #0]
 80104ba:	6922      	ldr	r2, [r4, #16]
 80104bc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80104c0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80104c4:	f002 ff9c 	bl	8013400 <uxr_buffer_create_publisher_bin>
 80104c8:	4602      	mov	r2, r0
 80104ca:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80104ce:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80104d2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80104d6:	f000 fad3 	bl	8010a80 <run_xrce_session>
 80104da:	b3c8      	cbz	r0, 8010550 <rmw_create_publisher+0x19c>
 80104dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80104e0:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 80104e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104e8:	2105      	movs	r1, #5
 80104ea:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 80104ee:	1c42      	adds	r2, r0, #1
 80104f0:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 80104f4:	f003 f82a 	bl	801354c <uxr_object_id>
 80104f8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80104fc:	6160      	str	r0, [r4, #20]
 80104fe:	691e      	ldr	r6, [r3, #16]
 8010500:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010504:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8010508:	f10d 0a10 	add.w	sl, sp, #16
 801050c:	4641      	mov	r1, r8
 801050e:	4650      	mov	r0, sl
 8010510:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 8010514:	f000 fad0 	bl	8010ab8 <convert_qos_profile>
 8010518:	9503      	str	r5, [sp, #12]
 801051a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801051e:	9001      	str	r0, [sp, #4]
 8010520:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010524:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 801052e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010532:	f8d8 1000 	ldr.w	r1, [r8]
 8010536:	4630      	mov	r0, r6
 8010538:	f002 ff92 	bl	8013460 <uxr_buffer_create_datawriter_bin>
 801053c:	4602      	mov	r2, r0
 801053e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010542:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010546:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801054a:	f000 fa99 	bl	8010a80 <run_xrce_session>
 801054e:	b938      	cbnz	r0, 8010560 <rmw_create_publisher+0x1ac>
 8010550:	4805      	ldr	r0, [pc, #20]	; (8010568 <rmw_create_publisher+0x1b4>)
 8010552:	4621      	mov	r1, r4
 8010554:	f006 fec0 	bl	80172d8 <put_memory>
 8010558:	4638      	mov	r0, r7
 801055a:	f000 f9dd 	bl	8010918 <rmw_uxrce_fini_publisher_memory>
 801055e:	2700      	movs	r7, #0
 8010560:	4638      	mov	r0, r7
 8010562:	b007      	add	sp, #28
 8010564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010568:	2001c7d4 	.word	0x2001c7d4
 801056c:	0801c018 	.word	0x0801c018
 8010570:	0801bfe4 	.word	0x0801bfe4

08010574 <rmw_publisher_get_actual_qos>:
 8010574:	2000      	movs	r0, #0
 8010576:	4770      	bx	lr

08010578 <rmw_destroy_publisher>:
 8010578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801057a:	b128      	cbz	r0, 8010588 <rmw_destroy_publisher+0x10>
 801057c:	4604      	mov	r4, r0
 801057e:	6800      	ldr	r0, [r0, #0]
 8010580:	460d      	mov	r5, r1
 8010582:	f000 fafd 	bl	8010b80 <is_uxrce_rmw_identifier_valid>
 8010586:	b910      	cbnz	r0, 801058e <rmw_destroy_publisher+0x16>
 8010588:	2401      	movs	r4, #1
 801058a:	4620      	mov	r0, r4
 801058c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801058e:	6863      	ldr	r3, [r4, #4]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d0f9      	beq.n	8010588 <rmw_destroy_publisher+0x10>
 8010594:	2d00      	cmp	r5, #0
 8010596:	d0f7      	beq.n	8010588 <rmw_destroy_publisher+0x10>
 8010598:	6828      	ldr	r0, [r5, #0]
 801059a:	f000 faf1 	bl	8010b80 <is_uxrce_rmw_identifier_valid>
 801059e:	2800      	cmp	r0, #0
 80105a0:	d0f2      	beq.n	8010588 <rmw_destroy_publisher+0x10>
 80105a2:	686c      	ldr	r4, [r5, #4]
 80105a4:	2c00      	cmp	r4, #0
 80105a6:	d0ef      	beq.n	8010588 <rmw_destroy_publisher+0x10>
 80105a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80105aa:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 80105ae:	f007 f971 	bl	8017894 <destroy_topic>
 80105b2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80105b6:	6962      	ldr	r2, [r4, #20]
 80105b8:	6918      	ldr	r0, [r3, #16]
 80105ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80105be:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80105c2:	6819      	ldr	r1, [r3, #0]
 80105c4:	f002 fe68 	bl	8013298 <uxr_buffer_delete_entity>
 80105c8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80105cc:	6922      	ldr	r2, [r4, #16]
 80105ce:	691b      	ldr	r3, [r3, #16]
 80105d0:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 80105d4:	4604      	mov	r4, r0
 80105d6:	6809      	ldr	r1, [r1, #0]
 80105d8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80105dc:	f002 fe5c 	bl	8013298 <uxr_buffer_delete_entity>
 80105e0:	693e      	ldr	r6, [r7, #16]
 80105e2:	4622      	mov	r2, r4
 80105e4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 80105e8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 80105ec:	4604      	mov	r4, r0
 80105ee:	4630      	mov	r0, r6
 80105f0:	f000 fa46 	bl	8010a80 <run_xrce_session>
 80105f4:	693e      	ldr	r6, [r7, #16]
 80105f6:	4622      	mov	r2, r4
 80105f8:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 80105fc:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8010600:	4604      	mov	r4, r0
 8010602:	4630      	mov	r0, r6
 8010604:	f000 fa3c 	bl	8010a80 <run_xrce_session>
 8010608:	b12c      	cbz	r4, 8010616 <rmw_destroy_publisher+0x9e>
 801060a:	b120      	cbz	r0, 8010616 <rmw_destroy_publisher+0x9e>
 801060c:	2400      	movs	r4, #0
 801060e:	4628      	mov	r0, r5
 8010610:	f000 f982 	bl	8010918 <rmw_uxrce_fini_publisher_memory>
 8010614:	e7b9      	b.n	801058a <rmw_destroy_publisher+0x12>
 8010616:	2402      	movs	r4, #2
 8010618:	e7f9      	b.n	801060e <rmw_destroy_publisher+0x96>
 801061a:	bf00      	nop

0801061c <rmw_uxrce_init_service_memory>:
 801061c:	b1e2      	cbz	r2, 8010658 <rmw_uxrce_init_service_memory+0x3c>
 801061e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010622:	7b05      	ldrb	r5, [r0, #12]
 8010624:	4606      	mov	r6, r0
 8010626:	b9ad      	cbnz	r5, 8010654 <rmw_uxrce_init_service_memory+0x38>
 8010628:	23c8      	movs	r3, #200	; 0xc8
 801062a:	e9c0 5500 	strd	r5, r5, [r0]
 801062e:	6083      	str	r3, [r0, #8]
 8010630:	f240 1301 	movw	r3, #257	; 0x101
 8010634:	4617      	mov	r7, r2
 8010636:	8183      	strh	r3, [r0, #12]
 8010638:	460c      	mov	r4, r1
 801063a:	46a8      	mov	r8, r5
 801063c:	4621      	mov	r1, r4
 801063e:	4630      	mov	r0, r6
 8010640:	3501      	adds	r5, #1
 8010642:	f006 fe49 	bl	80172d8 <put_memory>
 8010646:	42af      	cmp	r7, r5
 8010648:	60a4      	str	r4, [r4, #8]
 801064a:	f884 800c 	strb.w	r8, [r4, #12]
 801064e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8010652:	d1f3      	bne.n	801063c <rmw_uxrce_init_service_memory+0x20>
 8010654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop

0801065c <rmw_uxrce_init_client_memory>:
 801065c:	b1e2      	cbz	r2, 8010698 <rmw_uxrce_init_client_memory+0x3c>
 801065e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010662:	7b05      	ldrb	r5, [r0, #12]
 8010664:	4606      	mov	r6, r0
 8010666:	b9ad      	cbnz	r5, 8010694 <rmw_uxrce_init_client_memory+0x38>
 8010668:	23c8      	movs	r3, #200	; 0xc8
 801066a:	e9c0 5500 	strd	r5, r5, [r0]
 801066e:	6083      	str	r3, [r0, #8]
 8010670:	f240 1301 	movw	r3, #257	; 0x101
 8010674:	4617      	mov	r7, r2
 8010676:	8183      	strh	r3, [r0, #12]
 8010678:	460c      	mov	r4, r1
 801067a:	46a8      	mov	r8, r5
 801067c:	4621      	mov	r1, r4
 801067e:	4630      	mov	r0, r6
 8010680:	3501      	adds	r5, #1
 8010682:	f006 fe29 	bl	80172d8 <put_memory>
 8010686:	42af      	cmp	r7, r5
 8010688:	60a4      	str	r4, [r4, #8]
 801068a:	f884 800c 	strb.w	r8, [r4, #12]
 801068e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8010692:	d1f3      	bne.n	801067c <rmw_uxrce_init_client_memory+0x20>
 8010694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010698:	4770      	bx	lr
 801069a:	bf00      	nop

0801069c <rmw_uxrce_init_publisher_memory>:
 801069c:	b1e2      	cbz	r2, 80106d8 <rmw_uxrce_init_publisher_memory+0x3c>
 801069e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106a2:	7b05      	ldrb	r5, [r0, #12]
 80106a4:	4606      	mov	r6, r0
 80106a6:	b9ad      	cbnz	r5, 80106d4 <rmw_uxrce_init_publisher_memory+0x38>
 80106a8:	23d8      	movs	r3, #216	; 0xd8
 80106aa:	e9c0 5500 	strd	r5, r5, [r0]
 80106ae:	6083      	str	r3, [r0, #8]
 80106b0:	f240 1301 	movw	r3, #257	; 0x101
 80106b4:	4617      	mov	r7, r2
 80106b6:	8183      	strh	r3, [r0, #12]
 80106b8:	460c      	mov	r4, r1
 80106ba:	46a8      	mov	r8, r5
 80106bc:	4621      	mov	r1, r4
 80106be:	4630      	mov	r0, r6
 80106c0:	3501      	adds	r5, #1
 80106c2:	f006 fe09 	bl	80172d8 <put_memory>
 80106c6:	42af      	cmp	r7, r5
 80106c8:	60a4      	str	r4, [r4, #8]
 80106ca:	f884 800c 	strb.w	r8, [r4, #12]
 80106ce:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80106d2:	d1f3      	bne.n	80106bc <rmw_uxrce_init_publisher_memory+0x20>
 80106d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop

080106dc <rmw_uxrce_init_subscription_memory>:
 80106dc:	b1e2      	cbz	r2, 8010718 <rmw_uxrce_init_subscription_memory+0x3c>
 80106de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106e2:	7b05      	ldrb	r5, [r0, #12]
 80106e4:	4606      	mov	r6, r0
 80106e6:	b9ad      	cbnz	r5, 8010714 <rmw_uxrce_init_subscription_memory+0x38>
 80106e8:	23d8      	movs	r3, #216	; 0xd8
 80106ea:	e9c0 5500 	strd	r5, r5, [r0]
 80106ee:	6083      	str	r3, [r0, #8]
 80106f0:	f240 1301 	movw	r3, #257	; 0x101
 80106f4:	4617      	mov	r7, r2
 80106f6:	8183      	strh	r3, [r0, #12]
 80106f8:	460c      	mov	r4, r1
 80106fa:	46a8      	mov	r8, r5
 80106fc:	4621      	mov	r1, r4
 80106fe:	4630      	mov	r0, r6
 8010700:	3501      	adds	r5, #1
 8010702:	f006 fde9 	bl	80172d8 <put_memory>
 8010706:	42af      	cmp	r7, r5
 8010708:	60a4      	str	r4, [r4, #8]
 801070a:	f884 800c 	strb.w	r8, [r4, #12]
 801070e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8010712:	d1f3      	bne.n	80106fc <rmw_uxrce_init_subscription_memory+0x20>
 8010714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010718:	4770      	bx	lr
 801071a:	bf00      	nop

0801071c <rmw_uxrce_init_node_memory>:
 801071c:	b1e2      	cbz	r2, 8010758 <rmw_uxrce_init_node_memory+0x3c>
 801071e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010722:	7b05      	ldrb	r5, [r0, #12]
 8010724:	4606      	mov	r6, r0
 8010726:	b9ad      	cbnz	r5, 8010754 <rmw_uxrce_init_node_memory+0x38>
 8010728:	23a4      	movs	r3, #164	; 0xa4
 801072a:	e9c0 5500 	strd	r5, r5, [r0]
 801072e:	6083      	str	r3, [r0, #8]
 8010730:	f240 1301 	movw	r3, #257	; 0x101
 8010734:	4617      	mov	r7, r2
 8010736:	8183      	strh	r3, [r0, #12]
 8010738:	460c      	mov	r4, r1
 801073a:	46a8      	mov	r8, r5
 801073c:	4621      	mov	r1, r4
 801073e:	4630      	mov	r0, r6
 8010740:	3501      	adds	r5, #1
 8010742:	f006 fdc9 	bl	80172d8 <put_memory>
 8010746:	42af      	cmp	r7, r5
 8010748:	60a4      	str	r4, [r4, #8]
 801074a:	f884 800c 	strb.w	r8, [r4, #12]
 801074e:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8010752:	d1f3      	bne.n	801073c <rmw_uxrce_init_node_memory+0x20>
 8010754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010758:	4770      	bx	lr
 801075a:	bf00      	nop

0801075c <rmw_uxrce_init_session_memory>:
 801075c:	b1ea      	cbz	r2, 801079a <rmw_uxrce_init_session_memory+0x3e>
 801075e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010762:	7b05      	ldrb	r5, [r0, #12]
 8010764:	4606      	mov	r6, r0
 8010766:	b9b5      	cbnz	r5, 8010796 <rmw_uxrce_init_session_memory+0x3a>
 8010768:	e9c0 5500 	strd	r5, r5, [r0]
 801076c:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8010770:	f240 1301 	movw	r3, #257	; 0x101
 8010774:	4617      	mov	r7, r2
 8010776:	f8c0 8008 	str.w	r8, [r0, #8]
 801077a:	460c      	mov	r4, r1
 801077c:	8183      	strh	r3, [r0, #12]
 801077e:	46a9      	mov	r9, r5
 8010780:	4621      	mov	r1, r4
 8010782:	4630      	mov	r0, r6
 8010784:	3501      	adds	r5, #1
 8010786:	f006 fda7 	bl	80172d8 <put_memory>
 801078a:	42af      	cmp	r7, r5
 801078c:	60a4      	str	r4, [r4, #8]
 801078e:	f884 900c 	strb.w	r9, [r4, #12]
 8010792:	4444      	add	r4, r8
 8010794:	d1f4      	bne.n	8010780 <rmw_uxrce_init_session_memory+0x24>
 8010796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801079a:	4770      	bx	lr

0801079c <rmw_uxrce_init_topic_memory>:
 801079c:	b1e2      	cbz	r2, 80107d8 <rmw_uxrce_init_topic_memory+0x3c>
 801079e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107a2:	7b05      	ldrb	r5, [r0, #12]
 80107a4:	4606      	mov	r6, r0
 80107a6:	b9ad      	cbnz	r5, 80107d4 <rmw_uxrce_init_topic_memory+0x38>
 80107a8:	231c      	movs	r3, #28
 80107aa:	e9c0 5500 	strd	r5, r5, [r0]
 80107ae:	6083      	str	r3, [r0, #8]
 80107b0:	f240 1301 	movw	r3, #257	; 0x101
 80107b4:	4617      	mov	r7, r2
 80107b6:	8183      	strh	r3, [r0, #12]
 80107b8:	460c      	mov	r4, r1
 80107ba:	46a8      	mov	r8, r5
 80107bc:	4621      	mov	r1, r4
 80107be:	4630      	mov	r0, r6
 80107c0:	3501      	adds	r5, #1
 80107c2:	f006 fd89 	bl	80172d8 <put_memory>
 80107c6:	42af      	cmp	r7, r5
 80107c8:	60a4      	str	r4, [r4, #8]
 80107ca:	f884 800c 	strb.w	r8, [r4, #12]
 80107ce:	f104 041c 	add.w	r4, r4, #28
 80107d2:	d1f3      	bne.n	80107bc <rmw_uxrce_init_topic_memory+0x20>
 80107d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107d8:	4770      	bx	lr
 80107da:	bf00      	nop

080107dc <rmw_uxrce_init_static_input_buffer_memory>:
 80107dc:	b1ea      	cbz	r2, 801081a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80107de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107e2:	7b05      	ldrb	r5, [r0, #12]
 80107e4:	4606      	mov	r6, r0
 80107e6:	b9b5      	cbnz	r5, 8010816 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80107e8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80107ec:	e9c0 5500 	strd	r5, r5, [r0]
 80107f0:	6083      	str	r3, [r0, #8]
 80107f2:	f240 1301 	movw	r3, #257	; 0x101
 80107f6:	4617      	mov	r7, r2
 80107f8:	8183      	strh	r3, [r0, #12]
 80107fa:	460c      	mov	r4, r1
 80107fc:	46a8      	mov	r8, r5
 80107fe:	4621      	mov	r1, r4
 8010800:	4630      	mov	r0, r6
 8010802:	3501      	adds	r5, #1
 8010804:	f006 fd68 	bl	80172d8 <put_memory>
 8010808:	42af      	cmp	r7, r5
 801080a:	60a4      	str	r4, [r4, #8]
 801080c:	f884 800c 	strb.w	r8, [r4, #12]
 8010810:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8010814:	d1f3      	bne.n	80107fe <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801081a:	4770      	bx	lr

0801081c <rmw_uxrce_init_init_options_impl_memory>:
 801081c:	b1e2      	cbz	r2, 8010858 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801081e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010822:	7b05      	ldrb	r5, [r0, #12]
 8010824:	4606      	mov	r6, r0
 8010826:	b9ad      	cbnz	r5, 8010854 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010828:	232c      	movs	r3, #44	; 0x2c
 801082a:	e9c0 5500 	strd	r5, r5, [r0]
 801082e:	6083      	str	r3, [r0, #8]
 8010830:	f240 1301 	movw	r3, #257	; 0x101
 8010834:	4617      	mov	r7, r2
 8010836:	8183      	strh	r3, [r0, #12]
 8010838:	460c      	mov	r4, r1
 801083a:	46a8      	mov	r8, r5
 801083c:	4621      	mov	r1, r4
 801083e:	4630      	mov	r0, r6
 8010840:	3501      	adds	r5, #1
 8010842:	f006 fd49 	bl	80172d8 <put_memory>
 8010846:	42af      	cmp	r7, r5
 8010848:	60a4      	str	r4, [r4, #8]
 801084a:	f884 800c 	strb.w	r8, [r4, #12]
 801084e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8010852:	d1f3      	bne.n	801083c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8010854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010858:	4770      	bx	lr
 801085a:	bf00      	nop

0801085c <rmw_uxrce_init_wait_set_memory>:
 801085c:	b1e2      	cbz	r2, 8010898 <rmw_uxrce_init_wait_set_memory+0x3c>
 801085e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010862:	7b05      	ldrb	r5, [r0, #12]
 8010864:	4606      	mov	r6, r0
 8010866:	b9ad      	cbnz	r5, 8010894 <rmw_uxrce_init_wait_set_memory+0x38>
 8010868:	231c      	movs	r3, #28
 801086a:	e9c0 5500 	strd	r5, r5, [r0]
 801086e:	6083      	str	r3, [r0, #8]
 8010870:	f240 1301 	movw	r3, #257	; 0x101
 8010874:	4617      	mov	r7, r2
 8010876:	8183      	strh	r3, [r0, #12]
 8010878:	460c      	mov	r4, r1
 801087a:	46a8      	mov	r8, r5
 801087c:	4621      	mov	r1, r4
 801087e:	4630      	mov	r0, r6
 8010880:	3501      	adds	r5, #1
 8010882:	f006 fd29 	bl	80172d8 <put_memory>
 8010886:	42af      	cmp	r7, r5
 8010888:	60a4      	str	r4, [r4, #8]
 801088a:	f884 800c 	strb.w	r8, [r4, #12]
 801088e:	f104 041c 	add.w	r4, r4, #28
 8010892:	d1f3      	bne.n	801087c <rmw_uxrce_init_wait_set_memory+0x20>
 8010894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010898:	4770      	bx	lr
 801089a:	bf00      	nop

0801089c <rmw_uxrce_init_guard_condition_memory>:
 801089c:	b1e2      	cbz	r2, 80108d8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801089e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108a2:	7b05      	ldrb	r5, [r0, #12]
 80108a4:	4606      	mov	r6, r0
 80108a6:	b9ad      	cbnz	r5, 80108d4 <rmw_uxrce_init_guard_condition_memory+0x38>
 80108a8:	2320      	movs	r3, #32
 80108aa:	e9c0 5500 	strd	r5, r5, [r0]
 80108ae:	6083      	str	r3, [r0, #8]
 80108b0:	f240 1301 	movw	r3, #257	; 0x101
 80108b4:	4617      	mov	r7, r2
 80108b6:	8183      	strh	r3, [r0, #12]
 80108b8:	460c      	mov	r4, r1
 80108ba:	46a8      	mov	r8, r5
 80108bc:	4621      	mov	r1, r4
 80108be:	4630      	mov	r0, r6
 80108c0:	3501      	adds	r5, #1
 80108c2:	f006 fd09 	bl	80172d8 <put_memory>
 80108c6:	42af      	cmp	r7, r5
 80108c8:	60a4      	str	r4, [r4, #8]
 80108ca:	f884 800c 	strb.w	r8, [r4, #12]
 80108ce:	f104 0420 	add.w	r4, r4, #32
 80108d2:	d1f3      	bne.n	80108bc <rmw_uxrce_init_guard_condition_memory+0x20>
 80108d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108d8:	4770      	bx	lr
 80108da:	bf00      	nop

080108dc <rmw_uxrce_fini_session_memory>:
 80108dc:	4601      	mov	r1, r0
 80108de:	4801      	ldr	r0, [pc, #4]	; (80108e4 <rmw_uxrce_fini_session_memory+0x8>)
 80108e0:	f006 bcfa 	b.w	80172d8 <put_memory>
 80108e4:	2001c7f4 	.word	0x2001c7f4

080108e8 <rmw_uxrce_fini_node_memory>:
 80108e8:	b538      	push	{r3, r4, r5, lr}
 80108ea:	4604      	mov	r4, r0
 80108ec:	6800      	ldr	r0, [r0, #0]
 80108ee:	b128      	cbz	r0, 80108fc <rmw_uxrce_fini_node_memory+0x14>
 80108f0:	4b07      	ldr	r3, [pc, #28]	; (8010910 <rmw_uxrce_fini_node_memory+0x28>)
 80108f2:	6819      	ldr	r1, [r3, #0]
 80108f4:	f7ef fc6c 	bl	80001d0 <strcmp>
 80108f8:	b940      	cbnz	r0, 801090c <rmw_uxrce_fini_node_memory+0x24>
 80108fa:	6020      	str	r0, [r4, #0]
 80108fc:	6861      	ldr	r1, [r4, #4]
 80108fe:	b129      	cbz	r1, 801090c <rmw_uxrce_fini_node_memory+0x24>
 8010900:	2500      	movs	r5, #0
 8010902:	4804      	ldr	r0, [pc, #16]	; (8010914 <rmw_uxrce_fini_node_memory+0x2c>)
 8010904:	610d      	str	r5, [r1, #16]
 8010906:	f006 fce7 	bl	80172d8 <put_memory>
 801090a:	6065      	str	r5, [r4, #4]
 801090c:	bd38      	pop	{r3, r4, r5, pc}
 801090e:	bf00      	nop
 8010910:	0801cad4 	.word	0x0801cad4
 8010914:	2001c7c4 	.word	0x2001c7c4

08010918 <rmw_uxrce_fini_publisher_memory>:
 8010918:	b510      	push	{r4, lr}
 801091a:	4604      	mov	r4, r0
 801091c:	6800      	ldr	r0, [r0, #0]
 801091e:	b128      	cbz	r0, 801092c <rmw_uxrce_fini_publisher_memory+0x14>
 8010920:	4b06      	ldr	r3, [pc, #24]	; (801093c <rmw_uxrce_fini_publisher_memory+0x24>)
 8010922:	6819      	ldr	r1, [r3, #0]
 8010924:	f7ef fc54 	bl	80001d0 <strcmp>
 8010928:	b938      	cbnz	r0, 801093a <rmw_uxrce_fini_publisher_memory+0x22>
 801092a:	6020      	str	r0, [r4, #0]
 801092c:	6861      	ldr	r1, [r4, #4]
 801092e:	b121      	cbz	r1, 801093a <rmw_uxrce_fini_publisher_memory+0x22>
 8010930:	4803      	ldr	r0, [pc, #12]	; (8010940 <rmw_uxrce_fini_publisher_memory+0x28>)
 8010932:	f006 fcd1 	bl	80172d8 <put_memory>
 8010936:	2300      	movs	r3, #0
 8010938:	6063      	str	r3, [r4, #4]
 801093a:	bd10      	pop	{r4, pc}
 801093c:	0801cad4 	.word	0x0801cad4
 8010940:	2001c7d4 	.word	0x2001c7d4

08010944 <rmw_uxrce_fini_subscription_memory>:
 8010944:	b510      	push	{r4, lr}
 8010946:	4604      	mov	r4, r0
 8010948:	6800      	ldr	r0, [r0, #0]
 801094a:	b128      	cbz	r0, 8010958 <rmw_uxrce_fini_subscription_memory+0x14>
 801094c:	4b06      	ldr	r3, [pc, #24]	; (8010968 <rmw_uxrce_fini_subscription_memory+0x24>)
 801094e:	6819      	ldr	r1, [r3, #0]
 8010950:	f7ef fc3e 	bl	80001d0 <strcmp>
 8010954:	b938      	cbnz	r0, 8010966 <rmw_uxrce_fini_subscription_memory+0x22>
 8010956:	6020      	str	r0, [r4, #0]
 8010958:	6861      	ldr	r1, [r4, #4]
 801095a:	b121      	cbz	r1, 8010966 <rmw_uxrce_fini_subscription_memory+0x22>
 801095c:	4803      	ldr	r0, [pc, #12]	; (801096c <rmw_uxrce_fini_subscription_memory+0x28>)
 801095e:	f006 fcbb 	bl	80172d8 <put_memory>
 8010962:	2300      	movs	r3, #0
 8010964:	6063      	str	r3, [r4, #4]
 8010966:	bd10      	pop	{r4, pc}
 8010968:	0801cad4 	.word	0x0801cad4
 801096c:	2001c814 	.word	0x2001c814

08010970 <rmw_uxrce_fini_service_memory>:
 8010970:	b510      	push	{r4, lr}
 8010972:	4604      	mov	r4, r0
 8010974:	6800      	ldr	r0, [r0, #0]
 8010976:	b128      	cbz	r0, 8010984 <rmw_uxrce_fini_service_memory+0x14>
 8010978:	4b06      	ldr	r3, [pc, #24]	; (8010994 <rmw_uxrce_fini_service_memory+0x24>)
 801097a:	6819      	ldr	r1, [r3, #0]
 801097c:	f7ef fc28 	bl	80001d0 <strcmp>
 8010980:	b938      	cbnz	r0, 8010992 <rmw_uxrce_fini_service_memory+0x22>
 8010982:	6020      	str	r0, [r4, #0]
 8010984:	6861      	ldr	r1, [r4, #4]
 8010986:	b121      	cbz	r1, 8010992 <rmw_uxrce_fini_service_memory+0x22>
 8010988:	4803      	ldr	r0, [pc, #12]	; (8010998 <rmw_uxrce_fini_service_memory+0x28>)
 801098a:	f006 fca5 	bl	80172d8 <put_memory>
 801098e:	2300      	movs	r3, #0
 8010990:	6063      	str	r3, [r4, #4]
 8010992:	bd10      	pop	{r4, pc}
 8010994:	0801cad4 	.word	0x0801cad4
 8010998:	2001c7e4 	.word	0x2001c7e4

0801099c <rmw_uxrce_fini_client_memory>:
 801099c:	b510      	push	{r4, lr}
 801099e:	4604      	mov	r4, r0
 80109a0:	6800      	ldr	r0, [r0, #0]
 80109a2:	b128      	cbz	r0, 80109b0 <rmw_uxrce_fini_client_memory+0x14>
 80109a4:	4b06      	ldr	r3, [pc, #24]	; (80109c0 <rmw_uxrce_fini_client_memory+0x24>)
 80109a6:	6819      	ldr	r1, [r3, #0]
 80109a8:	f7ef fc12 	bl	80001d0 <strcmp>
 80109ac:	b938      	cbnz	r0, 80109be <rmw_uxrce_fini_client_memory+0x22>
 80109ae:	6020      	str	r0, [r4, #0]
 80109b0:	6861      	ldr	r1, [r4, #4]
 80109b2:	b121      	cbz	r1, 80109be <rmw_uxrce_fini_client_memory+0x22>
 80109b4:	4803      	ldr	r0, [pc, #12]	; (80109c4 <rmw_uxrce_fini_client_memory+0x28>)
 80109b6:	f006 fc8f 	bl	80172d8 <put_memory>
 80109ba:	2300      	movs	r3, #0
 80109bc:	6063      	str	r3, [r4, #4]
 80109be:	bd10      	pop	{r4, pc}
 80109c0:	0801cad4 	.word	0x0801cad4
 80109c4:	20017ef8 	.word	0x20017ef8

080109c8 <rmw_uxrce_fini_topic_memory>:
 80109c8:	b510      	push	{r4, lr}
 80109ca:	4604      	mov	r4, r0
 80109cc:	4621      	mov	r1, r4
 80109ce:	4803      	ldr	r0, [pc, #12]	; (80109dc <rmw_uxrce_fini_topic_memory+0x14>)
 80109d0:	f006 fc82 	bl	80172d8 <put_memory>
 80109d4:	2300      	movs	r3, #0
 80109d6:	61a3      	str	r3, [r4, #24]
 80109d8:	bd10      	pop	{r4, pc}
 80109da:	bf00      	nop
 80109dc:	2001c824 	.word	0x2001c824

080109e0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80109e0:	b082      	sub	sp, #8
 80109e2:	b530      	push	{r4, r5, lr}
 80109e4:	4925      	ldr	r1, [pc, #148]	; (8010a7c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80109e6:	680d      	ldr	r5, [r1, #0]
 80109e8:	ac03      	add	r4, sp, #12
 80109ea:	e884 000c 	stmia.w	r4, {r2, r3}
 80109ee:	461c      	mov	r4, r3
 80109f0:	2d00      	cmp	r5, #0
 80109f2:	d041      	beq.n	8010a78 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 80109f4:	462b      	mov	r3, r5
 80109f6:	2100      	movs	r1, #0
 80109f8:	689a      	ldr	r2, [r3, #8]
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8010a00:	4290      	cmp	r0, r2
 8010a02:	bf08      	it	eq
 8010a04:	3101      	addeq	r1, #1
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d1f6      	bne.n	80109f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010a0a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010a0e:	2b02      	cmp	r3, #2
 8010a10:	d029      	beq.n	8010a66 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010a12:	d907      	bls.n	8010a24 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010a14:	2b03      	cmp	r3, #3
 8010a16:	d005      	beq.n	8010a24 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010a18:	2100      	movs	r1, #0
 8010a1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a1e:	4608      	mov	r0, r1
 8010a20:	b002      	add	sp, #8
 8010a22:	4770      	bx	lr
 8010a24:	b314      	cbz	r4, 8010a6c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010a26:	428c      	cmp	r4, r1
 8010a28:	d820      	bhi.n	8010a6c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010a2a:	2d00      	cmp	r5, #0
 8010a2c:	d0f4      	beq.n	8010a18 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010a2e:	2100      	movs	r1, #0
 8010a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8010a34:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8010a38:	e002      	b.n	8010a40 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8010a3a:	686d      	ldr	r5, [r5, #4]
 8010a3c:	2d00      	cmp	r5, #0
 8010a3e:	d0ec      	beq.n	8010a1a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010a40:	68ab      	ldr	r3, [r5, #8]
 8010a42:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8010a46:	4290      	cmp	r0, r2
 8010a48:	d1f7      	bne.n	8010a3a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010a4a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8010a4e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8010a52:	4562      	cmp	r2, ip
 8010a54:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010a58:	eb73 0e04 	sbcs.w	lr, r3, r4
 8010a5c:	daed      	bge.n	8010a3a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010a5e:	4694      	mov	ip, r2
 8010a60:	461c      	mov	r4, r3
 8010a62:	4629      	mov	r1, r5
 8010a64:	e7e9      	b.n	8010a3a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010a66:	b10c      	cbz	r4, 8010a6c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010a68:	428c      	cmp	r4, r1
 8010a6a:	d9d5      	bls.n	8010a18 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010a6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a70:	4802      	ldr	r0, [pc, #8]	; (8010a7c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8010a72:	b002      	add	sp, #8
 8010a74:	f006 bc20 	b.w	80172b8 <get_memory>
 8010a78:	4629      	mov	r1, r5
 8010a7a:	e7c6      	b.n	8010a0a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010a7c:	2001c804 	.word	0x2001c804

08010a80 <run_xrce_session>:
 8010a80:	b510      	push	{r4, lr}
 8010a82:	788c      	ldrb	r4, [r1, #2]
 8010a84:	b086      	sub	sp, #24
 8010a86:	2c01      	cmp	r4, #1
 8010a88:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010a8c:	d00c      	beq.n	8010aa8 <run_xrce_session+0x28>
 8010a8e:	4619      	mov	r1, r3
 8010a90:	2301      	movs	r3, #1
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	f10d 020e 	add.w	r2, sp, #14
 8010a98:	f10d 0317 	add.w	r3, sp, #23
 8010a9c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010aa0:	f003 fa4e 	bl	8013f40 <uxr_run_session_until_all_status>
 8010aa4:	b006      	add	sp, #24
 8010aa6:	bd10      	pop	{r4, pc}
 8010aa8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010aac:	f002 fe9c 	bl	80137e8 <uxr_flash_output_streams>
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	b006      	add	sp, #24
 8010ab4:	bd10      	pop	{r4, pc}
 8010ab6:	bf00      	nop

08010ab8 <convert_qos_profile>:
 8010ab8:	7a4a      	ldrb	r2, [r1, #9]
 8010aba:	f891 c008 	ldrb.w	ip, [r1, #8]
 8010abe:	2a02      	cmp	r2, #2
 8010ac0:	bf18      	it	ne
 8010ac2:	2200      	movne	r2, #0
 8010ac4:	7002      	strb	r2, [r0, #0]
 8010ac6:	780a      	ldrb	r2, [r1, #0]
 8010ac8:	8889      	ldrh	r1, [r1, #4]
 8010aca:	8081      	strh	r1, [r0, #4]
 8010acc:	f1ac 0c02 	sub.w	ip, ip, #2
 8010ad0:	f1a2 0202 	sub.w	r2, r2, #2
 8010ad4:	fabc fc8c 	clz	ip, ip
 8010ad8:	fab2 f282 	clz	r2, r2
 8010adc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8010ae0:	0952      	lsrs	r2, r2, #5
 8010ae2:	f880 c001 	strb.w	ip, [r0, #1]
 8010ae6:	7082      	strb	r2, [r0, #2]
 8010ae8:	4770      	bx	lr
 8010aea:	bf00      	nop

08010aec <generate_type_name>:
 8010aec:	b530      	push	{r4, r5, lr}
 8010aee:	2300      	movs	r3, #0
 8010af0:	700b      	strb	r3, [r1, #0]
 8010af2:	6803      	ldr	r3, [r0, #0]
 8010af4:	b087      	sub	sp, #28
 8010af6:	4614      	mov	r4, r2
 8010af8:	b1d3      	cbz	r3, 8010b30 <generate_type_name+0x44>
 8010afa:	4a0f      	ldr	r2, [pc, #60]	; (8010b38 <generate_type_name+0x4c>)
 8010afc:	4615      	mov	r5, r2
 8010afe:	9203      	str	r2, [sp, #12]
 8010b00:	9500      	str	r5, [sp, #0]
 8010b02:	6842      	ldr	r2, [r0, #4]
 8010b04:	480d      	ldr	r0, [pc, #52]	; (8010b3c <generate_type_name+0x50>)
 8010b06:	9001      	str	r0, [sp, #4]
 8010b08:	4608      	mov	r0, r1
 8010b0a:	490d      	ldr	r1, [pc, #52]	; (8010b40 <generate_type_name+0x54>)
 8010b0c:	9204      	str	r2, [sp, #16]
 8010b0e:	9105      	str	r1, [sp, #20]
 8010b10:	9102      	str	r1, [sp, #8]
 8010b12:	4a0c      	ldr	r2, [pc, #48]	; (8010b44 <generate_type_name+0x58>)
 8010b14:	4621      	mov	r1, r4
 8010b16:	f00a f863 	bl	801abe0 <sniprintf>
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	db05      	blt.n	8010b2a <generate_type_name+0x3e>
 8010b1e:	4284      	cmp	r4, r0
 8010b20:	bfd4      	ite	le
 8010b22:	2000      	movle	r0, #0
 8010b24:	2001      	movgt	r0, #1
 8010b26:	b007      	add	sp, #28
 8010b28:	bd30      	pop	{r4, r5, pc}
 8010b2a:	2000      	movs	r0, #0
 8010b2c:	b007      	add	sp, #28
 8010b2e:	bd30      	pop	{r4, r5, pc}
 8010b30:	4b05      	ldr	r3, [pc, #20]	; (8010b48 <generate_type_name+0x5c>)
 8010b32:	4a01      	ldr	r2, [pc, #4]	; (8010b38 <generate_type_name+0x4c>)
 8010b34:	461d      	mov	r5, r3
 8010b36:	e7e2      	b.n	8010afe <generate_type_name+0x12>
 8010b38:	0801c008 	.word	0x0801c008
 8010b3c:	0801c020 	.word	0x0801c020
 8010b40:	0801c01c 	.word	0x0801c01c
 8010b44:	0801c00c 	.word	0x0801c00c
 8010b48:	0801cd78 	.word	0x0801cd78

08010b4c <generate_topic_name>:
 8010b4c:	b510      	push	{r4, lr}
 8010b4e:	b082      	sub	sp, #8
 8010b50:	4614      	mov	r4, r2
 8010b52:	9000      	str	r0, [sp, #0]
 8010b54:	4b08      	ldr	r3, [pc, #32]	; (8010b78 <generate_topic_name+0x2c>)
 8010b56:	4a09      	ldr	r2, [pc, #36]	; (8010b7c <generate_topic_name+0x30>)
 8010b58:	4608      	mov	r0, r1
 8010b5a:	4621      	mov	r1, r4
 8010b5c:	f00a f840 	bl	801abe0 <sniprintf>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	db05      	blt.n	8010b70 <generate_topic_name+0x24>
 8010b64:	4284      	cmp	r4, r0
 8010b66:	bfd4      	ite	le
 8010b68:	2000      	movle	r0, #0
 8010b6a:	2001      	movgt	r0, #1
 8010b6c:	b002      	add	sp, #8
 8010b6e:	bd10      	pop	{r4, pc}
 8010b70:	2000      	movs	r0, #0
 8010b72:	b002      	add	sp, #8
 8010b74:	bd10      	pop	{r4, pc}
 8010b76:	bf00      	nop
 8010b78:	0801c02c 	.word	0x0801c02c
 8010b7c:	0801c024 	.word	0x0801c024

08010b80 <is_uxrce_rmw_identifier_valid>:
 8010b80:	b510      	push	{r4, lr}
 8010b82:	4604      	mov	r4, r0
 8010b84:	b140      	cbz	r0, 8010b98 <is_uxrce_rmw_identifier_valid+0x18>
 8010b86:	f006 fbbb 	bl	8017300 <rmw_get_implementation_identifier>
 8010b8a:	4601      	mov	r1, r0
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f7ef fb1f 	bl	80001d0 <strcmp>
 8010b92:	fab0 f080 	clz	r0, r0
 8010b96:	0940      	lsrs	r0, r0, #5
 8010b98:	bd10      	pop	{r4, pc}
 8010b9a:	bf00      	nop

08010b9c <get_message_typesupport_handle>:
 8010b9c:	6883      	ldr	r3, [r0, #8]
 8010b9e:	4718      	bx	r3

08010ba0 <get_message_typesupport_handle_function>:
 8010ba0:	b510      	push	{r4, lr}
 8010ba2:	4604      	mov	r4, r0
 8010ba4:	6800      	ldr	r0, [r0, #0]
 8010ba6:	f7ef fb13 	bl	80001d0 <strcmp>
 8010baa:	2800      	cmp	r0, #0
 8010bac:	bf0c      	ite	eq
 8010bae:	4620      	moveq	r0, r4
 8010bb0:	2000      	movne	r0, #0
 8010bb2:	bd10      	pop	{r4, pc}

08010bb4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8010bb4:	4b04      	ldr	r3, [pc, #16]	; (8010bc8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	b10a      	cbz	r2, 8010bbe <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0xa>
 8010bba:	4803      	ldr	r0, [pc, #12]	; (8010bc8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 8010bbc:	4770      	bx	lr
 8010bbe:	4a03      	ldr	r2, [pc, #12]	; (8010bcc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x18>)
 8010bc0:	4801      	ldr	r0, [pc, #4]	; (8010bc8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 8010bc2:	6812      	ldr	r2, [r2, #0]
 8010bc4:	601a      	str	r2, [r3, #0]
 8010bc6:	4770      	bx	lr
 8010bc8:	20000120 	.word	0x20000120
 8010bcc:	2000087c 	.word	0x2000087c

08010bd0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8010bd0:	4a02      	ldr	r2, [pc, #8]	; (8010bdc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0xc>)
 8010bd2:	4b03      	ldr	r3, [pc, #12]	; (8010be0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x10>)
 8010bd4:	6812      	ldr	r2, [r2, #0]
 8010bd6:	601a      	str	r2, [r3, #0]
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	2000087c 	.word	0x2000087c
 8010be0:	20000120 	.word	0x20000120

08010be4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8010be4:	4b04      	ldr	r3, [pc, #16]	; (8010bf8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 8010be6:	681a      	ldr	r2, [r3, #0]
 8010be8:	b10a      	cbz	r2, 8010bee <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xa>
 8010bea:	4803      	ldr	r0, [pc, #12]	; (8010bf8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 8010bec:	4770      	bx	lr
 8010bee:	4a03      	ldr	r2, [pc, #12]	; (8010bfc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x18>)
 8010bf0:	4801      	ldr	r0, [pc, #4]	; (8010bf8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 8010bf2:	6812      	ldr	r2, [r2, #0]
 8010bf4:	601a      	str	r2, [r3, #0]
 8010bf6:	4770      	bx	lr
 8010bf8:	20000134 	.word	0x20000134
 8010bfc:	2000087c 	.word	0x2000087c

08010c00 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8010c00:	4a02      	ldr	r2, [pc, #8]	; (8010c0c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xc>)
 8010c02:	4b03      	ldr	r3, [pc, #12]	; (8010c10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x10>)
 8010c04:	6812      	ldr	r2, [r2, #0]
 8010c06:	601a      	str	r2, [r3, #0]
 8010c08:	4770      	bx	lr
 8010c0a:	bf00      	nop
 8010c0c:	2000087c 	.word	0x2000087c
 8010c10:	20000134 	.word	0x20000134

08010c14 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__size_function__BatteryState__cell_voltage>:
 8010c14:	6840      	ldr	r0, [r0, #4]
 8010c16:	4770      	bx	lr

08010c18 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_const_function__BatteryState__cell_voltage>:
 8010c18:	6800      	ldr	r0, [r0, #0]
 8010c1a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010c1e:	4770      	bx	lr

08010c20 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__fetch_function__BatteryState__cell_voltage>:
 8010c20:	6803      	ldr	r3, [r0, #0]
 8010c22:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010c26:	680b      	ldr	r3, [r1, #0]
 8010c28:	6013      	str	r3, [r2, #0]
 8010c2a:	4770      	bx	lr

08010c2c <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__assign_function__BatteryState__cell_voltage>:
 8010c2c:	6803      	ldr	r3, [r0, #0]
 8010c2e:	6812      	ldr	r2, [r2, #0]
 8010c30:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010c34:	600a      	str	r2, [r1, #0]
 8010c36:	4770      	bx	lr

08010c38 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__BatteryState_init_function>:
 8010c38:	f007 b884 	b.w	8017d44 <sensor_msgs__msg__BatteryState__init>

08010c3c <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__BatteryState_fini_function>:
 8010c3c:	f007 b8f2 	b.w	8017e24 <sensor_msgs__msg__BatteryState__fini>

08010c40 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__resize_function__BatteryState__cell_voltage>:
 8010c40:	b510      	push	{r4, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	4604      	mov	r4, r0
 8010c46:	9101      	str	r1, [sp, #4]
 8010c48:	f007 f83a 	bl	8017cc0 <rosidl_runtime_c__float__Sequence__fini>
 8010c4c:	9901      	ldr	r1, [sp, #4]
 8010c4e:	4620      	mov	r0, r4
 8010c50:	b002      	add	sp, #8
 8010c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c56:	f007 b81b 	b.w	8017c90 <rosidl_runtime_c__float__Sequence__init>
 8010c5a:	bf00      	nop

08010c5c <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__size_function__BatteryState__cell_temperature>:
 8010c5c:	6840      	ldr	r0, [r0, #4]
 8010c5e:	4770      	bx	lr

08010c60 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_const_function__BatteryState__cell_temperature>:
 8010c60:	6800      	ldr	r0, [r0, #0]
 8010c62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010c66:	4770      	bx	lr

08010c68 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_function__BatteryState__cell_temperature>:
 8010c68:	6800      	ldr	r0, [r0, #0]
 8010c6a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010c6e:	4770      	bx	lr

08010c70 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_function__BatteryState__cell_voltage>:
 8010c70:	6800      	ldr	r0, [r0, #0]
 8010c72:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010c76:	4770      	bx	lr

08010c78 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__fetch_function__BatteryState__cell_temperature>:
 8010c78:	6803      	ldr	r3, [r0, #0]
 8010c7a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010c7e:	680b      	ldr	r3, [r1, #0]
 8010c80:	6013      	str	r3, [r2, #0]
 8010c82:	4770      	bx	lr

08010c84 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__assign_function__BatteryState__cell_temperature>:
 8010c84:	6803      	ldr	r3, [r0, #0]
 8010c86:	6812      	ldr	r2, [r2, #0]
 8010c88:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010c8c:	600a      	str	r2, [r1, #0]
 8010c8e:	4770      	bx	lr

08010c90 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__resize_function__BatteryState__cell_temperature>:
 8010c90:	b510      	push	{r4, lr}
 8010c92:	b082      	sub	sp, #8
 8010c94:	4604      	mov	r4, r0
 8010c96:	9101      	str	r1, [sp, #4]
 8010c98:	f007 f812 	bl	8017cc0 <rosidl_runtime_c__float__Sequence__fini>
 8010c9c:	9901      	ldr	r1, [sp, #4]
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	b002      	add	sp, #8
 8010ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ca6:	f006 bff3 	b.w	8017c90 <rosidl_runtime_c__float__Sequence__init>
 8010caa:	bf00      	nop

08010cac <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8010cac:	b508      	push	{r3, lr}
 8010cae:	f000 fafd 	bl	80112ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010cb2:	4b06      	ldr	r3, [pc, #24]	; (8010ccc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 8010cb4:	4906      	ldr	r1, [pc, #24]	; (8010cd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x24>)
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	60c8      	str	r0, [r1, #12]
 8010cba:	b10a      	cbz	r2, 8010cc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>
 8010cbc:	4803      	ldr	r0, [pc, #12]	; (8010ccc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 8010cbe:	bd08      	pop	{r3, pc}
 8010cc0:	4a04      	ldr	r2, [pc, #16]	; (8010cd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x28>)
 8010cc2:	4802      	ldr	r0, [pc, #8]	; (8010ccc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 8010cc4:	6812      	ldr	r2, [r2, #0]
 8010cc6:	601a      	str	r2, [r3, #0]
 8010cc8:	bd08      	pop	{r3, pc}
 8010cca:	bf00      	nop
 8010ccc:	20000500 	.word	0x20000500
 8010cd0:	20000140 	.word	0x20000140
 8010cd4:	20000880 	.word	0x20000880

08010cd8 <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_init_function>:
 8010cd8:	f007 b8bc 	b.w	8017e54 <sensor_msgs__msg__Temperature__init>

08010cdc <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_fini_function>:
 8010cdc:	f007 b8cc 	b.w	8017e78 <sensor_msgs__msg__Temperature__fini>

08010ce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8010ce0:	b508      	push	{r3, lr}
 8010ce2:	f000 fae3 	bl	80112ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010ce6:	4b06      	ldr	r3, [pc, #24]	; (8010d00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 8010ce8:	4906      	ldr	r1, [pc, #24]	; (8010d04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x24>)
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	60c8      	str	r0, [r1, #12]
 8010cee:	b10a      	cbz	r2, 8010cf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>
 8010cf0:	4803      	ldr	r0, [pc, #12]	; (8010d00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 8010cf2:	bd08      	pop	{r3, pc}
 8010cf4:	4a04      	ldr	r2, [pc, #16]	; (8010d08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x28>)
 8010cf6:	4802      	ldr	r0, [pc, #8]	; (8010d00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 8010cf8:	6812      	ldr	r2, [r2, #0]
 8010cfa:	601a      	str	r2, [r3, #0]
 8010cfc:	bd08      	pop	{r3, pc}
 8010cfe:	bf00      	nop
 8010d00:	200005c0 	.word	0x200005c0
 8010d04:	2000050c 	.word	0x2000050c
 8010d08:	20000880 	.word	0x20000880

08010d0c <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>:
 8010d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d10:	460e      	mov	r6, r1
 8010d12:	4607      	mov	r7, r0
 8010d14:	f000 fb12 	bl	801133c <get_serialized_size_std_msgs__msg__Header>
 8010d18:	1835      	adds	r5, r6, r0
 8010d1a:	2104      	movs	r1, #4
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	f002 f9cb 	bl	80130b8 <ucdr_alignment>
 8010d22:	1d04      	adds	r4, r0, #4
 8010d24:	442c      	add	r4, r5
 8010d26:	2104      	movs	r1, #4
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f002 f9c5 	bl	80130b8 <ucdr_alignment>
 8010d2e:	1d05      	adds	r5, r0, #4
 8010d30:	442c      	add	r4, r5
 8010d32:	2104      	movs	r1, #4
 8010d34:	4620      	mov	r0, r4
 8010d36:	f002 f9bf 	bl	80130b8 <ucdr_alignment>
 8010d3a:	1d05      	adds	r5, r0, #4
 8010d3c:	4425      	add	r5, r4
 8010d3e:	2104      	movs	r1, #4
 8010d40:	4628      	mov	r0, r5
 8010d42:	f002 f9b9 	bl	80130b8 <ucdr_alignment>
 8010d46:	3004      	adds	r0, #4
 8010d48:	4405      	add	r5, r0
 8010d4a:	2104      	movs	r1, #4
 8010d4c:	4628      	mov	r0, r5
 8010d4e:	f002 f9b3 	bl	80130b8 <ucdr_alignment>
 8010d52:	3004      	adds	r0, #4
 8010d54:	1944      	adds	r4, r0, r5
 8010d56:	2104      	movs	r1, #4
 8010d58:	4620      	mov	r0, r4
 8010d5a:	f002 f9ad 	bl	80130b8 <ucdr_alignment>
 8010d5e:	1d05      	adds	r5, r0, #4
 8010d60:	4425      	add	r5, r4
 8010d62:	2104      	movs	r1, #4
 8010d64:	4628      	mov	r0, r5
 8010d66:	f002 f9a7 	bl	80130b8 <ucdr_alignment>
 8010d6a:	3004      	adds	r0, #4
 8010d6c:	4405      	add	r5, r0
 8010d6e:	2101      	movs	r1, #1
 8010d70:	4628      	mov	r0, r5
 8010d72:	f002 f9a1 	bl	80130b8 <ucdr_alignment>
 8010d76:	3001      	adds	r0, #1
 8010d78:	1944      	adds	r4, r0, r5
 8010d7a:	2101      	movs	r1, #1
 8010d7c:	4620      	mov	r0, r4
 8010d7e:	f002 f99b 	bl	80130b8 <ucdr_alignment>
 8010d82:	1c45      	adds	r5, r0, #1
 8010d84:	4425      	add	r5, r4
 8010d86:	2101      	movs	r1, #1
 8010d88:	4628      	mov	r0, r5
 8010d8a:	f002 f995 	bl	80130b8 <ucdr_alignment>
 8010d8e:	3001      	adds	r0, #1
 8010d90:	4405      	add	r5, r0
 8010d92:	2101      	movs	r1, #1
 8010d94:	4628      	mov	r0, r5
 8010d96:	f002 f98f 	bl	80130b8 <ucdr_alignment>
 8010d9a:	3001      	adds	r0, #1
 8010d9c:	1944      	adds	r4, r0, r5
 8010d9e:	4620      	mov	r0, r4
 8010da0:	2104      	movs	r1, #4
 8010da2:	f8d7 8038 	ldr.w	r8, [r7, #56]	; 0x38
 8010da6:	f002 f987 	bl	80130b8 <ucdr_alignment>
 8010daa:	1d05      	adds	r5, r0, #4
 8010dac:	442c      	add	r4, r5
 8010dae:	f1b8 0f00 	cmp.w	r8, #0
 8010db2:	d11e      	bne.n	8010df2 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xe6>
 8010db4:	4620      	mov	r0, r4
 8010db6:	2104      	movs	r1, #4
 8010db8:	f8d7 8044 	ldr.w	r8, [r7, #68]	; 0x44
 8010dbc:	f002 f97c 	bl	80130b8 <ucdr_alignment>
 8010dc0:	4404      	add	r4, r0
 8010dc2:	3404      	adds	r4, #4
 8010dc4:	f1b8 0f00 	cmp.w	r8, #0
 8010dc8:	d11b      	bne.n	8010e02 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xf6>
 8010dca:	2104      	movs	r1, #4
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f002 f973 	bl	80130b8 <ucdr_alignment>
 8010dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dd4:	3305      	adds	r3, #5
 8010dd6:	441c      	add	r4, r3
 8010dd8:	4404      	add	r4, r0
 8010dda:	2104      	movs	r1, #4
 8010ddc:	4620      	mov	r0, r4
 8010dde:	f002 f96b 	bl	80130b8 <ucdr_alignment>
 8010de2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010de4:	f1c6 0605 	rsb	r6, r6, #5
 8010de8:	440e      	add	r6, r1
 8010dea:	4430      	add	r0, r6
 8010dec:	4420      	add	r0, r4
 8010dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010df2:	4620      	mov	r0, r4
 8010df4:	2104      	movs	r1, #4
 8010df6:	f002 f95f 	bl	80130b8 <ucdr_alignment>
 8010dfa:	eb04 0588 	add.w	r5, r4, r8, lsl #2
 8010dfe:	1944      	adds	r4, r0, r5
 8010e00:	e7d8      	b.n	8010db4 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xa8>
 8010e02:	4620      	mov	r0, r4
 8010e04:	2104      	movs	r1, #4
 8010e06:	f002 f957 	bl	80130b8 <ucdr_alignment>
 8010e0a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8010e0e:	4404      	add	r4, r0
 8010e10:	e7db      	b.n	8010dca <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xbe>
 8010e12:	bf00      	nop

08010e14 <get_serialized_size_sensor_msgs__msg__BatteryState>:
 8010e14:	b108      	cbz	r0, 8010e1a <get_serialized_size_sensor_msgs__msg__BatteryState+0x6>
 8010e16:	f7ff bf79 	b.w	8010d0c <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>
 8010e1a:	4770      	bx	lr

08010e1c <_BatteryState__get_serialized_size>:
 8010e1c:	b110      	cbz	r0, 8010e24 <_BatteryState__get_serialized_size+0x8>
 8010e1e:	2100      	movs	r1, #0
 8010e20:	f7ff bf74 	b.w	8010d0c <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>
 8010e24:	4770      	bx	lr
 8010e26:	bf00      	nop

08010e28 <_BatteryState__cdr_deserialize>:
 8010e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e2a:	460c      	mov	r4, r1
 8010e2c:	b083      	sub	sp, #12
 8010e2e:	2900      	cmp	r1, #0
 8010e30:	f000 80a1 	beq.w	8010f76 <_BatteryState__cdr_deserialize+0x14e>
 8010e34:	4605      	mov	r5, r0
 8010e36:	f000 fb03 	bl	8011440 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010e3a:	6843      	ldr	r3, [r0, #4]
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	4628      	mov	r0, r5
 8010e42:	4798      	blx	r3
 8010e44:	f104 0114 	add.w	r1, r4, #20
 8010e48:	4628      	mov	r0, r5
 8010e4a:	f001 fe21 	bl	8012a90 <ucdr_deserialize_float>
 8010e4e:	f104 0118 	add.w	r1, r4, #24
 8010e52:	4628      	mov	r0, r5
 8010e54:	f001 fe1c 	bl	8012a90 <ucdr_deserialize_float>
 8010e58:	f104 011c 	add.w	r1, r4, #28
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	f001 fe17 	bl	8012a90 <ucdr_deserialize_float>
 8010e62:	f104 0120 	add.w	r1, r4, #32
 8010e66:	4628      	mov	r0, r5
 8010e68:	f001 fe12 	bl	8012a90 <ucdr_deserialize_float>
 8010e6c:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8010e70:	4628      	mov	r0, r5
 8010e72:	f001 fe0d 	bl	8012a90 <ucdr_deserialize_float>
 8010e76:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8010e7a:	4628      	mov	r0, r5
 8010e7c:	f001 fe08 	bl	8012a90 <ucdr_deserialize_float>
 8010e80:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8010e84:	4628      	mov	r0, r5
 8010e86:	f001 fe03 	bl	8012a90 <ucdr_deserialize_float>
 8010e8a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8010e8e:	4628      	mov	r0, r5
 8010e90:	f000 fbf4 	bl	801167c <ucdr_deserialize_uint8_t>
 8010e94:	f104 0131 	add.w	r1, r4, #49	; 0x31
 8010e98:	4628      	mov	r0, r5
 8010e9a:	f000 fbef 	bl	801167c <ucdr_deserialize_uint8_t>
 8010e9e:	f104 0132 	add.w	r1, r4, #50	; 0x32
 8010ea2:	4628      	mov	r0, r5
 8010ea4:	f000 fbea 	bl	801167c <ucdr_deserialize_uint8_t>
 8010ea8:	f104 0133 	add.w	r1, r4, #51	; 0x33
 8010eac:	4628      	mov	r0, r5
 8010eae:	f000 fbb7 	bl	8011620 <ucdr_deserialize_bool>
 8010eb2:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8010eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010eb6:	ab01      	add	r3, sp, #4
 8010eb8:	4632      	mov	r2, r6
 8010eba:	4628      	mov	r0, r5
 8010ebc:	f002 f9d2 	bl	8013264 <ucdr_deserialize_sequence_float>
 8010ec0:	9b01      	ldr	r3, [sp, #4]
 8010ec2:	bb40      	cbnz	r0, 8010f16 <_BatteryState__cdr_deserialize+0xee>
 8010ec4:	429e      	cmp	r6, r3
 8010ec6:	d35e      	bcc.n	8010f86 <_BatteryState__cdr_deserialize+0x15e>
 8010ec8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8010eca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010ecc:	ab01      	add	r3, sp, #4
 8010ece:	4632      	mov	r2, r6
 8010ed0:	4628      	mov	r0, r5
 8010ed2:	f002 f9c7 	bl	8013264 <ucdr_deserialize_sequence_float>
 8010ed6:	9b01      	ldr	r3, [sp, #4]
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	d03c      	beq.n	8010f56 <_BatteryState__cdr_deserialize+0x12e>
 8010edc:	6463      	str	r3, [r4, #68]	; 0x44
 8010ede:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8010ee0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8010ee2:	ab01      	add	r3, sp, #4
 8010ee4:	4632      	mov	r2, r6
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f002 f964 	bl	80131b4 <ucdr_deserialize_sequence_char>
 8010eec:	9b01      	ldr	r3, [sp, #4]
 8010eee:	b320      	cbz	r0, 8010f3a <_BatteryState__cdr_deserialize+0x112>
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d146      	bne.n	8010f82 <_BatteryState__cdr_deserialize+0x15a>
 8010ef4:	6523      	str	r3, [r4, #80]	; 0x50
 8010ef6:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8010ef8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010efa:	ab01      	add	r3, sp, #4
 8010efc:	463a      	mov	r2, r7
 8010efe:	4628      	mov	r0, r5
 8010f00:	f002 f958 	bl	80131b4 <ucdr_deserialize_sequence_char>
 8010f04:	9b01      	ldr	r3, [sp, #4]
 8010f06:	4606      	mov	r6, r0
 8010f08:	b138      	cbz	r0, 8010f1a <_BatteryState__cdr_deserialize+0xf2>
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d137      	bne.n	8010f7e <_BatteryState__cdr_deserialize+0x156>
 8010f0e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8010f10:	4630      	mov	r0, r6
 8010f12:	b003      	add	sp, #12
 8010f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f16:	63a3      	str	r3, [r4, #56]	; 0x38
 8010f18:	e7d6      	b.n	8010ec8 <_BatteryState__cdr_deserialize+0xa0>
 8010f1a:	429f      	cmp	r7, r3
 8010f1c:	d2f8      	bcs.n	8010f10 <_BatteryState__cdr_deserialize+0xe8>
 8010f1e:	2101      	movs	r1, #1
 8010f20:	75a8      	strb	r0, [r5, #22]
 8010f22:	7569      	strb	r1, [r5, #21]
 8010f24:	4628      	mov	r0, r5
 8010f26:	65e6      	str	r6, [r4, #92]	; 0x5c
 8010f28:	f002 f8dc 	bl	80130e4 <ucdr_align_to>
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	9901      	ldr	r1, [sp, #4]
 8010f30:	f002 f90e 	bl	8013150 <ucdr_advance_buffer>
 8010f34:	4630      	mov	r0, r6
 8010f36:	b003      	add	sp, #12
 8010f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f3a:	429e      	cmp	r6, r3
 8010f3c:	d2db      	bcs.n	8010ef6 <_BatteryState__cdr_deserialize+0xce>
 8010f3e:	2101      	movs	r1, #1
 8010f40:	75a8      	strb	r0, [r5, #22]
 8010f42:	7569      	strb	r1, [r5, #21]
 8010f44:	6520      	str	r0, [r4, #80]	; 0x50
 8010f46:	4628      	mov	r0, r5
 8010f48:	f002 f8cc 	bl	80130e4 <ucdr_align_to>
 8010f4c:	9901      	ldr	r1, [sp, #4]
 8010f4e:	4628      	mov	r0, r5
 8010f50:	f002 f8fe 	bl	8013150 <ucdr_advance_buffer>
 8010f54:	e7cf      	b.n	8010ef6 <_BatteryState__cdr_deserialize+0xce>
 8010f56:	429e      	cmp	r6, r3
 8010f58:	d2c1      	bcs.n	8010ede <_BatteryState__cdr_deserialize+0xb6>
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	75a8      	strb	r0, [r5, #22]
 8010f5e:	756b      	strb	r3, [r5, #21]
 8010f60:	2104      	movs	r1, #4
 8010f62:	6460      	str	r0, [r4, #68]	; 0x44
 8010f64:	4628      	mov	r0, r5
 8010f66:	f002 f8bd 	bl	80130e4 <ucdr_align_to>
 8010f6a:	9901      	ldr	r1, [sp, #4]
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	0089      	lsls	r1, r1, #2
 8010f70:	f002 f8ee 	bl	8013150 <ucdr_advance_buffer>
 8010f74:	e7b3      	b.n	8010ede <_BatteryState__cdr_deserialize+0xb6>
 8010f76:	460e      	mov	r6, r1
 8010f78:	4630      	mov	r0, r6
 8010f7a:	b003      	add	sp, #12
 8010f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f7e:	3b01      	subs	r3, #1
 8010f80:	e7c5      	b.n	8010f0e <_BatteryState__cdr_deserialize+0xe6>
 8010f82:	3b01      	subs	r3, #1
 8010f84:	e7b6      	b.n	8010ef4 <_BatteryState__cdr_deserialize+0xcc>
 8010f86:	2301      	movs	r3, #1
 8010f88:	75a8      	strb	r0, [r5, #22]
 8010f8a:	756b      	strb	r3, [r5, #21]
 8010f8c:	2104      	movs	r1, #4
 8010f8e:	63a0      	str	r0, [r4, #56]	; 0x38
 8010f90:	4628      	mov	r0, r5
 8010f92:	f002 f8a7 	bl	80130e4 <ucdr_align_to>
 8010f96:	9901      	ldr	r1, [sp, #4]
 8010f98:	4628      	mov	r0, r5
 8010f9a:	0089      	lsls	r1, r1, #2
 8010f9c:	f002 f8d8 	bl	8013150 <ucdr_advance_buffer>
 8010fa0:	e792      	b.n	8010ec8 <_BatteryState__cdr_deserialize+0xa0>
 8010fa2:	bf00      	nop

08010fa4 <_BatteryState__cdr_serialize>:
 8010fa4:	2800      	cmp	r0, #0
 8010fa6:	d065      	beq.n	8011074 <_BatteryState__cdr_serialize+0xd0>
 8010fa8:	b570      	push	{r4, r5, r6, lr}
 8010faa:	4604      	mov	r4, r0
 8010fac:	460d      	mov	r5, r1
 8010fae:	f000 fa47 	bl	8011440 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010fb2:	6843      	ldr	r3, [r0, #4]
 8010fb4:	4629      	mov	r1, r5
 8010fb6:	689b      	ldr	r3, [r3, #8]
 8010fb8:	4620      	mov	r0, r4
 8010fba:	4798      	blx	r3
 8010fbc:	ed94 0a05 	vldr	s0, [r4, #20]
 8010fc0:	4628      	mov	r0, r5
 8010fc2:	f001 fc33 	bl	801282c <ucdr_serialize_float>
 8010fc6:	ed94 0a06 	vldr	s0, [r4, #24]
 8010fca:	4628      	mov	r0, r5
 8010fcc:	f001 fc2e 	bl	801282c <ucdr_serialize_float>
 8010fd0:	ed94 0a07 	vldr	s0, [r4, #28]
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	f001 fc29 	bl	801282c <ucdr_serialize_float>
 8010fda:	ed94 0a08 	vldr	s0, [r4, #32]
 8010fde:	4628      	mov	r0, r5
 8010fe0:	f001 fc24 	bl	801282c <ucdr_serialize_float>
 8010fe4:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8010fe8:	4628      	mov	r0, r5
 8010fea:	f001 fc1f 	bl	801282c <ucdr_serialize_float>
 8010fee:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	f001 fc1a 	bl	801282c <ucdr_serialize_float>
 8010ff8:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	f001 fc15 	bl	801282c <ucdr_serialize_float>
 8011002:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8011006:	4628      	mov	r0, r5
 8011008:	f000 fb22 	bl	8011650 <ucdr_serialize_uint8_t>
 801100c:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8011010:	4628      	mov	r0, r5
 8011012:	f000 fb1d 	bl	8011650 <ucdr_serialize_uint8_t>
 8011016:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 801101a:	4628      	mov	r0, r5
 801101c:	f000 fb18 	bl	8011650 <ucdr_serialize_uint8_t>
 8011020:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 8011024:	4628      	mov	r0, r5
 8011026:	f000 fae5 	bl	80115f4 <ucdr_serialize_bool>
 801102a:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 801102e:	4628      	mov	r0, r5
 8011030:	f002 f906 	bl	8013240 <ucdr_serialize_sequence_float>
 8011034:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
 8011038:	4628      	mov	r0, r5
 801103a:	f002 f901 	bl	8013240 <ucdr_serialize_sequence_float>
 801103e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8011040:	b1ae      	cbz	r6, 801106e <_BatteryState__cdr_serialize+0xca>
 8011042:	4630      	mov	r0, r6
 8011044:	f7ef f8ce 	bl	80001e4 <strlen>
 8011048:	1c42      	adds	r2, r0, #1
 801104a:	6520      	str	r0, [r4, #80]	; 0x50
 801104c:	4631      	mov	r1, r6
 801104e:	4628      	mov	r0, r5
 8011050:	f002 f89e 	bl	8013190 <ucdr_serialize_sequence_char>
 8011054:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8011056:	b176      	cbz	r6, 8011076 <_BatteryState__cdr_serialize+0xd2>
 8011058:	4630      	mov	r0, r6
 801105a:	f7ef f8c3 	bl	80001e4 <strlen>
 801105e:	4631      	mov	r1, r6
 8011060:	65e0      	str	r0, [r4, #92]	; 0x5c
 8011062:	1c42      	adds	r2, r0, #1
 8011064:	4628      	mov	r0, r5
 8011066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801106a:	f002 b891 	b.w	8013190 <ucdr_serialize_sequence_char>
 801106e:	4632      	mov	r2, r6
 8011070:	4630      	mov	r0, r6
 8011072:	e7ea      	b.n	801104a <_BatteryState__cdr_serialize+0xa6>
 8011074:	4770      	bx	lr
 8011076:	4630      	mov	r0, r6
 8011078:	65e0      	str	r0, [r4, #92]	; 0x5c
 801107a:	4632      	mov	r2, r6
 801107c:	4631      	mov	r1, r6
 801107e:	4628      	mov	r0, r5
 8011080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011084:	f002 b884 	b.w	8013190 <ucdr_serialize_sequence_char>

08011088 <max_serialized_size_sensor_msgs__msg__BatteryState>:
 8011088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801108c:	f04f 0801 	mov.w	r8, #1
 8011090:	f880 8000 	strb.w	r8, [r0]
 8011094:	460c      	mov	r4, r1
 8011096:	4607      	mov	r7, r0
 8011098:	f000 f9c8 	bl	801142c <max_serialized_size_std_msgs__msg__Header>
 801109c:	1825      	adds	r5, r4, r0
 801109e:	2104      	movs	r1, #4
 80110a0:	4628      	mov	r0, r5
 80110a2:	f002 f809 	bl	80130b8 <ucdr_alignment>
 80110a6:	1d06      	adds	r6, r0, #4
 80110a8:	4435      	add	r5, r6
 80110aa:	2104      	movs	r1, #4
 80110ac:	4628      	mov	r0, r5
 80110ae:	f002 f803 	bl	80130b8 <ucdr_alignment>
 80110b2:	1d06      	adds	r6, r0, #4
 80110b4:	442e      	add	r6, r5
 80110b6:	2104      	movs	r1, #4
 80110b8:	4630      	mov	r0, r6
 80110ba:	f001 fffd 	bl	80130b8 <ucdr_alignment>
 80110be:	3004      	adds	r0, #4
 80110c0:	4406      	add	r6, r0
 80110c2:	2104      	movs	r1, #4
 80110c4:	4630      	mov	r0, r6
 80110c6:	f001 fff7 	bl	80130b8 <ucdr_alignment>
 80110ca:	3004      	adds	r0, #4
 80110cc:	1985      	adds	r5, r0, r6
 80110ce:	2104      	movs	r1, #4
 80110d0:	4628      	mov	r0, r5
 80110d2:	f001 fff1 	bl	80130b8 <ucdr_alignment>
 80110d6:	1d06      	adds	r6, r0, #4
 80110d8:	442e      	add	r6, r5
 80110da:	2104      	movs	r1, #4
 80110dc:	4630      	mov	r0, r6
 80110de:	f001 ffeb 	bl	80130b8 <ucdr_alignment>
 80110e2:	3004      	adds	r0, #4
 80110e4:	4406      	add	r6, r0
 80110e6:	2104      	movs	r1, #4
 80110e8:	4630      	mov	r0, r6
 80110ea:	f001 ffe5 	bl	80130b8 <ucdr_alignment>
 80110ee:	3004      	adds	r0, #4
 80110f0:	1985      	adds	r5, r0, r6
 80110f2:	4641      	mov	r1, r8
 80110f4:	4628      	mov	r0, r5
 80110f6:	f001 ffdf 	bl	80130b8 <ucdr_alignment>
 80110fa:	eb00 0608 	add.w	r6, r0, r8
 80110fe:	442e      	add	r6, r5
 8011100:	4641      	mov	r1, r8
 8011102:	4630      	mov	r0, r6
 8011104:	f001 ffd8 	bl	80130b8 <ucdr_alignment>
 8011108:	eb00 0508 	add.w	r5, r0, r8
 801110c:	442e      	add	r6, r5
 801110e:	4641      	mov	r1, r8
 8011110:	4630      	mov	r0, r6
 8011112:	f001 ffd1 	bl	80130b8 <ucdr_alignment>
 8011116:	eb00 0508 	add.w	r5, r0, r8
 801111a:	4435      	add	r5, r6
 801111c:	4641      	mov	r1, r8
 801111e:	4628      	mov	r0, r5
 8011120:	f001 ffca 	bl	80130b8 <ucdr_alignment>
 8011124:	eba8 0404 	sub.w	r4, r8, r4
 8011128:	2300      	movs	r3, #0
 801112a:	4420      	add	r0, r4
 801112c:	703b      	strb	r3, [r7, #0]
 801112e:	4428      	add	r0, r5
 8011130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011134 <_BatteryState__max_serialized_size>:
 8011134:	b500      	push	{lr}
 8011136:	b083      	sub	sp, #12
 8011138:	2100      	movs	r1, #0
 801113a:	f10d 0007 	add.w	r0, sp, #7
 801113e:	f7ff ffa3 	bl	8011088 <max_serialized_size_sensor_msgs__msg__BatteryState>
 8011142:	b003      	add	sp, #12
 8011144:	f85d fb04 	ldr.w	pc, [sp], #4

08011148 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8011148:	4800      	ldr	r0, [pc, #0]	; (801114c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x4>)
 801114a:	4770      	bx	lr
 801114c:	200005cc 	.word	0x200005cc

08011150 <get_serialized_size_sensor_msgs__msg__Temperature>:
 8011150:	b538      	push	{r3, r4, r5, lr}
 8011152:	b188      	cbz	r0, 8011178 <get_serialized_size_sensor_msgs__msg__Temperature+0x28>
 8011154:	460d      	mov	r5, r1
 8011156:	f000 f8f1 	bl	801133c <get_serialized_size_std_msgs__msg__Header>
 801115a:	182c      	adds	r4, r5, r0
 801115c:	2108      	movs	r1, #8
 801115e:	4620      	mov	r0, r4
 8011160:	f001 ffaa 	bl	80130b8 <ucdr_alignment>
 8011164:	3008      	adds	r0, #8
 8011166:	4404      	add	r4, r0
 8011168:	2108      	movs	r1, #8
 801116a:	4620      	mov	r0, r4
 801116c:	f001 ffa4 	bl	80130b8 <ucdr_alignment>
 8011170:	f1c5 0508 	rsb	r5, r5, #8
 8011174:	4428      	add	r0, r5
 8011176:	4420      	add	r0, r4
 8011178:	bd38      	pop	{r3, r4, r5, pc}
 801117a:	bf00      	nop

0801117c <_Temperature__cdr_deserialize>:
 801117c:	b538      	push	{r3, r4, r5, lr}
 801117e:	460c      	mov	r4, r1
 8011180:	b199      	cbz	r1, 80111aa <_Temperature__cdr_deserialize+0x2e>
 8011182:	4605      	mov	r5, r0
 8011184:	f000 f95c 	bl	8011440 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011188:	6843      	ldr	r3, [r0, #4]
 801118a:	4621      	mov	r1, r4
 801118c:	68db      	ldr	r3, [r3, #12]
 801118e:	4628      	mov	r0, r5
 8011190:	4798      	blx	r3
 8011192:	f104 0118 	add.w	r1, r4, #24
 8011196:	4628      	mov	r0, r5
 8011198:	f001 fe70 	bl	8012e7c <ucdr_deserialize_double>
 801119c:	f104 0120 	add.w	r1, r4, #32
 80111a0:	4628      	mov	r0, r5
 80111a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111a6:	f001 be69 	b.w	8012e7c <ucdr_deserialize_double>
 80111aa:	4608      	mov	r0, r1
 80111ac:	bd38      	pop	{r3, r4, r5, pc}
 80111ae:	bf00      	nop

080111b0 <_Temperature__cdr_serialize>:
 80111b0:	b1a8      	cbz	r0, 80111de <_Temperature__cdr_serialize+0x2e>
 80111b2:	b538      	push	{r3, r4, r5, lr}
 80111b4:	460d      	mov	r5, r1
 80111b6:	4604      	mov	r4, r0
 80111b8:	f000 f942 	bl	8011440 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80111bc:	6843      	ldr	r3, [r0, #4]
 80111be:	4629      	mov	r1, r5
 80111c0:	689b      	ldr	r3, [r3, #8]
 80111c2:	4620      	mov	r0, r4
 80111c4:	4798      	blx	r3
 80111c6:	ed94 0b06 	vldr	d0, [r4, #24]
 80111ca:	4628      	mov	r0, r5
 80111cc:	f001 fd86 	bl	8012cdc <ucdr_serialize_double>
 80111d0:	ed94 0b08 	vldr	d0, [r4, #32]
 80111d4:	4628      	mov	r0, r5
 80111d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111da:	f001 bd7f 	b.w	8012cdc <ucdr_serialize_double>
 80111de:	4770      	bx	lr

080111e0 <_Temperature__get_serialized_size>:
 80111e0:	b188      	cbz	r0, 8011206 <_Temperature__get_serialized_size+0x26>
 80111e2:	b510      	push	{r4, lr}
 80111e4:	2100      	movs	r1, #0
 80111e6:	f000 f8a9 	bl	801133c <get_serialized_size_std_msgs__msg__Header>
 80111ea:	2108      	movs	r1, #8
 80111ec:	4604      	mov	r4, r0
 80111ee:	f001 ff63 	bl	80130b8 <ucdr_alignment>
 80111f2:	4420      	add	r0, r4
 80111f4:	f100 0408 	add.w	r4, r0, #8
 80111f8:	2108      	movs	r1, #8
 80111fa:	4620      	mov	r0, r4
 80111fc:	f001 ff5c 	bl	80130b8 <ucdr_alignment>
 8011200:	3008      	adds	r0, #8
 8011202:	4420      	add	r0, r4
 8011204:	bd10      	pop	{r4, pc}
 8011206:	4770      	bx	lr

08011208 <_Temperature__max_serialized_size>:
 8011208:	b510      	push	{r4, lr}
 801120a:	b082      	sub	sp, #8
 801120c:	2301      	movs	r3, #1
 801120e:	2100      	movs	r1, #0
 8011210:	f10d 0007 	add.w	r0, sp, #7
 8011214:	f88d 3007 	strb.w	r3, [sp, #7]
 8011218:	f000 f908 	bl	801142c <max_serialized_size_std_msgs__msg__Header>
 801121c:	2108      	movs	r1, #8
 801121e:	4604      	mov	r4, r0
 8011220:	f001 ff4a 	bl	80130b8 <ucdr_alignment>
 8011224:	4420      	add	r0, r4
 8011226:	f100 0408 	add.w	r4, r0, #8
 801122a:	2108      	movs	r1, #8
 801122c:	4620      	mov	r0, r4
 801122e:	f001 ff43 	bl	80130b8 <ucdr_alignment>
 8011232:	3008      	adds	r0, #8
 8011234:	4420      	add	r0, r4
 8011236:	b002      	add	sp, #8
 8011238:	bd10      	pop	{r4, pc}
 801123a:	bf00      	nop

0801123c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 801123c:	4800      	ldr	r0, [pc, #0]	; (8011240 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x4>)
 801123e:	4770      	bx	lr
 8011240:	200005f4 	.word	0x200005f4

08011244 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8011244:	4b04      	ldr	r3, [pc, #16]	; (8011258 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011246:	681a      	ldr	r2, [r3, #0]
 8011248:	b10a      	cbz	r2, 801124e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801124a:	4803      	ldr	r0, [pc, #12]	; (8011258 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801124c:	4770      	bx	lr
 801124e:	4a03      	ldr	r2, [pc, #12]	; (801125c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8011250:	4801      	ldr	r0, [pc, #4]	; (8011258 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011252:	6812      	ldr	r2, [r2, #0]
 8011254:	601a      	str	r2, [r3, #0]
 8011256:	4770      	bx	lr
 8011258:	20000624 	.word	0x20000624
 801125c:	2000087c 	.word	0x2000087c

08011260 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8011260:	4a02      	ldr	r2, [pc, #8]	; (801126c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8011262:	4b03      	ldr	r3, [pc, #12]	; (8011270 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8011264:	6812      	ldr	r2, [r2, #0]
 8011266:	601a      	str	r2, [r3, #0]
 8011268:	4770      	bx	lr
 801126a:	bf00      	nop
 801126c:	2000087c 	.word	0x2000087c
 8011270:	20000624 	.word	0x20000624

08011274 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8011274:	4b04      	ldr	r3, [pc, #16]	; (8011288 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	b10a      	cbz	r2, 801127e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0xa>
 801127a:	4803      	ldr	r0, [pc, #12]	; (8011288 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 801127c:	4770      	bx	lr
 801127e:	4a03      	ldr	r2, [pc, #12]	; (801128c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x18>)
 8011280:	4801      	ldr	r0, [pc, #4]	; (8011288 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011282:	6812      	ldr	r2, [r2, #0]
 8011284:	601a      	str	r2, [r3, #0]
 8011286:	4770      	bx	lr
 8011288:	20000638 	.word	0x20000638
 801128c:	2000087c 	.word	0x2000087c

08011290 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8011290:	4a02      	ldr	r2, [pc, #8]	; (801129c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0xc>)
 8011292:	4b03      	ldr	r3, [pc, #12]	; (80112a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x10>)
 8011294:	6812      	ldr	r2, [r2, #0]
 8011296:	601a      	str	r2, [r3, #0]
 8011298:	4770      	bx	lr
 801129a:	bf00      	nop
 801129c:	2000087c 	.word	0x2000087c
 80112a0:	20000638 	.word	0x20000638

080112a4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80112a4:	f006 bdec 	b.w	8017e80 <std_msgs__msg__Header__init>

080112a8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80112a8:	f006 be0e 	b.w	8017ec8 <std_msgs__msg__Header__fini>

080112ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80112ac:	b508      	push	{r3, lr}
 80112ae:	f000 f92b 	bl	8011508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80112b2:	4b06      	ldr	r3, [pc, #24]	; (80112cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80112b4:	4906      	ldr	r1, [pc, #24]	; (80112d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80112b6:	681a      	ldr	r2, [r3, #0]
 80112b8:	60c8      	str	r0, [r1, #12]
 80112ba:	b10a      	cbz	r2, 80112c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80112bc:	4803      	ldr	r0, [pc, #12]	; (80112cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80112be:	bd08      	pop	{r3, pc}
 80112c0:	4a04      	ldr	r2, [pc, #16]	; (80112d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80112c2:	4802      	ldr	r0, [pc, #8]	; (80112cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80112c4:	6812      	ldr	r2, [r2, #0]
 80112c6:	601a      	str	r2, [r3, #0]
 80112c8:	bd08      	pop	{r3, pc}
 80112ca:	bf00      	nop
 80112cc:	200006bc 	.word	0x200006bc
 80112d0:	20000644 	.word	0x20000644
 80112d4:	20000880 	.word	0x20000880

080112d8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 80112d8:	f006 be02 	b.w	8017ee0 <std_msgs__msg__Int32__init>

080112dc <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 80112dc:	f006 be04 	b.w	8017ee8 <std_msgs__msg__Int32__fini>

080112e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80112e0:	4b04      	ldr	r3, [pc, #16]	; (80112f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80112e2:	681a      	ldr	r2, [r3, #0]
 80112e4:	b10a      	cbz	r2, 80112ea <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80112e6:	4803      	ldr	r0, [pc, #12]	; (80112f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80112e8:	4770      	bx	lr
 80112ea:	4a03      	ldr	r2, [pc, #12]	; (80112f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80112ec:	4801      	ldr	r0, [pc, #4]	; (80112f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80112ee:	6812      	ldr	r2, [r2, #0]
 80112f0:	601a      	str	r2, [r3, #0]
 80112f2:	4770      	bx	lr
 80112f4:	20000704 	.word	0x20000704
 80112f8:	20000880 	.word	0x20000880

080112fc <std_msgs__msg__Int64__rosidl_typesupport_introspection_c__Int64_init_function>:
 80112fc:	f006 bdf6 	b.w	8017eec <std_msgs__msg__Int64__init>

08011300 <std_msgs__msg__Int64__rosidl_typesupport_introspection_c__Int64_fini_function>:
 8011300:	f006 bdf8 	b.w	8017ef4 <std_msgs__msg__Int64__fini>

08011304 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8011304:	4b04      	ldr	r3, [pc, #16]	; (8011318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011306:	681a      	ldr	r2, [r3, #0]
 8011308:	b10a      	cbz	r2, 801130e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0xa>
 801130a:	4803      	ldr	r0, [pc, #12]	; (8011318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 801130c:	4770      	bx	lr
 801130e:	4a03      	ldr	r2, [pc, #12]	; (801131c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x18>)
 8011310:	4801      	ldr	r0, [pc, #4]	; (8011318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011312:	6812      	ldr	r2, [r2, #0]
 8011314:	601a      	str	r2, [r3, #0]
 8011316:	4770      	bx	lr
 8011318:	2000074c 	.word	0x2000074c
 801131c:	20000880 	.word	0x20000880

08011320 <_Header__max_serialized_size>:
 8011320:	b500      	push	{lr}
 8011322:	b083      	sub	sp, #12
 8011324:	2301      	movs	r3, #1
 8011326:	2100      	movs	r1, #0
 8011328:	f10d 0007 	add.w	r0, sp, #7
 801132c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011330:	f000 f948 	bl	80115c4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011334:	b003      	add	sp, #12
 8011336:	f85d fb04 	ldr.w	pc, [sp], #4
 801133a:	bf00      	nop

0801133c <get_serialized_size_std_msgs__msg__Header>:
 801133c:	b570      	push	{r4, r5, r6, lr}
 801133e:	4605      	mov	r5, r0
 8011340:	b168      	cbz	r0, 801135e <get_serialized_size_std_msgs__msg__Header+0x22>
 8011342:	460c      	mov	r4, r1
 8011344:	f000 f8ee 	bl	8011524 <get_serialized_size_builtin_interfaces__msg__Time>
 8011348:	1826      	adds	r6, r4, r0
 801134a:	2104      	movs	r1, #4
 801134c:	4630      	mov	r0, r6
 801134e:	f001 feb3 	bl	80130b8 <ucdr_alignment>
 8011352:	68e9      	ldr	r1, [r5, #12]
 8011354:	f1c4 0405 	rsb	r4, r4, #5
 8011358:	440c      	add	r4, r1
 801135a:	4404      	add	r4, r0
 801135c:	19a0      	adds	r0, r4, r6
 801135e:	bd70      	pop	{r4, r5, r6, pc}

08011360 <_Header__cdr_deserialize>:
 8011360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011362:	460c      	mov	r4, r1
 8011364:	b083      	sub	sp, #12
 8011366:	b1e1      	cbz	r1, 80113a2 <_Header__cdr_deserialize+0x42>
 8011368:	4606      	mov	r6, r0
 801136a:	f000 f93f 	bl	80115ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801136e:	6843      	ldr	r3, [r0, #4]
 8011370:	4621      	mov	r1, r4
 8011372:	68db      	ldr	r3, [r3, #12]
 8011374:	4630      	mov	r0, r6
 8011376:	4798      	blx	r3
 8011378:	6927      	ldr	r7, [r4, #16]
 801137a:	68a1      	ldr	r1, [r4, #8]
 801137c:	ab01      	add	r3, sp, #4
 801137e:	463a      	mov	r2, r7
 8011380:	4630      	mov	r0, r6
 8011382:	f001 ff17 	bl	80131b4 <ucdr_deserialize_sequence_char>
 8011386:	9b01      	ldr	r3, [sp, #4]
 8011388:	4605      	mov	r5, r0
 801138a:	b920      	cbnz	r0, 8011396 <_Header__cdr_deserialize+0x36>
 801138c:	429f      	cmp	r7, r3
 801138e:	d30c      	bcc.n	80113aa <_Header__cdr_deserialize+0x4a>
 8011390:	4628      	mov	r0, r5
 8011392:	b003      	add	sp, #12
 8011394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011396:	b103      	cbz	r3, 801139a <_Header__cdr_deserialize+0x3a>
 8011398:	3b01      	subs	r3, #1
 801139a:	4628      	mov	r0, r5
 801139c:	60e3      	str	r3, [r4, #12]
 801139e:	b003      	add	sp, #12
 80113a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113a2:	460d      	mov	r5, r1
 80113a4:	4628      	mov	r0, r5
 80113a6:	b003      	add	sp, #12
 80113a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113aa:	2101      	movs	r1, #1
 80113ac:	75b0      	strb	r0, [r6, #22]
 80113ae:	7571      	strb	r1, [r6, #21]
 80113b0:	4630      	mov	r0, r6
 80113b2:	60e5      	str	r5, [r4, #12]
 80113b4:	f001 fe96 	bl	80130e4 <ucdr_align_to>
 80113b8:	4630      	mov	r0, r6
 80113ba:	9901      	ldr	r1, [sp, #4]
 80113bc:	f001 fec8 	bl	8013150 <ucdr_advance_buffer>
 80113c0:	4628      	mov	r0, r5
 80113c2:	b003      	add	sp, #12
 80113c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113c6:	bf00      	nop

080113c8 <_Header__cdr_serialize>:
 80113c8:	b1f8      	cbz	r0, 801140a <_Header__cdr_serialize+0x42>
 80113ca:	b570      	push	{r4, r5, r6, lr}
 80113cc:	4604      	mov	r4, r0
 80113ce:	460d      	mov	r5, r1
 80113d0:	f000 f90c 	bl	80115ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80113d4:	6843      	ldr	r3, [r0, #4]
 80113d6:	4629      	mov	r1, r5
 80113d8:	689b      	ldr	r3, [r3, #8]
 80113da:	4620      	mov	r0, r4
 80113dc:	4798      	blx	r3
 80113de:	68a6      	ldr	r6, [r4, #8]
 80113e0:	b156      	cbz	r6, 80113f8 <_Header__cdr_serialize+0x30>
 80113e2:	4630      	mov	r0, r6
 80113e4:	f7ee fefe 	bl	80001e4 <strlen>
 80113e8:	4631      	mov	r1, r6
 80113ea:	60e0      	str	r0, [r4, #12]
 80113ec:	1c42      	adds	r2, r0, #1
 80113ee:	4628      	mov	r0, r5
 80113f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113f4:	f001 becc 	b.w	8013190 <ucdr_serialize_sequence_char>
 80113f8:	4630      	mov	r0, r6
 80113fa:	60e0      	str	r0, [r4, #12]
 80113fc:	4632      	mov	r2, r6
 80113fe:	4631      	mov	r1, r6
 8011400:	4628      	mov	r0, r5
 8011402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011406:	f001 bec3 	b.w	8013190 <ucdr_serialize_sequence_char>
 801140a:	4770      	bx	lr

0801140c <_Header__get_serialized_size>:
 801140c:	b538      	push	{r3, r4, r5, lr}
 801140e:	4604      	mov	r4, r0
 8011410:	b150      	cbz	r0, 8011428 <_Header__get_serialized_size+0x1c>
 8011412:	2100      	movs	r1, #0
 8011414:	f000 f886 	bl	8011524 <get_serialized_size_builtin_interfaces__msg__Time>
 8011418:	2104      	movs	r1, #4
 801141a:	4605      	mov	r5, r0
 801141c:	f001 fe4c 	bl	80130b8 <ucdr_alignment>
 8011420:	68e2      	ldr	r2, [r4, #12]
 8011422:	3205      	adds	r2, #5
 8011424:	1953      	adds	r3, r2, r5
 8011426:	4418      	add	r0, r3
 8011428:	bd38      	pop	{r3, r4, r5, pc}
 801142a:	bf00      	nop

0801142c <max_serialized_size_std_msgs__msg__Header>:
 801142c:	b510      	push	{r4, lr}
 801142e:	2301      	movs	r3, #1
 8011430:	4604      	mov	r4, r0
 8011432:	7003      	strb	r3, [r0, #0]
 8011434:	f000 f8c6 	bl	80115c4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011438:	2300      	movs	r3, #0
 801143a:	7023      	strb	r3, [r4, #0]
 801143c:	bd10      	pop	{r4, pc}
 801143e:	bf00      	nop

08011440 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011440:	4800      	ldr	r0, [pc, #0]	; (8011444 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8011442:	4770      	bx	lr
 8011444:	20000758 	.word	0x20000758

08011448 <_Int32__max_serialized_size>:
 8011448:	b508      	push	{r3, lr}
 801144a:	2104      	movs	r1, #4
 801144c:	2000      	movs	r0, #0
 801144e:	f001 fe33 	bl	80130b8 <ucdr_alignment>
 8011452:	3004      	adds	r0, #4
 8011454:	bd08      	pop	{r3, pc}
 8011456:	bf00      	nop

08011458 <_Int32__cdr_deserialize>:
 8011458:	b109      	cbz	r1, 801145e <_Int32__cdr_deserialize+0x6>
 801145a:	f000 bfc1 	b.w	80123e0 <ucdr_deserialize_int32_t>
 801145e:	4608      	mov	r0, r1
 8011460:	4770      	bx	lr
 8011462:	bf00      	nop

08011464 <get_serialized_size_std_msgs__msg__Int32>:
 8011464:	b138      	cbz	r0, 8011476 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8011466:	b508      	push	{r3, lr}
 8011468:	460b      	mov	r3, r1
 801146a:	4618      	mov	r0, r3
 801146c:	2104      	movs	r1, #4
 801146e:	f001 fe23 	bl	80130b8 <ucdr_alignment>
 8011472:	3004      	adds	r0, #4
 8011474:	bd08      	pop	{r3, pc}
 8011476:	4770      	bx	lr

08011478 <_Int32__cdr_serialize>:
 8011478:	460a      	mov	r2, r1
 801147a:	b118      	cbz	r0, 8011484 <_Int32__cdr_serialize+0xc>
 801147c:	6801      	ldr	r1, [r0, #0]
 801147e:	4610      	mov	r0, r2
 8011480:	f000 bf16 	b.w	80122b0 <ucdr_serialize_int32_t>
 8011484:	4770      	bx	lr
 8011486:	bf00      	nop

08011488 <_Int32__get_serialized_size>:
 8011488:	b130      	cbz	r0, 8011498 <_Int32__get_serialized_size+0x10>
 801148a:	b508      	push	{r3, lr}
 801148c:	2104      	movs	r1, #4
 801148e:	2000      	movs	r0, #0
 8011490:	f001 fe12 	bl	80130b8 <ucdr_alignment>
 8011494:	3004      	adds	r0, #4
 8011496:	bd08      	pop	{r3, pc}
 8011498:	4770      	bx	lr
 801149a:	bf00      	nop

0801149c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801149c:	4800      	ldr	r0, [pc, #0]	; (80114a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 801149e:	4770      	bx	lr
 80114a0:	20000780 	.word	0x20000780

080114a4 <_Int64__max_serialized_size>:
 80114a4:	b508      	push	{r3, lr}
 80114a6:	2108      	movs	r1, #8
 80114a8:	2000      	movs	r0, #0
 80114aa:	f001 fe05 	bl	80130b8 <ucdr_alignment>
 80114ae:	3008      	adds	r0, #8
 80114b0:	bd08      	pop	{r3, pc}
 80114b2:	bf00      	nop

080114b4 <_Int64__cdr_deserialize>:
 80114b4:	b109      	cbz	r1, 80114ba <_Int64__cdr_deserialize+0x6>
 80114b6:	f001 b8f3 	b.w	80126a0 <ucdr_deserialize_int64_t>
 80114ba:	4608      	mov	r0, r1
 80114bc:	4770      	bx	lr
 80114be:	bf00      	nop

080114c0 <_Int64__get_serialized_size>:
 80114c0:	b130      	cbz	r0, 80114d0 <_Int64__get_serialized_size+0x10>
 80114c2:	b508      	push	{r3, lr}
 80114c4:	2108      	movs	r1, #8
 80114c6:	2000      	movs	r0, #0
 80114c8:	f001 fdf6 	bl	80130b8 <ucdr_alignment>
 80114cc:	3008      	adds	r0, #8
 80114ce:	bd08      	pop	{r3, pc}
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop

080114d4 <_Int64__cdr_serialize>:
 80114d4:	b120      	cbz	r0, 80114e0 <_Int64__cdr_serialize+0xc>
 80114d6:	e9d0 2300 	ldrd	r2, r3, [r0]
 80114da:	4608      	mov	r0, r1
 80114dc:	f001 b810 	b.w	8012500 <ucdr_serialize_int64_t>
 80114e0:	4770      	bx	lr
 80114e2:	bf00      	nop

080114e4 <get_serialized_size_std_msgs__msg__Int64>:
 80114e4:	b138      	cbz	r0, 80114f6 <get_serialized_size_std_msgs__msg__Int64+0x12>
 80114e6:	b508      	push	{r3, lr}
 80114e8:	460b      	mov	r3, r1
 80114ea:	4618      	mov	r0, r3
 80114ec:	2108      	movs	r1, #8
 80114ee:	f001 fde3 	bl	80130b8 <ucdr_alignment>
 80114f2:	3008      	adds	r0, #8
 80114f4:	bd08      	pop	{r3, pc}
 80114f6:	4770      	bx	lr

080114f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 80114f8:	4800      	ldr	r0, [pc, #0]	; (80114fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int64+0x4>)
 80114fa:	4770      	bx	lr
 80114fc:	200007a8 	.word	0x200007a8

08011500 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8011500:	f006 bcfa 	b.w	8017ef8 <builtin_interfaces__msg__Time__init>

08011504 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8011504:	f006 bcfc 	b.w	8017f00 <builtin_interfaces__msg__Time__fini>

08011508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011508:	4b04      	ldr	r3, [pc, #16]	; (801151c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801150a:	681a      	ldr	r2, [r3, #0]
 801150c:	b10a      	cbz	r2, 8011512 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 801150e:	4803      	ldr	r0, [pc, #12]	; (801151c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011510:	4770      	bx	lr
 8011512:	4a03      	ldr	r2, [pc, #12]	; (8011520 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8011514:	4801      	ldr	r0, [pc, #4]	; (801151c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011516:	6812      	ldr	r2, [r2, #0]
 8011518:	601a      	str	r2, [r3, #0]
 801151a:	4770      	bx	lr
 801151c:	20000848 	.word	0x20000848
 8011520:	20000880 	.word	0x20000880

08011524 <get_serialized_size_builtin_interfaces__msg__Time>:
 8011524:	b180      	cbz	r0, 8011548 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8011526:	b538      	push	{r3, r4, r5, lr}
 8011528:	460d      	mov	r5, r1
 801152a:	4628      	mov	r0, r5
 801152c:	2104      	movs	r1, #4
 801152e:	f001 fdc3 	bl	80130b8 <ucdr_alignment>
 8011532:	1d2b      	adds	r3, r5, #4
 8011534:	181c      	adds	r4, r3, r0
 8011536:	2104      	movs	r1, #4
 8011538:	4620      	mov	r0, r4
 801153a:	f001 fdbd 	bl	80130b8 <ucdr_alignment>
 801153e:	f1c5 0504 	rsb	r5, r5, #4
 8011542:	4428      	add	r0, r5
 8011544:	4420      	add	r0, r4
 8011546:	bd38      	pop	{r3, r4, r5, pc}
 8011548:	4770      	bx	lr
 801154a:	bf00      	nop

0801154c <_Time__cdr_deserialize>:
 801154c:	b538      	push	{r3, r4, r5, lr}
 801154e:	460c      	mov	r4, r1
 8011550:	b141      	cbz	r1, 8011564 <_Time__cdr_deserialize+0x18>
 8011552:	4605      	mov	r5, r0
 8011554:	f000 ff44 	bl	80123e0 <ucdr_deserialize_int32_t>
 8011558:	1d21      	adds	r1, r4, #4
 801155a:	4628      	mov	r0, r5
 801155c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011560:	f000 bbbc 	b.w	8011cdc <ucdr_deserialize_uint32_t>
 8011564:	4608      	mov	r0, r1
 8011566:	bd38      	pop	{r3, r4, r5, pc}

08011568 <_Time__cdr_serialize>:
 8011568:	b160      	cbz	r0, 8011584 <_Time__cdr_serialize+0x1c>
 801156a:	b538      	push	{r3, r4, r5, lr}
 801156c:	460d      	mov	r5, r1
 801156e:	4604      	mov	r4, r0
 8011570:	6801      	ldr	r1, [r0, #0]
 8011572:	4628      	mov	r0, r5
 8011574:	f000 fe9c 	bl	80122b0 <ucdr_serialize_int32_t>
 8011578:	6861      	ldr	r1, [r4, #4]
 801157a:	4628      	mov	r0, r5
 801157c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011580:	f000 ba7c 	b.w	8011a7c <ucdr_serialize_uint32_t>
 8011584:	4770      	bx	lr
 8011586:	bf00      	nop

08011588 <_Time__get_serialized_size>:
 8011588:	b160      	cbz	r0, 80115a4 <_Time__get_serialized_size+0x1c>
 801158a:	b510      	push	{r4, lr}
 801158c:	2104      	movs	r1, #4
 801158e:	2000      	movs	r0, #0
 8011590:	f001 fd92 	bl	80130b8 <ucdr_alignment>
 8011594:	1d04      	adds	r4, r0, #4
 8011596:	2104      	movs	r1, #4
 8011598:	4620      	mov	r0, r4
 801159a:	f001 fd8d 	bl	80130b8 <ucdr_alignment>
 801159e:	3004      	adds	r0, #4
 80115a0:	4420      	add	r0, r4
 80115a2:	bd10      	pop	{r4, pc}
 80115a4:	4770      	bx	lr
 80115a6:	bf00      	nop

080115a8 <_Time__max_serialized_size>:
 80115a8:	b510      	push	{r4, lr}
 80115aa:	2104      	movs	r1, #4
 80115ac:	2000      	movs	r0, #0
 80115ae:	f001 fd83 	bl	80130b8 <ucdr_alignment>
 80115b2:	1d04      	adds	r4, r0, #4
 80115b4:	2104      	movs	r1, #4
 80115b6:	4620      	mov	r0, r4
 80115b8:	f001 fd7e 	bl	80130b8 <ucdr_alignment>
 80115bc:	3004      	adds	r0, #4
 80115be:	4420      	add	r0, r4
 80115c0:	bd10      	pop	{r4, pc}
 80115c2:	bf00      	nop

080115c4 <max_serialized_size_builtin_interfaces__msg__Time>:
 80115c4:	b538      	push	{r3, r4, r5, lr}
 80115c6:	460c      	mov	r4, r1
 80115c8:	2301      	movs	r3, #1
 80115ca:	7003      	strb	r3, [r0, #0]
 80115cc:	2104      	movs	r1, #4
 80115ce:	4620      	mov	r0, r4
 80115d0:	f001 fd72 	bl	80130b8 <ucdr_alignment>
 80115d4:	1d25      	adds	r5, r4, #4
 80115d6:	4405      	add	r5, r0
 80115d8:	2104      	movs	r1, #4
 80115da:	4628      	mov	r0, r5
 80115dc:	f001 fd6c 	bl	80130b8 <ucdr_alignment>
 80115e0:	f1c4 0404 	rsb	r4, r4, #4
 80115e4:	4420      	add	r0, r4
 80115e6:	4428      	add	r0, r5
 80115e8:	bd38      	pop	{r3, r4, r5, pc}
 80115ea:	bf00      	nop

080115ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80115ec:	4800      	ldr	r0, [pc, #0]	; (80115f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80115ee:	4770      	bx	lr
 80115f0:	20000854 	.word	0x20000854

080115f4 <ucdr_serialize_bool>:
 80115f4:	b538      	push	{r3, r4, r5, lr}
 80115f6:	460d      	mov	r5, r1
 80115f8:	2101      	movs	r1, #1
 80115fa:	4604      	mov	r4, r0
 80115fc:	f001 fd10 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011600:	b148      	cbz	r0, 8011616 <ucdr_serialize_bool+0x22>
 8011602:	68a3      	ldr	r3, [r4, #8]
 8011604:	701d      	strb	r5, [r3, #0]
 8011606:	68a2      	ldr	r2, [r4, #8]
 8011608:	6923      	ldr	r3, [r4, #16]
 801160a:	2101      	movs	r1, #1
 801160c:	440a      	add	r2, r1
 801160e:	440b      	add	r3, r1
 8011610:	60a2      	str	r2, [r4, #8]
 8011612:	6123      	str	r3, [r4, #16]
 8011614:	7561      	strb	r1, [r4, #21]
 8011616:	7da0      	ldrb	r0, [r4, #22]
 8011618:	f080 0001 	eor.w	r0, r0, #1
 801161c:	bd38      	pop	{r3, r4, r5, pc}
 801161e:	bf00      	nop

08011620 <ucdr_deserialize_bool>:
 8011620:	b538      	push	{r3, r4, r5, lr}
 8011622:	460d      	mov	r5, r1
 8011624:	2101      	movs	r1, #1
 8011626:	4604      	mov	r4, r0
 8011628:	f001 fcfa 	bl	8013020 <ucdr_check_final_buffer_behavior>
 801162c:	b160      	cbz	r0, 8011648 <ucdr_deserialize_bool+0x28>
 801162e:	68a2      	ldr	r2, [r4, #8]
 8011630:	6923      	ldr	r3, [r4, #16]
 8011632:	f812 1b01 	ldrb.w	r1, [r2], #1
 8011636:	3900      	subs	r1, #0
 8011638:	bf18      	it	ne
 801163a:	2101      	movne	r1, #1
 801163c:	7029      	strb	r1, [r5, #0]
 801163e:	3301      	adds	r3, #1
 8011640:	2101      	movs	r1, #1
 8011642:	60a2      	str	r2, [r4, #8]
 8011644:	6123      	str	r3, [r4, #16]
 8011646:	7561      	strb	r1, [r4, #21]
 8011648:	7da0      	ldrb	r0, [r4, #22]
 801164a:	f080 0001 	eor.w	r0, r0, #1
 801164e:	bd38      	pop	{r3, r4, r5, pc}

08011650 <ucdr_serialize_uint8_t>:
 8011650:	b538      	push	{r3, r4, r5, lr}
 8011652:	460d      	mov	r5, r1
 8011654:	2101      	movs	r1, #1
 8011656:	4604      	mov	r4, r0
 8011658:	f001 fce2 	bl	8013020 <ucdr_check_final_buffer_behavior>
 801165c:	b148      	cbz	r0, 8011672 <ucdr_serialize_uint8_t+0x22>
 801165e:	68a3      	ldr	r3, [r4, #8]
 8011660:	701d      	strb	r5, [r3, #0]
 8011662:	68a2      	ldr	r2, [r4, #8]
 8011664:	6923      	ldr	r3, [r4, #16]
 8011666:	2101      	movs	r1, #1
 8011668:	440a      	add	r2, r1
 801166a:	440b      	add	r3, r1
 801166c:	60a2      	str	r2, [r4, #8]
 801166e:	6123      	str	r3, [r4, #16]
 8011670:	7561      	strb	r1, [r4, #21]
 8011672:	7da0      	ldrb	r0, [r4, #22]
 8011674:	f080 0001 	eor.w	r0, r0, #1
 8011678:	bd38      	pop	{r3, r4, r5, pc}
 801167a:	bf00      	nop

0801167c <ucdr_deserialize_uint8_t>:
 801167c:	b538      	push	{r3, r4, r5, lr}
 801167e:	460d      	mov	r5, r1
 8011680:	2101      	movs	r1, #1
 8011682:	4604      	mov	r4, r0
 8011684:	f001 fccc 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011688:	b150      	cbz	r0, 80116a0 <ucdr_deserialize_uint8_t+0x24>
 801168a:	68a3      	ldr	r3, [r4, #8]
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	702b      	strb	r3, [r5, #0]
 8011690:	68a2      	ldr	r2, [r4, #8]
 8011692:	6923      	ldr	r3, [r4, #16]
 8011694:	2101      	movs	r1, #1
 8011696:	440a      	add	r2, r1
 8011698:	440b      	add	r3, r1
 801169a:	60a2      	str	r2, [r4, #8]
 801169c:	6123      	str	r3, [r4, #16]
 801169e:	7561      	strb	r1, [r4, #21]
 80116a0:	7da0      	ldrb	r0, [r4, #22]
 80116a2:	f080 0001 	eor.w	r0, r0, #1
 80116a6:	bd38      	pop	{r3, r4, r5, pc}

080116a8 <ucdr_serialize_uint16_t>:
 80116a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116ac:	b082      	sub	sp, #8
 80116ae:	460b      	mov	r3, r1
 80116b0:	2102      	movs	r1, #2
 80116b2:	4604      	mov	r4, r0
 80116b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80116b8:	f001 fd06 	bl	80130c8 <ucdr_buffer_alignment>
 80116bc:	4601      	mov	r1, r0
 80116be:	4620      	mov	r0, r4
 80116c0:	7d67      	ldrb	r7, [r4, #21]
 80116c2:	f001 fd45 	bl	8013150 <ucdr_advance_buffer>
 80116c6:	2102      	movs	r1, #2
 80116c8:	4620      	mov	r0, r4
 80116ca:	f001 fc9d 	bl	8013008 <ucdr_check_buffer_available_for>
 80116ce:	bb78      	cbnz	r0, 8011730 <ucdr_serialize_uint16_t+0x88>
 80116d0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80116d4:	42ab      	cmp	r3, r5
 80116d6:	d926      	bls.n	8011726 <ucdr_serialize_uint16_t+0x7e>
 80116d8:	1b5e      	subs	r6, r3, r5
 80116da:	60a3      	str	r3, [r4, #8]
 80116dc:	6923      	ldr	r3, [r4, #16]
 80116de:	f1c6 0802 	rsb	r8, r6, #2
 80116e2:	4433      	add	r3, r6
 80116e4:	6123      	str	r3, [r4, #16]
 80116e6:	4641      	mov	r1, r8
 80116e8:	4620      	mov	r0, r4
 80116ea:	f001 fc99 	bl	8013020 <ucdr_check_final_buffer_behavior>
 80116ee:	2800      	cmp	r0, #0
 80116f0:	d03b      	beq.n	801176a <ucdr_serialize_uint16_t+0xc2>
 80116f2:	7d23      	ldrb	r3, [r4, #20]
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	d04a      	beq.n	801178e <ucdr_serialize_uint16_t+0xe6>
 80116f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80116fc:	702b      	strb	r3, [r5, #0]
 80116fe:	2e00      	cmp	r6, #0
 8011700:	d040      	beq.n	8011784 <ucdr_serialize_uint16_t+0xdc>
 8011702:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011706:	706b      	strb	r3, [r5, #1]
 8011708:	6923      	ldr	r3, [r4, #16]
 801170a:	68a2      	ldr	r2, [r4, #8]
 801170c:	7da0      	ldrb	r0, [r4, #22]
 801170e:	3302      	adds	r3, #2
 8011710:	1b9e      	subs	r6, r3, r6
 8011712:	4442      	add	r2, r8
 8011714:	2302      	movs	r3, #2
 8011716:	f080 0001 	eor.w	r0, r0, #1
 801171a:	60a2      	str	r2, [r4, #8]
 801171c:	6126      	str	r6, [r4, #16]
 801171e:	7563      	strb	r3, [r4, #21]
 8011720:	b002      	add	sp, #8
 8011722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011726:	2102      	movs	r1, #2
 8011728:	4620      	mov	r0, r4
 801172a:	f001 fc79 	bl	8013020 <ucdr_check_final_buffer_behavior>
 801172e:	b190      	cbz	r0, 8011756 <ucdr_serialize_uint16_t+0xae>
 8011730:	7d23      	ldrb	r3, [r4, #20]
 8011732:	2b01      	cmp	r3, #1
 8011734:	68a3      	ldr	r3, [r4, #8]
 8011736:	d014      	beq.n	8011762 <ucdr_serialize_uint16_t+0xba>
 8011738:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801173c:	701a      	strb	r2, [r3, #0]
 801173e:	68a3      	ldr	r3, [r4, #8]
 8011740:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011744:	705a      	strb	r2, [r3, #1]
 8011746:	68a2      	ldr	r2, [r4, #8]
 8011748:	6923      	ldr	r3, [r4, #16]
 801174a:	3202      	adds	r2, #2
 801174c:	3302      	adds	r3, #2
 801174e:	2102      	movs	r1, #2
 8011750:	60a2      	str	r2, [r4, #8]
 8011752:	6123      	str	r3, [r4, #16]
 8011754:	7561      	strb	r1, [r4, #21]
 8011756:	7da0      	ldrb	r0, [r4, #22]
 8011758:	f080 0001 	eor.w	r0, r0, #1
 801175c:	b002      	add	sp, #8
 801175e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011762:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011766:	801a      	strh	r2, [r3, #0]
 8011768:	e7ed      	b.n	8011746 <ucdr_serialize_uint16_t+0x9e>
 801176a:	68a2      	ldr	r2, [r4, #8]
 801176c:	6923      	ldr	r3, [r4, #16]
 801176e:	7da0      	ldrb	r0, [r4, #22]
 8011770:	7567      	strb	r7, [r4, #21]
 8011772:	1b92      	subs	r2, r2, r6
 8011774:	1b9b      	subs	r3, r3, r6
 8011776:	f080 0001 	eor.w	r0, r0, #1
 801177a:	60a2      	str	r2, [r4, #8]
 801177c:	6123      	str	r3, [r4, #16]
 801177e:	b002      	add	sp, #8
 8011780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011784:	68a3      	ldr	r3, [r4, #8]
 8011786:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801178a:	701a      	strb	r2, [r3, #0]
 801178c:	e7bc      	b.n	8011708 <ucdr_serialize_uint16_t+0x60>
 801178e:	4628      	mov	r0, r5
 8011790:	f10d 0506 	add.w	r5, sp, #6
 8011794:	4629      	mov	r1, r5
 8011796:	4632      	mov	r2, r6
 8011798:	f009 f810 	bl	801a7bc <memcpy>
 801179c:	68a0      	ldr	r0, [r4, #8]
 801179e:	4642      	mov	r2, r8
 80117a0:	19a9      	adds	r1, r5, r6
 80117a2:	f009 f80b 	bl	801a7bc <memcpy>
 80117a6:	e7af      	b.n	8011708 <ucdr_serialize_uint16_t+0x60>

080117a8 <ucdr_serialize_endian_uint16_t>:
 80117a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117ac:	b083      	sub	sp, #12
 80117ae:	460d      	mov	r5, r1
 80117b0:	2102      	movs	r1, #2
 80117b2:	4604      	mov	r4, r0
 80117b4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80117b8:	f001 fc86 	bl	80130c8 <ucdr_buffer_alignment>
 80117bc:	4601      	mov	r1, r0
 80117be:	4620      	mov	r0, r4
 80117c0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80117c4:	f001 fcc4 	bl	8013150 <ucdr_advance_buffer>
 80117c8:	2102      	movs	r1, #2
 80117ca:	4620      	mov	r0, r4
 80117cc:	f001 fc1c 	bl	8013008 <ucdr_check_buffer_available_for>
 80117d0:	bb70      	cbnz	r0, 8011830 <ucdr_serialize_endian_uint16_t+0x88>
 80117d2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80117d6:	42be      	cmp	r6, r7
 80117d8:	d925      	bls.n	8011826 <ucdr_serialize_endian_uint16_t+0x7e>
 80117da:	6923      	ldr	r3, [r4, #16]
 80117dc:	60a6      	str	r6, [r4, #8]
 80117de:	1bf6      	subs	r6, r6, r7
 80117e0:	4433      	add	r3, r6
 80117e2:	f1c6 0902 	rsb	r9, r6, #2
 80117e6:	6123      	str	r3, [r4, #16]
 80117e8:	4649      	mov	r1, r9
 80117ea:	4620      	mov	r0, r4
 80117ec:	f001 fc18 	bl	8013020 <ucdr_check_final_buffer_behavior>
 80117f0:	2800      	cmp	r0, #0
 80117f2:	d039      	beq.n	8011868 <ucdr_serialize_endian_uint16_t+0xc0>
 80117f4:	2d01      	cmp	r5, #1
 80117f6:	d04a      	beq.n	801188e <ucdr_serialize_endian_uint16_t+0xe6>
 80117f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80117fc:	703b      	strb	r3, [r7, #0]
 80117fe:	2e00      	cmp	r6, #0
 8011800:	d040      	beq.n	8011884 <ucdr_serialize_endian_uint16_t+0xdc>
 8011802:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011806:	707b      	strb	r3, [r7, #1]
 8011808:	6923      	ldr	r3, [r4, #16]
 801180a:	68a2      	ldr	r2, [r4, #8]
 801180c:	7da0      	ldrb	r0, [r4, #22]
 801180e:	3302      	adds	r3, #2
 8011810:	444a      	add	r2, r9
 8011812:	1b9b      	subs	r3, r3, r6
 8011814:	2102      	movs	r1, #2
 8011816:	f080 0001 	eor.w	r0, r0, #1
 801181a:	60a2      	str	r2, [r4, #8]
 801181c:	6123      	str	r3, [r4, #16]
 801181e:	7561      	strb	r1, [r4, #21]
 8011820:	b003      	add	sp, #12
 8011822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011826:	2102      	movs	r1, #2
 8011828:	4620      	mov	r0, r4
 801182a:	f001 fbf9 	bl	8013020 <ucdr_check_final_buffer_behavior>
 801182e:	b188      	cbz	r0, 8011854 <ucdr_serialize_endian_uint16_t+0xac>
 8011830:	2d01      	cmp	r5, #1
 8011832:	68a3      	ldr	r3, [r4, #8]
 8011834:	d014      	beq.n	8011860 <ucdr_serialize_endian_uint16_t+0xb8>
 8011836:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801183a:	701a      	strb	r2, [r3, #0]
 801183c:	68a3      	ldr	r3, [r4, #8]
 801183e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011842:	705a      	strb	r2, [r3, #1]
 8011844:	68a2      	ldr	r2, [r4, #8]
 8011846:	6923      	ldr	r3, [r4, #16]
 8011848:	3202      	adds	r2, #2
 801184a:	3302      	adds	r3, #2
 801184c:	2102      	movs	r1, #2
 801184e:	60a2      	str	r2, [r4, #8]
 8011850:	6123      	str	r3, [r4, #16]
 8011852:	7561      	strb	r1, [r4, #21]
 8011854:	7da0      	ldrb	r0, [r4, #22]
 8011856:	f080 0001 	eor.w	r0, r0, #1
 801185a:	b003      	add	sp, #12
 801185c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011860:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011864:	801a      	strh	r2, [r3, #0]
 8011866:	e7ed      	b.n	8011844 <ucdr_serialize_endian_uint16_t+0x9c>
 8011868:	68a2      	ldr	r2, [r4, #8]
 801186a:	6923      	ldr	r3, [r4, #16]
 801186c:	7da0      	ldrb	r0, [r4, #22]
 801186e:	f884 8015 	strb.w	r8, [r4, #21]
 8011872:	1b92      	subs	r2, r2, r6
 8011874:	1b9b      	subs	r3, r3, r6
 8011876:	f080 0001 	eor.w	r0, r0, #1
 801187a:	60a2      	str	r2, [r4, #8]
 801187c:	6123      	str	r3, [r4, #16]
 801187e:	b003      	add	sp, #12
 8011880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011884:	68a3      	ldr	r3, [r4, #8]
 8011886:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801188a:	701a      	strb	r2, [r3, #0]
 801188c:	e7bc      	b.n	8011808 <ucdr_serialize_endian_uint16_t+0x60>
 801188e:	f10d 0506 	add.w	r5, sp, #6
 8011892:	4629      	mov	r1, r5
 8011894:	4632      	mov	r2, r6
 8011896:	4638      	mov	r0, r7
 8011898:	f008 ff90 	bl	801a7bc <memcpy>
 801189c:	68a0      	ldr	r0, [r4, #8]
 801189e:	464a      	mov	r2, r9
 80118a0:	19a9      	adds	r1, r5, r6
 80118a2:	f008 ff8b 	bl	801a7bc <memcpy>
 80118a6:	e7af      	b.n	8011808 <ucdr_serialize_endian_uint16_t+0x60>

080118a8 <ucdr_deserialize_uint16_t>:
 80118a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118ac:	460d      	mov	r5, r1
 80118ae:	2102      	movs	r1, #2
 80118b0:	4604      	mov	r4, r0
 80118b2:	f001 fc09 	bl	80130c8 <ucdr_buffer_alignment>
 80118b6:	4601      	mov	r1, r0
 80118b8:	4620      	mov	r0, r4
 80118ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 80118be:	f001 fc47 	bl	8013150 <ucdr_advance_buffer>
 80118c2:	2102      	movs	r1, #2
 80118c4:	4620      	mov	r0, r4
 80118c6:	f001 fb9f 	bl	8013008 <ucdr_check_buffer_available_for>
 80118ca:	bb60      	cbnz	r0, 8011926 <ucdr_deserialize_uint16_t+0x7e>
 80118cc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80118d0:	42be      	cmp	r6, r7
 80118d2:	d923      	bls.n	801191c <ucdr_deserialize_uint16_t+0x74>
 80118d4:	6923      	ldr	r3, [r4, #16]
 80118d6:	60a6      	str	r6, [r4, #8]
 80118d8:	1bf6      	subs	r6, r6, r7
 80118da:	4433      	add	r3, r6
 80118dc:	f1c6 0902 	rsb	r9, r6, #2
 80118e0:	6123      	str	r3, [r4, #16]
 80118e2:	4649      	mov	r1, r9
 80118e4:	4620      	mov	r0, r4
 80118e6:	f001 fb9b 	bl	8013020 <ucdr_check_final_buffer_behavior>
 80118ea:	2800      	cmp	r0, #0
 80118ec:	d034      	beq.n	8011958 <ucdr_deserialize_uint16_t+0xb0>
 80118ee:	7d23      	ldrb	r3, [r4, #20]
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	d042      	beq.n	801197a <ucdr_deserialize_uint16_t+0xd2>
 80118f4:	787b      	ldrb	r3, [r7, #1]
 80118f6:	702b      	strb	r3, [r5, #0]
 80118f8:	2e00      	cmp	r6, #0
 80118fa:	d03a      	beq.n	8011972 <ucdr_deserialize_uint16_t+0xca>
 80118fc:	783b      	ldrb	r3, [r7, #0]
 80118fe:	706b      	strb	r3, [r5, #1]
 8011900:	6923      	ldr	r3, [r4, #16]
 8011902:	68a2      	ldr	r2, [r4, #8]
 8011904:	7da0      	ldrb	r0, [r4, #22]
 8011906:	2102      	movs	r1, #2
 8011908:	3302      	adds	r3, #2
 801190a:	444a      	add	r2, r9
 801190c:	1b9b      	subs	r3, r3, r6
 801190e:	7561      	strb	r1, [r4, #21]
 8011910:	60a2      	str	r2, [r4, #8]
 8011912:	6123      	str	r3, [r4, #16]
 8011914:	f080 0001 	eor.w	r0, r0, #1
 8011918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801191c:	2102      	movs	r1, #2
 801191e:	4620      	mov	r0, r4
 8011920:	f001 fb7e 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011924:	b180      	cbz	r0, 8011948 <ucdr_deserialize_uint16_t+0xa0>
 8011926:	7d23      	ldrb	r3, [r4, #20]
 8011928:	2b01      	cmp	r3, #1
 801192a:	68a3      	ldr	r3, [r4, #8]
 801192c:	d011      	beq.n	8011952 <ucdr_deserialize_uint16_t+0xaa>
 801192e:	785b      	ldrb	r3, [r3, #1]
 8011930:	702b      	strb	r3, [r5, #0]
 8011932:	68a3      	ldr	r3, [r4, #8]
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	706b      	strb	r3, [r5, #1]
 8011938:	68a2      	ldr	r2, [r4, #8]
 801193a:	6923      	ldr	r3, [r4, #16]
 801193c:	3202      	adds	r2, #2
 801193e:	3302      	adds	r3, #2
 8011940:	2102      	movs	r1, #2
 8011942:	60a2      	str	r2, [r4, #8]
 8011944:	6123      	str	r3, [r4, #16]
 8011946:	7561      	strb	r1, [r4, #21]
 8011948:	7da0      	ldrb	r0, [r4, #22]
 801194a:	f080 0001 	eor.w	r0, r0, #1
 801194e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011952:	881b      	ldrh	r3, [r3, #0]
 8011954:	802b      	strh	r3, [r5, #0]
 8011956:	e7ef      	b.n	8011938 <ucdr_deserialize_uint16_t+0x90>
 8011958:	68a2      	ldr	r2, [r4, #8]
 801195a:	6923      	ldr	r3, [r4, #16]
 801195c:	7da0      	ldrb	r0, [r4, #22]
 801195e:	f884 8015 	strb.w	r8, [r4, #21]
 8011962:	1b92      	subs	r2, r2, r6
 8011964:	1b9b      	subs	r3, r3, r6
 8011966:	60a2      	str	r2, [r4, #8]
 8011968:	6123      	str	r3, [r4, #16]
 801196a:	f080 0001 	eor.w	r0, r0, #1
 801196e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011972:	68a3      	ldr	r3, [r4, #8]
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	706b      	strb	r3, [r5, #1]
 8011978:	e7c2      	b.n	8011900 <ucdr_deserialize_uint16_t+0x58>
 801197a:	4639      	mov	r1, r7
 801197c:	4632      	mov	r2, r6
 801197e:	4628      	mov	r0, r5
 8011980:	f008 ff1c 	bl	801a7bc <memcpy>
 8011984:	68a1      	ldr	r1, [r4, #8]
 8011986:	464a      	mov	r2, r9
 8011988:	19a8      	adds	r0, r5, r6
 801198a:	f008 ff17 	bl	801a7bc <memcpy>
 801198e:	e7b7      	b.n	8011900 <ucdr_deserialize_uint16_t+0x58>

08011990 <ucdr_deserialize_endian_uint16_t>:
 8011990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011994:	460e      	mov	r6, r1
 8011996:	2102      	movs	r1, #2
 8011998:	4604      	mov	r4, r0
 801199a:	4615      	mov	r5, r2
 801199c:	f001 fb94 	bl	80130c8 <ucdr_buffer_alignment>
 80119a0:	4601      	mov	r1, r0
 80119a2:	4620      	mov	r0, r4
 80119a4:	f894 9015 	ldrb.w	r9, [r4, #21]
 80119a8:	f001 fbd2 	bl	8013150 <ucdr_advance_buffer>
 80119ac:	2102      	movs	r1, #2
 80119ae:	4620      	mov	r0, r4
 80119b0:	f001 fb2a 	bl	8013008 <ucdr_check_buffer_available_for>
 80119b4:	bb70      	cbnz	r0, 8011a14 <ucdr_deserialize_endian_uint16_t+0x84>
 80119b6:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 80119ba:	4547      	cmp	r7, r8
 80119bc:	d925      	bls.n	8011a0a <ucdr_deserialize_endian_uint16_t+0x7a>
 80119be:	6923      	ldr	r3, [r4, #16]
 80119c0:	60a7      	str	r7, [r4, #8]
 80119c2:	eba7 0708 	sub.w	r7, r7, r8
 80119c6:	443b      	add	r3, r7
 80119c8:	f1c7 0a02 	rsb	sl, r7, #2
 80119cc:	6123      	str	r3, [r4, #16]
 80119ce:	4651      	mov	r1, sl
 80119d0:	4620      	mov	r0, r4
 80119d2:	f001 fb25 	bl	8013020 <ucdr_check_final_buffer_behavior>
 80119d6:	2800      	cmp	r0, #0
 80119d8:	d034      	beq.n	8011a44 <ucdr_deserialize_endian_uint16_t+0xb4>
 80119da:	2e01      	cmp	r6, #1
 80119dc:	d043      	beq.n	8011a66 <ucdr_deserialize_endian_uint16_t+0xd6>
 80119de:	f898 3001 	ldrb.w	r3, [r8, #1]
 80119e2:	702b      	strb	r3, [r5, #0]
 80119e4:	2f00      	cmp	r7, #0
 80119e6:	d03a      	beq.n	8011a5e <ucdr_deserialize_endian_uint16_t+0xce>
 80119e8:	f898 3000 	ldrb.w	r3, [r8]
 80119ec:	706b      	strb	r3, [r5, #1]
 80119ee:	6923      	ldr	r3, [r4, #16]
 80119f0:	68a2      	ldr	r2, [r4, #8]
 80119f2:	7da0      	ldrb	r0, [r4, #22]
 80119f4:	2102      	movs	r1, #2
 80119f6:	3302      	adds	r3, #2
 80119f8:	4452      	add	r2, sl
 80119fa:	1bdb      	subs	r3, r3, r7
 80119fc:	7561      	strb	r1, [r4, #21]
 80119fe:	60a2      	str	r2, [r4, #8]
 8011a00:	6123      	str	r3, [r4, #16]
 8011a02:	f080 0001 	eor.w	r0, r0, #1
 8011a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a0a:	2102      	movs	r1, #2
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f001 fb07 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011a12:	b178      	cbz	r0, 8011a34 <ucdr_deserialize_endian_uint16_t+0xa4>
 8011a14:	2e01      	cmp	r6, #1
 8011a16:	68a3      	ldr	r3, [r4, #8]
 8011a18:	d011      	beq.n	8011a3e <ucdr_deserialize_endian_uint16_t+0xae>
 8011a1a:	785b      	ldrb	r3, [r3, #1]
 8011a1c:	702b      	strb	r3, [r5, #0]
 8011a1e:	68a3      	ldr	r3, [r4, #8]
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	706b      	strb	r3, [r5, #1]
 8011a24:	68a2      	ldr	r2, [r4, #8]
 8011a26:	6923      	ldr	r3, [r4, #16]
 8011a28:	3202      	adds	r2, #2
 8011a2a:	3302      	adds	r3, #2
 8011a2c:	2102      	movs	r1, #2
 8011a2e:	60a2      	str	r2, [r4, #8]
 8011a30:	6123      	str	r3, [r4, #16]
 8011a32:	7561      	strb	r1, [r4, #21]
 8011a34:	7da0      	ldrb	r0, [r4, #22]
 8011a36:	f080 0001 	eor.w	r0, r0, #1
 8011a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a3e:	881b      	ldrh	r3, [r3, #0]
 8011a40:	802b      	strh	r3, [r5, #0]
 8011a42:	e7ef      	b.n	8011a24 <ucdr_deserialize_endian_uint16_t+0x94>
 8011a44:	68a2      	ldr	r2, [r4, #8]
 8011a46:	6923      	ldr	r3, [r4, #16]
 8011a48:	7da0      	ldrb	r0, [r4, #22]
 8011a4a:	f884 9015 	strb.w	r9, [r4, #21]
 8011a4e:	1bd2      	subs	r2, r2, r7
 8011a50:	1bdb      	subs	r3, r3, r7
 8011a52:	60a2      	str	r2, [r4, #8]
 8011a54:	6123      	str	r3, [r4, #16]
 8011a56:	f080 0001 	eor.w	r0, r0, #1
 8011a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a5e:	68a3      	ldr	r3, [r4, #8]
 8011a60:	781b      	ldrb	r3, [r3, #0]
 8011a62:	706b      	strb	r3, [r5, #1]
 8011a64:	e7c3      	b.n	80119ee <ucdr_deserialize_endian_uint16_t+0x5e>
 8011a66:	4641      	mov	r1, r8
 8011a68:	463a      	mov	r2, r7
 8011a6a:	4628      	mov	r0, r5
 8011a6c:	f008 fea6 	bl	801a7bc <memcpy>
 8011a70:	68a1      	ldr	r1, [r4, #8]
 8011a72:	4652      	mov	r2, sl
 8011a74:	19e8      	adds	r0, r5, r7
 8011a76:	f008 fea1 	bl	801a7bc <memcpy>
 8011a7a:	e7b8      	b.n	80119ee <ucdr_deserialize_endian_uint16_t+0x5e>

08011a7c <ucdr_serialize_uint32_t>:
 8011a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a80:	b082      	sub	sp, #8
 8011a82:	4604      	mov	r4, r0
 8011a84:	9101      	str	r1, [sp, #4]
 8011a86:	2104      	movs	r1, #4
 8011a88:	f001 fb1e 	bl	80130c8 <ucdr_buffer_alignment>
 8011a8c:	4601      	mov	r1, r0
 8011a8e:	4620      	mov	r0, r4
 8011a90:	7d67      	ldrb	r7, [r4, #21]
 8011a92:	f001 fb5d 	bl	8013150 <ucdr_advance_buffer>
 8011a96:	2104      	movs	r1, #4
 8011a98:	4620      	mov	r0, r4
 8011a9a:	f001 fab5 	bl	8013008 <ucdr_check_buffer_available_for>
 8011a9e:	2800      	cmp	r0, #0
 8011aa0:	d139      	bne.n	8011b16 <ucdr_serialize_uint32_t+0x9a>
 8011aa2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011aa6:	42ab      	cmp	r3, r5
 8011aa8:	d930      	bls.n	8011b0c <ucdr_serialize_uint32_t+0x90>
 8011aaa:	1b5e      	subs	r6, r3, r5
 8011aac:	60a3      	str	r3, [r4, #8]
 8011aae:	6923      	ldr	r3, [r4, #16]
 8011ab0:	f1c6 0804 	rsb	r8, r6, #4
 8011ab4:	4433      	add	r3, r6
 8011ab6:	6123      	str	r3, [r4, #16]
 8011ab8:	4641      	mov	r1, r8
 8011aba:	4620      	mov	r0, r4
 8011abc:	f001 fab0 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011ac0:	2800      	cmp	r0, #0
 8011ac2:	d04c      	beq.n	8011b5e <ucdr_serialize_uint32_t+0xe2>
 8011ac4:	7d23      	ldrb	r3, [r4, #20]
 8011ac6:	2b01      	cmp	r3, #1
 8011ac8:	d063      	beq.n	8011b92 <ucdr_serialize_uint32_t+0x116>
 8011aca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011ace:	702b      	strb	r3, [r5, #0]
 8011ad0:	2e00      	cmp	r6, #0
 8011ad2:	d051      	beq.n	8011b78 <ucdr_serialize_uint32_t+0xfc>
 8011ad4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011ad8:	706b      	strb	r3, [r5, #1]
 8011ada:	2e01      	cmp	r6, #1
 8011adc:	d050      	beq.n	8011b80 <ucdr_serialize_uint32_t+0x104>
 8011ade:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011ae2:	70ab      	strb	r3, [r5, #2]
 8011ae4:	2e02      	cmp	r6, #2
 8011ae6:	d04f      	beq.n	8011b88 <ucdr_serialize_uint32_t+0x10c>
 8011ae8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011aec:	70eb      	strb	r3, [r5, #3]
 8011aee:	6923      	ldr	r3, [r4, #16]
 8011af0:	68a2      	ldr	r2, [r4, #8]
 8011af2:	7da0      	ldrb	r0, [r4, #22]
 8011af4:	3304      	adds	r3, #4
 8011af6:	1b9e      	subs	r6, r3, r6
 8011af8:	4442      	add	r2, r8
 8011afa:	2304      	movs	r3, #4
 8011afc:	f080 0001 	eor.w	r0, r0, #1
 8011b00:	60a2      	str	r2, [r4, #8]
 8011b02:	6126      	str	r6, [r4, #16]
 8011b04:	7563      	strb	r3, [r4, #21]
 8011b06:	b002      	add	sp, #8
 8011b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b0c:	2104      	movs	r1, #4
 8011b0e:	4620      	mov	r0, r4
 8011b10:	f001 fa86 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011b14:	b1d0      	cbz	r0, 8011b4c <ucdr_serialize_uint32_t+0xd0>
 8011b16:	7d23      	ldrb	r3, [r4, #20]
 8011b18:	2b01      	cmp	r3, #1
 8011b1a:	68a3      	ldr	r3, [r4, #8]
 8011b1c:	d01c      	beq.n	8011b58 <ucdr_serialize_uint32_t+0xdc>
 8011b1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011b22:	701a      	strb	r2, [r3, #0]
 8011b24:	68a3      	ldr	r3, [r4, #8]
 8011b26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b2a:	705a      	strb	r2, [r3, #1]
 8011b2c:	68a3      	ldr	r3, [r4, #8]
 8011b2e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011b32:	709a      	strb	r2, [r3, #2]
 8011b34:	68a3      	ldr	r3, [r4, #8]
 8011b36:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011b3a:	70da      	strb	r2, [r3, #3]
 8011b3c:	68a2      	ldr	r2, [r4, #8]
 8011b3e:	6923      	ldr	r3, [r4, #16]
 8011b40:	3204      	adds	r2, #4
 8011b42:	3304      	adds	r3, #4
 8011b44:	2104      	movs	r1, #4
 8011b46:	60a2      	str	r2, [r4, #8]
 8011b48:	6123      	str	r3, [r4, #16]
 8011b4a:	7561      	strb	r1, [r4, #21]
 8011b4c:	7da0      	ldrb	r0, [r4, #22]
 8011b4e:	f080 0001 	eor.w	r0, r0, #1
 8011b52:	b002      	add	sp, #8
 8011b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b58:	9a01      	ldr	r2, [sp, #4]
 8011b5a:	601a      	str	r2, [r3, #0]
 8011b5c:	e7ee      	b.n	8011b3c <ucdr_serialize_uint32_t+0xc0>
 8011b5e:	68a2      	ldr	r2, [r4, #8]
 8011b60:	6923      	ldr	r3, [r4, #16]
 8011b62:	7da0      	ldrb	r0, [r4, #22]
 8011b64:	7567      	strb	r7, [r4, #21]
 8011b66:	1b92      	subs	r2, r2, r6
 8011b68:	1b9b      	subs	r3, r3, r6
 8011b6a:	f080 0001 	eor.w	r0, r0, #1
 8011b6e:	60a2      	str	r2, [r4, #8]
 8011b70:	6123      	str	r3, [r4, #16]
 8011b72:	b002      	add	sp, #8
 8011b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b78:	68a3      	ldr	r3, [r4, #8]
 8011b7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b7e:	701a      	strb	r2, [r3, #0]
 8011b80:	68a3      	ldr	r3, [r4, #8]
 8011b82:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011b86:	701a      	strb	r2, [r3, #0]
 8011b88:	68a3      	ldr	r3, [r4, #8]
 8011b8a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011b8e:	701a      	strb	r2, [r3, #0]
 8011b90:	e7ad      	b.n	8011aee <ucdr_serialize_uint32_t+0x72>
 8011b92:	4628      	mov	r0, r5
 8011b94:	ad01      	add	r5, sp, #4
 8011b96:	4629      	mov	r1, r5
 8011b98:	4632      	mov	r2, r6
 8011b9a:	f008 fe0f 	bl	801a7bc <memcpy>
 8011b9e:	68a0      	ldr	r0, [r4, #8]
 8011ba0:	4642      	mov	r2, r8
 8011ba2:	19a9      	adds	r1, r5, r6
 8011ba4:	f008 fe0a 	bl	801a7bc <memcpy>
 8011ba8:	e7a1      	b.n	8011aee <ucdr_serialize_uint32_t+0x72>
 8011baa:	bf00      	nop

08011bac <ucdr_serialize_endian_uint32_t>:
 8011bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bb0:	b083      	sub	sp, #12
 8011bb2:	460d      	mov	r5, r1
 8011bb4:	2104      	movs	r1, #4
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	9201      	str	r2, [sp, #4]
 8011bba:	f001 fa85 	bl	80130c8 <ucdr_buffer_alignment>
 8011bbe:	4601      	mov	r1, r0
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011bc6:	f001 fac3 	bl	8013150 <ucdr_advance_buffer>
 8011bca:	2104      	movs	r1, #4
 8011bcc:	4620      	mov	r0, r4
 8011bce:	f001 fa1b 	bl	8013008 <ucdr_check_buffer_available_for>
 8011bd2:	2800      	cmp	r0, #0
 8011bd4:	d138      	bne.n	8011c48 <ucdr_serialize_endian_uint32_t+0x9c>
 8011bd6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011bda:	42b7      	cmp	r7, r6
 8011bdc:	d92f      	bls.n	8011c3e <ucdr_serialize_endian_uint32_t+0x92>
 8011bde:	6923      	ldr	r3, [r4, #16]
 8011be0:	60a7      	str	r7, [r4, #8]
 8011be2:	1bbf      	subs	r7, r7, r6
 8011be4:	443b      	add	r3, r7
 8011be6:	f1c7 0904 	rsb	r9, r7, #4
 8011bea:	6123      	str	r3, [r4, #16]
 8011bec:	4649      	mov	r1, r9
 8011bee:	4620      	mov	r0, r4
 8011bf0:	f001 fa16 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011bf4:	2800      	cmp	r0, #0
 8011bf6:	d04a      	beq.n	8011c8e <ucdr_serialize_endian_uint32_t+0xe2>
 8011bf8:	2d01      	cmp	r5, #1
 8011bfa:	d063      	beq.n	8011cc4 <ucdr_serialize_endian_uint32_t+0x118>
 8011bfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011c00:	7033      	strb	r3, [r6, #0]
 8011c02:	2f00      	cmp	r7, #0
 8011c04:	d051      	beq.n	8011caa <ucdr_serialize_endian_uint32_t+0xfe>
 8011c06:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011c0a:	7073      	strb	r3, [r6, #1]
 8011c0c:	2f01      	cmp	r7, #1
 8011c0e:	d050      	beq.n	8011cb2 <ucdr_serialize_endian_uint32_t+0x106>
 8011c10:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011c14:	70b3      	strb	r3, [r6, #2]
 8011c16:	2f02      	cmp	r7, #2
 8011c18:	d04f      	beq.n	8011cba <ucdr_serialize_endian_uint32_t+0x10e>
 8011c1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011c1e:	70f3      	strb	r3, [r6, #3]
 8011c20:	6923      	ldr	r3, [r4, #16]
 8011c22:	68a2      	ldr	r2, [r4, #8]
 8011c24:	7da0      	ldrb	r0, [r4, #22]
 8011c26:	3304      	adds	r3, #4
 8011c28:	444a      	add	r2, r9
 8011c2a:	1bdb      	subs	r3, r3, r7
 8011c2c:	2104      	movs	r1, #4
 8011c2e:	f080 0001 	eor.w	r0, r0, #1
 8011c32:	60a2      	str	r2, [r4, #8]
 8011c34:	6123      	str	r3, [r4, #16]
 8011c36:	7561      	strb	r1, [r4, #21]
 8011c38:	b003      	add	sp, #12
 8011c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c3e:	2104      	movs	r1, #4
 8011c40:	4620      	mov	r0, r4
 8011c42:	f001 f9ed 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011c46:	b1c8      	cbz	r0, 8011c7c <ucdr_serialize_endian_uint32_t+0xd0>
 8011c48:	2d01      	cmp	r5, #1
 8011c4a:	68a3      	ldr	r3, [r4, #8]
 8011c4c:	d01c      	beq.n	8011c88 <ucdr_serialize_endian_uint32_t+0xdc>
 8011c4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011c52:	701a      	strb	r2, [r3, #0]
 8011c54:	68a3      	ldr	r3, [r4, #8]
 8011c56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011c5a:	705a      	strb	r2, [r3, #1]
 8011c5c:	68a3      	ldr	r3, [r4, #8]
 8011c5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011c62:	709a      	strb	r2, [r3, #2]
 8011c64:	68a3      	ldr	r3, [r4, #8]
 8011c66:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011c6a:	70da      	strb	r2, [r3, #3]
 8011c6c:	68a2      	ldr	r2, [r4, #8]
 8011c6e:	6923      	ldr	r3, [r4, #16]
 8011c70:	3204      	adds	r2, #4
 8011c72:	3304      	adds	r3, #4
 8011c74:	2104      	movs	r1, #4
 8011c76:	60a2      	str	r2, [r4, #8]
 8011c78:	6123      	str	r3, [r4, #16]
 8011c7a:	7561      	strb	r1, [r4, #21]
 8011c7c:	7da0      	ldrb	r0, [r4, #22]
 8011c7e:	f080 0001 	eor.w	r0, r0, #1
 8011c82:	b003      	add	sp, #12
 8011c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c88:	9a01      	ldr	r2, [sp, #4]
 8011c8a:	601a      	str	r2, [r3, #0]
 8011c8c:	e7ee      	b.n	8011c6c <ucdr_serialize_endian_uint32_t+0xc0>
 8011c8e:	68a2      	ldr	r2, [r4, #8]
 8011c90:	6923      	ldr	r3, [r4, #16]
 8011c92:	7da0      	ldrb	r0, [r4, #22]
 8011c94:	f884 8015 	strb.w	r8, [r4, #21]
 8011c98:	1bd2      	subs	r2, r2, r7
 8011c9a:	1bdb      	subs	r3, r3, r7
 8011c9c:	f080 0001 	eor.w	r0, r0, #1
 8011ca0:	60a2      	str	r2, [r4, #8]
 8011ca2:	6123      	str	r3, [r4, #16]
 8011ca4:	b003      	add	sp, #12
 8011ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011caa:	68a3      	ldr	r3, [r4, #8]
 8011cac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011cb0:	701a      	strb	r2, [r3, #0]
 8011cb2:	68a3      	ldr	r3, [r4, #8]
 8011cb4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011cb8:	701a      	strb	r2, [r3, #0]
 8011cba:	68a3      	ldr	r3, [r4, #8]
 8011cbc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011cc0:	701a      	strb	r2, [r3, #0]
 8011cc2:	e7ad      	b.n	8011c20 <ucdr_serialize_endian_uint32_t+0x74>
 8011cc4:	ad01      	add	r5, sp, #4
 8011cc6:	4629      	mov	r1, r5
 8011cc8:	463a      	mov	r2, r7
 8011cca:	4630      	mov	r0, r6
 8011ccc:	f008 fd76 	bl	801a7bc <memcpy>
 8011cd0:	68a0      	ldr	r0, [r4, #8]
 8011cd2:	464a      	mov	r2, r9
 8011cd4:	19e9      	adds	r1, r5, r7
 8011cd6:	f008 fd71 	bl	801a7bc <memcpy>
 8011cda:	e7a1      	b.n	8011c20 <ucdr_serialize_endian_uint32_t+0x74>

08011cdc <ucdr_deserialize_uint32_t>:
 8011cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ce0:	460d      	mov	r5, r1
 8011ce2:	2104      	movs	r1, #4
 8011ce4:	4604      	mov	r4, r0
 8011ce6:	f001 f9ef 	bl	80130c8 <ucdr_buffer_alignment>
 8011cea:	4601      	mov	r1, r0
 8011cec:	4620      	mov	r0, r4
 8011cee:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011cf2:	f001 fa2d 	bl	8013150 <ucdr_advance_buffer>
 8011cf6:	2104      	movs	r1, #4
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	f001 f985 	bl	8013008 <ucdr_check_buffer_available_for>
 8011cfe:	2800      	cmp	r0, #0
 8011d00:	d138      	bne.n	8011d74 <ucdr_deserialize_uint32_t+0x98>
 8011d02:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011d06:	42b7      	cmp	r7, r6
 8011d08:	d92f      	bls.n	8011d6a <ucdr_deserialize_uint32_t+0x8e>
 8011d0a:	6923      	ldr	r3, [r4, #16]
 8011d0c:	60a7      	str	r7, [r4, #8]
 8011d0e:	1bbf      	subs	r7, r7, r6
 8011d10:	443b      	add	r3, r7
 8011d12:	f1c7 0904 	rsb	r9, r7, #4
 8011d16:	6123      	str	r3, [r4, #16]
 8011d18:	4649      	mov	r1, r9
 8011d1a:	4620      	mov	r0, r4
 8011d1c:	f001 f980 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011d20:	2800      	cmp	r0, #0
 8011d22:	d046      	beq.n	8011db2 <ucdr_deserialize_uint32_t+0xd6>
 8011d24:	7d23      	ldrb	r3, [r4, #20]
 8011d26:	2b01      	cmp	r3, #1
 8011d28:	d05c      	beq.n	8011de4 <ucdr_deserialize_uint32_t+0x108>
 8011d2a:	78f3      	ldrb	r3, [r6, #3]
 8011d2c:	702b      	strb	r3, [r5, #0]
 8011d2e:	2f00      	cmp	r7, #0
 8011d30:	d04c      	beq.n	8011dcc <ucdr_deserialize_uint32_t+0xf0>
 8011d32:	78b3      	ldrb	r3, [r6, #2]
 8011d34:	706b      	strb	r3, [r5, #1]
 8011d36:	2f01      	cmp	r7, #1
 8011d38:	f105 0302 	add.w	r3, r5, #2
 8011d3c:	d04a      	beq.n	8011dd4 <ucdr_deserialize_uint32_t+0xf8>
 8011d3e:	7873      	ldrb	r3, [r6, #1]
 8011d40:	70ab      	strb	r3, [r5, #2]
 8011d42:	2f02      	cmp	r7, #2
 8011d44:	f105 0303 	add.w	r3, r5, #3
 8011d48:	d048      	beq.n	8011ddc <ucdr_deserialize_uint32_t+0x100>
 8011d4a:	7833      	ldrb	r3, [r6, #0]
 8011d4c:	70eb      	strb	r3, [r5, #3]
 8011d4e:	6923      	ldr	r3, [r4, #16]
 8011d50:	68a2      	ldr	r2, [r4, #8]
 8011d52:	7da0      	ldrb	r0, [r4, #22]
 8011d54:	2104      	movs	r1, #4
 8011d56:	3304      	adds	r3, #4
 8011d58:	444a      	add	r2, r9
 8011d5a:	1bdb      	subs	r3, r3, r7
 8011d5c:	7561      	strb	r1, [r4, #21]
 8011d5e:	60a2      	str	r2, [r4, #8]
 8011d60:	6123      	str	r3, [r4, #16]
 8011d62:	f080 0001 	eor.w	r0, r0, #1
 8011d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d6a:	2104      	movs	r1, #4
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	f001 f957 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011d72:	b1b0      	cbz	r0, 8011da2 <ucdr_deserialize_uint32_t+0xc6>
 8011d74:	7d23      	ldrb	r3, [r4, #20]
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	68a3      	ldr	r3, [r4, #8]
 8011d7a:	d017      	beq.n	8011dac <ucdr_deserialize_uint32_t+0xd0>
 8011d7c:	78db      	ldrb	r3, [r3, #3]
 8011d7e:	702b      	strb	r3, [r5, #0]
 8011d80:	68a3      	ldr	r3, [r4, #8]
 8011d82:	789b      	ldrb	r3, [r3, #2]
 8011d84:	706b      	strb	r3, [r5, #1]
 8011d86:	68a3      	ldr	r3, [r4, #8]
 8011d88:	785b      	ldrb	r3, [r3, #1]
 8011d8a:	70ab      	strb	r3, [r5, #2]
 8011d8c:	68a3      	ldr	r3, [r4, #8]
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	70eb      	strb	r3, [r5, #3]
 8011d92:	68a2      	ldr	r2, [r4, #8]
 8011d94:	6923      	ldr	r3, [r4, #16]
 8011d96:	3204      	adds	r2, #4
 8011d98:	3304      	adds	r3, #4
 8011d9a:	2104      	movs	r1, #4
 8011d9c:	60a2      	str	r2, [r4, #8]
 8011d9e:	6123      	str	r3, [r4, #16]
 8011da0:	7561      	strb	r1, [r4, #21]
 8011da2:	7da0      	ldrb	r0, [r4, #22]
 8011da4:	f080 0001 	eor.w	r0, r0, #1
 8011da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	602b      	str	r3, [r5, #0]
 8011db0:	e7ef      	b.n	8011d92 <ucdr_deserialize_uint32_t+0xb6>
 8011db2:	68a2      	ldr	r2, [r4, #8]
 8011db4:	6923      	ldr	r3, [r4, #16]
 8011db6:	7da0      	ldrb	r0, [r4, #22]
 8011db8:	f884 8015 	strb.w	r8, [r4, #21]
 8011dbc:	1bd2      	subs	r2, r2, r7
 8011dbe:	1bdb      	subs	r3, r3, r7
 8011dc0:	60a2      	str	r2, [r4, #8]
 8011dc2:	6123      	str	r3, [r4, #16]
 8011dc4:	f080 0001 	eor.w	r0, r0, #1
 8011dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dcc:	68a3      	ldr	r3, [r4, #8]
 8011dce:	789b      	ldrb	r3, [r3, #2]
 8011dd0:	706b      	strb	r3, [r5, #1]
 8011dd2:	1cab      	adds	r3, r5, #2
 8011dd4:	68a2      	ldr	r2, [r4, #8]
 8011dd6:	7852      	ldrb	r2, [r2, #1]
 8011dd8:	f803 2b01 	strb.w	r2, [r3], #1
 8011ddc:	68a2      	ldr	r2, [r4, #8]
 8011dde:	7812      	ldrb	r2, [r2, #0]
 8011de0:	701a      	strb	r2, [r3, #0]
 8011de2:	e7b4      	b.n	8011d4e <ucdr_deserialize_uint32_t+0x72>
 8011de4:	4631      	mov	r1, r6
 8011de6:	463a      	mov	r2, r7
 8011de8:	4628      	mov	r0, r5
 8011dea:	f008 fce7 	bl	801a7bc <memcpy>
 8011dee:	68a1      	ldr	r1, [r4, #8]
 8011df0:	464a      	mov	r2, r9
 8011df2:	19e8      	adds	r0, r5, r7
 8011df4:	f008 fce2 	bl	801a7bc <memcpy>
 8011df8:	e7a9      	b.n	8011d4e <ucdr_deserialize_uint32_t+0x72>
 8011dfa:	bf00      	nop

08011dfc <ucdr_deserialize_endian_uint32_t>:
 8011dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e00:	460e      	mov	r6, r1
 8011e02:	2104      	movs	r1, #4
 8011e04:	4604      	mov	r4, r0
 8011e06:	4615      	mov	r5, r2
 8011e08:	f001 f95e 	bl	80130c8 <ucdr_buffer_alignment>
 8011e0c:	4601      	mov	r1, r0
 8011e0e:	4620      	mov	r0, r4
 8011e10:	f894 9015 	ldrb.w	r9, [r4, #21]
 8011e14:	f001 f99c 	bl	8013150 <ucdr_advance_buffer>
 8011e18:	2104      	movs	r1, #4
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	f001 f8f4 	bl	8013008 <ucdr_check_buffer_available_for>
 8011e20:	2800      	cmp	r0, #0
 8011e22:	d13c      	bne.n	8011e9e <ucdr_deserialize_endian_uint32_t+0xa2>
 8011e24:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011e28:	42bb      	cmp	r3, r7
 8011e2a:	d933      	bls.n	8011e94 <ucdr_deserialize_endian_uint32_t+0x98>
 8011e2c:	eba3 0807 	sub.w	r8, r3, r7
 8011e30:	60a3      	str	r3, [r4, #8]
 8011e32:	6923      	ldr	r3, [r4, #16]
 8011e34:	f1c8 0a04 	rsb	sl, r8, #4
 8011e38:	4443      	add	r3, r8
 8011e3a:	6123      	str	r3, [r4, #16]
 8011e3c:	4651      	mov	r1, sl
 8011e3e:	4620      	mov	r0, r4
 8011e40:	f001 f8ee 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011e44:	2800      	cmp	r0, #0
 8011e46:	d048      	beq.n	8011eda <ucdr_deserialize_endian_uint32_t+0xde>
 8011e48:	2e01      	cmp	r6, #1
 8011e4a:	d061      	beq.n	8011f10 <ucdr_deserialize_endian_uint32_t+0x114>
 8011e4c:	78fb      	ldrb	r3, [r7, #3]
 8011e4e:	702b      	strb	r3, [r5, #0]
 8011e50:	f1b8 0f00 	cmp.w	r8, #0
 8011e54:	d050      	beq.n	8011ef8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8011e56:	78bb      	ldrb	r3, [r7, #2]
 8011e58:	706b      	strb	r3, [r5, #1]
 8011e5a:	f1b8 0f01 	cmp.w	r8, #1
 8011e5e:	f105 0302 	add.w	r3, r5, #2
 8011e62:	d04d      	beq.n	8011f00 <ucdr_deserialize_endian_uint32_t+0x104>
 8011e64:	787b      	ldrb	r3, [r7, #1]
 8011e66:	70ab      	strb	r3, [r5, #2]
 8011e68:	f1b8 0f02 	cmp.w	r8, #2
 8011e6c:	f105 0303 	add.w	r3, r5, #3
 8011e70:	d04a      	beq.n	8011f08 <ucdr_deserialize_endian_uint32_t+0x10c>
 8011e72:	783b      	ldrb	r3, [r7, #0]
 8011e74:	70eb      	strb	r3, [r5, #3]
 8011e76:	6923      	ldr	r3, [r4, #16]
 8011e78:	68a2      	ldr	r2, [r4, #8]
 8011e7a:	7da0      	ldrb	r0, [r4, #22]
 8011e7c:	2104      	movs	r1, #4
 8011e7e:	3304      	adds	r3, #4
 8011e80:	4452      	add	r2, sl
 8011e82:	eba3 0308 	sub.w	r3, r3, r8
 8011e86:	7561      	strb	r1, [r4, #21]
 8011e88:	60a2      	str	r2, [r4, #8]
 8011e8a:	6123      	str	r3, [r4, #16]
 8011e8c:	f080 0001 	eor.w	r0, r0, #1
 8011e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e94:	2104      	movs	r1, #4
 8011e96:	4620      	mov	r0, r4
 8011e98:	f001 f8c2 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011e9c:	b1a8      	cbz	r0, 8011eca <ucdr_deserialize_endian_uint32_t+0xce>
 8011e9e:	2e01      	cmp	r6, #1
 8011ea0:	68a3      	ldr	r3, [r4, #8]
 8011ea2:	d017      	beq.n	8011ed4 <ucdr_deserialize_endian_uint32_t+0xd8>
 8011ea4:	78db      	ldrb	r3, [r3, #3]
 8011ea6:	702b      	strb	r3, [r5, #0]
 8011ea8:	68a3      	ldr	r3, [r4, #8]
 8011eaa:	789b      	ldrb	r3, [r3, #2]
 8011eac:	706b      	strb	r3, [r5, #1]
 8011eae:	68a3      	ldr	r3, [r4, #8]
 8011eb0:	785b      	ldrb	r3, [r3, #1]
 8011eb2:	70ab      	strb	r3, [r5, #2]
 8011eb4:	68a3      	ldr	r3, [r4, #8]
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	70eb      	strb	r3, [r5, #3]
 8011eba:	68a2      	ldr	r2, [r4, #8]
 8011ebc:	6923      	ldr	r3, [r4, #16]
 8011ebe:	3204      	adds	r2, #4
 8011ec0:	3304      	adds	r3, #4
 8011ec2:	2104      	movs	r1, #4
 8011ec4:	60a2      	str	r2, [r4, #8]
 8011ec6:	6123      	str	r3, [r4, #16]
 8011ec8:	7561      	strb	r1, [r4, #21]
 8011eca:	7da0      	ldrb	r0, [r4, #22]
 8011ecc:	f080 0001 	eor.w	r0, r0, #1
 8011ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	602b      	str	r3, [r5, #0]
 8011ed8:	e7ef      	b.n	8011eba <ucdr_deserialize_endian_uint32_t+0xbe>
 8011eda:	68a2      	ldr	r2, [r4, #8]
 8011edc:	6923      	ldr	r3, [r4, #16]
 8011ede:	7da0      	ldrb	r0, [r4, #22]
 8011ee0:	f884 9015 	strb.w	r9, [r4, #21]
 8011ee4:	eba2 0208 	sub.w	r2, r2, r8
 8011ee8:	eba3 0308 	sub.w	r3, r3, r8
 8011eec:	60a2      	str	r2, [r4, #8]
 8011eee:	6123      	str	r3, [r4, #16]
 8011ef0:	f080 0001 	eor.w	r0, r0, #1
 8011ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ef8:	68a3      	ldr	r3, [r4, #8]
 8011efa:	789b      	ldrb	r3, [r3, #2]
 8011efc:	706b      	strb	r3, [r5, #1]
 8011efe:	1cab      	adds	r3, r5, #2
 8011f00:	68a2      	ldr	r2, [r4, #8]
 8011f02:	7852      	ldrb	r2, [r2, #1]
 8011f04:	f803 2b01 	strb.w	r2, [r3], #1
 8011f08:	68a2      	ldr	r2, [r4, #8]
 8011f0a:	7812      	ldrb	r2, [r2, #0]
 8011f0c:	701a      	strb	r2, [r3, #0]
 8011f0e:	e7b2      	b.n	8011e76 <ucdr_deserialize_endian_uint32_t+0x7a>
 8011f10:	4639      	mov	r1, r7
 8011f12:	4642      	mov	r2, r8
 8011f14:	4628      	mov	r0, r5
 8011f16:	f008 fc51 	bl	801a7bc <memcpy>
 8011f1a:	68a1      	ldr	r1, [r4, #8]
 8011f1c:	4652      	mov	r2, sl
 8011f1e:	eb05 0008 	add.w	r0, r5, r8
 8011f22:	f008 fc4b 	bl	801a7bc <memcpy>
 8011f26:	e7a6      	b.n	8011e76 <ucdr_deserialize_endian_uint32_t+0x7a>

08011f28 <ucdr_serialize_uint64_t>:
 8011f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f2c:	2108      	movs	r1, #8
 8011f2e:	b082      	sub	sp, #8
 8011f30:	4604      	mov	r4, r0
 8011f32:	e9cd 2300 	strd	r2, r3, [sp]
 8011f36:	f001 f8c7 	bl	80130c8 <ucdr_buffer_alignment>
 8011f3a:	4601      	mov	r1, r0
 8011f3c:	4620      	mov	r0, r4
 8011f3e:	7d67      	ldrb	r7, [r4, #21]
 8011f40:	f001 f906 	bl	8013150 <ucdr_advance_buffer>
 8011f44:	2108      	movs	r1, #8
 8011f46:	4620      	mov	r0, r4
 8011f48:	f001 f85e 	bl	8013008 <ucdr_check_buffer_available_for>
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	d14e      	bne.n	8011fee <ucdr_serialize_uint64_t+0xc6>
 8011f50:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011f54:	42ab      	cmp	r3, r5
 8011f56:	d945      	bls.n	8011fe4 <ucdr_serialize_uint64_t+0xbc>
 8011f58:	1b5e      	subs	r6, r3, r5
 8011f5a:	60a3      	str	r3, [r4, #8]
 8011f5c:	6923      	ldr	r3, [r4, #16]
 8011f5e:	f1c6 0808 	rsb	r8, r6, #8
 8011f62:	4433      	add	r3, r6
 8011f64:	6123      	str	r3, [r4, #16]
 8011f66:	4641      	mov	r1, r8
 8011f68:	4620      	mov	r0, r4
 8011f6a:	f001 f859 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011f6e:	2800      	cmp	r0, #0
 8011f70:	d074      	beq.n	801205c <ucdr_serialize_uint64_t+0x134>
 8011f72:	7d23      	ldrb	r3, [r4, #20]
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	f000 809b 	beq.w	80120b0 <ucdr_serialize_uint64_t+0x188>
 8011f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011f7e:	702b      	strb	r3, [r5, #0]
 8011f80:	2e00      	cmp	r6, #0
 8011f82:	d078      	beq.n	8012076 <ucdr_serialize_uint64_t+0x14e>
 8011f84:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011f88:	706b      	strb	r3, [r5, #1]
 8011f8a:	2e01      	cmp	r6, #1
 8011f8c:	d077      	beq.n	801207e <ucdr_serialize_uint64_t+0x156>
 8011f8e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011f92:	70ab      	strb	r3, [r5, #2]
 8011f94:	2e02      	cmp	r6, #2
 8011f96:	d076      	beq.n	8012086 <ucdr_serialize_uint64_t+0x15e>
 8011f98:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011f9c:	70eb      	strb	r3, [r5, #3]
 8011f9e:	2e03      	cmp	r6, #3
 8011fa0:	d075      	beq.n	801208e <ucdr_serialize_uint64_t+0x166>
 8011fa2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011fa6:	712b      	strb	r3, [r5, #4]
 8011fa8:	2e04      	cmp	r6, #4
 8011faa:	d074      	beq.n	8012096 <ucdr_serialize_uint64_t+0x16e>
 8011fac:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011fb0:	716b      	strb	r3, [r5, #5]
 8011fb2:	2e05      	cmp	r6, #5
 8011fb4:	d073      	beq.n	801209e <ucdr_serialize_uint64_t+0x176>
 8011fb6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011fba:	71ab      	strb	r3, [r5, #6]
 8011fbc:	2e06      	cmp	r6, #6
 8011fbe:	d072      	beq.n	80120a6 <ucdr_serialize_uint64_t+0x17e>
 8011fc0:	f89d 3000 	ldrb.w	r3, [sp]
 8011fc4:	71eb      	strb	r3, [r5, #7]
 8011fc6:	6923      	ldr	r3, [r4, #16]
 8011fc8:	68a2      	ldr	r2, [r4, #8]
 8011fca:	7da0      	ldrb	r0, [r4, #22]
 8011fcc:	3308      	adds	r3, #8
 8011fce:	1b9e      	subs	r6, r3, r6
 8011fd0:	4442      	add	r2, r8
 8011fd2:	2308      	movs	r3, #8
 8011fd4:	f080 0001 	eor.w	r0, r0, #1
 8011fd8:	60a2      	str	r2, [r4, #8]
 8011fda:	6126      	str	r6, [r4, #16]
 8011fdc:	7563      	strb	r3, [r4, #21]
 8011fde:	b002      	add	sp, #8
 8011fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fe4:	2108      	movs	r1, #8
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	f001 f81a 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8011fec:	b350      	cbz	r0, 8012044 <ucdr_serialize_uint64_t+0x11c>
 8011fee:	7d23      	ldrb	r3, [r4, #20]
 8011ff0:	2b01      	cmp	r3, #1
 8011ff2:	d02d      	beq.n	8012050 <ucdr_serialize_uint64_t+0x128>
 8011ff4:	68a3      	ldr	r3, [r4, #8]
 8011ff6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011ffa:	701a      	strb	r2, [r3, #0]
 8011ffc:	68a3      	ldr	r3, [r4, #8]
 8011ffe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012002:	705a      	strb	r2, [r3, #1]
 8012004:	68a3      	ldr	r3, [r4, #8]
 8012006:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801200a:	709a      	strb	r2, [r3, #2]
 801200c:	68a3      	ldr	r3, [r4, #8]
 801200e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012012:	70da      	strb	r2, [r3, #3]
 8012014:	68a3      	ldr	r3, [r4, #8]
 8012016:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801201a:	711a      	strb	r2, [r3, #4]
 801201c:	68a3      	ldr	r3, [r4, #8]
 801201e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012022:	715a      	strb	r2, [r3, #5]
 8012024:	68a3      	ldr	r3, [r4, #8]
 8012026:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801202a:	719a      	strb	r2, [r3, #6]
 801202c:	68a3      	ldr	r3, [r4, #8]
 801202e:	f89d 2000 	ldrb.w	r2, [sp]
 8012032:	71da      	strb	r2, [r3, #7]
 8012034:	68a2      	ldr	r2, [r4, #8]
 8012036:	6923      	ldr	r3, [r4, #16]
 8012038:	3208      	adds	r2, #8
 801203a:	3308      	adds	r3, #8
 801203c:	2108      	movs	r1, #8
 801203e:	60a2      	str	r2, [r4, #8]
 8012040:	6123      	str	r3, [r4, #16]
 8012042:	7561      	strb	r1, [r4, #21]
 8012044:	7da0      	ldrb	r0, [r4, #22]
 8012046:	f080 0001 	eor.w	r0, r0, #1
 801204a:	b002      	add	sp, #8
 801204c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012050:	466b      	mov	r3, sp
 8012052:	cb03      	ldmia	r3!, {r0, r1}
 8012054:	68a3      	ldr	r3, [r4, #8]
 8012056:	6018      	str	r0, [r3, #0]
 8012058:	6059      	str	r1, [r3, #4]
 801205a:	e7eb      	b.n	8012034 <ucdr_serialize_uint64_t+0x10c>
 801205c:	68a2      	ldr	r2, [r4, #8]
 801205e:	6923      	ldr	r3, [r4, #16]
 8012060:	7da0      	ldrb	r0, [r4, #22]
 8012062:	7567      	strb	r7, [r4, #21]
 8012064:	1b92      	subs	r2, r2, r6
 8012066:	1b9b      	subs	r3, r3, r6
 8012068:	f080 0001 	eor.w	r0, r0, #1
 801206c:	60a2      	str	r2, [r4, #8]
 801206e:	6123      	str	r3, [r4, #16]
 8012070:	b002      	add	sp, #8
 8012072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012076:	68a3      	ldr	r3, [r4, #8]
 8012078:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801207c:	701a      	strb	r2, [r3, #0]
 801207e:	68a3      	ldr	r3, [r4, #8]
 8012080:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012084:	701a      	strb	r2, [r3, #0]
 8012086:	68a3      	ldr	r3, [r4, #8]
 8012088:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801208c:	701a      	strb	r2, [r3, #0]
 801208e:	68a3      	ldr	r3, [r4, #8]
 8012090:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012094:	701a      	strb	r2, [r3, #0]
 8012096:	68a3      	ldr	r3, [r4, #8]
 8012098:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801209c:	701a      	strb	r2, [r3, #0]
 801209e:	68a3      	ldr	r3, [r4, #8]
 80120a0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80120a4:	701a      	strb	r2, [r3, #0]
 80120a6:	68a3      	ldr	r3, [r4, #8]
 80120a8:	f89d 2000 	ldrb.w	r2, [sp]
 80120ac:	701a      	strb	r2, [r3, #0]
 80120ae:	e78a      	b.n	8011fc6 <ucdr_serialize_uint64_t+0x9e>
 80120b0:	4628      	mov	r0, r5
 80120b2:	466d      	mov	r5, sp
 80120b4:	4629      	mov	r1, r5
 80120b6:	4632      	mov	r2, r6
 80120b8:	f008 fb80 	bl	801a7bc <memcpy>
 80120bc:	68a0      	ldr	r0, [r4, #8]
 80120be:	4642      	mov	r2, r8
 80120c0:	19a9      	adds	r1, r5, r6
 80120c2:	f008 fb7b 	bl	801a7bc <memcpy>
 80120c6:	e77e      	b.n	8011fc6 <ucdr_serialize_uint64_t+0x9e>

080120c8 <ucdr_serialize_int16_t>:
 80120c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120cc:	b082      	sub	sp, #8
 80120ce:	460b      	mov	r3, r1
 80120d0:	2102      	movs	r1, #2
 80120d2:	4604      	mov	r4, r0
 80120d4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80120d8:	f000 fff6 	bl	80130c8 <ucdr_buffer_alignment>
 80120dc:	4601      	mov	r1, r0
 80120de:	4620      	mov	r0, r4
 80120e0:	7d67      	ldrb	r7, [r4, #21]
 80120e2:	f001 f835 	bl	8013150 <ucdr_advance_buffer>
 80120e6:	2102      	movs	r1, #2
 80120e8:	4620      	mov	r0, r4
 80120ea:	f000 ff8d 	bl	8013008 <ucdr_check_buffer_available_for>
 80120ee:	bb78      	cbnz	r0, 8012150 <ucdr_serialize_int16_t+0x88>
 80120f0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80120f4:	42ab      	cmp	r3, r5
 80120f6:	d926      	bls.n	8012146 <ucdr_serialize_int16_t+0x7e>
 80120f8:	1b5e      	subs	r6, r3, r5
 80120fa:	60a3      	str	r3, [r4, #8]
 80120fc:	6923      	ldr	r3, [r4, #16]
 80120fe:	f1c6 0802 	rsb	r8, r6, #2
 8012102:	4433      	add	r3, r6
 8012104:	6123      	str	r3, [r4, #16]
 8012106:	4641      	mov	r1, r8
 8012108:	4620      	mov	r0, r4
 801210a:	f000 ff89 	bl	8013020 <ucdr_check_final_buffer_behavior>
 801210e:	2800      	cmp	r0, #0
 8012110:	d03b      	beq.n	801218a <ucdr_serialize_int16_t+0xc2>
 8012112:	7d23      	ldrb	r3, [r4, #20]
 8012114:	2b01      	cmp	r3, #1
 8012116:	d04a      	beq.n	80121ae <ucdr_serialize_int16_t+0xe6>
 8012118:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801211c:	702b      	strb	r3, [r5, #0]
 801211e:	2e00      	cmp	r6, #0
 8012120:	d040      	beq.n	80121a4 <ucdr_serialize_int16_t+0xdc>
 8012122:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012126:	706b      	strb	r3, [r5, #1]
 8012128:	6923      	ldr	r3, [r4, #16]
 801212a:	68a2      	ldr	r2, [r4, #8]
 801212c:	7da0      	ldrb	r0, [r4, #22]
 801212e:	3302      	adds	r3, #2
 8012130:	1b9e      	subs	r6, r3, r6
 8012132:	4442      	add	r2, r8
 8012134:	2302      	movs	r3, #2
 8012136:	f080 0001 	eor.w	r0, r0, #1
 801213a:	60a2      	str	r2, [r4, #8]
 801213c:	6126      	str	r6, [r4, #16]
 801213e:	7563      	strb	r3, [r4, #21]
 8012140:	b002      	add	sp, #8
 8012142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012146:	2102      	movs	r1, #2
 8012148:	4620      	mov	r0, r4
 801214a:	f000 ff69 	bl	8013020 <ucdr_check_final_buffer_behavior>
 801214e:	b190      	cbz	r0, 8012176 <ucdr_serialize_int16_t+0xae>
 8012150:	7d23      	ldrb	r3, [r4, #20]
 8012152:	2b01      	cmp	r3, #1
 8012154:	68a3      	ldr	r3, [r4, #8]
 8012156:	d014      	beq.n	8012182 <ucdr_serialize_int16_t+0xba>
 8012158:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801215c:	701a      	strb	r2, [r3, #0]
 801215e:	68a3      	ldr	r3, [r4, #8]
 8012160:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012164:	705a      	strb	r2, [r3, #1]
 8012166:	68a2      	ldr	r2, [r4, #8]
 8012168:	6923      	ldr	r3, [r4, #16]
 801216a:	3202      	adds	r2, #2
 801216c:	3302      	adds	r3, #2
 801216e:	2102      	movs	r1, #2
 8012170:	60a2      	str	r2, [r4, #8]
 8012172:	6123      	str	r3, [r4, #16]
 8012174:	7561      	strb	r1, [r4, #21]
 8012176:	7da0      	ldrb	r0, [r4, #22]
 8012178:	f080 0001 	eor.w	r0, r0, #1
 801217c:	b002      	add	sp, #8
 801217e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012182:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012186:	801a      	strh	r2, [r3, #0]
 8012188:	e7ed      	b.n	8012166 <ucdr_serialize_int16_t+0x9e>
 801218a:	68a2      	ldr	r2, [r4, #8]
 801218c:	6923      	ldr	r3, [r4, #16]
 801218e:	7da0      	ldrb	r0, [r4, #22]
 8012190:	7567      	strb	r7, [r4, #21]
 8012192:	1b92      	subs	r2, r2, r6
 8012194:	1b9b      	subs	r3, r3, r6
 8012196:	f080 0001 	eor.w	r0, r0, #1
 801219a:	60a2      	str	r2, [r4, #8]
 801219c:	6123      	str	r3, [r4, #16]
 801219e:	b002      	add	sp, #8
 80121a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121a4:	68a3      	ldr	r3, [r4, #8]
 80121a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121aa:	701a      	strb	r2, [r3, #0]
 80121ac:	e7bc      	b.n	8012128 <ucdr_serialize_int16_t+0x60>
 80121ae:	4628      	mov	r0, r5
 80121b0:	f10d 0506 	add.w	r5, sp, #6
 80121b4:	4629      	mov	r1, r5
 80121b6:	4632      	mov	r2, r6
 80121b8:	f008 fb00 	bl	801a7bc <memcpy>
 80121bc:	68a0      	ldr	r0, [r4, #8]
 80121be:	4642      	mov	r2, r8
 80121c0:	19a9      	adds	r1, r5, r6
 80121c2:	f008 fafb 	bl	801a7bc <memcpy>
 80121c6:	e7af      	b.n	8012128 <ucdr_serialize_int16_t+0x60>

080121c8 <ucdr_deserialize_int16_t>:
 80121c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121cc:	460d      	mov	r5, r1
 80121ce:	2102      	movs	r1, #2
 80121d0:	4604      	mov	r4, r0
 80121d2:	f000 ff79 	bl	80130c8 <ucdr_buffer_alignment>
 80121d6:	4601      	mov	r1, r0
 80121d8:	4620      	mov	r0, r4
 80121da:	f894 8015 	ldrb.w	r8, [r4, #21]
 80121de:	f000 ffb7 	bl	8013150 <ucdr_advance_buffer>
 80121e2:	2102      	movs	r1, #2
 80121e4:	4620      	mov	r0, r4
 80121e6:	f000 ff0f 	bl	8013008 <ucdr_check_buffer_available_for>
 80121ea:	bb60      	cbnz	r0, 8012246 <ucdr_deserialize_int16_t+0x7e>
 80121ec:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80121f0:	42be      	cmp	r6, r7
 80121f2:	d923      	bls.n	801223c <ucdr_deserialize_int16_t+0x74>
 80121f4:	6923      	ldr	r3, [r4, #16]
 80121f6:	60a6      	str	r6, [r4, #8]
 80121f8:	1bf6      	subs	r6, r6, r7
 80121fa:	4433      	add	r3, r6
 80121fc:	f1c6 0902 	rsb	r9, r6, #2
 8012200:	6123      	str	r3, [r4, #16]
 8012202:	4649      	mov	r1, r9
 8012204:	4620      	mov	r0, r4
 8012206:	f000 ff0b 	bl	8013020 <ucdr_check_final_buffer_behavior>
 801220a:	2800      	cmp	r0, #0
 801220c:	d034      	beq.n	8012278 <ucdr_deserialize_int16_t+0xb0>
 801220e:	7d23      	ldrb	r3, [r4, #20]
 8012210:	2b01      	cmp	r3, #1
 8012212:	d042      	beq.n	801229a <ucdr_deserialize_int16_t+0xd2>
 8012214:	787b      	ldrb	r3, [r7, #1]
 8012216:	702b      	strb	r3, [r5, #0]
 8012218:	2e00      	cmp	r6, #0
 801221a:	d03a      	beq.n	8012292 <ucdr_deserialize_int16_t+0xca>
 801221c:	783b      	ldrb	r3, [r7, #0]
 801221e:	706b      	strb	r3, [r5, #1]
 8012220:	6923      	ldr	r3, [r4, #16]
 8012222:	68a2      	ldr	r2, [r4, #8]
 8012224:	7da0      	ldrb	r0, [r4, #22]
 8012226:	2102      	movs	r1, #2
 8012228:	3302      	adds	r3, #2
 801222a:	444a      	add	r2, r9
 801222c:	1b9b      	subs	r3, r3, r6
 801222e:	7561      	strb	r1, [r4, #21]
 8012230:	60a2      	str	r2, [r4, #8]
 8012232:	6123      	str	r3, [r4, #16]
 8012234:	f080 0001 	eor.w	r0, r0, #1
 8012238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801223c:	2102      	movs	r1, #2
 801223e:	4620      	mov	r0, r4
 8012240:	f000 feee 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012244:	b180      	cbz	r0, 8012268 <ucdr_deserialize_int16_t+0xa0>
 8012246:	7d23      	ldrb	r3, [r4, #20]
 8012248:	2b01      	cmp	r3, #1
 801224a:	68a3      	ldr	r3, [r4, #8]
 801224c:	d011      	beq.n	8012272 <ucdr_deserialize_int16_t+0xaa>
 801224e:	785b      	ldrb	r3, [r3, #1]
 8012250:	702b      	strb	r3, [r5, #0]
 8012252:	68a3      	ldr	r3, [r4, #8]
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	706b      	strb	r3, [r5, #1]
 8012258:	68a2      	ldr	r2, [r4, #8]
 801225a:	6923      	ldr	r3, [r4, #16]
 801225c:	3202      	adds	r2, #2
 801225e:	3302      	adds	r3, #2
 8012260:	2102      	movs	r1, #2
 8012262:	60a2      	str	r2, [r4, #8]
 8012264:	6123      	str	r3, [r4, #16]
 8012266:	7561      	strb	r1, [r4, #21]
 8012268:	7da0      	ldrb	r0, [r4, #22]
 801226a:	f080 0001 	eor.w	r0, r0, #1
 801226e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012272:	881b      	ldrh	r3, [r3, #0]
 8012274:	802b      	strh	r3, [r5, #0]
 8012276:	e7ef      	b.n	8012258 <ucdr_deserialize_int16_t+0x90>
 8012278:	68a2      	ldr	r2, [r4, #8]
 801227a:	6923      	ldr	r3, [r4, #16]
 801227c:	7da0      	ldrb	r0, [r4, #22]
 801227e:	f884 8015 	strb.w	r8, [r4, #21]
 8012282:	1b92      	subs	r2, r2, r6
 8012284:	1b9b      	subs	r3, r3, r6
 8012286:	60a2      	str	r2, [r4, #8]
 8012288:	6123      	str	r3, [r4, #16]
 801228a:	f080 0001 	eor.w	r0, r0, #1
 801228e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012292:	68a3      	ldr	r3, [r4, #8]
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	706b      	strb	r3, [r5, #1]
 8012298:	e7c2      	b.n	8012220 <ucdr_deserialize_int16_t+0x58>
 801229a:	4639      	mov	r1, r7
 801229c:	4632      	mov	r2, r6
 801229e:	4628      	mov	r0, r5
 80122a0:	f008 fa8c 	bl	801a7bc <memcpy>
 80122a4:	68a1      	ldr	r1, [r4, #8]
 80122a6:	464a      	mov	r2, r9
 80122a8:	19a8      	adds	r0, r5, r6
 80122aa:	f008 fa87 	bl	801a7bc <memcpy>
 80122ae:	e7b7      	b.n	8012220 <ucdr_deserialize_int16_t+0x58>

080122b0 <ucdr_serialize_int32_t>:
 80122b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b4:	b082      	sub	sp, #8
 80122b6:	4604      	mov	r4, r0
 80122b8:	9101      	str	r1, [sp, #4]
 80122ba:	2104      	movs	r1, #4
 80122bc:	f000 ff04 	bl	80130c8 <ucdr_buffer_alignment>
 80122c0:	4601      	mov	r1, r0
 80122c2:	4620      	mov	r0, r4
 80122c4:	7d67      	ldrb	r7, [r4, #21]
 80122c6:	f000 ff43 	bl	8013150 <ucdr_advance_buffer>
 80122ca:	2104      	movs	r1, #4
 80122cc:	4620      	mov	r0, r4
 80122ce:	f000 fe9b 	bl	8013008 <ucdr_check_buffer_available_for>
 80122d2:	2800      	cmp	r0, #0
 80122d4:	d139      	bne.n	801234a <ucdr_serialize_int32_t+0x9a>
 80122d6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80122da:	42ab      	cmp	r3, r5
 80122dc:	d930      	bls.n	8012340 <ucdr_serialize_int32_t+0x90>
 80122de:	1b5e      	subs	r6, r3, r5
 80122e0:	60a3      	str	r3, [r4, #8]
 80122e2:	6923      	ldr	r3, [r4, #16]
 80122e4:	f1c6 0804 	rsb	r8, r6, #4
 80122e8:	4433      	add	r3, r6
 80122ea:	6123      	str	r3, [r4, #16]
 80122ec:	4641      	mov	r1, r8
 80122ee:	4620      	mov	r0, r4
 80122f0:	f000 fe96 	bl	8013020 <ucdr_check_final_buffer_behavior>
 80122f4:	2800      	cmp	r0, #0
 80122f6:	d04c      	beq.n	8012392 <ucdr_serialize_int32_t+0xe2>
 80122f8:	7d23      	ldrb	r3, [r4, #20]
 80122fa:	2b01      	cmp	r3, #1
 80122fc:	d063      	beq.n	80123c6 <ucdr_serialize_int32_t+0x116>
 80122fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012302:	702b      	strb	r3, [r5, #0]
 8012304:	2e00      	cmp	r6, #0
 8012306:	d051      	beq.n	80123ac <ucdr_serialize_int32_t+0xfc>
 8012308:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801230c:	706b      	strb	r3, [r5, #1]
 801230e:	2e01      	cmp	r6, #1
 8012310:	d050      	beq.n	80123b4 <ucdr_serialize_int32_t+0x104>
 8012312:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012316:	70ab      	strb	r3, [r5, #2]
 8012318:	2e02      	cmp	r6, #2
 801231a:	d04f      	beq.n	80123bc <ucdr_serialize_int32_t+0x10c>
 801231c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012320:	70eb      	strb	r3, [r5, #3]
 8012322:	6923      	ldr	r3, [r4, #16]
 8012324:	68a2      	ldr	r2, [r4, #8]
 8012326:	7da0      	ldrb	r0, [r4, #22]
 8012328:	3304      	adds	r3, #4
 801232a:	1b9e      	subs	r6, r3, r6
 801232c:	4442      	add	r2, r8
 801232e:	2304      	movs	r3, #4
 8012330:	f080 0001 	eor.w	r0, r0, #1
 8012334:	60a2      	str	r2, [r4, #8]
 8012336:	6126      	str	r6, [r4, #16]
 8012338:	7563      	strb	r3, [r4, #21]
 801233a:	b002      	add	sp, #8
 801233c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012340:	2104      	movs	r1, #4
 8012342:	4620      	mov	r0, r4
 8012344:	f000 fe6c 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012348:	b1d0      	cbz	r0, 8012380 <ucdr_serialize_int32_t+0xd0>
 801234a:	7d23      	ldrb	r3, [r4, #20]
 801234c:	2b01      	cmp	r3, #1
 801234e:	68a3      	ldr	r3, [r4, #8]
 8012350:	d01c      	beq.n	801238c <ucdr_serialize_int32_t+0xdc>
 8012352:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012356:	701a      	strb	r2, [r3, #0]
 8012358:	68a3      	ldr	r3, [r4, #8]
 801235a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801235e:	705a      	strb	r2, [r3, #1]
 8012360:	68a3      	ldr	r3, [r4, #8]
 8012362:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012366:	709a      	strb	r2, [r3, #2]
 8012368:	68a3      	ldr	r3, [r4, #8]
 801236a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801236e:	70da      	strb	r2, [r3, #3]
 8012370:	68a2      	ldr	r2, [r4, #8]
 8012372:	6923      	ldr	r3, [r4, #16]
 8012374:	3204      	adds	r2, #4
 8012376:	3304      	adds	r3, #4
 8012378:	2104      	movs	r1, #4
 801237a:	60a2      	str	r2, [r4, #8]
 801237c:	6123      	str	r3, [r4, #16]
 801237e:	7561      	strb	r1, [r4, #21]
 8012380:	7da0      	ldrb	r0, [r4, #22]
 8012382:	f080 0001 	eor.w	r0, r0, #1
 8012386:	b002      	add	sp, #8
 8012388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801238c:	9a01      	ldr	r2, [sp, #4]
 801238e:	601a      	str	r2, [r3, #0]
 8012390:	e7ee      	b.n	8012370 <ucdr_serialize_int32_t+0xc0>
 8012392:	68a2      	ldr	r2, [r4, #8]
 8012394:	6923      	ldr	r3, [r4, #16]
 8012396:	7da0      	ldrb	r0, [r4, #22]
 8012398:	7567      	strb	r7, [r4, #21]
 801239a:	1b92      	subs	r2, r2, r6
 801239c:	1b9b      	subs	r3, r3, r6
 801239e:	f080 0001 	eor.w	r0, r0, #1
 80123a2:	60a2      	str	r2, [r4, #8]
 80123a4:	6123      	str	r3, [r4, #16]
 80123a6:	b002      	add	sp, #8
 80123a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ac:	68a3      	ldr	r3, [r4, #8]
 80123ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80123b2:	701a      	strb	r2, [r3, #0]
 80123b4:	68a3      	ldr	r3, [r4, #8]
 80123b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80123ba:	701a      	strb	r2, [r3, #0]
 80123bc:	68a3      	ldr	r3, [r4, #8]
 80123be:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80123c2:	701a      	strb	r2, [r3, #0]
 80123c4:	e7ad      	b.n	8012322 <ucdr_serialize_int32_t+0x72>
 80123c6:	4628      	mov	r0, r5
 80123c8:	ad01      	add	r5, sp, #4
 80123ca:	4629      	mov	r1, r5
 80123cc:	4632      	mov	r2, r6
 80123ce:	f008 f9f5 	bl	801a7bc <memcpy>
 80123d2:	68a0      	ldr	r0, [r4, #8]
 80123d4:	4642      	mov	r2, r8
 80123d6:	19a9      	adds	r1, r5, r6
 80123d8:	f008 f9f0 	bl	801a7bc <memcpy>
 80123dc:	e7a1      	b.n	8012322 <ucdr_serialize_int32_t+0x72>
 80123de:	bf00      	nop

080123e0 <ucdr_deserialize_int32_t>:
 80123e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123e4:	460d      	mov	r5, r1
 80123e6:	2104      	movs	r1, #4
 80123e8:	4604      	mov	r4, r0
 80123ea:	f000 fe6d 	bl	80130c8 <ucdr_buffer_alignment>
 80123ee:	4601      	mov	r1, r0
 80123f0:	4620      	mov	r0, r4
 80123f2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80123f6:	f000 feab 	bl	8013150 <ucdr_advance_buffer>
 80123fa:	2104      	movs	r1, #4
 80123fc:	4620      	mov	r0, r4
 80123fe:	f000 fe03 	bl	8013008 <ucdr_check_buffer_available_for>
 8012402:	2800      	cmp	r0, #0
 8012404:	d138      	bne.n	8012478 <ucdr_deserialize_int32_t+0x98>
 8012406:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801240a:	42b7      	cmp	r7, r6
 801240c:	d92f      	bls.n	801246e <ucdr_deserialize_int32_t+0x8e>
 801240e:	6923      	ldr	r3, [r4, #16]
 8012410:	60a7      	str	r7, [r4, #8]
 8012412:	1bbf      	subs	r7, r7, r6
 8012414:	443b      	add	r3, r7
 8012416:	f1c7 0904 	rsb	r9, r7, #4
 801241a:	6123      	str	r3, [r4, #16]
 801241c:	4649      	mov	r1, r9
 801241e:	4620      	mov	r0, r4
 8012420:	f000 fdfe 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012424:	2800      	cmp	r0, #0
 8012426:	d046      	beq.n	80124b6 <ucdr_deserialize_int32_t+0xd6>
 8012428:	7d23      	ldrb	r3, [r4, #20]
 801242a:	2b01      	cmp	r3, #1
 801242c:	d05c      	beq.n	80124e8 <ucdr_deserialize_int32_t+0x108>
 801242e:	78f3      	ldrb	r3, [r6, #3]
 8012430:	702b      	strb	r3, [r5, #0]
 8012432:	2f00      	cmp	r7, #0
 8012434:	d04c      	beq.n	80124d0 <ucdr_deserialize_int32_t+0xf0>
 8012436:	78b3      	ldrb	r3, [r6, #2]
 8012438:	706b      	strb	r3, [r5, #1]
 801243a:	2f01      	cmp	r7, #1
 801243c:	f105 0302 	add.w	r3, r5, #2
 8012440:	d04a      	beq.n	80124d8 <ucdr_deserialize_int32_t+0xf8>
 8012442:	7873      	ldrb	r3, [r6, #1]
 8012444:	70ab      	strb	r3, [r5, #2]
 8012446:	2f02      	cmp	r7, #2
 8012448:	f105 0303 	add.w	r3, r5, #3
 801244c:	d048      	beq.n	80124e0 <ucdr_deserialize_int32_t+0x100>
 801244e:	7833      	ldrb	r3, [r6, #0]
 8012450:	70eb      	strb	r3, [r5, #3]
 8012452:	6923      	ldr	r3, [r4, #16]
 8012454:	68a2      	ldr	r2, [r4, #8]
 8012456:	7da0      	ldrb	r0, [r4, #22]
 8012458:	2104      	movs	r1, #4
 801245a:	3304      	adds	r3, #4
 801245c:	444a      	add	r2, r9
 801245e:	1bdb      	subs	r3, r3, r7
 8012460:	7561      	strb	r1, [r4, #21]
 8012462:	60a2      	str	r2, [r4, #8]
 8012464:	6123      	str	r3, [r4, #16]
 8012466:	f080 0001 	eor.w	r0, r0, #1
 801246a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801246e:	2104      	movs	r1, #4
 8012470:	4620      	mov	r0, r4
 8012472:	f000 fdd5 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012476:	b1b0      	cbz	r0, 80124a6 <ucdr_deserialize_int32_t+0xc6>
 8012478:	7d23      	ldrb	r3, [r4, #20]
 801247a:	2b01      	cmp	r3, #1
 801247c:	68a3      	ldr	r3, [r4, #8]
 801247e:	d017      	beq.n	80124b0 <ucdr_deserialize_int32_t+0xd0>
 8012480:	78db      	ldrb	r3, [r3, #3]
 8012482:	702b      	strb	r3, [r5, #0]
 8012484:	68a3      	ldr	r3, [r4, #8]
 8012486:	789b      	ldrb	r3, [r3, #2]
 8012488:	706b      	strb	r3, [r5, #1]
 801248a:	68a3      	ldr	r3, [r4, #8]
 801248c:	785b      	ldrb	r3, [r3, #1]
 801248e:	70ab      	strb	r3, [r5, #2]
 8012490:	68a3      	ldr	r3, [r4, #8]
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	70eb      	strb	r3, [r5, #3]
 8012496:	68a2      	ldr	r2, [r4, #8]
 8012498:	6923      	ldr	r3, [r4, #16]
 801249a:	3204      	adds	r2, #4
 801249c:	3304      	adds	r3, #4
 801249e:	2104      	movs	r1, #4
 80124a0:	60a2      	str	r2, [r4, #8]
 80124a2:	6123      	str	r3, [r4, #16]
 80124a4:	7561      	strb	r1, [r4, #21]
 80124a6:	7da0      	ldrb	r0, [r4, #22]
 80124a8:	f080 0001 	eor.w	r0, r0, #1
 80124ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	602b      	str	r3, [r5, #0]
 80124b4:	e7ef      	b.n	8012496 <ucdr_deserialize_int32_t+0xb6>
 80124b6:	68a2      	ldr	r2, [r4, #8]
 80124b8:	6923      	ldr	r3, [r4, #16]
 80124ba:	7da0      	ldrb	r0, [r4, #22]
 80124bc:	f884 8015 	strb.w	r8, [r4, #21]
 80124c0:	1bd2      	subs	r2, r2, r7
 80124c2:	1bdb      	subs	r3, r3, r7
 80124c4:	60a2      	str	r2, [r4, #8]
 80124c6:	6123      	str	r3, [r4, #16]
 80124c8:	f080 0001 	eor.w	r0, r0, #1
 80124cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124d0:	68a3      	ldr	r3, [r4, #8]
 80124d2:	789b      	ldrb	r3, [r3, #2]
 80124d4:	706b      	strb	r3, [r5, #1]
 80124d6:	1cab      	adds	r3, r5, #2
 80124d8:	68a2      	ldr	r2, [r4, #8]
 80124da:	7852      	ldrb	r2, [r2, #1]
 80124dc:	f803 2b01 	strb.w	r2, [r3], #1
 80124e0:	68a2      	ldr	r2, [r4, #8]
 80124e2:	7812      	ldrb	r2, [r2, #0]
 80124e4:	701a      	strb	r2, [r3, #0]
 80124e6:	e7b4      	b.n	8012452 <ucdr_deserialize_int32_t+0x72>
 80124e8:	4631      	mov	r1, r6
 80124ea:	463a      	mov	r2, r7
 80124ec:	4628      	mov	r0, r5
 80124ee:	f008 f965 	bl	801a7bc <memcpy>
 80124f2:	68a1      	ldr	r1, [r4, #8]
 80124f4:	464a      	mov	r2, r9
 80124f6:	19e8      	adds	r0, r5, r7
 80124f8:	f008 f960 	bl	801a7bc <memcpy>
 80124fc:	e7a9      	b.n	8012452 <ucdr_deserialize_int32_t+0x72>
 80124fe:	bf00      	nop

08012500 <ucdr_serialize_int64_t>:
 8012500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012504:	2108      	movs	r1, #8
 8012506:	b082      	sub	sp, #8
 8012508:	4604      	mov	r4, r0
 801250a:	e9cd 2300 	strd	r2, r3, [sp]
 801250e:	f000 fddb 	bl	80130c8 <ucdr_buffer_alignment>
 8012512:	4601      	mov	r1, r0
 8012514:	4620      	mov	r0, r4
 8012516:	7d67      	ldrb	r7, [r4, #21]
 8012518:	f000 fe1a 	bl	8013150 <ucdr_advance_buffer>
 801251c:	2108      	movs	r1, #8
 801251e:	4620      	mov	r0, r4
 8012520:	f000 fd72 	bl	8013008 <ucdr_check_buffer_available_for>
 8012524:	2800      	cmp	r0, #0
 8012526:	d14e      	bne.n	80125c6 <ucdr_serialize_int64_t+0xc6>
 8012528:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801252c:	42ab      	cmp	r3, r5
 801252e:	d945      	bls.n	80125bc <ucdr_serialize_int64_t+0xbc>
 8012530:	1b5e      	subs	r6, r3, r5
 8012532:	60a3      	str	r3, [r4, #8]
 8012534:	6923      	ldr	r3, [r4, #16]
 8012536:	f1c6 0808 	rsb	r8, r6, #8
 801253a:	4433      	add	r3, r6
 801253c:	6123      	str	r3, [r4, #16]
 801253e:	4641      	mov	r1, r8
 8012540:	4620      	mov	r0, r4
 8012542:	f000 fd6d 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012546:	2800      	cmp	r0, #0
 8012548:	d074      	beq.n	8012634 <ucdr_serialize_int64_t+0x134>
 801254a:	7d23      	ldrb	r3, [r4, #20]
 801254c:	2b01      	cmp	r3, #1
 801254e:	f000 809b 	beq.w	8012688 <ucdr_serialize_int64_t+0x188>
 8012552:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012556:	702b      	strb	r3, [r5, #0]
 8012558:	2e00      	cmp	r6, #0
 801255a:	d078      	beq.n	801264e <ucdr_serialize_int64_t+0x14e>
 801255c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012560:	706b      	strb	r3, [r5, #1]
 8012562:	2e01      	cmp	r6, #1
 8012564:	d077      	beq.n	8012656 <ucdr_serialize_int64_t+0x156>
 8012566:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801256a:	70ab      	strb	r3, [r5, #2]
 801256c:	2e02      	cmp	r6, #2
 801256e:	d076      	beq.n	801265e <ucdr_serialize_int64_t+0x15e>
 8012570:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012574:	70eb      	strb	r3, [r5, #3]
 8012576:	2e03      	cmp	r6, #3
 8012578:	d075      	beq.n	8012666 <ucdr_serialize_int64_t+0x166>
 801257a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801257e:	712b      	strb	r3, [r5, #4]
 8012580:	2e04      	cmp	r6, #4
 8012582:	d074      	beq.n	801266e <ucdr_serialize_int64_t+0x16e>
 8012584:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012588:	716b      	strb	r3, [r5, #5]
 801258a:	2e05      	cmp	r6, #5
 801258c:	d073      	beq.n	8012676 <ucdr_serialize_int64_t+0x176>
 801258e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012592:	71ab      	strb	r3, [r5, #6]
 8012594:	2e06      	cmp	r6, #6
 8012596:	d072      	beq.n	801267e <ucdr_serialize_int64_t+0x17e>
 8012598:	f89d 3000 	ldrb.w	r3, [sp]
 801259c:	71eb      	strb	r3, [r5, #7]
 801259e:	6923      	ldr	r3, [r4, #16]
 80125a0:	68a2      	ldr	r2, [r4, #8]
 80125a2:	7da0      	ldrb	r0, [r4, #22]
 80125a4:	3308      	adds	r3, #8
 80125a6:	1b9e      	subs	r6, r3, r6
 80125a8:	4442      	add	r2, r8
 80125aa:	2308      	movs	r3, #8
 80125ac:	f080 0001 	eor.w	r0, r0, #1
 80125b0:	60a2      	str	r2, [r4, #8]
 80125b2:	6126      	str	r6, [r4, #16]
 80125b4:	7563      	strb	r3, [r4, #21]
 80125b6:	b002      	add	sp, #8
 80125b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125bc:	2108      	movs	r1, #8
 80125be:	4620      	mov	r0, r4
 80125c0:	f000 fd2e 	bl	8013020 <ucdr_check_final_buffer_behavior>
 80125c4:	b350      	cbz	r0, 801261c <ucdr_serialize_int64_t+0x11c>
 80125c6:	7d23      	ldrb	r3, [r4, #20]
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	d02d      	beq.n	8012628 <ucdr_serialize_int64_t+0x128>
 80125cc:	68a3      	ldr	r3, [r4, #8]
 80125ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80125d2:	701a      	strb	r2, [r3, #0]
 80125d4:	68a3      	ldr	r3, [r4, #8]
 80125d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125da:	705a      	strb	r2, [r3, #1]
 80125dc:	68a3      	ldr	r3, [r4, #8]
 80125de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125e2:	709a      	strb	r2, [r3, #2]
 80125e4:	68a3      	ldr	r3, [r4, #8]
 80125e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125ea:	70da      	strb	r2, [r3, #3]
 80125ec:	68a3      	ldr	r3, [r4, #8]
 80125ee:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80125f2:	711a      	strb	r2, [r3, #4]
 80125f4:	68a3      	ldr	r3, [r4, #8]
 80125f6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80125fa:	715a      	strb	r2, [r3, #5]
 80125fc:	68a3      	ldr	r3, [r4, #8]
 80125fe:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012602:	719a      	strb	r2, [r3, #6]
 8012604:	68a3      	ldr	r3, [r4, #8]
 8012606:	f89d 2000 	ldrb.w	r2, [sp]
 801260a:	71da      	strb	r2, [r3, #7]
 801260c:	68a2      	ldr	r2, [r4, #8]
 801260e:	6923      	ldr	r3, [r4, #16]
 8012610:	3208      	adds	r2, #8
 8012612:	3308      	adds	r3, #8
 8012614:	2108      	movs	r1, #8
 8012616:	60a2      	str	r2, [r4, #8]
 8012618:	6123      	str	r3, [r4, #16]
 801261a:	7561      	strb	r1, [r4, #21]
 801261c:	7da0      	ldrb	r0, [r4, #22]
 801261e:	f080 0001 	eor.w	r0, r0, #1
 8012622:	b002      	add	sp, #8
 8012624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012628:	466b      	mov	r3, sp
 801262a:	cb03      	ldmia	r3!, {r0, r1}
 801262c:	68a3      	ldr	r3, [r4, #8]
 801262e:	6018      	str	r0, [r3, #0]
 8012630:	6059      	str	r1, [r3, #4]
 8012632:	e7eb      	b.n	801260c <ucdr_serialize_int64_t+0x10c>
 8012634:	68a2      	ldr	r2, [r4, #8]
 8012636:	6923      	ldr	r3, [r4, #16]
 8012638:	7da0      	ldrb	r0, [r4, #22]
 801263a:	7567      	strb	r7, [r4, #21]
 801263c:	1b92      	subs	r2, r2, r6
 801263e:	1b9b      	subs	r3, r3, r6
 8012640:	f080 0001 	eor.w	r0, r0, #1
 8012644:	60a2      	str	r2, [r4, #8]
 8012646:	6123      	str	r3, [r4, #16]
 8012648:	b002      	add	sp, #8
 801264a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801264e:	68a3      	ldr	r3, [r4, #8]
 8012650:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012654:	701a      	strb	r2, [r3, #0]
 8012656:	68a3      	ldr	r3, [r4, #8]
 8012658:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801265c:	701a      	strb	r2, [r3, #0]
 801265e:	68a3      	ldr	r3, [r4, #8]
 8012660:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012664:	701a      	strb	r2, [r3, #0]
 8012666:	68a3      	ldr	r3, [r4, #8]
 8012668:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801266c:	701a      	strb	r2, [r3, #0]
 801266e:	68a3      	ldr	r3, [r4, #8]
 8012670:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012674:	701a      	strb	r2, [r3, #0]
 8012676:	68a3      	ldr	r3, [r4, #8]
 8012678:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801267c:	701a      	strb	r2, [r3, #0]
 801267e:	68a3      	ldr	r3, [r4, #8]
 8012680:	f89d 2000 	ldrb.w	r2, [sp]
 8012684:	701a      	strb	r2, [r3, #0]
 8012686:	e78a      	b.n	801259e <ucdr_serialize_int64_t+0x9e>
 8012688:	4628      	mov	r0, r5
 801268a:	466d      	mov	r5, sp
 801268c:	4629      	mov	r1, r5
 801268e:	4632      	mov	r2, r6
 8012690:	f008 f894 	bl	801a7bc <memcpy>
 8012694:	68a0      	ldr	r0, [r4, #8]
 8012696:	4642      	mov	r2, r8
 8012698:	19a9      	adds	r1, r5, r6
 801269a:	f008 f88f 	bl	801a7bc <memcpy>
 801269e:	e77e      	b.n	801259e <ucdr_serialize_int64_t+0x9e>

080126a0 <ucdr_deserialize_int64_t>:
 80126a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126a4:	460d      	mov	r5, r1
 80126a6:	2108      	movs	r1, #8
 80126a8:	4604      	mov	r4, r0
 80126aa:	f000 fd0d 	bl	80130c8 <ucdr_buffer_alignment>
 80126ae:	4601      	mov	r1, r0
 80126b0:	4620      	mov	r0, r4
 80126b2:	f894 9015 	ldrb.w	r9, [r4, #21]
 80126b6:	f000 fd4b 	bl	8013150 <ucdr_advance_buffer>
 80126ba:	2108      	movs	r1, #8
 80126bc:	4620      	mov	r0, r4
 80126be:	f000 fca3 	bl	8013008 <ucdr_check_buffer_available_for>
 80126c2:	2800      	cmp	r0, #0
 80126c4:	d151      	bne.n	801276a <ucdr_deserialize_int64_t+0xca>
 80126c6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80126ca:	42be      	cmp	r6, r7
 80126cc:	d948      	bls.n	8012760 <ucdr_deserialize_int64_t+0xc0>
 80126ce:	6923      	ldr	r3, [r4, #16]
 80126d0:	60a6      	str	r6, [r4, #8]
 80126d2:	1bf6      	subs	r6, r6, r7
 80126d4:	4433      	add	r3, r6
 80126d6:	f1c6 0808 	rsb	r8, r6, #8
 80126da:	6123      	str	r3, [r4, #16]
 80126dc:	4641      	mov	r1, r8
 80126de:	4620      	mov	r0, r4
 80126e0:	f000 fc9e 	bl	8013020 <ucdr_check_final_buffer_behavior>
 80126e4:	2800      	cmp	r0, #0
 80126e6:	d06d      	beq.n	80127c4 <ucdr_deserialize_int64_t+0x124>
 80126e8:	7d23      	ldrb	r3, [r4, #20]
 80126ea:	2b01      	cmp	r3, #1
 80126ec:	f000 8093 	beq.w	8012816 <ucdr_deserialize_int64_t+0x176>
 80126f0:	79fb      	ldrb	r3, [r7, #7]
 80126f2:	702b      	strb	r3, [r5, #0]
 80126f4:	2e00      	cmp	r6, #0
 80126f6:	d072      	beq.n	80127de <ucdr_deserialize_int64_t+0x13e>
 80126f8:	79bb      	ldrb	r3, [r7, #6]
 80126fa:	706b      	strb	r3, [r5, #1]
 80126fc:	2e01      	cmp	r6, #1
 80126fe:	f105 0302 	add.w	r3, r5, #2
 8012702:	d070      	beq.n	80127e6 <ucdr_deserialize_int64_t+0x146>
 8012704:	797b      	ldrb	r3, [r7, #5]
 8012706:	70ab      	strb	r3, [r5, #2]
 8012708:	2e02      	cmp	r6, #2
 801270a:	f105 0303 	add.w	r3, r5, #3
 801270e:	d06e      	beq.n	80127ee <ucdr_deserialize_int64_t+0x14e>
 8012710:	793b      	ldrb	r3, [r7, #4]
 8012712:	70eb      	strb	r3, [r5, #3]
 8012714:	2e03      	cmp	r6, #3
 8012716:	f105 0304 	add.w	r3, r5, #4
 801271a:	d06c      	beq.n	80127f6 <ucdr_deserialize_int64_t+0x156>
 801271c:	78fb      	ldrb	r3, [r7, #3]
 801271e:	712b      	strb	r3, [r5, #4]
 8012720:	2e04      	cmp	r6, #4
 8012722:	f105 0305 	add.w	r3, r5, #5
 8012726:	d06a      	beq.n	80127fe <ucdr_deserialize_int64_t+0x15e>
 8012728:	78bb      	ldrb	r3, [r7, #2]
 801272a:	716b      	strb	r3, [r5, #5]
 801272c:	2e05      	cmp	r6, #5
 801272e:	f105 0306 	add.w	r3, r5, #6
 8012732:	d068      	beq.n	8012806 <ucdr_deserialize_int64_t+0x166>
 8012734:	787b      	ldrb	r3, [r7, #1]
 8012736:	71ab      	strb	r3, [r5, #6]
 8012738:	2e06      	cmp	r6, #6
 801273a:	f105 0307 	add.w	r3, r5, #7
 801273e:	d066      	beq.n	801280e <ucdr_deserialize_int64_t+0x16e>
 8012740:	783b      	ldrb	r3, [r7, #0]
 8012742:	71eb      	strb	r3, [r5, #7]
 8012744:	6923      	ldr	r3, [r4, #16]
 8012746:	68a2      	ldr	r2, [r4, #8]
 8012748:	7da0      	ldrb	r0, [r4, #22]
 801274a:	3308      	adds	r3, #8
 801274c:	1b9e      	subs	r6, r3, r6
 801274e:	2308      	movs	r3, #8
 8012750:	4442      	add	r2, r8
 8012752:	7563      	strb	r3, [r4, #21]
 8012754:	60a2      	str	r2, [r4, #8]
 8012756:	6126      	str	r6, [r4, #16]
 8012758:	f080 0001 	eor.w	r0, r0, #1
 801275c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012760:	2108      	movs	r1, #8
 8012762:	4620      	mov	r0, r4
 8012764:	f000 fc5c 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012768:	b310      	cbz	r0, 80127b0 <ucdr_deserialize_int64_t+0x110>
 801276a:	7d23      	ldrb	r3, [r4, #20]
 801276c:	2b01      	cmp	r3, #1
 801276e:	68a3      	ldr	r3, [r4, #8]
 8012770:	d023      	beq.n	80127ba <ucdr_deserialize_int64_t+0x11a>
 8012772:	79db      	ldrb	r3, [r3, #7]
 8012774:	702b      	strb	r3, [r5, #0]
 8012776:	68a3      	ldr	r3, [r4, #8]
 8012778:	799b      	ldrb	r3, [r3, #6]
 801277a:	706b      	strb	r3, [r5, #1]
 801277c:	68a3      	ldr	r3, [r4, #8]
 801277e:	795b      	ldrb	r3, [r3, #5]
 8012780:	70ab      	strb	r3, [r5, #2]
 8012782:	68a3      	ldr	r3, [r4, #8]
 8012784:	791b      	ldrb	r3, [r3, #4]
 8012786:	70eb      	strb	r3, [r5, #3]
 8012788:	68a3      	ldr	r3, [r4, #8]
 801278a:	78db      	ldrb	r3, [r3, #3]
 801278c:	712b      	strb	r3, [r5, #4]
 801278e:	68a3      	ldr	r3, [r4, #8]
 8012790:	789b      	ldrb	r3, [r3, #2]
 8012792:	716b      	strb	r3, [r5, #5]
 8012794:	68a3      	ldr	r3, [r4, #8]
 8012796:	785b      	ldrb	r3, [r3, #1]
 8012798:	71ab      	strb	r3, [r5, #6]
 801279a:	68a3      	ldr	r3, [r4, #8]
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	71eb      	strb	r3, [r5, #7]
 80127a0:	68a2      	ldr	r2, [r4, #8]
 80127a2:	6923      	ldr	r3, [r4, #16]
 80127a4:	3208      	adds	r2, #8
 80127a6:	3308      	adds	r3, #8
 80127a8:	2108      	movs	r1, #8
 80127aa:	60a2      	str	r2, [r4, #8]
 80127ac:	6123      	str	r3, [r4, #16]
 80127ae:	7561      	strb	r1, [r4, #21]
 80127b0:	7da0      	ldrb	r0, [r4, #22]
 80127b2:	f080 0001 	eor.w	r0, r0, #1
 80127b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127ba:	681a      	ldr	r2, [r3, #0]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	606b      	str	r3, [r5, #4]
 80127c0:	602a      	str	r2, [r5, #0]
 80127c2:	e7ed      	b.n	80127a0 <ucdr_deserialize_int64_t+0x100>
 80127c4:	68a2      	ldr	r2, [r4, #8]
 80127c6:	6923      	ldr	r3, [r4, #16]
 80127c8:	7da0      	ldrb	r0, [r4, #22]
 80127ca:	f884 9015 	strb.w	r9, [r4, #21]
 80127ce:	1b92      	subs	r2, r2, r6
 80127d0:	1b9b      	subs	r3, r3, r6
 80127d2:	60a2      	str	r2, [r4, #8]
 80127d4:	6123      	str	r3, [r4, #16]
 80127d6:	f080 0001 	eor.w	r0, r0, #1
 80127da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127de:	68a3      	ldr	r3, [r4, #8]
 80127e0:	799b      	ldrb	r3, [r3, #6]
 80127e2:	706b      	strb	r3, [r5, #1]
 80127e4:	1cab      	adds	r3, r5, #2
 80127e6:	68a2      	ldr	r2, [r4, #8]
 80127e8:	7952      	ldrb	r2, [r2, #5]
 80127ea:	f803 2b01 	strb.w	r2, [r3], #1
 80127ee:	68a2      	ldr	r2, [r4, #8]
 80127f0:	7912      	ldrb	r2, [r2, #4]
 80127f2:	f803 2b01 	strb.w	r2, [r3], #1
 80127f6:	68a2      	ldr	r2, [r4, #8]
 80127f8:	78d2      	ldrb	r2, [r2, #3]
 80127fa:	f803 2b01 	strb.w	r2, [r3], #1
 80127fe:	68a2      	ldr	r2, [r4, #8]
 8012800:	7892      	ldrb	r2, [r2, #2]
 8012802:	f803 2b01 	strb.w	r2, [r3], #1
 8012806:	68a2      	ldr	r2, [r4, #8]
 8012808:	7852      	ldrb	r2, [r2, #1]
 801280a:	f803 2b01 	strb.w	r2, [r3], #1
 801280e:	68a2      	ldr	r2, [r4, #8]
 8012810:	7812      	ldrb	r2, [r2, #0]
 8012812:	701a      	strb	r2, [r3, #0]
 8012814:	e796      	b.n	8012744 <ucdr_deserialize_int64_t+0xa4>
 8012816:	4639      	mov	r1, r7
 8012818:	4632      	mov	r2, r6
 801281a:	4628      	mov	r0, r5
 801281c:	f007 ffce 	bl	801a7bc <memcpy>
 8012820:	68a1      	ldr	r1, [r4, #8]
 8012822:	4642      	mov	r2, r8
 8012824:	19a8      	adds	r0, r5, r6
 8012826:	f007 ffc9 	bl	801a7bc <memcpy>
 801282a:	e78b      	b.n	8012744 <ucdr_deserialize_int64_t+0xa4>

0801282c <ucdr_serialize_float>:
 801282c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012830:	2104      	movs	r1, #4
 8012832:	b082      	sub	sp, #8
 8012834:	4604      	mov	r4, r0
 8012836:	ed8d 0a01 	vstr	s0, [sp, #4]
 801283a:	f000 fc45 	bl	80130c8 <ucdr_buffer_alignment>
 801283e:	4601      	mov	r1, r0
 8012840:	4620      	mov	r0, r4
 8012842:	7d67      	ldrb	r7, [r4, #21]
 8012844:	f000 fc84 	bl	8013150 <ucdr_advance_buffer>
 8012848:	2104      	movs	r1, #4
 801284a:	4620      	mov	r0, r4
 801284c:	f000 fbdc 	bl	8013008 <ucdr_check_buffer_available_for>
 8012850:	2800      	cmp	r0, #0
 8012852:	d139      	bne.n	80128c8 <ucdr_serialize_float+0x9c>
 8012854:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012858:	42ab      	cmp	r3, r5
 801285a:	d930      	bls.n	80128be <ucdr_serialize_float+0x92>
 801285c:	1b5e      	subs	r6, r3, r5
 801285e:	60a3      	str	r3, [r4, #8]
 8012860:	6923      	ldr	r3, [r4, #16]
 8012862:	f1c6 0804 	rsb	r8, r6, #4
 8012866:	4433      	add	r3, r6
 8012868:	6123      	str	r3, [r4, #16]
 801286a:	4641      	mov	r1, r8
 801286c:	4620      	mov	r0, r4
 801286e:	f000 fbd7 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012872:	2800      	cmp	r0, #0
 8012874:	d04c      	beq.n	8012910 <ucdr_serialize_float+0xe4>
 8012876:	7d23      	ldrb	r3, [r4, #20]
 8012878:	2b01      	cmp	r3, #1
 801287a:	d063      	beq.n	8012944 <ucdr_serialize_float+0x118>
 801287c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012880:	702b      	strb	r3, [r5, #0]
 8012882:	2e00      	cmp	r6, #0
 8012884:	d051      	beq.n	801292a <ucdr_serialize_float+0xfe>
 8012886:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801288a:	706b      	strb	r3, [r5, #1]
 801288c:	2e01      	cmp	r6, #1
 801288e:	d050      	beq.n	8012932 <ucdr_serialize_float+0x106>
 8012890:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012894:	70ab      	strb	r3, [r5, #2]
 8012896:	2e02      	cmp	r6, #2
 8012898:	d04f      	beq.n	801293a <ucdr_serialize_float+0x10e>
 801289a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801289e:	70eb      	strb	r3, [r5, #3]
 80128a0:	6923      	ldr	r3, [r4, #16]
 80128a2:	68a2      	ldr	r2, [r4, #8]
 80128a4:	7da0      	ldrb	r0, [r4, #22]
 80128a6:	3304      	adds	r3, #4
 80128a8:	1b9e      	subs	r6, r3, r6
 80128aa:	4442      	add	r2, r8
 80128ac:	2304      	movs	r3, #4
 80128ae:	f080 0001 	eor.w	r0, r0, #1
 80128b2:	60a2      	str	r2, [r4, #8]
 80128b4:	6126      	str	r6, [r4, #16]
 80128b6:	7563      	strb	r3, [r4, #21]
 80128b8:	b002      	add	sp, #8
 80128ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128be:	2104      	movs	r1, #4
 80128c0:	4620      	mov	r0, r4
 80128c2:	f000 fbad 	bl	8013020 <ucdr_check_final_buffer_behavior>
 80128c6:	b1d0      	cbz	r0, 80128fe <ucdr_serialize_float+0xd2>
 80128c8:	7d23      	ldrb	r3, [r4, #20]
 80128ca:	2b01      	cmp	r3, #1
 80128cc:	68a3      	ldr	r3, [r4, #8]
 80128ce:	d01c      	beq.n	801290a <ucdr_serialize_float+0xde>
 80128d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80128d4:	701a      	strb	r2, [r3, #0]
 80128d6:	68a3      	ldr	r3, [r4, #8]
 80128d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80128dc:	705a      	strb	r2, [r3, #1]
 80128de:	68a3      	ldr	r3, [r4, #8]
 80128e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80128e4:	709a      	strb	r2, [r3, #2]
 80128e6:	68a3      	ldr	r3, [r4, #8]
 80128e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80128ec:	70da      	strb	r2, [r3, #3]
 80128ee:	68a2      	ldr	r2, [r4, #8]
 80128f0:	6923      	ldr	r3, [r4, #16]
 80128f2:	3204      	adds	r2, #4
 80128f4:	3304      	adds	r3, #4
 80128f6:	2104      	movs	r1, #4
 80128f8:	60a2      	str	r2, [r4, #8]
 80128fa:	6123      	str	r3, [r4, #16]
 80128fc:	7561      	strb	r1, [r4, #21]
 80128fe:	7da0      	ldrb	r0, [r4, #22]
 8012900:	f080 0001 	eor.w	r0, r0, #1
 8012904:	b002      	add	sp, #8
 8012906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801290a:	9a01      	ldr	r2, [sp, #4]
 801290c:	601a      	str	r2, [r3, #0]
 801290e:	e7ee      	b.n	80128ee <ucdr_serialize_float+0xc2>
 8012910:	68a2      	ldr	r2, [r4, #8]
 8012912:	6923      	ldr	r3, [r4, #16]
 8012914:	7da0      	ldrb	r0, [r4, #22]
 8012916:	7567      	strb	r7, [r4, #21]
 8012918:	1b92      	subs	r2, r2, r6
 801291a:	1b9b      	subs	r3, r3, r6
 801291c:	f080 0001 	eor.w	r0, r0, #1
 8012920:	60a2      	str	r2, [r4, #8]
 8012922:	6123      	str	r3, [r4, #16]
 8012924:	b002      	add	sp, #8
 8012926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801292a:	68a3      	ldr	r3, [r4, #8]
 801292c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012930:	701a      	strb	r2, [r3, #0]
 8012932:	68a3      	ldr	r3, [r4, #8]
 8012934:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012938:	701a      	strb	r2, [r3, #0]
 801293a:	68a3      	ldr	r3, [r4, #8]
 801293c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012940:	701a      	strb	r2, [r3, #0]
 8012942:	e7ad      	b.n	80128a0 <ucdr_serialize_float+0x74>
 8012944:	4628      	mov	r0, r5
 8012946:	ad01      	add	r5, sp, #4
 8012948:	4629      	mov	r1, r5
 801294a:	4632      	mov	r2, r6
 801294c:	f007 ff36 	bl	801a7bc <memcpy>
 8012950:	68a0      	ldr	r0, [r4, #8]
 8012952:	4642      	mov	r2, r8
 8012954:	19a9      	adds	r1, r5, r6
 8012956:	f007 ff31 	bl	801a7bc <memcpy>
 801295a:	e7a1      	b.n	80128a0 <ucdr_serialize_float+0x74>

0801295c <ucdr_serialize_endian_float>:
 801295c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012960:	460d      	mov	r5, r1
 8012962:	b083      	sub	sp, #12
 8012964:	2104      	movs	r1, #4
 8012966:	4604      	mov	r4, r0
 8012968:	ed8d 0a01 	vstr	s0, [sp, #4]
 801296c:	f000 fbac 	bl	80130c8 <ucdr_buffer_alignment>
 8012970:	4601      	mov	r1, r0
 8012972:	4620      	mov	r0, r4
 8012974:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012978:	f000 fbea 	bl	8013150 <ucdr_advance_buffer>
 801297c:	2104      	movs	r1, #4
 801297e:	4620      	mov	r0, r4
 8012980:	f000 fb42 	bl	8013008 <ucdr_check_buffer_available_for>
 8012984:	2800      	cmp	r0, #0
 8012986:	d138      	bne.n	80129fa <ucdr_serialize_endian_float+0x9e>
 8012988:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801298c:	42b7      	cmp	r7, r6
 801298e:	d92f      	bls.n	80129f0 <ucdr_serialize_endian_float+0x94>
 8012990:	6923      	ldr	r3, [r4, #16]
 8012992:	60a7      	str	r7, [r4, #8]
 8012994:	1bbf      	subs	r7, r7, r6
 8012996:	443b      	add	r3, r7
 8012998:	f1c7 0904 	rsb	r9, r7, #4
 801299c:	6123      	str	r3, [r4, #16]
 801299e:	4649      	mov	r1, r9
 80129a0:	4620      	mov	r0, r4
 80129a2:	f000 fb3d 	bl	8013020 <ucdr_check_final_buffer_behavior>
 80129a6:	2800      	cmp	r0, #0
 80129a8:	d04a      	beq.n	8012a40 <ucdr_serialize_endian_float+0xe4>
 80129aa:	2d01      	cmp	r5, #1
 80129ac:	d063      	beq.n	8012a76 <ucdr_serialize_endian_float+0x11a>
 80129ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80129b2:	7033      	strb	r3, [r6, #0]
 80129b4:	2f00      	cmp	r7, #0
 80129b6:	d051      	beq.n	8012a5c <ucdr_serialize_endian_float+0x100>
 80129b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80129bc:	7073      	strb	r3, [r6, #1]
 80129be:	2f01      	cmp	r7, #1
 80129c0:	d050      	beq.n	8012a64 <ucdr_serialize_endian_float+0x108>
 80129c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80129c6:	70b3      	strb	r3, [r6, #2]
 80129c8:	2f02      	cmp	r7, #2
 80129ca:	d04f      	beq.n	8012a6c <ucdr_serialize_endian_float+0x110>
 80129cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80129d0:	70f3      	strb	r3, [r6, #3]
 80129d2:	6923      	ldr	r3, [r4, #16]
 80129d4:	68a2      	ldr	r2, [r4, #8]
 80129d6:	7da0      	ldrb	r0, [r4, #22]
 80129d8:	3304      	adds	r3, #4
 80129da:	444a      	add	r2, r9
 80129dc:	1bdb      	subs	r3, r3, r7
 80129de:	2104      	movs	r1, #4
 80129e0:	f080 0001 	eor.w	r0, r0, #1
 80129e4:	60a2      	str	r2, [r4, #8]
 80129e6:	6123      	str	r3, [r4, #16]
 80129e8:	7561      	strb	r1, [r4, #21]
 80129ea:	b003      	add	sp, #12
 80129ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129f0:	2104      	movs	r1, #4
 80129f2:	4620      	mov	r0, r4
 80129f4:	f000 fb14 	bl	8013020 <ucdr_check_final_buffer_behavior>
 80129f8:	b1c8      	cbz	r0, 8012a2e <ucdr_serialize_endian_float+0xd2>
 80129fa:	2d01      	cmp	r5, #1
 80129fc:	68a3      	ldr	r3, [r4, #8]
 80129fe:	d01c      	beq.n	8012a3a <ucdr_serialize_endian_float+0xde>
 8012a00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012a04:	701a      	strb	r2, [r3, #0]
 8012a06:	68a3      	ldr	r3, [r4, #8]
 8012a08:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a0c:	705a      	strb	r2, [r3, #1]
 8012a0e:	68a3      	ldr	r3, [r4, #8]
 8012a10:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012a14:	709a      	strb	r2, [r3, #2]
 8012a16:	68a3      	ldr	r3, [r4, #8]
 8012a18:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a1c:	70da      	strb	r2, [r3, #3]
 8012a1e:	68a2      	ldr	r2, [r4, #8]
 8012a20:	6923      	ldr	r3, [r4, #16]
 8012a22:	3204      	adds	r2, #4
 8012a24:	3304      	adds	r3, #4
 8012a26:	2104      	movs	r1, #4
 8012a28:	60a2      	str	r2, [r4, #8]
 8012a2a:	6123      	str	r3, [r4, #16]
 8012a2c:	7561      	strb	r1, [r4, #21]
 8012a2e:	7da0      	ldrb	r0, [r4, #22]
 8012a30:	f080 0001 	eor.w	r0, r0, #1
 8012a34:	b003      	add	sp, #12
 8012a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a3a:	9a01      	ldr	r2, [sp, #4]
 8012a3c:	601a      	str	r2, [r3, #0]
 8012a3e:	e7ee      	b.n	8012a1e <ucdr_serialize_endian_float+0xc2>
 8012a40:	68a2      	ldr	r2, [r4, #8]
 8012a42:	6923      	ldr	r3, [r4, #16]
 8012a44:	7da0      	ldrb	r0, [r4, #22]
 8012a46:	f884 8015 	strb.w	r8, [r4, #21]
 8012a4a:	1bd2      	subs	r2, r2, r7
 8012a4c:	1bdb      	subs	r3, r3, r7
 8012a4e:	f080 0001 	eor.w	r0, r0, #1
 8012a52:	60a2      	str	r2, [r4, #8]
 8012a54:	6123      	str	r3, [r4, #16]
 8012a56:	b003      	add	sp, #12
 8012a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a5c:	68a3      	ldr	r3, [r4, #8]
 8012a5e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a62:	701a      	strb	r2, [r3, #0]
 8012a64:	68a3      	ldr	r3, [r4, #8]
 8012a66:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012a6a:	701a      	strb	r2, [r3, #0]
 8012a6c:	68a3      	ldr	r3, [r4, #8]
 8012a6e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a72:	701a      	strb	r2, [r3, #0]
 8012a74:	e7ad      	b.n	80129d2 <ucdr_serialize_endian_float+0x76>
 8012a76:	ad01      	add	r5, sp, #4
 8012a78:	4629      	mov	r1, r5
 8012a7a:	463a      	mov	r2, r7
 8012a7c:	4630      	mov	r0, r6
 8012a7e:	f007 fe9d 	bl	801a7bc <memcpy>
 8012a82:	68a0      	ldr	r0, [r4, #8]
 8012a84:	464a      	mov	r2, r9
 8012a86:	19e9      	adds	r1, r5, r7
 8012a88:	f007 fe98 	bl	801a7bc <memcpy>
 8012a8c:	e7a1      	b.n	80129d2 <ucdr_serialize_endian_float+0x76>
 8012a8e:	bf00      	nop

08012a90 <ucdr_deserialize_float>:
 8012a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a94:	460d      	mov	r5, r1
 8012a96:	2104      	movs	r1, #4
 8012a98:	4604      	mov	r4, r0
 8012a9a:	f000 fb15 	bl	80130c8 <ucdr_buffer_alignment>
 8012a9e:	4601      	mov	r1, r0
 8012aa0:	4620      	mov	r0, r4
 8012aa2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012aa6:	f000 fb53 	bl	8013150 <ucdr_advance_buffer>
 8012aaa:	2104      	movs	r1, #4
 8012aac:	4620      	mov	r0, r4
 8012aae:	f000 faab 	bl	8013008 <ucdr_check_buffer_available_for>
 8012ab2:	2800      	cmp	r0, #0
 8012ab4:	d138      	bne.n	8012b28 <ucdr_deserialize_float+0x98>
 8012ab6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012aba:	42b7      	cmp	r7, r6
 8012abc:	d92f      	bls.n	8012b1e <ucdr_deserialize_float+0x8e>
 8012abe:	6923      	ldr	r3, [r4, #16]
 8012ac0:	60a7      	str	r7, [r4, #8]
 8012ac2:	1bbf      	subs	r7, r7, r6
 8012ac4:	443b      	add	r3, r7
 8012ac6:	f1c7 0904 	rsb	r9, r7, #4
 8012aca:	6123      	str	r3, [r4, #16]
 8012acc:	4649      	mov	r1, r9
 8012ace:	4620      	mov	r0, r4
 8012ad0:	f000 faa6 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012ad4:	2800      	cmp	r0, #0
 8012ad6:	d046      	beq.n	8012b66 <ucdr_deserialize_float+0xd6>
 8012ad8:	7d23      	ldrb	r3, [r4, #20]
 8012ada:	2b01      	cmp	r3, #1
 8012adc:	d05c      	beq.n	8012b98 <ucdr_deserialize_float+0x108>
 8012ade:	78f3      	ldrb	r3, [r6, #3]
 8012ae0:	702b      	strb	r3, [r5, #0]
 8012ae2:	2f00      	cmp	r7, #0
 8012ae4:	d04c      	beq.n	8012b80 <ucdr_deserialize_float+0xf0>
 8012ae6:	78b3      	ldrb	r3, [r6, #2]
 8012ae8:	706b      	strb	r3, [r5, #1]
 8012aea:	2f01      	cmp	r7, #1
 8012aec:	f105 0302 	add.w	r3, r5, #2
 8012af0:	d04a      	beq.n	8012b88 <ucdr_deserialize_float+0xf8>
 8012af2:	7873      	ldrb	r3, [r6, #1]
 8012af4:	70ab      	strb	r3, [r5, #2]
 8012af6:	2f02      	cmp	r7, #2
 8012af8:	f105 0303 	add.w	r3, r5, #3
 8012afc:	d048      	beq.n	8012b90 <ucdr_deserialize_float+0x100>
 8012afe:	7833      	ldrb	r3, [r6, #0]
 8012b00:	70eb      	strb	r3, [r5, #3]
 8012b02:	6923      	ldr	r3, [r4, #16]
 8012b04:	68a2      	ldr	r2, [r4, #8]
 8012b06:	7da0      	ldrb	r0, [r4, #22]
 8012b08:	2104      	movs	r1, #4
 8012b0a:	3304      	adds	r3, #4
 8012b0c:	444a      	add	r2, r9
 8012b0e:	1bdb      	subs	r3, r3, r7
 8012b10:	7561      	strb	r1, [r4, #21]
 8012b12:	60a2      	str	r2, [r4, #8]
 8012b14:	6123      	str	r3, [r4, #16]
 8012b16:	f080 0001 	eor.w	r0, r0, #1
 8012b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b1e:	2104      	movs	r1, #4
 8012b20:	4620      	mov	r0, r4
 8012b22:	f000 fa7d 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012b26:	b1b0      	cbz	r0, 8012b56 <ucdr_deserialize_float+0xc6>
 8012b28:	7d23      	ldrb	r3, [r4, #20]
 8012b2a:	2b01      	cmp	r3, #1
 8012b2c:	68a3      	ldr	r3, [r4, #8]
 8012b2e:	d017      	beq.n	8012b60 <ucdr_deserialize_float+0xd0>
 8012b30:	78db      	ldrb	r3, [r3, #3]
 8012b32:	702b      	strb	r3, [r5, #0]
 8012b34:	68a3      	ldr	r3, [r4, #8]
 8012b36:	789b      	ldrb	r3, [r3, #2]
 8012b38:	706b      	strb	r3, [r5, #1]
 8012b3a:	68a3      	ldr	r3, [r4, #8]
 8012b3c:	785b      	ldrb	r3, [r3, #1]
 8012b3e:	70ab      	strb	r3, [r5, #2]
 8012b40:	68a3      	ldr	r3, [r4, #8]
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	70eb      	strb	r3, [r5, #3]
 8012b46:	68a2      	ldr	r2, [r4, #8]
 8012b48:	6923      	ldr	r3, [r4, #16]
 8012b4a:	3204      	adds	r2, #4
 8012b4c:	3304      	adds	r3, #4
 8012b4e:	2104      	movs	r1, #4
 8012b50:	60a2      	str	r2, [r4, #8]
 8012b52:	6123      	str	r3, [r4, #16]
 8012b54:	7561      	strb	r1, [r4, #21]
 8012b56:	7da0      	ldrb	r0, [r4, #22]
 8012b58:	f080 0001 	eor.w	r0, r0, #1
 8012b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	602b      	str	r3, [r5, #0]
 8012b64:	e7ef      	b.n	8012b46 <ucdr_deserialize_float+0xb6>
 8012b66:	68a2      	ldr	r2, [r4, #8]
 8012b68:	6923      	ldr	r3, [r4, #16]
 8012b6a:	7da0      	ldrb	r0, [r4, #22]
 8012b6c:	f884 8015 	strb.w	r8, [r4, #21]
 8012b70:	1bd2      	subs	r2, r2, r7
 8012b72:	1bdb      	subs	r3, r3, r7
 8012b74:	60a2      	str	r2, [r4, #8]
 8012b76:	6123      	str	r3, [r4, #16]
 8012b78:	f080 0001 	eor.w	r0, r0, #1
 8012b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b80:	68a3      	ldr	r3, [r4, #8]
 8012b82:	789b      	ldrb	r3, [r3, #2]
 8012b84:	706b      	strb	r3, [r5, #1]
 8012b86:	1cab      	adds	r3, r5, #2
 8012b88:	68a2      	ldr	r2, [r4, #8]
 8012b8a:	7852      	ldrb	r2, [r2, #1]
 8012b8c:	f803 2b01 	strb.w	r2, [r3], #1
 8012b90:	68a2      	ldr	r2, [r4, #8]
 8012b92:	7812      	ldrb	r2, [r2, #0]
 8012b94:	701a      	strb	r2, [r3, #0]
 8012b96:	e7b4      	b.n	8012b02 <ucdr_deserialize_float+0x72>
 8012b98:	4631      	mov	r1, r6
 8012b9a:	463a      	mov	r2, r7
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	f007 fe0d 	bl	801a7bc <memcpy>
 8012ba2:	68a1      	ldr	r1, [r4, #8]
 8012ba4:	464a      	mov	r2, r9
 8012ba6:	19e8      	adds	r0, r5, r7
 8012ba8:	f007 fe08 	bl	801a7bc <memcpy>
 8012bac:	e7a9      	b.n	8012b02 <ucdr_deserialize_float+0x72>
 8012bae:	bf00      	nop

08012bb0 <ucdr_deserialize_endian_float>:
 8012bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bb4:	460e      	mov	r6, r1
 8012bb6:	2104      	movs	r1, #4
 8012bb8:	4604      	mov	r4, r0
 8012bba:	4615      	mov	r5, r2
 8012bbc:	f000 fa84 	bl	80130c8 <ucdr_buffer_alignment>
 8012bc0:	4601      	mov	r1, r0
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012bc8:	f000 fac2 	bl	8013150 <ucdr_advance_buffer>
 8012bcc:	2104      	movs	r1, #4
 8012bce:	4620      	mov	r0, r4
 8012bd0:	f000 fa1a 	bl	8013008 <ucdr_check_buffer_available_for>
 8012bd4:	2800      	cmp	r0, #0
 8012bd6:	d13c      	bne.n	8012c52 <ucdr_deserialize_endian_float+0xa2>
 8012bd8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012bdc:	42bb      	cmp	r3, r7
 8012bde:	d933      	bls.n	8012c48 <ucdr_deserialize_endian_float+0x98>
 8012be0:	eba3 0807 	sub.w	r8, r3, r7
 8012be4:	60a3      	str	r3, [r4, #8]
 8012be6:	6923      	ldr	r3, [r4, #16]
 8012be8:	f1c8 0a04 	rsb	sl, r8, #4
 8012bec:	4443      	add	r3, r8
 8012bee:	6123      	str	r3, [r4, #16]
 8012bf0:	4651      	mov	r1, sl
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	f000 fa14 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d048      	beq.n	8012c8e <ucdr_deserialize_endian_float+0xde>
 8012bfc:	2e01      	cmp	r6, #1
 8012bfe:	d061      	beq.n	8012cc4 <ucdr_deserialize_endian_float+0x114>
 8012c00:	78fb      	ldrb	r3, [r7, #3]
 8012c02:	702b      	strb	r3, [r5, #0]
 8012c04:	f1b8 0f00 	cmp.w	r8, #0
 8012c08:	d050      	beq.n	8012cac <ucdr_deserialize_endian_float+0xfc>
 8012c0a:	78bb      	ldrb	r3, [r7, #2]
 8012c0c:	706b      	strb	r3, [r5, #1]
 8012c0e:	f1b8 0f01 	cmp.w	r8, #1
 8012c12:	f105 0302 	add.w	r3, r5, #2
 8012c16:	d04d      	beq.n	8012cb4 <ucdr_deserialize_endian_float+0x104>
 8012c18:	787b      	ldrb	r3, [r7, #1]
 8012c1a:	70ab      	strb	r3, [r5, #2]
 8012c1c:	f1b8 0f02 	cmp.w	r8, #2
 8012c20:	f105 0303 	add.w	r3, r5, #3
 8012c24:	d04a      	beq.n	8012cbc <ucdr_deserialize_endian_float+0x10c>
 8012c26:	783b      	ldrb	r3, [r7, #0]
 8012c28:	70eb      	strb	r3, [r5, #3]
 8012c2a:	6923      	ldr	r3, [r4, #16]
 8012c2c:	68a2      	ldr	r2, [r4, #8]
 8012c2e:	7da0      	ldrb	r0, [r4, #22]
 8012c30:	2104      	movs	r1, #4
 8012c32:	3304      	adds	r3, #4
 8012c34:	4452      	add	r2, sl
 8012c36:	eba3 0308 	sub.w	r3, r3, r8
 8012c3a:	7561      	strb	r1, [r4, #21]
 8012c3c:	60a2      	str	r2, [r4, #8]
 8012c3e:	6123      	str	r3, [r4, #16]
 8012c40:	f080 0001 	eor.w	r0, r0, #1
 8012c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c48:	2104      	movs	r1, #4
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	f000 f9e8 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012c50:	b1a8      	cbz	r0, 8012c7e <ucdr_deserialize_endian_float+0xce>
 8012c52:	2e01      	cmp	r6, #1
 8012c54:	68a3      	ldr	r3, [r4, #8]
 8012c56:	d017      	beq.n	8012c88 <ucdr_deserialize_endian_float+0xd8>
 8012c58:	78db      	ldrb	r3, [r3, #3]
 8012c5a:	702b      	strb	r3, [r5, #0]
 8012c5c:	68a3      	ldr	r3, [r4, #8]
 8012c5e:	789b      	ldrb	r3, [r3, #2]
 8012c60:	706b      	strb	r3, [r5, #1]
 8012c62:	68a3      	ldr	r3, [r4, #8]
 8012c64:	785b      	ldrb	r3, [r3, #1]
 8012c66:	70ab      	strb	r3, [r5, #2]
 8012c68:	68a3      	ldr	r3, [r4, #8]
 8012c6a:	781b      	ldrb	r3, [r3, #0]
 8012c6c:	70eb      	strb	r3, [r5, #3]
 8012c6e:	68a2      	ldr	r2, [r4, #8]
 8012c70:	6923      	ldr	r3, [r4, #16]
 8012c72:	3204      	adds	r2, #4
 8012c74:	3304      	adds	r3, #4
 8012c76:	2104      	movs	r1, #4
 8012c78:	60a2      	str	r2, [r4, #8]
 8012c7a:	6123      	str	r3, [r4, #16]
 8012c7c:	7561      	strb	r1, [r4, #21]
 8012c7e:	7da0      	ldrb	r0, [r4, #22]
 8012c80:	f080 0001 	eor.w	r0, r0, #1
 8012c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	602b      	str	r3, [r5, #0]
 8012c8c:	e7ef      	b.n	8012c6e <ucdr_deserialize_endian_float+0xbe>
 8012c8e:	68a2      	ldr	r2, [r4, #8]
 8012c90:	6923      	ldr	r3, [r4, #16]
 8012c92:	7da0      	ldrb	r0, [r4, #22]
 8012c94:	f884 9015 	strb.w	r9, [r4, #21]
 8012c98:	eba2 0208 	sub.w	r2, r2, r8
 8012c9c:	eba3 0308 	sub.w	r3, r3, r8
 8012ca0:	60a2      	str	r2, [r4, #8]
 8012ca2:	6123      	str	r3, [r4, #16]
 8012ca4:	f080 0001 	eor.w	r0, r0, #1
 8012ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cac:	68a3      	ldr	r3, [r4, #8]
 8012cae:	789b      	ldrb	r3, [r3, #2]
 8012cb0:	706b      	strb	r3, [r5, #1]
 8012cb2:	1cab      	adds	r3, r5, #2
 8012cb4:	68a2      	ldr	r2, [r4, #8]
 8012cb6:	7852      	ldrb	r2, [r2, #1]
 8012cb8:	f803 2b01 	strb.w	r2, [r3], #1
 8012cbc:	68a2      	ldr	r2, [r4, #8]
 8012cbe:	7812      	ldrb	r2, [r2, #0]
 8012cc0:	701a      	strb	r2, [r3, #0]
 8012cc2:	e7b2      	b.n	8012c2a <ucdr_deserialize_endian_float+0x7a>
 8012cc4:	4639      	mov	r1, r7
 8012cc6:	4642      	mov	r2, r8
 8012cc8:	4628      	mov	r0, r5
 8012cca:	f007 fd77 	bl	801a7bc <memcpy>
 8012cce:	68a1      	ldr	r1, [r4, #8]
 8012cd0:	4652      	mov	r2, sl
 8012cd2:	eb05 0008 	add.w	r0, r5, r8
 8012cd6:	f007 fd71 	bl	801a7bc <memcpy>
 8012cda:	e7a6      	b.n	8012c2a <ucdr_deserialize_endian_float+0x7a>

08012cdc <ucdr_serialize_double>:
 8012cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ce0:	2108      	movs	r1, #8
 8012ce2:	b082      	sub	sp, #8
 8012ce4:	4604      	mov	r4, r0
 8012ce6:	ed8d 0b00 	vstr	d0, [sp]
 8012cea:	f000 f9ed 	bl	80130c8 <ucdr_buffer_alignment>
 8012cee:	4601      	mov	r1, r0
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	7d67      	ldrb	r7, [r4, #21]
 8012cf4:	f000 fa2c 	bl	8013150 <ucdr_advance_buffer>
 8012cf8:	2108      	movs	r1, #8
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	f000 f984 	bl	8013008 <ucdr_check_buffer_available_for>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	d14e      	bne.n	8012da2 <ucdr_serialize_double+0xc6>
 8012d04:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012d08:	42ab      	cmp	r3, r5
 8012d0a:	d945      	bls.n	8012d98 <ucdr_serialize_double+0xbc>
 8012d0c:	1b5e      	subs	r6, r3, r5
 8012d0e:	60a3      	str	r3, [r4, #8]
 8012d10:	6923      	ldr	r3, [r4, #16]
 8012d12:	f1c6 0808 	rsb	r8, r6, #8
 8012d16:	4433      	add	r3, r6
 8012d18:	6123      	str	r3, [r4, #16]
 8012d1a:	4641      	mov	r1, r8
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f000 f97f 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012d22:	2800      	cmp	r0, #0
 8012d24:	d074      	beq.n	8012e10 <ucdr_serialize_double+0x134>
 8012d26:	7d23      	ldrb	r3, [r4, #20]
 8012d28:	2b01      	cmp	r3, #1
 8012d2a:	f000 809b 	beq.w	8012e64 <ucdr_serialize_double+0x188>
 8012d2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d32:	702b      	strb	r3, [r5, #0]
 8012d34:	2e00      	cmp	r6, #0
 8012d36:	d078      	beq.n	8012e2a <ucdr_serialize_double+0x14e>
 8012d38:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d3c:	706b      	strb	r3, [r5, #1]
 8012d3e:	2e01      	cmp	r6, #1
 8012d40:	d077      	beq.n	8012e32 <ucdr_serialize_double+0x156>
 8012d42:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012d46:	70ab      	strb	r3, [r5, #2]
 8012d48:	2e02      	cmp	r6, #2
 8012d4a:	d076      	beq.n	8012e3a <ucdr_serialize_double+0x15e>
 8012d4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012d50:	70eb      	strb	r3, [r5, #3]
 8012d52:	2e03      	cmp	r6, #3
 8012d54:	d075      	beq.n	8012e42 <ucdr_serialize_double+0x166>
 8012d56:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012d5a:	712b      	strb	r3, [r5, #4]
 8012d5c:	2e04      	cmp	r6, #4
 8012d5e:	d074      	beq.n	8012e4a <ucdr_serialize_double+0x16e>
 8012d60:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012d64:	716b      	strb	r3, [r5, #5]
 8012d66:	2e05      	cmp	r6, #5
 8012d68:	d073      	beq.n	8012e52 <ucdr_serialize_double+0x176>
 8012d6a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012d6e:	71ab      	strb	r3, [r5, #6]
 8012d70:	2e06      	cmp	r6, #6
 8012d72:	d072      	beq.n	8012e5a <ucdr_serialize_double+0x17e>
 8012d74:	f89d 3000 	ldrb.w	r3, [sp]
 8012d78:	71eb      	strb	r3, [r5, #7]
 8012d7a:	6923      	ldr	r3, [r4, #16]
 8012d7c:	68a2      	ldr	r2, [r4, #8]
 8012d7e:	7da0      	ldrb	r0, [r4, #22]
 8012d80:	3308      	adds	r3, #8
 8012d82:	1b9e      	subs	r6, r3, r6
 8012d84:	4442      	add	r2, r8
 8012d86:	2308      	movs	r3, #8
 8012d88:	f080 0001 	eor.w	r0, r0, #1
 8012d8c:	60a2      	str	r2, [r4, #8]
 8012d8e:	6126      	str	r6, [r4, #16]
 8012d90:	7563      	strb	r3, [r4, #21]
 8012d92:	b002      	add	sp, #8
 8012d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d98:	2108      	movs	r1, #8
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	f000 f940 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012da0:	b350      	cbz	r0, 8012df8 <ucdr_serialize_double+0x11c>
 8012da2:	7d23      	ldrb	r3, [r4, #20]
 8012da4:	2b01      	cmp	r3, #1
 8012da6:	d02d      	beq.n	8012e04 <ucdr_serialize_double+0x128>
 8012da8:	68a3      	ldr	r3, [r4, #8]
 8012daa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012dae:	701a      	strb	r2, [r3, #0]
 8012db0:	68a3      	ldr	r3, [r4, #8]
 8012db2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012db6:	705a      	strb	r2, [r3, #1]
 8012db8:	68a3      	ldr	r3, [r4, #8]
 8012dba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012dbe:	709a      	strb	r2, [r3, #2]
 8012dc0:	68a3      	ldr	r3, [r4, #8]
 8012dc2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012dc6:	70da      	strb	r2, [r3, #3]
 8012dc8:	68a3      	ldr	r3, [r4, #8]
 8012dca:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012dce:	711a      	strb	r2, [r3, #4]
 8012dd0:	68a3      	ldr	r3, [r4, #8]
 8012dd2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012dd6:	715a      	strb	r2, [r3, #5]
 8012dd8:	68a3      	ldr	r3, [r4, #8]
 8012dda:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012dde:	719a      	strb	r2, [r3, #6]
 8012de0:	68a3      	ldr	r3, [r4, #8]
 8012de2:	f89d 2000 	ldrb.w	r2, [sp]
 8012de6:	71da      	strb	r2, [r3, #7]
 8012de8:	68a2      	ldr	r2, [r4, #8]
 8012dea:	6923      	ldr	r3, [r4, #16]
 8012dec:	3208      	adds	r2, #8
 8012dee:	3308      	adds	r3, #8
 8012df0:	2108      	movs	r1, #8
 8012df2:	60a2      	str	r2, [r4, #8]
 8012df4:	6123      	str	r3, [r4, #16]
 8012df6:	7561      	strb	r1, [r4, #21]
 8012df8:	7da0      	ldrb	r0, [r4, #22]
 8012dfa:	f080 0001 	eor.w	r0, r0, #1
 8012dfe:	b002      	add	sp, #8
 8012e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e04:	466b      	mov	r3, sp
 8012e06:	cb03      	ldmia	r3!, {r0, r1}
 8012e08:	68a3      	ldr	r3, [r4, #8]
 8012e0a:	6018      	str	r0, [r3, #0]
 8012e0c:	6059      	str	r1, [r3, #4]
 8012e0e:	e7eb      	b.n	8012de8 <ucdr_serialize_double+0x10c>
 8012e10:	68a2      	ldr	r2, [r4, #8]
 8012e12:	6923      	ldr	r3, [r4, #16]
 8012e14:	7da0      	ldrb	r0, [r4, #22]
 8012e16:	7567      	strb	r7, [r4, #21]
 8012e18:	1b92      	subs	r2, r2, r6
 8012e1a:	1b9b      	subs	r3, r3, r6
 8012e1c:	f080 0001 	eor.w	r0, r0, #1
 8012e20:	60a2      	str	r2, [r4, #8]
 8012e22:	6123      	str	r3, [r4, #16]
 8012e24:	b002      	add	sp, #8
 8012e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e2a:	68a3      	ldr	r3, [r4, #8]
 8012e2c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012e30:	701a      	strb	r2, [r3, #0]
 8012e32:	68a3      	ldr	r3, [r4, #8]
 8012e34:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012e38:	701a      	strb	r2, [r3, #0]
 8012e3a:	68a3      	ldr	r3, [r4, #8]
 8012e3c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012e40:	701a      	strb	r2, [r3, #0]
 8012e42:	68a3      	ldr	r3, [r4, #8]
 8012e44:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012e48:	701a      	strb	r2, [r3, #0]
 8012e4a:	68a3      	ldr	r3, [r4, #8]
 8012e4c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012e50:	701a      	strb	r2, [r3, #0]
 8012e52:	68a3      	ldr	r3, [r4, #8]
 8012e54:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012e58:	701a      	strb	r2, [r3, #0]
 8012e5a:	68a3      	ldr	r3, [r4, #8]
 8012e5c:	f89d 2000 	ldrb.w	r2, [sp]
 8012e60:	701a      	strb	r2, [r3, #0]
 8012e62:	e78a      	b.n	8012d7a <ucdr_serialize_double+0x9e>
 8012e64:	4628      	mov	r0, r5
 8012e66:	466d      	mov	r5, sp
 8012e68:	4629      	mov	r1, r5
 8012e6a:	4632      	mov	r2, r6
 8012e6c:	f007 fca6 	bl	801a7bc <memcpy>
 8012e70:	68a0      	ldr	r0, [r4, #8]
 8012e72:	4642      	mov	r2, r8
 8012e74:	19a9      	adds	r1, r5, r6
 8012e76:	f007 fca1 	bl	801a7bc <memcpy>
 8012e7a:	e77e      	b.n	8012d7a <ucdr_serialize_double+0x9e>

08012e7c <ucdr_deserialize_double>:
 8012e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e80:	460d      	mov	r5, r1
 8012e82:	2108      	movs	r1, #8
 8012e84:	4604      	mov	r4, r0
 8012e86:	f000 f91f 	bl	80130c8 <ucdr_buffer_alignment>
 8012e8a:	4601      	mov	r1, r0
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012e92:	f000 f95d 	bl	8013150 <ucdr_advance_buffer>
 8012e96:	2108      	movs	r1, #8
 8012e98:	4620      	mov	r0, r4
 8012e9a:	f000 f8b5 	bl	8013008 <ucdr_check_buffer_available_for>
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	d151      	bne.n	8012f46 <ucdr_deserialize_double+0xca>
 8012ea2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012ea6:	42be      	cmp	r6, r7
 8012ea8:	d948      	bls.n	8012f3c <ucdr_deserialize_double+0xc0>
 8012eaa:	6923      	ldr	r3, [r4, #16]
 8012eac:	60a6      	str	r6, [r4, #8]
 8012eae:	1bf6      	subs	r6, r6, r7
 8012eb0:	4433      	add	r3, r6
 8012eb2:	f1c6 0808 	rsb	r8, r6, #8
 8012eb6:	6123      	str	r3, [r4, #16]
 8012eb8:	4641      	mov	r1, r8
 8012eba:	4620      	mov	r0, r4
 8012ebc:	f000 f8b0 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	d06d      	beq.n	8012fa0 <ucdr_deserialize_double+0x124>
 8012ec4:	7d23      	ldrb	r3, [r4, #20]
 8012ec6:	2b01      	cmp	r3, #1
 8012ec8:	f000 8093 	beq.w	8012ff2 <ucdr_deserialize_double+0x176>
 8012ecc:	79fb      	ldrb	r3, [r7, #7]
 8012ece:	702b      	strb	r3, [r5, #0]
 8012ed0:	2e00      	cmp	r6, #0
 8012ed2:	d072      	beq.n	8012fba <ucdr_deserialize_double+0x13e>
 8012ed4:	79bb      	ldrb	r3, [r7, #6]
 8012ed6:	706b      	strb	r3, [r5, #1]
 8012ed8:	2e01      	cmp	r6, #1
 8012eda:	f105 0302 	add.w	r3, r5, #2
 8012ede:	d070      	beq.n	8012fc2 <ucdr_deserialize_double+0x146>
 8012ee0:	797b      	ldrb	r3, [r7, #5]
 8012ee2:	70ab      	strb	r3, [r5, #2]
 8012ee4:	2e02      	cmp	r6, #2
 8012ee6:	f105 0303 	add.w	r3, r5, #3
 8012eea:	d06e      	beq.n	8012fca <ucdr_deserialize_double+0x14e>
 8012eec:	793b      	ldrb	r3, [r7, #4]
 8012eee:	70eb      	strb	r3, [r5, #3]
 8012ef0:	2e03      	cmp	r6, #3
 8012ef2:	f105 0304 	add.w	r3, r5, #4
 8012ef6:	d06c      	beq.n	8012fd2 <ucdr_deserialize_double+0x156>
 8012ef8:	78fb      	ldrb	r3, [r7, #3]
 8012efa:	712b      	strb	r3, [r5, #4]
 8012efc:	2e04      	cmp	r6, #4
 8012efe:	f105 0305 	add.w	r3, r5, #5
 8012f02:	d06a      	beq.n	8012fda <ucdr_deserialize_double+0x15e>
 8012f04:	78bb      	ldrb	r3, [r7, #2]
 8012f06:	716b      	strb	r3, [r5, #5]
 8012f08:	2e05      	cmp	r6, #5
 8012f0a:	f105 0306 	add.w	r3, r5, #6
 8012f0e:	d068      	beq.n	8012fe2 <ucdr_deserialize_double+0x166>
 8012f10:	787b      	ldrb	r3, [r7, #1]
 8012f12:	71ab      	strb	r3, [r5, #6]
 8012f14:	2e06      	cmp	r6, #6
 8012f16:	f105 0307 	add.w	r3, r5, #7
 8012f1a:	d066      	beq.n	8012fea <ucdr_deserialize_double+0x16e>
 8012f1c:	783b      	ldrb	r3, [r7, #0]
 8012f1e:	71eb      	strb	r3, [r5, #7]
 8012f20:	6923      	ldr	r3, [r4, #16]
 8012f22:	68a2      	ldr	r2, [r4, #8]
 8012f24:	7da0      	ldrb	r0, [r4, #22]
 8012f26:	3308      	adds	r3, #8
 8012f28:	1b9e      	subs	r6, r3, r6
 8012f2a:	2308      	movs	r3, #8
 8012f2c:	4442      	add	r2, r8
 8012f2e:	7563      	strb	r3, [r4, #21]
 8012f30:	60a2      	str	r2, [r4, #8]
 8012f32:	6126      	str	r6, [r4, #16]
 8012f34:	f080 0001 	eor.w	r0, r0, #1
 8012f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f3c:	2108      	movs	r1, #8
 8012f3e:	4620      	mov	r0, r4
 8012f40:	f000 f86e 	bl	8013020 <ucdr_check_final_buffer_behavior>
 8012f44:	b310      	cbz	r0, 8012f8c <ucdr_deserialize_double+0x110>
 8012f46:	7d23      	ldrb	r3, [r4, #20]
 8012f48:	2b01      	cmp	r3, #1
 8012f4a:	68a3      	ldr	r3, [r4, #8]
 8012f4c:	d023      	beq.n	8012f96 <ucdr_deserialize_double+0x11a>
 8012f4e:	79db      	ldrb	r3, [r3, #7]
 8012f50:	702b      	strb	r3, [r5, #0]
 8012f52:	68a3      	ldr	r3, [r4, #8]
 8012f54:	799b      	ldrb	r3, [r3, #6]
 8012f56:	706b      	strb	r3, [r5, #1]
 8012f58:	68a3      	ldr	r3, [r4, #8]
 8012f5a:	795b      	ldrb	r3, [r3, #5]
 8012f5c:	70ab      	strb	r3, [r5, #2]
 8012f5e:	68a3      	ldr	r3, [r4, #8]
 8012f60:	791b      	ldrb	r3, [r3, #4]
 8012f62:	70eb      	strb	r3, [r5, #3]
 8012f64:	68a3      	ldr	r3, [r4, #8]
 8012f66:	78db      	ldrb	r3, [r3, #3]
 8012f68:	712b      	strb	r3, [r5, #4]
 8012f6a:	68a3      	ldr	r3, [r4, #8]
 8012f6c:	789b      	ldrb	r3, [r3, #2]
 8012f6e:	716b      	strb	r3, [r5, #5]
 8012f70:	68a3      	ldr	r3, [r4, #8]
 8012f72:	785b      	ldrb	r3, [r3, #1]
 8012f74:	71ab      	strb	r3, [r5, #6]
 8012f76:	68a3      	ldr	r3, [r4, #8]
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	71eb      	strb	r3, [r5, #7]
 8012f7c:	68a2      	ldr	r2, [r4, #8]
 8012f7e:	6923      	ldr	r3, [r4, #16]
 8012f80:	3208      	adds	r2, #8
 8012f82:	3308      	adds	r3, #8
 8012f84:	2108      	movs	r1, #8
 8012f86:	60a2      	str	r2, [r4, #8]
 8012f88:	6123      	str	r3, [r4, #16]
 8012f8a:	7561      	strb	r1, [r4, #21]
 8012f8c:	7da0      	ldrb	r0, [r4, #22]
 8012f8e:	f080 0001 	eor.w	r0, r0, #1
 8012f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f96:	681a      	ldr	r2, [r3, #0]
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	606b      	str	r3, [r5, #4]
 8012f9c:	602a      	str	r2, [r5, #0]
 8012f9e:	e7ed      	b.n	8012f7c <ucdr_deserialize_double+0x100>
 8012fa0:	68a2      	ldr	r2, [r4, #8]
 8012fa2:	6923      	ldr	r3, [r4, #16]
 8012fa4:	7da0      	ldrb	r0, [r4, #22]
 8012fa6:	f884 9015 	strb.w	r9, [r4, #21]
 8012faa:	1b92      	subs	r2, r2, r6
 8012fac:	1b9b      	subs	r3, r3, r6
 8012fae:	60a2      	str	r2, [r4, #8]
 8012fb0:	6123      	str	r3, [r4, #16]
 8012fb2:	f080 0001 	eor.w	r0, r0, #1
 8012fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fba:	68a3      	ldr	r3, [r4, #8]
 8012fbc:	799b      	ldrb	r3, [r3, #6]
 8012fbe:	706b      	strb	r3, [r5, #1]
 8012fc0:	1cab      	adds	r3, r5, #2
 8012fc2:	68a2      	ldr	r2, [r4, #8]
 8012fc4:	7952      	ldrb	r2, [r2, #5]
 8012fc6:	f803 2b01 	strb.w	r2, [r3], #1
 8012fca:	68a2      	ldr	r2, [r4, #8]
 8012fcc:	7912      	ldrb	r2, [r2, #4]
 8012fce:	f803 2b01 	strb.w	r2, [r3], #1
 8012fd2:	68a2      	ldr	r2, [r4, #8]
 8012fd4:	78d2      	ldrb	r2, [r2, #3]
 8012fd6:	f803 2b01 	strb.w	r2, [r3], #1
 8012fda:	68a2      	ldr	r2, [r4, #8]
 8012fdc:	7892      	ldrb	r2, [r2, #2]
 8012fde:	f803 2b01 	strb.w	r2, [r3], #1
 8012fe2:	68a2      	ldr	r2, [r4, #8]
 8012fe4:	7852      	ldrb	r2, [r2, #1]
 8012fe6:	f803 2b01 	strb.w	r2, [r3], #1
 8012fea:	68a2      	ldr	r2, [r4, #8]
 8012fec:	7812      	ldrb	r2, [r2, #0]
 8012fee:	701a      	strb	r2, [r3, #0]
 8012ff0:	e796      	b.n	8012f20 <ucdr_deserialize_double+0xa4>
 8012ff2:	4639      	mov	r1, r7
 8012ff4:	4632      	mov	r2, r6
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	f007 fbe0 	bl	801a7bc <memcpy>
 8012ffc:	68a1      	ldr	r1, [r4, #8]
 8012ffe:	4642      	mov	r2, r8
 8013000:	19a8      	adds	r0, r5, r6
 8013002:	f007 fbdb 	bl	801a7bc <memcpy>
 8013006:	e78b      	b.n	8012f20 <ucdr_deserialize_double+0xa4>

08013008 <ucdr_check_buffer_available_for>:
 8013008:	7d83      	ldrb	r3, [r0, #22]
 801300a:	b93b      	cbnz	r3, 801301c <ucdr_check_buffer_available_for+0x14>
 801300c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8013010:	4419      	add	r1, r3
 8013012:	4288      	cmp	r0, r1
 8013014:	bf34      	ite	cc
 8013016:	2000      	movcc	r0, #0
 8013018:	2001      	movcs	r0, #1
 801301a:	4770      	bx	lr
 801301c:	2000      	movs	r0, #0
 801301e:	4770      	bx	lr

08013020 <ucdr_check_final_buffer_behavior>:
 8013020:	7d83      	ldrb	r3, [r0, #22]
 8013022:	b943      	cbnz	r3, 8013036 <ucdr_check_final_buffer_behavior+0x16>
 8013024:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8013028:	4291      	cmp	r1, r2
 801302a:	b510      	push	{r4, lr}
 801302c:	4604      	mov	r4, r0
 801302e:	d205      	bcs.n	801303c <ucdr_check_final_buffer_behavior+0x1c>
 8013030:	2301      	movs	r3, #1
 8013032:	4618      	mov	r0, r3
 8013034:	bd10      	pop	{r4, pc}
 8013036:	2300      	movs	r3, #0
 8013038:	4618      	mov	r0, r3
 801303a:	4770      	bx	lr
 801303c:	6982      	ldr	r2, [r0, #24]
 801303e:	b13a      	cbz	r2, 8013050 <ucdr_check_final_buffer_behavior+0x30>
 8013040:	69c1      	ldr	r1, [r0, #28]
 8013042:	4790      	blx	r2
 8013044:	f080 0301 	eor.w	r3, r0, #1
 8013048:	b2db      	uxtb	r3, r3
 801304a:	75a0      	strb	r0, [r4, #22]
 801304c:	4618      	mov	r0, r3
 801304e:	bd10      	pop	{r4, pc}
 8013050:	2001      	movs	r0, #1
 8013052:	75a0      	strb	r0, [r4, #22]
 8013054:	e7fa      	b.n	801304c <ucdr_check_final_buffer_behavior+0x2c>
 8013056:	bf00      	nop

08013058 <ucdr_set_on_full_buffer_callback>:
 8013058:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801305c:	4770      	bx	lr
 801305e:	bf00      	nop

08013060 <ucdr_init_buffer_origin_offset_endian>:
 8013060:	b410      	push	{r4}
 8013062:	9c01      	ldr	r4, [sp, #4]
 8013064:	6001      	str	r1, [r0, #0]
 8013066:	440a      	add	r2, r1
 8013068:	6042      	str	r2, [r0, #4]
 801306a:	190a      	adds	r2, r1, r4
 801306c:	441c      	add	r4, r3
 801306e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8013072:	6082      	str	r2, [r0, #8]
 8013074:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013078:	7503      	strb	r3, [r0, #20]
 801307a:	2200      	movs	r2, #0
 801307c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013084:	7542      	strb	r2, [r0, #21]
 8013086:	7582      	strb	r2, [r0, #22]
 8013088:	4770      	bx	lr
 801308a:	bf00      	nop

0801308c <ucdr_init_buffer_origin_offset>:
 801308c:	b510      	push	{r4, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	9c04      	ldr	r4, [sp, #16]
 8013092:	9400      	str	r4, [sp, #0]
 8013094:	2401      	movs	r4, #1
 8013096:	9401      	str	r4, [sp, #4]
 8013098:	f7ff ffe2 	bl	8013060 <ucdr_init_buffer_origin_offset_endian>
 801309c:	b002      	add	sp, #8
 801309e:	bd10      	pop	{r4, pc}

080130a0 <ucdr_init_buffer_origin>:
 80130a0:	b510      	push	{r4, lr}
 80130a2:	b082      	sub	sp, #8
 80130a4:	2400      	movs	r4, #0
 80130a6:	9400      	str	r4, [sp, #0]
 80130a8:	f7ff fff0 	bl	801308c <ucdr_init_buffer_origin_offset>
 80130ac:	b002      	add	sp, #8
 80130ae:	bd10      	pop	{r4, pc}

080130b0 <ucdr_init_buffer>:
 80130b0:	2300      	movs	r3, #0
 80130b2:	f7ff bff5 	b.w	80130a0 <ucdr_init_buffer_origin>
 80130b6:	bf00      	nop

080130b8 <ucdr_alignment>:
 80130b8:	fbb0 f3f1 	udiv	r3, r0, r1
 80130bc:	fb03 0011 	mls	r0, r3, r1, r0
 80130c0:	1a08      	subs	r0, r1, r0
 80130c2:	3901      	subs	r1, #1
 80130c4:	4008      	ands	r0, r1
 80130c6:	4770      	bx	lr

080130c8 <ucdr_buffer_alignment>:
 80130c8:	7d43      	ldrb	r3, [r0, #21]
 80130ca:	428b      	cmp	r3, r1
 80130cc:	d208      	bcs.n	80130e0 <ucdr_buffer_alignment+0x18>
 80130ce:	6900      	ldr	r0, [r0, #16]
 80130d0:	fbb0 f3f1 	udiv	r3, r0, r1
 80130d4:	fb01 0013 	mls	r0, r1, r3, r0
 80130d8:	1a08      	subs	r0, r1, r0
 80130da:	3901      	subs	r1, #1
 80130dc:	4008      	ands	r0, r1
 80130de:	4770      	bx	lr
 80130e0:	2000      	movs	r0, #0
 80130e2:	4770      	bx	lr

080130e4 <ucdr_align_to>:
 80130e4:	b538      	push	{r3, r4, r5, lr}
 80130e6:	4604      	mov	r4, r0
 80130e8:	460d      	mov	r5, r1
 80130ea:	f7ff ffed 	bl	80130c8 <ucdr_buffer_alignment>
 80130ee:	68a3      	ldr	r3, [r4, #8]
 80130f0:	6921      	ldr	r1, [r4, #16]
 80130f2:	7565      	strb	r5, [r4, #21]
 80130f4:	181a      	adds	r2, r3, r0
 80130f6:	6863      	ldr	r3, [r4, #4]
 80130f8:	4293      	cmp	r3, r2
 80130fa:	4408      	add	r0, r1
 80130fc:	bf28      	it	cs
 80130fe:	4613      	movcs	r3, r2
 8013100:	6120      	str	r0, [r4, #16]
 8013102:	60a3      	str	r3, [r4, #8]
 8013104:	bd38      	pop	{r3, r4, r5, pc}
 8013106:	bf00      	nop

08013108 <ucdr_buffer_length>:
 8013108:	6882      	ldr	r2, [r0, #8]
 801310a:	6800      	ldr	r0, [r0, #0]
 801310c:	1a10      	subs	r0, r2, r0
 801310e:	4770      	bx	lr

08013110 <ucdr_buffer_remaining>:
 8013110:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8013114:	1a10      	subs	r0, r2, r0
 8013116:	4770      	bx	lr

08013118 <ucdr_check_final_buffer_behavior_array>:
 8013118:	b538      	push	{r3, r4, r5, lr}
 801311a:	7d83      	ldrb	r3, [r0, #22]
 801311c:	b963      	cbnz	r3, 8013138 <ucdr_check_final_buffer_behavior_array+0x20>
 801311e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013122:	429a      	cmp	r2, r3
 8013124:	4604      	mov	r4, r0
 8013126:	460d      	mov	r5, r1
 8013128:	d308      	bcc.n	801313c <ucdr_check_final_buffer_behavior_array+0x24>
 801312a:	b139      	cbz	r1, 801313c <ucdr_check_final_buffer_behavior_array+0x24>
 801312c:	6983      	ldr	r3, [r0, #24]
 801312e:	b163      	cbz	r3, 801314a <ucdr_check_final_buffer_behavior_array+0x32>
 8013130:	69c1      	ldr	r1, [r0, #28]
 8013132:	4798      	blx	r3
 8013134:	75a0      	strb	r0, [r4, #22]
 8013136:	b108      	cbz	r0, 801313c <ucdr_check_final_buffer_behavior_array+0x24>
 8013138:	2000      	movs	r0, #0
 801313a:	bd38      	pop	{r3, r4, r5, pc}
 801313c:	4620      	mov	r0, r4
 801313e:	f7ff ffe7 	bl	8013110 <ucdr_buffer_remaining>
 8013142:	42a8      	cmp	r0, r5
 8013144:	bf28      	it	cs
 8013146:	4628      	movcs	r0, r5
 8013148:	bd38      	pop	{r3, r4, r5, pc}
 801314a:	2301      	movs	r3, #1
 801314c:	7583      	strb	r3, [r0, #22]
 801314e:	e7f3      	b.n	8013138 <ucdr_check_final_buffer_behavior_array+0x20>

08013150 <ucdr_advance_buffer>:
 8013150:	b538      	push	{r3, r4, r5, lr}
 8013152:	4604      	mov	r4, r0
 8013154:	460d      	mov	r5, r1
 8013156:	f7ff ff57 	bl	8013008 <ucdr_check_buffer_available_for>
 801315a:	b178      	cbz	r0, 801317c <ucdr_advance_buffer+0x2c>
 801315c:	6923      	ldr	r3, [r4, #16]
 801315e:	68a2      	ldr	r2, [r4, #8]
 8013160:	442b      	add	r3, r5
 8013162:	6123      	str	r3, [r4, #16]
 8013164:	2301      	movs	r3, #1
 8013166:	442a      	add	r2, r5
 8013168:	7563      	strb	r3, [r4, #21]
 801316a:	60a2      	str	r2, [r4, #8]
 801316c:	bd38      	pop	{r3, r4, r5, pc}
 801316e:	68a2      	ldr	r2, [r4, #8]
 8013170:	6923      	ldr	r3, [r4, #16]
 8013172:	4402      	add	r2, r0
 8013174:	4403      	add	r3, r0
 8013176:	1a2d      	subs	r5, r5, r0
 8013178:	60a2      	str	r2, [r4, #8]
 801317a:	6123      	str	r3, [r4, #16]
 801317c:	4629      	mov	r1, r5
 801317e:	2201      	movs	r2, #1
 8013180:	4620      	mov	r0, r4
 8013182:	f7ff ffc9 	bl	8013118 <ucdr_check_final_buffer_behavior_array>
 8013186:	2800      	cmp	r0, #0
 8013188:	d1f1      	bne.n	801316e <ucdr_advance_buffer+0x1e>
 801318a:	2301      	movs	r3, #1
 801318c:	7563      	strb	r3, [r4, #21]
 801318e:	bd38      	pop	{r3, r4, r5, pc}

08013190 <ucdr_serialize_sequence_char>:
 8013190:	b570      	push	{r4, r5, r6, lr}
 8013192:	4615      	mov	r5, r2
 8013194:	460e      	mov	r6, r1
 8013196:	7d01      	ldrb	r1, [r0, #20]
 8013198:	4604      	mov	r4, r0
 801319a:	f7fe fd07 	bl	8011bac <ucdr_serialize_endian_uint32_t>
 801319e:	b90d      	cbnz	r5, 80131a4 <ucdr_serialize_sequence_char+0x14>
 80131a0:	2001      	movs	r0, #1
 80131a2:	bd70      	pop	{r4, r5, r6, pc}
 80131a4:	7d21      	ldrb	r1, [r4, #20]
 80131a6:	462b      	mov	r3, r5
 80131a8:	4632      	mov	r2, r6
 80131aa:	4620      	mov	r0, r4
 80131ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131b0:	f004 bea8 	b.w	8017f04 <ucdr_serialize_endian_array_char>

080131b4 <ucdr_deserialize_sequence_char>:
 80131b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131b8:	461d      	mov	r5, r3
 80131ba:	4616      	mov	r6, r2
 80131bc:	460f      	mov	r7, r1
 80131be:	461a      	mov	r2, r3
 80131c0:	7d01      	ldrb	r1, [r0, #20]
 80131c2:	4604      	mov	r4, r0
 80131c4:	f7fe fe1a 	bl	8011dfc <ucdr_deserialize_endian_uint32_t>
 80131c8:	682b      	ldr	r3, [r5, #0]
 80131ca:	429e      	cmp	r6, r3
 80131cc:	bf3c      	itt	cc
 80131ce:	2201      	movcc	r2, #1
 80131d0:	75a2      	strbcc	r2, [r4, #22]
 80131d2:	b913      	cbnz	r3, 80131da <ucdr_deserialize_sequence_char+0x26>
 80131d4:	2001      	movs	r0, #1
 80131d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131da:	7d21      	ldrb	r1, [r4, #20]
 80131dc:	463a      	mov	r2, r7
 80131de:	4620      	mov	r0, r4
 80131e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131e4:	f004 bec0 	b.w	8017f68 <ucdr_deserialize_endian_array_char>

080131e8 <ucdr_serialize_sequence_uint8_t>:
 80131e8:	b570      	push	{r4, r5, r6, lr}
 80131ea:	4615      	mov	r5, r2
 80131ec:	460e      	mov	r6, r1
 80131ee:	7d01      	ldrb	r1, [r0, #20]
 80131f0:	4604      	mov	r4, r0
 80131f2:	f7fe fcdb 	bl	8011bac <ucdr_serialize_endian_uint32_t>
 80131f6:	b90d      	cbnz	r5, 80131fc <ucdr_serialize_sequence_uint8_t+0x14>
 80131f8:	2001      	movs	r0, #1
 80131fa:	bd70      	pop	{r4, r5, r6, pc}
 80131fc:	7d21      	ldrb	r1, [r4, #20]
 80131fe:	462b      	mov	r3, r5
 8013200:	4632      	mov	r2, r6
 8013202:	4620      	mov	r0, r4
 8013204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013208:	f004 bf12 	b.w	8018030 <ucdr_serialize_endian_array_uint8_t>

0801320c <ucdr_deserialize_sequence_uint8_t>:
 801320c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013210:	461d      	mov	r5, r3
 8013212:	4616      	mov	r6, r2
 8013214:	460f      	mov	r7, r1
 8013216:	461a      	mov	r2, r3
 8013218:	7d01      	ldrb	r1, [r0, #20]
 801321a:	4604      	mov	r4, r0
 801321c:	f7fe fdee 	bl	8011dfc <ucdr_deserialize_endian_uint32_t>
 8013220:	682b      	ldr	r3, [r5, #0]
 8013222:	429e      	cmp	r6, r3
 8013224:	bf3c      	itt	cc
 8013226:	2201      	movcc	r2, #1
 8013228:	75a2      	strbcc	r2, [r4, #22]
 801322a:	b913      	cbnz	r3, 8013232 <ucdr_deserialize_sequence_uint8_t+0x26>
 801322c:	2001      	movs	r0, #1
 801322e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013232:	7d21      	ldrb	r1, [r4, #20]
 8013234:	463a      	mov	r2, r7
 8013236:	4620      	mov	r0, r4
 8013238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801323c:	f004 bf5c 	b.w	80180f8 <ucdr_deserialize_endian_array_uint8_t>

08013240 <ucdr_serialize_sequence_float>:
 8013240:	b570      	push	{r4, r5, r6, lr}
 8013242:	4615      	mov	r5, r2
 8013244:	460e      	mov	r6, r1
 8013246:	7d01      	ldrb	r1, [r0, #20]
 8013248:	4604      	mov	r4, r0
 801324a:	f7fe fcaf 	bl	8011bac <ucdr_serialize_endian_uint32_t>
 801324e:	b90d      	cbnz	r5, 8013254 <ucdr_serialize_sequence_float+0x14>
 8013250:	2001      	movs	r0, #1
 8013252:	bd70      	pop	{r4, r5, r6, pc}
 8013254:	7d21      	ldrb	r1, [r4, #20]
 8013256:	462b      	mov	r3, r5
 8013258:	4632      	mov	r2, r6
 801325a:	4620      	mov	r0, r4
 801325c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013260:	f004 bf7c 	b.w	801815c <ucdr_serialize_endian_array_float>

08013264 <ucdr_deserialize_sequence_float>:
 8013264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013268:	461d      	mov	r5, r3
 801326a:	4616      	mov	r6, r2
 801326c:	460f      	mov	r7, r1
 801326e:	461a      	mov	r2, r3
 8013270:	7d01      	ldrb	r1, [r0, #20]
 8013272:	4604      	mov	r4, r0
 8013274:	f7fe fdc2 	bl	8011dfc <ucdr_deserialize_endian_uint32_t>
 8013278:	682b      	ldr	r3, [r5, #0]
 801327a:	429e      	cmp	r6, r3
 801327c:	bf3c      	itt	cc
 801327e:	2201      	movcc	r2, #1
 8013280:	75a2      	strbcc	r2, [r4, #22]
 8013282:	b913      	cbnz	r3, 801328a <ucdr_deserialize_sequence_float+0x26>
 8013284:	2001      	movs	r0, #1
 8013286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801328a:	7d21      	ldrb	r1, [r4, #20]
 801328c:	463a      	mov	r2, r7
 801328e:	4620      	mov	r0, r4
 8013290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013294:	f004 bfb6 	b.w	8018204 <ucdr_deserialize_endian_array_float>

08013298 <uxr_buffer_delete_entity>:
 8013298:	b510      	push	{r4, lr}
 801329a:	2300      	movs	r3, #0
 801329c:	b08e      	sub	sp, #56	; 0x38
 801329e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80132a2:	2303      	movs	r3, #3
 80132a4:	9300      	str	r3, [sp, #0]
 80132a6:	2204      	movs	r2, #4
 80132a8:	ab06      	add	r3, sp, #24
 80132aa:	4604      	mov	r4, r0
 80132ac:	9103      	str	r1, [sp, #12]
 80132ae:	f001 f86f 	bl	8014390 <uxr_prepare_stream_to_write_submessage>
 80132b2:	b918      	cbnz	r0, 80132bc <uxr_buffer_delete_entity+0x24>
 80132b4:	4604      	mov	r4, r0
 80132b6:	4620      	mov	r0, r4
 80132b8:	b00e      	add	sp, #56	; 0x38
 80132ba:	bd10      	pop	{r4, pc}
 80132bc:	9902      	ldr	r1, [sp, #8]
 80132be:	aa05      	add	r2, sp, #20
 80132c0:	4620      	mov	r0, r4
 80132c2:	f001 f99b 	bl	80145fc <uxr_init_base_object_request>
 80132c6:	a905      	add	r1, sp, #20
 80132c8:	4604      	mov	r4, r0
 80132ca:	a806      	add	r0, sp, #24
 80132cc:	f002 fb00 	bl	80158d0 <uxr_serialize_DELETE_Payload>
 80132d0:	4620      	mov	r0, r4
 80132d2:	b00e      	add	sp, #56	; 0x38
 80132d4:	bd10      	pop	{r4, pc}
 80132d6:	bf00      	nop

080132d8 <uxr_common_create_entity>:
 80132d8:	b510      	push	{r4, lr}
 80132da:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80132de:	b08c      	sub	sp, #48	; 0x30
 80132e0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80132e4:	f1bc 0f01 	cmp.w	ip, #1
 80132e8:	bf0c      	ite	eq
 80132ea:	f003 0201 	andeq.w	r2, r3, #1
 80132ee:	2200      	movne	r2, #0
 80132f0:	330e      	adds	r3, #14
 80132f2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80132f6:	9101      	str	r1, [sp, #4]
 80132f8:	441a      	add	r2, r3
 80132fa:	2301      	movs	r3, #1
 80132fc:	9300      	str	r3, [sp, #0]
 80132fe:	9903      	ldr	r1, [sp, #12]
 8013300:	ab04      	add	r3, sp, #16
 8013302:	b292      	uxth	r2, r2
 8013304:	4604      	mov	r4, r0
 8013306:	f001 f843 	bl	8014390 <uxr_prepare_stream_to_write_submessage>
 801330a:	b918      	cbnz	r0, 8013314 <uxr_common_create_entity+0x3c>
 801330c:	4604      	mov	r4, r0
 801330e:	4620      	mov	r0, r4
 8013310:	b00c      	add	sp, #48	; 0x30
 8013312:	bd10      	pop	{r4, pc}
 8013314:	9902      	ldr	r1, [sp, #8]
 8013316:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013318:	4620      	mov	r0, r4
 801331a:	f001 f96f 	bl	80145fc <uxr_init_base_object_request>
 801331e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013320:	4604      	mov	r4, r0
 8013322:	a804      	add	r0, sp, #16
 8013324:	f002 fa30 	bl	8015788 <uxr_serialize_CREATE_Payload>
 8013328:	4620      	mov	r0, r4
 801332a:	b00c      	add	sp, #48	; 0x30
 801332c:	bd10      	pop	{r4, pc}
 801332e:	bf00      	nop

08013330 <uxr_buffer_create_participant_bin>:
 8013330:	b570      	push	{r4, r5, r6, lr}
 8013332:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8013336:	ac11      	add	r4, sp, #68	; 0x44
 8013338:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 801333c:	2303      	movs	r3, #3
 801333e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013342:	7223      	strb	r3, [r4, #8]
 8013344:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8013346:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 801334a:	2201      	movs	r2, #1
 801334c:	2100      	movs	r1, #0
 801334e:	4605      	mov	r5, r0
 8013350:	7122      	strb	r2, [r4, #4]
 8013352:	f88d 1014 	strb.w	r1, [sp, #20]
 8013356:	b1cb      	cbz	r3, 801338c <uxr_buffer_create_participant_bin+0x5c>
 8013358:	f88d 201c 	strb.w	r2, [sp, #28]
 801335c:	9308      	str	r3, [sp, #32]
 801335e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013362:	a915      	add	r1, sp, #84	; 0x54
 8013364:	a809      	add	r0, sp, #36	; 0x24
 8013366:	f7ff fea3 	bl	80130b0 <ucdr_init_buffer>
 801336a:	a905      	add	r1, sp, #20
 801336c:	a809      	add	r0, sp, #36	; 0x24
 801336e:	f001 fed9 	bl	8015124 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8013372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013374:	9600      	str	r6, [sp, #0]
 8013376:	9401      	str	r4, [sp, #4]
 8013378:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801337c:	60e3      	str	r3, [r4, #12]
 801337e:	4628      	mov	r0, r5
 8013380:	b29b      	uxth	r3, r3
 8013382:	f7ff ffa9 	bl	80132d8 <uxr_common_create_entity>
 8013386:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 801338a:	bd70      	pop	{r4, r5, r6, pc}
 801338c:	f88d 301c 	strb.w	r3, [sp, #28]
 8013390:	e7e5      	b.n	801335e <uxr_buffer_create_participant_bin+0x2e>
 8013392:	bf00      	nop

08013394 <uxr_buffer_create_topic_bin>:
 8013394:	b570      	push	{r4, r5, r6, lr}
 8013396:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 801339a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801339e:	9105      	str	r1, [sp, #20]
 80133a0:	4605      	mov	r5, r0
 80133a2:	a997      	add	r1, sp, #604	; 0x25c
 80133a4:	4618      	mov	r0, r3
 80133a6:	2302      	movs	r3, #2
 80133a8:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 80133ac:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 80133b0:	f000 f8ee 	bl	8013590 <uxr_object_id_to_raw>
 80133b4:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 80133b6:	9306      	str	r3, [sp, #24]
 80133b8:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 80133ba:	930a      	str	r3, [sp, #40]	; 0x28
 80133bc:	2303      	movs	r3, #3
 80133be:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80133c2:	2301      	movs	r3, #1
 80133c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80133c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80133cc:	a917      	add	r1, sp, #92	; 0x5c
 80133ce:	2300      	movs	r3, #0
 80133d0:	a80b      	add	r0, sp, #44	; 0x2c
 80133d2:	f88d 301c 	strb.w	r3, [sp, #28]
 80133d6:	f7ff fe6b 	bl	80130b0 <ucdr_init_buffer>
 80133da:	a906      	add	r1, sp, #24
 80133dc:	a80b      	add	r0, sp, #44	; 0x2c
 80133de:	f001 fec3 	bl	8015168 <uxr_serialize_OBJK_Topic_Binary>
 80133e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133e4:	9316      	str	r3, [sp, #88]	; 0x58
 80133e6:	ac13      	add	r4, sp, #76	; 0x4c
 80133e8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80133ec:	9600      	str	r6, [sp, #0]
 80133ee:	9401      	str	r4, [sp, #4]
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	4628      	mov	r0, r5
 80133f4:	f7ff ff70 	bl	80132d8 <uxr_common_create_entity>
 80133f8:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 80133fc:	bd70      	pop	{r4, r5, r6, pc}
 80133fe:	bf00      	nop

08013400 <uxr_buffer_create_publisher_bin>:
 8013400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013402:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8013406:	4605      	mov	r5, r0
 8013408:	9105      	str	r1, [sp, #20]
 801340a:	4618      	mov	r0, r3
 801340c:	2603      	movs	r6, #3
 801340e:	a992      	add	r1, sp, #584	; 0x248
 8013410:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013414:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8013418:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801341c:	f000 f8b8 	bl	8013590 <uxr_object_id_to_raw>
 8013420:	2300      	movs	r3, #0
 8013422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013426:	a912      	add	r1, sp, #72	; 0x48
 8013428:	a806      	add	r0, sp, #24
 801342a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 801342e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8013432:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8013436:	f7ff fe3b 	bl	80130b0 <ucdr_init_buffer>
 801343a:	a993      	add	r1, sp, #588	; 0x24c
 801343c:	a806      	add	r0, sp, #24
 801343e:	f001 ff47 	bl	80152d0 <uxr_serialize_OBJK_Publisher_Binary>
 8013442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013444:	9311      	str	r3, [sp, #68]	; 0x44
 8013446:	ac0e      	add	r4, sp, #56	; 0x38
 8013448:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801344c:	9700      	str	r7, [sp, #0]
 801344e:	9401      	str	r4, [sp, #4]
 8013450:	b29b      	uxth	r3, r3
 8013452:	4628      	mov	r0, r5
 8013454:	f7ff ff40 	bl	80132d8 <uxr_common_create_entity>
 8013458:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801345c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801345e:	bf00      	nop

08013460 <uxr_buffer_create_datawriter_bin>:
 8013460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013464:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013468:	ac1d      	add	r4, sp, #116	; 0x74
 801346a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801346e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8013472:	9105      	str	r1, [sp, #20]
 8013474:	4606      	mov	r6, r0
 8013476:	a9a1      	add	r1, sp, #644	; 0x284
 8013478:	4618      	mov	r0, r3
 801347a:	2305      	movs	r3, #5
 801347c:	7123      	strb	r3, [r4, #4]
 801347e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8013482:	2703      	movs	r7, #3
 8013484:	f000 f884 	bl	8013590 <uxr_object_id_to_raw>
 8013488:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 801348a:	7227      	strb	r7, [r4, #8]
 801348c:	a90e      	add	r1, sp, #56	; 0x38
 801348e:	f000 f87f 	bl	8013590 <uxr_object_id_to_raw>
 8013492:	2300      	movs	r3, #0
 8013494:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8013498:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 801349c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80134a0:	3d00      	subs	r5, #0
 80134a2:	bf18      	it	ne
 80134a4:	2501      	movne	r5, #1
 80134a6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80134aa:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80134ae:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80134b2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80134b6:	2301      	movs	r3, #1
 80134b8:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 80134bc:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80134c0:	bb8a      	cbnz	r2, 8013526 <uxr_buffer_create_datawriter_bin+0xc6>
 80134c2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80134c6:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80134ca:	f04f 0c13 	mov.w	ip, #19
 80134ce:	250b      	movs	r5, #11
 80134d0:	2221      	movs	r2, #33	; 0x21
 80134d2:	2111      	movs	r1, #17
 80134d4:	2009      	movs	r0, #9
 80134d6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 80134da:	b923      	cbnz	r3, 80134e6 <uxr_buffer_create_datawriter_bin+0x86>
 80134dc:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80134e0:	4672      	mov	r2, lr
 80134e2:	4661      	mov	r1, ip
 80134e4:	4628      	mov	r0, r5
 80134e6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 80134ea:	2b01      	cmp	r3, #1
 80134ec:	d025      	beq.n	801353a <uxr_buffer_create_datawriter_bin+0xda>
 80134ee:	2b03      	cmp	r3, #3
 80134f0:	d029      	beq.n	8013546 <uxr_buffer_create_datawriter_bin+0xe6>
 80134f2:	b32b      	cbz	r3, 8013540 <uxr_buffer_create_datawriter_bin+0xe0>
 80134f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80134f8:	a921      	add	r1, sp, #132	; 0x84
 80134fa:	a806      	add	r0, sp, #24
 80134fc:	f7ff fdd8 	bl	80130b0 <ucdr_init_buffer>
 8013500:	a90e      	add	r1, sp, #56	; 0x38
 8013502:	a806      	add	r0, sp, #24
 8013504:	f001 ff5a 	bl	80153bc <uxr_serialize_OBJK_DataWriter_Binary>
 8013508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801350a:	f8cd 8000 	str.w	r8, [sp]
 801350e:	9401      	str	r4, [sp, #4]
 8013510:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013514:	60e3      	str	r3, [r4, #12]
 8013516:	4630      	mov	r0, r6
 8013518:	b29b      	uxth	r3, r3
 801351a:	f7ff fedd 	bl	80132d8 <uxr_common_create_entity>
 801351e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013526:	f04f 0e22 	mov.w	lr, #34	; 0x22
 801352a:	f04f 0c12 	mov.w	ip, #18
 801352e:	250a      	movs	r5, #10
 8013530:	2220      	movs	r2, #32
 8013532:	2110      	movs	r1, #16
 8013534:	2008      	movs	r0, #8
 8013536:	2702      	movs	r7, #2
 8013538:	e7cd      	b.n	80134d6 <uxr_buffer_create_datawriter_bin+0x76>
 801353a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 801353e:	e7d9      	b.n	80134f4 <uxr_buffer_create_datawriter_bin+0x94>
 8013540:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8013544:	e7d6      	b.n	80134f4 <uxr_buffer_create_datawriter_bin+0x94>
 8013546:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801354a:	e7d3      	b.n	80134f4 <uxr_buffer_create_datawriter_bin+0x94>

0801354c <uxr_object_id>:
 801354c:	b082      	sub	sp, #8
 801354e:	2300      	movs	r3, #0
 8013550:	f88d 1006 	strb.w	r1, [sp, #6]
 8013554:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013558:	f360 030f 	bfi	r3, r0, #0, #16
 801355c:	f362 431f 	bfi	r3, r2, #16, #16
 8013560:	4618      	mov	r0, r3
 8013562:	b002      	add	sp, #8
 8013564:	4770      	bx	lr
 8013566:	bf00      	nop

08013568 <uxr_object_id_from_raw>:
 8013568:	7843      	ldrb	r3, [r0, #1]
 801356a:	7801      	ldrb	r1, [r0, #0]
 801356c:	b082      	sub	sp, #8
 801356e:	f003 020f 	and.w	r2, r3, #15
 8013572:	f88d 2006 	strb.w	r2, [sp, #6]
 8013576:	091b      	lsrs	r3, r3, #4
 8013578:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801357c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8013580:	2000      	movs	r0, #0
 8013582:	f363 000f 	bfi	r0, r3, #0, #16
 8013586:	f362 401f 	bfi	r0, r2, #16, #16
 801358a:	b002      	add	sp, #8
 801358c:	4770      	bx	lr
 801358e:	bf00      	nop

08013590 <uxr_object_id_to_raw>:
 8013590:	4602      	mov	r2, r0
 8013592:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8013596:	b082      	sub	sp, #8
 8013598:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 801359c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80135a0:	f881 c000 	strb.w	ip, [r1]
 80135a4:	7048      	strb	r0, [r1, #1]
 80135a6:	b002      	add	sp, #8
 80135a8:	4770      	bx	lr
 80135aa:	bf00      	nop

080135ac <on_get_fragmentation_info>:
 80135ac:	b500      	push	{lr}
 80135ae:	b08b      	sub	sp, #44	; 0x2c
 80135b0:	4601      	mov	r1, r0
 80135b2:	2204      	movs	r2, #4
 80135b4:	a802      	add	r0, sp, #8
 80135b6:	f7ff fd7b 	bl	80130b0 <ucdr_init_buffer>
 80135ba:	f10d 0305 	add.w	r3, sp, #5
 80135be:	f10d 0206 	add.w	r2, sp, #6
 80135c2:	a901      	add	r1, sp, #4
 80135c4:	a802      	add	r0, sp, #8
 80135c6:	f001 f99b 	bl	8014900 <uxr_read_submessage_header>
 80135ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80135ce:	2b0d      	cmp	r3, #13
 80135d0:	d003      	beq.n	80135da <on_get_fragmentation_info+0x2e>
 80135d2:	2000      	movs	r0, #0
 80135d4:	b00b      	add	sp, #44	; 0x2c
 80135d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80135da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80135de:	f013 0f02 	tst.w	r3, #2
 80135e2:	bf14      	ite	ne
 80135e4:	2002      	movne	r0, #2
 80135e6:	2001      	moveq	r0, #1
 80135e8:	b00b      	add	sp, #44	; 0x2c
 80135ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80135ee:	bf00      	nop

080135f0 <read_submessage_get_info>:
 80135f0:	b570      	push	{r4, r5, r6, lr}
 80135f2:	2500      	movs	r5, #0
 80135f4:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80135f8:	4604      	mov	r4, r0
 80135fa:	f44f 7224 	mov.w	r2, #656	; 0x290
 80135fe:	460e      	mov	r6, r1
 8013600:	a810      	add	r0, sp, #64	; 0x40
 8013602:	4629      	mov	r1, r5
 8013604:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8013608:	f007 f8e6 	bl	801a7d8 <memset>
 801360c:	a903      	add	r1, sp, #12
 801360e:	4630      	mov	r0, r6
 8013610:	f002 f94a 	bl	80158a8 <uxr_deserialize_GET_INFO_Payload>
 8013614:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013618:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801361c:	4620      	mov	r0, r4
 801361e:	f000 ffe5 	bl	80145ec <uxr_session_header_offset>
 8013622:	462b      	mov	r3, r5
 8013624:	9000      	str	r0, [sp, #0]
 8013626:	220c      	movs	r2, #12
 8013628:	a905      	add	r1, sp, #20
 801362a:	a808      	add	r0, sp, #32
 801362c:	f7ff fd2e 	bl	801308c <ucdr_init_buffer_origin_offset>
 8013630:	a910      	add	r1, sp, #64	; 0x40
 8013632:	a808      	add	r0, sp, #32
 8013634:	f002 f9aa 	bl	801598c <uxr_serialize_INFO_Payload>
 8013638:	9b08      	ldr	r3, [sp, #32]
 801363a:	462a      	mov	r2, r5
 801363c:	4629      	mov	r1, r5
 801363e:	4620      	mov	r0, r4
 8013640:	f000 ff7e 	bl	8014540 <uxr_stamp_session_header>
 8013644:	a808      	add	r0, sp, #32
 8013646:	f7ff fd5f 	bl	8013108 <ucdr_buffer_length>
 801364a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801364c:	4602      	mov	r2, r0
 801364e:	a905      	add	r1, sp, #20
 8013650:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013654:	47a0      	blx	r4
 8013656:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 801365a:	bd70      	pop	{r4, r5, r6, pc}

0801365c <write_submessage_acknack.isra.0>:
 801365c:	b570      	push	{r4, r5, r6, lr}
 801365e:	b092      	sub	sp, #72	; 0x48
 8013660:	4605      	mov	r5, r0
 8013662:	460e      	mov	r6, r1
 8013664:	4614      	mov	r4, r2
 8013666:	f000 ffc1 	bl	80145ec <uxr_session_header_offset>
 801366a:	a905      	add	r1, sp, #20
 801366c:	9000      	str	r0, [sp, #0]
 801366e:	2300      	movs	r3, #0
 8013670:	a80a      	add	r0, sp, #40	; 0x28
 8013672:	2211      	movs	r2, #17
 8013674:	f7ff fd0a 	bl	801308c <ucdr_init_buffer_origin_offset>
 8013678:	2218      	movs	r2, #24
 801367a:	fb02 5404 	mla	r4, r2, r4, r5
 801367e:	2300      	movs	r3, #0
 8013680:	2205      	movs	r2, #5
 8013682:	3450      	adds	r4, #80	; 0x50
 8013684:	210a      	movs	r1, #10
 8013686:	a80a      	add	r0, sp, #40	; 0x28
 8013688:	f001 f920 	bl	80148cc <uxr_buffer_submessage_header>
 801368c:	a903      	add	r1, sp, #12
 801368e:	4620      	mov	r0, r4
 8013690:	f005 f88a 	bl	80187a8 <uxr_compute_acknack>
 8013694:	ba40      	rev16	r0, r0
 8013696:	f8ad 000e 	strh.w	r0, [sp, #14]
 801369a:	a903      	add	r1, sp, #12
 801369c:	a80a      	add	r0, sp, #40	; 0x28
 801369e:	f88d 6010 	strb.w	r6, [sp, #16]
 80136a2:	f002 f9e3 	bl	8015a6c <uxr_serialize_ACKNACK_Payload>
 80136a6:	2200      	movs	r2, #0
 80136a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136aa:	4611      	mov	r1, r2
 80136ac:	4628      	mov	r0, r5
 80136ae:	f000 ff47 	bl	8014540 <uxr_stamp_session_header>
 80136b2:	a80a      	add	r0, sp, #40	; 0x28
 80136b4:	f7ff fd28 	bl	8013108 <ucdr_buffer_length>
 80136b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80136ba:	4602      	mov	r2, r0
 80136bc:	a905      	add	r1, sp, #20
 80136be:	e9d3 0400 	ldrd	r0, r4, [r3]
 80136c2:	47a0      	blx	r4
 80136c4:	b012      	add	sp, #72	; 0x48
 80136c6:	bd70      	pop	{r4, r5, r6, pc}

080136c8 <uxr_init_session>:
 80136c8:	b510      	push	{r4, lr}
 80136ca:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8013700 <uxr_init_session+0x38>
 80136ce:	2300      	movs	r3, #0
 80136d0:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 80136d4:	4604      	mov	r4, r0
 80136d6:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 80136da:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 80136de:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 80136e2:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 80136e6:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 80136ea:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80136ee:	2181      	movs	r1, #129	; 0x81
 80136f0:	f000 fe92 	bl	8014418 <uxr_init_session_info>
 80136f4:	f104 0008 	add.w	r0, r4, #8
 80136f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136fc:	f001 b802 	b.w	8014704 <uxr_init_stream_storage>
	...

08013708 <uxr_set_status_callback>:
 8013708:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 801370c:	4770      	bx	lr
 801370e:	bf00      	nop

08013710 <uxr_set_topic_callback>:
 8013710:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8013714:	4770      	bx	lr
 8013716:	bf00      	nop

08013718 <uxr_set_request_callback>:
 8013718:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 801371c:	4770      	bx	lr
 801371e:	bf00      	nop

08013720 <uxr_set_reply_callback>:
 8013720:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8013724:	4770      	bx	lr
 8013726:	bf00      	nop

08013728 <uxr_create_output_best_effort_stream>:
 8013728:	b510      	push	{r4, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	e9cd 2100 	strd	r2, r1, [sp]
 8013730:	4604      	mov	r4, r0
 8013732:	f000 ff5b 	bl	80145ec <uxr_session_header_offset>
 8013736:	e9dd 2100 	ldrd	r2, r1, [sp]
 801373a:	4603      	mov	r3, r0
 801373c:	f104 0008 	add.w	r0, r4, #8
 8013740:	b004      	add	sp, #16
 8013742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013746:	f001 b827 	b.w	8014798 <uxr_add_output_best_effort_buffer>
 801374a:	bf00      	nop

0801374c <uxr_create_output_reliable_stream>:
 801374c:	b510      	push	{r4, lr}
 801374e:	b088      	sub	sp, #32
 8013750:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013754:	4604      	mov	r4, r0
 8013756:	9303      	str	r3, [sp, #12]
 8013758:	f000 ff48 	bl	80145ec <uxr_session_header_offset>
 801375c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013760:	9000      	str	r0, [sp, #0]
 8013762:	9905      	ldr	r1, [sp, #20]
 8013764:	f104 0008 	add.w	r0, r4, #8
 8013768:	f001 f82a 	bl	80147c0 <uxr_add_output_reliable_buffer>
 801376c:	2200      	movs	r2, #0
 801376e:	b2c3      	uxtb	r3, r0
 8013770:	f363 0207 	bfi	r2, r3, #0, #8
 8013774:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013778:	f363 220f 	bfi	r2, r3, #8, #8
 801377c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013780:	f363 4217 	bfi	r2, r3, #16, #8
 8013784:	0e03      	lsrs	r3, r0, #24
 8013786:	f363 621f 	bfi	r2, r3, #24, #8
 801378a:	4610      	mov	r0, r2
 801378c:	b008      	add	sp, #32
 801378e:	bd10      	pop	{r4, pc}

08013790 <uxr_create_input_best_effort_stream>:
 8013790:	b082      	sub	sp, #8
 8013792:	3008      	adds	r0, #8
 8013794:	b002      	add	sp, #8
 8013796:	f001 b82d 	b.w	80147f4 <uxr_add_input_best_effort_buffer>
 801379a:	bf00      	nop

0801379c <uxr_create_input_reliable_stream>:
 801379c:	b510      	push	{r4, lr}
 801379e:	b084      	sub	sp, #16
 80137a0:	4c0b      	ldr	r4, [pc, #44]	; (80137d0 <uxr_create_input_reliable_stream+0x34>)
 80137a2:	9400      	str	r4, [sp, #0]
 80137a4:	3008      	adds	r0, #8
 80137a6:	f001 f83b 	bl	8014820 <uxr_add_input_reliable_buffer>
 80137aa:	2200      	movs	r2, #0
 80137ac:	b2c3      	uxtb	r3, r0
 80137ae:	f363 0207 	bfi	r2, r3, #0, #8
 80137b2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80137b6:	f363 220f 	bfi	r2, r3, #8, #8
 80137ba:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80137be:	f363 4217 	bfi	r2, r3, #16, #8
 80137c2:	0e03      	lsrs	r3, r0, #24
 80137c4:	f363 621f 	bfi	r2, r3, #24, #8
 80137c8:	4610      	mov	r0, r2
 80137ca:	b004      	add	sp, #16
 80137cc:	bd10      	pop	{r4, pc}
 80137ce:	bf00      	nop
 80137d0:	080135ad 	.word	0x080135ad

080137d4 <uxr_epoch_nanos>:
 80137d4:	b510      	push	{r4, lr}
 80137d6:	4604      	mov	r4, r0
 80137d8:	f001 f8d8 	bl	801498c <uxr_nanos>
 80137dc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80137e0:	1ac0      	subs	r0, r0, r3
 80137e2:	eb61 0102 	sbc.w	r1, r1, r2
 80137e6:	bd10      	pop	{r4, pc}

080137e8 <uxr_flash_output_streams>:
 80137e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137ec:	7e03      	ldrb	r3, [r0, #24]
 80137ee:	b084      	sub	sp, #16
 80137f0:	4604      	mov	r4, r0
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d035      	beq.n	8013862 <uxr_flash_output_streams+0x7a>
 80137f6:	f04f 0900 	mov.w	r9, #0
 80137fa:	4648      	mov	r0, r9
 80137fc:	f10d 0802 	add.w	r8, sp, #2
 8013800:	af03      	add	r7, sp, #12
 8013802:	ae02      	add	r6, sp, #8
 8013804:	e006      	b.n	8013814 <uxr_flash_output_streams+0x2c>
 8013806:	7e23      	ldrb	r3, [r4, #24]
 8013808:	f109 0901 	add.w	r9, r9, #1
 801380c:	fa5f f089 	uxtb.w	r0, r9
 8013810:	4283      	cmp	r3, r0
 8013812:	d926      	bls.n	8013862 <uxr_flash_output_streams+0x7a>
 8013814:	2201      	movs	r2, #1
 8013816:	4611      	mov	r1, r2
 8013818:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801381c:	f000 ff1e 	bl	801465c <uxr_stream_id>
 8013820:	3508      	adds	r5, #8
 8013822:	4684      	mov	ip, r0
 8013824:	4643      	mov	r3, r8
 8013826:	463a      	mov	r2, r7
 8013828:	4631      	mov	r1, r6
 801382a:	4628      	mov	r0, r5
 801382c:	f8cd c004 	str.w	ip, [sp, #4]
 8013830:	f005 f840 	bl	80188b4 <uxr_prepare_best_effort_buffer_to_send>
 8013834:	2800      	cmp	r0, #0
 8013836:	d0e6      	beq.n	8013806 <uxr_flash_output_streams+0x1e>
 8013838:	9b02      	ldr	r3, [sp, #8]
 801383a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801383e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013842:	4620      	mov	r0, r4
 8013844:	f000 fe7c 	bl	8014540 <uxr_stamp_session_header>
 8013848:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801384a:	9a03      	ldr	r2, [sp, #12]
 801384c:	685d      	ldr	r5, [r3, #4]
 801384e:	6818      	ldr	r0, [r3, #0]
 8013850:	9902      	ldr	r1, [sp, #8]
 8013852:	47a8      	blx	r5
 8013854:	f109 0901 	add.w	r9, r9, #1
 8013858:	7e23      	ldrb	r3, [r4, #24]
 801385a:	fa5f f089 	uxtb.w	r0, r9
 801385e:	4283      	cmp	r3, r0
 8013860:	d8d8      	bhi.n	8013814 <uxr_flash_output_streams+0x2c>
 8013862:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013866:	b38b      	cbz	r3, 80138cc <uxr_flash_output_streams+0xe4>
 8013868:	f04f 0900 	mov.w	r9, #0
 801386c:	f10d 0802 	add.w	r8, sp, #2
 8013870:	af03      	add	r7, sp, #12
 8013872:	ae02      	add	r6, sp, #8
 8013874:	4648      	mov	r0, r9
 8013876:	2201      	movs	r2, #1
 8013878:	2102      	movs	r1, #2
 801387a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801387e:	f000 feed 	bl	801465c <uxr_stream_id>
 8013882:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8013886:	3520      	adds	r5, #32
 8013888:	9001      	str	r0, [sp, #4]
 801388a:	e00d      	b.n	80138a8 <uxr_flash_output_streams+0xc0>
 801388c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013890:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013894:	9b02      	ldr	r3, [sp, #8]
 8013896:	f000 fe53 	bl	8014540 <uxr_stamp_session_header>
 801389a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801389c:	9a03      	ldr	r2, [sp, #12]
 801389e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80138a2:	9902      	ldr	r1, [sp, #8]
 80138a4:	6818      	ldr	r0, [r3, #0]
 80138a6:	47d0      	blx	sl
 80138a8:	4643      	mov	r3, r8
 80138aa:	463a      	mov	r2, r7
 80138ac:	4631      	mov	r1, r6
 80138ae:	4628      	mov	r0, r5
 80138b0:	f005 fa0c 	bl	8018ccc <uxr_prepare_next_reliable_buffer_to_send>
 80138b4:	4603      	mov	r3, r0
 80138b6:	4620      	mov	r0, r4
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d1e7      	bne.n	801388c <uxr_flash_output_streams+0xa4>
 80138bc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80138c0:	f109 0901 	add.w	r9, r9, #1
 80138c4:	fa5f f089 	uxtb.w	r0, r9
 80138c8:	4283      	cmp	r3, r0
 80138ca:	d8d4      	bhi.n	8013876 <uxr_flash_output_streams+0x8e>
 80138cc:	b004      	add	sp, #16
 80138ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138d2:	bf00      	nop

080138d4 <read_submessage_info>:
 80138d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138d8:	460d      	mov	r5, r1
 80138da:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80138de:	4669      	mov	r1, sp
 80138e0:	4607      	mov	r7, r0
 80138e2:	4628      	mov	r0, r5
 80138e4:	f001 feee 	bl	80156c4 <uxr_deserialize_BaseObjectReply>
 80138e8:	a902      	add	r1, sp, #8
 80138ea:	4604      	mov	r4, r0
 80138ec:	4628      	mov	r0, r5
 80138ee:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80138f2:	f7fd fe95 	bl	8011620 <ucdr_deserialize_bool>
 80138f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80138fa:	4004      	ands	r4, r0
 80138fc:	b2e4      	uxtb	r4, r4
 80138fe:	b95b      	cbnz	r3, 8013918 <read_submessage_info+0x44>
 8013900:	a987      	add	r1, sp, #540	; 0x21c
 8013902:	4628      	mov	r0, r5
 8013904:	f7fd fe8c 	bl	8011620 <ucdr_deserialize_bool>
 8013908:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 801390c:	4606      	mov	r6, r0
 801390e:	b94b      	cbnz	r3, 8013924 <read_submessage_info+0x50>
 8013910:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8013914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013918:	a903      	add	r1, sp, #12
 801391a:	4628      	mov	r0, r5
 801391c:	f001 fd7a 	bl	8015414 <uxr_deserialize_ObjectVariant>
 8013920:	4004      	ands	r4, r0
 8013922:	e7ed      	b.n	8013900 <read_submessage_info+0x2c>
 8013924:	a988      	add	r1, sp, #544	; 0x220
 8013926:	4628      	mov	r0, r5
 8013928:	f7fd fea8 	bl	801167c <ucdr_deserialize_uint8_t>
 801392c:	4234      	tst	r4, r6
 801392e:	d0ef      	beq.n	8013910 <read_submessage_info+0x3c>
 8013930:	2800      	cmp	r0, #0
 8013932:	d0ed      	beq.n	8013910 <read_submessage_info+0x3c>
 8013934:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8013938:	2b0d      	cmp	r3, #13
 801393a:	d1e9      	bne.n	8013910 <read_submessage_info+0x3c>
 801393c:	a98a      	add	r1, sp, #552	; 0x228
 801393e:	4628      	mov	r0, r5
 8013940:	f7fe fc42 	bl	80121c8 <ucdr_deserialize_int16_t>
 8013944:	b140      	cbz	r0, 8013958 <read_submessage_info+0x84>
 8013946:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801394a:	2b00      	cmp	r3, #0
 801394c:	dd07      	ble.n	801395e <read_submessage_info+0x8a>
 801394e:	f1b8 0f00 	cmp.w	r8, #0
 8013952:	bf14      	ite	ne
 8013954:	2001      	movne	r0, #1
 8013956:	2002      	moveq	r0, #2
 8013958:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 801395c:	e7d8      	b.n	8013910 <read_submessage_info+0x3c>
 801395e:	2000      	movs	r0, #0
 8013960:	e7fa      	b.n	8013958 <read_submessage_info+0x84>
 8013962:	bf00      	nop

08013964 <read_submessage_list>:
 8013964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013968:	b097      	sub	sp, #92	; 0x5c
 801396a:	4ec1      	ldr	r6, [pc, #772]	; (8013c70 <read_submessage_list+0x30c>)
 801396c:	9209      	str	r2, [sp, #36]	; 0x24
 801396e:	4604      	mov	r4, r0
 8013970:	460d      	mov	r5, r1
 8013972:	f04f 0801 	mov.w	r8, #1
 8013976:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801397a:	aa0c      	add	r2, sp, #48	; 0x30
 801397c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8013980:	4628      	mov	r0, r5
 8013982:	f000 ffbd 	bl	8014900 <uxr_read_submessage_header>
 8013986:	2800      	cmp	r0, #0
 8013988:	f000 813e 	beq.w	8013c08 <read_submessage_list+0x2a4>
 801398c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8013990:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8013994:	3b02      	subs	r3, #2
 8013996:	2b0d      	cmp	r3, #13
 8013998:	d8ed      	bhi.n	8013976 <read_submessage_list+0x12>
 801399a:	a101      	add	r1, pc, #4	; (adr r1, 80139a0 <read_submessage_list+0x3c>)
 801399c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80139a0:	08013bff 	.word	0x08013bff
 80139a4:	08013977 	.word	0x08013977
 80139a8:	08013bef 	.word	0x08013bef
 80139ac:	08013b8d 	.word	0x08013b8d
 80139b0:	08013b83 	.word	0x08013b83
 80139b4:	08013977 	.word	0x08013977
 80139b8:	08013977 	.word	0x08013977
 80139bc:	08013ae3 	.word	0x08013ae3
 80139c0:	08013a73 	.word	0x08013a73
 80139c4:	08013a33 	.word	0x08013a33
 80139c8:	08013977 	.word	0x08013977
 80139cc:	08013977 	.word	0x08013977
 80139d0:	08013977 	.word	0x08013977
 80139d4:	080139d9 	.word	0x080139d9
 80139d8:	a910      	add	r1, sp, #64	; 0x40
 80139da:	4628      	mov	r0, r5
 80139dc:	f002 f896 	bl	8015b0c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80139e0:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 80139e4:	f1b9 0f00 	cmp.w	r9, #0
 80139e8:	f000 8116 	beq.w	8013c18 <read_submessage_list+0x2b4>
 80139ec:	f000 ffce 	bl	801498c <uxr_nanos>
 80139f0:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80139f2:	4602      	mov	r2, r0
 80139f4:	460b      	mov	r3, r1
 80139f6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80139f8:	2100      	movs	r1, #0
 80139fa:	468c      	mov	ip, r1
 80139fc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8013a00:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8013a04:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013a06:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013a08:	468c      	mov	ip, r1
 8013a0a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8013a0e:	46e2      	mov	sl, ip
 8013a10:	46bc      	mov	ip, r7
 8013a12:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 8013a16:	fbc0 7106 	smlal	r7, r1, r0, r6
 8013a1a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8013a1e:	e9cd 7100 	strd	r7, r1, [sp]
 8013a22:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8013a26:	9106      	str	r1, [sp, #24]
 8013a28:	4620      	mov	r0, r4
 8013a2a:	47c8      	blx	r9
 8013a2c:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 8013a30:	e7a1      	b.n	8013976 <read_submessage_list+0x12>
 8013a32:	a910      	add	r1, sp, #64	; 0x40
 8013a34:	4628      	mov	r0, r5
 8013a36:	f002 f857 	bl	8015ae8 <uxr_deserialize_HEARTBEAT_Payload>
 8013a3a:	2100      	movs	r1, #0
 8013a3c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8013a40:	f000 fe36 	bl	80146b0 <uxr_stream_id_from_raw>
 8013a44:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8013a48:	900f      	str	r0, [sp, #60]	; 0x3c
 8013a4a:	4639      	mov	r1, r7
 8013a4c:	f104 0008 	add.w	r0, r4, #8
 8013a50:	f000 ff1c 	bl	801488c <uxr_get_input_reliable_stream>
 8013a54:	2800      	cmp	r0, #0
 8013a56:	d08e      	beq.n	8013976 <read_submessage_list+0x12>
 8013a58:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8013a5c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8013a60:	f004 fe96 	bl	8018790 <uxr_process_heartbeat>
 8013a64:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8013a68:	463a      	mov	r2, r7
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f7ff fdf6 	bl	801365c <write_submessage_acknack.isra.0>
 8013a70:	e781      	b.n	8013976 <read_submessage_list+0x12>
 8013a72:	a910      	add	r1, sp, #64	; 0x40
 8013a74:	4628      	mov	r0, r5
 8013a76:	f002 f80f 	bl	8015a98 <uxr_deserialize_ACKNACK_Payload>
 8013a7a:	2100      	movs	r1, #0
 8013a7c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8013a80:	f000 fe16 	bl	80146b0 <uxr_stream_id_from_raw>
 8013a84:	900d      	str	r0, [sp, #52]	; 0x34
 8013a86:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8013a8a:	f104 0008 	add.w	r0, r4, #8
 8013a8e:	f000 fee9 	bl	8014864 <uxr_get_output_reliable_stream>
 8013a92:	4607      	mov	r7, r0
 8013a94:	2800      	cmp	r0, #0
 8013a96:	f43f af6e 	beq.w	8013976 <read_submessage_list+0x12>
 8013a9a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8013a9e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8013aa2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8013aa6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8013aaa:	b289      	uxth	r1, r1
 8013aac:	f005 f9b8 	bl	8018e20 <uxr_process_acknack>
 8013ab0:	4638      	mov	r0, r7
 8013ab2:	f005 f975 	bl	8018da0 <uxr_begin_output_nack_buffer_it>
 8013ab6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8013aba:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8013abe:	e006      	b.n	8013ace <read_submessage_list+0x16a>
 8013ac0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013ac2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013ac4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013ac8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013aca:	6818      	ldr	r0, [r3, #0]
 8013acc:	47c8      	blx	r9
 8013ace:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8013ad2:	aa0f      	add	r2, sp, #60	; 0x3c
 8013ad4:	4651      	mov	r1, sl
 8013ad6:	4638      	mov	r0, r7
 8013ad8:	f005 f964 	bl	8018da4 <uxr_next_reliable_nack_buffer_to_send>
 8013adc:	2800      	cmp	r0, #0
 8013ade:	d1ef      	bne.n	8013ac0 <read_submessage_list+0x15c>
 8013ae0:	e749      	b.n	8013976 <read_submessage_list+0x12>
 8013ae2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8013ae6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8013aea:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8013aee:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8013af2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8013af6:	4651      	mov	r1, sl
 8013af8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8013afc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8013b00:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8013b04:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8013b08:	4628      	mov	r0, r5
 8013b0a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8013b0e:	f001 fd23 	bl	8015558 <uxr_deserialize_BaseObjectRequest>
 8013b12:	4650      	mov	r0, sl
 8013b14:	a90f      	add	r1, sp, #60	; 0x3c
 8013b16:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8013b1a:	f000 fd8d 	bl	8014638 <uxr_parse_base_object_request>
 8013b1e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8013b22:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013b24:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8013b28:	9110      	str	r1, [sp, #64]	; 0x40
 8013b2a:	3f04      	subs	r7, #4
 8013b2c:	f009 090e 	and.w	r9, r9, #14
 8013b30:	b2bf      	uxth	r7, r7
 8013b32:	f1bb 0f00 	cmp.w	fp, #0
 8013b36:	d006      	beq.n	8013b46 <read_submessage_list+0x1e2>
 8013b38:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8013b3c:	9300      	str	r3, [sp, #0]
 8013b3e:	4652      	mov	r2, sl
 8013b40:	2300      	movs	r3, #0
 8013b42:	4620      	mov	r0, r4
 8013b44:	47d8      	blx	fp
 8013b46:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8013b48:	b16a      	cbz	r2, 8013b66 <read_submessage_list+0x202>
 8013b4a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8013b4c:	2100      	movs	r1, #0
 8013b4e:	3802      	subs	r0, #2
 8013b50:	e002      	b.n	8013b58 <read_submessage_list+0x1f4>
 8013b52:	3101      	adds	r1, #1
 8013b54:	4291      	cmp	r1, r2
 8013b56:	d006      	beq.n	8013b66 <read_submessage_list+0x202>
 8013b58:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013b5c:	4553      	cmp	r3, sl
 8013b5e:	d1f8      	bne.n	8013b52 <read_submessage_list+0x1ee>
 8013b60:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013b62:	2200      	movs	r2, #0
 8013b64:	545a      	strb	r2, [r3, r1]
 8013b66:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8013b6a:	9102      	str	r1, [sp, #8]
 8013b6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013b6e:	9101      	str	r1, [sp, #4]
 8013b70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013b72:	9100      	str	r1, [sp, #0]
 8013b74:	464b      	mov	r3, r9
 8013b76:	463a      	mov	r2, r7
 8013b78:	4629      	mov	r1, r5
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	f005 f9d4 	bl	8018f28 <read_submessage_format>
 8013b80:	e6f9      	b.n	8013976 <read_submessage_list+0x12>
 8013b82:	4629      	mov	r1, r5
 8013b84:	4620      	mov	r0, r4
 8013b86:	f7ff fea5 	bl	80138d4 <read_submessage_info>
 8013b8a:	e6f4      	b.n	8013976 <read_submessage_list+0x12>
 8013b8c:	2a00      	cmp	r2, #0
 8013b8e:	d03e      	beq.n	8013c0e <read_submessage_list+0x2aa>
 8013b90:	a910      	add	r1, sp, #64	; 0x40
 8013b92:	4628      	mov	r0, r5
 8013b94:	f001 fedc 	bl	8015950 <uxr_deserialize_STATUS_Payload>
 8013b98:	a90e      	add	r1, sp, #56	; 0x38
 8013b9a:	aa0d      	add	r2, sp, #52	; 0x34
 8013b9c:	a810      	add	r0, sp, #64	; 0x40
 8013b9e:	f000 fd4b 	bl	8014638 <uxr_parse_base_object_request>
 8013ba2:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8013ba6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013ba8:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8013bac:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 8013bb0:	910f      	str	r1, [sp, #60]	; 0x3c
 8013bb2:	f1ba 0f00 	cmp.w	sl, #0
 8013bb6:	d006      	beq.n	8013bc6 <read_submessage_list+0x262>
 8013bb8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8013bbc:	9300      	str	r3, [sp, #0]
 8013bbe:	463a      	mov	r2, r7
 8013bc0:	464b      	mov	r3, r9
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	47d0      	blx	sl
 8013bc6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8013bc8:	2a00      	cmp	r2, #0
 8013bca:	f43f aed4 	beq.w	8013976 <read_submessage_list+0x12>
 8013bce:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8013bd0:	2100      	movs	r1, #0
 8013bd2:	3802      	subs	r0, #2
 8013bd4:	e003      	b.n	8013bde <read_submessage_list+0x27a>
 8013bd6:	3101      	adds	r1, #1
 8013bd8:	4291      	cmp	r1, r2
 8013bda:	f43f aecc 	beq.w	8013976 <read_submessage_list+0x12>
 8013bde:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013be2:	42bb      	cmp	r3, r7
 8013be4:	d1f7      	bne.n	8013bd6 <read_submessage_list+0x272>
 8013be6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013be8:	f803 9001 	strb.w	r9, [r3, r1]
 8013bec:	e6c3      	b.n	8013976 <read_submessage_list+0x12>
 8013bee:	2a00      	cmp	r2, #0
 8013bf0:	f47f aec1 	bne.w	8013976 <read_submessage_list+0x12>
 8013bf4:	4629      	mov	r1, r5
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	f000 fc64 	bl	80144c4 <uxr_read_create_session_status>
 8013bfc:	e6bb      	b.n	8013976 <read_submessage_list+0x12>
 8013bfe:	4629      	mov	r1, r5
 8013c00:	4620      	mov	r0, r4
 8013c02:	f7ff fcf5 	bl	80135f0 <read_submessage_get_info>
 8013c06:	e6b6      	b.n	8013976 <read_submessage_list+0x12>
 8013c08:	b017      	add	sp, #92	; 0x5c
 8013c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c0e:	4629      	mov	r1, r5
 8013c10:	4620      	mov	r0, r4
 8013c12:	f000 fc63 	bl	80144dc <uxr_read_delete_session_status>
 8013c16:	e6ae      	b.n	8013976 <read_submessage_list+0x12>
 8013c18:	f000 feb8 	bl	801498c <uxr_nanos>
 8013c1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013c1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013c20:	464f      	mov	r7, r9
 8013c22:	fbc3 2706 	smlal	r2, r7, r3, r6
 8013c26:	1812      	adds	r2, r2, r0
 8013c28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c2a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013c2c:	eb47 0101 	adc.w	r1, r7, r1
 8013c30:	464f      	mov	r7, r9
 8013c32:	fbc3 0706 	smlal	r0, r7, r3, r6
 8013c36:	463b      	mov	r3, r7
 8013c38:	4684      	mov	ip, r0
 8013c3a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8013c3e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8013c42:	eb1c 0c00 	adds.w	ip, ip, r0
 8013c46:	464f      	mov	r7, r9
 8013c48:	eb43 0307 	adc.w	r3, r3, r7
 8013c4c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8013c50:	eb61 0303 	sbc.w	r3, r1, r3
 8013c54:	0fda      	lsrs	r2, r3, #31
 8013c56:	eb12 020c 	adds.w	r2, r2, ip
 8013c5a:	f143 0300 	adc.w	r3, r3, #0
 8013c5e:	0852      	lsrs	r2, r2, #1
 8013c60:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8013c64:	105b      	asrs	r3, r3, #1
 8013c66:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 8013c6a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8013c6e:	e6dd      	b.n	8013a2c <read_submessage_list+0xc8>
 8013c70:	3b9aca00 	.word	0x3b9aca00

08013c74 <listen_message_reliably>:
 8013c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c78:	1e0b      	subs	r3, r1, #0
 8013c7a:	b09d      	sub	sp, #116	; 0x74
 8013c7c:	bfb8      	it	lt
 8013c7e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8013c82:	4680      	mov	r8, r0
 8013c84:	9305      	str	r3, [sp, #20]
 8013c86:	f000 fe67 	bl	8014958 <uxr_millis>
 8013c8a:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8013c8e:	4681      	mov	r9, r0
 8013c90:	2a00      	cmp	r2, #0
 8013c92:	f000 80a1 	beq.w	8013dd8 <listen_message_reliably+0x164>
 8013c96:	2600      	movs	r6, #0
 8013c98:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013c9c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8013ca0:	9303      	str	r3, [sp, #12]
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	460f      	mov	r7, r1
 8013ca6:	e00f      	b.n	8013cc8 <listen_message_reliably+0x54>
 8013ca8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8013cac:	9903      	ldr	r1, [sp, #12]
 8013cae:	455a      	cmp	r2, fp
 8013cb0:	f106 0601 	add.w	r6, r6, #1
 8013cb4:	eb73 0101 	sbcs.w	r1, r3, r1
 8013cb8:	b2f0      	uxtb	r0, r6
 8013cba:	da01      	bge.n	8013cc0 <listen_message_reliably+0x4c>
 8013cbc:	4693      	mov	fp, r2
 8013cbe:	9303      	str	r3, [sp, #12]
 8013cc0:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8013cc4:	4283      	cmp	r3, r0
 8013cc6:	d960      	bls.n	8013d8a <listen_message_reliably+0x116>
 8013cc8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013ccc:	2102      	movs	r1, #2
 8013cce:	2201      	movs	r2, #1
 8013cd0:	f000 fcc4 	bl	801465c <uxr_stream_id>
 8013cd4:	00e4      	lsls	r4, r4, #3
 8013cd6:	f104 0520 	add.w	r5, r4, #32
 8013cda:	4445      	add	r5, r8
 8013cdc:	4601      	mov	r1, r0
 8013cde:	463b      	mov	r3, r7
 8013ce0:	464a      	mov	r2, r9
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	9109      	str	r1, [sp, #36]	; 0x24
 8013ce6:	f005 f831 	bl	8018d4c <uxr_update_output_stream_heartbeat_timestamp>
 8013cea:	eb08 0304 	add.w	r3, r8, r4
 8013cee:	2800      	cmp	r0, #0
 8013cf0:	d0da      	beq.n	8013ca8 <listen_message_reliably+0x34>
 8013cf2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8013cf6:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8013cfa:	9304      	str	r3, [sp, #16]
 8013cfc:	4640      	mov	r0, r8
 8013cfe:	f000 fc75 	bl	80145ec <uxr_session_header_offset>
 8013d02:	3501      	adds	r5, #1
 8013d04:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8013d08:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013d0c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8013d10:	2300      	movs	r3, #0
 8013d12:	2211      	movs	r2, #17
 8013d14:	9000      	str	r0, [sp, #0]
 8013d16:	a90c      	add	r1, sp, #48	; 0x30
 8013d18:	4650      	mov	r0, sl
 8013d1a:	f7ff f9b7 	bl	801308c <ucdr_init_buffer_origin_offset>
 8013d1e:	2300      	movs	r3, #0
 8013d20:	2205      	movs	r2, #5
 8013d22:	210b      	movs	r1, #11
 8013d24:	4650      	mov	r0, sl
 8013d26:	f000 fdd1 	bl	80148cc <uxr_buffer_submessage_header>
 8013d2a:	8968      	ldrh	r0, [r5, #10]
 8013d2c:	2101      	movs	r1, #1
 8013d2e:	f005 f9c5 	bl	80190bc <uxr_seq_num_add>
 8013d32:	892b      	ldrh	r3, [r5, #8]
 8013d34:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8013d38:	4602      	mov	r2, r0
 8013d3a:	9b04      	ldr	r3, [sp, #16]
 8013d3c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013d40:	a90a      	add	r1, sp, #40	; 0x28
 8013d42:	4650      	mov	r0, sl
 8013d44:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8013d48:	f001 feba 	bl	8015ac0 <uxr_serialize_HEARTBEAT_Payload>
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	4611      	mov	r1, r2
 8013d50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013d52:	4640      	mov	r0, r8
 8013d54:	f000 fbf4 	bl	8014540 <uxr_stamp_session_header>
 8013d58:	4650      	mov	r0, sl
 8013d5a:	f7ff f9d5 	bl	8013108 <ucdr_buffer_length>
 8013d5e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8013d62:	4602      	mov	r2, r0
 8013d64:	a90c      	add	r1, sp, #48	; 0x30
 8013d66:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013d6a:	4444      	add	r4, r8
 8013d6c:	47a8      	blx	r5
 8013d6e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8013d72:	9903      	ldr	r1, [sp, #12]
 8013d74:	455a      	cmp	r2, fp
 8013d76:	f106 0601 	add.w	r6, r6, #1
 8013d7a:	eb73 0101 	sbcs.w	r1, r3, r1
 8013d7e:	b2f0      	uxtb	r0, r6
 8013d80:	db9c      	blt.n	8013cbc <listen_message_reliably+0x48>
 8013d82:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8013d86:	4283      	cmp	r3, r0
 8013d88:	d89e      	bhi.n	8013cc8 <listen_message_reliably+0x54>
 8013d8a:	9a03      	ldr	r2, [sp, #12]
 8013d8c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013d90:	429a      	cmp	r2, r3
 8013d92:	bf08      	it	eq
 8013d94:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8013d98:	d01e      	beq.n	8013dd8 <listen_message_reliably+0x164>
 8013d9a:	ebab 0309 	sub.w	r3, fp, r9
 8013d9e:	9905      	ldr	r1, [sp, #20]
 8013da0:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	bf08      	it	eq
 8013da8:	2301      	moveq	r3, #1
 8013daa:	4299      	cmp	r1, r3
 8013dac:	bfa8      	it	ge
 8013dae:	4619      	movge	r1, r3
 8013db0:	6894      	ldr	r4, [r2, #8]
 8013db2:	6810      	ldr	r0, [r2, #0]
 8013db4:	4689      	mov	r9, r1
 8013db6:	460b      	mov	r3, r1
 8013db8:	aa08      	add	r2, sp, #32
 8013dba:	a907      	add	r1, sp, #28
 8013dbc:	47a0      	blx	r4
 8013dbe:	b968      	cbnz	r0, 8013ddc <listen_message_reliably+0x168>
 8013dc0:	9b05      	ldr	r3, [sp, #20]
 8013dc2:	eba3 0309 	sub.w	r3, r3, r9
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	9305      	str	r3, [sp, #20]
 8013dca:	f73f af5c 	bgt.w	8013c86 <listen_message_reliably+0x12>
 8013dce:	4604      	mov	r4, r0
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	b01d      	add	sp, #116	; 0x74
 8013dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd8:	9b05      	ldr	r3, [sp, #20]
 8013dda:	e7e0      	b.n	8013d9e <listen_message_reliably+0x12a>
 8013ddc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013de0:	4604      	mov	r4, r0
 8013de2:	a80c      	add	r0, sp, #48	; 0x30
 8013de4:	f7ff f964 	bl	80130b0 <ucdr_init_buffer>
 8013de8:	2500      	movs	r5, #0
 8013dea:	f10d 031a 	add.w	r3, sp, #26
 8013dee:	aa06      	add	r2, sp, #24
 8013df0:	a90c      	add	r1, sp, #48	; 0x30
 8013df2:	4640      	mov	r0, r8
 8013df4:	f88d 5018 	strb.w	r5, [sp, #24]
 8013df8:	f000 fbb6 	bl	8014568 <uxr_read_session_header>
 8013dfc:	b918      	cbnz	r0, 8013e06 <listen_message_reliably+0x192>
 8013dfe:	4620      	mov	r0, r4
 8013e00:	b01d      	add	sp, #116	; 0x74
 8013e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e06:	4629      	mov	r1, r5
 8013e08:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013e0c:	f000 fc50 	bl	80146b0 <uxr_stream_id_from_raw>
 8013e10:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8013e14:	2d01      	cmp	r5, #1
 8013e16:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8013e1a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8013e1e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013e22:	d04b      	beq.n	8013ebc <listen_message_reliably+0x248>
 8013e24:	2d02      	cmp	r5, #2
 8013e26:	d00f      	beq.n	8013e48 <listen_message_reliably+0x1d4>
 8013e28:	2d00      	cmp	r5, #0
 8013e2a:	d1e8      	bne.n	8013dfe <listen_message_reliably+0x18a>
 8013e2c:	4629      	mov	r1, r5
 8013e2e:	4628      	mov	r0, r5
 8013e30:	f000 fc3e 	bl	80146b0 <uxr_stream_id_from_raw>
 8013e34:	a90c      	add	r1, sp, #48	; 0x30
 8013e36:	4602      	mov	r2, r0
 8013e38:	4640      	mov	r0, r8
 8013e3a:	920a      	str	r2, [sp, #40]	; 0x28
 8013e3c:	f7ff fd92 	bl	8013964 <read_submessage_list>
 8013e40:	4620      	mov	r0, r4
 8013e42:	b01d      	add	sp, #116	; 0x74
 8013e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e48:	4631      	mov	r1, r6
 8013e4a:	f108 0008 	add.w	r0, r8, #8
 8013e4e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8013e52:	f000 fd1b 	bl	801488c <uxr_get_input_reliable_stream>
 8013e56:	4607      	mov	r7, r0
 8013e58:	b338      	cbz	r0, 8013eaa <listen_message_reliably+0x236>
 8013e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013e5c:	9203      	str	r2, [sp, #12]
 8013e5e:	a80c      	add	r0, sp, #48	; 0x30
 8013e60:	f7ff f956 	bl	8013110 <ucdr_buffer_remaining>
 8013e64:	4603      	mov	r3, r0
 8013e66:	f10d 0019 	add.w	r0, sp, #25
 8013e6a:	9000      	str	r0, [sp, #0]
 8013e6c:	9a03      	ldr	r2, [sp, #12]
 8013e6e:	4651      	mov	r1, sl
 8013e70:	4638      	mov	r0, r7
 8013e72:	f004 fb93 	bl	801859c <uxr_receive_reliable_message>
 8013e76:	b1c0      	cbz	r0, 8013eaa <listen_message_reliably+0x236>
 8013e78:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013e7c:	b393      	cbz	r3, 8013ee4 <listen_message_reliably+0x270>
 8013e7e:	ad14      	add	r5, sp, #80	; 0x50
 8013e80:	f04f 0a02 	mov.w	sl, #2
 8013e84:	e00a      	b.n	8013e9c <listen_message_reliably+0x228>
 8013e86:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8013e8a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 8013e8e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8013e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e94:	4629      	mov	r1, r5
 8013e96:	4640      	mov	r0, r8
 8013e98:	f7ff fd64 	bl	8013964 <read_submessage_list>
 8013e9c:	2204      	movs	r2, #4
 8013e9e:	4629      	mov	r1, r5
 8013ea0:	4638      	mov	r0, r7
 8013ea2:	f004 fbfb 	bl	801869c <uxr_next_input_reliable_buffer_available>
 8013ea6:	2800      	cmp	r0, #0
 8013ea8:	d1ed      	bne.n	8013e86 <listen_message_reliably+0x212>
 8013eaa:	4640      	mov	r0, r8
 8013eac:	4632      	mov	r2, r6
 8013eae:	4649      	mov	r1, r9
 8013eb0:	f7ff fbd4 	bl	801365c <write_submessage_acknack.isra.0>
 8013eb4:	4620      	mov	r0, r4
 8013eb6:	b01d      	add	sp, #116	; 0x74
 8013eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ebc:	4631      	mov	r1, r6
 8013ebe:	f108 0008 	add.w	r0, r8, #8
 8013ec2:	f000 fcd9 	bl	8014878 <uxr_get_input_best_effort_stream>
 8013ec6:	2800      	cmp	r0, #0
 8013ec8:	d099      	beq.n	8013dfe <listen_message_reliably+0x18a>
 8013eca:	4651      	mov	r1, sl
 8013ecc:	f004 fad2 	bl	8018474 <uxr_receive_best_effort_message>
 8013ed0:	2800      	cmp	r0, #0
 8013ed2:	d094      	beq.n	8013dfe <listen_message_reliably+0x18a>
 8013ed4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8013ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013eda:	a90c      	add	r1, sp, #48	; 0x30
 8013edc:	4640      	mov	r0, r8
 8013ede:	f7ff fd41 	bl	8013964 <read_submessage_list>
 8013ee2:	e78c      	b.n	8013dfe <listen_message_reliably+0x18a>
 8013ee4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8013ee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013eea:	a90c      	add	r1, sp, #48	; 0x30
 8013eec:	4640      	mov	r0, r8
 8013eee:	f7ff fd39 	bl	8013964 <read_submessage_list>
 8013ef2:	e7c4      	b.n	8013e7e <listen_message_reliably+0x20a>

08013ef4 <uxr_run_session_until_confirm_delivery>:
 8013ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ef8:	4606      	mov	r6, r0
 8013efa:	460d      	mov	r5, r1
 8013efc:	f000 fd2c 	bl	8014958 <uxr_millis>
 8013f00:	4607      	mov	r7, r0
 8013f02:	4630      	mov	r0, r6
 8013f04:	f7ff fc70 	bl	80137e8 <uxr_flash_output_streams>
 8013f08:	2d00      	cmp	r5, #0
 8013f0a:	f106 0808 	add.w	r8, r6, #8
 8013f0e:	bfa8      	it	ge
 8013f10:	462c      	movge	r4, r5
 8013f12:	da07      	bge.n	8013f24 <uxr_run_session_until_confirm_delivery+0x30>
 8013f14:	e00e      	b.n	8013f34 <uxr_run_session_until_confirm_delivery+0x40>
 8013f16:	f7ff fead 	bl	8013c74 <listen_message_reliably>
 8013f1a:	f000 fd1d 	bl	8014958 <uxr_millis>
 8013f1e:	1bc3      	subs	r3, r0, r7
 8013f20:	1aec      	subs	r4, r5, r3
 8013f22:	d407      	bmi.n	8013f34 <uxr_run_session_until_confirm_delivery+0x40>
 8013f24:	4640      	mov	r0, r8
 8013f26:	f000 fcbb 	bl	80148a0 <uxr_output_streams_confirmed>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	4621      	mov	r1, r4
 8013f2e:	4630      	mov	r0, r6
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d0f0      	beq.n	8013f16 <uxr_run_session_until_confirm_delivery+0x22>
 8013f34:	4640      	mov	r0, r8
 8013f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f3a:	f000 bcb1 	b.w	80148a0 <uxr_output_streams_confirmed>
 8013f3e:	bf00      	nop

08013f40 <uxr_run_session_until_all_status>:
 8013f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f44:	9c08      	ldr	r4, [sp, #32]
 8013f46:	4606      	mov	r6, r0
 8013f48:	460f      	mov	r7, r1
 8013f4a:	4691      	mov	r9, r2
 8013f4c:	461d      	mov	r5, r3
 8013f4e:	f7ff fc4b 	bl	80137e8 <uxr_flash_output_streams>
 8013f52:	b124      	cbz	r4, 8013f5e <uxr_run_session_until_all_status+0x1e>
 8013f54:	4622      	mov	r2, r4
 8013f56:	21ff      	movs	r1, #255	; 0xff
 8013f58:	4628      	mov	r0, r5
 8013f5a:	f006 fc3d 	bl	801a7d8 <memset>
 8013f5e:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 8013f62:	67f4      	str	r4, [r6, #124]	; 0x7c
 8013f64:	f000 fcf8 	bl	8014958 <uxr_millis>
 8013f68:	3d01      	subs	r5, #1
 8013f6a:	f1a9 0902 	sub.w	r9, r9, #2
 8013f6e:	4680      	mov	r8, r0
 8013f70:	4639      	mov	r1, r7
 8013f72:	4630      	mov	r0, r6
 8013f74:	f7ff fe7e 	bl	8013c74 <listen_message_reliably>
 8013f78:	f000 fcee 	bl	8014958 <uxr_millis>
 8013f7c:	eba0 0008 	sub.w	r0, r0, r8
 8013f80:	1a39      	subs	r1, r7, r0
 8013f82:	b344      	cbz	r4, 8013fd6 <uxr_run_session_until_all_status+0x96>
 8013f84:	4628      	mov	r0, r5
 8013f86:	46ac      	mov	ip, r5
 8013f88:	2301      	movs	r3, #1
 8013f8a:	e002      	b.n	8013f92 <uxr_run_session_until_all_status+0x52>
 8013f8c:	42a3      	cmp	r3, r4
 8013f8e:	d20d      	bcs.n	8013fac <uxr_run_session_until_all_status+0x6c>
 8013f90:	3301      	adds	r3, #1
 8013f92:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8013f96:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8013f9a:	d1f7      	bne.n	8013f8c <uxr_run_session_until_all_status+0x4c>
 8013f9c:	42a3      	cmp	r3, r4
 8013f9e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8013fa2:	d213      	bcs.n	8013fcc <uxr_run_session_until_all_status+0x8c>
 8013fa4:	2a00      	cmp	r2, #0
 8013fa6:	d0f3      	beq.n	8013f90 <uxr_run_session_until_all_status+0x50>
 8013fa8:	2900      	cmp	r1, #0
 8013faa:	dce2      	bgt.n	8013f72 <uxr_run_session_until_all_status+0x32>
 8013fac:	2300      	movs	r3, #0
 8013fae:	67f3      	str	r3, [r6, #124]	; 0x7c
 8013fb0:	442c      	add	r4, r5
 8013fb2:	e001      	b.n	8013fb8 <uxr_run_session_until_all_status+0x78>
 8013fb4:	2b01      	cmp	r3, #1
 8013fb6:	d812      	bhi.n	8013fde <uxr_run_session_until_all_status+0x9e>
 8013fb8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013fbc:	4284      	cmp	r4, r0
 8013fbe:	d1f9      	bne.n	8013fb4 <uxr_run_session_until_all_status+0x74>
 8013fc0:	2b01      	cmp	r3, #1
 8013fc2:	bf8c      	ite	hi
 8013fc4:	2000      	movhi	r0, #0
 8013fc6:	2001      	movls	r0, #1
 8013fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fcc:	2900      	cmp	r1, #0
 8013fce:	dded      	ble.n	8013fac <uxr_run_session_until_all_status+0x6c>
 8013fd0:	2a00      	cmp	r2, #0
 8013fd2:	d1ce      	bne.n	8013f72 <uxr_run_session_until_all_status+0x32>
 8013fd4:	e7ea      	b.n	8013fac <uxr_run_session_until_all_status+0x6c>
 8013fd6:	67f4      	str	r4, [r6, #124]	; 0x7c
 8013fd8:	2001      	movs	r0, #1
 8013fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fde:	2000      	movs	r0, #0
 8013fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013fe4 <wait_session_status>:
 8013fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe8:	4604      	mov	r4, r0
 8013fea:	b09d      	sub	sp, #116	; 0x74
 8013fec:	20ff      	movs	r0, #255	; 0xff
 8013fee:	7160      	strb	r0, [r4, #5]
 8013ff0:	9303      	str	r3, [sp, #12]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	f000 80b6 	beq.w	8014164 <wait_session_status+0x180>
 8013ff8:	468a      	mov	sl, r1
 8013ffa:	4691      	mov	r9, r2
 8013ffc:	f04f 0b00 	mov.w	fp, #0
 8014000:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014002:	464a      	mov	r2, r9
 8014004:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014008:	4651      	mov	r1, sl
 801400a:	47a8      	blx	r5
 801400c:	f000 fca4 	bl	8014958 <uxr_millis>
 8014010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014014:	4605      	mov	r5, r0
 8014016:	e009      	b.n	801402c <wait_session_status+0x48>
 8014018:	f000 fc9e 	bl	8014958 <uxr_millis>
 801401c:	1b40      	subs	r0, r0, r5
 801401e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8014022:	2b00      	cmp	r3, #0
 8014024:	dd40      	ble.n	80140a8 <wait_session_status+0xc4>
 8014026:	7960      	ldrb	r0, [r4, #5]
 8014028:	28ff      	cmp	r0, #255	; 0xff
 801402a:	d145      	bne.n	80140b8 <wait_session_status+0xd4>
 801402c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801402e:	a908      	add	r1, sp, #32
 8014030:	6896      	ldr	r6, [r2, #8]
 8014032:	6810      	ldr	r0, [r2, #0]
 8014034:	aa09      	add	r2, sp, #36	; 0x24
 8014036:	47b0      	blx	r6
 8014038:	2800      	cmp	r0, #0
 801403a:	d0ed      	beq.n	8014018 <wait_session_status+0x34>
 801403c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8014040:	a80c      	add	r0, sp, #48	; 0x30
 8014042:	f7ff f835 	bl	80130b0 <ucdr_init_buffer>
 8014046:	2600      	movs	r6, #0
 8014048:	f10d 031e 	add.w	r3, sp, #30
 801404c:	aa07      	add	r2, sp, #28
 801404e:	a90c      	add	r1, sp, #48	; 0x30
 8014050:	4620      	mov	r0, r4
 8014052:	f88d 601c 	strb.w	r6, [sp, #28]
 8014056:	f000 fa87 	bl	8014568 <uxr_read_session_header>
 801405a:	2800      	cmp	r0, #0
 801405c:	d0dc      	beq.n	8014018 <wait_session_status+0x34>
 801405e:	4631      	mov	r1, r6
 8014060:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8014064:	f000 fb24 	bl	80146b0 <uxr_stream_id_from_raw>
 8014068:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801406c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014070:	9302      	str	r3, [sp, #8]
 8014072:	2f01      	cmp	r7, #1
 8014074:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8014078:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801407c:	d05c      	beq.n	8014138 <wait_session_status+0x154>
 801407e:	2f02      	cmp	r7, #2
 8014080:	d020      	beq.n	80140c4 <wait_session_status+0xe0>
 8014082:	2f00      	cmp	r7, #0
 8014084:	d1c8      	bne.n	8014018 <wait_session_status+0x34>
 8014086:	4639      	mov	r1, r7
 8014088:	4638      	mov	r0, r7
 801408a:	f000 fb11 	bl	80146b0 <uxr_stream_id_from_raw>
 801408e:	a90c      	add	r1, sp, #48	; 0x30
 8014090:	4602      	mov	r2, r0
 8014092:	900b      	str	r0, [sp, #44]	; 0x2c
 8014094:	4620      	mov	r0, r4
 8014096:	f7ff fc65 	bl	8013964 <read_submessage_list>
 801409a:	f000 fc5d 	bl	8014958 <uxr_millis>
 801409e:	1b40      	subs	r0, r0, r5
 80140a0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	dcbe      	bgt.n	8014026 <wait_session_status+0x42>
 80140a8:	9b03      	ldr	r3, [sp, #12]
 80140aa:	7960      	ldrb	r0, [r4, #5]
 80140ac:	f10b 0b01 	add.w	fp, fp, #1
 80140b0:	455b      	cmp	r3, fp
 80140b2:	d001      	beq.n	80140b8 <wait_session_status+0xd4>
 80140b4:	28ff      	cmp	r0, #255	; 0xff
 80140b6:	d0a3      	beq.n	8014000 <wait_session_status+0x1c>
 80140b8:	38ff      	subs	r0, #255	; 0xff
 80140ba:	bf18      	it	ne
 80140bc:	2001      	movne	r0, #1
 80140be:	b01d      	add	sp, #116	; 0x74
 80140c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140c4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80140c8:	9304      	str	r3, [sp, #16]
 80140ca:	4631      	mov	r1, r6
 80140cc:	f104 0008 	add.w	r0, r4, #8
 80140d0:	f000 fbdc 	bl	801488c <uxr_get_input_reliable_stream>
 80140d4:	4680      	mov	r8, r0
 80140d6:	b348      	cbz	r0, 801412c <wait_session_status+0x148>
 80140d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140da:	9205      	str	r2, [sp, #20]
 80140dc:	a80c      	add	r0, sp, #48	; 0x30
 80140de:	f7ff f817 	bl	8013110 <ucdr_buffer_remaining>
 80140e2:	4603      	mov	r3, r0
 80140e4:	f10d 001d 	add.w	r0, sp, #29
 80140e8:	9000      	str	r0, [sp, #0]
 80140ea:	9a05      	ldr	r2, [sp, #20]
 80140ec:	9902      	ldr	r1, [sp, #8]
 80140ee:	4640      	mov	r0, r8
 80140f0:	f004 fa54 	bl	801859c <uxr_receive_reliable_message>
 80140f4:	b1d0      	cbz	r0, 801412c <wait_session_status+0x148>
 80140f6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d03a      	beq.n	8014174 <wait_session_status+0x190>
 80140fe:	9f04      	ldr	r7, [sp, #16]
 8014100:	e00a      	b.n	8014118 <wait_session_status+0x134>
 8014102:	f04f 0302 	mov.w	r3, #2
 8014106:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 801410a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801410e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8014112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014114:	f7ff fc26 	bl	8013964 <read_submessage_list>
 8014118:	a914      	add	r1, sp, #80	; 0x50
 801411a:	2204      	movs	r2, #4
 801411c:	4640      	mov	r0, r8
 801411e:	f004 fabd 	bl	801869c <uxr_next_input_reliable_buffer_available>
 8014122:	4603      	mov	r3, r0
 8014124:	a914      	add	r1, sp, #80	; 0x50
 8014126:	4620      	mov	r0, r4
 8014128:	2b00      	cmp	r3, #0
 801412a:	d1ea      	bne.n	8014102 <wait_session_status+0x11e>
 801412c:	9904      	ldr	r1, [sp, #16]
 801412e:	4632      	mov	r2, r6
 8014130:	4620      	mov	r0, r4
 8014132:	f7ff fa93 	bl	801365c <write_submessage_acknack.isra.0>
 8014136:	e76f      	b.n	8014018 <wait_session_status+0x34>
 8014138:	4631      	mov	r1, r6
 801413a:	f104 0008 	add.w	r0, r4, #8
 801413e:	f000 fb9b 	bl	8014878 <uxr_get_input_best_effort_stream>
 8014142:	2800      	cmp	r0, #0
 8014144:	f43f af68 	beq.w	8014018 <wait_session_status+0x34>
 8014148:	9902      	ldr	r1, [sp, #8]
 801414a:	f004 f993 	bl	8018474 <uxr_receive_best_effort_message>
 801414e:	2800      	cmp	r0, #0
 8014150:	f43f af62 	beq.w	8014018 <wait_session_status+0x34>
 8014154:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8014158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801415a:	a90c      	add	r1, sp, #48	; 0x30
 801415c:	4620      	mov	r0, r4
 801415e:	f7ff fc01 	bl	8013964 <read_submessage_list>
 8014162:	e759      	b.n	8014018 <wait_session_status+0x34>
 8014164:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014166:	e9d3 0400 	ldrd	r0, r4, [r3]
 801416a:	47a0      	blx	r4
 801416c:	2001      	movs	r0, #1
 801416e:	b01d      	add	sp, #116	; 0x74
 8014170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014174:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8014178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801417a:	a90c      	add	r1, sp, #48	; 0x30
 801417c:	4620      	mov	r0, r4
 801417e:	f7ff fbf1 	bl	8013964 <read_submessage_list>
 8014182:	e7bc      	b.n	80140fe <wait_session_status+0x11a>

08014184 <uxr_delete_session_retries>:
 8014184:	b530      	push	{r4, r5, lr}
 8014186:	b08f      	sub	sp, #60	; 0x3c
 8014188:	4604      	mov	r4, r0
 801418a:	460d      	mov	r5, r1
 801418c:	f000 fa2e 	bl	80145ec <uxr_session_header_offset>
 8014190:	2300      	movs	r3, #0
 8014192:	2210      	movs	r2, #16
 8014194:	9000      	str	r0, [sp, #0]
 8014196:	a902      	add	r1, sp, #8
 8014198:	a806      	add	r0, sp, #24
 801419a:	f7fe ff77 	bl	801308c <ucdr_init_buffer_origin_offset>
 801419e:	a906      	add	r1, sp, #24
 80141a0:	4620      	mov	r0, r4
 80141a2:	f000 f973 	bl	801448c <uxr_buffer_delete_session>
 80141a6:	2200      	movs	r2, #0
 80141a8:	4611      	mov	r1, r2
 80141aa:	9b06      	ldr	r3, [sp, #24]
 80141ac:	4620      	mov	r0, r4
 80141ae:	f000 f9c7 	bl	8014540 <uxr_stamp_session_header>
 80141b2:	a806      	add	r0, sp, #24
 80141b4:	f7fe ffa8 	bl	8013108 <ucdr_buffer_length>
 80141b8:	462b      	mov	r3, r5
 80141ba:	4602      	mov	r2, r0
 80141bc:	a902      	add	r1, sp, #8
 80141be:	4620      	mov	r0, r4
 80141c0:	f7ff ff10 	bl	8013fe4 <wait_session_status>
 80141c4:	b118      	cbz	r0, 80141ce <uxr_delete_session_retries+0x4a>
 80141c6:	7960      	ldrb	r0, [r4, #5]
 80141c8:	fab0 f080 	clz	r0, r0
 80141cc:	0940      	lsrs	r0, r0, #5
 80141ce:	b00f      	add	sp, #60	; 0x3c
 80141d0:	bd30      	pop	{r4, r5, pc}
 80141d2:	bf00      	nop

080141d4 <uxr_create_session>:
 80141d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141d8:	f100 0b08 	add.w	fp, r0, #8
 80141dc:	b0ab      	sub	sp, #172	; 0xac
 80141de:	4604      	mov	r4, r0
 80141e0:	4658      	mov	r0, fp
 80141e2:	f000 fa99 	bl	8014718 <uxr_reset_stream_storage>
 80141e6:	4620      	mov	r0, r4
 80141e8:	f000 fa00 	bl	80145ec <uxr_session_header_offset>
 80141ec:	2300      	movs	r3, #0
 80141ee:	9000      	str	r0, [sp, #0]
 80141f0:	221c      	movs	r2, #28
 80141f2:	a90b      	add	r1, sp, #44	; 0x2c
 80141f4:	a812      	add	r0, sp, #72	; 0x48
 80141f6:	f7fe ff49 	bl	801308c <ucdr_init_buffer_origin_offset>
 80141fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80141fc:	8a1a      	ldrh	r2, [r3, #16]
 80141fe:	3a04      	subs	r2, #4
 8014200:	b292      	uxth	r2, r2
 8014202:	a912      	add	r1, sp, #72	; 0x48
 8014204:	4620      	mov	r0, r4
 8014206:	f000 f917 	bl	8014438 <uxr_buffer_create_session>
 801420a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801420c:	4620      	mov	r0, r4
 801420e:	f000 f983 	bl	8014518 <uxr_stamp_create_session_header>
 8014212:	a812      	add	r0, sp, #72	; 0x48
 8014214:	f7fe ff78 	bl	8013108 <ucdr_buffer_length>
 8014218:	23ff      	movs	r3, #255	; 0xff
 801421a:	7163      	strb	r3, [r4, #5]
 801421c:	230a      	movs	r3, #10
 801421e:	46da      	mov	sl, fp
 8014220:	9303      	str	r3, [sp, #12]
 8014222:	4683      	mov	fp, r0
 8014224:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014226:	465a      	mov	r2, fp
 8014228:	e9d3 0500 	ldrd	r0, r5, [r3]
 801422c:	a90b      	add	r1, sp, #44	; 0x2c
 801422e:	47a8      	blx	r5
 8014230:	f000 fb92 	bl	8014958 <uxr_millis>
 8014234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014238:	4605      	mov	r5, r0
 801423a:	e009      	b.n	8014250 <uxr_create_session+0x7c>
 801423c:	f000 fb8c 	bl	8014958 <uxr_millis>
 8014240:	1b40      	subs	r0, r0, r5
 8014242:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8014246:	2b00      	cmp	r3, #0
 8014248:	7962      	ldrb	r2, [r4, #5]
 801424a:	dd38      	ble.n	80142be <uxr_create_session+0xea>
 801424c:	2aff      	cmp	r2, #255	; 0xff
 801424e:	d13c      	bne.n	80142ca <uxr_create_session+0xf6>
 8014250:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8014252:	a907      	add	r1, sp, #28
 8014254:	6896      	ldr	r6, [r2, #8]
 8014256:	6810      	ldr	r0, [r2, #0]
 8014258:	aa08      	add	r2, sp, #32
 801425a:	47b0      	blx	r6
 801425c:	2800      	cmp	r0, #0
 801425e:	d0ed      	beq.n	801423c <uxr_create_session+0x68>
 8014260:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014264:	a81a      	add	r0, sp, #104	; 0x68
 8014266:	f7fe ff23 	bl	80130b0 <ucdr_init_buffer>
 801426a:	2600      	movs	r6, #0
 801426c:	f10d 031a 	add.w	r3, sp, #26
 8014270:	aa06      	add	r2, sp, #24
 8014272:	a91a      	add	r1, sp, #104	; 0x68
 8014274:	4620      	mov	r0, r4
 8014276:	f88d 6018 	strb.w	r6, [sp, #24]
 801427a:	f000 f975 	bl	8014568 <uxr_read_session_header>
 801427e:	2800      	cmp	r0, #0
 8014280:	d0dc      	beq.n	801423c <uxr_create_session+0x68>
 8014282:	4631      	mov	r1, r6
 8014284:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014288:	f000 fa12 	bl	80146b0 <uxr_stream_id_from_raw>
 801428c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8014290:	2e01      	cmp	r6, #1
 8014292:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8014296:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801429a:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801429e:	d053      	beq.n	8014348 <uxr_create_session+0x174>
 80142a0:	2e02      	cmp	r6, #2
 80142a2:	d018      	beq.n	80142d6 <uxr_create_session+0x102>
 80142a4:	2e00      	cmp	r6, #0
 80142a6:	d1c9      	bne.n	801423c <uxr_create_session+0x68>
 80142a8:	4631      	mov	r1, r6
 80142aa:	4630      	mov	r0, r6
 80142ac:	f000 fa00 	bl	80146b0 <uxr_stream_id_from_raw>
 80142b0:	a91a      	add	r1, sp, #104	; 0x68
 80142b2:	4602      	mov	r2, r0
 80142b4:	900a      	str	r0, [sp, #40]	; 0x28
 80142b6:	4620      	mov	r0, r4
 80142b8:	f7ff fb54 	bl	8013964 <read_submessage_list>
 80142bc:	e7be      	b.n	801423c <uxr_create_session+0x68>
 80142be:	9b03      	ldr	r3, [sp, #12]
 80142c0:	3b01      	subs	r3, #1
 80142c2:	9303      	str	r3, [sp, #12]
 80142c4:	d001      	beq.n	80142ca <uxr_create_session+0xf6>
 80142c6:	2aff      	cmp	r2, #255	; 0xff
 80142c8:	d0ac      	beq.n	8014224 <uxr_create_session+0x50>
 80142ca:	2a00      	cmp	r2, #0
 80142cc:	d051      	beq.n	8014372 <uxr_create_session+0x19e>
 80142ce:	2000      	movs	r0, #0
 80142d0:	b02b      	add	sp, #172	; 0xac
 80142d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142d6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80142da:	9304      	str	r3, [sp, #16]
 80142dc:	4639      	mov	r1, r7
 80142de:	4650      	mov	r0, sl
 80142e0:	f000 fad4 	bl	801488c <uxr_get_input_reliable_stream>
 80142e4:	4680      	mov	r8, r0
 80142e6:	b348      	cbz	r0, 801433c <uxr_create_session+0x168>
 80142e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80142ea:	9205      	str	r2, [sp, #20]
 80142ec:	a81a      	add	r0, sp, #104	; 0x68
 80142ee:	f7fe ff0f 	bl	8013110 <ucdr_buffer_remaining>
 80142f2:	4603      	mov	r3, r0
 80142f4:	f10d 0019 	add.w	r0, sp, #25
 80142f8:	9000      	str	r0, [sp, #0]
 80142fa:	9a05      	ldr	r2, [sp, #20]
 80142fc:	4649      	mov	r1, r9
 80142fe:	4640      	mov	r0, r8
 8014300:	f004 f94c 	bl	801859c <uxr_receive_reliable_message>
 8014304:	b1d0      	cbz	r0, 801433c <uxr_create_session+0x168>
 8014306:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d038      	beq.n	8014380 <uxr_create_session+0x1ac>
 801430e:	9e04      	ldr	r6, [sp, #16]
 8014310:	e00a      	b.n	8014328 <uxr_create_session+0x154>
 8014312:	f04f 0302 	mov.w	r3, #2
 8014316:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 801431a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 801431e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014324:	f7ff fb1e 	bl	8013964 <read_submessage_list>
 8014328:	a922      	add	r1, sp, #136	; 0x88
 801432a:	2204      	movs	r2, #4
 801432c:	4640      	mov	r0, r8
 801432e:	f004 f9b5 	bl	801869c <uxr_next_input_reliable_buffer_available>
 8014332:	4603      	mov	r3, r0
 8014334:	a922      	add	r1, sp, #136	; 0x88
 8014336:	4620      	mov	r0, r4
 8014338:	2b00      	cmp	r3, #0
 801433a:	d1ea      	bne.n	8014312 <uxr_create_session+0x13e>
 801433c:	9904      	ldr	r1, [sp, #16]
 801433e:	463a      	mov	r2, r7
 8014340:	4620      	mov	r0, r4
 8014342:	f7ff f98b 	bl	801365c <write_submessage_acknack.isra.0>
 8014346:	e779      	b.n	801423c <uxr_create_session+0x68>
 8014348:	4639      	mov	r1, r7
 801434a:	4650      	mov	r0, sl
 801434c:	f000 fa94 	bl	8014878 <uxr_get_input_best_effort_stream>
 8014350:	2800      	cmp	r0, #0
 8014352:	f43f af73 	beq.w	801423c <uxr_create_session+0x68>
 8014356:	4649      	mov	r1, r9
 8014358:	f004 f88c 	bl	8018474 <uxr_receive_best_effort_message>
 801435c:	2800      	cmp	r0, #0
 801435e:	f43f af6d 	beq.w	801423c <uxr_create_session+0x68>
 8014362:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014368:	a91a      	add	r1, sp, #104	; 0x68
 801436a:	4620      	mov	r0, r4
 801436c:	f7ff fafa 	bl	8013964 <read_submessage_list>
 8014370:	e764      	b.n	801423c <uxr_create_session+0x68>
 8014372:	4650      	mov	r0, sl
 8014374:	f000 f9d0 	bl	8014718 <uxr_reset_stream_storage>
 8014378:	2001      	movs	r0, #1
 801437a:	b02b      	add	sp, #172	; 0xac
 801437c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014380:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014386:	a91a      	add	r1, sp, #104	; 0x68
 8014388:	4620      	mov	r0, r4
 801438a:	f7ff faeb 	bl	8013964 <read_submessage_list>
 801438e:	e7be      	b.n	801430e <uxr_create_session+0x13a>

08014390 <uxr_prepare_stream_to_write_submessage>:
 8014390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014394:	b082      	sub	sp, #8
 8014396:	4682      	mov	sl, r0
 8014398:	4610      	mov	r0, r2
 801439a:	4615      	mov	r5, r2
 801439c:	461e      	mov	r6, r3
 801439e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80143a2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80143a6:	9101      	str	r1, [sp, #4]
 80143a8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80143ac:	f000 face 	bl	801494c <uxr_submessage_padding>
 80143b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80143b4:	f105 0904 	add.w	r9, r5, #4
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	4481      	add	r9, r0
 80143bc:	d01d      	beq.n	80143fa <uxr_prepare_stream_to_write_submessage+0x6a>
 80143be:	2b02      	cmp	r3, #2
 80143c0:	d116      	bne.n	80143f0 <uxr_prepare_stream_to_write_submessage+0x60>
 80143c2:	4621      	mov	r1, r4
 80143c4:	f10a 0008 	add.w	r0, sl, #8
 80143c8:	f000 fa4c 	bl	8014864 <uxr_get_output_reliable_stream>
 80143cc:	4604      	mov	r4, r0
 80143ce:	b158      	cbz	r0, 80143e8 <uxr_prepare_stream_to_write_submessage+0x58>
 80143d0:	4649      	mov	r1, r9
 80143d2:	4632      	mov	r2, r6
 80143d4:	f004 fb1e 	bl	8018a14 <uxr_prepare_reliable_buffer_to_write>
 80143d8:	4604      	mov	r4, r0
 80143da:	b12c      	cbz	r4, 80143e8 <uxr_prepare_stream_to_write_submessage+0x58>
 80143dc:	4643      	mov	r3, r8
 80143de:	b2aa      	uxth	r2, r5
 80143e0:	4639      	mov	r1, r7
 80143e2:	4630      	mov	r0, r6
 80143e4:	f000 fa72 	bl	80148cc <uxr_buffer_submessage_header>
 80143e8:	4620      	mov	r0, r4
 80143ea:	b002      	add	sp, #8
 80143ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143f0:	2400      	movs	r4, #0
 80143f2:	4620      	mov	r0, r4
 80143f4:	b002      	add	sp, #8
 80143f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143fa:	4621      	mov	r1, r4
 80143fc:	f10a 0008 	add.w	r0, sl, #8
 8014400:	f000 fa28 	bl	8014854 <uxr_get_output_best_effort_stream>
 8014404:	4604      	mov	r4, r0
 8014406:	2800      	cmp	r0, #0
 8014408:	d0ee      	beq.n	80143e8 <uxr_prepare_stream_to_write_submessage+0x58>
 801440a:	4649      	mov	r1, r9
 801440c:	4632      	mov	r2, r6
 801440e:	f004 fa31 	bl	8018874 <uxr_prepare_best_effort_buffer_to_write>
 8014412:	4604      	mov	r4, r0
 8014414:	e7e1      	b.n	80143da <uxr_prepare_stream_to_write_submessage+0x4a>
 8014416:	bf00      	nop

08014418 <uxr_init_session_info>:
 8014418:	0e13      	lsrs	r3, r2, #24
 801441a:	7043      	strb	r3, [r0, #1]
 801441c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8014420:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014424:	7001      	strb	r1, [r0, #0]
 8014426:	70c3      	strb	r3, [r0, #3]
 8014428:	2109      	movs	r1, #9
 801442a:	23ff      	movs	r3, #255	; 0xff
 801442c:	f880 c002 	strb.w	ip, [r0, #2]
 8014430:	7102      	strb	r2, [r0, #4]
 8014432:	80c1      	strh	r1, [r0, #6]
 8014434:	7143      	strb	r3, [r0, #5]
 8014436:	4770      	bx	lr

08014438 <uxr_buffer_create_session>:
 8014438:	b530      	push	{r4, r5, lr}
 801443a:	b089      	sub	sp, #36	; 0x24
 801443c:	2300      	movs	r3, #0
 801443e:	4d12      	ldr	r5, [pc, #72]	; (8014488 <uxr_buffer_create_session+0x50>)
 8014440:	9307      	str	r3, [sp, #28]
 8014442:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014446:	2201      	movs	r2, #1
 8014448:	9301      	str	r3, [sp, #4]
 801444a:	80c2      	strh	r2, [r0, #6]
 801444c:	f88d 2004 	strb.w	r2, [sp, #4]
 8014450:	682a      	ldr	r2, [r5, #0]
 8014452:	9200      	str	r2, [sp, #0]
 8014454:	88aa      	ldrh	r2, [r5, #4]
 8014456:	f8ad 2006 	strh.w	r2, [sp, #6]
 801445a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801445e:	9202      	str	r2, [sp, #8]
 8014460:	460c      	mov	r4, r1
 8014462:	7802      	ldrb	r2, [r0, #0]
 8014464:	9303      	str	r3, [sp, #12]
 8014466:	4619      	mov	r1, r3
 8014468:	f88d 200c 	strb.w	r2, [sp, #12]
 801446c:	4620      	mov	r0, r4
 801446e:	2210      	movs	r2, #16
 8014470:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014474:	9306      	str	r3, [sp, #24]
 8014476:	f000 fa29 	bl	80148cc <uxr_buffer_submessage_header>
 801447a:	4669      	mov	r1, sp
 801447c:	4620      	mov	r0, r4
 801447e:	f001 f981 	bl	8015784 <uxr_serialize_CREATE_CLIENT_Payload>
 8014482:	b009      	add	sp, #36	; 0x24
 8014484:	bd30      	pop	{r4, r5, pc}
 8014486:	bf00      	nop
 8014488:	0801beb8 	.word	0x0801beb8

0801448c <uxr_buffer_delete_session>:
 801448c:	b510      	push	{r4, lr}
 801448e:	4b0c      	ldr	r3, [pc, #48]	; (80144c0 <uxr_buffer_delete_session+0x34>)
 8014490:	b082      	sub	sp, #8
 8014492:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8014496:	f8ad c006 	strh.w	ip, [sp, #6]
 801449a:	460c      	mov	r4, r1
 801449c:	2202      	movs	r2, #2
 801449e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80144a2:	80c2      	strh	r2, [r0, #6]
 80144a4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80144a8:	2204      	movs	r2, #4
 80144aa:	2300      	movs	r3, #0
 80144ac:	2103      	movs	r1, #3
 80144ae:	4620      	mov	r0, r4
 80144b0:	f000 fa0c 	bl	80148cc <uxr_buffer_submessage_header>
 80144b4:	a901      	add	r1, sp, #4
 80144b6:	4620      	mov	r0, r4
 80144b8:	f001 fa0a 	bl	80158d0 <uxr_serialize_DELETE_Payload>
 80144bc:	b002      	add	sp, #8
 80144be:	bd10      	pop	{r4, pc}
 80144c0:	0801beb8 	.word	0x0801beb8

080144c4 <uxr_read_create_session_status>:
 80144c4:	b510      	push	{r4, lr}
 80144c6:	b088      	sub	sp, #32
 80144c8:	4604      	mov	r4, r0
 80144ca:	4608      	mov	r0, r1
 80144cc:	a901      	add	r1, sp, #4
 80144ce:	f001 fa0f 	bl	80158f0 <uxr_deserialize_STATUS_AGENT_Payload>
 80144d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80144d6:	7163      	strb	r3, [r4, #5]
 80144d8:	b008      	add	sp, #32
 80144da:	bd10      	pop	{r4, pc}

080144dc <uxr_read_delete_session_status>:
 80144dc:	b510      	push	{r4, lr}
 80144de:	4604      	mov	r4, r0
 80144e0:	b084      	sub	sp, #16
 80144e2:	4608      	mov	r0, r1
 80144e4:	a902      	add	r1, sp, #8
 80144e6:	f001 fa33 	bl	8015950 <uxr_deserialize_STATUS_Payload>
 80144ea:	88e3      	ldrh	r3, [r4, #6]
 80144ec:	2b02      	cmp	r3, #2
 80144ee:	d001      	beq.n	80144f4 <uxr_read_delete_session_status+0x18>
 80144f0:	b004      	add	sp, #16
 80144f2:	bd10      	pop	{r4, pc}
 80144f4:	f10d 000a 	add.w	r0, sp, #10
 80144f8:	f7ff f836 	bl	8013568 <uxr_object_id_from_raw>
 80144fc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8014500:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8014504:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014508:	b29b      	uxth	r3, r3
 801450a:	2b02      	cmp	r3, #2
 801450c:	bf04      	itt	eq
 801450e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8014512:	7163      	strbeq	r3, [r4, #5]
 8014514:	b004      	add	sp, #16
 8014516:	bd10      	pop	{r4, pc}

08014518 <uxr_stamp_create_session_header>:
 8014518:	b510      	push	{r4, lr}
 801451a:	2208      	movs	r2, #8
 801451c:	b08a      	sub	sp, #40	; 0x28
 801451e:	4604      	mov	r4, r0
 8014520:	eb0d 0002 	add.w	r0, sp, r2
 8014524:	f7fe fdc4 	bl	80130b0 <ucdr_init_buffer>
 8014528:	f814 1b01 	ldrb.w	r1, [r4], #1
 801452c:	9400      	str	r4, [sp, #0]
 801452e:	2300      	movs	r3, #0
 8014530:	461a      	mov	r2, r3
 8014532:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8014536:	a802      	add	r0, sp, #8
 8014538:	f000 fbc2 	bl	8014cc0 <uxr_serialize_message_header>
 801453c:	b00a      	add	sp, #40	; 0x28
 801453e:	bd10      	pop	{r4, pc}

08014540 <uxr_stamp_session_header>:
 8014540:	b530      	push	{r4, r5, lr}
 8014542:	b08d      	sub	sp, #52	; 0x34
 8014544:	4604      	mov	r4, r0
 8014546:	460d      	mov	r5, r1
 8014548:	9203      	str	r2, [sp, #12]
 801454a:	4619      	mov	r1, r3
 801454c:	a804      	add	r0, sp, #16
 801454e:	2208      	movs	r2, #8
 8014550:	f7fe fdae 	bl	80130b0 <ucdr_init_buffer>
 8014554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014558:	9b03      	ldr	r3, [sp, #12]
 801455a:	9400      	str	r4, [sp, #0]
 801455c:	462a      	mov	r2, r5
 801455e:	a804      	add	r0, sp, #16
 8014560:	f000 fbae 	bl	8014cc0 <uxr_serialize_message_header>
 8014564:	b00d      	add	sp, #52	; 0x34
 8014566:	bd30      	pop	{r4, r5, pc}

08014568 <uxr_read_session_header>:
 8014568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801456c:	4607      	mov	r7, r0
 801456e:	b084      	sub	sp, #16
 8014570:	4608      	mov	r0, r1
 8014572:	460c      	mov	r4, r1
 8014574:	4615      	mov	r5, r2
 8014576:	461e      	mov	r6, r3
 8014578:	f7fe fdca 	bl	8013110 <ucdr_buffer_remaining>
 801457c:	2808      	cmp	r0, #8
 801457e:	d803      	bhi.n	8014588 <uxr_read_session_header+0x20>
 8014580:	2000      	movs	r0, #0
 8014582:	b004      	add	sp, #16
 8014584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014588:	f10d 080c 	add.w	r8, sp, #12
 801458c:	4633      	mov	r3, r6
 801458e:	462a      	mov	r2, r5
 8014590:	f8cd 8000 	str.w	r8, [sp]
 8014594:	4620      	mov	r0, r4
 8014596:	f10d 010b 	add.w	r1, sp, #11
 801459a:	f000 fbaf 	bl	8014cfc <uxr_deserialize_message_header>
 801459e:	783a      	ldrb	r2, [r7, #0]
 80145a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80145a4:	4293      	cmp	r3, r2
 80145a6:	d1eb      	bne.n	8014580 <uxr_read_session_header+0x18>
 80145a8:	061b      	lsls	r3, r3, #24
 80145aa:	d41c      	bmi.n	80145e6 <uxr_read_session_header+0x7e>
 80145ac:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80145b0:	787b      	ldrb	r3, [r7, #1]
 80145b2:	429a      	cmp	r2, r3
 80145b4:	d003      	beq.n	80145be <uxr_read_session_header+0x56>
 80145b6:	2001      	movs	r0, #1
 80145b8:	f080 0001 	eor.w	r0, r0, #1
 80145bc:	e7e1      	b.n	8014582 <uxr_read_session_header+0x1a>
 80145be:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80145c2:	78bb      	ldrb	r3, [r7, #2]
 80145c4:	429a      	cmp	r2, r3
 80145c6:	f107 0102 	add.w	r1, r7, #2
 80145ca:	d1f4      	bne.n	80145b6 <uxr_read_session_header+0x4e>
 80145cc:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80145d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d1ee      	bne.n	80145b6 <uxr_read_session_header+0x4e>
 80145d8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80145dc:	784b      	ldrb	r3, [r1, #1]
 80145de:	429a      	cmp	r2, r3
 80145e0:	d1e9      	bne.n	80145b6 <uxr_read_session_header+0x4e>
 80145e2:	2000      	movs	r0, #0
 80145e4:	e7e8      	b.n	80145b8 <uxr_read_session_header+0x50>
 80145e6:	2001      	movs	r0, #1
 80145e8:	e7cb      	b.n	8014582 <uxr_read_session_header+0x1a>
 80145ea:	bf00      	nop

080145ec <uxr_session_header_offset>:
 80145ec:	f990 3000 	ldrsb.w	r3, [r0]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	bfac      	ite	ge
 80145f4:	2008      	movge	r0, #8
 80145f6:	2004      	movlt	r0, #4
 80145f8:	4770      	bx	lr
 80145fa:	bf00      	nop

080145fc <uxr_init_base_object_request>:
 80145fc:	b510      	push	{r4, lr}
 80145fe:	88c3      	ldrh	r3, [r0, #6]
 8014600:	b082      	sub	sp, #8
 8014602:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8014606:	9101      	str	r1, [sp, #4]
 8014608:	f1a3 010a 	sub.w	r1, r3, #10
 801460c:	b289      	uxth	r1, r1
 801460e:	42a1      	cmp	r1, r4
 8014610:	d80e      	bhi.n	8014630 <uxr_init_base_object_request+0x34>
 8014612:	3301      	adds	r3, #1
 8014614:	b29c      	uxth	r4, r3
 8014616:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801461a:	b2db      	uxtb	r3, r3
 801461c:	80c4      	strh	r4, [r0, #6]
 801461e:	9801      	ldr	r0, [sp, #4]
 8014620:	7011      	strb	r1, [r2, #0]
 8014622:	7053      	strb	r3, [r2, #1]
 8014624:	1c91      	adds	r1, r2, #2
 8014626:	f7fe ffb3 	bl	8013590 <uxr_object_id_to_raw>
 801462a:	4620      	mov	r0, r4
 801462c:	b002      	add	sp, #8
 801462e:	bd10      	pop	{r4, pc}
 8014630:	230a      	movs	r3, #10
 8014632:	2100      	movs	r1, #0
 8014634:	461c      	mov	r4, r3
 8014636:	e7f1      	b.n	801461c <uxr_init_base_object_request+0x20>

08014638 <uxr_parse_base_object_request>:
 8014638:	b570      	push	{r4, r5, r6, lr}
 801463a:	4604      	mov	r4, r0
 801463c:	3002      	adds	r0, #2
 801463e:	460d      	mov	r5, r1
 8014640:	4616      	mov	r6, r2
 8014642:	f7fe ff91 	bl	8013568 <uxr_object_id_from_raw>
 8014646:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801464a:	8028      	strh	r0, [r5, #0]
 801464c:	806b      	strh	r3, [r5, #2]
 801464e:	7822      	ldrb	r2, [r4, #0]
 8014650:	7863      	ldrb	r3, [r4, #1]
 8014652:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014656:	8033      	strh	r3, [r6, #0]
 8014658:	bd70      	pop	{r4, r5, r6, pc}
 801465a:	bf00      	nop

0801465c <uxr_stream_id>:
 801465c:	2901      	cmp	r1, #1
 801465e:	b082      	sub	sp, #8
 8014660:	d01d      	beq.n	801469e <uxr_stream_id+0x42>
 8014662:	2902      	cmp	r1, #2
 8014664:	f04f 0c00 	mov.w	ip, #0
 8014668:	d01e      	beq.n	80146a8 <uxr_stream_id+0x4c>
 801466a:	2300      	movs	r3, #0
 801466c:	f36c 0307 	bfi	r3, ip, #0, #8
 8014670:	f360 230f 	bfi	r3, r0, #8, #8
 8014674:	f361 4317 	bfi	r3, r1, #16, #8
 8014678:	f362 631f 	bfi	r3, r2, #24, #8
 801467c:	b2da      	uxtb	r2, r3
 801467e:	2000      	movs	r0, #0
 8014680:	f362 0007 	bfi	r0, r2, #0, #8
 8014684:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014688:	f362 200f 	bfi	r0, r2, #8, #8
 801468c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014690:	f362 4017 	bfi	r0, r2, #16, #8
 8014694:	0e1b      	lsrs	r3, r3, #24
 8014696:	f363 601f 	bfi	r0, r3, #24, #8
 801469a:	b002      	add	sp, #8
 801469c:	4770      	bx	lr
 801469e:	f100 0c01 	add.w	ip, r0, #1
 80146a2:	fa5f fc8c 	uxtb.w	ip, ip
 80146a6:	e7e0      	b.n	801466a <uxr_stream_id+0xe>
 80146a8:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 80146ac:	e7dd      	b.n	801466a <uxr_stream_id+0xe>
 80146ae:	bf00      	nop

080146b0 <uxr_stream_id_from_raw>:
 80146b0:	b082      	sub	sp, #8
 80146b2:	b130      	cbz	r0, 80146c2 <uxr_stream_id_from_raw+0x12>
 80146b4:	0603      	lsls	r3, r0, #24
 80146b6:	d420      	bmi.n	80146fa <uxr_stream_id_from_raw+0x4a>
 80146b8:	1e42      	subs	r2, r0, #1
 80146ba:	b2d2      	uxtb	r2, r2
 80146bc:	f04f 0c01 	mov.w	ip, #1
 80146c0:	e001      	b.n	80146c6 <uxr_stream_id_from_raw+0x16>
 80146c2:	4684      	mov	ip, r0
 80146c4:	4602      	mov	r2, r0
 80146c6:	2300      	movs	r3, #0
 80146c8:	f360 0307 	bfi	r3, r0, #0, #8
 80146cc:	f362 230f 	bfi	r3, r2, #8, #8
 80146d0:	f36c 4317 	bfi	r3, ip, #16, #8
 80146d4:	f361 631f 	bfi	r3, r1, #24, #8
 80146d8:	b2da      	uxtb	r2, r3
 80146da:	2000      	movs	r0, #0
 80146dc:	f362 0007 	bfi	r0, r2, #0, #8
 80146e0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80146e4:	f362 200f 	bfi	r0, r2, #8, #8
 80146e8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80146ec:	f362 4017 	bfi	r0, r2, #16, #8
 80146f0:	0e1b      	lsrs	r3, r3, #24
 80146f2:	f363 601f 	bfi	r0, r3, #24, #8
 80146f6:	b002      	add	sp, #8
 80146f8:	4770      	bx	lr
 80146fa:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80146fe:	f04f 0c02 	mov.w	ip, #2
 8014702:	e7e0      	b.n	80146c6 <uxr_stream_id_from_raw+0x16>

08014704 <uxr_init_stream_storage>:
 8014704:	2300      	movs	r3, #0
 8014706:	7403      	strb	r3, [r0, #16]
 8014708:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 801470c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8014710:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8014714:	4770      	bx	lr
 8014716:	bf00      	nop

08014718 <uxr_reset_stream_storage>:
 8014718:	b570      	push	{r4, r5, r6, lr}
 801471a:	7c03      	ldrb	r3, [r0, #16]
 801471c:	4604      	mov	r4, r0
 801471e:	b153      	cbz	r3, 8014736 <uxr_reset_stream_storage+0x1e>
 8014720:	4606      	mov	r6, r0
 8014722:	2500      	movs	r5, #0
 8014724:	4630      	mov	r0, r6
 8014726:	f004 f89f 	bl	8018868 <uxr_reset_output_best_effort_stream>
 801472a:	7c23      	ldrb	r3, [r4, #16]
 801472c:	3501      	adds	r5, #1
 801472e:	42ab      	cmp	r3, r5
 8014730:	f106 0610 	add.w	r6, r6, #16
 8014734:	d8f6      	bhi.n	8014724 <uxr_reset_stream_storage+0xc>
 8014736:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801473a:	b163      	cbz	r3, 8014756 <uxr_reset_stream_storage+0x3e>
 801473c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014740:	2500      	movs	r5, #0
 8014742:	4630      	mov	r0, r6
 8014744:	f003 fe92 	bl	801846c <uxr_reset_input_best_effort_stream>
 8014748:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801474c:	3501      	adds	r5, #1
 801474e:	42ab      	cmp	r3, r5
 8014750:	f106 0602 	add.w	r6, r6, #2
 8014754:	d8f5      	bhi.n	8014742 <uxr_reset_stream_storage+0x2a>
 8014756:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801475a:	b163      	cbz	r3, 8014776 <uxr_reset_stream_storage+0x5e>
 801475c:	f104 0618 	add.w	r6, r4, #24
 8014760:	2500      	movs	r5, #0
 8014762:	4630      	mov	r0, r6
 8014764:	f004 f92c 	bl	80189c0 <uxr_reset_output_reliable_stream>
 8014768:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801476c:	3501      	adds	r5, #1
 801476e:	42ab      	cmp	r3, r5
 8014770:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8014774:	d8f5      	bhi.n	8014762 <uxr_reset_stream_storage+0x4a>
 8014776:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801477a:	b163      	cbz	r3, 8014796 <uxr_reset_stream_storage+0x7e>
 801477c:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8014780:	2500      	movs	r5, #0
 8014782:	4630      	mov	r0, r6
 8014784:	f003 fee6 	bl	8018554 <uxr_reset_input_reliable_stream>
 8014788:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801478c:	3501      	adds	r5, #1
 801478e:	42ab      	cmp	r3, r5
 8014790:	f106 0618 	add.w	r6, r6, #24
 8014794:	d8f5      	bhi.n	8014782 <uxr_reset_stream_storage+0x6a>
 8014796:	bd70      	pop	{r4, r5, r6, pc}

08014798 <uxr_add_output_best_effort_buffer>:
 8014798:	b510      	push	{r4, lr}
 801479a:	7c04      	ldrb	r4, [r0, #16]
 801479c:	f104 0c01 	add.w	ip, r4, #1
 80147a0:	b082      	sub	sp, #8
 80147a2:	f880 c010 	strb.w	ip, [r0, #16]
 80147a6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80147aa:	f004 f853 	bl	8018854 <uxr_init_output_best_effort_stream>
 80147ae:	2201      	movs	r2, #1
 80147b0:	4611      	mov	r1, r2
 80147b2:	4620      	mov	r0, r4
 80147b4:	b002      	add	sp, #8
 80147b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147ba:	f7ff bf4f 	b.w	801465c <uxr_stream_id>
 80147be:	bf00      	nop

080147c0 <uxr_add_output_reliable_buffer>:
 80147c0:	b510      	push	{r4, lr}
 80147c2:	b084      	sub	sp, #16
 80147c4:	4684      	mov	ip, r0
 80147c6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80147ca:	9000      	str	r0, [sp, #0]
 80147cc:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 80147d0:	2028      	movs	r0, #40	; 0x28
 80147d2:	fb00 c004 	mla	r0, r0, r4, ip
 80147d6:	f104 0e01 	add.w	lr, r4, #1
 80147da:	3018      	adds	r0, #24
 80147dc:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 80147e0:	f004 f8b6 	bl	8018950 <uxr_init_output_reliable_stream>
 80147e4:	2201      	movs	r2, #1
 80147e6:	2102      	movs	r1, #2
 80147e8:	4620      	mov	r0, r4
 80147ea:	b004      	add	sp, #16
 80147ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147f0:	f7ff bf34 	b.w	801465c <uxr_stream_id>

080147f4 <uxr_add_input_best_effort_buffer>:
 80147f4:	b510      	push	{r4, lr}
 80147f6:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80147fa:	4603      	mov	r3, r0
 80147fc:	1c62      	adds	r2, r4, #1
 80147fe:	f104 0021 	add.w	r0, r4, #33	; 0x21
 8014802:	b082      	sub	sp, #8
 8014804:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8014808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801480c:	f003 fe2a 	bl	8018464 <uxr_init_input_best_effort_stream>
 8014810:	2200      	movs	r2, #0
 8014812:	2101      	movs	r1, #1
 8014814:	4620      	mov	r0, r4
 8014816:	b002      	add	sp, #8
 8014818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801481c:	f7ff bf1e 	b.w	801465c <uxr_stream_id>

08014820 <uxr_add_input_reliable_buffer>:
 8014820:	b510      	push	{r4, lr}
 8014822:	b084      	sub	sp, #16
 8014824:	4684      	mov	ip, r0
 8014826:	9806      	ldr	r0, [sp, #24]
 8014828:	9000      	str	r0, [sp, #0]
 801482a:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 801482e:	2018      	movs	r0, #24
 8014830:	fb00 c004 	mla	r0, r0, r4, ip
 8014834:	f104 0e01 	add.w	lr, r4, #1
 8014838:	3048      	adds	r0, #72	; 0x48
 801483a:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 801483e:	f003 fe5d 	bl	80184fc <uxr_init_input_reliable_stream>
 8014842:	2200      	movs	r2, #0
 8014844:	2102      	movs	r1, #2
 8014846:	4620      	mov	r0, r4
 8014848:	b004      	add	sp, #16
 801484a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801484e:	f7ff bf05 	b.w	801465c <uxr_stream_id>
 8014852:	bf00      	nop

08014854 <uxr_get_output_best_effort_stream>:
 8014854:	7c03      	ldrb	r3, [r0, #16]
 8014856:	428b      	cmp	r3, r1
 8014858:	bf8c      	ite	hi
 801485a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801485e:	2000      	movls	r0, #0
 8014860:	4770      	bx	lr
 8014862:	bf00      	nop

08014864 <uxr_get_output_reliable_stream>:
 8014864:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014868:	428b      	cmp	r3, r1
 801486a:	bf83      	ittte	hi
 801486c:	2328      	movhi	r3, #40	; 0x28
 801486e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8014872:	3018      	addhi	r0, #24
 8014874:	2000      	movls	r0, #0
 8014876:	4770      	bx	lr

08014878 <uxr_get_input_best_effort_stream>:
 8014878:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801487c:	428b      	cmp	r3, r1
 801487e:	bf86      	itte	hi
 8014880:	3121      	addhi	r1, #33	; 0x21
 8014882:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8014886:	2000      	movls	r0, #0
 8014888:	4770      	bx	lr
 801488a:	bf00      	nop

0801488c <uxr_get_input_reliable_stream>:
 801488c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8014890:	428b      	cmp	r3, r1
 8014892:	bf83      	ittte	hi
 8014894:	2318      	movhi	r3, #24
 8014896:	fb03 0001 	mlahi	r0, r3, r1, r0
 801489a:	3048      	addhi	r0, #72	; 0x48
 801489c:	2000      	movls	r0, #0
 801489e:	4770      	bx	lr

080148a0 <uxr_output_streams_confirmed>:
 80148a0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80148a4:	b183      	cbz	r3, 80148c8 <uxr_output_streams_confirmed+0x28>
 80148a6:	b570      	push	{r4, r5, r6, lr}
 80148a8:	4606      	mov	r6, r0
 80148aa:	f100 0518 	add.w	r5, r0, #24
 80148ae:	2400      	movs	r4, #0
 80148b0:	e001      	b.n	80148b6 <uxr_output_streams_confirmed+0x16>
 80148b2:	3528      	adds	r5, #40	; 0x28
 80148b4:	b138      	cbz	r0, 80148c6 <uxr_output_streams_confirmed+0x26>
 80148b6:	4628      	mov	r0, r5
 80148b8:	f004 fae0 	bl	8018e7c <uxr_is_output_up_to_date>
 80148bc:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80148c0:	3401      	adds	r4, #1
 80148c2:	42a3      	cmp	r3, r4
 80148c4:	d8f5      	bhi.n	80148b2 <uxr_output_streams_confirmed+0x12>
 80148c6:	bd70      	pop	{r4, r5, r6, pc}
 80148c8:	2001      	movs	r0, #1
 80148ca:	4770      	bx	lr

080148cc <uxr_buffer_submessage_header>:
 80148cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ce:	4604      	mov	r4, r0
 80148d0:	460e      	mov	r6, r1
 80148d2:	2104      	movs	r1, #4
 80148d4:	4615      	mov	r5, r2
 80148d6:	461f      	mov	r7, r3
 80148d8:	f7fe fc04 	bl	80130e4 <ucdr_align_to>
 80148dc:	2301      	movs	r3, #1
 80148de:	ea47 0203 	orr.w	r2, r7, r3
 80148e2:	4631      	mov	r1, r6
 80148e4:	7523      	strb	r3, [r4, #20]
 80148e6:	4620      	mov	r0, r4
 80148e8:	462b      	mov	r3, r5
 80148ea:	f000 fa27 	bl	8014d3c <uxr_serialize_submessage_header>
 80148ee:	4620      	mov	r0, r4
 80148f0:	f7fe fc0e 	bl	8013110 <ucdr_buffer_remaining>
 80148f4:	42a8      	cmp	r0, r5
 80148f6:	bf34      	ite	cc
 80148f8:	2000      	movcc	r0, #0
 80148fa:	2001      	movcs	r0, #1
 80148fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148fe:	bf00      	nop

08014900 <uxr_read_submessage_header>:
 8014900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014904:	4604      	mov	r4, r0
 8014906:	460d      	mov	r5, r1
 8014908:	2104      	movs	r1, #4
 801490a:	4616      	mov	r6, r2
 801490c:	4698      	mov	r8, r3
 801490e:	f7fe fbe9 	bl	80130e4 <ucdr_align_to>
 8014912:	4620      	mov	r0, r4
 8014914:	f7fe fbfc 	bl	8013110 <ucdr_buffer_remaining>
 8014918:	2803      	cmp	r0, #3
 801491a:	bf8c      	ite	hi
 801491c:	2701      	movhi	r7, #1
 801491e:	2700      	movls	r7, #0
 8014920:	d802      	bhi.n	8014928 <uxr_read_submessage_header+0x28>
 8014922:	4638      	mov	r0, r7
 8014924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014928:	4633      	mov	r3, r6
 801492a:	4642      	mov	r2, r8
 801492c:	4620      	mov	r0, r4
 801492e:	4629      	mov	r1, r5
 8014930:	f000 fa18 	bl	8014d64 <uxr_deserialize_submessage_header>
 8014934:	f898 3000 	ldrb.w	r3, [r8]
 8014938:	f003 0201 	and.w	r2, r3, #1
 801493c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8014940:	f888 3000 	strb.w	r3, [r8]
 8014944:	7522      	strb	r2, [r4, #20]
 8014946:	4638      	mov	r0, r7
 8014948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801494c <uxr_submessage_padding>:
 801494c:	f010 0003 	ands.w	r0, r0, #3
 8014950:	bf18      	it	ne
 8014952:	f1c0 0004 	rsbne	r0, r0, #4
 8014956:	4770      	bx	lr

08014958 <uxr_millis>:
 8014958:	b510      	push	{r4, lr}
 801495a:	b084      	sub	sp, #16
 801495c:	4669      	mov	r1, sp
 801495e:	2001      	movs	r0, #1
 8014960:	f7ed fa4a 	bl	8001df8 <clock_gettime>
 8014964:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8014968:	4906      	ldr	r1, [pc, #24]	; (8014984 <uxr_millis+0x2c>)
 801496a:	fba0 0301 	umull	r0, r3, r0, r1
 801496e:	1900      	adds	r0, r0, r4
 8014970:	fb01 3102 	mla	r1, r1, r2, r3
 8014974:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8014978:	4a03      	ldr	r2, [pc, #12]	; (8014988 <uxr_millis+0x30>)
 801497a:	2300      	movs	r3, #0
 801497c:	f7eb fe9c 	bl	80006b8 <__aeabi_ldivmod>
 8014980:	b004      	add	sp, #16
 8014982:	bd10      	pop	{r4, pc}
 8014984:	3b9aca00 	.word	0x3b9aca00
 8014988:	000f4240 	.word	0x000f4240

0801498c <uxr_nanos>:
 801498c:	b510      	push	{r4, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	4669      	mov	r1, sp
 8014992:	2001      	movs	r0, #1
 8014994:	f7ed fa30 	bl	8001df8 <clock_gettime>
 8014998:	4a06      	ldr	r2, [pc, #24]	; (80149b4 <uxr_nanos+0x28>)
 801499a:	9800      	ldr	r0, [sp, #0]
 801499c:	9902      	ldr	r1, [sp, #8]
 801499e:	9c01      	ldr	r4, [sp, #4]
 80149a0:	fba0 0302 	umull	r0, r3, r0, r2
 80149a4:	1840      	adds	r0, r0, r1
 80149a6:	fb02 3304 	mla	r3, r2, r4, r3
 80149aa:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80149ae:	b004      	add	sp, #16
 80149b0:	bd10      	pop	{r4, pc}
 80149b2:	bf00      	nop
 80149b4:	3b9aca00 	.word	0x3b9aca00

080149b8 <on_full_output_buffer_fragmented>:
 80149b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149bc:	460c      	mov	r4, r1
 80149be:	b08a      	sub	sp, #40	; 0x28
 80149c0:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80149c4:	4606      	mov	r6, r0
 80149c6:	f104 0008 	add.w	r0, r4, #8
 80149ca:	f7ff ff4b 	bl	8014864 <uxr_get_output_reliable_stream>
 80149ce:	4605      	mov	r5, r0
 80149d0:	f004 fa5e 	bl	8018e90 <get_available_free_slots>
 80149d4:	b968      	cbnz	r0, 80149f2 <on_full_output_buffer_fragmented+0x3a>
 80149d6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80149da:	4620      	mov	r0, r4
 80149dc:	4798      	blx	r3
 80149de:	b918      	cbnz	r0, 80149e8 <on_full_output_buffer_fragmented+0x30>
 80149e0:	2001      	movs	r0, #1
 80149e2:	b00a      	add	sp, #40	; 0x28
 80149e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149e8:	4628      	mov	r0, r5
 80149ea:	f004 fa51 	bl	8018e90 <get_available_free_slots>
 80149ee:	2800      	cmp	r0, #0
 80149f0:	d0f6      	beq.n	80149e0 <on_full_output_buffer_fragmented+0x28>
 80149f2:	8929      	ldrh	r1, [r5, #8]
 80149f4:	89eb      	ldrh	r3, [r5, #14]
 80149f6:	7b28      	ldrb	r0, [r5, #12]
 80149f8:	686a      	ldr	r2, [r5, #4]
 80149fa:	fbb2 f8f1 	udiv	r8, r2, r1
 80149fe:	fbb3 f2f1 	udiv	r2, r3, r1
 8014a02:	fb01 3112 	mls	r1, r1, r2, r3
 8014a06:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 8014a0a:	b289      	uxth	r1, r1
 8014a0c:	fb08 f101 	mul.w	r1, r8, r1
 8014a10:	30fc      	adds	r0, #252	; 0xfc
 8014a12:	f1a8 0804 	sub.w	r8, r8, #4
 8014a16:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8014a1a:	4440      	add	r0, r8
 8014a1c:	b287      	uxth	r7, r0
 8014a1e:	1bdb      	subs	r3, r3, r7
 8014a20:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8014a24:	682b      	ldr	r3, [r5, #0]
 8014a26:	3104      	adds	r1, #4
 8014a28:	4419      	add	r1, r3
 8014a2a:	4642      	mov	r2, r8
 8014a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a30:	9300      	str	r3, [sp, #0]
 8014a32:	a802      	add	r0, sp, #8
 8014a34:	2300      	movs	r3, #0
 8014a36:	f7fe fb29 	bl	801308c <ucdr_init_buffer_origin_offset>
 8014a3a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8014a3e:	f102 0308 	add.w	r3, r2, #8
 8014a42:	4543      	cmp	r3, r8
 8014a44:	d928      	bls.n	8014a98 <on_full_output_buffer_fragmented+0xe0>
 8014a46:	463a      	mov	r2, r7
 8014a48:	2300      	movs	r3, #0
 8014a4a:	210d      	movs	r1, #13
 8014a4c:	a802      	add	r0, sp, #8
 8014a4e:	f7ff ff3d 	bl	80148cc <uxr_buffer_submessage_header>
 8014a52:	8929      	ldrh	r1, [r5, #8]
 8014a54:	89eb      	ldrh	r3, [r5, #14]
 8014a56:	fbb3 f2f1 	udiv	r2, r3, r1
 8014a5a:	fb01 3312 	mls	r3, r1, r2, r3
 8014a5e:	b29b      	uxth	r3, r3
 8014a60:	686a      	ldr	r2, [r5, #4]
 8014a62:	fbb2 f2f1 	udiv	r2, r2, r1
 8014a66:	fb02 f303 	mul.w	r3, r2, r3
 8014a6a:	682a      	ldr	r2, [r5, #0]
 8014a6c:	f842 8003 	str.w	r8, [r2, r3]
 8014a70:	89e8      	ldrh	r0, [r5, #14]
 8014a72:	2101      	movs	r1, #1
 8014a74:	f004 fb22 	bl	80190bc <uxr_seq_num_add>
 8014a78:	9904      	ldr	r1, [sp, #16]
 8014a7a:	9a03      	ldr	r2, [sp, #12]
 8014a7c:	81e8      	strh	r0, [r5, #14]
 8014a7e:	1a52      	subs	r2, r2, r1
 8014a80:	4630      	mov	r0, r6
 8014a82:	f7fe fb15 	bl	80130b0 <ucdr_init_buffer>
 8014a86:	4630      	mov	r0, r6
 8014a88:	490f      	ldr	r1, [pc, #60]	; (8014ac8 <on_full_output_buffer_fragmented+0x110>)
 8014a8a:	4622      	mov	r2, r4
 8014a8c:	f7fe fae4 	bl	8013058 <ucdr_set_on_full_buffer_callback>
 8014a90:	2000      	movs	r0, #0
 8014a92:	b00a      	add	sp, #40	; 0x28
 8014a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a98:	b292      	uxth	r2, r2
 8014a9a:	2302      	movs	r3, #2
 8014a9c:	210d      	movs	r1, #13
 8014a9e:	a802      	add	r0, sp, #8
 8014aa0:	f7ff ff14 	bl	80148cc <uxr_buffer_submessage_header>
 8014aa4:	8928      	ldrh	r0, [r5, #8]
 8014aa6:	89eb      	ldrh	r3, [r5, #14]
 8014aa8:	fbb3 f1f0 	udiv	r1, r3, r0
 8014aac:	fb00 3311 	mls	r3, r0, r1, r3
 8014ab0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8014ab4:	6869      	ldr	r1, [r5, #4]
 8014ab6:	fbb1 f1f0 	udiv	r1, r1, r0
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	fb01 f303 	mul.w	r3, r1, r3
 8014ac0:	6829      	ldr	r1, [r5, #0]
 8014ac2:	3208      	adds	r2, #8
 8014ac4:	50ca      	str	r2, [r1, r3]
 8014ac6:	e7d3      	b.n	8014a70 <on_full_output_buffer_fragmented+0xb8>
 8014ac8:	080149b9 	.word	0x080149b9

08014acc <uxr_prepare_output_stream>:
 8014acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ace:	b087      	sub	sp, #28
 8014ad0:	2707      	movs	r7, #7
 8014ad2:	9202      	str	r2, [sp, #8]
 8014ad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ad6:	9103      	str	r1, [sp, #12]
 8014ad8:	2500      	movs	r5, #0
 8014ada:	3204      	adds	r2, #4
 8014adc:	e9cd 7500 	strd	r7, r5, [sp]
 8014ae0:	461c      	mov	r4, r3
 8014ae2:	4606      	mov	r6, r0
 8014ae4:	f7ff fc54 	bl	8014390 <uxr_prepare_stream_to_write_submessage>
 8014ae8:	f080 0201 	eor.w	r2, r0, #1
 8014aec:	b2d2      	uxtb	r2, r2
 8014aee:	75a2      	strb	r2, [r4, #22]
 8014af0:	b112      	cbz	r2, 8014af8 <uxr_prepare_output_stream+0x2c>
 8014af2:	4628      	mov	r0, r5
 8014af4:	b007      	add	sp, #28
 8014af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014af8:	aa05      	add	r2, sp, #20
 8014afa:	9902      	ldr	r1, [sp, #8]
 8014afc:	4630      	mov	r0, r6
 8014afe:	f7ff fd7d 	bl	80145fc <uxr_init_base_object_request>
 8014b02:	a905      	add	r1, sp, #20
 8014b04:	4605      	mov	r5, r0
 8014b06:	4620      	mov	r0, r4
 8014b08:	f000 ffa0 	bl	8015a4c <uxr_serialize_WRITE_DATA_Payload_Data>
 8014b0c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014b10:	69a6      	ldr	r6, [r4, #24]
 8014b12:	69e7      	ldr	r7, [r4, #28]
 8014b14:	1a52      	subs	r2, r2, r1
 8014b16:	4620      	mov	r0, r4
 8014b18:	f7fe faca 	bl	80130b0 <ucdr_init_buffer>
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	463a      	mov	r2, r7
 8014b20:	4631      	mov	r1, r6
 8014b22:	f7fe fa99 	bl	8013058 <ucdr_set_on_full_buffer_callback>
 8014b26:	4628      	mov	r0, r5
 8014b28:	b007      	add	sp, #28
 8014b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014b2c <uxr_prepare_output_stream_fragmented>:
 8014b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b30:	b091      	sub	sp, #68	; 0x44
 8014b32:	4605      	mov	r5, r0
 8014b34:	9105      	str	r1, [sp, #20]
 8014b36:	3008      	adds	r0, #8
 8014b38:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014b3c:	461e      	mov	r6, r3
 8014b3e:	9204      	str	r2, [sp, #16]
 8014b40:	f7ff fe90 	bl	8014864 <uxr_get_output_reliable_stream>
 8014b44:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8014b48:	2b01      	cmp	r3, #1
 8014b4a:	f000 8091 	beq.w	8014c70 <uxr_prepare_output_stream_fragmented+0x144>
 8014b4e:	4604      	mov	r4, r0
 8014b50:	2800      	cmp	r0, #0
 8014b52:	f000 808d 	beq.w	8014c70 <uxr_prepare_output_stream_fragmented+0x144>
 8014b56:	f004 f99b 	bl	8018e90 <get_available_free_slots>
 8014b5a:	2800      	cmp	r0, #0
 8014b5c:	f000 8083 	beq.w	8014c66 <uxr_prepare_output_stream_fragmented+0x13a>
 8014b60:	8922      	ldrh	r2, [r4, #8]
 8014b62:	89e7      	ldrh	r7, [r4, #14]
 8014b64:	fbb7 f9f2 	udiv	r9, r7, r2
 8014b68:	fb02 7919 	mls	r9, r2, r9, r7
 8014b6c:	fa1f f989 	uxth.w	r9, r9
 8014b70:	6863      	ldr	r3, [r4, #4]
 8014b72:	fbb3 f2f2 	udiv	r2, r3, r2
 8014b76:	6823      	ldr	r3, [r4, #0]
 8014b78:	9203      	str	r2, [sp, #12]
 8014b7a:	fb02 f909 	mul.w	r9, r2, r9
 8014b7e:	f109 0904 	add.w	r9, r9, #4
 8014b82:	4499      	add	r9, r3
 8014b84:	7b23      	ldrb	r3, [r4, #12]
 8014b86:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8014b8a:	4543      	cmp	r3, r8
 8014b8c:	f1a2 0b04 	sub.w	fp, r2, #4
 8014b90:	d37a      	bcc.n	8014c88 <uxr_prepare_output_stream_fragmented+0x15c>
 8014b92:	f1ab 0a04 	sub.w	sl, fp, #4
 8014b96:	ebaa 0a03 	sub.w	sl, sl, r3
 8014b9a:	465a      	mov	r2, fp
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	4649      	mov	r1, r9
 8014ba0:	a808      	add	r0, sp, #32
 8014ba2:	f8cd 8000 	str.w	r8, [sp]
 8014ba6:	f7fe fa71 	bl	801308c <ucdr_init_buffer_origin_offset>
 8014baa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014bac:	fa1f fa8a 	uxth.w	sl, sl
 8014bb0:	4652      	mov	r2, sl
 8014bb2:	f103 0a08 	add.w	sl, r3, #8
 8014bb6:	45da      	cmp	sl, fp
 8014bb8:	bf34      	ite	cc
 8014bba:	2302      	movcc	r3, #2
 8014bbc:	2300      	movcs	r3, #0
 8014bbe:	210d      	movs	r1, #13
 8014bc0:	a808      	add	r0, sp, #32
 8014bc2:	f7ff fe83 	bl	80148cc <uxr_buffer_submessage_header>
 8014bc6:	8921      	ldrh	r1, [r4, #8]
 8014bc8:	fbb7 f2f1 	udiv	r2, r7, r1
 8014bcc:	fb01 7212 	mls	r2, r1, r2, r7
 8014bd0:	b292      	uxth	r2, r2
 8014bd2:	6863      	ldr	r3, [r4, #4]
 8014bd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8014bd8:	fb02 f303 	mul.w	r3, r2, r3
 8014bdc:	6822      	ldr	r2, [r4, #0]
 8014bde:	4638      	mov	r0, r7
 8014be0:	f842 b003 	str.w	fp, [r2, r3]
 8014be4:	2101      	movs	r1, #1
 8014be6:	f004 fa69 	bl	80190bc <uxr_seq_num_add>
 8014bea:	9b03      	ldr	r3, [sp, #12]
 8014bec:	f108 0104 	add.w	r1, r8, #4
 8014bf0:	f1a3 0208 	sub.w	r2, r3, #8
 8014bf4:	eba2 0208 	sub.w	r2, r2, r8
 8014bf8:	4449      	add	r1, r9
 8014bfa:	4607      	mov	r7, r0
 8014bfc:	4630      	mov	r0, r6
 8014bfe:	f7fe fa57 	bl	80130b0 <ucdr_init_buffer>
 8014c02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014c04:	81e7      	strh	r7, [r4, #14]
 8014c06:	1d1a      	adds	r2, r3, #4
 8014c08:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8014c0c:	bf28      	it	cs
 8014c0e:	2200      	movcs	r2, #0
 8014c10:	2300      	movs	r3, #0
 8014c12:	b292      	uxth	r2, r2
 8014c14:	2107      	movs	r1, #7
 8014c16:	4630      	mov	r0, r6
 8014c18:	f7ff fe58 	bl	80148cc <uxr_buffer_submessage_header>
 8014c1c:	9904      	ldr	r1, [sp, #16]
 8014c1e:	aa07      	add	r2, sp, #28
 8014c20:	4628      	mov	r0, r5
 8014c22:	f7ff fceb 	bl	80145fc <uxr_init_base_object_request>
 8014c26:	4604      	mov	r4, r0
 8014c28:	b318      	cbz	r0, 8014c72 <uxr_prepare_output_stream_fragmented+0x146>
 8014c2a:	a907      	add	r1, sp, #28
 8014c2c:	4630      	mov	r0, r6
 8014c2e:	f000 ff0d 	bl	8015a4c <uxr_serialize_WRITE_DATA_Payload_Data>
 8014c32:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8014c36:	4630      	mov	r0, r6
 8014c38:	1a52      	subs	r2, r2, r1
 8014c3a:	f7fe fa39 	bl	80130b0 <ucdr_init_buffer>
 8014c3e:	9b05      	ldr	r3, [sp, #20]
 8014c40:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8014c44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014c46:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8014c4a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014c4c:	491b      	ldr	r1, [pc, #108]	; (8014cbc <uxr_prepare_output_stream_fragmented+0x190>)
 8014c4e:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 8014c52:	4630      	mov	r0, r6
 8014c54:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8014c58:	462a      	mov	r2, r5
 8014c5a:	f7fe f9fd 	bl	8013058 <ucdr_set_on_full_buffer_callback>
 8014c5e:	4620      	mov	r0, r4
 8014c60:	b011      	add	sp, #68	; 0x44
 8014c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c66:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014c68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014c6a:	4628      	mov	r0, r5
 8014c6c:	4798      	blx	r3
 8014c6e:	b920      	cbnz	r0, 8014c7a <uxr_prepare_output_stream_fragmented+0x14e>
 8014c70:	2400      	movs	r4, #0
 8014c72:	4620      	mov	r0, r4
 8014c74:	b011      	add	sp, #68	; 0x44
 8014c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c7a:	4620      	mov	r0, r4
 8014c7c:	f004 f908 	bl	8018e90 <get_available_free_slots>
 8014c80:	2800      	cmp	r0, #0
 8014c82:	f47f af6d 	bne.w	8014b60 <uxr_prepare_output_stream_fragmented+0x34>
 8014c86:	e7f3      	b.n	8014c70 <uxr_prepare_output_stream_fragmented+0x144>
 8014c88:	4638      	mov	r0, r7
 8014c8a:	2101      	movs	r1, #1
 8014c8c:	f004 fa16 	bl	80190bc <uxr_seq_num_add>
 8014c90:	8921      	ldrh	r1, [r4, #8]
 8014c92:	fbb0 f2f1 	udiv	r2, r0, r1
 8014c96:	fb01 0912 	mls	r9, r1, r2, r0
 8014c9a:	fa1f f289 	uxth.w	r2, r9
 8014c9e:	6863      	ldr	r3, [r4, #4]
 8014ca0:	fbb3 f9f1 	udiv	r9, r3, r1
 8014ca4:	6823      	ldr	r3, [r4, #0]
 8014ca6:	fb02 f909 	mul.w	r9, r2, r9
 8014caa:	f109 0904 	add.w	r9, r9, #4
 8014cae:	4499      	add	r9, r3
 8014cb0:	4607      	mov	r7, r0
 8014cb2:	7b23      	ldrb	r3, [r4, #12]
 8014cb4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8014cb8:	e76b      	b.n	8014b92 <uxr_prepare_output_stream_fragmented+0x66>
 8014cba:	bf00      	nop
 8014cbc:	080149b9 	.word	0x080149b9

08014cc0 <uxr_serialize_message_header>:
 8014cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cc2:	b083      	sub	sp, #12
 8014cc4:	4616      	mov	r6, r2
 8014cc6:	4604      	mov	r4, r0
 8014cc8:	9301      	str	r3, [sp, #4]
 8014cca:	460d      	mov	r5, r1
 8014ccc:	9f08      	ldr	r7, [sp, #32]
 8014cce:	f7fc fcbf 	bl	8011650 <ucdr_serialize_uint8_t>
 8014cd2:	4631      	mov	r1, r6
 8014cd4:	4620      	mov	r0, r4
 8014cd6:	f7fc fcbb 	bl	8011650 <ucdr_serialize_uint8_t>
 8014cda:	9a01      	ldr	r2, [sp, #4]
 8014cdc:	2101      	movs	r1, #1
 8014cde:	4620      	mov	r0, r4
 8014ce0:	f7fc fd62 	bl	80117a8 <ucdr_serialize_endian_uint16_t>
 8014ce4:	062b      	lsls	r3, r5, #24
 8014ce6:	d501      	bpl.n	8014cec <uxr_serialize_message_header+0x2c>
 8014ce8:	b003      	add	sp, #12
 8014cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cec:	2204      	movs	r2, #4
 8014cee:	4639      	mov	r1, r7
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	b003      	add	sp, #12
 8014cf4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014cf8:	f003 b968 	b.w	8017fcc <ucdr_serialize_array_uint8_t>

08014cfc <uxr_deserialize_message_header>:
 8014cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	4616      	mov	r6, r2
 8014d02:	4604      	mov	r4, r0
 8014d04:	9301      	str	r3, [sp, #4]
 8014d06:	460d      	mov	r5, r1
 8014d08:	9f08      	ldr	r7, [sp, #32]
 8014d0a:	f7fc fcb7 	bl	801167c <ucdr_deserialize_uint8_t>
 8014d0e:	4631      	mov	r1, r6
 8014d10:	4620      	mov	r0, r4
 8014d12:	f7fc fcb3 	bl	801167c <ucdr_deserialize_uint8_t>
 8014d16:	9a01      	ldr	r2, [sp, #4]
 8014d18:	2101      	movs	r1, #1
 8014d1a:	4620      	mov	r0, r4
 8014d1c:	f7fc fe38 	bl	8011990 <ucdr_deserialize_endian_uint16_t>
 8014d20:	f995 3000 	ldrsb.w	r3, [r5]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	da01      	bge.n	8014d2c <uxr_deserialize_message_header+0x30>
 8014d28:	b003      	add	sp, #12
 8014d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d2c:	2204      	movs	r2, #4
 8014d2e:	4639      	mov	r1, r7
 8014d30:	4620      	mov	r0, r4
 8014d32:	b003      	add	sp, #12
 8014d34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014d38:	f003 b9ac 	b.w	8018094 <ucdr_deserialize_array_uint8_t>

08014d3c <uxr_serialize_submessage_header>:
 8014d3c:	b530      	push	{r4, r5, lr}
 8014d3e:	b083      	sub	sp, #12
 8014d40:	4615      	mov	r5, r2
 8014d42:	4604      	mov	r4, r0
 8014d44:	9301      	str	r3, [sp, #4]
 8014d46:	f7fc fc83 	bl	8011650 <ucdr_serialize_uint8_t>
 8014d4a:	4629      	mov	r1, r5
 8014d4c:	4620      	mov	r0, r4
 8014d4e:	f7fc fc7f 	bl	8011650 <ucdr_serialize_uint8_t>
 8014d52:	9a01      	ldr	r2, [sp, #4]
 8014d54:	2101      	movs	r1, #1
 8014d56:	4620      	mov	r0, r4
 8014d58:	b003      	add	sp, #12
 8014d5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d5e:	f7fc bd23 	b.w	80117a8 <ucdr_serialize_endian_uint16_t>
 8014d62:	bf00      	nop

08014d64 <uxr_deserialize_submessage_header>:
 8014d64:	b530      	push	{r4, r5, lr}
 8014d66:	b083      	sub	sp, #12
 8014d68:	4615      	mov	r5, r2
 8014d6a:	4604      	mov	r4, r0
 8014d6c:	9301      	str	r3, [sp, #4]
 8014d6e:	f7fc fc85 	bl	801167c <ucdr_deserialize_uint8_t>
 8014d72:	4629      	mov	r1, r5
 8014d74:	4620      	mov	r0, r4
 8014d76:	f7fc fc81 	bl	801167c <ucdr_deserialize_uint8_t>
 8014d7a:	9a01      	ldr	r2, [sp, #4]
 8014d7c:	2101      	movs	r1, #1
 8014d7e:	4620      	mov	r0, r4
 8014d80:	b003      	add	sp, #12
 8014d82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d86:	f7fc be03 	b.w	8011990 <ucdr_deserialize_endian_uint16_t>
 8014d8a:	bf00      	nop

08014d8c <uxr_serialize_CLIENT_Representation>:
 8014d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d90:	2204      	movs	r2, #4
 8014d92:	460e      	mov	r6, r1
 8014d94:	4605      	mov	r5, r0
 8014d96:	f003 f919 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8014d9a:	2202      	movs	r2, #2
 8014d9c:	4607      	mov	r7, r0
 8014d9e:	1d31      	adds	r1, r6, #4
 8014da0:	4628      	mov	r0, r5
 8014da2:	f003 f913 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8014da6:	4038      	ands	r0, r7
 8014da8:	2202      	movs	r2, #2
 8014daa:	1db1      	adds	r1, r6, #6
 8014dac:	b2c7      	uxtb	r7, r0
 8014dae:	4628      	mov	r0, r5
 8014db0:	f003 f90c 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8014db4:	2204      	movs	r2, #4
 8014db6:	4007      	ands	r7, r0
 8014db8:	f106 0108 	add.w	r1, r6, #8
 8014dbc:	4628      	mov	r0, r5
 8014dbe:	f003 f905 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8014dc2:	7b31      	ldrb	r1, [r6, #12]
 8014dc4:	4007      	ands	r7, r0
 8014dc6:	4628      	mov	r0, r5
 8014dc8:	f7fc fc42 	bl	8011650 <ucdr_serialize_uint8_t>
 8014dcc:	7b71      	ldrb	r1, [r6, #13]
 8014dce:	4007      	ands	r7, r0
 8014dd0:	4628      	mov	r0, r5
 8014dd2:	f7fc fc0f 	bl	80115f4 <ucdr_serialize_bool>
 8014dd6:	7b73      	ldrb	r3, [r6, #13]
 8014dd8:	ea07 0800 	and.w	r8, r7, r0
 8014ddc:	b93b      	cbnz	r3, 8014dee <uxr_serialize_CLIENT_Representation+0x62>
 8014dde:	8bb1      	ldrh	r1, [r6, #28]
 8014de0:	4628      	mov	r0, r5
 8014de2:	f7fc fc61 	bl	80116a8 <ucdr_serialize_uint16_t>
 8014de6:	ea08 0000 	and.w	r0, r8, r0
 8014dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dee:	6931      	ldr	r1, [r6, #16]
 8014df0:	4628      	mov	r0, r5
 8014df2:	f7fc fe43 	bl	8011a7c <ucdr_serialize_uint32_t>
 8014df6:	6933      	ldr	r3, [r6, #16]
 8014df8:	b1e3      	cbz	r3, 8014e34 <uxr_serialize_CLIENT_Representation+0xa8>
 8014dfa:	b1c0      	cbz	r0, 8014e2e <uxr_serialize_CLIENT_Representation+0xa2>
 8014dfc:	4637      	mov	r7, r6
 8014dfe:	f04f 0900 	mov.w	r9, #0
 8014e02:	e001      	b.n	8014e08 <uxr_serialize_CLIENT_Representation+0x7c>
 8014e04:	3708      	adds	r7, #8
 8014e06:	b194      	cbz	r4, 8014e2e <uxr_serialize_CLIENT_Representation+0xa2>
 8014e08:	6979      	ldr	r1, [r7, #20]
 8014e0a:	4628      	mov	r0, r5
 8014e0c:	f003 fa50 	bl	80182b0 <ucdr_serialize_string>
 8014e10:	69b9      	ldr	r1, [r7, #24]
 8014e12:	4604      	mov	r4, r0
 8014e14:	4628      	mov	r0, r5
 8014e16:	f003 fa4b 	bl	80182b0 <ucdr_serialize_string>
 8014e1a:	6933      	ldr	r3, [r6, #16]
 8014e1c:	f109 0901 	add.w	r9, r9, #1
 8014e20:	4004      	ands	r4, r0
 8014e22:	4599      	cmp	r9, r3
 8014e24:	b2e4      	uxtb	r4, r4
 8014e26:	d3ed      	bcc.n	8014e04 <uxr_serialize_CLIENT_Representation+0x78>
 8014e28:	ea08 0804 	and.w	r8, r8, r4
 8014e2c:	e7d7      	b.n	8014dde <uxr_serialize_CLIENT_Representation+0x52>
 8014e2e:	f04f 0800 	mov.w	r8, #0
 8014e32:	e7d4      	b.n	8014dde <uxr_serialize_CLIENT_Representation+0x52>
 8014e34:	ea08 0800 	and.w	r8, r8, r0
 8014e38:	e7d1      	b.n	8014dde <uxr_serialize_CLIENT_Representation+0x52>
 8014e3a:	bf00      	nop

08014e3c <uxr_deserialize_CLIENT_Representation>:
 8014e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e40:	2204      	movs	r2, #4
 8014e42:	460c      	mov	r4, r1
 8014e44:	4605      	mov	r5, r0
 8014e46:	f003 f925 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 8014e4a:	2202      	movs	r2, #2
 8014e4c:	4607      	mov	r7, r0
 8014e4e:	1d21      	adds	r1, r4, #4
 8014e50:	4628      	mov	r0, r5
 8014e52:	f003 f91f 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 8014e56:	4038      	ands	r0, r7
 8014e58:	2202      	movs	r2, #2
 8014e5a:	1da1      	adds	r1, r4, #6
 8014e5c:	b2c6      	uxtb	r6, r0
 8014e5e:	4628      	mov	r0, r5
 8014e60:	f003 f918 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 8014e64:	2204      	movs	r2, #4
 8014e66:	4006      	ands	r6, r0
 8014e68:	f104 0108 	add.w	r1, r4, #8
 8014e6c:	4628      	mov	r0, r5
 8014e6e:	f003 f911 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 8014e72:	f104 010c 	add.w	r1, r4, #12
 8014e76:	4006      	ands	r6, r0
 8014e78:	4628      	mov	r0, r5
 8014e7a:	f7fc fbff 	bl	801167c <ucdr_deserialize_uint8_t>
 8014e7e:	f104 010d 	add.w	r1, r4, #13
 8014e82:	ea06 0700 	and.w	r7, r6, r0
 8014e86:	4628      	mov	r0, r5
 8014e88:	f7fc fbca 	bl	8011620 <ucdr_deserialize_bool>
 8014e8c:	7b63      	ldrb	r3, [r4, #13]
 8014e8e:	4007      	ands	r7, r0
 8014e90:	b93b      	cbnz	r3, 8014ea2 <uxr_deserialize_CLIENT_Representation+0x66>
 8014e92:	f104 011c 	add.w	r1, r4, #28
 8014e96:	4628      	mov	r0, r5
 8014e98:	f7fc fd06 	bl	80118a8 <ucdr_deserialize_uint16_t>
 8014e9c:	4038      	ands	r0, r7
 8014e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ea2:	f104 0110 	add.w	r1, r4, #16
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	f7fc ff18 	bl	8011cdc <ucdr_deserialize_uint32_t>
 8014eac:	6923      	ldr	r3, [r4, #16]
 8014eae:	2b01      	cmp	r3, #1
 8014eb0:	d903      	bls.n	8014eba <uxr_deserialize_CLIENT_Representation+0x7e>
 8014eb2:	2301      	movs	r3, #1
 8014eb4:	75ab      	strb	r3, [r5, #22]
 8014eb6:	2700      	movs	r7, #0
 8014eb8:	e7eb      	b.n	8014e92 <uxr_deserialize_CLIENT_Representation+0x56>
 8014eba:	b30b      	cbz	r3, 8014f00 <uxr_deserialize_CLIENT_Representation+0xc4>
 8014ebc:	2800      	cmp	r0, #0
 8014ebe:	d0fa      	beq.n	8014eb6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8014ec0:	46a0      	mov	r8, r4
 8014ec2:	f04f 0900 	mov.w	r9, #0
 8014ec6:	e001      	b.n	8014ecc <uxr_deserialize_CLIENT_Representation+0x90>
 8014ec8:	2e00      	cmp	r6, #0
 8014eca:	d0f4      	beq.n	8014eb6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8014ecc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014ed4:	4628      	mov	r0, r5
 8014ed6:	f003 f9fb 	bl	80182d0 <ucdr_deserialize_string>
 8014eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014ede:	4606      	mov	r6, r0
 8014ee0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8014ee4:	4628      	mov	r0, r5
 8014ee6:	f003 f9f3 	bl	80182d0 <ucdr_deserialize_string>
 8014eea:	6923      	ldr	r3, [r4, #16]
 8014eec:	f109 0901 	add.w	r9, r9, #1
 8014ef0:	4006      	ands	r6, r0
 8014ef2:	4599      	cmp	r9, r3
 8014ef4:	f108 0808 	add.w	r8, r8, #8
 8014ef8:	b2f6      	uxtb	r6, r6
 8014efa:	d3e5      	bcc.n	8014ec8 <uxr_deserialize_CLIENT_Representation+0x8c>
 8014efc:	4037      	ands	r7, r6
 8014efe:	e7c8      	b.n	8014e92 <uxr_deserialize_CLIENT_Representation+0x56>
 8014f00:	4007      	ands	r7, r0
 8014f02:	e7c6      	b.n	8014e92 <uxr_deserialize_CLIENT_Representation+0x56>

08014f04 <uxr_serialize_AGENT_Representation>:
 8014f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f08:	2204      	movs	r2, #4
 8014f0a:	460f      	mov	r7, r1
 8014f0c:	4605      	mov	r5, r0
 8014f0e:	f003 f85d 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8014f12:	2202      	movs	r2, #2
 8014f14:	4604      	mov	r4, r0
 8014f16:	1d39      	adds	r1, r7, #4
 8014f18:	4628      	mov	r0, r5
 8014f1a:	f003 f857 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8014f1e:	4020      	ands	r0, r4
 8014f20:	2202      	movs	r2, #2
 8014f22:	1db9      	adds	r1, r7, #6
 8014f24:	b2c4      	uxtb	r4, r0
 8014f26:	4628      	mov	r0, r5
 8014f28:	f003 f850 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8014f2c:	7a39      	ldrb	r1, [r7, #8]
 8014f2e:	4004      	ands	r4, r0
 8014f30:	4628      	mov	r0, r5
 8014f32:	f7fc fb5f 	bl	80115f4 <ucdr_serialize_bool>
 8014f36:	7a3b      	ldrb	r3, [r7, #8]
 8014f38:	ea00 0804 	and.w	r8, r0, r4
 8014f3c:	b913      	cbnz	r3, 8014f44 <uxr_serialize_AGENT_Representation+0x40>
 8014f3e:	4640      	mov	r0, r8
 8014f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f44:	68f9      	ldr	r1, [r7, #12]
 8014f46:	4628      	mov	r0, r5
 8014f48:	f7fc fd98 	bl	8011a7c <ucdr_serialize_uint32_t>
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	b303      	cbz	r3, 8014f92 <uxr_serialize_AGENT_Representation+0x8e>
 8014f50:	b1d0      	cbz	r0, 8014f88 <uxr_serialize_AGENT_Representation+0x84>
 8014f52:	463e      	mov	r6, r7
 8014f54:	f04f 0900 	mov.w	r9, #0
 8014f58:	e001      	b.n	8014f5e <uxr_serialize_AGENT_Representation+0x5a>
 8014f5a:	3608      	adds	r6, #8
 8014f5c:	b1a4      	cbz	r4, 8014f88 <uxr_serialize_AGENT_Representation+0x84>
 8014f5e:	6931      	ldr	r1, [r6, #16]
 8014f60:	4628      	mov	r0, r5
 8014f62:	f003 f9a5 	bl	80182b0 <ucdr_serialize_string>
 8014f66:	6971      	ldr	r1, [r6, #20]
 8014f68:	4604      	mov	r4, r0
 8014f6a:	4628      	mov	r0, r5
 8014f6c:	f003 f9a0 	bl	80182b0 <ucdr_serialize_string>
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	f109 0901 	add.w	r9, r9, #1
 8014f76:	4004      	ands	r4, r0
 8014f78:	4599      	cmp	r9, r3
 8014f7a:	b2e4      	uxtb	r4, r4
 8014f7c:	d3ed      	bcc.n	8014f5a <uxr_serialize_AGENT_Representation+0x56>
 8014f7e:	ea08 0804 	and.w	r8, r8, r4
 8014f82:	4640      	mov	r0, r8
 8014f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f88:	f04f 0800 	mov.w	r8, #0
 8014f8c:	4640      	mov	r0, r8
 8014f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f92:	ea08 0800 	and.w	r8, r8, r0
 8014f96:	e7d2      	b.n	8014f3e <uxr_serialize_AGENT_Representation+0x3a>

08014f98 <uxr_serialize_DATAWRITER_Representation>:
 8014f98:	b570      	push	{r4, r5, r6, lr}
 8014f9a:	460d      	mov	r5, r1
 8014f9c:	7809      	ldrb	r1, [r1, #0]
 8014f9e:	4606      	mov	r6, r0
 8014fa0:	f7fc fb56 	bl	8011650 <ucdr_serialize_uint8_t>
 8014fa4:	4604      	mov	r4, r0
 8014fa6:	b130      	cbz	r0, 8014fb6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014fa8:	782b      	ldrb	r3, [r5, #0]
 8014faa:	2b02      	cmp	r3, #2
 8014fac:	d00c      	beq.n	8014fc8 <uxr_serialize_DATAWRITER_Representation+0x30>
 8014fae:	2b03      	cmp	r3, #3
 8014fb0:	d010      	beq.n	8014fd4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8014fb2:	2b01      	cmp	r3, #1
 8014fb4:	d008      	beq.n	8014fc8 <uxr_serialize_DATAWRITER_Representation+0x30>
 8014fb6:	2202      	movs	r2, #2
 8014fb8:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8014fbc:	4630      	mov	r0, r6
 8014fbe:	f003 f805 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8014fc2:	4020      	ands	r0, r4
 8014fc4:	b2c0      	uxtb	r0, r0
 8014fc6:	bd70      	pop	{r4, r5, r6, pc}
 8014fc8:	6869      	ldr	r1, [r5, #4]
 8014fca:	4630      	mov	r0, r6
 8014fcc:	f003 f970 	bl	80182b0 <ucdr_serialize_string>
 8014fd0:	4604      	mov	r4, r0
 8014fd2:	e7f0      	b.n	8014fb6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014fd4:	4629      	mov	r1, r5
 8014fd6:	4630      	mov	r0, r6
 8014fd8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8014fdc:	3104      	adds	r1, #4
 8014fde:	f7fe f903 	bl	80131e8 <ucdr_serialize_sequence_uint8_t>
 8014fe2:	4604      	mov	r4, r0
 8014fe4:	e7e7      	b.n	8014fb6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014fe6:	bf00      	nop

08014fe8 <uxr_serialize_ObjectVariant.part.0>:
 8014fe8:	b570      	push	{r4, r5, r6, lr}
 8014fea:	780b      	ldrb	r3, [r1, #0]
 8014fec:	3b01      	subs	r3, #1
 8014fee:	460c      	mov	r4, r1
 8014ff0:	4605      	mov	r5, r0
 8014ff2:	2b0d      	cmp	r3, #13
 8014ff4:	d854      	bhi.n	80150a0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014ff6:	e8df f003 	tbb	[pc, r3]
 8014ffa:	0730      	.short	0x0730
 8014ffc:	07071b1b 	.word	0x07071b1b
 8015000:	0c530707 	.word	0x0c530707
 8015004:	494e0c0c 	.word	0x494e0c0c
 8015008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801500c:	3104      	adds	r1, #4
 801500e:	f7ff bfc3 	b.w	8014f98 <uxr_serialize_DATAWRITER_Representation>
 8015012:	7909      	ldrb	r1, [r1, #4]
 8015014:	f7fc fb1c 	bl	8011650 <ucdr_serialize_uint8_t>
 8015018:	b1e8      	cbz	r0, 8015056 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801501a:	7923      	ldrb	r3, [r4, #4]
 801501c:	2b01      	cmp	r3, #1
 801501e:	d001      	beq.n	8015024 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8015020:	2b02      	cmp	r3, #2
 8015022:	d13d      	bne.n	80150a0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015024:	68a1      	ldr	r1, [r4, #8]
 8015026:	4628      	mov	r0, r5
 8015028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801502c:	f003 b940 	b.w	80182b0 <ucdr_serialize_string>
 8015030:	7909      	ldrb	r1, [r1, #4]
 8015032:	f7fc fb0d 	bl	8011650 <ucdr_serialize_uint8_t>
 8015036:	4606      	mov	r6, r0
 8015038:	b120      	cbz	r0, 8015044 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801503a:	7923      	ldrb	r3, [r4, #4]
 801503c:	2b02      	cmp	r3, #2
 801503e:	d039      	beq.n	80150b4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8015040:	2b03      	cmp	r3, #3
 8015042:	d02f      	beq.n	80150a4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8015044:	2202      	movs	r2, #2
 8015046:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801504a:	4628      	mov	r0, r5
 801504c:	f002 ffbe 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8015050:	4030      	ands	r0, r6
 8015052:	b2c0      	uxtb	r0, r0
 8015054:	bd70      	pop	{r4, r5, r6, pc}
 8015056:	2000      	movs	r0, #0
 8015058:	bd70      	pop	{r4, r5, r6, pc}
 801505a:	7909      	ldrb	r1, [r1, #4]
 801505c:	f7fc faf8 	bl	8011650 <ucdr_serialize_uint8_t>
 8015060:	4606      	mov	r6, r0
 8015062:	b158      	cbz	r0, 801507c <uxr_serialize_ObjectVariant.part.0+0x94>
 8015064:	7923      	ldrb	r3, [r4, #4]
 8015066:	2b02      	cmp	r3, #2
 8015068:	d003      	beq.n	8015072 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801506a:	2b03      	cmp	r3, #3
 801506c:	d028      	beq.n	80150c0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801506e:	2b01      	cmp	r3, #1
 8015070:	d104      	bne.n	801507c <uxr_serialize_ObjectVariant.part.0+0x94>
 8015072:	68a1      	ldr	r1, [r4, #8]
 8015074:	4628      	mov	r0, r5
 8015076:	f003 f91b 	bl	80182b0 <ucdr_serialize_string>
 801507a:	4606      	mov	r6, r0
 801507c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8015080:	4628      	mov	r0, r5
 8015082:	f7fd f821 	bl	80120c8 <ucdr_serialize_int16_t>
 8015086:	4030      	ands	r0, r6
 8015088:	b2c0      	uxtb	r0, r0
 801508a:	bd70      	pop	{r4, r5, r6, pc}
 801508c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015090:	3104      	adds	r1, #4
 8015092:	f7ff be7b 	b.w	8014d8c <uxr_serialize_CLIENT_Representation>
 8015096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801509a:	3104      	adds	r1, #4
 801509c:	f7ff bf32 	b.w	8014f04 <uxr_serialize_AGENT_Representation>
 80150a0:	2001      	movs	r0, #1
 80150a2:	bd70      	pop	{r4, r5, r6, pc}
 80150a4:	68a2      	ldr	r2, [r4, #8]
 80150a6:	f104 010c 	add.w	r1, r4, #12
 80150aa:	4628      	mov	r0, r5
 80150ac:	f7fe f89c 	bl	80131e8 <ucdr_serialize_sequence_uint8_t>
 80150b0:	4606      	mov	r6, r0
 80150b2:	e7c7      	b.n	8015044 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80150b4:	68a1      	ldr	r1, [r4, #8]
 80150b6:	4628      	mov	r0, r5
 80150b8:	f003 f8fa 	bl	80182b0 <ucdr_serialize_string>
 80150bc:	4606      	mov	r6, r0
 80150be:	e7c1      	b.n	8015044 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80150c0:	68a2      	ldr	r2, [r4, #8]
 80150c2:	f104 010c 	add.w	r1, r4, #12
 80150c6:	4628      	mov	r0, r5
 80150c8:	f7fe f88e 	bl	80131e8 <ucdr_serialize_sequence_uint8_t>
 80150cc:	4606      	mov	r6, r0
 80150ce:	e7d5      	b.n	801507c <uxr_serialize_ObjectVariant.part.0+0x94>

080150d0 <uxr_deserialize_DATAWRITER_Representation>:
 80150d0:	b570      	push	{r4, r5, r6, lr}
 80150d2:	4606      	mov	r6, r0
 80150d4:	460d      	mov	r5, r1
 80150d6:	f7fc fad1 	bl	801167c <ucdr_deserialize_uint8_t>
 80150da:	4604      	mov	r4, r0
 80150dc:	b130      	cbz	r0, 80150ec <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80150de:	782b      	ldrb	r3, [r5, #0]
 80150e0:	2b02      	cmp	r3, #2
 80150e2:	d00c      	beq.n	80150fe <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80150e4:	2b03      	cmp	r3, #3
 80150e6:	d012      	beq.n	801510e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80150e8:	2b01      	cmp	r3, #1
 80150ea:	d008      	beq.n	80150fe <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80150ec:	2202      	movs	r2, #2
 80150ee:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80150f2:	4630      	mov	r0, r6
 80150f4:	f002 ffce 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 80150f8:	4020      	ands	r0, r4
 80150fa:	b2c0      	uxtb	r0, r0
 80150fc:	bd70      	pop	{r4, r5, r6, pc}
 80150fe:	6869      	ldr	r1, [r5, #4]
 8015100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015104:	4630      	mov	r0, r6
 8015106:	f003 f8e3 	bl	80182d0 <ucdr_deserialize_string>
 801510a:	4604      	mov	r4, r0
 801510c:	e7ee      	b.n	80150ec <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801510e:	1d2b      	adds	r3, r5, #4
 8015110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015114:	f105 0108 	add.w	r1, r5, #8
 8015118:	4630      	mov	r0, r6
 801511a:	f7fe f877 	bl	801320c <ucdr_deserialize_sequence_uint8_t>
 801511e:	4604      	mov	r4, r0
 8015120:	e7e4      	b.n	80150ec <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015122:	bf00      	nop

08015124 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8015124:	b570      	push	{r4, r5, r6, lr}
 8015126:	460d      	mov	r5, r1
 8015128:	7809      	ldrb	r1, [r1, #0]
 801512a:	4606      	mov	r6, r0
 801512c:	f7fc fa62 	bl	80115f4 <ucdr_serialize_bool>
 8015130:	782b      	ldrb	r3, [r5, #0]
 8015132:	4604      	mov	r4, r0
 8015134:	b94b      	cbnz	r3, 801514a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8015136:	7a29      	ldrb	r1, [r5, #8]
 8015138:	4630      	mov	r0, r6
 801513a:	f7fc fa5b 	bl	80115f4 <ucdr_serialize_bool>
 801513e:	7a2b      	ldrb	r3, [r5, #8]
 8015140:	4004      	ands	r4, r0
 8015142:	b2e4      	uxtb	r4, r4
 8015144:	b943      	cbnz	r3, 8015158 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8015146:	4620      	mov	r0, r4
 8015148:	bd70      	pop	{r4, r5, r6, pc}
 801514a:	6869      	ldr	r1, [r5, #4]
 801514c:	4630      	mov	r0, r6
 801514e:	f003 f8af 	bl	80182b0 <ucdr_serialize_string>
 8015152:	4004      	ands	r4, r0
 8015154:	b2e4      	uxtb	r4, r4
 8015156:	e7ee      	b.n	8015136 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8015158:	68e9      	ldr	r1, [r5, #12]
 801515a:	4630      	mov	r0, r6
 801515c:	f003 f8a8 	bl	80182b0 <ucdr_serialize_string>
 8015160:	4004      	ands	r4, r0
 8015162:	4620      	mov	r0, r4
 8015164:	bd70      	pop	{r4, r5, r6, pc}
 8015166:	bf00      	nop

08015168 <uxr_serialize_OBJK_Topic_Binary>:
 8015168:	b570      	push	{r4, r5, r6, lr}
 801516a:	460d      	mov	r5, r1
 801516c:	6809      	ldr	r1, [r1, #0]
 801516e:	4606      	mov	r6, r0
 8015170:	f003 f89e 	bl	80182b0 <ucdr_serialize_string>
 8015174:	7929      	ldrb	r1, [r5, #4]
 8015176:	4604      	mov	r4, r0
 8015178:	4630      	mov	r0, r6
 801517a:	f7fc fa3b 	bl	80115f4 <ucdr_serialize_bool>
 801517e:	792b      	ldrb	r3, [r5, #4]
 8015180:	4004      	ands	r4, r0
 8015182:	b2e4      	uxtb	r4, r4
 8015184:	b943      	cbnz	r3, 8015198 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8015186:	7b29      	ldrb	r1, [r5, #12]
 8015188:	4630      	mov	r0, r6
 801518a:	f7fc fa33 	bl	80115f4 <ucdr_serialize_bool>
 801518e:	7b2b      	ldrb	r3, [r5, #12]
 8015190:	4004      	ands	r4, r0
 8015192:	b93b      	cbnz	r3, 80151a4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8015194:	4620      	mov	r0, r4
 8015196:	bd70      	pop	{r4, r5, r6, pc}
 8015198:	68a9      	ldr	r1, [r5, #8]
 801519a:	4630      	mov	r0, r6
 801519c:	f003 f888 	bl	80182b0 <ucdr_serialize_string>
 80151a0:	4004      	ands	r4, r0
 80151a2:	e7f0      	b.n	8015186 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80151a4:	6929      	ldr	r1, [r5, #16]
 80151a6:	4630      	mov	r0, r6
 80151a8:	f003 f882 	bl	80182b0 <ucdr_serialize_string>
 80151ac:	4004      	ands	r4, r0
 80151ae:	b2e4      	uxtb	r4, r4
 80151b0:	4620      	mov	r0, r4
 80151b2:	bd70      	pop	{r4, r5, r6, pc}

080151b4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80151b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151b8:	460c      	mov	r4, r1
 80151ba:	7809      	ldrb	r1, [r1, #0]
 80151bc:	4606      	mov	r6, r0
 80151be:	f7fc fa19 	bl	80115f4 <ucdr_serialize_bool>
 80151c2:	7823      	ldrb	r3, [r4, #0]
 80151c4:	4605      	mov	r5, r0
 80151c6:	b96b      	cbnz	r3, 80151e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80151c8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80151cc:	4630      	mov	r0, r6
 80151ce:	f7fc fa11 	bl	80115f4 <ucdr_serialize_bool>
 80151d2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80151d6:	4005      	ands	r5, r0
 80151d8:	b2ed      	uxtb	r5, r5
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d169      	bne.n	80152b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80151de:	4628      	mov	r0, r5
 80151e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151e4:	6861      	ldr	r1, [r4, #4]
 80151e6:	4630      	mov	r0, r6
 80151e8:	f7fc fc48 	bl	8011a7c <ucdr_serialize_uint32_t>
 80151ec:	6863      	ldr	r3, [r4, #4]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d06b      	beq.n	80152ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80151f2:	2800      	cmp	r0, #0
 80151f4:	d067      	beq.n	80152c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80151f6:	68a1      	ldr	r1, [r4, #8]
 80151f8:	4630      	mov	r0, r6
 80151fa:	f003 f859 	bl	80182b0 <ucdr_serialize_string>
 80151fe:	6863      	ldr	r3, [r4, #4]
 8015200:	2b01      	cmp	r3, #1
 8015202:	d953      	bls.n	80152ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015204:	2800      	cmp	r0, #0
 8015206:	d05e      	beq.n	80152c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015208:	68e1      	ldr	r1, [r4, #12]
 801520a:	4630      	mov	r0, r6
 801520c:	f003 f850 	bl	80182b0 <ucdr_serialize_string>
 8015210:	6863      	ldr	r3, [r4, #4]
 8015212:	2b02      	cmp	r3, #2
 8015214:	d94a      	bls.n	80152ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015216:	2800      	cmp	r0, #0
 8015218:	d055      	beq.n	80152c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801521a:	6921      	ldr	r1, [r4, #16]
 801521c:	4630      	mov	r0, r6
 801521e:	f003 f847 	bl	80182b0 <ucdr_serialize_string>
 8015222:	6863      	ldr	r3, [r4, #4]
 8015224:	2b03      	cmp	r3, #3
 8015226:	d941      	bls.n	80152ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015228:	2800      	cmp	r0, #0
 801522a:	d04c      	beq.n	80152c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801522c:	6961      	ldr	r1, [r4, #20]
 801522e:	4630      	mov	r0, r6
 8015230:	f003 f83e 	bl	80182b0 <ucdr_serialize_string>
 8015234:	6863      	ldr	r3, [r4, #4]
 8015236:	2b04      	cmp	r3, #4
 8015238:	d938      	bls.n	80152ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801523a:	2800      	cmp	r0, #0
 801523c:	d043      	beq.n	80152c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801523e:	69a1      	ldr	r1, [r4, #24]
 8015240:	4630      	mov	r0, r6
 8015242:	f003 f835 	bl	80182b0 <ucdr_serialize_string>
 8015246:	6863      	ldr	r3, [r4, #4]
 8015248:	2b05      	cmp	r3, #5
 801524a:	d92f      	bls.n	80152ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801524c:	2800      	cmp	r0, #0
 801524e:	d03a      	beq.n	80152c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015250:	69e1      	ldr	r1, [r4, #28]
 8015252:	4630      	mov	r0, r6
 8015254:	f003 f82c 	bl	80182b0 <ucdr_serialize_string>
 8015258:	6863      	ldr	r3, [r4, #4]
 801525a:	2b06      	cmp	r3, #6
 801525c:	d926      	bls.n	80152ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801525e:	b390      	cbz	r0, 80152c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015260:	6a21      	ldr	r1, [r4, #32]
 8015262:	4630      	mov	r0, r6
 8015264:	f003 f824 	bl	80182b0 <ucdr_serialize_string>
 8015268:	6863      	ldr	r3, [r4, #4]
 801526a:	2b07      	cmp	r3, #7
 801526c:	d91e      	bls.n	80152ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801526e:	b350      	cbz	r0, 80152c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015270:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015272:	4630      	mov	r0, r6
 8015274:	f003 f81c 	bl	80182b0 <ucdr_serialize_string>
 8015278:	6863      	ldr	r3, [r4, #4]
 801527a:	2b08      	cmp	r3, #8
 801527c:	d916      	bls.n	80152ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801527e:	b310      	cbz	r0, 80152c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015280:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015282:	4630      	mov	r0, r6
 8015284:	f003 f814 	bl	80182b0 <ucdr_serialize_string>
 8015288:	6863      	ldr	r3, [r4, #4]
 801528a:	2b09      	cmp	r3, #9
 801528c:	d90e      	bls.n	80152ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801528e:	b1d0      	cbz	r0, 80152c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015290:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8015294:	2709      	movs	r7, #9
 8015296:	e000      	b.n	801529a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8015298:	b1a8      	cbz	r0, 80152c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801529a:	f858 1b04 	ldr.w	r1, [r8], #4
 801529e:	4630      	mov	r0, r6
 80152a0:	f003 f806 	bl	80182b0 <ucdr_serialize_string>
 80152a4:	6862      	ldr	r2, [r4, #4]
 80152a6:	3701      	adds	r7, #1
 80152a8:	4297      	cmp	r7, r2
 80152aa:	d3f5      	bcc.n	8015298 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80152ac:	4005      	ands	r5, r0
 80152ae:	b2ed      	uxtb	r5, r5
 80152b0:	e78a      	b.n	80151c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80152b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80152b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80152b8:	4630      	mov	r0, r6
 80152ba:	f7fd ff95 	bl	80131e8 <ucdr_serialize_sequence_uint8_t>
 80152be:	4005      	ands	r5, r0
 80152c0:	4628      	mov	r0, r5
 80152c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152c6:	2500      	movs	r5, #0
 80152c8:	e77e      	b.n	80151c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80152ca:	4028      	ands	r0, r5
 80152cc:	b2c5      	uxtb	r5, r0
 80152ce:	e77b      	b.n	80151c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080152d0 <uxr_serialize_OBJK_Publisher_Binary>:
 80152d0:	b570      	push	{r4, r5, r6, lr}
 80152d2:	460d      	mov	r5, r1
 80152d4:	7809      	ldrb	r1, [r1, #0]
 80152d6:	4606      	mov	r6, r0
 80152d8:	f7fc f98c 	bl	80115f4 <ucdr_serialize_bool>
 80152dc:	782b      	ldrb	r3, [r5, #0]
 80152de:	4604      	mov	r4, r0
 80152e0:	b94b      	cbnz	r3, 80152f6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80152e2:	7a29      	ldrb	r1, [r5, #8]
 80152e4:	4630      	mov	r0, r6
 80152e6:	f7fc f985 	bl	80115f4 <ucdr_serialize_bool>
 80152ea:	7a2b      	ldrb	r3, [r5, #8]
 80152ec:	4004      	ands	r4, r0
 80152ee:	b2e4      	uxtb	r4, r4
 80152f0:	b943      	cbnz	r3, 8015304 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80152f2:	4620      	mov	r0, r4
 80152f4:	bd70      	pop	{r4, r5, r6, pc}
 80152f6:	6869      	ldr	r1, [r5, #4]
 80152f8:	4630      	mov	r0, r6
 80152fa:	f002 ffd9 	bl	80182b0 <ucdr_serialize_string>
 80152fe:	4004      	ands	r4, r0
 8015300:	b2e4      	uxtb	r4, r4
 8015302:	e7ee      	b.n	80152e2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8015304:	f105 010c 	add.w	r1, r5, #12
 8015308:	4630      	mov	r0, r6
 801530a:	f7ff ff53 	bl	80151b4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801530e:	4004      	ands	r4, r0
 8015310:	4620      	mov	r0, r4
 8015312:	bd70      	pop	{r4, r5, r6, pc}

08015314 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8015314:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8015318:	4688      	mov	r8, r1
 801531a:	8809      	ldrh	r1, [r1, #0]
 801531c:	4681      	mov	r9, r0
 801531e:	f7fc f9c3 	bl	80116a8 <ucdr_serialize_uint16_t>
 8015322:	f898 1002 	ldrb.w	r1, [r8, #2]
 8015326:	4606      	mov	r6, r0
 8015328:	4648      	mov	r0, r9
 801532a:	f7fc f963 	bl	80115f4 <ucdr_serialize_bool>
 801532e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8015332:	4006      	ands	r6, r0
 8015334:	b2f5      	uxtb	r5, r6
 8015336:	b9eb      	cbnz	r3, 8015374 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8015338:	f898 1006 	ldrb.w	r1, [r8, #6]
 801533c:	4648      	mov	r0, r9
 801533e:	f7fc f959 	bl	80115f4 <ucdr_serialize_bool>
 8015342:	f898 3006 	ldrb.w	r3, [r8, #6]
 8015346:	4005      	ands	r5, r0
 8015348:	bb7b      	cbnz	r3, 80153aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801534a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801534e:	4648      	mov	r0, r9
 8015350:	f7fc f950 	bl	80115f4 <ucdr_serialize_bool>
 8015354:	f898 300c 	ldrb.w	r3, [r8, #12]
 8015358:	4005      	ands	r5, r0
 801535a:	b9f3      	cbnz	r3, 801539a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801535c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8015360:	4648      	mov	r0, r9
 8015362:	f7fc f947 	bl	80115f4 <ucdr_serialize_bool>
 8015366:	f898 3014 	ldrb.w	r3, [r8, #20]
 801536a:	4005      	ands	r5, r0
 801536c:	b94b      	cbnz	r3, 8015382 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801536e:	4628      	mov	r0, r5
 8015370:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015374:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8015378:	4648      	mov	r0, r9
 801537a:	f7fc f995 	bl	80116a8 <ucdr_serialize_uint16_t>
 801537e:	4005      	ands	r5, r0
 8015380:	e7da      	b.n	8015338 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8015382:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8015386:	f108 011c 	add.w	r1, r8, #28
 801538a:	4648      	mov	r0, r9
 801538c:	f7fd ff2c 	bl	80131e8 <ucdr_serialize_sequence_uint8_t>
 8015390:	4028      	ands	r0, r5
 8015392:	b2c5      	uxtb	r5, r0
 8015394:	4628      	mov	r0, r5
 8015396:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801539a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801539e:	4648      	mov	r0, r9
 80153a0:	f7fc fb6c 	bl	8011a7c <ucdr_serialize_uint32_t>
 80153a4:	4028      	ands	r0, r5
 80153a6:	b2c5      	uxtb	r5, r0
 80153a8:	e7d8      	b.n	801535c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80153aa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80153ae:	4648      	mov	r0, r9
 80153b0:	f7fc fb64 	bl	8011a7c <ucdr_serialize_uint32_t>
 80153b4:	4028      	ands	r0, r5
 80153b6:	b2c5      	uxtb	r5, r0
 80153b8:	e7c7      	b.n	801534a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80153ba:	bf00      	nop

080153bc <uxr_serialize_OBJK_DataWriter_Binary>:
 80153bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153be:	2202      	movs	r2, #2
 80153c0:	460d      	mov	r5, r1
 80153c2:	4606      	mov	r6, r0
 80153c4:	f002 fe02 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 80153c8:	78a9      	ldrb	r1, [r5, #2]
 80153ca:	4604      	mov	r4, r0
 80153cc:	4630      	mov	r0, r6
 80153ce:	f7fc f911 	bl	80115f4 <ucdr_serialize_bool>
 80153d2:	78ab      	ldrb	r3, [r5, #2]
 80153d4:	4004      	ands	r4, r0
 80153d6:	b2e4      	uxtb	r4, r4
 80153d8:	b90b      	cbnz	r3, 80153de <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80153da:	4620      	mov	r0, r4
 80153dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153de:	f105 0108 	add.w	r1, r5, #8
 80153e2:	4630      	mov	r0, r6
 80153e4:	f7ff ff96 	bl	8015314 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80153e8:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80153ec:	4607      	mov	r7, r0
 80153ee:	4630      	mov	r0, r6
 80153f0:	f7fc f900 	bl	80115f4 <ucdr_serialize_bool>
 80153f4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80153f8:	4038      	ands	r0, r7
 80153fa:	b2c7      	uxtb	r7, r0
 80153fc:	b913      	cbnz	r3, 8015404 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80153fe:	403c      	ands	r4, r7
 8015400:	4620      	mov	r0, r4
 8015402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015404:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8015408:	4630      	mov	r0, r6
 801540a:	f7fc fd8d 	bl	8011f28 <ucdr_serialize_uint64_t>
 801540e:	4007      	ands	r7, r0
 8015410:	e7f5      	b.n	80153fe <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8015412:	bf00      	nop

08015414 <uxr_deserialize_ObjectVariant>:
 8015414:	b570      	push	{r4, r5, r6, lr}
 8015416:	4605      	mov	r5, r0
 8015418:	460e      	mov	r6, r1
 801541a:	f7fc f92f 	bl	801167c <ucdr_deserialize_uint8_t>
 801541e:	b168      	cbz	r0, 801543c <uxr_deserialize_ObjectVariant+0x28>
 8015420:	7833      	ldrb	r3, [r6, #0]
 8015422:	3b01      	subs	r3, #1
 8015424:	4604      	mov	r4, r0
 8015426:	2b0d      	cmp	r3, #13
 8015428:	d809      	bhi.n	801543e <uxr_deserialize_ObjectVariant+0x2a>
 801542a:	e8df f003 	tbb	[pc, r3]
 801542e:	0a41      	.short	0x0a41
 8015430:	0a0a2323 	.word	0x0a0a2323
 8015434:	10080a0a 	.word	0x10080a0a
 8015438:	565c1010 	.word	0x565c1010
 801543c:	2400      	movs	r4, #0
 801543e:	4620      	mov	r0, r4
 8015440:	bd70      	pop	{r4, r5, r6, pc}
 8015442:	1d31      	adds	r1, r6, #4
 8015444:	4628      	mov	r0, r5
 8015446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801544a:	f7ff be41 	b.w	80150d0 <uxr_deserialize_DATAWRITER_Representation>
 801544e:	1d31      	adds	r1, r6, #4
 8015450:	4628      	mov	r0, r5
 8015452:	f7fc f913 	bl	801167c <ucdr_deserialize_uint8_t>
 8015456:	2800      	cmp	r0, #0
 8015458:	d0f0      	beq.n	801543c <uxr_deserialize_ObjectVariant+0x28>
 801545a:	7933      	ldrb	r3, [r6, #4]
 801545c:	2b01      	cmp	r3, #1
 801545e:	d001      	beq.n	8015464 <uxr_deserialize_ObjectVariant+0x50>
 8015460:	2b02      	cmp	r3, #2
 8015462:	d1ec      	bne.n	801543e <uxr_deserialize_ObjectVariant+0x2a>
 8015464:	68b1      	ldr	r1, [r6, #8]
 8015466:	4628      	mov	r0, r5
 8015468:	f44f 7200 	mov.w	r2, #512	; 0x200
 801546c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015470:	f002 bf2e 	b.w	80182d0 <ucdr_deserialize_string>
 8015474:	1d31      	adds	r1, r6, #4
 8015476:	4628      	mov	r0, r5
 8015478:	f7fc f900 	bl	801167c <ucdr_deserialize_uint8_t>
 801547c:	4604      	mov	r4, r0
 801547e:	b170      	cbz	r0, 801549e <uxr_deserialize_ObjectVariant+0x8a>
 8015480:	7933      	ldrb	r3, [r6, #4]
 8015482:	2b02      	cmp	r3, #2
 8015484:	d04c      	beq.n	8015520 <uxr_deserialize_ObjectVariant+0x10c>
 8015486:	2b03      	cmp	r3, #3
 8015488:	d109      	bne.n	801549e <uxr_deserialize_ObjectVariant+0x8a>
 801548a:	f106 0308 	add.w	r3, r6, #8
 801548e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015492:	f106 010c 	add.w	r1, r6, #12
 8015496:	4628      	mov	r0, r5
 8015498:	f7fd feb8 	bl	801320c <ucdr_deserialize_sequence_uint8_t>
 801549c:	4604      	mov	r4, r0
 801549e:	2202      	movs	r2, #2
 80154a0:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80154a4:	4628      	mov	r0, r5
 80154a6:	f002 fdf5 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 80154aa:	4020      	ands	r0, r4
 80154ac:	b2c4      	uxtb	r4, r0
 80154ae:	e7c6      	b.n	801543e <uxr_deserialize_ObjectVariant+0x2a>
 80154b0:	1d31      	adds	r1, r6, #4
 80154b2:	4628      	mov	r0, r5
 80154b4:	f7fc f8e2 	bl	801167c <ucdr_deserialize_uint8_t>
 80154b8:	4604      	mov	r4, r0
 80154ba:	b130      	cbz	r0, 80154ca <uxr_deserialize_ObjectVariant+0xb6>
 80154bc:	7933      	ldrb	r3, [r6, #4]
 80154be:	2b02      	cmp	r3, #2
 80154c0:	d036      	beq.n	8015530 <uxr_deserialize_ObjectVariant+0x11c>
 80154c2:	2b03      	cmp	r3, #3
 80154c4:	d03c      	beq.n	8015540 <uxr_deserialize_ObjectVariant+0x12c>
 80154c6:	2b01      	cmp	r3, #1
 80154c8:	d032      	beq.n	8015530 <uxr_deserialize_ObjectVariant+0x11c>
 80154ca:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80154ce:	4628      	mov	r0, r5
 80154d0:	f7fc fe7a 	bl	80121c8 <ucdr_deserialize_int16_t>
 80154d4:	4020      	ands	r0, r4
 80154d6:	b2c4      	uxtb	r4, r0
 80154d8:	e7b1      	b.n	801543e <uxr_deserialize_ObjectVariant+0x2a>
 80154da:	1d31      	adds	r1, r6, #4
 80154dc:	4628      	mov	r0, r5
 80154de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154e2:	f7ff bcab 	b.w	8014e3c <uxr_deserialize_CLIENT_Representation>
 80154e6:	2204      	movs	r2, #4
 80154e8:	18b1      	adds	r1, r6, r2
 80154ea:	4628      	mov	r0, r5
 80154ec:	f002 fdd2 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 80154f0:	2202      	movs	r2, #2
 80154f2:	f106 0108 	add.w	r1, r6, #8
 80154f6:	4604      	mov	r4, r0
 80154f8:	4628      	mov	r0, r5
 80154fa:	f002 fdcb 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 80154fe:	2202      	movs	r2, #2
 8015500:	4004      	ands	r4, r0
 8015502:	f106 010a 	add.w	r1, r6, #10
 8015506:	4628      	mov	r0, r5
 8015508:	f002 fdc4 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 801550c:	b2e4      	uxtb	r4, r4
 801550e:	4603      	mov	r3, r0
 8015510:	f106 010c 	add.w	r1, r6, #12
 8015514:	4628      	mov	r0, r5
 8015516:	401c      	ands	r4, r3
 8015518:	f7fc f882 	bl	8011620 <ucdr_deserialize_bool>
 801551c:	4004      	ands	r4, r0
 801551e:	e78e      	b.n	801543e <uxr_deserialize_ObjectVariant+0x2a>
 8015520:	68b1      	ldr	r1, [r6, #8]
 8015522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015526:	4628      	mov	r0, r5
 8015528:	f002 fed2 	bl	80182d0 <ucdr_deserialize_string>
 801552c:	4604      	mov	r4, r0
 801552e:	e7b6      	b.n	801549e <uxr_deserialize_ObjectVariant+0x8a>
 8015530:	68b1      	ldr	r1, [r6, #8]
 8015532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015536:	4628      	mov	r0, r5
 8015538:	f002 feca 	bl	80182d0 <ucdr_deserialize_string>
 801553c:	4604      	mov	r4, r0
 801553e:	e7c4      	b.n	80154ca <uxr_deserialize_ObjectVariant+0xb6>
 8015540:	f106 0308 	add.w	r3, r6, #8
 8015544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015548:	f106 010c 	add.w	r1, r6, #12
 801554c:	4628      	mov	r0, r5
 801554e:	f7fd fe5d 	bl	801320c <ucdr_deserialize_sequence_uint8_t>
 8015552:	4604      	mov	r4, r0
 8015554:	e7b9      	b.n	80154ca <uxr_deserialize_ObjectVariant+0xb6>
 8015556:	bf00      	nop

08015558 <uxr_deserialize_BaseObjectRequest>:
 8015558:	b570      	push	{r4, r5, r6, lr}
 801555a:	2202      	movs	r2, #2
 801555c:	4605      	mov	r5, r0
 801555e:	460e      	mov	r6, r1
 8015560:	f002 fd98 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 8015564:	2202      	movs	r2, #2
 8015566:	4604      	mov	r4, r0
 8015568:	18b1      	adds	r1, r6, r2
 801556a:	4628      	mov	r0, r5
 801556c:	f002 fd92 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 8015570:	4020      	ands	r0, r4
 8015572:	b2c0      	uxtb	r0, r0
 8015574:	bd70      	pop	{r4, r5, r6, pc}
 8015576:	bf00      	nop

08015578 <uxr_serialize_ActivityInfoVariant>:
 8015578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801557c:	460d      	mov	r5, r1
 801557e:	7809      	ldrb	r1, [r1, #0]
 8015580:	4607      	mov	r7, r0
 8015582:	f7fc f865 	bl	8011650 <ucdr_serialize_uint8_t>
 8015586:	4681      	mov	r9, r0
 8015588:	b138      	cbz	r0, 801559a <uxr_serialize_ActivityInfoVariant+0x22>
 801558a:	782b      	ldrb	r3, [r5, #0]
 801558c:	2b06      	cmp	r3, #6
 801558e:	f000 8082 	beq.w	8015696 <uxr_serialize_ActivityInfoVariant+0x11e>
 8015592:	2b0d      	cmp	r3, #13
 8015594:	d016      	beq.n	80155c4 <uxr_serialize_ActivityInfoVariant+0x4c>
 8015596:	2b05      	cmp	r3, #5
 8015598:	d002      	beq.n	80155a0 <uxr_serialize_ActivityInfoVariant+0x28>
 801559a:	4648      	mov	r0, r9
 801559c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155a0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80155a4:	4638      	mov	r0, r7
 80155a6:	f7fc fd8f 	bl	80120c8 <ucdr_serialize_int16_t>
 80155aa:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80155ae:	4681      	mov	r9, r0
 80155b0:	4638      	mov	r0, r7
 80155b2:	f7fc fcb9 	bl	8011f28 <ucdr_serialize_uint64_t>
 80155b6:	ea09 0000 	and.w	r0, r9, r0
 80155ba:	fa5f f980 	uxtb.w	r9, r0
 80155be:	4648      	mov	r0, r9
 80155c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155c4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80155c8:	4638      	mov	r0, r7
 80155ca:	f7fc fd7d 	bl	80120c8 <ucdr_serialize_int16_t>
 80155ce:	68e9      	ldr	r1, [r5, #12]
 80155d0:	4681      	mov	r9, r0
 80155d2:	4638      	mov	r0, r7
 80155d4:	f7fc fa52 	bl	8011a7c <ucdr_serialize_uint32_t>
 80155d8:	68eb      	ldr	r3, [r5, #12]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d0eb      	beq.n	80155b6 <uxr_serialize_ActivityInfoVariant+0x3e>
 80155de:	b320      	cbz	r0, 801562a <uxr_serialize_ActivityInfoVariant+0xb2>
 80155e0:	f105 080c 	add.w	r8, r5, #12
 80155e4:	2600      	movs	r6, #0
 80155e6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80155ea:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80155ee:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80155f2:	4638      	mov	r0, r7
 80155f4:	f7fc f82c 	bl	8011650 <ucdr_serialize_uint8_t>
 80155f8:	2800      	cmp	r0, #0
 80155fa:	d053      	beq.n	80156a4 <uxr_serialize_ActivityInfoVariant+0x12c>
 80155fc:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8015600:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015604:	0074      	lsls	r4, r6, #1
 8015606:	00c9      	lsls	r1, r1, #3
 8015608:	2b03      	cmp	r3, #3
 801560a:	d854      	bhi.n	80156b6 <uxr_serialize_ActivityInfoVariant+0x13e>
 801560c:	e8df f003 	tbb	[pc, r3]
 8015610:	02102132 	.word	0x02102132
 8015614:	4441      	add	r1, r8
 8015616:	4638      	mov	r0, r7
 8015618:	6889      	ldr	r1, [r1, #8]
 801561a:	f002 fe49 	bl	80182b0 <ucdr_serialize_string>
 801561e:	68ea      	ldr	r2, [r5, #12]
 8015620:	3601      	adds	r6, #1
 8015622:	4296      	cmp	r6, r2
 8015624:	d242      	bcs.n	80156ac <uxr_serialize_ActivityInfoVariant+0x134>
 8015626:	2800      	cmp	r0, #0
 8015628:	d1dd      	bne.n	80155e6 <uxr_serialize_ActivityInfoVariant+0x6e>
 801562a:	f04f 0900 	mov.w	r9, #0
 801562e:	e7b4      	b.n	801559a <uxr_serialize_ActivityInfoVariant+0x22>
 8015630:	3108      	adds	r1, #8
 8015632:	4441      	add	r1, r8
 8015634:	2210      	movs	r2, #16
 8015636:	4638      	mov	r0, r7
 8015638:	f002 fcc8 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 801563c:	4434      	add	r4, r6
 801563e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015642:	4604      	mov	r4, r0
 8015644:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015646:	4638      	mov	r0, r7
 8015648:	f7fc fa18 	bl	8011a7c <ucdr_serialize_uint32_t>
 801564c:	4020      	ands	r0, r4
 801564e:	b2c0      	uxtb	r0, r0
 8015650:	e7e5      	b.n	801561e <uxr_serialize_ActivityInfoVariant+0xa6>
 8015652:	3108      	adds	r1, #8
 8015654:	4441      	add	r1, r8
 8015656:	2204      	movs	r2, #4
 8015658:	4638      	mov	r0, r7
 801565a:	f002 fcb7 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 801565e:	4434      	add	r4, r6
 8015660:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015664:	4604      	mov	r4, r0
 8015666:	8b19      	ldrh	r1, [r3, #24]
 8015668:	4638      	mov	r0, r7
 801566a:	f7fc f81d 	bl	80116a8 <ucdr_serialize_uint16_t>
 801566e:	4020      	ands	r0, r4
 8015670:	b2c0      	uxtb	r0, r0
 8015672:	e7d4      	b.n	801561e <uxr_serialize_ActivityInfoVariant+0xa6>
 8015674:	3108      	adds	r1, #8
 8015676:	4441      	add	r1, r8
 8015678:	2202      	movs	r2, #2
 801567a:	4638      	mov	r0, r7
 801567c:	f002 fca6 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8015680:	4434      	add	r4, r6
 8015682:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015686:	4604      	mov	r4, r0
 8015688:	7d99      	ldrb	r1, [r3, #22]
 801568a:	4638      	mov	r0, r7
 801568c:	f7fb ffe0 	bl	8011650 <ucdr_serialize_uint8_t>
 8015690:	4020      	ands	r0, r4
 8015692:	b2c0      	uxtb	r0, r0
 8015694:	e7c3      	b.n	801561e <uxr_serialize_ActivityInfoVariant+0xa6>
 8015696:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801569a:	4638      	mov	r0, r7
 801569c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156a0:	f7fc bd12 	b.w	80120c8 <ucdr_serialize_int16_t>
 80156a4:	68ea      	ldr	r2, [r5, #12]
 80156a6:	3601      	adds	r6, #1
 80156a8:	42b2      	cmp	r2, r6
 80156aa:	d8be      	bhi.n	801562a <uxr_serialize_ActivityInfoVariant+0xb2>
 80156ac:	ea09 0900 	and.w	r9, r9, r0
 80156b0:	fa5f f989 	uxtb.w	r9, r9
 80156b4:	e771      	b.n	801559a <uxr_serialize_ActivityInfoVariant+0x22>
 80156b6:	68eb      	ldr	r3, [r5, #12]
 80156b8:	3601      	adds	r6, #1
 80156ba:	429e      	cmp	r6, r3
 80156bc:	f10a 0a18 	add.w	sl, sl, #24
 80156c0:	d395      	bcc.n	80155ee <uxr_serialize_ActivityInfoVariant+0x76>
 80156c2:	e76a      	b.n	801559a <uxr_serialize_ActivityInfoVariant+0x22>

080156c4 <uxr_deserialize_BaseObjectReply>:
 80156c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156c8:	2202      	movs	r2, #2
 80156ca:	4606      	mov	r6, r0
 80156cc:	460f      	mov	r7, r1
 80156ce:	f002 fce1 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 80156d2:	2202      	movs	r2, #2
 80156d4:	18b9      	adds	r1, r7, r2
 80156d6:	4605      	mov	r5, r0
 80156d8:	4630      	mov	r0, r6
 80156da:	f002 fcdb 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 80156de:	1d39      	adds	r1, r7, #4
 80156e0:	4680      	mov	r8, r0
 80156e2:	4630      	mov	r0, r6
 80156e4:	f7fb ffca 	bl	801167c <ucdr_deserialize_uint8_t>
 80156e8:	1d79      	adds	r1, r7, #5
 80156ea:	4604      	mov	r4, r0
 80156ec:	4630      	mov	r0, r6
 80156ee:	f7fb ffc5 	bl	801167c <ucdr_deserialize_uint8_t>
 80156f2:	ea05 0508 	and.w	r5, r5, r8
 80156f6:	402c      	ands	r4, r5
 80156f8:	4020      	ands	r0, r4
 80156fa:	b2c0      	uxtb	r0, r0
 80156fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015700 <uxr_serialize_ReadSpecification>:
 8015700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015704:	460e      	mov	r6, r1
 8015706:	7809      	ldrb	r1, [r1, #0]
 8015708:	4607      	mov	r7, r0
 801570a:	f7fb ffa1 	bl	8011650 <ucdr_serialize_uint8_t>
 801570e:	7871      	ldrb	r1, [r6, #1]
 8015710:	4604      	mov	r4, r0
 8015712:	4638      	mov	r0, r7
 8015714:	f7fb ff9c 	bl	8011650 <ucdr_serialize_uint8_t>
 8015718:	78b1      	ldrb	r1, [r6, #2]
 801571a:	4004      	ands	r4, r0
 801571c:	4638      	mov	r0, r7
 801571e:	f7fb ff69 	bl	80115f4 <ucdr_serialize_bool>
 8015722:	78b3      	ldrb	r3, [r6, #2]
 8015724:	b2e4      	uxtb	r4, r4
 8015726:	4004      	ands	r4, r0
 8015728:	b94b      	cbnz	r3, 801573e <uxr_serialize_ReadSpecification+0x3e>
 801572a:	7a31      	ldrb	r1, [r6, #8]
 801572c:	4638      	mov	r0, r7
 801572e:	f7fb ff61 	bl	80115f4 <ucdr_serialize_bool>
 8015732:	7a33      	ldrb	r3, [r6, #8]
 8015734:	4004      	ands	r4, r0
 8015736:	b943      	cbnz	r3, 801574a <uxr_serialize_ReadSpecification+0x4a>
 8015738:	4620      	mov	r0, r4
 801573a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801573e:	6871      	ldr	r1, [r6, #4]
 8015740:	4638      	mov	r0, r7
 8015742:	f002 fdb5 	bl	80182b0 <ucdr_serialize_string>
 8015746:	4004      	ands	r4, r0
 8015748:	e7ef      	b.n	801572a <uxr_serialize_ReadSpecification+0x2a>
 801574a:	8971      	ldrh	r1, [r6, #10]
 801574c:	4638      	mov	r0, r7
 801574e:	f7fb ffab 	bl	80116a8 <ucdr_serialize_uint16_t>
 8015752:	89b1      	ldrh	r1, [r6, #12]
 8015754:	4605      	mov	r5, r0
 8015756:	4638      	mov	r0, r7
 8015758:	f7fb ffa6 	bl	80116a8 <ucdr_serialize_uint16_t>
 801575c:	89f1      	ldrh	r1, [r6, #14]
 801575e:	4005      	ands	r5, r0
 8015760:	4638      	mov	r0, r7
 8015762:	f7fb ffa1 	bl	80116a8 <ucdr_serialize_uint16_t>
 8015766:	8a31      	ldrh	r1, [r6, #16]
 8015768:	4680      	mov	r8, r0
 801576a:	4638      	mov	r0, r7
 801576c:	f7fb ff9c 	bl	80116a8 <ucdr_serialize_uint16_t>
 8015770:	b2ed      	uxtb	r5, r5
 8015772:	4025      	ands	r5, r4
 8015774:	ea08 0505 	and.w	r5, r8, r5
 8015778:	ea00 0405 	and.w	r4, r0, r5
 801577c:	4620      	mov	r0, r4
 801577e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015782:	bf00      	nop

08015784 <uxr_serialize_CREATE_CLIENT_Payload>:
 8015784:	f7ff bb02 	b.w	8014d8c <uxr_serialize_CLIENT_Representation>

08015788 <uxr_serialize_CREATE_Payload>:
 8015788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801578a:	2202      	movs	r2, #2
 801578c:	4607      	mov	r7, r0
 801578e:	460e      	mov	r6, r1
 8015790:	f002 fc1c 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8015794:	2202      	movs	r2, #2
 8015796:	18b1      	adds	r1, r6, r2
 8015798:	4605      	mov	r5, r0
 801579a:	4638      	mov	r0, r7
 801579c:	f002 fc16 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 80157a0:	7931      	ldrb	r1, [r6, #4]
 80157a2:	4604      	mov	r4, r0
 80157a4:	4638      	mov	r0, r7
 80157a6:	f7fb ff53 	bl	8011650 <ucdr_serialize_uint8_t>
 80157aa:	b170      	cbz	r0, 80157ca <uxr_serialize_CREATE_Payload+0x42>
 80157ac:	7933      	ldrb	r3, [r6, #4]
 80157ae:	402c      	ands	r4, r5
 80157b0:	3b01      	subs	r3, #1
 80157b2:	b2e4      	uxtb	r4, r4
 80157b4:	2b0d      	cmp	r3, #13
 80157b6:	d809      	bhi.n	80157cc <uxr_serialize_CREATE_Payload+0x44>
 80157b8:	e8df f003 	tbb	[pc, r3]
 80157bc:	23230a4c 	.word	0x23230a4c
 80157c0:	0a0a0a0a 	.word	0x0a0a0a0a
 80157c4:	12121208 	.word	0x12121208
 80157c8:	3e45      	.short	0x3e45
 80157ca:	2400      	movs	r4, #0
 80157cc:	4620      	mov	r0, r4
 80157ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157d0:	f106 0108 	add.w	r1, r6, #8
 80157d4:	4638      	mov	r0, r7
 80157d6:	f7ff fbdf 	bl	8014f98 <uxr_serialize_DATAWRITER_Representation>
 80157da:	4004      	ands	r4, r0
 80157dc:	4620      	mov	r0, r4
 80157de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157e0:	7a31      	ldrb	r1, [r6, #8]
 80157e2:	4638      	mov	r0, r7
 80157e4:	f7fb ff34 	bl	8011650 <ucdr_serialize_uint8_t>
 80157e8:	2800      	cmp	r0, #0
 80157ea:	d0ee      	beq.n	80157ca <uxr_serialize_CREATE_Payload+0x42>
 80157ec:	7a33      	ldrb	r3, [r6, #8]
 80157ee:	2b01      	cmp	r3, #1
 80157f0:	d001      	beq.n	80157f6 <uxr_serialize_CREATE_Payload+0x6e>
 80157f2:	2b02      	cmp	r3, #2
 80157f4:	d1ea      	bne.n	80157cc <uxr_serialize_CREATE_Payload+0x44>
 80157f6:	68f1      	ldr	r1, [r6, #12]
 80157f8:	4638      	mov	r0, r7
 80157fa:	f002 fd59 	bl	80182b0 <ucdr_serialize_string>
 80157fe:	4004      	ands	r4, r0
 8015800:	e7e4      	b.n	80157cc <uxr_serialize_CREATE_Payload+0x44>
 8015802:	7a31      	ldrb	r1, [r6, #8]
 8015804:	4638      	mov	r0, r7
 8015806:	f7fb ff23 	bl	8011650 <ucdr_serialize_uint8_t>
 801580a:	4605      	mov	r5, r0
 801580c:	b158      	cbz	r0, 8015826 <uxr_serialize_CREATE_Payload+0x9e>
 801580e:	7a33      	ldrb	r3, [r6, #8]
 8015810:	2b02      	cmp	r3, #2
 8015812:	d034      	beq.n	801587e <uxr_serialize_CREATE_Payload+0xf6>
 8015814:	2b03      	cmp	r3, #3
 8015816:	d106      	bne.n	8015826 <uxr_serialize_CREATE_Payload+0x9e>
 8015818:	68f2      	ldr	r2, [r6, #12]
 801581a:	f106 0110 	add.w	r1, r6, #16
 801581e:	4638      	mov	r0, r7
 8015820:	f7fd fce2 	bl	80131e8 <ucdr_serialize_sequence_uint8_t>
 8015824:	4605      	mov	r5, r0
 8015826:	2202      	movs	r2, #2
 8015828:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801582c:	4638      	mov	r0, r7
 801582e:	f002 fbcd 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8015832:	4028      	ands	r0, r5
 8015834:	4004      	ands	r4, r0
 8015836:	e7c9      	b.n	80157cc <uxr_serialize_CREATE_Payload+0x44>
 8015838:	f106 0108 	add.w	r1, r6, #8
 801583c:	4638      	mov	r0, r7
 801583e:	f7ff faa5 	bl	8014d8c <uxr_serialize_CLIENT_Representation>
 8015842:	4004      	ands	r4, r0
 8015844:	e7c2      	b.n	80157cc <uxr_serialize_CREATE_Payload+0x44>
 8015846:	f106 0108 	add.w	r1, r6, #8
 801584a:	4638      	mov	r0, r7
 801584c:	f7ff fb5a 	bl	8014f04 <uxr_serialize_AGENT_Representation>
 8015850:	4004      	ands	r4, r0
 8015852:	e7bb      	b.n	80157cc <uxr_serialize_CREATE_Payload+0x44>
 8015854:	7a31      	ldrb	r1, [r6, #8]
 8015856:	4638      	mov	r0, r7
 8015858:	f7fb fefa 	bl	8011650 <ucdr_serialize_uint8_t>
 801585c:	4605      	mov	r5, r0
 801585e:	b130      	cbz	r0, 801586e <uxr_serialize_CREATE_Payload+0xe6>
 8015860:	7a33      	ldrb	r3, [r6, #8]
 8015862:	2b02      	cmp	r3, #2
 8015864:	d011      	beq.n	801588a <uxr_serialize_CREATE_Payload+0x102>
 8015866:	2b03      	cmp	r3, #3
 8015868:	d015      	beq.n	8015896 <uxr_serialize_CREATE_Payload+0x10e>
 801586a:	2b01      	cmp	r3, #1
 801586c:	d00d      	beq.n	801588a <uxr_serialize_CREATE_Payload+0x102>
 801586e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8015872:	4638      	mov	r0, r7
 8015874:	f7fc fc28 	bl	80120c8 <ucdr_serialize_int16_t>
 8015878:	4028      	ands	r0, r5
 801587a:	4004      	ands	r4, r0
 801587c:	e7a6      	b.n	80157cc <uxr_serialize_CREATE_Payload+0x44>
 801587e:	68f1      	ldr	r1, [r6, #12]
 8015880:	4638      	mov	r0, r7
 8015882:	f002 fd15 	bl	80182b0 <ucdr_serialize_string>
 8015886:	4605      	mov	r5, r0
 8015888:	e7cd      	b.n	8015826 <uxr_serialize_CREATE_Payload+0x9e>
 801588a:	68f1      	ldr	r1, [r6, #12]
 801588c:	4638      	mov	r0, r7
 801588e:	f002 fd0f 	bl	80182b0 <ucdr_serialize_string>
 8015892:	4605      	mov	r5, r0
 8015894:	e7eb      	b.n	801586e <uxr_serialize_CREATE_Payload+0xe6>
 8015896:	68f2      	ldr	r2, [r6, #12]
 8015898:	f106 0110 	add.w	r1, r6, #16
 801589c:	4638      	mov	r0, r7
 801589e:	f7fd fca3 	bl	80131e8 <ucdr_serialize_sequence_uint8_t>
 80158a2:	4605      	mov	r5, r0
 80158a4:	e7e3      	b.n	801586e <uxr_serialize_CREATE_Payload+0xe6>
 80158a6:	bf00      	nop

080158a8 <uxr_deserialize_GET_INFO_Payload>:
 80158a8:	b570      	push	{r4, r5, r6, lr}
 80158aa:	2202      	movs	r2, #2
 80158ac:	4605      	mov	r5, r0
 80158ae:	460e      	mov	r6, r1
 80158b0:	f002 fbf0 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 80158b4:	2202      	movs	r2, #2
 80158b6:	18b1      	adds	r1, r6, r2
 80158b8:	4604      	mov	r4, r0
 80158ba:	4628      	mov	r0, r5
 80158bc:	f002 fbea 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 80158c0:	1d31      	adds	r1, r6, #4
 80158c2:	4004      	ands	r4, r0
 80158c4:	4628      	mov	r0, r5
 80158c6:	f7fc fa09 	bl	8011cdc <ucdr_deserialize_uint32_t>
 80158ca:	b2e4      	uxtb	r4, r4
 80158cc:	4020      	ands	r0, r4
 80158ce:	bd70      	pop	{r4, r5, r6, pc}

080158d0 <uxr_serialize_DELETE_Payload>:
 80158d0:	b570      	push	{r4, r5, r6, lr}
 80158d2:	2202      	movs	r2, #2
 80158d4:	4605      	mov	r5, r0
 80158d6:	460e      	mov	r6, r1
 80158d8:	f002 fb78 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 80158dc:	2202      	movs	r2, #2
 80158de:	4604      	mov	r4, r0
 80158e0:	18b1      	adds	r1, r6, r2
 80158e2:	4628      	mov	r0, r5
 80158e4:	f002 fb72 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 80158e8:	4020      	ands	r0, r4
 80158ea:	b2c0      	uxtb	r0, r0
 80158ec:	bd70      	pop	{r4, r5, r6, pc}
 80158ee:	bf00      	nop

080158f0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80158f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158f4:	4605      	mov	r5, r0
 80158f6:	460e      	mov	r6, r1
 80158f8:	f7fb fec0 	bl	801167c <ucdr_deserialize_uint8_t>
 80158fc:	1c71      	adds	r1, r6, #1
 80158fe:	4604      	mov	r4, r0
 8015900:	4628      	mov	r0, r5
 8015902:	f7fb febb 	bl	801167c <ucdr_deserialize_uint8_t>
 8015906:	2204      	movs	r2, #4
 8015908:	18b1      	adds	r1, r6, r2
 801590a:	4680      	mov	r8, r0
 801590c:	4628      	mov	r0, r5
 801590e:	f002 fbc1 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 8015912:	f106 0108 	add.w	r1, r6, #8
 8015916:	4607      	mov	r7, r0
 8015918:	2202      	movs	r2, #2
 801591a:	4628      	mov	r0, r5
 801591c:	f002 fbba 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 8015920:	ea04 0308 	and.w	r3, r4, r8
 8015924:	b2db      	uxtb	r3, r3
 8015926:	ea03 0407 	and.w	r4, r3, r7
 801592a:	2202      	movs	r2, #2
 801592c:	4607      	mov	r7, r0
 801592e:	f106 010a 	add.w	r1, r6, #10
 8015932:	4628      	mov	r0, r5
 8015934:	f002 fbae 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 8015938:	f106 010c 	add.w	r1, r6, #12
 801593c:	4603      	mov	r3, r0
 801593e:	4628      	mov	r0, r5
 8015940:	461d      	mov	r5, r3
 8015942:	f7fb fe6d 	bl	8011620 <ucdr_deserialize_bool>
 8015946:	403c      	ands	r4, r7
 8015948:	4025      	ands	r5, r4
 801594a:	4028      	ands	r0, r5
 801594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015950 <uxr_deserialize_STATUS_Payload>:
 8015950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015954:	2202      	movs	r2, #2
 8015956:	4606      	mov	r6, r0
 8015958:	460f      	mov	r7, r1
 801595a:	f002 fb9b 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 801595e:	2202      	movs	r2, #2
 8015960:	18b9      	adds	r1, r7, r2
 8015962:	4605      	mov	r5, r0
 8015964:	4630      	mov	r0, r6
 8015966:	f002 fb95 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 801596a:	1d39      	adds	r1, r7, #4
 801596c:	4680      	mov	r8, r0
 801596e:	4630      	mov	r0, r6
 8015970:	f7fb fe84 	bl	801167c <ucdr_deserialize_uint8_t>
 8015974:	1d79      	adds	r1, r7, #5
 8015976:	4604      	mov	r4, r0
 8015978:	4630      	mov	r0, r6
 801597a:	f7fb fe7f 	bl	801167c <ucdr_deserialize_uint8_t>
 801597e:	ea05 0508 	and.w	r5, r5, r8
 8015982:	402c      	ands	r4, r5
 8015984:	4020      	ands	r0, r4
 8015986:	b2c0      	uxtb	r0, r0
 8015988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801598c <uxr_serialize_INFO_Payload>:
 801598c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015990:	2202      	movs	r2, #2
 8015992:	460c      	mov	r4, r1
 8015994:	4605      	mov	r5, r0
 8015996:	f002 fb19 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 801599a:	2202      	movs	r2, #2
 801599c:	18a1      	adds	r1, r4, r2
 801599e:	4680      	mov	r8, r0
 80159a0:	4628      	mov	r0, r5
 80159a2:	f002 fb13 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 80159a6:	7921      	ldrb	r1, [r4, #4]
 80159a8:	4607      	mov	r7, r0
 80159aa:	4628      	mov	r0, r5
 80159ac:	f7fb fe50 	bl	8011650 <ucdr_serialize_uint8_t>
 80159b0:	7961      	ldrb	r1, [r4, #5]
 80159b2:	4606      	mov	r6, r0
 80159b4:	4628      	mov	r0, r5
 80159b6:	f7fb fe4b 	bl	8011650 <ucdr_serialize_uint8_t>
 80159ba:	ea08 0807 	and.w	r8, r8, r7
 80159be:	ea06 0608 	and.w	r6, r6, r8
 80159c2:	4006      	ands	r6, r0
 80159c4:	7a21      	ldrb	r1, [r4, #8]
 80159c6:	4628      	mov	r0, r5
 80159c8:	f7fb fe14 	bl	80115f4 <ucdr_serialize_bool>
 80159cc:	7a23      	ldrb	r3, [r4, #8]
 80159ce:	b2f7      	uxtb	r7, r6
 80159d0:	4606      	mov	r6, r0
 80159d2:	b96b      	cbnz	r3, 80159f0 <uxr_serialize_INFO_Payload+0x64>
 80159d4:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80159d8:	4628      	mov	r0, r5
 80159da:	f7fb fe0b 	bl	80115f4 <ucdr_serialize_bool>
 80159de:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80159e2:	4030      	ands	r0, r6
 80159e4:	b2c6      	uxtb	r6, r0
 80159e6:	b983      	cbnz	r3, 8015a0a <uxr_serialize_INFO_Payload+0x7e>
 80159e8:	ea06 0007 	and.w	r0, r6, r7
 80159ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159f0:	7b21      	ldrb	r1, [r4, #12]
 80159f2:	4628      	mov	r0, r5
 80159f4:	f7fb fe2c 	bl	8011650 <ucdr_serialize_uint8_t>
 80159f8:	b188      	cbz	r0, 8015a1e <uxr_serialize_INFO_Payload+0x92>
 80159fa:	f104 010c 	add.w	r1, r4, #12
 80159fe:	4628      	mov	r0, r5
 8015a00:	f7ff faf2 	bl	8014fe8 <uxr_serialize_ObjectVariant.part.0>
 8015a04:	4030      	ands	r0, r6
 8015a06:	b2c6      	uxtb	r6, r0
 8015a08:	e7e4      	b.n	80159d4 <uxr_serialize_INFO_Payload+0x48>
 8015a0a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8015a0e:	4628      	mov	r0, r5
 8015a10:	f7ff fdb2 	bl	8015578 <uxr_serialize_ActivityInfoVariant>
 8015a14:	4006      	ands	r6, r0
 8015a16:	ea06 0007 	and.w	r0, r6, r7
 8015a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a1e:	4606      	mov	r6, r0
 8015a20:	e7d8      	b.n	80159d4 <uxr_serialize_INFO_Payload+0x48>
 8015a22:	bf00      	nop

08015a24 <uxr_serialize_READ_DATA_Payload>:
 8015a24:	b570      	push	{r4, r5, r6, lr}
 8015a26:	2202      	movs	r2, #2
 8015a28:	4605      	mov	r5, r0
 8015a2a:	460e      	mov	r6, r1
 8015a2c:	f002 face 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8015a30:	2202      	movs	r2, #2
 8015a32:	18b1      	adds	r1, r6, r2
 8015a34:	4604      	mov	r4, r0
 8015a36:	4628      	mov	r0, r5
 8015a38:	f002 fac8 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8015a3c:	1d31      	adds	r1, r6, #4
 8015a3e:	4004      	ands	r4, r0
 8015a40:	4628      	mov	r0, r5
 8015a42:	f7ff fe5d 	bl	8015700 <uxr_serialize_ReadSpecification>
 8015a46:	b2e4      	uxtb	r4, r4
 8015a48:	4020      	ands	r0, r4
 8015a4a:	bd70      	pop	{r4, r5, r6, pc}

08015a4c <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015a4c:	b570      	push	{r4, r5, r6, lr}
 8015a4e:	2202      	movs	r2, #2
 8015a50:	4605      	mov	r5, r0
 8015a52:	460e      	mov	r6, r1
 8015a54:	f002 faba 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8015a58:	2202      	movs	r2, #2
 8015a5a:	4604      	mov	r4, r0
 8015a5c:	18b1      	adds	r1, r6, r2
 8015a5e:	4628      	mov	r0, r5
 8015a60:	f002 fab4 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8015a64:	4020      	ands	r0, r4
 8015a66:	b2c0      	uxtb	r0, r0
 8015a68:	bd70      	pop	{r4, r5, r6, pc}
 8015a6a:	bf00      	nop

08015a6c <uxr_serialize_ACKNACK_Payload>:
 8015a6c:	b570      	push	{r4, r5, r6, lr}
 8015a6e:	460c      	mov	r4, r1
 8015a70:	460e      	mov	r6, r1
 8015a72:	f834 1b02 	ldrh.w	r1, [r4], #2
 8015a76:	4605      	mov	r5, r0
 8015a78:	f7fb fe16 	bl	80116a8 <ucdr_serialize_uint16_t>
 8015a7c:	2202      	movs	r2, #2
 8015a7e:	4621      	mov	r1, r4
 8015a80:	4604      	mov	r4, r0
 8015a82:	4628      	mov	r0, r5
 8015a84:	f002 faa2 	bl	8017fcc <ucdr_serialize_array_uint8_t>
 8015a88:	7931      	ldrb	r1, [r6, #4]
 8015a8a:	4004      	ands	r4, r0
 8015a8c:	4628      	mov	r0, r5
 8015a8e:	f7fb fddf 	bl	8011650 <ucdr_serialize_uint8_t>
 8015a92:	b2e4      	uxtb	r4, r4
 8015a94:	4020      	ands	r0, r4
 8015a96:	bd70      	pop	{r4, r5, r6, pc}

08015a98 <uxr_deserialize_ACKNACK_Payload>:
 8015a98:	b570      	push	{r4, r5, r6, lr}
 8015a9a:	4605      	mov	r5, r0
 8015a9c:	460e      	mov	r6, r1
 8015a9e:	f7fb ff03 	bl	80118a8 <ucdr_deserialize_uint16_t>
 8015aa2:	2202      	movs	r2, #2
 8015aa4:	18b1      	adds	r1, r6, r2
 8015aa6:	4604      	mov	r4, r0
 8015aa8:	4628      	mov	r0, r5
 8015aaa:	f002 faf3 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 8015aae:	1d31      	adds	r1, r6, #4
 8015ab0:	4004      	ands	r4, r0
 8015ab2:	4628      	mov	r0, r5
 8015ab4:	f7fb fde2 	bl	801167c <ucdr_deserialize_uint8_t>
 8015ab8:	b2e4      	uxtb	r4, r4
 8015aba:	4020      	ands	r0, r4
 8015abc:	bd70      	pop	{r4, r5, r6, pc}
 8015abe:	bf00      	nop

08015ac0 <uxr_serialize_HEARTBEAT_Payload>:
 8015ac0:	b570      	push	{r4, r5, r6, lr}
 8015ac2:	460d      	mov	r5, r1
 8015ac4:	8809      	ldrh	r1, [r1, #0]
 8015ac6:	4606      	mov	r6, r0
 8015ac8:	f7fb fdee 	bl	80116a8 <ucdr_serialize_uint16_t>
 8015acc:	8869      	ldrh	r1, [r5, #2]
 8015ace:	4604      	mov	r4, r0
 8015ad0:	4630      	mov	r0, r6
 8015ad2:	f7fb fde9 	bl	80116a8 <ucdr_serialize_uint16_t>
 8015ad6:	7929      	ldrb	r1, [r5, #4]
 8015ad8:	4004      	ands	r4, r0
 8015ada:	4630      	mov	r0, r6
 8015adc:	f7fb fdb8 	bl	8011650 <ucdr_serialize_uint8_t>
 8015ae0:	b2e4      	uxtb	r4, r4
 8015ae2:	4020      	ands	r0, r4
 8015ae4:	bd70      	pop	{r4, r5, r6, pc}
 8015ae6:	bf00      	nop

08015ae8 <uxr_deserialize_HEARTBEAT_Payload>:
 8015ae8:	b570      	push	{r4, r5, r6, lr}
 8015aea:	4605      	mov	r5, r0
 8015aec:	460e      	mov	r6, r1
 8015aee:	f7fb fedb 	bl	80118a8 <ucdr_deserialize_uint16_t>
 8015af2:	1cb1      	adds	r1, r6, #2
 8015af4:	4604      	mov	r4, r0
 8015af6:	4628      	mov	r0, r5
 8015af8:	f7fb fed6 	bl	80118a8 <ucdr_deserialize_uint16_t>
 8015afc:	1d31      	adds	r1, r6, #4
 8015afe:	4004      	ands	r4, r0
 8015b00:	4628      	mov	r0, r5
 8015b02:	f7fb fdbb 	bl	801167c <ucdr_deserialize_uint8_t>
 8015b06:	b2e4      	uxtb	r4, r4
 8015b08:	4020      	ands	r0, r4
 8015b0a:	bd70      	pop	{r4, r5, r6, pc}

08015b0c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8015b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b10:	4605      	mov	r5, r0
 8015b12:	460e      	mov	r6, r1
 8015b14:	f7fc fc64 	bl	80123e0 <ucdr_deserialize_int32_t>
 8015b18:	1d31      	adds	r1, r6, #4
 8015b1a:	4607      	mov	r7, r0
 8015b1c:	4628      	mov	r0, r5
 8015b1e:	f7fc f8dd 	bl	8011cdc <ucdr_deserialize_uint32_t>
 8015b22:	f106 0108 	add.w	r1, r6, #8
 8015b26:	4680      	mov	r8, r0
 8015b28:	4628      	mov	r0, r5
 8015b2a:	f7fc fc59 	bl	80123e0 <ucdr_deserialize_int32_t>
 8015b2e:	f106 010c 	add.w	r1, r6, #12
 8015b32:	4604      	mov	r4, r0
 8015b34:	4628      	mov	r0, r5
 8015b36:	f7fc f8d1 	bl	8011cdc <ucdr_deserialize_uint32_t>
 8015b3a:	ea07 0708 	and.w	r7, r7, r8
 8015b3e:	403c      	ands	r4, r7
 8015b40:	f106 0110 	add.w	r1, r6, #16
 8015b44:	4004      	ands	r4, r0
 8015b46:	4628      	mov	r0, r5
 8015b48:	f7fc fc4a 	bl	80123e0 <ucdr_deserialize_int32_t>
 8015b4c:	f106 0114 	add.w	r1, r6, #20
 8015b50:	4607      	mov	r7, r0
 8015b52:	4628      	mov	r0, r5
 8015b54:	f7fc f8c2 	bl	8011cdc <ucdr_deserialize_uint32_t>
 8015b58:	b2e4      	uxtb	r4, r4
 8015b5a:	403c      	ands	r4, r7
 8015b5c:	4020      	ands	r0, r4
 8015b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b62:	bf00      	nop

08015b64 <uxr_deserialize_SampleIdentity>:
 8015b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b68:	220c      	movs	r2, #12
 8015b6a:	4604      	mov	r4, r0
 8015b6c:	460d      	mov	r5, r1
 8015b6e:	f002 fa91 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 8015b72:	2203      	movs	r2, #3
 8015b74:	f105 010c 	add.w	r1, r5, #12
 8015b78:	4607      	mov	r7, r0
 8015b7a:	4620      	mov	r0, r4
 8015b7c:	f002 fa8a 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 8015b80:	f105 010f 	add.w	r1, r5, #15
 8015b84:	4680      	mov	r8, r0
 8015b86:	4620      	mov	r0, r4
 8015b88:	f7fb fd78 	bl	801167c <ucdr_deserialize_uint8_t>
 8015b8c:	f105 0110 	add.w	r1, r5, #16
 8015b90:	4606      	mov	r6, r0
 8015b92:	4620      	mov	r0, r4
 8015b94:	f7fc fc24 	bl	80123e0 <ucdr_deserialize_int32_t>
 8015b98:	f105 0114 	add.w	r1, r5, #20
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	4620      	mov	r0, r4
 8015ba0:	ea07 0708 	and.w	r7, r7, r8
 8015ba4:	461c      	mov	r4, r3
 8015ba6:	f7fc f899 	bl	8011cdc <ucdr_deserialize_uint32_t>
 8015baa:	403e      	ands	r6, r7
 8015bac:	4034      	ands	r4, r6
 8015bae:	4020      	ands	r0, r4
 8015bb0:	b2c0      	uxtb	r0, r0
 8015bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bb6:	bf00      	nop

08015bb8 <rcl_convert_rmw_ret_to_rcl_ret>:
 8015bb8:	280b      	cmp	r0, #11
 8015bba:	dc0d      	bgt.n	8015bd8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015bbc:	2800      	cmp	r0, #0
 8015bbe:	db09      	blt.n	8015bd4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015bc0:	280b      	cmp	r0, #11
 8015bc2:	d807      	bhi.n	8015bd4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015bc4:	e8df f000 	tbb	[pc, r0]
 8015bc8:	07060607 	.word	0x07060607
 8015bcc:	06060606 	.word	0x06060606
 8015bd0:	07070606 	.word	0x07070606
 8015bd4:	2001      	movs	r0, #1
 8015bd6:	4770      	bx	lr
 8015bd8:	28cb      	cmp	r0, #203	; 0xcb
 8015bda:	bf18      	it	ne
 8015bdc:	2001      	movne	r0, #1
 8015bde:	4770      	bx	lr

08015be0 <rcl_get_zero_initialized_context>:
 8015be0:	4a03      	ldr	r2, [pc, #12]	; (8015bf0 <rcl_get_zero_initialized_context+0x10>)
 8015be2:	4603      	mov	r3, r0
 8015be4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015be8:	e883 0003 	stmia.w	r3, {r0, r1}
 8015bec:	4618      	mov	r0, r3
 8015bee:	4770      	bx	lr
 8015bf0:	0801c654 	.word	0x0801c654

08015bf4 <rcl_context_is_valid>:
 8015bf4:	b118      	cbz	r0, 8015bfe <rcl_context_is_valid+0xa>
 8015bf6:	6840      	ldr	r0, [r0, #4]
 8015bf8:	3800      	subs	r0, #0
 8015bfa:	bf18      	it	ne
 8015bfc:	2001      	movne	r0, #1
 8015bfe:	4770      	bx	lr

08015c00 <__cleanup_context>:
 8015c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c04:	4606      	mov	r6, r0
 8015c06:	6800      	ldr	r0, [r0, #0]
 8015c08:	2300      	movs	r3, #0
 8015c0a:	6073      	str	r3, [r6, #4]
 8015c0c:	2800      	cmp	r0, #0
 8015c0e:	d049      	beq.n	8015ca4 <__cleanup_context+0xa4>
 8015c10:	6947      	ldr	r7, [r0, #20]
 8015c12:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015c16:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015c1a:	b137      	cbz	r7, 8015c2a <__cleanup_context+0x2a>
 8015c1c:	3014      	adds	r0, #20
 8015c1e:	f000 f9bb 	bl	8015f98 <rcl_init_options_fini>
 8015c22:	4607      	mov	r7, r0
 8015c24:	2800      	cmp	r0, #0
 8015c26:	d144      	bne.n	8015cb2 <__cleanup_context+0xb2>
 8015c28:	6830      	ldr	r0, [r6, #0]
 8015c2a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015c2c:	b143      	cbz	r3, 8015c40 <__cleanup_context+0x40>
 8015c2e:	3028      	adds	r0, #40	; 0x28
 8015c30:	f001 fd9a 	bl	8017768 <rmw_context_fini>
 8015c34:	b118      	cbz	r0, 8015c3e <__cleanup_context+0x3e>
 8015c36:	2f00      	cmp	r7, #0
 8015c38:	d03e      	beq.n	8015cb8 <__cleanup_context+0xb8>
 8015c3a:	f7fa fb21 	bl	8010280 <rcutils_reset_error>
 8015c3e:	6830      	ldr	r0, [r6, #0]
 8015c40:	6a03      	ldr	r3, [r0, #32]
 8015c42:	b1db      	cbz	r3, 8015c7c <__cleanup_context+0x7c>
 8015c44:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8015c48:	2a01      	cmp	r2, #1
 8015c4a:	f17c 0100 	sbcs.w	r1, ip, #0
 8015c4e:	db11      	blt.n	8015c74 <__cleanup_context+0x74>
 8015c50:	2400      	movs	r4, #0
 8015c52:	4625      	mov	r5, r4
 8015c54:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c58:	4649      	mov	r1, r9
 8015c5a:	b1b8      	cbz	r0, 8015c8c <__cleanup_context+0x8c>
 8015c5c:	47c0      	blx	r8
 8015c5e:	6833      	ldr	r3, [r6, #0]
 8015c60:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8015c64:	3401      	adds	r4, #1
 8015c66:	f145 0500 	adc.w	r5, r5, #0
 8015c6a:	4294      	cmp	r4, r2
 8015c6c:	eb75 010c 	sbcs.w	r1, r5, ip
 8015c70:	6a1b      	ldr	r3, [r3, #32]
 8015c72:	dbef      	blt.n	8015c54 <__cleanup_context+0x54>
 8015c74:	4618      	mov	r0, r3
 8015c76:	4649      	mov	r1, r9
 8015c78:	47c0      	blx	r8
 8015c7a:	6830      	ldr	r0, [r6, #0]
 8015c7c:	4649      	mov	r1, r9
 8015c7e:	47c0      	blx	r8
 8015c80:	2300      	movs	r3, #0
 8015c82:	e9c6 3300 	strd	r3, r3, [r6]
 8015c86:	4638      	mov	r0, r7
 8015c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c8c:	3401      	adds	r4, #1
 8015c8e:	f145 0500 	adc.w	r5, r5, #0
 8015c92:	4294      	cmp	r4, r2
 8015c94:	eb75 010c 	sbcs.w	r1, r5, ip
 8015c98:	dbdc      	blt.n	8015c54 <__cleanup_context+0x54>
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	4649      	mov	r1, r9
 8015c9e:	47c0      	blx	r8
 8015ca0:	6830      	ldr	r0, [r6, #0]
 8015ca2:	e7eb      	b.n	8015c7c <__cleanup_context+0x7c>
 8015ca4:	4607      	mov	r7, r0
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	e9c6 3300 	strd	r3, r3, [r6]
 8015cac:	4638      	mov	r0, r7
 8015cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cb2:	f7fa fae5 	bl	8010280 <rcutils_reset_error>
 8015cb6:	e7b7      	b.n	8015c28 <__cleanup_context+0x28>
 8015cb8:	f7ff ff7e 	bl	8015bb8 <rcl_convert_rmw_ret_to_rcl_ret>
 8015cbc:	4607      	mov	r7, r0
 8015cbe:	e7bc      	b.n	8015c3a <__cleanup_context+0x3a>

08015cc0 <rcl_init>:
 8015cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cc4:	1e05      	subs	r5, r0, #0
 8015cc6:	b09e      	sub	sp, #120	; 0x78
 8015cc8:	460e      	mov	r6, r1
 8015cca:	4690      	mov	r8, r2
 8015ccc:	461f      	mov	r7, r3
 8015cce:	f340 809c 	ble.w	8015e0a <rcl_init+0x14a>
 8015cd2:	2900      	cmp	r1, #0
 8015cd4:	f000 809c 	beq.w	8015e10 <rcl_init+0x150>
 8015cd8:	f1a1 0e04 	sub.w	lr, r1, #4
 8015cdc:	f04f 0c00 	mov.w	ip, #0
 8015ce0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015ce4:	f10c 0c01 	add.w	ip, ip, #1
 8015ce8:	2c00      	cmp	r4, #0
 8015cea:	f000 8091 	beq.w	8015e10 <rcl_init+0x150>
 8015cee:	4565      	cmp	r5, ip
 8015cf0:	d1f6      	bne.n	8015ce0 <rcl_init+0x20>
 8015cf2:	f1b8 0f00 	cmp.w	r8, #0
 8015cf6:	f000 808b 	beq.w	8015e10 <rcl_init+0x150>
 8015cfa:	f8d8 4000 	ldr.w	r4, [r8]
 8015cfe:	2c00      	cmp	r4, #0
 8015d00:	f000 8086 	beq.w	8015e10 <rcl_init+0x150>
 8015d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d06:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8015d0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d0e:	6823      	ldr	r3, [r4, #0]
 8015d10:	f8cc 3000 	str.w	r3, [ip]
 8015d14:	a819      	add	r0, sp, #100	; 0x64
 8015d16:	f7fa fa8f 	bl	8010238 <rcutils_allocator_is_valid>
 8015d1a:	2800      	cmp	r0, #0
 8015d1c:	d078      	beq.n	8015e10 <rcl_init+0x150>
 8015d1e:	2f00      	cmp	r7, #0
 8015d20:	d076      	beq.n	8015e10 <rcl_init+0x150>
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d178      	bne.n	8015e1a <rcl_init+0x15a>
 8015d28:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8015d2c:	2178      	movs	r1, #120	; 0x78
 8015d2e:	2001      	movs	r0, #1
 8015d30:	4798      	blx	r3
 8015d32:	4604      	mov	r4, r0
 8015d34:	6038      	str	r0, [r7, #0]
 8015d36:	2800      	cmp	r0, #0
 8015d38:	f000 80b6 	beq.w	8015ea8 <rcl_init+0x1e8>
 8015d3c:	a802      	add	r0, sp, #8
 8015d3e:	f001 f957 	bl	8016ff0 <rmw_get_zero_initialized_context>
 8015d42:	a902      	add	r1, sp, #8
 8015d44:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015d48:	2250      	movs	r2, #80	; 0x50
 8015d4a:	ac19      	add	r4, sp, #100	; 0x64
 8015d4c:	f004 fd36 	bl	801a7bc <memcpy>
 8015d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d52:	f8d7 e000 	ldr.w	lr, [r7]
 8015d56:	46f4      	mov	ip, lr
 8015d58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d5c:	6823      	ldr	r3, [r4, #0]
 8015d5e:	f8cc 3000 	str.w	r3, [ip]
 8015d62:	f10e 0114 	add.w	r1, lr, #20
 8015d66:	4640      	mov	r0, r8
 8015d68:	f000 f940 	bl	8015fec <rcl_init_options_copy>
 8015d6c:	4604      	mov	r4, r0
 8015d6e:	2800      	cmp	r0, #0
 8015d70:	d144      	bne.n	8015dfc <rcl_init+0x13c>
 8015d72:	f8d7 9000 	ldr.w	r9, [r7]
 8015d76:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015d7a:	f8c9 0020 	str.w	r0, [r9, #32]
 8015d7e:	f8c9 5018 	str.w	r5, [r9, #24]
 8015d82:	f8c9 801c 	str.w	r8, [r9, #28]
 8015d86:	2d00      	cmp	r5, #0
 8015d88:	d04e      	beq.n	8015e28 <rcl_init+0x168>
 8015d8a:	2e00      	cmp	r6, #0
 8015d8c:	d04c      	beq.n	8015e28 <rcl_init+0x168>
 8015d8e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8015d92:	2104      	movs	r1, #4
 8015d94:	4628      	mov	r0, r5
 8015d96:	4798      	blx	r3
 8015d98:	f8c9 0020 	str.w	r0, [r9, #32]
 8015d9c:	f8d7 9000 	ldr.w	r9, [r7]
 8015da0:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015da4:	46ca      	mov	sl, r9
 8015da6:	b343      	cbz	r3, 8015dfa <rcl_init+0x13a>
 8015da8:	2d01      	cmp	r5, #1
 8015daa:	f178 0300 	sbcs.w	r3, r8, #0
 8015dae:	db3b      	blt.n	8015e28 <rcl_init+0x168>
 8015db0:	2400      	movs	r4, #0
 8015db2:	3e04      	subs	r6, #4
 8015db4:	46a1      	mov	r9, r4
 8015db6:	e00b      	b.n	8015dd0 <rcl_init+0x110>
 8015db8:	6831      	ldr	r1, [r6, #0]
 8015dba:	f004 fcff 	bl	801a7bc <memcpy>
 8015dbe:	3401      	adds	r4, #1
 8015dc0:	f149 0900 	adc.w	r9, r9, #0
 8015dc4:	45c8      	cmp	r8, r9
 8015dc6:	bf08      	it	eq
 8015dc8:	42a5      	cmpeq	r5, r4
 8015dca:	d02b      	beq.n	8015e24 <rcl_init+0x164>
 8015dcc:	f8d7 a000 	ldr.w	sl, [r7]
 8015dd0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8015dd4:	f7ea fa06 	bl	80001e4 <strlen>
 8015dd8:	1c42      	adds	r2, r0, #1
 8015dda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015ddc:	991d      	ldr	r1, [sp, #116]	; 0x74
 8015dde:	f8da a020 	ldr.w	sl, [sl, #32]
 8015de2:	9201      	str	r2, [sp, #4]
 8015de4:	4610      	mov	r0, r2
 8015de6:	4798      	blx	r3
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8015dee:	6a1b      	ldr	r3, [r3, #32]
 8015df0:	9a01      	ldr	r2, [sp, #4]
 8015df2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015df6:	2800      	cmp	r0, #0
 8015df8:	d1de      	bne.n	8015db8 <rcl_init+0xf8>
 8015dfa:	240a      	movs	r4, #10
 8015dfc:	4638      	mov	r0, r7
 8015dfe:	f7ff feff 	bl	8015c00 <__cleanup_context>
 8015e02:	4620      	mov	r0, r4
 8015e04:	b01e      	add	sp, #120	; 0x78
 8015e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e0a:	2900      	cmp	r1, #0
 8015e0c:	f43f af71 	beq.w	8015cf2 <rcl_init+0x32>
 8015e10:	240b      	movs	r4, #11
 8015e12:	4620      	mov	r0, r4
 8015e14:	b01e      	add	sp, #120	; 0x78
 8015e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e1a:	2464      	movs	r4, #100	; 0x64
 8015e1c:	4620      	mov	r0, r4
 8015e1e:	b01e      	add	sp, #120	; 0x78
 8015e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e24:	f8d7 9000 	ldr.w	r9, [r7]
 8015e28:	4926      	ldr	r1, [pc, #152]	; (8015ec4 <rcl_init+0x204>)
 8015e2a:	680b      	ldr	r3, [r1, #0]
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	d036      	beq.n	8015e9e <rcl_init+0x1de>
 8015e30:	600b      	str	r3, [r1, #0]
 8015e32:	461a      	mov	r2, r3
 8015e34:	2400      	movs	r4, #0
 8015e36:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015e3a:	607b      	str	r3, [r7, #4]
 8015e3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015e3e:	3301      	adds	r3, #1
 8015e40:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8015e44:	d034      	beq.n	8015eb0 <rcl_init+0x1f0>
 8015e46:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8015e4a:	b93b      	cbnz	r3, 8015e5c <rcl_init+0x19c>
 8015e4c:	3030      	adds	r0, #48	; 0x30
 8015e4e:	f000 f939 	bl	80160c4 <rcl_get_localhost_only>
 8015e52:	4604      	mov	r4, r0
 8015e54:	2800      	cmp	r0, #0
 8015e56:	d1d1      	bne.n	8015dfc <rcl_init+0x13c>
 8015e58:	683b      	ldr	r3, [r7, #0]
 8015e5a:	6958      	ldr	r0, [r3, #20]
 8015e5c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015e5e:	aa18      	add	r2, sp, #96	; 0x60
 8015e60:	a917      	add	r1, sp, #92	; 0x5c
 8015e62:	f000 fd81 	bl	8016968 <rcl_validate_enclave_name>
 8015e66:	4604      	mov	r4, r0
 8015e68:	2800      	cmp	r0, #0
 8015e6a:	d1c7      	bne.n	8015dfc <rcl_init+0x13c>
 8015e6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e6e:	b9eb      	cbnz	r3, 8015eac <rcl_init+0x1ec>
 8015e70:	6839      	ldr	r1, [r7, #0]
 8015e72:	694b      	ldr	r3, [r1, #20]
 8015e74:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015e76:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8015e7a:	f000 fc3d 	bl	80166f8 <rcl_get_security_options_from_environment>
 8015e7e:	4604      	mov	r4, r0
 8015e80:	2800      	cmp	r0, #0
 8015e82:	d1bb      	bne.n	8015dfc <rcl_init+0x13c>
 8015e84:	6839      	ldr	r1, [r7, #0]
 8015e86:	6948      	ldr	r0, [r1, #20]
 8015e88:	3128      	adds	r1, #40	; 0x28
 8015e8a:	3018      	adds	r0, #24
 8015e8c:	f001 fb36 	bl	80174fc <rmw_init>
 8015e90:	4604      	mov	r4, r0
 8015e92:	2800      	cmp	r0, #0
 8015e94:	d0bd      	beq.n	8015e12 <rcl_init+0x152>
 8015e96:	f7ff fe8f 	bl	8015bb8 <rcl_convert_rmw_ret_to_rcl_ret>
 8015e9a:	4604      	mov	r4, r0
 8015e9c:	e7ae      	b.n	8015dfc <rcl_init+0x13c>
 8015e9e:	2201      	movs	r2, #1
 8015ea0:	461c      	mov	r4, r3
 8015ea2:	600a      	str	r2, [r1, #0]
 8015ea4:	4613      	mov	r3, r2
 8015ea6:	e7c6      	b.n	8015e36 <rcl_init+0x176>
 8015ea8:	240a      	movs	r4, #10
 8015eaa:	e7b2      	b.n	8015e12 <rcl_init+0x152>
 8015eac:	2401      	movs	r4, #1
 8015eae:	e7a5      	b.n	8015dfc <rcl_init+0x13c>
 8015eb0:	3024      	adds	r0, #36	; 0x24
 8015eb2:	f003 fdb5 	bl	8019a20 <rcl_get_default_domain_id>
 8015eb6:	4604      	mov	r4, r0
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	d19f      	bne.n	8015dfc <rcl_init+0x13c>
 8015ebc:	683b      	ldr	r3, [r7, #0]
 8015ebe:	6958      	ldr	r0, [r3, #20]
 8015ec0:	e7c1      	b.n	8015e46 <rcl_init+0x186>
 8015ec2:	bf00      	nop
 8015ec4:	2001c844 	.word	0x2001c844

08015ec8 <rcl_get_zero_initialized_init_options>:
 8015ec8:	2000      	movs	r0, #0
 8015eca:	4770      	bx	lr

08015ecc <rcl_init_options_init>:
 8015ecc:	b084      	sub	sp, #16
 8015ece:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ed0:	b097      	sub	sp, #92	; 0x5c
 8015ed2:	ae1d      	add	r6, sp, #116	; 0x74
 8015ed4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8015ed8:	2800      	cmp	r0, #0
 8015eda:	d058      	beq.n	8015f8e <rcl_init_options_init+0xc2>
 8015edc:	6803      	ldr	r3, [r0, #0]
 8015ede:	4605      	mov	r5, r0
 8015ee0:	b133      	cbz	r3, 8015ef0 <rcl_init_options_init+0x24>
 8015ee2:	2464      	movs	r4, #100	; 0x64
 8015ee4:	4620      	mov	r0, r4
 8015ee6:	b017      	add	sp, #92	; 0x5c
 8015ee8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015eec:	b004      	add	sp, #16
 8015eee:	4770      	bx	lr
 8015ef0:	4630      	mov	r0, r6
 8015ef2:	f7fa f9a1 	bl	8010238 <rcutils_allocator_is_valid>
 8015ef6:	2800      	cmp	r0, #0
 8015ef8:	d049      	beq.n	8015f8e <rcl_init_options_init+0xc2>
 8015efa:	46b4      	mov	ip, r6
 8015efc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f00:	ac11      	add	r4, sp, #68	; 0x44
 8015f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015f04:	f8dc 3000 	ldr.w	r3, [ip]
 8015f08:	6023      	str	r3, [r4, #0]
 8015f0a:	9921      	ldr	r1, [sp, #132]	; 0x84
 8015f0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015f0e:	2050      	movs	r0, #80	; 0x50
 8015f10:	4798      	blx	r3
 8015f12:	4604      	mov	r4, r0
 8015f14:	6028      	str	r0, [r5, #0]
 8015f16:	2800      	cmp	r0, #0
 8015f18:	d03b      	beq.n	8015f92 <rcl_init_options_init+0xc6>
 8015f1a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015f1e:	4686      	mov	lr, r0
 8015f20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f24:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015f28:	f8dc 3000 	ldr.w	r3, [ip]
 8015f2c:	f8ce 3000 	str.w	r3, [lr]
 8015f30:	a802      	add	r0, sp, #8
 8015f32:	f001 f86d 	bl	8017010 <rmw_get_zero_initialized_init_options>
 8015f36:	f10d 0e08 	add.w	lr, sp, #8
 8015f3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015f3e:	f104 0c18 	add.w	ip, r4, #24
 8015f42:	682f      	ldr	r7, [r5, #0]
 8015f44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015f4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015f54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f58:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015f5c:	ac20      	add	r4, sp, #128	; 0x80
 8015f5e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015f62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015f66:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015f6a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8015f6e:	f107 0018 	add.w	r0, r7, #24
 8015f72:	f001 f9cb 	bl	801730c <rmw_init_options_init>
 8015f76:	4604      	mov	r4, r0
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	d0b3      	beq.n	8015ee4 <rcl_init_options_init+0x18>
 8015f7c:	9921      	ldr	r1, [sp, #132]	; 0x84
 8015f7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015f80:	6828      	ldr	r0, [r5, #0]
 8015f82:	4798      	blx	r3
 8015f84:	4620      	mov	r0, r4
 8015f86:	f7ff fe17 	bl	8015bb8 <rcl_convert_rmw_ret_to_rcl_ret>
 8015f8a:	4604      	mov	r4, r0
 8015f8c:	e7aa      	b.n	8015ee4 <rcl_init_options_init+0x18>
 8015f8e:	240b      	movs	r4, #11
 8015f90:	e7a8      	b.n	8015ee4 <rcl_init_options_init+0x18>
 8015f92:	240a      	movs	r4, #10
 8015f94:	e7a6      	b.n	8015ee4 <rcl_init_options_init+0x18>
 8015f96:	bf00      	nop

08015f98 <rcl_init_options_fini>:
 8015f98:	b530      	push	{r4, r5, lr}
 8015f9a:	b087      	sub	sp, #28
 8015f9c:	b1f0      	cbz	r0, 8015fdc <rcl_init_options_fini+0x44>
 8015f9e:	6803      	ldr	r3, [r0, #0]
 8015fa0:	4604      	mov	r4, r0
 8015fa2:	b1db      	cbz	r3, 8015fdc <rcl_init_options_fini+0x44>
 8015fa4:	469c      	mov	ip, r3
 8015fa6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015faa:	f10d 0e04 	add.w	lr, sp, #4
 8015fae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015fb2:	f8dc 3000 	ldr.w	r3, [ip]
 8015fb6:	f8ce 3000 	str.w	r3, [lr]
 8015fba:	a801      	add	r0, sp, #4
 8015fbc:	f7fa f93c 	bl	8010238 <rcutils_allocator_is_valid>
 8015fc0:	b160      	cbz	r0, 8015fdc <rcl_init_options_fini+0x44>
 8015fc2:	6820      	ldr	r0, [r4, #0]
 8015fc4:	3018      	adds	r0, #24
 8015fc6:	f001 fa51 	bl	801746c <rmw_init_options_fini>
 8015fca:	4605      	mov	r5, r0
 8015fcc:	b950      	cbnz	r0, 8015fe4 <rcl_init_options_fini+0x4c>
 8015fce:	6820      	ldr	r0, [r4, #0]
 8015fd0:	9b02      	ldr	r3, [sp, #8]
 8015fd2:	9905      	ldr	r1, [sp, #20]
 8015fd4:	4798      	blx	r3
 8015fd6:	4628      	mov	r0, r5
 8015fd8:	b007      	add	sp, #28
 8015fda:	bd30      	pop	{r4, r5, pc}
 8015fdc:	250b      	movs	r5, #11
 8015fde:	4628      	mov	r0, r5
 8015fe0:	b007      	add	sp, #28
 8015fe2:	bd30      	pop	{r4, r5, pc}
 8015fe4:	f7ff fde8 	bl	8015bb8 <rcl_convert_rmw_ret_to_rcl_ret>
 8015fe8:	4605      	mov	r5, r0
 8015fea:	e7f8      	b.n	8015fde <rcl_init_options_fini+0x46>

08015fec <rcl_init_options_copy>:
 8015fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ff0:	b094      	sub	sp, #80	; 0x50
 8015ff2:	2800      	cmp	r0, #0
 8015ff4:	d058      	beq.n	80160a8 <rcl_init_options_copy+0xbc>
 8015ff6:	4604      	mov	r4, r0
 8015ff8:	6800      	ldr	r0, [r0, #0]
 8015ffa:	2800      	cmp	r0, #0
 8015ffc:	d054      	beq.n	80160a8 <rcl_init_options_copy+0xbc>
 8015ffe:	460e      	mov	r6, r1
 8016000:	f7fa f91a 	bl	8010238 <rcutils_allocator_is_valid>
 8016004:	2800      	cmp	r0, #0
 8016006:	d04f      	beq.n	80160a8 <rcl_init_options_copy+0xbc>
 8016008:	2e00      	cmp	r6, #0
 801600a:	d04d      	beq.n	80160a8 <rcl_init_options_copy+0xbc>
 801600c:	6833      	ldr	r3, [r6, #0]
 801600e:	b123      	cbz	r3, 801601a <rcl_init_options_copy+0x2e>
 8016010:	2464      	movs	r4, #100	; 0x64
 8016012:	4620      	mov	r0, r4
 8016014:	b014      	add	sp, #80	; 0x50
 8016016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801601a:	6827      	ldr	r7, [r4, #0]
 801601c:	46bc      	mov	ip, r7
 801601e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016022:	ad0f      	add	r5, sp, #60	; 0x3c
 8016024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016026:	f8dc 3000 	ldr.w	r3, [ip]
 801602a:	f8d7 8000 	ldr.w	r8, [r7]
 801602e:	602b      	str	r3, [r5, #0]
 8016030:	4619      	mov	r1, r3
 8016032:	2050      	movs	r0, #80	; 0x50
 8016034:	47c0      	blx	r8
 8016036:	4605      	mov	r5, r0
 8016038:	6030      	str	r0, [r6, #0]
 801603a:	b3d0      	cbz	r0, 80160b2 <rcl_init_options_copy+0xc6>
 801603c:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8016040:	4686      	mov	lr, r0
 8016042:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016046:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801604a:	f8dc 3000 	ldr.w	r3, [ip]
 801604e:	f8ce 3000 	str.w	r3, [lr]
 8016052:	4668      	mov	r0, sp
 8016054:	f000 ffdc 	bl	8017010 <rmw_get_zero_initialized_init_options>
 8016058:	46ee      	mov	lr, sp
 801605a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801605e:	f105 0c18 	add.w	ip, r5, #24
 8016062:	6824      	ldr	r4, [r4, #0]
 8016064:	6835      	ldr	r5, [r6, #0]
 8016066:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801606a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801606e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016072:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016076:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801607a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801607e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016082:	f104 0018 	add.w	r0, r4, #24
 8016086:	f105 0118 	add.w	r1, r5, #24
 801608a:	f001 f9a7 	bl	80173dc <rmw_init_options_copy>
 801608e:	4604      	mov	r4, r0
 8016090:	2800      	cmp	r0, #0
 8016092:	d0be      	beq.n	8016012 <rcl_init_options_copy+0x26>
 8016094:	f7fa f8de 	bl	8010254 <rcutils_get_error_string>
 8016098:	f7fa f8f2 	bl	8010280 <rcutils_reset_error>
 801609c:	4630      	mov	r0, r6
 801609e:	f7ff ff7b 	bl	8015f98 <rcl_init_options_fini>
 80160a2:	b140      	cbz	r0, 80160b6 <rcl_init_options_copy+0xca>
 80160a4:	4604      	mov	r4, r0
 80160a6:	e7b4      	b.n	8016012 <rcl_init_options_copy+0x26>
 80160a8:	240b      	movs	r4, #11
 80160aa:	4620      	mov	r0, r4
 80160ac:	b014      	add	sp, #80	; 0x50
 80160ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160b2:	240a      	movs	r4, #10
 80160b4:	e7ad      	b.n	8016012 <rcl_init_options_copy+0x26>
 80160b6:	4620      	mov	r0, r4
 80160b8:	b014      	add	sp, #80	; 0x50
 80160ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160be:	f7ff bd7b 	b.w	8015bb8 <rcl_convert_rmw_ret_to_rcl_ret>
 80160c2:	bf00      	nop

080160c4 <rcl_get_localhost_only>:
 80160c4:	b510      	push	{r4, lr}
 80160c6:	b082      	sub	sp, #8
 80160c8:	2300      	movs	r3, #0
 80160ca:	9301      	str	r3, [sp, #4]
 80160cc:	b1b8      	cbz	r0, 80160fe <rcl_get_localhost_only+0x3a>
 80160ce:	4604      	mov	r4, r0
 80160d0:	a901      	add	r1, sp, #4
 80160d2:	480c      	ldr	r0, [pc, #48]	; (8016104 <rcl_get_localhost_only+0x40>)
 80160d4:	f000 fc90 	bl	80169f8 <rcutils_get_env>
 80160d8:	b110      	cbz	r0, 80160e0 <rcl_get_localhost_only+0x1c>
 80160da:	2001      	movs	r0, #1
 80160dc:	b002      	add	sp, #8
 80160de:	bd10      	pop	{r4, pc}
 80160e0:	9b01      	ldr	r3, [sp, #4]
 80160e2:	b113      	cbz	r3, 80160ea <rcl_get_localhost_only+0x26>
 80160e4:	781a      	ldrb	r2, [r3, #0]
 80160e6:	2a31      	cmp	r2, #49	; 0x31
 80160e8:	d004      	beq.n	80160f4 <rcl_get_localhost_only+0x30>
 80160ea:	2302      	movs	r3, #2
 80160ec:	2000      	movs	r0, #0
 80160ee:	7023      	strb	r3, [r4, #0]
 80160f0:	b002      	add	sp, #8
 80160f2:	bd10      	pop	{r4, pc}
 80160f4:	785b      	ldrb	r3, [r3, #1]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d1f7      	bne.n	80160ea <rcl_get_localhost_only+0x26>
 80160fa:	2301      	movs	r3, #1
 80160fc:	e7f6      	b.n	80160ec <rcl_get_localhost_only+0x28>
 80160fe:	200b      	movs	r0, #11
 8016100:	b002      	add	sp, #8
 8016102:	bd10      	pop	{r4, pc}
 8016104:	0801c65c 	.word	0x0801c65c

08016108 <rcl_get_zero_initialized_node>:
 8016108:	4a03      	ldr	r2, [pc, #12]	; (8016118 <rcl_get_zero_initialized_node+0x10>)
 801610a:	4603      	mov	r3, r0
 801610c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016110:	e883 0003 	stmia.w	r3, {r0, r1}
 8016114:	4618      	mov	r0, r3
 8016116:	4770      	bx	lr
 8016118:	0801c684 	.word	0x0801c684

0801611c <rcl_node_init>:
 801611c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016120:	b0a9      	sub	sp, #164	; 0xa4
 8016122:	4604      	mov	r4, r0
 8016124:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8016128:	a823      	add	r0, sp, #140	; 0x8c
 801612a:	460e      	mov	r6, r1
 801612c:	4615      	mov	r5, r2
 801612e:	461f      	mov	r7, r3
 8016130:	f003 fe9e 	bl	8019e70 <rcl_guard_condition_get_default_options>
 8016134:	f1b8 0f00 	cmp.w	r8, #0
 8016138:	f000 80e6 	beq.w	8016308 <rcl_node_init+0x1ec>
 801613c:	4640      	mov	r0, r8
 801613e:	f7fa f87b 	bl	8010238 <rcutils_allocator_is_valid>
 8016142:	2800      	cmp	r0, #0
 8016144:	f000 80e0 	beq.w	8016308 <rcl_node_init+0x1ec>
 8016148:	2e00      	cmp	r6, #0
 801614a:	f000 80dd 	beq.w	8016308 <rcl_node_init+0x1ec>
 801614e:	2d00      	cmp	r5, #0
 8016150:	f000 80da 	beq.w	8016308 <rcl_node_init+0x1ec>
 8016154:	2c00      	cmp	r4, #0
 8016156:	f000 80d7 	beq.w	8016308 <rcl_node_init+0x1ec>
 801615a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801615e:	f1b9 0f00 	cmp.w	r9, #0
 8016162:	f040 80fd 	bne.w	8016360 <rcl_node_init+0x244>
 8016166:	2f00      	cmp	r7, #0
 8016168:	f000 80ce 	beq.w	8016308 <rcl_node_init+0x1ec>
 801616c:	4638      	mov	r0, r7
 801616e:	f7ff fd41 	bl	8015bf4 <rcl_context_is_valid>
 8016172:	4682      	mov	sl, r0
 8016174:	2800      	cmp	r0, #0
 8016176:	f000 80cd 	beq.w	8016314 <rcl_node_init+0x1f8>
 801617a:	464a      	mov	r2, r9
 801617c:	a922      	add	r1, sp, #136	; 0x88
 801617e:	4630      	mov	r0, r6
 8016180:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8016184:	f001 f83a 	bl	80171fc <rmw_validate_node_name>
 8016188:	4681      	mov	r9, r0
 801618a:	2800      	cmp	r0, #0
 801618c:	f040 80be 	bne.w	801630c <rcl_node_init+0x1f0>
 8016190:	9822      	ldr	r0, [sp, #136]	; 0x88
 8016192:	2800      	cmp	r0, #0
 8016194:	f040 80f0 	bne.w	8016378 <rcl_node_init+0x25c>
 8016198:	4628      	mov	r0, r5
 801619a:	f7ea f823 	bl	80001e4 <strlen>
 801619e:	2800      	cmp	r0, #0
 80161a0:	f040 80bb 	bne.w	801631a <rcl_node_init+0x1fe>
 80161a4:	4d7c      	ldr	r5, [pc, #496]	; (8016398 <rcl_node_init+0x27c>)
 80161a6:	a922      	add	r1, sp, #136	; 0x88
 80161a8:	2200      	movs	r2, #0
 80161aa:	4628      	mov	r0, r5
 80161ac:	f001 f808 	bl	80171c0 <rmw_validate_namespace>
 80161b0:	4681      	mov	r9, r0
 80161b2:	2800      	cmp	r0, #0
 80161b4:	f040 80aa 	bne.w	801630c <rcl_node_init+0x1f0>
 80161b8:	4682      	mov	sl, r0
 80161ba:	9822      	ldr	r0, [sp, #136]	; 0x88
 80161bc:	2800      	cmp	r0, #0
 80161be:	f040 80e0 	bne.w	8016382 <rcl_node_init+0x266>
 80161c2:	f8d8 3000 	ldr.w	r3, [r8]
 80161c6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80161ca:	2078      	movs	r0, #120	; 0x78
 80161cc:	4798      	blx	r3
 80161ce:	4681      	mov	r9, r0
 80161d0:	6060      	str	r0, [r4, #4]
 80161d2:	2800      	cmp	r0, #0
 80161d4:	f000 80ca 	beq.w	801636c <rcl_node_init+0x250>
 80161d8:	2200      	movs	r2, #0
 80161da:	2300      	movs	r3, #0
 80161dc:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 80161e0:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 80161e4:	a808      	add	r0, sp, #32
 80161e6:	f000 f907 	bl	80163f8 <rcl_node_get_default_options>
 80161ea:	a908      	add	r1, sp, #32
 80161ec:	4648      	mov	r0, r9
 80161ee:	2268      	movs	r2, #104	; 0x68
 80161f0:	f004 fae4 	bl	801a7bc <memcpy>
 80161f4:	6861      	ldr	r1, [r4, #4]
 80161f6:	6027      	str	r7, [r4, #0]
 80161f8:	4640      	mov	r0, r8
 80161fa:	f000 f90b 	bl	8016414 <rcl_node_options_copy>
 80161fe:	2800      	cmp	r0, #0
 8016200:	d158      	bne.n	80162b4 <rcl_node_init+0x198>
 8016202:	4628      	mov	r0, r5
 8016204:	f7e9 ffee 	bl	80001e4 <strlen>
 8016208:	4428      	add	r0, r5
 801620a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801620e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8016212:	2b2f      	cmp	r3, #47	; 0x2f
 8016214:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016218:	9300      	str	r3, [sp, #0]
 801621a:	bf0c      	ite	eq
 801621c:	4b5f      	ldreq	r3, [pc, #380]	; (801639c <rcl_node_init+0x280>)
 801621e:	4b60      	ldrne	r3, [pc, #384]	; (80163a0 <rcl_node_init+0x284>)
 8016220:	9302      	str	r3, [sp, #8]
 8016222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016226:	9301      	str	r3, [sp, #4]
 8016228:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801622c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016230:	f000 fc0a 	bl	8016a48 <rcutils_format_string_limit>
 8016234:	6823      	ldr	r3, [r4, #0]
 8016236:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 801623a:	6818      	ldr	r0, [r3, #0]
 801623c:	4631      	mov	r1, r6
 801623e:	3028      	adds	r0, #40	; 0x28
 8016240:	462a      	mov	r2, r5
 8016242:	6866      	ldr	r6, [r4, #4]
 8016244:	f001 fbc2 	bl	80179cc <rmw_create_node>
 8016248:	6863      	ldr	r3, [r4, #4]
 801624a:	66b0      	str	r0, [r6, #104]	; 0x68
 801624c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801624e:	2800      	cmp	r0, #0
 8016250:	d032      	beq.n	80162b8 <rcl_node_init+0x19c>
 8016252:	f001 fc4d 	bl	8017af0 <rmw_node_get_graph_guard_condition>
 8016256:	4681      	mov	r9, r0
 8016258:	b360      	cbz	r0, 80162b4 <rcl_node_init+0x198>
 801625a:	f8d8 3000 	ldr.w	r3, [r8]
 801625e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016262:	6866      	ldr	r6, [r4, #4]
 8016264:	2008      	movs	r0, #8
 8016266:	4798      	blx	r3
 8016268:	6863      	ldr	r3, [r4, #4]
 801626a:	66f0      	str	r0, [r6, #108]	; 0x6c
 801626c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8016270:	f1bb 0f00 	cmp.w	fp, #0
 8016274:	d020      	beq.n	80162b8 <rcl_node_init+0x19c>
 8016276:	a806      	add	r0, sp, #24
 8016278:	f003 fd6a 	bl	8019d50 <rcl_get_zero_initialized_guard_condition>
 801627c:	a806      	add	r0, sp, #24
 801627e:	c803      	ldmia	r0, {r0, r1}
 8016280:	6863      	ldr	r3, [r4, #4]
 8016282:	46c4      	mov	ip, r8
 8016284:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8016288:	e88b 0003 	stmia.w	fp, {r0, r1}
 801628c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016290:	ae23      	add	r6, sp, #140	; 0x8c
 8016292:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016294:	f8dc 3000 	ldr.w	r3, [ip]
 8016298:	6033      	str	r3, [r6, #0]
 801629a:	ab28      	add	r3, sp, #160	; 0xa0
 801629c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80162a0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80162a4:	4649      	mov	r1, r9
 80162a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80162a8:	463a      	mov	r2, r7
 80162aa:	4670      	mov	r0, lr
 80162ac:	f003 fd5a 	bl	8019d64 <rcl_guard_condition_init_from_rmw>
 80162b0:	4681      	mov	r9, r0
 80162b2:	b328      	cbz	r0, 8016300 <rcl_node_init+0x1e4>
 80162b4:	6863      	ldr	r3, [r4, #4]
 80162b6:	b1f3      	cbz	r3, 80162f6 <rcl_node_init+0x1da>
 80162b8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80162ba:	b128      	cbz	r0, 80162c8 <rcl_node_init+0x1ac>
 80162bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80162c0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80162c4:	4798      	blx	r3
 80162c6:	6863      	ldr	r3, [r4, #4]
 80162c8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80162ca:	b110      	cbz	r0, 80162d2 <rcl_node_init+0x1b6>
 80162cc:	f001 fb96 	bl	80179fc <rmw_destroy_node>
 80162d0:	6863      	ldr	r3, [r4, #4]
 80162d2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80162d4:	b148      	cbz	r0, 80162ea <rcl_node_init+0x1ce>
 80162d6:	f003 fda5 	bl	8019e24 <rcl_guard_condition_fini>
 80162da:	6863      	ldr	r3, [r4, #4]
 80162dc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80162e0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80162e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80162e6:	4798      	blx	r3
 80162e8:	6863      	ldr	r3, [r4, #4]
 80162ea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80162ee:	4618      	mov	r0, r3
 80162f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80162f4:	4798      	blx	r3
 80162f6:	2300      	movs	r3, #0
 80162f8:	e9c4 3300 	strd	r3, r3, [r4]
 80162fc:	f04f 0901 	mov.w	r9, #1
 8016300:	f1ba 0f00 	cmp.w	sl, #0
 8016304:	d125      	bne.n	8016352 <rcl_node_init+0x236>
 8016306:	e001      	b.n	801630c <rcl_node_init+0x1f0>
 8016308:	f04f 090b 	mov.w	r9, #11
 801630c:	4648      	mov	r0, r9
 801630e:	b029      	add	sp, #164	; 0xa4
 8016310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016314:	f04f 0965 	mov.w	r9, #101	; 0x65
 8016318:	e7f8      	b.n	801630c <rcl_node_init+0x1f0>
 801631a:	782b      	ldrb	r3, [r5, #0]
 801631c:	2b2f      	cmp	r3, #47	; 0x2f
 801631e:	f43f af42 	beq.w	80161a6 <rcl_node_init+0x8a>
 8016322:	9503      	str	r5, [sp, #12]
 8016324:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016328:	9300      	str	r3, [sp, #0]
 801632a:	4b1e      	ldr	r3, [pc, #120]	; (80163a4 <rcl_node_init+0x288>)
 801632c:	9302      	str	r3, [sp, #8]
 801632e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016332:	9301      	str	r3, [sp, #4]
 8016334:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016338:	f000 fb86 	bl	8016a48 <rcutils_format_string_limit>
 801633c:	4605      	mov	r5, r0
 801633e:	b340      	cbz	r0, 8016392 <rcl_node_init+0x276>
 8016340:	2200      	movs	r2, #0
 8016342:	a922      	add	r1, sp, #136	; 0x88
 8016344:	9222      	str	r2, [sp, #136]	; 0x88
 8016346:	f000 ff3b 	bl	80171c0 <rmw_validate_namespace>
 801634a:	4681      	mov	r9, r0
 801634c:	2800      	cmp	r0, #0
 801634e:	f43f af34 	beq.w	80161ba <rcl_node_init+0x9e>
 8016352:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016356:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801635a:	4628      	mov	r0, r5
 801635c:	4798      	blx	r3
 801635e:	e7d5      	b.n	801630c <rcl_node_init+0x1f0>
 8016360:	f04f 0964 	mov.w	r9, #100	; 0x64
 8016364:	4648      	mov	r0, r9
 8016366:	b029      	add	sp, #164	; 0xa4
 8016368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801636c:	f04f 090a 	mov.w	r9, #10
 8016370:	f1ba 0f00 	cmp.w	sl, #0
 8016374:	d1ed      	bne.n	8016352 <rcl_node_init+0x236>
 8016376:	e7c9      	b.n	801630c <rcl_node_init+0x1f0>
 8016378:	f000 ff92 	bl	80172a0 <rmw_node_name_validation_result_string>
 801637c:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8016380:	e7c4      	b.n	801630c <rcl_node_init+0x1f0>
 8016382:	f000 ff2f 	bl	80171e4 <rmw_namespace_validation_result_string>
 8016386:	f04f 09ca 	mov.w	r9, #202	; 0xca
 801638a:	f1ba 0f00 	cmp.w	sl, #0
 801638e:	d1e0      	bne.n	8016352 <rcl_node_init+0x236>
 8016390:	e7bc      	b.n	801630c <rcl_node_init+0x1f0>
 8016392:	f04f 090a 	mov.w	r9, #10
 8016396:	e7b9      	b.n	801630c <rcl_node_init+0x1f0>
 8016398:	0801c674 	.word	0x0801c674
 801639c:	0801c024 	.word	0x0801c024
 80163a0:	0801c67c 	.word	0x0801c67c
 80163a4:	0801c678 	.word	0x0801c678

080163a8 <rcl_node_is_valid>:
 80163a8:	b130      	cbz	r0, 80163b8 <rcl_node_is_valid+0x10>
 80163aa:	6843      	ldr	r3, [r0, #4]
 80163ac:	b123      	cbz	r3, 80163b8 <rcl_node_is_valid+0x10>
 80163ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80163b0:	b113      	cbz	r3, 80163b8 <rcl_node_is_valid+0x10>
 80163b2:	6800      	ldr	r0, [r0, #0]
 80163b4:	f7ff bc1e 	b.w	8015bf4 <rcl_context_is_valid>
 80163b8:	2000      	movs	r0, #0
 80163ba:	4770      	bx	lr

080163bc <rcl_node_get_name>:
 80163bc:	b120      	cbz	r0, 80163c8 <rcl_node_get_name+0xc>
 80163be:	6840      	ldr	r0, [r0, #4]
 80163c0:	b110      	cbz	r0, 80163c8 <rcl_node_get_name+0xc>
 80163c2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80163c4:	b100      	cbz	r0, 80163c8 <rcl_node_get_name+0xc>
 80163c6:	6880      	ldr	r0, [r0, #8]
 80163c8:	4770      	bx	lr
 80163ca:	bf00      	nop

080163cc <rcl_node_get_namespace>:
 80163cc:	b120      	cbz	r0, 80163d8 <rcl_node_get_namespace+0xc>
 80163ce:	6840      	ldr	r0, [r0, #4]
 80163d0:	b110      	cbz	r0, 80163d8 <rcl_node_get_namespace+0xc>
 80163d2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80163d4:	b100      	cbz	r0, 80163d8 <rcl_node_get_namespace+0xc>
 80163d6:	68c0      	ldr	r0, [r0, #12]
 80163d8:	4770      	bx	lr
 80163da:	bf00      	nop

080163dc <rcl_node_get_options>:
 80163dc:	b128      	cbz	r0, 80163ea <rcl_node_get_options+0xe>
 80163de:	6840      	ldr	r0, [r0, #4]
 80163e0:	b118      	cbz	r0, 80163ea <rcl_node_get_options+0xe>
 80163e2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	bf08      	it	eq
 80163e8:	2000      	moveq	r0, #0
 80163ea:	4770      	bx	lr

080163ec <rcl_node_get_rmw_handle>:
 80163ec:	b110      	cbz	r0, 80163f4 <rcl_node_get_rmw_handle+0x8>
 80163ee:	6840      	ldr	r0, [r0, #4]
 80163f0:	b100      	cbz	r0, 80163f4 <rcl_node_get_rmw_handle+0x8>
 80163f2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80163f4:	4770      	bx	lr
 80163f6:	bf00      	nop

080163f8 <rcl_node_get_default_options>:
 80163f8:	b510      	push	{r4, lr}
 80163fa:	2268      	movs	r2, #104	; 0x68
 80163fc:	4604      	mov	r4, r0
 80163fe:	2100      	movs	r1, #0
 8016400:	f004 f9ea 	bl	801a7d8 <memset>
 8016404:	4620      	mov	r0, r4
 8016406:	f7f9 ff09 	bl	801021c <rcutils_get_default_allocator>
 801640a:	2301      	movs	r3, #1
 801640c:	7523      	strb	r3, [r4, #20]
 801640e:	4620      	mov	r0, r4
 8016410:	bd10      	pop	{r4, pc}
 8016412:	bf00      	nop

08016414 <rcl_node_options_copy>:
 8016414:	b1d0      	cbz	r0, 801644c <rcl_node_options_copy+0x38>
 8016416:	b570      	push	{r4, r5, r6, lr}
 8016418:	460c      	mov	r4, r1
 801641a:	b1a9      	cbz	r1, 8016448 <rcl_node_options_copy+0x34>
 801641c:	4288      	cmp	r0, r1
 801641e:	4684      	mov	ip, r0
 8016420:	d012      	beq.n	8016448 <rcl_node_options_copy+0x34>
 8016422:	4605      	mov	r5, r0
 8016424:	8a86      	ldrh	r6, [r0, #20]
 8016426:	468e      	mov	lr, r1
 8016428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801642a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801642e:	682b      	ldr	r3, [r5, #0]
 8016430:	f8ce 3000 	str.w	r3, [lr]
 8016434:	f10c 0118 	add.w	r1, ip, #24
 8016438:	2250      	movs	r2, #80	; 0x50
 801643a:	82a6      	strh	r6, [r4, #20]
 801643c:	f104 0018 	add.w	r0, r4, #24
 8016440:	f004 f9bc 	bl	801a7bc <memcpy>
 8016444:	2000      	movs	r0, #0
 8016446:	bd70      	pop	{r4, r5, r6, pc}
 8016448:	200b      	movs	r0, #11
 801644a:	bd70      	pop	{r4, r5, r6, pc}
 801644c:	200b      	movs	r0, #11
 801644e:	4770      	bx	lr

08016450 <rcl_node_resolve_name>:
 8016450:	b082      	sub	sp, #8
 8016452:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016456:	b091      	sub	sp, #68	; 0x44
 8016458:	ac1a      	add	r4, sp, #104	; 0x68
 801645a:	e884 000c 	stmia.w	r4, {r2, r3}
 801645e:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8016462:	2800      	cmp	r0, #0
 8016464:	d03b      	beq.n	80164de <rcl_node_resolve_name+0x8e>
 8016466:	460c      	mov	r4, r1
 8016468:	4605      	mov	r5, r0
 801646a:	f7ff ffb7 	bl	80163dc <rcl_node_get_options>
 801646e:	2800      	cmp	r0, #0
 8016470:	d037      	beq.n	80164e2 <rcl_node_resolve_name+0x92>
 8016472:	4628      	mov	r0, r5
 8016474:	f7ff ffa2 	bl	80163bc <rcl_node_get_name>
 8016478:	4606      	mov	r6, r0
 801647a:	4628      	mov	r0, r5
 801647c:	f7ff ffa6 	bl	80163cc <rcl_node_get_namespace>
 8016480:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8016484:	4681      	mov	r9, r0
 8016486:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801648a:	ad0b      	add	r5, sp, #44	; 0x2c
 801648c:	46ac      	mov	ip, r5
 801648e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016492:	f8de 3000 	ldr.w	r3, [lr]
 8016496:	f8cc 3000 	str.w	r3, [ip]
 801649a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801649c:	b1fb      	cbz	r3, 80164de <rcl_node_resolve_name+0x8e>
 801649e:	468a      	mov	sl, r1
 80164a0:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 80164a4:	f000 fc28 	bl	8016cf8 <rcutils_get_zero_initialized_string_map>
 80164a8:	ab10      	add	r3, sp, #64	; 0x40
 80164aa:	9008      	str	r0, [sp, #32]
 80164ac:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80164b0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80164b4:	2100      	movs	r1, #0
 80164b6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80164ba:	a808      	add	r0, sp, #32
 80164bc:	f000 fc94 	bl	8016de8 <rcutils_string_map_init>
 80164c0:	4607      	mov	r7, r0
 80164c2:	b180      	cbz	r0, 80164e6 <rcl_node_resolve_name+0x96>
 80164c4:	f7f9 fec6 	bl	8010254 <rcutils_get_error_string>
 80164c8:	f7f9 feda 	bl	8010280 <rcutils_reset_error>
 80164cc:	2f0a      	cmp	r7, #10
 80164ce:	bf18      	it	ne
 80164d0:	2701      	movne	r7, #1
 80164d2:	4638      	mov	r0, r7
 80164d4:	b011      	add	sp, #68	; 0x44
 80164d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164da:	b002      	add	sp, #8
 80164dc:	4770      	bx	lr
 80164de:	270b      	movs	r7, #11
 80164e0:	e7f7      	b.n	80164d2 <rcl_node_resolve_name+0x82>
 80164e2:	2701      	movs	r7, #1
 80164e4:	e7f5      	b.n	80164d2 <rcl_node_resolve_name+0x82>
 80164e6:	9009      	str	r0, [sp, #36]	; 0x24
 80164e8:	9007      	str	r0, [sp, #28]
 80164ea:	a808      	add	r0, sp, #32
 80164ec:	f003 fc2a 	bl	8019d44 <rcl_get_default_topic_name_substitutions>
 80164f0:	4607      	mov	r7, r0
 80164f2:	b1a8      	cbz	r0, 8016520 <rcl_node_resolve_name+0xd0>
 80164f4:	280a      	cmp	r0, #10
 80164f6:	9c07      	ldr	r4, [sp, #28]
 80164f8:	d000      	beq.n	80164fc <rcl_node_resolve_name+0xac>
 80164fa:	2701      	movs	r7, #1
 80164fc:	a808      	add	r0, sp, #32
 80164fe:	f000 fcb3 	bl	8016e68 <rcutils_string_map_fini>
 8016502:	2800      	cmp	r0, #0
 8016504:	d13d      	bne.n	8016582 <rcl_node_resolve_name+0x132>
 8016506:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016508:	4659      	mov	r1, fp
 801650a:	47d0      	blx	sl
 801650c:	4659      	mov	r1, fp
 801650e:	4620      	mov	r0, r4
 8016510:	47d0      	blx	sl
 8016512:	f1b8 0f00 	cmp.w	r8, #0
 8016516:	d0dc      	beq.n	80164d2 <rcl_node_resolve_name+0x82>
 8016518:	2f67      	cmp	r7, #103	; 0x67
 801651a:	bf08      	it	eq
 801651c:	2768      	moveq	r7, #104	; 0x68
 801651e:	e7d8      	b.n	80164d2 <rcl_node_resolve_name+0x82>
 8016520:	ab09      	add	r3, sp, #36	; 0x24
 8016522:	9305      	str	r3, [sp, #20]
 8016524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016526:	46ec      	mov	ip, sp
 8016528:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801652c:	682b      	ldr	r3, [r5, #0]
 801652e:	f8cc 3000 	str.w	r3, [ip]
 8016532:	464a      	mov	r2, r9
 8016534:	4631      	mov	r1, r6
 8016536:	4620      	mov	r0, r4
 8016538:	ab08      	add	r3, sp, #32
 801653a:	f003 faa5 	bl	8019a88 <rcl_expand_topic_name>
 801653e:	4607      	mov	r7, r0
 8016540:	b9b8      	cbnz	r0, 8016572 <rcl_node_resolve_name+0x122>
 8016542:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016544:	9009      	str	r0, [sp, #36]	; 0x24
 8016546:	4602      	mov	r2, r0
 8016548:	a90a      	add	r1, sp, #40	; 0x28
 801654a:	4620      	mov	r0, r4
 801654c:	f000 fd74 	bl	8017038 <rmw_validate_full_topic_name>
 8016550:	b988      	cbnz	r0, 8016576 <rcl_node_resolve_name+0x126>
 8016552:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016554:	b9d5      	cbnz	r5, 801658c <rcl_node_resolve_name+0x13c>
 8016556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016558:	a808      	add	r0, sp, #32
 801655a:	601c      	str	r4, [r3, #0]
 801655c:	f000 fc84 	bl	8016e68 <rcutils_string_map_fini>
 8016560:	4607      	mov	r7, r0
 8016562:	b1a8      	cbz	r0, 8016590 <rcl_node_resolve_name+0x140>
 8016564:	f7f9 fe76 	bl	8010254 <rcutils_get_error_string>
 8016568:	462c      	mov	r4, r5
 801656a:	f7f9 fe89 	bl	8010280 <rcutils_reset_error>
 801656e:	2701      	movs	r7, #1
 8016570:	e7c9      	b.n	8016506 <rcl_node_resolve_name+0xb6>
 8016572:	9c07      	ldr	r4, [sp, #28]
 8016574:	e7c2      	b.n	80164fc <rcl_node_resolve_name+0xac>
 8016576:	f7f9 fe6d 	bl	8010254 <rcutils_get_error_string>
 801657a:	2701      	movs	r7, #1
 801657c:	f7f9 fe80 	bl	8010280 <rcutils_reset_error>
 8016580:	e7bc      	b.n	80164fc <rcl_node_resolve_name+0xac>
 8016582:	f7f9 fe67 	bl	8010254 <rcutils_get_error_string>
 8016586:	f7f9 fe7b 	bl	8010280 <rcutils_reset_error>
 801658a:	e7bc      	b.n	8016506 <rcl_node_resolve_name+0xb6>
 801658c:	2767      	movs	r7, #103	; 0x67
 801658e:	e7b5      	b.n	80164fc <rcl_node_resolve_name+0xac>
 8016590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016592:	4659      	mov	r1, fp
 8016594:	47d0      	blx	sl
 8016596:	4659      	mov	r1, fp
 8016598:	4638      	mov	r0, r7
 801659a:	47d0      	blx	sl
 801659c:	e799      	b.n	80164d2 <rcl_node_resolve_name+0x82>
 801659e:	bf00      	nop

080165a0 <exact_match_lookup>:
 80165a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165a2:	f102 0708 	add.w	r7, r2, #8
 80165a6:	460b      	mov	r3, r1
 80165a8:	4614      	mov	r4, r2
 80165aa:	4606      	mov	r6, r0
 80165ac:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80165b0:	b085      	sub	sp, #20
 80165b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80165b6:	4618      	mov	r0, r3
 80165b8:	4919      	ldr	r1, [pc, #100]	; (8016620 <exact_match_lookup+0x80>)
 80165ba:	e894 000c 	ldmia.w	r4, {r2, r3}
 80165be:	f000 fa35 	bl	8016a2c <rcutils_join_path>
 80165c2:	7833      	ldrb	r3, [r6, #0]
 80165c4:	2b2f      	cmp	r3, #47	; 0x2f
 80165c6:	4605      	mov	r5, r0
 80165c8:	d023      	beq.n	8016612 <exact_match_lookup+0x72>
 80165ca:	f104 030c 	add.w	r3, r4, #12
 80165ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80165d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80165d6:	1c70      	adds	r0, r6, #1
 80165d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80165dc:	f000 fa2c 	bl	8016a38 <rcutils_to_native_path>
 80165e0:	4606      	mov	r6, r0
 80165e2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80165e6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80165ea:	4631      	mov	r1, r6
 80165ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80165f0:	4628      	mov	r0, r5
 80165f2:	f000 fa1b 	bl	8016a2c <rcutils_join_path>
 80165f6:	6862      	ldr	r2, [r4, #4]
 80165f8:	6921      	ldr	r1, [r4, #16]
 80165fa:	4603      	mov	r3, r0
 80165fc:	4630      	mov	r0, r6
 80165fe:	461e      	mov	r6, r3
 8016600:	4790      	blx	r2
 8016602:	4628      	mov	r0, r5
 8016604:	6863      	ldr	r3, [r4, #4]
 8016606:	6921      	ldr	r1, [r4, #16]
 8016608:	4798      	blx	r3
 801660a:	4635      	mov	r5, r6
 801660c:	4628      	mov	r0, r5
 801660e:	b005      	add	sp, #20
 8016610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016612:	7873      	ldrb	r3, [r6, #1]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d1d8      	bne.n	80165ca <exact_match_lookup+0x2a>
 8016618:	4628      	mov	r0, r5
 801661a:	b005      	add	sp, #20
 801661c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801661e:	bf00      	nop
 8016620:	0801c6c8 	.word	0x0801c6c8

08016624 <rcl_get_secure_root>:
 8016624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016628:	b085      	sub	sp, #20
 801662a:	b168      	cbz	r0, 8016648 <rcl_get_secure_root+0x24>
 801662c:	4607      	mov	r7, r0
 801662e:	4608      	mov	r0, r1
 8016630:	460c      	mov	r4, r1
 8016632:	f7f9 fe01 	bl	8010238 <rcutils_allocator_is_valid>
 8016636:	b138      	cbz	r0, 8016648 <rcl_get_secure_root+0x24>
 8016638:	2300      	movs	r3, #0
 801663a:	482d      	ldr	r0, [pc, #180]	; (80166f0 <rcl_get_secure_root+0xcc>)
 801663c:	9303      	str	r3, [sp, #12]
 801663e:	a903      	add	r1, sp, #12
 8016640:	f000 f9da 	bl	80169f8 <rcutils_get_env>
 8016644:	4605      	mov	r5, r0
 8016646:	b120      	cbz	r0, 8016652 <rcl_get_secure_root+0x2e>
 8016648:	2500      	movs	r5, #0
 801664a:	4628      	mov	r0, r5
 801664c:	b005      	add	sp, #20
 801664e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016652:	9b03      	ldr	r3, [sp, #12]
 8016654:	781a      	ldrb	r2, [r3, #0]
 8016656:	2a00      	cmp	r2, #0
 8016658:	d0f6      	beq.n	8016648 <rcl_get_secure_root+0x24>
 801665a:	f104 090c 	add.w	r9, r4, #12
 801665e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016662:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016666:	4618      	mov	r0, r3
 8016668:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801666c:	f000 fb06 	bl	8016c7c <rcutils_strdup>
 8016670:	4680      	mov	r8, r0
 8016672:	2800      	cmp	r0, #0
 8016674:	d0e8      	beq.n	8016648 <rcl_get_secure_root+0x24>
 8016676:	481f      	ldr	r0, [pc, #124]	; (80166f4 <rcl_get_secure_root+0xd0>)
 8016678:	9503      	str	r5, [sp, #12]
 801667a:	a903      	add	r1, sp, #12
 801667c:	f000 f9bc 	bl	80169f8 <rcutils_get_env>
 8016680:	b160      	cbz	r0, 801669c <rcl_get_secure_root+0x78>
 8016682:	2600      	movs	r6, #0
 8016684:	6863      	ldr	r3, [r4, #4]
 8016686:	6921      	ldr	r1, [r4, #16]
 8016688:	4630      	mov	r0, r6
 801668a:	4798      	blx	r3
 801668c:	4640      	mov	r0, r8
 801668e:	6863      	ldr	r3, [r4, #4]
 8016690:	6921      	ldr	r1, [r4, #16]
 8016692:	4798      	blx	r3
 8016694:	4628      	mov	r0, r5
 8016696:	b005      	add	sp, #20
 8016698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801669c:	9b03      	ldr	r3, [sp, #12]
 801669e:	781e      	ldrb	r6, [r3, #0]
 80166a0:	b1f6      	cbz	r6, 80166e0 <rcl_get_secure_root+0xbc>
 80166a2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80166a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80166aa:	4618      	mov	r0, r3
 80166ac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80166b0:	f000 fae4 	bl	8016c7c <rcutils_strdup>
 80166b4:	4606      	mov	r6, r0
 80166b6:	2800      	cmp	r0, #0
 80166b8:	d0e3      	beq.n	8016682 <rcl_get_secure_root+0x5e>
 80166ba:	4622      	mov	r2, r4
 80166bc:	4641      	mov	r1, r8
 80166be:	f7ff ff6f 	bl	80165a0 <exact_match_lookup>
 80166c2:	4605      	mov	r5, r0
 80166c4:	2d00      	cmp	r5, #0
 80166c6:	d0dd      	beq.n	8016684 <rcl_get_secure_root+0x60>
 80166c8:	4628      	mov	r0, r5
 80166ca:	f000 f9ad 	bl	8016a28 <rcutils_is_directory>
 80166ce:	4603      	mov	r3, r0
 80166d0:	2800      	cmp	r0, #0
 80166d2:	d1d7      	bne.n	8016684 <rcl_get_secure_root+0x60>
 80166d4:	4628      	mov	r0, r5
 80166d6:	6921      	ldr	r1, [r4, #16]
 80166d8:	461d      	mov	r5, r3
 80166da:	6863      	ldr	r3, [r4, #4]
 80166dc:	4798      	blx	r3
 80166de:	e7d1      	b.n	8016684 <rcl_get_secure_root+0x60>
 80166e0:	4622      	mov	r2, r4
 80166e2:	4638      	mov	r0, r7
 80166e4:	4641      	mov	r1, r8
 80166e6:	f7ff ff5b 	bl	80165a0 <exact_match_lookup>
 80166ea:	4605      	mov	r5, r0
 80166ec:	e7ea      	b.n	80166c4 <rcl_get_secure_root+0xa0>
 80166ee:	bf00      	nop
 80166f0:	0801c6d4 	.word	0x0801c6d4
 80166f4:	0801c6ec 	.word	0x0801c6ec

080166f8 <rcl_get_security_options_from_environment>:
 80166f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166fc:	b082      	sub	sp, #8
 80166fe:	2300      	movs	r3, #0
 8016700:	4606      	mov	r6, r0
 8016702:	460f      	mov	r7, r1
 8016704:	4820      	ldr	r0, [pc, #128]	; (8016788 <rcl_get_security_options_from_environment+0x90>)
 8016706:	9301      	str	r3, [sp, #4]
 8016708:	a901      	add	r1, sp, #4
 801670a:	4690      	mov	r8, r2
 801670c:	f000 f974 	bl	80169f8 <rcutils_get_env>
 8016710:	b120      	cbz	r0, 801671c <rcl_get_security_options_from_environment+0x24>
 8016712:	2501      	movs	r5, #1
 8016714:	4628      	mov	r0, r5
 8016716:	b002      	add	sp, #8
 8016718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801671c:	491b      	ldr	r1, [pc, #108]	; (801678c <rcl_get_security_options_from_environment+0x94>)
 801671e:	4604      	mov	r4, r0
 8016720:	9801      	ldr	r0, [sp, #4]
 8016722:	f7e9 fd55 	bl	80001d0 <strcmp>
 8016726:	4605      	mov	r5, r0
 8016728:	b9e8      	cbnz	r0, 8016766 <rcl_get_security_options_from_environment+0x6e>
 801672a:	9001      	str	r0, [sp, #4]
 801672c:	f1b8 0f00 	cmp.w	r8, #0
 8016730:	d020      	beq.n	8016774 <rcl_get_security_options_from_environment+0x7c>
 8016732:	4817      	ldr	r0, [pc, #92]	; (8016790 <rcl_get_security_options_from_environment+0x98>)
 8016734:	a901      	add	r1, sp, #4
 8016736:	f000 f95f 	bl	80169f8 <rcutils_get_env>
 801673a:	2800      	cmp	r0, #0
 801673c:	d1e9      	bne.n	8016712 <rcl_get_security_options_from_environment+0x1a>
 801673e:	4915      	ldr	r1, [pc, #84]	; (8016794 <rcl_get_security_options_from_environment+0x9c>)
 8016740:	9801      	ldr	r0, [sp, #4]
 8016742:	f7e9 fd45 	bl	80001d0 <strcmp>
 8016746:	fab0 f080 	clz	r0, r0
 801674a:	0940      	lsrs	r0, r0, #5
 801674c:	f888 0000 	strb.w	r0, [r8]
 8016750:	4639      	mov	r1, r7
 8016752:	4630      	mov	r0, r6
 8016754:	f7ff ff66 	bl	8016624 <rcl_get_secure_root>
 8016758:	b170      	cbz	r0, 8016778 <rcl_get_security_options_from_environment+0x80>
 801675a:	f8c8 0004 	str.w	r0, [r8, #4]
 801675e:	4628      	mov	r0, r5
 8016760:	b002      	add	sp, #8
 8016762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016766:	4625      	mov	r5, r4
 8016768:	4628      	mov	r0, r5
 801676a:	f888 4000 	strb.w	r4, [r8]
 801676e:	b002      	add	sp, #8
 8016770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016774:	250b      	movs	r5, #11
 8016776:	e7cd      	b.n	8016714 <rcl_get_security_options_from_environment+0x1c>
 8016778:	f898 5000 	ldrb.w	r5, [r8]
 801677c:	f1a5 0501 	sub.w	r5, r5, #1
 8016780:	fab5 f585 	clz	r5, r5
 8016784:	096d      	lsrs	r5, r5, #5
 8016786:	e7c5      	b.n	8016714 <rcl_get_security_options_from_environment+0x1c>
 8016788:	0801c68c 	.word	0x0801c68c
 801678c:	0801c6a0 	.word	0x0801c6a0
 8016790:	0801c6a8 	.word	0x0801c6a8
 8016794:	0801c6c0 	.word	0x0801c6c0

08016798 <rcl_get_system_time>:
 8016798:	4608      	mov	r0, r1
 801679a:	f000 bbd9 	b.w	8016f50 <rcutils_system_time_now>
 801679e:	bf00      	nop

080167a0 <rcl_get_steady_time>:
 80167a0:	4608      	mov	r0, r1
 80167a2:	f000 bbfd 	b.w	8016fa0 <rcutils_steady_time_now>
 80167a6:	bf00      	nop

080167a8 <rcl_get_ros_time>:
 80167a8:	7a03      	ldrb	r3, [r0, #8]
 80167aa:	b510      	push	{r4, lr}
 80167ac:	460c      	mov	r4, r1
 80167ae:	b133      	cbz	r3, 80167be <rcl_get_ros_time+0x16>
 80167b0:	2105      	movs	r1, #5
 80167b2:	f000 f8eb 	bl	801698c <__atomic_load_8>
 80167b6:	e9c4 0100 	strd	r0, r1, [r4]
 80167ba:	2000      	movs	r0, #0
 80167bc:	bd10      	pop	{r4, pc}
 80167be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167c2:	4608      	mov	r0, r1
 80167c4:	f000 bbc4 	b.w	8016f50 <rcutils_system_time_now>

080167c8 <rcl_clock_init>:
 80167c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ca:	4605      	mov	r5, r0
 80167cc:	4610      	mov	r0, r2
 80167ce:	4614      	mov	r4, r2
 80167d0:	460e      	mov	r6, r1
 80167d2:	f7f9 fd31 	bl	8010238 <rcutils_allocator_is_valid>
 80167d6:	b128      	cbz	r0, 80167e4 <rcl_clock_init+0x1c>
 80167d8:	2d03      	cmp	r5, #3
 80167da:	d803      	bhi.n	80167e4 <rcl_clock_init+0x1c>
 80167dc:	e8df f005 	tbb	[pc, r5]
 80167e0:	06532e1d 	.word	0x06532e1d
 80167e4:	f04f 0c0b 	mov.w	ip, #11
 80167e8:	4660      	mov	r0, ip
 80167ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167ec:	2e00      	cmp	r6, #0
 80167ee:	d0f9      	beq.n	80167e4 <rcl_clock_init+0x1c>
 80167f0:	2c00      	cmp	r4, #0
 80167f2:	d0f7      	beq.n	80167e4 <rcl_clock_init+0x1c>
 80167f4:	2300      	movs	r3, #0
 80167f6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80167fa:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 80168b0 <rcl_clock_init+0xe8>
 80167fe:	6133      	str	r3, [r6, #16]
 8016800:	f106 0514 	add.w	r5, r6, #20
 8016804:	469c      	mov	ip, r3
 8016806:	2703      	movs	r7, #3
 8016808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801680a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801680c:	6823      	ldr	r3, [r4, #0]
 801680e:	602b      	str	r3, [r5, #0]
 8016810:	7037      	strb	r7, [r6, #0]
 8016812:	f8c6 e00c 	str.w	lr, [r6, #12]
 8016816:	4660      	mov	r0, ip
 8016818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801681a:	2e00      	cmp	r6, #0
 801681c:	d0e2      	beq.n	80167e4 <rcl_clock_init+0x1c>
 801681e:	2300      	movs	r3, #0
 8016820:	7033      	strb	r3, [r6, #0]
 8016822:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016826:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801682a:	469c      	mov	ip, r3
 801682c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801682e:	f106 0514 	add.w	r5, r6, #20
 8016832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016834:	6823      	ldr	r3, [r4, #0]
 8016836:	602b      	str	r3, [r5, #0]
 8016838:	4660      	mov	r0, ip
 801683a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801683c:	2e00      	cmp	r6, #0
 801683e:	d0d1      	beq.n	80167e4 <rcl_clock_init+0x1c>
 8016840:	2c00      	cmp	r4, #0
 8016842:	d0cf      	beq.n	80167e4 <rcl_clock_init+0x1c>
 8016844:	2700      	movs	r7, #0
 8016846:	7037      	strb	r7, [r6, #0]
 8016848:	46a4      	mov	ip, r4
 801684a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801684e:	f106 0514 	add.w	r5, r6, #20
 8016852:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8016856:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801685a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801685c:	f8dc 3000 	ldr.w	r3, [ip]
 8016860:	602b      	str	r3, [r5, #0]
 8016862:	6921      	ldr	r1, [r4, #16]
 8016864:	6823      	ldr	r3, [r4, #0]
 8016866:	2010      	movs	r0, #16
 8016868:	4798      	blx	r3
 801686a:	6130      	str	r0, [r6, #16]
 801686c:	b1d0      	cbz	r0, 80168a4 <rcl_clock_init+0xdc>
 801686e:	2200      	movs	r2, #0
 8016870:	2300      	movs	r3, #0
 8016872:	e9c0 2300 	strd	r2, r3, [r0]
 8016876:	2301      	movs	r3, #1
 8016878:	7207      	strb	r7, [r0, #8]
 801687a:	4a0c      	ldr	r2, [pc, #48]	; (80168ac <rcl_clock_init+0xe4>)
 801687c:	7033      	strb	r3, [r6, #0]
 801687e:	46bc      	mov	ip, r7
 8016880:	60f2      	str	r2, [r6, #12]
 8016882:	4660      	mov	r0, ip
 8016884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016886:	2e00      	cmp	r6, #0
 8016888:	d0ac      	beq.n	80167e4 <rcl_clock_init+0x1c>
 801688a:	2c00      	cmp	r4, #0
 801688c:	d0aa      	beq.n	80167e4 <rcl_clock_init+0x1c>
 801688e:	2300      	movs	r3, #0
 8016890:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016894:	f8df e01c 	ldr.w	lr, [pc, #28]	; 80168b4 <rcl_clock_init+0xec>
 8016898:	6133      	str	r3, [r6, #16]
 801689a:	f106 0514 	add.w	r5, r6, #20
 801689e:	469c      	mov	ip, r3
 80168a0:	2702      	movs	r7, #2
 80168a2:	e7b1      	b.n	8016808 <rcl_clock_init+0x40>
 80168a4:	f04f 0c0a 	mov.w	ip, #10
 80168a8:	e79e      	b.n	80167e8 <rcl_clock_init+0x20>
 80168aa:	bf00      	nop
 80168ac:	080167a9 	.word	0x080167a9
 80168b0:	080167a1 	.word	0x080167a1
 80168b4:	08016799 	.word	0x08016799

080168b8 <rcl_validate_enclave_name_with_size>:
 80168b8:	b378      	cbz	r0, 801691a <rcl_validate_enclave_name_with_size+0x62>
 80168ba:	b570      	push	{r4, r5, r6, lr}
 80168bc:	4615      	mov	r5, r2
 80168be:	b0c2      	sub	sp, #264	; 0x108
 80168c0:	b302      	cbz	r2, 8016904 <rcl_validate_enclave_name_with_size+0x4c>
 80168c2:	461e      	mov	r6, r3
 80168c4:	466a      	mov	r2, sp
 80168c6:	ab01      	add	r3, sp, #4
 80168c8:	460c      	mov	r4, r1
 80168ca:	f000 fc2b 	bl	8017124 <rmw_validate_namespace_with_size>
 80168ce:	4684      	mov	ip, r0
 80168d0:	b9e8      	cbnz	r0, 801690e <rcl_validate_enclave_name_with_size+0x56>
 80168d2:	9b00      	ldr	r3, [sp, #0]
 80168d4:	b923      	cbnz	r3, 80168e0 <rcl_validate_enclave_name_with_size+0x28>
 80168d6:	2300      	movs	r3, #0
 80168d8:	602b      	str	r3, [r5, #0]
 80168da:	4660      	mov	r0, ip
 80168dc:	b042      	add	sp, #264	; 0x108
 80168de:	bd70      	pop	{r4, r5, r6, pc}
 80168e0:	2b07      	cmp	r3, #7
 80168e2:	d007      	beq.n	80168f4 <rcl_validate_enclave_name_with_size+0x3c>
 80168e4:	1e5a      	subs	r2, r3, #1
 80168e6:	2a05      	cmp	r2, #5
 80168e8:	d833      	bhi.n	8016952 <rcl_validate_enclave_name_with_size+0x9a>
 80168ea:	e8df f002 	tbb	[pc, r2]
 80168ee:	2c2f      	.short	0x2c2f
 80168f0:	1a232629 	.word	0x1a232629
 80168f4:	2cff      	cmp	r4, #255	; 0xff
 80168f6:	d9ee      	bls.n	80168d6 <rcl_validate_enclave_name_with_size+0x1e>
 80168f8:	602b      	str	r3, [r5, #0]
 80168fa:	2e00      	cmp	r6, #0
 80168fc:	d0ed      	beq.n	80168da <rcl_validate_enclave_name_with_size+0x22>
 80168fe:	23fe      	movs	r3, #254	; 0xfe
 8016900:	6033      	str	r3, [r6, #0]
 8016902:	e7ea      	b.n	80168da <rcl_validate_enclave_name_with_size+0x22>
 8016904:	f04f 0c0b 	mov.w	ip, #11
 8016908:	4660      	mov	r0, ip
 801690a:	b042      	add	sp, #264	; 0x108
 801690c:	bd70      	pop	{r4, r5, r6, pc}
 801690e:	f7ff f953 	bl	8015bb8 <rcl_convert_rmw_ret_to_rcl_ret>
 8016912:	4684      	mov	ip, r0
 8016914:	4660      	mov	r0, ip
 8016916:	b042      	add	sp, #264	; 0x108
 8016918:	bd70      	pop	{r4, r5, r6, pc}
 801691a:	f04f 0c0b 	mov.w	ip, #11
 801691e:	4660      	mov	r0, ip
 8016920:	4770      	bx	lr
 8016922:	2306      	movs	r3, #6
 8016924:	602b      	str	r3, [r5, #0]
 8016926:	2e00      	cmp	r6, #0
 8016928:	d0d7      	beq.n	80168da <rcl_validate_enclave_name_with_size+0x22>
 801692a:	9b01      	ldr	r3, [sp, #4]
 801692c:	6033      	str	r3, [r6, #0]
 801692e:	4660      	mov	r0, ip
 8016930:	b042      	add	sp, #264	; 0x108
 8016932:	bd70      	pop	{r4, r5, r6, pc}
 8016934:	2305      	movs	r3, #5
 8016936:	602b      	str	r3, [r5, #0]
 8016938:	e7f5      	b.n	8016926 <rcl_validate_enclave_name_with_size+0x6e>
 801693a:	2304      	movs	r3, #4
 801693c:	602b      	str	r3, [r5, #0]
 801693e:	e7f2      	b.n	8016926 <rcl_validate_enclave_name_with_size+0x6e>
 8016940:	2303      	movs	r3, #3
 8016942:	602b      	str	r3, [r5, #0]
 8016944:	e7ef      	b.n	8016926 <rcl_validate_enclave_name_with_size+0x6e>
 8016946:	2302      	movs	r3, #2
 8016948:	602b      	str	r3, [r5, #0]
 801694a:	e7ec      	b.n	8016926 <rcl_validate_enclave_name_with_size+0x6e>
 801694c:	2301      	movs	r3, #1
 801694e:	602b      	str	r3, [r5, #0]
 8016950:	e7e9      	b.n	8016926 <rcl_validate_enclave_name_with_size+0x6e>
 8016952:	4a04      	ldr	r2, [pc, #16]	; (8016964 <rcl_validate_enclave_name_with_size+0xac>)
 8016954:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016958:	a802      	add	r0, sp, #8
 801695a:	f000 f963 	bl	8016c24 <rcutils_snprintf>
 801695e:	f04f 0c01 	mov.w	ip, #1
 8016962:	e7ba      	b.n	80168da <rcl_validate_enclave_name_with_size+0x22>
 8016964:	0801c70c 	.word	0x0801c70c

08016968 <rcl_validate_enclave_name>:
 8016968:	b168      	cbz	r0, 8016986 <rcl_validate_enclave_name+0x1e>
 801696a:	b570      	push	{r4, r5, r6, lr}
 801696c:	460d      	mov	r5, r1
 801696e:	4616      	mov	r6, r2
 8016970:	4604      	mov	r4, r0
 8016972:	f7e9 fc37 	bl	80001e4 <strlen>
 8016976:	4633      	mov	r3, r6
 8016978:	4601      	mov	r1, r0
 801697a:	462a      	mov	r2, r5
 801697c:	4620      	mov	r0, r4
 801697e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016982:	f7ff bf99 	b.w	80168b8 <rcl_validate_enclave_name_with_size>
 8016986:	200b      	movs	r0, #11
 8016988:	4770      	bx	lr
 801698a:	bf00      	nop

0801698c <__atomic_load_8>:
 801698c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016990:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8016994:	4a15      	ldr	r2, [pc, #84]	; (80169ec <__atomic_load_8+0x60>)
 8016996:	4b16      	ldr	r3, [pc, #88]	; (80169f0 <__atomic_load_8+0x64>)
 8016998:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801699c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80169a0:	fb02 f101 	mul.w	r1, r2, r1
 80169a4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80169a8:	fba3 2301 	umull	r2, r3, r3, r1
 80169ac:	091b      	lsrs	r3, r3, #4
 80169ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80169b2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80169b6:	b4d0      	push	{r4, r6, r7}
 80169b8:	4c0e      	ldr	r4, [pc, #56]	; (80169f4 <__atomic_load_8+0x68>)
 80169ba:	1ac9      	subs	r1, r1, r3
 80169bc:	1862      	adds	r2, r4, r1
 80169be:	f04f 0c01 	mov.w	ip, #1
 80169c2:	e8d2 3f4f 	ldrexb	r3, [r2]
 80169c6:	e8c2 cf46 	strexb	r6, ip, [r2]
 80169ca:	2e00      	cmp	r6, #0
 80169cc:	d1f9      	bne.n	80169c2 <__atomic_load_8+0x36>
 80169ce:	f3bf 8f5b 	dmb	ish
 80169d2:	b2db      	uxtb	r3, r3
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d1f4      	bne.n	80169c2 <__atomic_load_8+0x36>
 80169d8:	e9d0 6700 	ldrd	r6, r7, [r0]
 80169dc:	f3bf 8f5b 	dmb	ish
 80169e0:	5463      	strb	r3, [r4, r1]
 80169e2:	4630      	mov	r0, r6
 80169e4:	4639      	mov	r1, r7
 80169e6:	bcd0      	pop	{r4, r6, r7}
 80169e8:	4770      	bx	lr
 80169ea:	bf00      	nop
 80169ec:	27d4eb2d 	.word	0x27d4eb2d
 80169f0:	b21642c9 	.word	0xb21642c9
 80169f4:	2001c848 	.word	0x2001c848

080169f8 <rcutils_get_env>:
 80169f8:	b168      	cbz	r0, 8016a16 <rcutils_get_env+0x1e>
 80169fa:	b510      	push	{r4, lr}
 80169fc:	460c      	mov	r4, r1
 80169fe:	b129      	cbz	r1, 8016a0c <rcutils_get_env+0x14>
 8016a00:	f003 fe5c 	bl	801a6bc <getenv>
 8016a04:	b120      	cbz	r0, 8016a10 <rcutils_get_env+0x18>
 8016a06:	6020      	str	r0, [r4, #0]
 8016a08:	2000      	movs	r0, #0
 8016a0a:	bd10      	pop	{r4, pc}
 8016a0c:	4803      	ldr	r0, [pc, #12]	; (8016a1c <rcutils_get_env+0x24>)
 8016a0e:	bd10      	pop	{r4, pc}
 8016a10:	4b03      	ldr	r3, [pc, #12]	; (8016a20 <rcutils_get_env+0x28>)
 8016a12:	6023      	str	r3, [r4, #0]
 8016a14:	bd10      	pop	{r4, pc}
 8016a16:	4803      	ldr	r0, [pc, #12]	; (8016a24 <rcutils_get_env+0x2c>)
 8016a18:	4770      	bx	lr
 8016a1a:	bf00      	nop
 8016a1c:	0801c788 	.word	0x0801c788
 8016a20:	0801cd78 	.word	0x0801cd78
 8016a24:	0801c76c 	.word	0x0801c76c

08016a28 <rcutils_is_directory>:
 8016a28:	2000      	movs	r0, #0
 8016a2a:	4770      	bx	lr

08016a2c <rcutils_join_path>:
 8016a2c:	b082      	sub	sp, #8
 8016a2e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016a32:	2000      	movs	r0, #0
 8016a34:	b002      	add	sp, #8
 8016a36:	4770      	bx	lr

08016a38 <rcutils_to_native_path>:
 8016a38:	b084      	sub	sp, #16
 8016a3a:	a801      	add	r0, sp, #4
 8016a3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016a40:	b004      	add	sp, #16
 8016a42:	2000      	movs	r0, #0
 8016a44:	4770      	bx	lr
 8016a46:	bf00      	nop

08016a48 <rcutils_format_string_limit>:
 8016a48:	b40f      	push	{r0, r1, r2, r3}
 8016a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a4c:	b083      	sub	sp, #12
 8016a4e:	ac08      	add	r4, sp, #32
 8016a50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016a52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016a56:	b34e      	cbz	r6, 8016aac <rcutils_format_string_limit+0x64>
 8016a58:	a808      	add	r0, sp, #32
 8016a5a:	f7f9 fbed 	bl	8010238 <rcutils_allocator_is_valid>
 8016a5e:	b328      	cbz	r0, 8016aac <rcutils_format_string_limit+0x64>
 8016a60:	2100      	movs	r1, #0
 8016a62:	ab0f      	add	r3, sp, #60	; 0x3c
 8016a64:	4632      	mov	r2, r6
 8016a66:	4608      	mov	r0, r1
 8016a68:	e9cd 3300 	strd	r3, r3, [sp]
 8016a6c:	f000 f8f4 	bl	8016c58 <rcutils_vsnprintf>
 8016a70:	1c43      	adds	r3, r0, #1
 8016a72:	4605      	mov	r5, r0
 8016a74:	d01a      	beq.n	8016aac <rcutils_format_string_limit+0x64>
 8016a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016a7a:	1c47      	adds	r7, r0, #1
 8016a7c:	429f      	cmp	r7, r3
 8016a7e:	bf84      	itt	hi
 8016a80:	461f      	movhi	r7, r3
 8016a82:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8016a86:	4638      	mov	r0, r7
 8016a88:	9b08      	ldr	r3, [sp, #32]
 8016a8a:	4798      	blx	r3
 8016a8c:	4604      	mov	r4, r0
 8016a8e:	b168      	cbz	r0, 8016aac <rcutils_format_string_limit+0x64>
 8016a90:	9b01      	ldr	r3, [sp, #4]
 8016a92:	4632      	mov	r2, r6
 8016a94:	4639      	mov	r1, r7
 8016a96:	f000 f8df 	bl	8016c58 <rcutils_vsnprintf>
 8016a9a:	2800      	cmp	r0, #0
 8016a9c:	db02      	blt.n	8016aa4 <rcutils_format_string_limit+0x5c>
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	5563      	strb	r3, [r4, r5]
 8016aa2:	e004      	b.n	8016aae <rcutils_format_string_limit+0x66>
 8016aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016aa6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016aa8:	4620      	mov	r0, r4
 8016aaa:	4798      	blx	r3
 8016aac:	2400      	movs	r4, #0
 8016aae:	4620      	mov	r0, r4
 8016ab0:	b003      	add	sp, #12
 8016ab2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016ab6:	b004      	add	sp, #16
 8016ab8:	4770      	bx	lr
 8016aba:	bf00      	nop

08016abc <rcutils_repl_str>:
 8016abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac0:	ed2d 8b02 	vpush	{d8}
 8016ac4:	b087      	sub	sp, #28
 8016ac6:	4680      	mov	r8, r0
 8016ac8:	4608      	mov	r0, r1
 8016aca:	f8cd 8004 	str.w	r8, [sp, #4]
 8016ace:	ee08 2a10 	vmov	s16, r2
 8016ad2:	468a      	mov	sl, r1
 8016ad4:	4699      	mov	r9, r3
 8016ad6:	f7e9 fb85 	bl	80001e4 <strlen>
 8016ada:	2600      	movs	r6, #0
 8016adc:	4647      	mov	r7, r8
 8016ade:	9002      	str	r0, [sp, #8]
 8016ae0:	46b3      	mov	fp, r6
 8016ae2:	2510      	movs	r5, #16
 8016ae4:	46b0      	mov	r8, r6
 8016ae6:	e01d      	b.n	8016b24 <rcutils_repl_str+0x68>
 8016ae8:	f10b 0b01 	add.w	fp, fp, #1
 8016aec:	455e      	cmp	r6, fp
 8016aee:	d211      	bcs.n	8016b14 <rcutils_repl_str+0x58>
 8016af0:	442e      	add	r6, r5
 8016af2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016af6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016afa:	00b1      	lsls	r1, r6, #2
 8016afc:	4798      	blx	r3
 8016afe:	2800      	cmp	r0, #0
 8016b00:	f000 8088 	beq.w	8016c14 <rcutils_repl_str+0x158>
 8016b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b08:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8016b0c:	4680      	mov	r8, r0
 8016b0e:	bf28      	it	cs
 8016b10:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8016b14:	9a01      	ldr	r2, [sp, #4]
 8016b16:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016b1a:	1aa2      	subs	r2, r4, r2
 8016b1c:	f843 2c04 	str.w	r2, [r3, #-4]
 8016b20:	9b02      	ldr	r3, [sp, #8]
 8016b22:	18e7      	adds	r7, r4, r3
 8016b24:	4651      	mov	r1, sl
 8016b26:	4638      	mov	r0, r7
 8016b28:	f004 f8fa 	bl	801ad20 <strstr>
 8016b2c:	4604      	mov	r4, r0
 8016b2e:	4640      	mov	r0, r8
 8016b30:	2c00      	cmp	r4, #0
 8016b32:	d1d9      	bne.n	8016ae8 <rcutils_repl_str+0x2c>
 8016b34:	46b8      	mov	r8, r7
 8016b36:	4607      	mov	r7, r0
 8016b38:	4640      	mov	r0, r8
 8016b3a:	f7e9 fb53 	bl	80001e4 <strlen>
 8016b3e:	9b01      	ldr	r3, [sp, #4]
 8016b40:	eba8 0303 	sub.w	r3, r8, r3
 8016b44:	181c      	adds	r4, r3, r0
 8016b46:	9404      	str	r4, [sp, #16]
 8016b48:	f1bb 0f00 	cmp.w	fp, #0
 8016b4c:	d04a      	beq.n	8016be4 <rcutils_repl_str+0x128>
 8016b4e:	ee18 0a10 	vmov	r0, s16
 8016b52:	f7e9 fb47 	bl	80001e4 <strlen>
 8016b56:	9b02      	ldr	r3, [sp, #8]
 8016b58:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016b5c:	1ac3      	subs	r3, r0, r3
 8016b5e:	fb0b 4303 	mla	r3, fp, r3, r4
 8016b62:	461a      	mov	r2, r3
 8016b64:	9305      	str	r3, [sp, #20]
 8016b66:	4606      	mov	r6, r0
 8016b68:	f8d9 3000 	ldr.w	r3, [r9]
 8016b6c:	1c50      	adds	r0, r2, #1
 8016b6e:	4798      	blx	r3
 8016b70:	9003      	str	r0, [sp, #12]
 8016b72:	2800      	cmp	r0, #0
 8016b74:	d04f      	beq.n	8016c16 <rcutils_repl_str+0x15a>
 8016b76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016b7a:	683a      	ldr	r2, [r7, #0]
 8016b7c:	4641      	mov	r1, r8
 8016b7e:	f003 fe1d 	bl	801a7bc <memcpy>
 8016b82:	683d      	ldr	r5, [r7, #0]
 8016b84:	9b03      	ldr	r3, [sp, #12]
 8016b86:	9701      	str	r7, [sp, #4]
 8016b88:	46ba      	mov	sl, r7
 8016b8a:	441d      	add	r5, r3
 8016b8c:	9f02      	ldr	r7, [sp, #8]
 8016b8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016b92:	2401      	movs	r4, #1
 8016b94:	46d1      	mov	r9, sl
 8016b96:	ee18 aa10 	vmov	sl, s16
 8016b9a:	e00a      	b.n	8016bb2 <rcutils_repl_str+0xf6>
 8016b9c:	f8d9 5000 	ldr.w	r5, [r9]
 8016ba0:	1aaa      	subs	r2, r5, r2
 8016ba2:	1885      	adds	r5, r0, r2
 8016ba4:	f003 fe0a 	bl	801a7bc <memcpy>
 8016ba8:	45a3      	cmp	fp, r4
 8016baa:	f104 0201 	add.w	r2, r4, #1
 8016bae:	d935      	bls.n	8016c1c <rcutils_repl_str+0x160>
 8016bb0:	4614      	mov	r4, r2
 8016bb2:	4632      	mov	r2, r6
 8016bb4:	4651      	mov	r1, sl
 8016bb6:	4628      	mov	r0, r5
 8016bb8:	f003 fe00 	bl	801a7bc <memcpy>
 8016bbc:	f859 2b04 	ldr.w	r2, [r9], #4
 8016bc0:	45a3      	cmp	fp, r4
 8016bc2:	443a      	add	r2, r7
 8016bc4:	eb05 0006 	add.w	r0, r5, r6
 8016bc8:	eb08 0102 	add.w	r1, r8, r2
 8016bcc:	d1e6      	bne.n	8016b9c <rcutils_repl_str+0xe0>
 8016bce:	9b04      	ldr	r3, [sp, #16]
 8016bd0:	1a9a      	subs	r2, r3, r2
 8016bd2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016bd6:	f003 fdf1 	bl	801a7bc <memcpy>
 8016bda:	9a03      	ldr	r2, [sp, #12]
 8016bdc:	9905      	ldr	r1, [sp, #20]
 8016bde:	2300      	movs	r3, #0
 8016be0:	5453      	strb	r3, [r2, r1]
 8016be2:	e00b      	b.n	8016bfc <rcutils_repl_str+0x140>
 8016be4:	4620      	mov	r0, r4
 8016be6:	f8d9 3000 	ldr.w	r3, [r9]
 8016bea:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016bee:	3001      	adds	r0, #1
 8016bf0:	4798      	blx	r3
 8016bf2:	9003      	str	r0, [sp, #12]
 8016bf4:	b110      	cbz	r0, 8016bfc <rcutils_repl_str+0x140>
 8016bf6:	9901      	ldr	r1, [sp, #4]
 8016bf8:	f004 f876 	bl	801ace8 <strcpy>
 8016bfc:	4638      	mov	r0, r7
 8016bfe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016c02:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016c06:	4798      	blx	r3
 8016c08:	9803      	ldr	r0, [sp, #12]
 8016c0a:	b007      	add	sp, #28
 8016c0c:	ecbd 8b02 	vpop	{d8}
 8016c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c14:	4647      	mov	r7, r8
 8016c16:	2300      	movs	r3, #0
 8016c18:	9303      	str	r3, [sp, #12]
 8016c1a:	e7ef      	b.n	8016bfc <rcutils_repl_str+0x140>
 8016c1c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016c20:	e7db      	b.n	8016bda <rcutils_repl_str+0x11e>
 8016c22:	bf00      	nop

08016c24 <rcutils_snprintf>:
 8016c24:	b40c      	push	{r2, r3}
 8016c26:	b530      	push	{r4, r5, lr}
 8016c28:	b083      	sub	sp, #12
 8016c2a:	ab06      	add	r3, sp, #24
 8016c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c30:	9301      	str	r3, [sp, #4]
 8016c32:	b152      	cbz	r2, 8016c4a <rcutils_snprintf+0x26>
 8016c34:	b138      	cbz	r0, 8016c46 <rcutils_snprintf+0x22>
 8016c36:	b141      	cbz	r1, 8016c4a <rcutils_snprintf+0x26>
 8016c38:	f004 f930 	bl	801ae9c <vsniprintf>
 8016c3c:	b003      	add	sp, #12
 8016c3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c42:	b002      	add	sp, #8
 8016c44:	4770      	bx	lr
 8016c46:	2900      	cmp	r1, #0
 8016c48:	d0f6      	beq.n	8016c38 <rcutils_snprintf+0x14>
 8016c4a:	f003 fbb9 	bl	801a3c0 <__errno>
 8016c4e:	2316      	movs	r3, #22
 8016c50:	6003      	str	r3, [r0, #0]
 8016c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c56:	e7f1      	b.n	8016c3c <rcutils_snprintf+0x18>

08016c58 <rcutils_vsnprintf>:
 8016c58:	b570      	push	{r4, r5, r6, lr}
 8016c5a:	b13a      	cbz	r2, 8016c6c <rcutils_vsnprintf+0x14>
 8016c5c:	b120      	cbz	r0, 8016c68 <rcutils_vsnprintf+0x10>
 8016c5e:	b129      	cbz	r1, 8016c6c <rcutils_vsnprintf+0x14>
 8016c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c64:	f004 b91a 	b.w	801ae9c <vsniprintf>
 8016c68:	2900      	cmp	r1, #0
 8016c6a:	d0f9      	beq.n	8016c60 <rcutils_vsnprintf+0x8>
 8016c6c:	f003 fba8 	bl	801a3c0 <__errno>
 8016c70:	2316      	movs	r3, #22
 8016c72:	6003      	str	r3, [r0, #0]
 8016c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c78:	bd70      	pop	{r4, r5, r6, pc}
 8016c7a:	bf00      	nop

08016c7c <rcutils_strdup>:
 8016c7c:	b084      	sub	sp, #16
 8016c7e:	b570      	push	{r4, r5, r6, lr}
 8016c80:	b082      	sub	sp, #8
 8016c82:	ac07      	add	r4, sp, #28
 8016c84:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016c88:	4605      	mov	r5, r0
 8016c8a:	b1b0      	cbz	r0, 8016cba <rcutils_strdup+0x3e>
 8016c8c:	f7e9 faaa 	bl	80001e4 <strlen>
 8016c90:	1c42      	adds	r2, r0, #1
 8016c92:	9b07      	ldr	r3, [sp, #28]
 8016c94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c96:	9201      	str	r2, [sp, #4]
 8016c98:	4606      	mov	r6, r0
 8016c9a:	4610      	mov	r0, r2
 8016c9c:	4798      	blx	r3
 8016c9e:	4604      	mov	r4, r0
 8016ca0:	b128      	cbz	r0, 8016cae <rcutils_strdup+0x32>
 8016ca2:	9a01      	ldr	r2, [sp, #4]
 8016ca4:	4629      	mov	r1, r5
 8016ca6:	f003 fd89 	bl	801a7bc <memcpy>
 8016caa:	2300      	movs	r3, #0
 8016cac:	55a3      	strb	r3, [r4, r6]
 8016cae:	4620      	mov	r0, r4
 8016cb0:	b002      	add	sp, #8
 8016cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cb6:	b004      	add	sp, #16
 8016cb8:	4770      	bx	lr
 8016cba:	4604      	mov	r4, r0
 8016cbc:	e7f7      	b.n	8016cae <rcutils_strdup+0x32>
 8016cbe:	bf00      	nop

08016cc0 <rcutils_strndup>:
 8016cc0:	b082      	sub	sp, #8
 8016cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cc4:	ac06      	add	r4, sp, #24
 8016cc6:	e884 000c 	stmia.w	r4, {r2, r3}
 8016cca:	4605      	mov	r5, r0
 8016ccc:	b188      	cbz	r0, 8016cf2 <rcutils_strndup+0x32>
 8016cce:	1c4f      	adds	r7, r1, #1
 8016cd0:	460e      	mov	r6, r1
 8016cd2:	4638      	mov	r0, r7
 8016cd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016cd6:	4790      	blx	r2
 8016cd8:	4604      	mov	r4, r0
 8016cda:	b128      	cbz	r0, 8016ce8 <rcutils_strndup+0x28>
 8016cdc:	463a      	mov	r2, r7
 8016cde:	4629      	mov	r1, r5
 8016ce0:	f003 fd6c 	bl	801a7bc <memcpy>
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	55a3      	strb	r3, [r4, r6]
 8016ce8:	4620      	mov	r0, r4
 8016cea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016cee:	b002      	add	sp, #8
 8016cf0:	4770      	bx	lr
 8016cf2:	4604      	mov	r4, r0
 8016cf4:	e7f8      	b.n	8016ce8 <rcutils_strndup+0x28>
 8016cf6:	bf00      	nop

08016cf8 <rcutils_get_zero_initialized_string_map>:
 8016cf8:	4b01      	ldr	r3, [pc, #4]	; (8016d00 <rcutils_get_zero_initialized_string_map+0x8>)
 8016cfa:	2000      	movs	r0, #0
 8016cfc:	6018      	str	r0, [r3, #0]
 8016cfe:	4770      	bx	lr
 8016d00:	2001c860 	.word	0x2001c860

08016d04 <rcutils_string_map_reserve>:
 8016d04:	2800      	cmp	r0, #0
 8016d06:	d05f      	beq.n	8016dc8 <rcutils_string_map_reserve+0xc4>
 8016d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d0c:	460c      	mov	r4, r1
 8016d0e:	6801      	ldr	r1, [r0, #0]
 8016d10:	b082      	sub	sp, #8
 8016d12:	4605      	mov	r5, r0
 8016d14:	b129      	cbz	r1, 8016d22 <rcutils_string_map_reserve+0x1e>
 8016d16:	68cb      	ldr	r3, [r1, #12]
 8016d18:	42a3      	cmp	r3, r4
 8016d1a:	d906      	bls.n	8016d2a <rcutils_string_map_reserve+0x26>
 8016d1c:	461c      	mov	r4, r3
 8016d1e:	2900      	cmp	r1, #0
 8016d20:	d1f9      	bne.n	8016d16 <rcutils_string_map_reserve+0x12>
 8016d22:	201f      	movs	r0, #31
 8016d24:	b002      	add	sp, #8
 8016d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d2a:	688b      	ldr	r3, [r1, #8]
 8016d2c:	42a3      	cmp	r3, r4
 8016d2e:	d047      	beq.n	8016dc0 <rcutils_string_map_reserve+0xbc>
 8016d30:	6a0e      	ldr	r6, [r1, #32]
 8016d32:	2c00      	cmp	r4, #0
 8016d34:	d034      	beq.n	8016da0 <rcutils_string_map_reserve+0x9c>
 8016d36:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8016d3a:	d243      	bcs.n	8016dc4 <rcutils_string_map_reserve+0xc0>
 8016d3c:	00a7      	lsls	r7, r4, #2
 8016d3e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8016d42:	6808      	ldr	r0, [r1, #0]
 8016d44:	4632      	mov	r2, r6
 8016d46:	4639      	mov	r1, r7
 8016d48:	47c0      	blx	r8
 8016d4a:	2800      	cmp	r0, #0
 8016d4c:	d03a      	beq.n	8016dc4 <rcutils_string_map_reserve+0xc0>
 8016d4e:	682b      	ldr	r3, [r5, #0]
 8016d50:	4632      	mov	r2, r6
 8016d52:	6018      	str	r0, [r3, #0]
 8016d54:	4639      	mov	r1, r7
 8016d56:	6858      	ldr	r0, [r3, #4]
 8016d58:	47c0      	blx	r8
 8016d5a:	2800      	cmp	r0, #0
 8016d5c:	d032      	beq.n	8016dc4 <rcutils_string_map_reserve+0xc0>
 8016d5e:	682d      	ldr	r5, [r5, #0]
 8016d60:	68ab      	ldr	r3, [r5, #8]
 8016d62:	6068      	str	r0, [r5, #4]
 8016d64:	42a3      	cmp	r3, r4
 8016d66:	d226      	bcs.n	8016db6 <rcutils_string_map_reserve+0xb2>
 8016d68:	682a      	ldr	r2, [r5, #0]
 8016d6a:	eb00 0c07 	add.w	ip, r0, r7
 8016d6e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8016d72:	45e6      	cmp	lr, ip
 8016d74:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016d78:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8016d7c:	d203      	bcs.n	8016d86 <rcutils_string_map_reserve+0x82>
 8016d7e:	eb02 0c07 	add.w	ip, r2, r7
 8016d82:	4566      	cmp	r6, ip
 8016d84:	d322      	bcc.n	8016dcc <rcutils_string_map_reserve+0xc8>
 8016d86:	1ae3      	subs	r3, r4, r3
 8016d88:	009a      	lsls	r2, r3, #2
 8016d8a:	4670      	mov	r0, lr
 8016d8c:	2100      	movs	r1, #0
 8016d8e:	9201      	str	r2, [sp, #4]
 8016d90:	f003 fd22 	bl	801a7d8 <memset>
 8016d94:	9a01      	ldr	r2, [sp, #4]
 8016d96:	2100      	movs	r1, #0
 8016d98:	4630      	mov	r0, r6
 8016d9a:	f003 fd1d 	bl	801a7d8 <memset>
 8016d9e:	e00a      	b.n	8016db6 <rcutils_string_map_reserve+0xb2>
 8016da0:	694f      	ldr	r7, [r1, #20]
 8016da2:	6808      	ldr	r0, [r1, #0]
 8016da4:	4631      	mov	r1, r6
 8016da6:	47b8      	blx	r7
 8016da8:	682b      	ldr	r3, [r5, #0]
 8016daa:	4631      	mov	r1, r6
 8016dac:	6858      	ldr	r0, [r3, #4]
 8016dae:	601c      	str	r4, [r3, #0]
 8016db0:	47b8      	blx	r7
 8016db2:	682d      	ldr	r5, [r5, #0]
 8016db4:	606c      	str	r4, [r5, #4]
 8016db6:	2000      	movs	r0, #0
 8016db8:	60ac      	str	r4, [r5, #8]
 8016dba:	b002      	add	sp, #8
 8016dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dc0:	2000      	movs	r0, #0
 8016dc2:	e7af      	b.n	8016d24 <rcutils_string_map_reserve+0x20>
 8016dc4:	200a      	movs	r0, #10
 8016dc6:	e7ad      	b.n	8016d24 <rcutils_string_map_reserve+0x20>
 8016dc8:	200b      	movs	r0, #11
 8016dca:	4770      	bx	lr
 8016dcc:	1f0b      	subs	r3, r1, #4
 8016dce:	4418      	add	r0, r3
 8016dd0:	4413      	add	r3, r2
 8016dd2:	3a04      	subs	r2, #4
 8016dd4:	4417      	add	r7, r2
 8016dd6:	2200      	movs	r2, #0
 8016dd8:	f843 2f04 	str.w	r2, [r3, #4]!
 8016ddc:	42bb      	cmp	r3, r7
 8016dde:	f840 2f04 	str.w	r2, [r0, #4]!
 8016de2:	d1f9      	bne.n	8016dd8 <rcutils_string_map_reserve+0xd4>
 8016de4:	e7e7      	b.n	8016db6 <rcutils_string_map_reserve+0xb2>
 8016de6:	bf00      	nop

08016de8 <rcutils_string_map_init>:
 8016de8:	b082      	sub	sp, #8
 8016dea:	b570      	push	{r4, r5, r6, lr}
 8016dec:	ac04      	add	r4, sp, #16
 8016dee:	e884 000c 	stmia.w	r4, {r2, r3}
 8016df2:	b380      	cbz	r0, 8016e56 <rcutils_string_map_init+0x6e>
 8016df4:	6806      	ldr	r6, [r0, #0]
 8016df6:	4604      	mov	r4, r0
 8016df8:	b12e      	cbz	r6, 8016e06 <rcutils_string_map_init+0x1e>
 8016dfa:	251e      	movs	r5, #30
 8016dfc:	4628      	mov	r0, r5
 8016dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e02:	b002      	add	sp, #8
 8016e04:	4770      	bx	lr
 8016e06:	a804      	add	r0, sp, #16
 8016e08:	460d      	mov	r5, r1
 8016e0a:	f7f9 fa15 	bl	8010238 <rcutils_allocator_is_valid>
 8016e0e:	b310      	cbz	r0, 8016e56 <rcutils_string_map_init+0x6e>
 8016e10:	9b04      	ldr	r3, [sp, #16]
 8016e12:	9908      	ldr	r1, [sp, #32]
 8016e14:	2024      	movs	r0, #36	; 0x24
 8016e16:	4798      	blx	r3
 8016e18:	6020      	str	r0, [r4, #0]
 8016e1a:	b310      	cbz	r0, 8016e62 <rcutils_string_map_init+0x7a>
 8016e1c:	f10d 0e10 	add.w	lr, sp, #16
 8016e20:	e9c0 6600 	strd	r6, r6, [r0]
 8016e24:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016e28:	f100 0c10 	add.w	ip, r0, #16
 8016e2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016e30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e34:	f8de 3000 	ldr.w	r3, [lr]
 8016e38:	f8cc 3000 	str.w	r3, [ip]
 8016e3c:	4629      	mov	r1, r5
 8016e3e:	4620      	mov	r0, r4
 8016e40:	f7ff ff60 	bl	8016d04 <rcutils_string_map_reserve>
 8016e44:	4605      	mov	r5, r0
 8016e46:	2800      	cmp	r0, #0
 8016e48:	d0d8      	beq.n	8016dfc <rcutils_string_map_init+0x14>
 8016e4a:	9b05      	ldr	r3, [sp, #20]
 8016e4c:	9908      	ldr	r1, [sp, #32]
 8016e4e:	6820      	ldr	r0, [r4, #0]
 8016e50:	4798      	blx	r3
 8016e52:	6026      	str	r6, [r4, #0]
 8016e54:	e7d2      	b.n	8016dfc <rcutils_string_map_init+0x14>
 8016e56:	250b      	movs	r5, #11
 8016e58:	4628      	mov	r0, r5
 8016e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e5e:	b002      	add	sp, #8
 8016e60:	4770      	bx	lr
 8016e62:	250a      	movs	r5, #10
 8016e64:	e7ca      	b.n	8016dfc <rcutils_string_map_init+0x14>
 8016e66:	bf00      	nop

08016e68 <rcutils_string_map_fini>:
 8016e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e6c:	b082      	sub	sp, #8
 8016e6e:	2800      	cmp	r0, #0
 8016e70:	d03a      	beq.n	8016ee8 <rcutils_string_map_fini+0x80>
 8016e72:	6804      	ldr	r4, [r0, #0]
 8016e74:	4606      	mov	r6, r0
 8016e76:	2c00      	cmp	r4, #0
 8016e78:	d032      	beq.n	8016ee0 <rcutils_string_map_fini+0x78>
 8016e7a:	68a3      	ldr	r3, [r4, #8]
 8016e7c:	b32b      	cbz	r3, 8016eca <rcutils_string_map_fini+0x62>
 8016e7e:	2500      	movs	r5, #0
 8016e80:	6822      	ldr	r2, [r4, #0]
 8016e82:	462f      	mov	r7, r5
 8016e84:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016e88:	b1e0      	cbz	r0, 8016ec4 <rcutils_string_map_fini+0x5c>
 8016e8a:	6a21      	ldr	r1, [r4, #32]
 8016e8c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016e90:	9101      	str	r1, [sp, #4]
 8016e92:	47c0      	blx	r8
 8016e94:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016e98:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016e9c:	9901      	ldr	r1, [sp, #4]
 8016e9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016ea2:	47c0      	blx	r8
 8016ea4:	68e3      	ldr	r3, [r4, #12]
 8016ea6:	6862      	ldr	r2, [r4, #4]
 8016ea8:	3b01      	subs	r3, #1
 8016eaa:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016eae:	60e3      	str	r3, [r4, #12]
 8016eb0:	6834      	ldr	r4, [r6, #0]
 8016eb2:	68a3      	ldr	r3, [r4, #8]
 8016eb4:	3501      	adds	r5, #1
 8016eb6:	429d      	cmp	r5, r3
 8016eb8:	d207      	bcs.n	8016eca <rcutils_string_map_fini+0x62>
 8016eba:	6822      	ldr	r2, [r4, #0]
 8016ebc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016ec0:	2800      	cmp	r0, #0
 8016ec2:	d1e2      	bne.n	8016e8a <rcutils_string_map_fini+0x22>
 8016ec4:	3501      	adds	r5, #1
 8016ec6:	429d      	cmp	r5, r3
 8016ec8:	d3dc      	bcc.n	8016e84 <rcutils_string_map_fini+0x1c>
 8016eca:	2100      	movs	r1, #0
 8016ecc:	4630      	mov	r0, r6
 8016ece:	f7ff ff19 	bl	8016d04 <rcutils_string_map_reserve>
 8016ed2:	4604      	mov	r4, r0
 8016ed4:	b920      	cbnz	r0, 8016ee0 <rcutils_string_map_fini+0x78>
 8016ed6:	6830      	ldr	r0, [r6, #0]
 8016ed8:	6943      	ldr	r3, [r0, #20]
 8016eda:	6a01      	ldr	r1, [r0, #32]
 8016edc:	4798      	blx	r3
 8016ede:	6034      	str	r4, [r6, #0]
 8016ee0:	4620      	mov	r0, r4
 8016ee2:	b002      	add	sp, #8
 8016ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ee8:	240b      	movs	r4, #11
 8016eea:	4620      	mov	r0, r4
 8016eec:	b002      	add	sp, #8
 8016eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ef2:	bf00      	nop

08016ef4 <rcutils_string_map_getn>:
 8016ef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ef8:	b300      	cbz	r0, 8016f3c <rcutils_string_map_getn+0x48>
 8016efa:	6807      	ldr	r7, [r0, #0]
 8016efc:	b1ff      	cbz	r7, 8016f3e <rcutils_string_map_getn+0x4a>
 8016efe:	4688      	mov	r8, r1
 8016f00:	b1e1      	cbz	r1, 8016f3c <rcutils_string_map_getn+0x48>
 8016f02:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8016f06:	683e      	ldr	r6, [r7, #0]
 8016f08:	f1ba 0f00 	cmp.w	sl, #0
 8016f0c:	d016      	beq.n	8016f3c <rcutils_string_map_getn+0x48>
 8016f0e:	4691      	mov	r9, r2
 8016f10:	3e04      	subs	r6, #4
 8016f12:	2400      	movs	r4, #0
 8016f14:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016f18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016f1c:	4628      	mov	r0, r5
 8016f1e:	3401      	adds	r4, #1
 8016f20:	b155      	cbz	r5, 8016f38 <rcutils_string_map_getn+0x44>
 8016f22:	f7e9 f95f 	bl	80001e4 <strlen>
 8016f26:	4548      	cmp	r0, r9
 8016f28:	4602      	mov	r2, r0
 8016f2a:	4629      	mov	r1, r5
 8016f2c:	bf38      	it	cc
 8016f2e:	464a      	movcc	r2, r9
 8016f30:	4640      	mov	r0, r8
 8016f32:	f003 fee1 	bl	801acf8 <strncmp>
 8016f36:	b128      	cbz	r0, 8016f44 <rcutils_string_map_getn+0x50>
 8016f38:	45a2      	cmp	sl, r4
 8016f3a:	d1eb      	bne.n	8016f14 <rcutils_string_map_getn+0x20>
 8016f3c:	2700      	movs	r7, #0
 8016f3e:	4638      	mov	r0, r7
 8016f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	f853 700b 	ldr.w	r7, [r3, fp]
 8016f4a:	4638      	mov	r0, r7
 8016f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f50 <rcutils_system_time_now>:
 8016f50:	b308      	cbz	r0, 8016f96 <rcutils_system_time_now+0x46>
 8016f52:	b570      	push	{r4, r5, r6, lr}
 8016f54:	b084      	sub	sp, #16
 8016f56:	4604      	mov	r4, r0
 8016f58:	4669      	mov	r1, sp
 8016f5a:	2001      	movs	r0, #1
 8016f5c:	f7ea ff4c 	bl	8001df8 <clock_gettime>
 8016f60:	e9dd 3500 	ldrd	r3, r5, [sp]
 8016f64:	2d00      	cmp	r5, #0
 8016f66:	db13      	blt.n	8016f90 <rcutils_system_time_now+0x40>
 8016f68:	9902      	ldr	r1, [sp, #8]
 8016f6a:	2900      	cmp	r1, #0
 8016f6c:	db0d      	blt.n	8016f8a <rcutils_system_time_now+0x3a>
 8016f6e:	4e0b      	ldr	r6, [pc, #44]	; (8016f9c <rcutils_system_time_now+0x4c>)
 8016f70:	fba3 3206 	umull	r3, r2, r3, r6
 8016f74:	185b      	adds	r3, r3, r1
 8016f76:	fb06 2205 	mla	r2, r6, r5, r2
 8016f7a:	f04f 0000 	mov.w	r0, #0
 8016f7e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8016f82:	e9c4 3200 	strd	r3, r2, [r4]
 8016f86:	b004      	add	sp, #16
 8016f88:	bd70      	pop	{r4, r5, r6, pc}
 8016f8a:	ea53 0205 	orrs.w	r2, r3, r5
 8016f8e:	d1ee      	bne.n	8016f6e <rcutils_system_time_now+0x1e>
 8016f90:	2002      	movs	r0, #2
 8016f92:	b004      	add	sp, #16
 8016f94:	bd70      	pop	{r4, r5, r6, pc}
 8016f96:	200b      	movs	r0, #11
 8016f98:	4770      	bx	lr
 8016f9a:	bf00      	nop
 8016f9c:	3b9aca00 	.word	0x3b9aca00

08016fa0 <rcutils_steady_time_now>:
 8016fa0:	b308      	cbz	r0, 8016fe6 <rcutils_steady_time_now+0x46>
 8016fa2:	b570      	push	{r4, r5, r6, lr}
 8016fa4:	b084      	sub	sp, #16
 8016fa6:	4604      	mov	r4, r0
 8016fa8:	4669      	mov	r1, sp
 8016faa:	2000      	movs	r0, #0
 8016fac:	f7ea ff24 	bl	8001df8 <clock_gettime>
 8016fb0:	e9dd 3500 	ldrd	r3, r5, [sp]
 8016fb4:	2d00      	cmp	r5, #0
 8016fb6:	db13      	blt.n	8016fe0 <rcutils_steady_time_now+0x40>
 8016fb8:	9902      	ldr	r1, [sp, #8]
 8016fba:	2900      	cmp	r1, #0
 8016fbc:	db0d      	blt.n	8016fda <rcutils_steady_time_now+0x3a>
 8016fbe:	4e0b      	ldr	r6, [pc, #44]	; (8016fec <rcutils_steady_time_now+0x4c>)
 8016fc0:	fba3 3206 	umull	r3, r2, r3, r6
 8016fc4:	185b      	adds	r3, r3, r1
 8016fc6:	fb06 2205 	mla	r2, r6, r5, r2
 8016fca:	f04f 0000 	mov.w	r0, #0
 8016fce:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8016fd2:	e9c4 3200 	strd	r3, r2, [r4]
 8016fd6:	b004      	add	sp, #16
 8016fd8:	bd70      	pop	{r4, r5, r6, pc}
 8016fda:	ea53 0205 	orrs.w	r2, r3, r5
 8016fde:	d1ee      	bne.n	8016fbe <rcutils_steady_time_now+0x1e>
 8016fe0:	2002      	movs	r0, #2
 8016fe2:	b004      	add	sp, #16
 8016fe4:	bd70      	pop	{r4, r5, r6, pc}
 8016fe6:	200b      	movs	r0, #11
 8016fe8:	4770      	bx	lr
 8016fea:	bf00      	nop
 8016fec:	3b9aca00 	.word	0x3b9aca00

08016ff0 <rmw_get_zero_initialized_context>:
 8016ff0:	b510      	push	{r4, lr}
 8016ff2:	4604      	mov	r4, r0
 8016ff4:	3010      	adds	r0, #16
 8016ff6:	f000 f80b 	bl	8017010 <rmw_get_zero_initialized_init_options>
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	2000      	movs	r0, #0
 8016ffe:	2100      	movs	r1, #0
 8017000:	e9c4 0100 	strd	r0, r1, [r4]
 8017004:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017008:	60a3      	str	r3, [r4, #8]
 801700a:	4620      	mov	r0, r4
 801700c:	bd10      	pop	{r4, pc}
 801700e:	bf00      	nop

08017010 <rmw_get_zero_initialized_init_options>:
 8017010:	b510      	push	{r4, lr}
 8017012:	2238      	movs	r2, #56	; 0x38
 8017014:	4604      	mov	r4, r0
 8017016:	2100      	movs	r1, #0
 8017018:	f003 fbde 	bl	801a7d8 <memset>
 801701c:	f104 0010 	add.w	r0, r4, #16
 8017020:	f000 f806 	bl	8017030 <rmw_get_default_security_options>
 8017024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017028:	60e3      	str	r3, [r4, #12]
 801702a:	4620      	mov	r0, r4
 801702c:	bd10      	pop	{r4, pc}
 801702e:	bf00      	nop

08017030 <rmw_get_default_security_options>:
 8017030:	2200      	movs	r2, #0
 8017032:	7002      	strb	r2, [r0, #0]
 8017034:	6042      	str	r2, [r0, #4]
 8017036:	4770      	bx	lr

08017038 <rmw_validate_full_topic_name>:
 8017038:	2800      	cmp	r0, #0
 801703a:	d057      	beq.n	80170ec <rmw_validate_full_topic_name+0xb4>
 801703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017040:	460d      	mov	r5, r1
 8017042:	2900      	cmp	r1, #0
 8017044:	d054      	beq.n	80170f0 <rmw_validate_full_topic_name+0xb8>
 8017046:	4616      	mov	r6, r2
 8017048:	4604      	mov	r4, r0
 801704a:	f7e9 f8cb 	bl	80001e4 <strlen>
 801704e:	b148      	cbz	r0, 8017064 <rmw_validate_full_topic_name+0x2c>
 8017050:	7823      	ldrb	r3, [r4, #0]
 8017052:	2b2f      	cmp	r3, #47	; 0x2f
 8017054:	d00d      	beq.n	8017072 <rmw_validate_full_topic_name+0x3a>
 8017056:	2302      	movs	r3, #2
 8017058:	602b      	str	r3, [r5, #0]
 801705a:	b13e      	cbz	r6, 801706c <rmw_validate_full_topic_name+0x34>
 801705c:	2000      	movs	r0, #0
 801705e:	6030      	str	r0, [r6, #0]
 8017060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017064:	2301      	movs	r3, #1
 8017066:	602b      	str	r3, [r5, #0]
 8017068:	2e00      	cmp	r6, #0
 801706a:	d1f7      	bne.n	801705c <rmw_validate_full_topic_name+0x24>
 801706c:	2000      	movs	r0, #0
 801706e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017072:	1e43      	subs	r3, r0, #1
 8017074:	5ce2      	ldrb	r2, [r4, r3]
 8017076:	2a2f      	cmp	r2, #47	; 0x2f
 8017078:	d03c      	beq.n	80170f4 <rmw_validate_full_topic_name+0xbc>
 801707a:	1e63      	subs	r3, r4, #1
 801707c:	eb03 0800 	add.w	r8, r3, r0
 8017080:	f1c4 0e01 	rsb	lr, r4, #1
 8017084:	eb0e 0703 	add.w	r7, lr, r3
 8017088:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801708c:	f021 0220 	bic.w	r2, r1, #32
 8017090:	3a41      	subs	r2, #65	; 0x41
 8017092:	2a19      	cmp	r2, #25
 8017094:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8017098:	d90b      	bls.n	80170b2 <rmw_validate_full_topic_name+0x7a>
 801709a:	295f      	cmp	r1, #95	; 0x5f
 801709c:	d009      	beq.n	80170b2 <rmw_validate_full_topic_name+0x7a>
 801709e:	f1bc 0f0a 	cmp.w	ip, #10
 80170a2:	d906      	bls.n	80170b2 <rmw_validate_full_topic_name+0x7a>
 80170a4:	2304      	movs	r3, #4
 80170a6:	602b      	str	r3, [r5, #0]
 80170a8:	2e00      	cmp	r6, #0
 80170aa:	d0df      	beq.n	801706c <rmw_validate_full_topic_name+0x34>
 80170ac:	6037      	str	r7, [r6, #0]
 80170ae:	2000      	movs	r0, #0
 80170b0:	e7d6      	b.n	8017060 <rmw_validate_full_topic_name+0x28>
 80170b2:	4543      	cmp	r3, r8
 80170b4:	d1e6      	bne.n	8017084 <rmw_validate_full_topic_name+0x4c>
 80170b6:	4f1a      	ldr	r7, [pc, #104]	; (8017120 <rmw_validate_full_topic_name+0xe8>)
 80170b8:	2301      	movs	r3, #1
 80170ba:	e004      	b.n	80170c6 <rmw_validate_full_topic_name+0x8e>
 80170bc:	4298      	cmp	r0, r3
 80170be:	f104 0401 	add.w	r4, r4, #1
 80170c2:	d91c      	bls.n	80170fe <rmw_validate_full_topic_name+0xc6>
 80170c4:	4613      	mov	r3, r2
 80170c6:	4298      	cmp	r0, r3
 80170c8:	f103 0201 	add.w	r2, r3, #1
 80170cc:	d0f6      	beq.n	80170bc <rmw_validate_full_topic_name+0x84>
 80170ce:	7821      	ldrb	r1, [r4, #0]
 80170d0:	292f      	cmp	r1, #47	; 0x2f
 80170d2:	d1f3      	bne.n	80170bc <rmw_validate_full_topic_name+0x84>
 80170d4:	7861      	ldrb	r1, [r4, #1]
 80170d6:	292f      	cmp	r1, #47	; 0x2f
 80170d8:	d01c      	beq.n	8017114 <rmw_validate_full_topic_name+0xdc>
 80170da:	5dc9      	ldrb	r1, [r1, r7]
 80170dc:	0749      	lsls	r1, r1, #29
 80170de:	d5ed      	bpl.n	80170bc <rmw_validate_full_topic_name+0x84>
 80170e0:	2206      	movs	r2, #6
 80170e2:	602a      	str	r2, [r5, #0]
 80170e4:	2e00      	cmp	r6, #0
 80170e6:	d0c1      	beq.n	801706c <rmw_validate_full_topic_name+0x34>
 80170e8:	6033      	str	r3, [r6, #0]
 80170ea:	e7bf      	b.n	801706c <rmw_validate_full_topic_name+0x34>
 80170ec:	200b      	movs	r0, #11
 80170ee:	4770      	bx	lr
 80170f0:	200b      	movs	r0, #11
 80170f2:	e7b5      	b.n	8017060 <rmw_validate_full_topic_name+0x28>
 80170f4:	2203      	movs	r2, #3
 80170f6:	602a      	str	r2, [r5, #0]
 80170f8:	2e00      	cmp	r6, #0
 80170fa:	d1f5      	bne.n	80170e8 <rmw_validate_full_topic_name+0xb0>
 80170fc:	e7b6      	b.n	801706c <rmw_validate_full_topic_name+0x34>
 80170fe:	28f7      	cmp	r0, #247	; 0xf7
 8017100:	d802      	bhi.n	8017108 <rmw_validate_full_topic_name+0xd0>
 8017102:	2000      	movs	r0, #0
 8017104:	6028      	str	r0, [r5, #0]
 8017106:	e7ab      	b.n	8017060 <rmw_validate_full_topic_name+0x28>
 8017108:	2307      	movs	r3, #7
 801710a:	602b      	str	r3, [r5, #0]
 801710c:	2e00      	cmp	r6, #0
 801710e:	d0ad      	beq.n	801706c <rmw_validate_full_topic_name+0x34>
 8017110:	23f6      	movs	r3, #246	; 0xf6
 8017112:	e7e9      	b.n	80170e8 <rmw_validate_full_topic_name+0xb0>
 8017114:	2205      	movs	r2, #5
 8017116:	602a      	str	r2, [r5, #0]
 8017118:	2e00      	cmp	r6, #0
 801711a:	d1e5      	bne.n	80170e8 <rmw_validate_full_topic_name+0xb0>
 801711c:	e7a6      	b.n	801706c <rmw_validate_full_topic_name+0x34>
 801711e:	bf00      	nop
 8017120:	0801ce1f 	.word	0x0801ce1f

08017124 <rmw_validate_namespace_with_size>:
 8017124:	b340      	cbz	r0, 8017178 <rmw_validate_namespace_with_size+0x54>
 8017126:	b570      	push	{r4, r5, r6, lr}
 8017128:	4614      	mov	r4, r2
 801712a:	b0c2      	sub	sp, #264	; 0x108
 801712c:	b332      	cbz	r2, 801717c <rmw_validate_namespace_with_size+0x58>
 801712e:	2901      	cmp	r1, #1
 8017130:	460d      	mov	r5, r1
 8017132:	461e      	mov	r6, r3
 8017134:	d102      	bne.n	801713c <rmw_validate_namespace_with_size+0x18>
 8017136:	7803      	ldrb	r3, [r0, #0]
 8017138:	2b2f      	cmp	r3, #47	; 0x2f
 801713a:	d012      	beq.n	8017162 <rmw_validate_namespace_with_size+0x3e>
 801713c:	aa01      	add	r2, sp, #4
 801713e:	4669      	mov	r1, sp
 8017140:	f7ff ff7a 	bl	8017038 <rmw_validate_full_topic_name>
 8017144:	b978      	cbnz	r0, 8017166 <rmw_validate_namespace_with_size+0x42>
 8017146:	9b00      	ldr	r3, [sp, #0]
 8017148:	b14b      	cbz	r3, 801715e <rmw_validate_namespace_with_size+0x3a>
 801714a:	2b07      	cmp	r3, #7
 801714c:	d007      	beq.n	801715e <rmw_validate_namespace_with_size+0x3a>
 801714e:	1e5a      	subs	r2, r3, #1
 8017150:	2a05      	cmp	r2, #5
 8017152:	d82b      	bhi.n	80171ac <rmw_validate_namespace_with_size+0x88>
 8017154:	e8df f002 	tbb	[pc, r2]
 8017158:	1e212427 	.word	0x1e212427
 801715c:	141b      	.short	0x141b
 801715e:	2df5      	cmp	r5, #245	; 0xf5
 8017160:	d803      	bhi.n	801716a <rmw_validate_namespace_with_size+0x46>
 8017162:	2000      	movs	r0, #0
 8017164:	6020      	str	r0, [r4, #0]
 8017166:	b042      	add	sp, #264	; 0x108
 8017168:	bd70      	pop	{r4, r5, r6, pc}
 801716a:	2307      	movs	r3, #7
 801716c:	6023      	str	r3, [r4, #0]
 801716e:	2e00      	cmp	r6, #0
 8017170:	d0f9      	beq.n	8017166 <rmw_validate_namespace_with_size+0x42>
 8017172:	23f4      	movs	r3, #244	; 0xf4
 8017174:	6033      	str	r3, [r6, #0]
 8017176:	e7f6      	b.n	8017166 <rmw_validate_namespace_with_size+0x42>
 8017178:	200b      	movs	r0, #11
 801717a:	4770      	bx	lr
 801717c:	200b      	movs	r0, #11
 801717e:	e7f2      	b.n	8017166 <rmw_validate_namespace_with_size+0x42>
 8017180:	2306      	movs	r3, #6
 8017182:	6023      	str	r3, [r4, #0]
 8017184:	2e00      	cmp	r6, #0
 8017186:	d0ee      	beq.n	8017166 <rmw_validate_namespace_with_size+0x42>
 8017188:	9b01      	ldr	r3, [sp, #4]
 801718a:	6033      	str	r3, [r6, #0]
 801718c:	e7eb      	b.n	8017166 <rmw_validate_namespace_with_size+0x42>
 801718e:	2305      	movs	r3, #5
 8017190:	6023      	str	r3, [r4, #0]
 8017192:	e7f7      	b.n	8017184 <rmw_validate_namespace_with_size+0x60>
 8017194:	2304      	movs	r3, #4
 8017196:	6023      	str	r3, [r4, #0]
 8017198:	e7f4      	b.n	8017184 <rmw_validate_namespace_with_size+0x60>
 801719a:	2303      	movs	r3, #3
 801719c:	6023      	str	r3, [r4, #0]
 801719e:	e7f1      	b.n	8017184 <rmw_validate_namespace_with_size+0x60>
 80171a0:	2302      	movs	r3, #2
 80171a2:	6023      	str	r3, [r4, #0]
 80171a4:	e7ee      	b.n	8017184 <rmw_validate_namespace_with_size+0x60>
 80171a6:	2301      	movs	r3, #1
 80171a8:	6023      	str	r3, [r4, #0]
 80171aa:	e7eb      	b.n	8017184 <rmw_validate_namespace_with_size+0x60>
 80171ac:	4a03      	ldr	r2, [pc, #12]	; (80171bc <rmw_validate_namespace_with_size+0x98>)
 80171ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80171b2:	a802      	add	r0, sp, #8
 80171b4:	f7ff fd36 	bl	8016c24 <rcutils_snprintf>
 80171b8:	2001      	movs	r0, #1
 80171ba:	e7d4      	b.n	8017166 <rmw_validate_namespace_with_size+0x42>
 80171bc:	0801c7a4 	.word	0x0801c7a4

080171c0 <rmw_validate_namespace>:
 80171c0:	b168      	cbz	r0, 80171de <rmw_validate_namespace+0x1e>
 80171c2:	b570      	push	{r4, r5, r6, lr}
 80171c4:	460d      	mov	r5, r1
 80171c6:	4616      	mov	r6, r2
 80171c8:	4604      	mov	r4, r0
 80171ca:	f7e9 f80b 	bl	80001e4 <strlen>
 80171ce:	4633      	mov	r3, r6
 80171d0:	4601      	mov	r1, r0
 80171d2:	462a      	mov	r2, r5
 80171d4:	4620      	mov	r0, r4
 80171d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80171da:	f7ff bfa3 	b.w	8017124 <rmw_validate_namespace_with_size>
 80171de:	200b      	movs	r0, #11
 80171e0:	4770      	bx	lr
 80171e2:	bf00      	nop

080171e4 <rmw_namespace_validation_result_string>:
 80171e4:	2807      	cmp	r0, #7
 80171e6:	bf9a      	itte	ls
 80171e8:	4b02      	ldrls	r3, [pc, #8]	; (80171f4 <rmw_namespace_validation_result_string+0x10>)
 80171ea:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80171ee:	4802      	ldrhi	r0, [pc, #8]	; (80171f8 <rmw_namespace_validation_result_string+0x14>)
 80171f0:	4770      	bx	lr
 80171f2:	bf00      	nop
 80171f4:	0801c99c 	.word	0x0801c99c
 80171f8:	0801c7f4 	.word	0x0801c7f4

080171fc <rmw_validate_node_name>:
 80171fc:	2800      	cmp	r0, #0
 80171fe:	d03b      	beq.n	8017278 <rmw_validate_node_name+0x7c>
 8017200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017204:	460d      	mov	r5, r1
 8017206:	2900      	cmp	r1, #0
 8017208:	d038      	beq.n	801727c <rmw_validate_node_name+0x80>
 801720a:	4616      	mov	r6, r2
 801720c:	4604      	mov	r4, r0
 801720e:	f7e8 ffe9 	bl	80001e4 <strlen>
 8017212:	b1e0      	cbz	r0, 801724e <rmw_validate_node_name+0x52>
 8017214:	1e63      	subs	r3, r4, #1
 8017216:	eb03 0800 	add.w	r8, r3, r0
 801721a:	f1c4 0101 	rsb	r1, r4, #1
 801721e:	18cf      	adds	r7, r1, r3
 8017220:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8017224:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8017228:	f02e 0c20 	bic.w	ip, lr, #32
 801722c:	2a09      	cmp	r2, #9
 801722e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8017232:	d914      	bls.n	801725e <rmw_validate_node_name+0x62>
 8017234:	f1bc 0f19 	cmp.w	ip, #25
 8017238:	d911      	bls.n	801725e <rmw_validate_node_name+0x62>
 801723a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 801723e:	d00e      	beq.n	801725e <rmw_validate_node_name+0x62>
 8017240:	2302      	movs	r3, #2
 8017242:	602b      	str	r3, [r5, #0]
 8017244:	b106      	cbz	r6, 8017248 <rmw_validate_node_name+0x4c>
 8017246:	6037      	str	r7, [r6, #0]
 8017248:	2000      	movs	r0, #0
 801724a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801724e:	2301      	movs	r3, #1
 8017250:	602b      	str	r3, [r5, #0]
 8017252:	2e00      	cmp	r6, #0
 8017254:	d0f8      	beq.n	8017248 <rmw_validate_node_name+0x4c>
 8017256:	2000      	movs	r0, #0
 8017258:	6030      	str	r0, [r6, #0]
 801725a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801725e:	4543      	cmp	r3, r8
 8017260:	d1dd      	bne.n	801721e <rmw_validate_node_name+0x22>
 8017262:	7822      	ldrb	r2, [r4, #0]
 8017264:	4b0d      	ldr	r3, [pc, #52]	; (801729c <rmw_validate_node_name+0xa0>)
 8017266:	5cd3      	ldrb	r3, [r2, r3]
 8017268:	f013 0304 	ands.w	r3, r3, #4
 801726c:	d110      	bne.n	8017290 <rmw_validate_node_name+0x94>
 801726e:	28ff      	cmp	r0, #255	; 0xff
 8017270:	d806      	bhi.n	8017280 <rmw_validate_node_name+0x84>
 8017272:	602b      	str	r3, [r5, #0]
 8017274:	4618      	mov	r0, r3
 8017276:	e7e8      	b.n	801724a <rmw_validate_node_name+0x4e>
 8017278:	200b      	movs	r0, #11
 801727a:	4770      	bx	lr
 801727c:	200b      	movs	r0, #11
 801727e:	e7e4      	b.n	801724a <rmw_validate_node_name+0x4e>
 8017280:	2204      	movs	r2, #4
 8017282:	602a      	str	r2, [r5, #0]
 8017284:	2e00      	cmp	r6, #0
 8017286:	d0df      	beq.n	8017248 <rmw_validate_node_name+0x4c>
 8017288:	22fe      	movs	r2, #254	; 0xfe
 801728a:	6032      	str	r2, [r6, #0]
 801728c:	4618      	mov	r0, r3
 801728e:	e7dc      	b.n	801724a <rmw_validate_node_name+0x4e>
 8017290:	2303      	movs	r3, #3
 8017292:	602b      	str	r3, [r5, #0]
 8017294:	2e00      	cmp	r6, #0
 8017296:	d1de      	bne.n	8017256 <rmw_validate_node_name+0x5a>
 8017298:	e7d6      	b.n	8017248 <rmw_validate_node_name+0x4c>
 801729a:	bf00      	nop
 801729c:	0801ce1f 	.word	0x0801ce1f

080172a0 <rmw_node_name_validation_result_string>:
 80172a0:	2804      	cmp	r0, #4
 80172a2:	bf9a      	itte	ls
 80172a4:	4b02      	ldrls	r3, [pc, #8]	; (80172b0 <rmw_node_name_validation_result_string+0x10>)
 80172a6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80172aa:	4802      	ldrhi	r0, [pc, #8]	; (80172b4 <rmw_node_name_validation_result_string+0x14>)
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop
 80172b0:	0801caa8 	.word	0x0801caa8
 80172b4:	0801c9bc 	.word	0x0801c9bc

080172b8 <get_memory>:
 80172b8:	4603      	mov	r3, r0
 80172ba:	6840      	ldr	r0, [r0, #4]
 80172bc:	b158      	cbz	r0, 80172d6 <get_memory+0x1e>
 80172be:	6842      	ldr	r2, [r0, #4]
 80172c0:	605a      	str	r2, [r3, #4]
 80172c2:	b10a      	cbz	r2, 80172c8 <get_memory+0x10>
 80172c4:	2100      	movs	r1, #0
 80172c6:	6011      	str	r1, [r2, #0]
 80172c8:	681a      	ldr	r2, [r3, #0]
 80172ca:	6042      	str	r2, [r0, #4]
 80172cc:	b102      	cbz	r2, 80172d0 <get_memory+0x18>
 80172ce:	6010      	str	r0, [r2, #0]
 80172d0:	2200      	movs	r2, #0
 80172d2:	6002      	str	r2, [r0, #0]
 80172d4:	6018      	str	r0, [r3, #0]
 80172d6:	4770      	bx	lr

080172d8 <put_memory>:
 80172d8:	680b      	ldr	r3, [r1, #0]
 80172da:	b10b      	cbz	r3, 80172e0 <put_memory+0x8>
 80172dc:	684a      	ldr	r2, [r1, #4]
 80172de:	605a      	str	r2, [r3, #4]
 80172e0:	684a      	ldr	r2, [r1, #4]
 80172e2:	b102      	cbz	r2, 80172e6 <put_memory+0xe>
 80172e4:	6013      	str	r3, [r2, #0]
 80172e6:	6803      	ldr	r3, [r0, #0]
 80172e8:	428b      	cmp	r3, r1
 80172ea:	6843      	ldr	r3, [r0, #4]
 80172ec:	bf08      	it	eq
 80172ee:	6002      	streq	r2, [r0, #0]
 80172f0:	604b      	str	r3, [r1, #4]
 80172f2:	b103      	cbz	r3, 80172f6 <put_memory+0x1e>
 80172f4:	6019      	str	r1, [r3, #0]
 80172f6:	2300      	movs	r3, #0
 80172f8:	600b      	str	r3, [r1, #0]
 80172fa:	6041      	str	r1, [r0, #4]
 80172fc:	4770      	bx	lr
 80172fe:	bf00      	nop

08017300 <rmw_get_implementation_identifier>:
 8017300:	4b01      	ldr	r3, [pc, #4]	; (8017308 <rmw_get_implementation_identifier+0x8>)
 8017302:	6818      	ldr	r0, [r3, #0]
 8017304:	4770      	bx	lr
 8017306:	bf00      	nop
 8017308:	0801cad4 	.word	0x0801cad4

0801730c <rmw_init_options_init>:
 801730c:	b084      	sub	sp, #16
 801730e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017310:	b083      	sub	sp, #12
 8017312:	ad09      	add	r5, sp, #36	; 0x24
 8017314:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8017318:	b130      	cbz	r0, 8017328 <rmw_init_options_init+0x1c>
 801731a:	4604      	mov	r4, r0
 801731c:	4628      	mov	r0, r5
 801731e:	f7f8 ff8b 	bl	8010238 <rcutils_allocator_is_valid>
 8017322:	b108      	cbz	r0, 8017328 <rmw_init_options_init+0x1c>
 8017324:	68a6      	ldr	r6, [r4, #8]
 8017326:	b12e      	cbz	r6, 8017334 <rmw_init_options_init+0x28>
 8017328:	200b      	movs	r0, #11
 801732a:	b003      	add	sp, #12
 801732c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017330:	b004      	add	sp, #16
 8017332:	4770      	bx	lr
 8017334:	2200      	movs	r2, #0
 8017336:	2300      	movs	r3, #0
 8017338:	e9c4 2300 	strd	r2, r3, [r4]
 801733c:	4b22      	ldr	r3, [pc, #136]	; (80173c8 <rmw_init_options_init+0xbc>)
 801733e:	f8df e098 	ldr.w	lr, [pc, #152]	; 80173d8 <rmw_init_options_init+0xcc>
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	60a3      	str	r3, [r4, #8]
 8017346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017348:	f104 0c20 	add.w	ip, r4, #32
 801734c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017350:	466f      	mov	r7, sp
 8017352:	682b      	ldr	r3, [r5, #0]
 8017354:	f8cc 3000 	str.w	r3, [ip]
 8017358:	4638      	mov	r0, r7
 801735a:	f8c4 e01c 	str.w	lr, [r4, #28]
 801735e:	60e6      	str	r6, [r4, #12]
 8017360:	f7ff fe66 	bl	8017030 <rmw_get_default_security_options>
 8017364:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017368:	f104 0310 	add.w	r3, r4, #16
 801736c:	e883 0003 	stmia.w	r3, {r0, r1}
 8017370:	2203      	movs	r2, #3
 8017372:	4816      	ldr	r0, [pc, #88]	; (80173cc <rmw_init_options_init+0xc0>)
 8017374:	4916      	ldr	r1, [pc, #88]	; (80173d0 <rmw_init_options_init+0xc4>)
 8017376:	7626      	strb	r6, [r4, #24]
 8017378:	f7f9 fa50 	bl	801081c <rmw_uxrce_init_init_options_impl_memory>
 801737c:	4813      	ldr	r0, [pc, #76]	; (80173cc <rmw_init_options_init+0xc0>)
 801737e:	f7ff ff9b 	bl	80172b8 <get_memory>
 8017382:	b1f0      	cbz	r0, 80173c2 <rmw_init_options_init+0xb6>
 8017384:	4a13      	ldr	r2, [pc, #76]	; (80173d4 <rmw_init_options_init+0xc8>)
 8017386:	6883      	ldr	r3, [r0, #8]
 8017388:	6851      	ldr	r1, [r2, #4]
 801738a:	7810      	ldrb	r0, [r2, #0]
 801738c:	6363      	str	r3, [r4, #52]	; 0x34
 801738e:	7418      	strb	r0, [r3, #16]
 8017390:	6159      	str	r1, [r3, #20]
 8017392:	68d1      	ldr	r1, [r2, #12]
 8017394:	61d9      	str	r1, [r3, #28]
 8017396:	6911      	ldr	r1, [r2, #16]
 8017398:	6219      	str	r1, [r3, #32]
 801739a:	6951      	ldr	r1, [r2, #20]
 801739c:	6892      	ldr	r2, [r2, #8]
 801739e:	619a      	str	r2, [r3, #24]
 80173a0:	6259      	str	r1, [r3, #36]	; 0x24
 80173a2:	f7fd faf3 	bl	801498c <uxr_nanos>
 80173a6:	f003 fb2d 	bl	801aa04 <srand>
 80173aa:	f003 fb59 	bl	801aa60 <rand>
 80173ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80173b0:	6298      	str	r0, [r3, #40]	; 0x28
 80173b2:	2800      	cmp	r0, #0
 80173b4:	d0f9      	beq.n	80173aa <rmw_init_options_init+0x9e>
 80173b6:	2000      	movs	r0, #0
 80173b8:	b003      	add	sp, #12
 80173ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80173be:	b004      	add	sp, #16
 80173c0:	4770      	bx	lr
 80173c2:	2001      	movs	r0, #1
 80173c4:	e7b1      	b.n	801732a <rmw_init_options_init+0x1e>
 80173c6:	bf00      	nop
 80173c8:	0801cad4 	.word	0x0801cad4
 80173cc:	2001c7b4 	.word	0x2001c7b4
 80173d0:	20018050 	.word	0x20018050
 80173d4:	20017edc 	.word	0x20017edc
 80173d8:	0801c674 	.word	0x0801c674

080173dc <rmw_init_options_copy>:
 80173dc:	b570      	push	{r4, r5, r6, lr}
 80173de:	b158      	cbz	r0, 80173f8 <rmw_init_options_copy+0x1c>
 80173e0:	460d      	mov	r5, r1
 80173e2:	b149      	cbz	r1, 80173f8 <rmw_init_options_copy+0x1c>
 80173e4:	4604      	mov	r4, r0
 80173e6:	6880      	ldr	r0, [r0, #8]
 80173e8:	b120      	cbz	r0, 80173f4 <rmw_init_options_copy+0x18>
 80173ea:	4b1e      	ldr	r3, [pc, #120]	; (8017464 <rmw_init_options_copy+0x88>)
 80173ec:	6819      	ldr	r1, [r3, #0]
 80173ee:	f7e8 feef 	bl	80001d0 <strcmp>
 80173f2:	bb90      	cbnz	r0, 801745a <rmw_init_options_copy+0x7e>
 80173f4:	68ab      	ldr	r3, [r5, #8]
 80173f6:	b113      	cbz	r3, 80173fe <rmw_init_options_copy+0x22>
 80173f8:	250b      	movs	r5, #11
 80173fa:	4628      	mov	r0, r5
 80173fc:	bd70      	pop	{r4, r5, r6, pc}
 80173fe:	4623      	mov	r3, r4
 8017400:	462a      	mov	r2, r5
 8017402:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8017406:	f8d3 c000 	ldr.w	ip, [r3]
 801740a:	6858      	ldr	r0, [r3, #4]
 801740c:	6899      	ldr	r1, [r3, #8]
 801740e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8017412:	f8c2 e00c 	str.w	lr, [r2, #12]
 8017416:	3310      	adds	r3, #16
 8017418:	42b3      	cmp	r3, r6
 801741a:	f8c2 c000 	str.w	ip, [r2]
 801741e:	6050      	str	r0, [r2, #4]
 8017420:	6091      	str	r1, [r2, #8]
 8017422:	f102 0210 	add.w	r2, r2, #16
 8017426:	d1ee      	bne.n	8017406 <rmw_init_options_copy+0x2a>
 8017428:	6819      	ldr	r1, [r3, #0]
 801742a:	685b      	ldr	r3, [r3, #4]
 801742c:	480e      	ldr	r0, [pc, #56]	; (8017468 <rmw_init_options_copy+0x8c>)
 801742e:	6053      	str	r3, [r2, #4]
 8017430:	6011      	str	r1, [r2, #0]
 8017432:	f7ff ff41 	bl	80172b8 <get_memory>
 8017436:	b198      	cbz	r0, 8017460 <rmw_init_options_copy+0x84>
 8017438:	6883      	ldr	r3, [r0, #8]
 801743a:	636b      	str	r3, [r5, #52]	; 0x34
 801743c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801743e:	f102 0c10 	add.w	ip, r2, #16
 8017442:	f103 0410 	add.w	r4, r3, #16
 8017446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801744a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801744c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8017450:	2500      	movs	r5, #0
 8017452:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017456:	4628      	mov	r0, r5
 8017458:	bd70      	pop	{r4, r5, r6, pc}
 801745a:	250c      	movs	r5, #12
 801745c:	4628      	mov	r0, r5
 801745e:	bd70      	pop	{r4, r5, r6, pc}
 8017460:	2501      	movs	r5, #1
 8017462:	e7ca      	b.n	80173fa <rmw_init_options_copy+0x1e>
 8017464:	0801cad4 	.word	0x0801cad4
 8017468:	2001c7b4 	.word	0x2001c7b4

0801746c <rmw_init_options_fini>:
 801746c:	2800      	cmp	r0, #0
 801746e:	d03d      	beq.n	80174ec <rmw_init_options_fini+0x80>
 8017470:	b510      	push	{r4, lr}
 8017472:	4604      	mov	r4, r0
 8017474:	b08e      	sub	sp, #56	; 0x38
 8017476:	3020      	adds	r0, #32
 8017478:	f7f8 fede 	bl	8010238 <rcutils_allocator_is_valid>
 801747c:	b360      	cbz	r0, 80174d8 <rmw_init_options_fini+0x6c>
 801747e:	68a0      	ldr	r0, [r4, #8]
 8017480:	b120      	cbz	r0, 801748c <rmw_init_options_fini+0x20>
 8017482:	4b1c      	ldr	r3, [pc, #112]	; (80174f4 <rmw_init_options_fini+0x88>)
 8017484:	6819      	ldr	r1, [r3, #0]
 8017486:	f7e8 fea3 	bl	80001d0 <strcmp>
 801748a:	bb68      	cbnz	r0, 80174e8 <rmw_init_options_fini+0x7c>
 801748c:	4b1a      	ldr	r3, [pc, #104]	; (80174f8 <rmw_init_options_fini+0x8c>)
 801748e:	6819      	ldr	r1, [r3, #0]
 8017490:	b331      	cbz	r1, 80174e0 <rmw_init_options_fini+0x74>
 8017492:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017494:	e001      	b.n	801749a <rmw_init_options_fini+0x2e>
 8017496:	6849      	ldr	r1, [r1, #4]
 8017498:	b311      	cbz	r1, 80174e0 <rmw_init_options_fini+0x74>
 801749a:	688b      	ldr	r3, [r1, #8]
 801749c:	429a      	cmp	r2, r3
 801749e:	d1fa      	bne.n	8017496 <rmw_init_options_fini+0x2a>
 80174a0:	4815      	ldr	r0, [pc, #84]	; (80174f8 <rmw_init_options_fini+0x8c>)
 80174a2:	f7ff ff19 	bl	80172d8 <put_memory>
 80174a6:	4668      	mov	r0, sp
 80174a8:	f7ff fdb2 	bl	8017010 <rmw_get_zero_initialized_init_options>
 80174ac:	46ee      	mov	lr, sp
 80174ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80174b2:	46a4      	mov	ip, r4
 80174b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80174bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80174c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80174cc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80174d0:	2300      	movs	r3, #0
 80174d2:	4618      	mov	r0, r3
 80174d4:	b00e      	add	sp, #56	; 0x38
 80174d6:	bd10      	pop	{r4, pc}
 80174d8:	230b      	movs	r3, #11
 80174da:	4618      	mov	r0, r3
 80174dc:	b00e      	add	sp, #56	; 0x38
 80174de:	bd10      	pop	{r4, pc}
 80174e0:	2301      	movs	r3, #1
 80174e2:	4618      	mov	r0, r3
 80174e4:	b00e      	add	sp, #56	; 0x38
 80174e6:	bd10      	pop	{r4, pc}
 80174e8:	230c      	movs	r3, #12
 80174ea:	e7f2      	b.n	80174d2 <rmw_init_options_fini+0x66>
 80174ec:	230b      	movs	r3, #11
 80174ee:	4618      	mov	r0, r3
 80174f0:	4770      	bx	lr
 80174f2:	bf00      	nop
 80174f4:	0801cad4 	.word	0x0801cad4
 80174f8:	2001c7b4 	.word	0x2001c7b4

080174fc <rmw_init>:
 80174fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017500:	b083      	sub	sp, #12
 8017502:	2800      	cmp	r0, #0
 8017504:	f000 80d3 	beq.w	80176ae <rmw_init+0x1b2>
 8017508:	460e      	mov	r6, r1
 801750a:	2900      	cmp	r1, #0
 801750c:	f000 80cf 	beq.w	80176ae <rmw_init+0x1b2>
 8017510:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017512:	4605      	mov	r5, r0
 8017514:	2b00      	cmp	r3, #0
 8017516:	f000 80ca 	beq.w	80176ae <rmw_init+0x1b2>
 801751a:	4b78      	ldr	r3, [pc, #480]	; (80176fc <rmw_init+0x200>)
 801751c:	6880      	ldr	r0, [r0, #8]
 801751e:	681f      	ldr	r7, [r3, #0]
 8017520:	b128      	cbz	r0, 801752e <rmw_init+0x32>
 8017522:	4639      	mov	r1, r7
 8017524:	f7e8 fe54 	bl	80001d0 <strcmp>
 8017528:	2800      	cmp	r0, #0
 801752a:	f040 80ca 	bne.w	80176c2 <rmw_init+0x1c6>
 801752e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017532:	4c73      	ldr	r4, [pc, #460]	; (8017700 <rmw_init+0x204>)
 8017534:	4973      	ldr	r1, [pc, #460]	; (8017704 <rmw_init+0x208>)
 8017536:	4874      	ldr	r0, [pc, #464]	; (8017708 <rmw_init+0x20c>)
 8017538:	60b7      	str	r7, [r6, #8]
 801753a:	e9c6 2300 	strd	r2, r3, [r6]
 801753e:	68eb      	ldr	r3, [r5, #12]
 8017540:	64b3      	str	r3, [r6, #72]	; 0x48
 8017542:	2201      	movs	r2, #1
 8017544:	f7f9 f90a 	bl	801075c <rmw_uxrce_init_session_memory>
 8017548:	4620      	mov	r0, r4
 801754a:	4970      	ldr	r1, [pc, #448]	; (801770c <rmw_init+0x210>)
 801754c:	2204      	movs	r2, #4
 801754e:	f7f9 f945 	bl	80107dc <rmw_uxrce_init_static_input_buffer_memory>
 8017552:	f04f 0800 	mov.w	r8, #0
 8017556:	486c      	ldr	r0, [pc, #432]	; (8017708 <rmw_init+0x20c>)
 8017558:	f884 800d 	strb.w	r8, [r4, #13]
 801755c:	f7ff feac 	bl	80172b8 <get_memory>
 8017560:	2800      	cmp	r0, #0
 8017562:	f000 80a9 	beq.w	80176b8 <rmw_init+0x1bc>
 8017566:	6884      	ldr	r4, [r0, #8]
 8017568:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801756a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801756c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8017570:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8017574:	9101      	str	r1, [sp, #4]
 8017576:	6a00      	ldr	r0, [r0, #32]
 8017578:	9000      	str	r0, [sp, #0]
 801757a:	f104 0910 	add.w	r9, r4, #16
 801757e:	4661      	mov	r1, ip
 8017580:	4648      	mov	r0, r9
 8017582:	f000 ff29 	bl	80183d8 <uxr_set_custom_transport_callbacks>
 8017586:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801758a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801758e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8017592:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8017596:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801759a:	495d      	ldr	r1, [pc, #372]	; (8017710 <rmw_init+0x214>)
 801759c:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 80175a0:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 80175a4:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 80175a8:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 80175ac:	4859      	ldr	r0, [pc, #356]	; (8017714 <rmw_init+0x218>)
 80175ae:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 80175b2:	2201      	movs	r2, #1
 80175b4:	64f4      	str	r4, [r6, #76]	; 0x4c
 80175b6:	f7f9 f8b1 	bl	801071c <rmw_uxrce_init_node_memory>
 80175ba:	4957      	ldr	r1, [pc, #348]	; (8017718 <rmw_init+0x21c>)
 80175bc:	4857      	ldr	r0, [pc, #348]	; (801771c <rmw_init+0x220>)
 80175be:	2205      	movs	r2, #5
 80175c0:	f7f9 f88c 	bl	80106dc <rmw_uxrce_init_subscription_memory>
 80175c4:	4956      	ldr	r1, [pc, #344]	; (8017720 <rmw_init+0x224>)
 80175c6:	4857      	ldr	r0, [pc, #348]	; (8017724 <rmw_init+0x228>)
 80175c8:	220a      	movs	r2, #10
 80175ca:	f7f9 f867 	bl	801069c <rmw_uxrce_init_publisher_memory>
 80175ce:	4956      	ldr	r1, [pc, #344]	; (8017728 <rmw_init+0x22c>)
 80175d0:	4856      	ldr	r0, [pc, #344]	; (801772c <rmw_init+0x230>)
 80175d2:	2201      	movs	r2, #1
 80175d4:	f7f9 f822 	bl	801061c <rmw_uxrce_init_service_memory>
 80175d8:	4955      	ldr	r1, [pc, #340]	; (8017730 <rmw_init+0x234>)
 80175da:	4856      	ldr	r0, [pc, #344]	; (8017734 <rmw_init+0x238>)
 80175dc:	2201      	movs	r2, #1
 80175de:	f7f9 f83d 	bl	801065c <rmw_uxrce_init_client_memory>
 80175e2:	4955      	ldr	r1, [pc, #340]	; (8017738 <rmw_init+0x23c>)
 80175e4:	4855      	ldr	r0, [pc, #340]	; (801773c <rmw_init+0x240>)
 80175e6:	220f      	movs	r2, #15
 80175e8:	f7f9 f8d8 	bl	801079c <rmw_uxrce_init_topic_memory>
 80175ec:	4954      	ldr	r1, [pc, #336]	; (8017740 <rmw_init+0x244>)
 80175ee:	4855      	ldr	r0, [pc, #340]	; (8017744 <rmw_init+0x248>)
 80175f0:	2203      	movs	r2, #3
 80175f2:	f7f9 f913 	bl	801081c <rmw_uxrce_init_init_options_impl_memory>
 80175f6:	4954      	ldr	r1, [pc, #336]	; (8017748 <rmw_init+0x24c>)
 80175f8:	4854      	ldr	r0, [pc, #336]	; (801774c <rmw_init+0x250>)
 80175fa:	2204      	movs	r2, #4
 80175fc:	f7f9 f92e 	bl	801085c <rmw_uxrce_init_wait_set_memory>
 8017600:	4953      	ldr	r1, [pc, #332]	; (8017750 <rmw_init+0x254>)
 8017602:	4854      	ldr	r0, [pc, #336]	; (8017754 <rmw_init+0x258>)
 8017604:	2204      	movs	r2, #4
 8017606:	f7f9 f949 	bl	801089c <rmw_uxrce_init_guard_condition_memory>
 801760a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801760c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801760e:	4642      	mov	r2, r8
 8017610:	f000 fb18 	bl	8017c44 <rmw_uxrce_transport_init>
 8017614:	4607      	mov	r7, r0
 8017616:	2800      	cmp	r0, #0
 8017618:	d158      	bne.n	80176cc <rmw_init+0x1d0>
 801761a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801761c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8017620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017622:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8017626:	4628      	mov	r0, r5
 8017628:	f7fc f84e 	bl	80136c8 <uxr_init_session>
 801762c:	494a      	ldr	r1, [pc, #296]	; (8017758 <rmw_init+0x25c>)
 801762e:	4622      	mov	r2, r4
 8017630:	4628      	mov	r0, r5
 8017632:	f7fc f86d 	bl	8013710 <uxr_set_topic_callback>
 8017636:	4949      	ldr	r1, [pc, #292]	; (801775c <rmw_init+0x260>)
 8017638:	463a      	mov	r2, r7
 801763a:	4628      	mov	r0, r5
 801763c:	f7fc f864 	bl	8013708 <uxr_set_status_callback>
 8017640:	4947      	ldr	r1, [pc, #284]	; (8017760 <rmw_init+0x264>)
 8017642:	463a      	mov	r2, r7
 8017644:	4628      	mov	r0, r5
 8017646:	f7fc f867 	bl	8013718 <uxr_set_request_callback>
 801764a:	4946      	ldr	r1, [pc, #280]	; (8017764 <rmw_init+0x268>)
 801764c:	463a      	mov	r2, r7
 801764e:	4628      	mov	r0, r5
 8017650:	f7fc f866 	bl	8013720 <uxr_set_reply_callback>
 8017654:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017658:	2304      	movs	r3, #4
 801765a:	0092      	lsls	r2, r2, #2
 801765c:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8017660:	4628      	mov	r0, r5
 8017662:	f7fc f89b 	bl	801379c <uxr_create_input_reliable_stream>
 8017666:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801766a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 801766e:	0092      	lsls	r2, r2, #2
 8017670:	2304      	movs	r3, #4
 8017672:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8017676:	4628      	mov	r0, r5
 8017678:	f7fc f868 	bl	801374c <uxr_create_output_reliable_stream>
 801767c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8017680:	4628      	mov	r0, r5
 8017682:	f7fc f885 	bl	8013790 <uxr_create_input_best_effort_stream>
 8017686:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 801768a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801768e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017692:	3114      	adds	r1, #20
 8017694:	4628      	mov	r0, r5
 8017696:	f7fc f847 	bl	8013728 <uxr_create_output_best_effort_stream>
 801769a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801769e:	4628      	mov	r0, r5
 80176a0:	f7fc fd98 	bl	80141d4 <uxr_create_session>
 80176a4:	b1f8      	cbz	r0, 80176e6 <rmw_init+0x1ea>
 80176a6:	4638      	mov	r0, r7
 80176a8:	b003      	add	sp, #12
 80176aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176ae:	270b      	movs	r7, #11
 80176b0:	4638      	mov	r0, r7
 80176b2:	b003      	add	sp, #12
 80176b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176b8:	2701      	movs	r7, #1
 80176ba:	4638      	mov	r0, r7
 80176bc:	b003      	add	sp, #12
 80176be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176c2:	270c      	movs	r7, #12
 80176c4:	4638      	mov	r0, r7
 80176c6:	b003      	add	sp, #12
 80176c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176cc:	4648      	mov	r0, r9
 80176ce:	f000 fec5 	bl	801845c <uxr_close_custom_transport>
 80176d2:	480d      	ldr	r0, [pc, #52]	; (8017708 <rmw_init+0x20c>)
 80176d4:	4621      	mov	r1, r4
 80176d6:	f7ff fdff 	bl	80172d8 <put_memory>
 80176da:	4638      	mov	r0, r7
 80176dc:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 80176e0:	b003      	add	sp, #12
 80176e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176e6:	4648      	mov	r0, r9
 80176e8:	f000 feb8 	bl	801845c <uxr_close_custom_transport>
 80176ec:	4806      	ldr	r0, [pc, #24]	; (8017708 <rmw_init+0x20c>)
 80176ee:	4621      	mov	r1, r4
 80176f0:	f7ff fdf2 	bl	80172d8 <put_memory>
 80176f4:	64f7      	str	r7, [r6, #76]	; 0x4c
 80176f6:	2701      	movs	r7, #1
 80176f8:	e7d5      	b.n	80176a6 <rmw_init+0x1aa>
 80176fa:	bf00      	nop
 80176fc:	0801cad4 	.word	0x0801cad4
 8017700:	2001c804 	.word	0x2001c804
 8017704:	20018ab0 	.word	0x20018ab0
 8017708:	2001c7f4 	.word	0x2001c7f4
 801770c:	2001a058 	.word	0x2001a058
 8017710:	200180d4 	.word	0x200180d4
 8017714:	2001c7c4 	.word	0x2001c7c4
 8017718:	2001c158 	.word	0x2001c158
 801771c:	2001c814 	.word	0x2001c814
 8017720:	20018178 	.word	0x20018178
 8017724:	2001c7d4 	.word	0x2001c7d4
 8017728:	200189e8 	.word	0x200189e8
 801772c:	2001c7e4 	.word	0x2001c7e4
 8017730:	20017f08 	.word	0x20017f08
 8017734:	20017ef8 	.word	0x20017ef8
 8017738:	2001c590 	.word	0x2001c590
 801773c:	2001c824 	.word	0x2001c824
 8017740:	20018050 	.word	0x20018050
 8017744:	2001c7b4 	.word	0x2001c7b4
 8017748:	2001c734 	.word	0x2001c734
 801774c:	2001c834 	.word	0x2001c834
 8017750:	20017fd0 	.word	0x20017fd0
 8017754:	2001c7a4 	.word	0x2001c7a4
 8017758:	0801a055 	.word	0x0801a055
 801775c:	0801a04d 	.word	0x0801a04d
 8017760:	0801a0ed 	.word	0x0801a0ed
 8017764:	0801a189 	.word	0x0801a189

08017768 <rmw_context_fini>:
 8017768:	4b17      	ldr	r3, [pc, #92]	; (80177c8 <rmw_context_fini+0x60>)
 801776a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801776c:	b570      	push	{r4, r5, r6, lr}
 801776e:	681c      	ldr	r4, [r3, #0]
 8017770:	4605      	mov	r5, r0
 8017772:	b334      	cbz	r4, 80177c2 <rmw_context_fini+0x5a>
 8017774:	2600      	movs	r6, #0
 8017776:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801777a:	6902      	ldr	r2, [r0, #16]
 801777c:	428a      	cmp	r2, r1
 801777e:	d018      	beq.n	80177b2 <rmw_context_fini+0x4a>
 8017780:	2c00      	cmp	r4, #0
 8017782:	d1f8      	bne.n	8017776 <rmw_context_fini+0xe>
 8017784:	b189      	cbz	r1, 80177aa <rmw_context_fini+0x42>
 8017786:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 801778a:	789b      	ldrb	r3, [r3, #2]
 801778c:	2b01      	cmp	r3, #1
 801778e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8017792:	bf14      	ite	ne
 8017794:	210a      	movne	r1, #10
 8017796:	2100      	moveq	r1, #0
 8017798:	f7fc fcf4 	bl	8014184 <uxr_delete_session_retries>
 801779c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 801779e:	f7f9 f89d 	bl	80108dc <rmw_uxrce_fini_session_memory>
 80177a2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80177a4:	3010      	adds	r0, #16
 80177a6:	f000 fe59 	bl	801845c <uxr_close_custom_transport>
 80177aa:	2300      	movs	r3, #0
 80177ac:	64eb      	str	r3, [r5, #76]	; 0x4c
 80177ae:	4630      	mov	r0, r6
 80177b0:	bd70      	pop	{r4, r5, r6, pc}
 80177b2:	3018      	adds	r0, #24
 80177b4:	f000 f922 	bl	80179fc <rmw_destroy_node>
 80177b8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80177ba:	4606      	mov	r6, r0
 80177bc:	2c00      	cmp	r4, #0
 80177be:	d1da      	bne.n	8017776 <rmw_context_fini+0xe>
 80177c0:	e7e0      	b.n	8017784 <rmw_context_fini+0x1c>
 80177c2:	4626      	mov	r6, r4
 80177c4:	e7de      	b.n	8017784 <rmw_context_fini+0x1c>
 80177c6:	bf00      	nop
 80177c8:	2001c7c4 	.word	0x2001c7c4

080177cc <create_topic>:
 80177cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177d0:	4605      	mov	r5, r0
 80177d2:	b084      	sub	sp, #16
 80177d4:	482c      	ldr	r0, [pc, #176]	; (8017888 <create_topic+0xbc>)
 80177d6:	460f      	mov	r7, r1
 80177d8:	4616      	mov	r6, r2
 80177da:	f7ff fd6d 	bl	80172b8 <get_memory>
 80177de:	4604      	mov	r4, r0
 80177e0:	2800      	cmp	r0, #0
 80177e2:	d038      	beq.n	8017856 <create_topic+0x8a>
 80177e4:	692b      	ldr	r3, [r5, #16]
 80177e6:	6884      	ldr	r4, [r0, #8]
 80177e8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8017890 <create_topic+0xc4>
 80177ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80177f0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80177f4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 80177f8:	1c42      	adds	r2, r0, #1
 80177fa:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 80177fe:	2102      	movs	r1, #2
 8017800:	f7fb fea4 	bl	801354c <uxr_object_id>
 8017804:	223c      	movs	r2, #60	; 0x3c
 8017806:	6120      	str	r0, [r4, #16]
 8017808:	4641      	mov	r1, r8
 801780a:	4638      	mov	r0, r7
 801780c:	f7f9 f99e 	bl	8010b4c <generate_topic_name>
 8017810:	4607      	mov	r7, r0
 8017812:	b320      	cbz	r0, 801785e <create_topic+0x92>
 8017814:	4f1d      	ldr	r7, [pc, #116]	; (801788c <create_topic+0xc0>)
 8017816:	4630      	mov	r0, r6
 8017818:	2264      	movs	r2, #100	; 0x64
 801781a:	4639      	mov	r1, r7
 801781c:	f7f9 f966 	bl	8010aec <generate_type_name>
 8017820:	4606      	mov	r6, r0
 8017822:	b320      	cbz	r0, 801786e <create_topic+0xa2>
 8017824:	6928      	ldr	r0, [r5, #16]
 8017826:	2306      	movs	r3, #6
 8017828:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801782c:	f8cd 8000 	str.w	r8, [sp]
 8017830:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8017834:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017838:	696b      	ldr	r3, [r5, #20]
 801783a:	6811      	ldr	r1, [r2, #0]
 801783c:	6922      	ldr	r2, [r4, #16]
 801783e:	f7fb fda9 	bl	8013394 <uxr_buffer_create_topic_bin>
 8017842:	4602      	mov	r2, r0
 8017844:	6928      	ldr	r0, [r5, #16]
 8017846:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801784a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801784e:	f7f9 f917 	bl	8010a80 <run_xrce_session>
 8017852:	4605      	mov	r5, r0
 8017854:	b198      	cbz	r0, 801787e <create_topic+0xb2>
 8017856:	4620      	mov	r0, r4
 8017858:	b004      	add	sp, #16
 801785a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801785e:	4620      	mov	r0, r4
 8017860:	f7f9 f8b2 	bl	80109c8 <rmw_uxrce_fini_topic_memory>
 8017864:	463c      	mov	r4, r7
 8017866:	4620      	mov	r0, r4
 8017868:	b004      	add	sp, #16
 801786a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801786e:	4620      	mov	r0, r4
 8017870:	f7f9 f8aa 	bl	80109c8 <rmw_uxrce_fini_topic_memory>
 8017874:	4634      	mov	r4, r6
 8017876:	4620      	mov	r0, r4
 8017878:	b004      	add	sp, #16
 801787a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801787e:	4620      	mov	r0, r4
 8017880:	f7f9 f8a2 	bl	80109c8 <rmw_uxrce_fini_topic_memory>
 8017884:	462c      	mov	r4, r5
 8017886:	e7e6      	b.n	8017856 <create_topic+0x8a>
 8017888:	2001c824 	.word	0x2001c824
 801788c:	2001c8a0 	.word	0x2001c8a0
 8017890:	2001c864 	.word	0x2001c864

08017894 <destroy_topic>:
 8017894:	b538      	push	{r3, r4, r5, lr}
 8017896:	6985      	ldr	r5, [r0, #24]
 8017898:	b1d5      	cbz	r5, 80178d0 <destroy_topic+0x3c>
 801789a:	4604      	mov	r4, r0
 801789c:	6928      	ldr	r0, [r5, #16]
 801789e:	6922      	ldr	r2, [r4, #16]
 80178a0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80178a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80178a8:	6819      	ldr	r1, [r3, #0]
 80178aa:	f7fb fcf5 	bl	8013298 <uxr_buffer_delete_entity>
 80178ae:	4602      	mov	r2, r0
 80178b0:	6928      	ldr	r0, [r5, #16]
 80178b2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80178b6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80178ba:	f7f9 f8e1 	bl	8010a80 <run_xrce_session>
 80178be:	2800      	cmp	r0, #0
 80178c0:	4620      	mov	r0, r4
 80178c2:	bf14      	ite	ne
 80178c4:	2400      	movne	r4, #0
 80178c6:	2402      	moveq	r4, #2
 80178c8:	f7f9 f87e 	bl	80109c8 <rmw_uxrce_fini_topic_memory>
 80178cc:	4620      	mov	r0, r4
 80178ce:	bd38      	pop	{r3, r4, r5, pc}
 80178d0:	2401      	movs	r4, #1
 80178d2:	4620      	mov	r0, r4
 80178d4:	bd38      	pop	{r3, r4, r5, pc}
 80178d6:	bf00      	nop

080178d8 <create_node>:
 80178d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178dc:	b083      	sub	sp, #12
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d05f      	beq.n	80179a2 <create_node+0xca>
 80178e2:	4606      	mov	r6, r0
 80178e4:	4835      	ldr	r0, [pc, #212]	; (80179bc <create_node+0xe4>)
 80178e6:	460f      	mov	r7, r1
 80178e8:	4690      	mov	r8, r2
 80178ea:	461d      	mov	r5, r3
 80178ec:	f7ff fce4 	bl	80172b8 <get_memory>
 80178f0:	2800      	cmp	r0, #0
 80178f2:	d056      	beq.n	80179a2 <create_node+0xca>
 80178f4:	6884      	ldr	r4, [r0, #8]
 80178f6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80178f8:	6123      	str	r3, [r4, #16]
 80178fa:	f7ff fd01 	bl	8017300 <rmw_get_implementation_identifier>
 80178fe:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8017902:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8017906:	f8c4 9020 	str.w	r9, [r4, #32]
 801790a:	4630      	mov	r0, r6
 801790c:	f7e8 fc6a 	bl	80001e4 <strlen>
 8017910:	1c42      	adds	r2, r0, #1
 8017912:	2a3c      	cmp	r2, #60	; 0x3c
 8017914:	f104 0518 	add.w	r5, r4, #24
 8017918:	d840      	bhi.n	801799c <create_node+0xc4>
 801791a:	4648      	mov	r0, r9
 801791c:	4631      	mov	r1, r6
 801791e:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8017922:	f002 ff4b 	bl	801a7bc <memcpy>
 8017926:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 801792a:	4638      	mov	r0, r7
 801792c:	f7e8 fc5a 	bl	80001e4 <strlen>
 8017930:	1c42      	adds	r2, r0, #1
 8017932:	2a3c      	cmp	r2, #60	; 0x3c
 8017934:	d832      	bhi.n	801799c <create_node+0xc4>
 8017936:	4639      	mov	r1, r7
 8017938:	4648      	mov	r0, r9
 801793a:	f002 ff3f 	bl	801a7bc <memcpy>
 801793e:	6923      	ldr	r3, [r4, #16]
 8017940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017944:	2101      	movs	r1, #1
 8017946:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 801794a:	1842      	adds	r2, r0, r1
 801794c:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8017950:	f7fb fdfc 	bl	801354c <uxr_object_id>
 8017954:	6160      	str	r0, [r4, #20]
 8017956:	783b      	ldrb	r3, [r7, #0]
 8017958:	2b2f      	cmp	r3, #47	; 0x2f
 801795a:	d127      	bne.n	80179ac <create_node+0xd4>
 801795c:	787b      	ldrb	r3, [r7, #1]
 801795e:	bb2b      	cbnz	r3, 80179ac <create_node+0xd4>
 8017960:	4a17      	ldr	r2, [pc, #92]	; (80179c0 <create_node+0xe8>)
 8017962:	4818      	ldr	r0, [pc, #96]	; (80179c4 <create_node+0xec>)
 8017964:	4633      	mov	r3, r6
 8017966:	213c      	movs	r1, #60	; 0x3c
 8017968:	f003 f93a 	bl	801abe0 <sniprintf>
 801796c:	6920      	ldr	r0, [r4, #16]
 801796e:	4915      	ldr	r1, [pc, #84]	; (80179c4 <create_node+0xec>)
 8017970:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8017974:	9100      	str	r1, [sp, #0]
 8017976:	2106      	movs	r1, #6
 8017978:	9101      	str	r1, [sp, #4]
 801797a:	6811      	ldr	r1, [r2, #0]
 801797c:	6962      	ldr	r2, [r4, #20]
 801797e:	fa1f f388 	uxth.w	r3, r8
 8017982:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017986:	f7fb fcd3 	bl	8013330 <uxr_buffer_create_participant_bin>
 801798a:	4602      	mov	r2, r0
 801798c:	6920      	ldr	r0, [r4, #16]
 801798e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8017992:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8017996:	f7f9 f873 	bl	8010a80 <run_xrce_session>
 801799a:	b918      	cbnz	r0, 80179a4 <create_node+0xcc>
 801799c:	4628      	mov	r0, r5
 801799e:	f7f8 ffa3 	bl	80108e8 <rmw_uxrce_fini_node_memory>
 80179a2:	2500      	movs	r5, #0
 80179a4:	4628      	mov	r0, r5
 80179a6:	b003      	add	sp, #12
 80179a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179ac:	4a06      	ldr	r2, [pc, #24]	; (80179c8 <create_node+0xf0>)
 80179ae:	9600      	str	r6, [sp, #0]
 80179b0:	463b      	mov	r3, r7
 80179b2:	213c      	movs	r1, #60	; 0x3c
 80179b4:	4803      	ldr	r0, [pc, #12]	; (80179c4 <create_node+0xec>)
 80179b6:	f003 f913 	bl	801abe0 <sniprintf>
 80179ba:	e7d7      	b.n	801796c <create_node+0x94>
 80179bc:	2001c7c4 	.word	0x2001c7c4
 80179c0:	0801c018 	.word	0x0801c018
 80179c4:	2001c904 	.word	0x2001c904
 80179c8:	0801c67c 	.word	0x0801c67c

080179cc <rmw_create_node>:
 80179cc:	b199      	cbz	r1, 80179f6 <rmw_create_node+0x2a>
 80179ce:	780b      	ldrb	r3, [r1, #0]
 80179d0:	468c      	mov	ip, r1
 80179d2:	b183      	cbz	r3, 80179f6 <rmw_create_node+0x2a>
 80179d4:	b410      	push	{r4}
 80179d6:	4614      	mov	r4, r2
 80179d8:	b14a      	cbz	r2, 80179ee <rmw_create_node+0x22>
 80179da:	7813      	ldrb	r3, [r2, #0]
 80179dc:	b13b      	cbz	r3, 80179ee <rmw_create_node+0x22>
 80179de:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80179e0:	4603      	mov	r3, r0
 80179e2:	4621      	mov	r1, r4
 80179e4:	4660      	mov	r0, ip
 80179e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179ea:	f7ff bf75 	b.w	80178d8 <create_node>
 80179ee:	2000      	movs	r0, #0
 80179f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179f4:	4770      	bx	lr
 80179f6:	2000      	movs	r0, #0
 80179f8:	4770      	bx	lr
 80179fa:	bf00      	nop

080179fc <rmw_destroy_node>:
 80179fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179fe:	2800      	cmp	r0, #0
 8017a00:	d066      	beq.n	8017ad0 <rmw_destroy_node+0xd4>
 8017a02:	4607      	mov	r7, r0
 8017a04:	6800      	ldr	r0, [r0, #0]
 8017a06:	b128      	cbz	r0, 8017a14 <rmw_destroy_node+0x18>
 8017a08:	4b34      	ldr	r3, [pc, #208]	; (8017adc <rmw_destroy_node+0xe0>)
 8017a0a:	6819      	ldr	r1, [r3, #0]
 8017a0c:	f7e8 fbe0 	bl	80001d0 <strcmp>
 8017a10:	2800      	cmp	r0, #0
 8017a12:	d15d      	bne.n	8017ad0 <rmw_destroy_node+0xd4>
 8017a14:	687c      	ldr	r4, [r7, #4]
 8017a16:	2c00      	cmp	r4, #0
 8017a18:	d05a      	beq.n	8017ad0 <rmw_destroy_node+0xd4>
 8017a1a:	4b31      	ldr	r3, [pc, #196]	; (8017ae0 <rmw_destroy_node+0xe4>)
 8017a1c:	681d      	ldr	r5, [r3, #0]
 8017a1e:	2d00      	cmp	r5, #0
 8017a20:	d059      	beq.n	8017ad6 <rmw_destroy_node+0xda>
 8017a22:	2600      	movs	r6, #0
 8017a24:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8017a28:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8017a2c:	429c      	cmp	r4, r3
 8017a2e:	d047      	beq.n	8017ac0 <rmw_destroy_node+0xc4>
 8017a30:	2d00      	cmp	r5, #0
 8017a32:	d1f7      	bne.n	8017a24 <rmw_destroy_node+0x28>
 8017a34:	4b2b      	ldr	r3, [pc, #172]	; (8017ae4 <rmw_destroy_node+0xe8>)
 8017a36:	681d      	ldr	r5, [r3, #0]
 8017a38:	b15d      	cbz	r5, 8017a52 <rmw_destroy_node+0x56>
 8017a3a:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8017a3e:	6a0b      	ldr	r3, [r1, #32]
 8017a40:	429c      	cmp	r4, r3
 8017a42:	d1f9      	bne.n	8017a38 <rmw_destroy_node+0x3c>
 8017a44:	317c      	adds	r1, #124	; 0x7c
 8017a46:	4638      	mov	r0, r7
 8017a48:	f000 f89c 	bl	8017b84 <rmw_destroy_subscription>
 8017a4c:	4606      	mov	r6, r0
 8017a4e:	2d00      	cmp	r5, #0
 8017a50:	d1f3      	bne.n	8017a3a <rmw_destroy_node+0x3e>
 8017a52:	4b25      	ldr	r3, [pc, #148]	; (8017ae8 <rmw_destroy_node+0xec>)
 8017a54:	681d      	ldr	r5, [r3, #0]
 8017a56:	b15d      	cbz	r5, 8017a70 <rmw_destroy_node+0x74>
 8017a58:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8017a5c:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8017a5e:	429c      	cmp	r4, r3
 8017a60:	d1f9      	bne.n	8017a56 <rmw_destroy_node+0x5a>
 8017a62:	317c      	adds	r1, #124	; 0x7c
 8017a64:	4638      	mov	r0, r7
 8017a66:	f000 f849 	bl	8017afc <rmw_destroy_service>
 8017a6a:	4606      	mov	r6, r0
 8017a6c:	2d00      	cmp	r5, #0
 8017a6e:	d1f3      	bne.n	8017a58 <rmw_destroy_node+0x5c>
 8017a70:	4b1e      	ldr	r3, [pc, #120]	; (8017aec <rmw_destroy_node+0xf0>)
 8017a72:	681d      	ldr	r5, [r3, #0]
 8017a74:	b15d      	cbz	r5, 8017a8e <rmw_destroy_node+0x92>
 8017a76:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8017a7a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8017a7c:	429c      	cmp	r4, r3
 8017a7e:	d1f9      	bne.n	8017a74 <rmw_destroy_node+0x78>
 8017a80:	317c      	adds	r1, #124	; 0x7c
 8017a82:	4638      	mov	r0, r7
 8017a84:	f002 fbca 	bl	801a21c <rmw_destroy_client>
 8017a88:	4606      	mov	r6, r0
 8017a8a:	2d00      	cmp	r5, #0
 8017a8c:	d1f3      	bne.n	8017a76 <rmw_destroy_node+0x7a>
 8017a8e:	6920      	ldr	r0, [r4, #16]
 8017a90:	6962      	ldr	r2, [r4, #20]
 8017a92:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017a96:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017a9a:	6819      	ldr	r1, [r3, #0]
 8017a9c:	f7fb fbfc 	bl	8013298 <uxr_buffer_delete_entity>
 8017aa0:	4602      	mov	r2, r0
 8017aa2:	6920      	ldr	r0, [r4, #16]
 8017aa4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017aa8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017aac:	f7f8 ffe8 	bl	8010a80 <run_xrce_session>
 8017ab0:	2800      	cmp	r0, #0
 8017ab2:	bf08      	it	eq
 8017ab4:	2602      	moveq	r6, #2
 8017ab6:	4638      	mov	r0, r7
 8017ab8:	f7f8 ff16 	bl	80108e8 <rmw_uxrce_fini_node_memory>
 8017abc:	4630      	mov	r0, r6
 8017abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ac0:	3184      	adds	r1, #132	; 0x84
 8017ac2:	4638      	mov	r0, r7
 8017ac4:	f7f8 fd58 	bl	8010578 <rmw_destroy_publisher>
 8017ac8:	4606      	mov	r6, r0
 8017aca:	2d00      	cmp	r5, #0
 8017acc:	d1aa      	bne.n	8017a24 <rmw_destroy_node+0x28>
 8017ace:	e7b1      	b.n	8017a34 <rmw_destroy_node+0x38>
 8017ad0:	2601      	movs	r6, #1
 8017ad2:	4630      	mov	r0, r6
 8017ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ad6:	462e      	mov	r6, r5
 8017ad8:	e7ac      	b.n	8017a34 <rmw_destroy_node+0x38>
 8017ada:	bf00      	nop
 8017adc:	0801cad4 	.word	0x0801cad4
 8017ae0:	2001c7d4 	.word	0x2001c7d4
 8017ae4:	2001c814 	.word	0x2001c814
 8017ae8:	2001c7e4 	.word	0x2001c7e4
 8017aec:	20017ef8 	.word	0x20017ef8

08017af0 <rmw_node_get_graph_guard_condition>:
 8017af0:	6843      	ldr	r3, [r0, #4]
 8017af2:	6918      	ldr	r0, [r3, #16]
 8017af4:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8017af8:	4770      	bx	lr
 8017afa:	bf00      	nop

08017afc <rmw_destroy_service>:
 8017afc:	b570      	push	{r4, r5, r6, lr}
 8017afe:	b128      	cbz	r0, 8017b0c <rmw_destroy_service+0x10>
 8017b00:	4604      	mov	r4, r0
 8017b02:	6800      	ldr	r0, [r0, #0]
 8017b04:	460d      	mov	r5, r1
 8017b06:	f7f9 f83b 	bl	8010b80 <is_uxrce_rmw_identifier_valid>
 8017b0a:	b910      	cbnz	r0, 8017b12 <rmw_destroy_service+0x16>
 8017b0c:	2401      	movs	r4, #1
 8017b0e:	4620      	mov	r0, r4
 8017b10:	bd70      	pop	{r4, r5, r6, pc}
 8017b12:	6863      	ldr	r3, [r4, #4]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d0f9      	beq.n	8017b0c <rmw_destroy_service+0x10>
 8017b18:	2d00      	cmp	r5, #0
 8017b1a:	d0f7      	beq.n	8017b0c <rmw_destroy_service+0x10>
 8017b1c:	6828      	ldr	r0, [r5, #0]
 8017b1e:	f7f9 f82f 	bl	8010b80 <is_uxrce_rmw_identifier_valid>
 8017b22:	2800      	cmp	r0, #0
 8017b24:	d0f2      	beq.n	8017b0c <rmw_destroy_service+0x10>
 8017b26:	686e      	ldr	r6, [r5, #4]
 8017b28:	2e00      	cmp	r6, #0
 8017b2a:	d0ef      	beq.n	8017b0c <rmw_destroy_service+0x10>
 8017b2c:	6864      	ldr	r4, [r4, #4]
 8017b2e:	6932      	ldr	r2, [r6, #16]
 8017b30:	6920      	ldr	r0, [r4, #16]
 8017b32:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017b36:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017b3a:	6819      	ldr	r1, [r3, #0]
 8017b3c:	f001 f9c8 	bl	8018ed0 <uxr_buffer_cancel_data>
 8017b40:	4602      	mov	r2, r0
 8017b42:	6920      	ldr	r0, [r4, #16]
 8017b44:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017b48:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017b4c:	f7f8 ff98 	bl	8010a80 <run_xrce_session>
 8017b50:	6920      	ldr	r0, [r4, #16]
 8017b52:	6932      	ldr	r2, [r6, #16]
 8017b54:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017b58:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017b5c:	6819      	ldr	r1, [r3, #0]
 8017b5e:	f7fb fb9b 	bl	8013298 <uxr_buffer_delete_entity>
 8017b62:	4602      	mov	r2, r0
 8017b64:	6920      	ldr	r0, [r4, #16]
 8017b66:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017b6a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017b6e:	f7f8 ff87 	bl	8010a80 <run_xrce_session>
 8017b72:	2800      	cmp	r0, #0
 8017b74:	4628      	mov	r0, r5
 8017b76:	bf14      	ite	ne
 8017b78:	2400      	movne	r4, #0
 8017b7a:	2402      	moveq	r4, #2
 8017b7c:	f7f8 fef8 	bl	8010970 <rmw_uxrce_fini_service_memory>
 8017b80:	e7c5      	b.n	8017b0e <rmw_destroy_service+0x12>
 8017b82:	bf00      	nop

08017b84 <rmw_destroy_subscription>:
 8017b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b86:	b128      	cbz	r0, 8017b94 <rmw_destroy_subscription+0x10>
 8017b88:	4604      	mov	r4, r0
 8017b8a:	6800      	ldr	r0, [r0, #0]
 8017b8c:	460d      	mov	r5, r1
 8017b8e:	f7f8 fff7 	bl	8010b80 <is_uxrce_rmw_identifier_valid>
 8017b92:	b910      	cbnz	r0, 8017b9a <rmw_destroy_subscription+0x16>
 8017b94:	2401      	movs	r4, #1
 8017b96:	4620      	mov	r0, r4
 8017b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b9a:	6863      	ldr	r3, [r4, #4]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d0f9      	beq.n	8017b94 <rmw_destroy_subscription+0x10>
 8017ba0:	2d00      	cmp	r5, #0
 8017ba2:	d0f7      	beq.n	8017b94 <rmw_destroy_subscription+0x10>
 8017ba4:	6828      	ldr	r0, [r5, #0]
 8017ba6:	f7f8 ffeb 	bl	8010b80 <is_uxrce_rmw_identifier_valid>
 8017baa:	2800      	cmp	r0, #0
 8017bac:	d0f2      	beq.n	8017b94 <rmw_destroy_subscription+0x10>
 8017bae:	686c      	ldr	r4, [r5, #4]
 8017bb0:	2c00      	cmp	r4, #0
 8017bb2:	d0ef      	beq.n	8017b94 <rmw_destroy_subscription+0x10>
 8017bb4:	6a26      	ldr	r6, [r4, #32]
 8017bb6:	6962      	ldr	r2, [r4, #20]
 8017bb8:	6930      	ldr	r0, [r6, #16]
 8017bba:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017bbe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017bc2:	6819      	ldr	r1, [r3, #0]
 8017bc4:	f001 f984 	bl	8018ed0 <uxr_buffer_cancel_data>
 8017bc8:	4602      	mov	r2, r0
 8017bca:	6930      	ldr	r0, [r6, #16]
 8017bcc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017bd0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017bd4:	f7f8 ff54 	bl	8010a80 <run_xrce_session>
 8017bd8:	69e0      	ldr	r0, [r4, #28]
 8017bda:	f7ff fe5b 	bl	8017894 <destroy_topic>
 8017bde:	6a23      	ldr	r3, [r4, #32]
 8017be0:	6962      	ldr	r2, [r4, #20]
 8017be2:	6918      	ldr	r0, [r3, #16]
 8017be4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017be8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017bec:	6819      	ldr	r1, [r3, #0]
 8017bee:	f7fb fb53 	bl	8013298 <uxr_buffer_delete_entity>
 8017bf2:	6a23      	ldr	r3, [r4, #32]
 8017bf4:	6922      	ldr	r2, [r4, #16]
 8017bf6:	691b      	ldr	r3, [r3, #16]
 8017bf8:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8017bfc:	4604      	mov	r4, r0
 8017bfe:	6809      	ldr	r1, [r1, #0]
 8017c00:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8017c04:	f7fb fb48 	bl	8013298 <uxr_buffer_delete_entity>
 8017c08:	6937      	ldr	r7, [r6, #16]
 8017c0a:	4622      	mov	r2, r4
 8017c0c:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8017c10:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8017c14:	4604      	mov	r4, r0
 8017c16:	4638      	mov	r0, r7
 8017c18:	f7f8 ff32 	bl	8010a80 <run_xrce_session>
 8017c1c:	6936      	ldr	r6, [r6, #16]
 8017c1e:	4622      	mov	r2, r4
 8017c20:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8017c24:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8017c28:	4604      	mov	r4, r0
 8017c2a:	4630      	mov	r0, r6
 8017c2c:	f7f8 ff28 	bl	8010a80 <run_xrce_session>
 8017c30:	b12c      	cbz	r4, 8017c3e <rmw_destroy_subscription+0xba>
 8017c32:	b120      	cbz	r0, 8017c3e <rmw_destroy_subscription+0xba>
 8017c34:	2400      	movs	r4, #0
 8017c36:	4628      	mov	r0, r5
 8017c38:	f7f8 fe84 	bl	8010944 <rmw_uxrce_fini_subscription_memory>
 8017c3c:	e7ab      	b.n	8017b96 <rmw_destroy_subscription+0x12>
 8017c3e:	2402      	movs	r4, #2
 8017c40:	e7f9      	b.n	8017c36 <rmw_destroy_subscription+0xb2>
 8017c42:	bf00      	nop

08017c44 <rmw_uxrce_transport_init>:
 8017c44:	b508      	push	{r3, lr}
 8017c46:	b108      	cbz	r0, 8017c4c <rmw_uxrce_transport_init+0x8>
 8017c48:	f100 0210 	add.w	r2, r0, #16
 8017c4c:	b139      	cbz	r1, 8017c5e <rmw_uxrce_transport_init+0x1a>
 8017c4e:	6949      	ldr	r1, [r1, #20]
 8017c50:	4610      	mov	r0, r2
 8017c52:	f000 fbcf 	bl	80183f4 <uxr_init_custom_transport>
 8017c56:	f080 0001 	eor.w	r0, r0, #1
 8017c5a:	b2c0      	uxtb	r0, r0
 8017c5c:	bd08      	pop	{r3, pc}
 8017c5e:	4b04      	ldr	r3, [pc, #16]	; (8017c70 <rmw_uxrce_transport_init+0x2c>)
 8017c60:	4610      	mov	r0, r2
 8017c62:	6859      	ldr	r1, [r3, #4]
 8017c64:	f000 fbc6 	bl	80183f4 <uxr_init_custom_transport>
 8017c68:	f080 0001 	eor.w	r0, r0, #1
 8017c6c:	b2c0      	uxtb	r0, r0
 8017c6e:	bd08      	pop	{r3, pc}
 8017c70:	20017edc 	.word	0x20017edc

08017c74 <rmw_uros_epoch_nanos>:
 8017c74:	4b05      	ldr	r3, [pc, #20]	; (8017c8c <rmw_uros_epoch_nanos+0x18>)
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	b123      	cbz	r3, 8017c84 <rmw_uros_epoch_nanos+0x10>
 8017c7a:	6898      	ldr	r0, [r3, #8]
 8017c7c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017c80:	f7fb bda8 	b.w	80137d4 <uxr_epoch_nanos>
 8017c84:	2000      	movs	r0, #0
 8017c86:	2100      	movs	r1, #0
 8017c88:	4770      	bx	lr
 8017c8a:	bf00      	nop
 8017c8c:	2001c7f4 	.word	0x2001c7f4

08017c90 <rosidl_runtime_c__float__Sequence__init>:
 8017c90:	b530      	push	{r4, r5, lr}
 8017c92:	4604      	mov	r4, r0
 8017c94:	b087      	sub	sp, #28
 8017c96:	b130      	cbz	r0, 8017ca6 <rosidl_runtime_c__float__Sequence__init+0x16>
 8017c98:	460d      	mov	r5, r1
 8017c9a:	b931      	cbnz	r1, 8017caa <rosidl_runtime_c__float__Sequence__init+0x1a>
 8017c9c:	4608      	mov	r0, r1
 8017c9e:	e9c4 0500 	strd	r0, r5, [r4]
 8017ca2:	60a5      	str	r5, [r4, #8]
 8017ca4:	2001      	movs	r0, #1
 8017ca6:	b007      	add	sp, #28
 8017ca8:	bd30      	pop	{r4, r5, pc}
 8017caa:	a801      	add	r0, sp, #4
 8017cac:	f7f8 fab6 	bl	801021c <rcutils_get_default_allocator>
 8017cb0:	9b01      	ldr	r3, [sp, #4]
 8017cb2:	9905      	ldr	r1, [sp, #20]
 8017cb4:	00a8      	lsls	r0, r5, #2
 8017cb6:	4798      	blx	r3
 8017cb8:	2800      	cmp	r0, #0
 8017cba:	d1f0      	bne.n	8017c9e <rosidl_runtime_c__float__Sequence__init+0xe>
 8017cbc:	e7f3      	b.n	8017ca6 <rosidl_runtime_c__float__Sequence__init+0x16>
 8017cbe:	bf00      	nop

08017cc0 <rosidl_runtime_c__float__Sequence__fini>:
 8017cc0:	b188      	cbz	r0, 8017ce6 <rosidl_runtime_c__float__Sequence__fini+0x26>
 8017cc2:	b510      	push	{r4, lr}
 8017cc4:	6803      	ldr	r3, [r0, #0]
 8017cc6:	b086      	sub	sp, #24
 8017cc8:	4604      	mov	r4, r0
 8017cca:	b153      	cbz	r3, 8017ce2 <rosidl_runtime_c__float__Sequence__fini+0x22>
 8017ccc:	a801      	add	r0, sp, #4
 8017cce:	f7f8 faa5 	bl	801021c <rcutils_get_default_allocator>
 8017cd2:	9b02      	ldr	r3, [sp, #8]
 8017cd4:	9905      	ldr	r1, [sp, #20]
 8017cd6:	6820      	ldr	r0, [r4, #0]
 8017cd8:	4798      	blx	r3
 8017cda:	2300      	movs	r3, #0
 8017cdc:	e9c4 3300 	strd	r3, r3, [r4]
 8017ce0:	60a3      	str	r3, [r4, #8]
 8017ce2:	b006      	add	sp, #24
 8017ce4:	bd10      	pop	{r4, pc}
 8017ce6:	4770      	bx	lr

08017ce8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8017ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cec:	6805      	ldr	r5, [r0, #0]
 8017cee:	4604      	mov	r4, r0
 8017cf0:	4628      	mov	r0, r5
 8017cf2:	460e      	mov	r6, r1
 8017cf4:	f7e8 fa6c 	bl	80001d0 <strcmp>
 8017cf8:	b1c8      	cbz	r0, 8017d2e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8017cfa:	4b11      	ldr	r3, [pc, #68]	; (8017d40 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	429d      	cmp	r5, r3
 8017d00:	d112      	bne.n	8017d28 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8017d02:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017d06:	f8d8 4000 	ldr.w	r4, [r8]
 8017d0a:	b16c      	cbz	r4, 8017d28 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8017d0c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017d10:	2700      	movs	r7, #0
 8017d12:	3d04      	subs	r5, #4
 8017d14:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8017d18:	4631      	mov	r1, r6
 8017d1a:	f7e8 fa59 	bl	80001d0 <strcmp>
 8017d1e:	00bb      	lsls	r3, r7, #2
 8017d20:	b140      	cbz	r0, 8017d34 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8017d22:	3701      	adds	r7, #1
 8017d24:	42bc      	cmp	r4, r7
 8017d26:	d1f5      	bne.n	8017d14 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8017d28:	2000      	movs	r0, #0
 8017d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d2e:	4620      	mov	r0, r4
 8017d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d34:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d3c:	58d3      	ldr	r3, [r2, r3]
 8017d3e:	4718      	bx	r3
 8017d40:	2000087c 	.word	0x2000087c

08017d44 <sensor_msgs__msg__BatteryState__init>:
 8017d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d48:	4605      	mov	r5, r0
 8017d4a:	2800      	cmp	r0, #0
 8017d4c:	d048      	beq.n	8017de0 <sensor_msgs__msg__BatteryState__init+0x9c>
 8017d4e:	f000 f897 	bl	8017e80 <std_msgs__msg__Header__init>
 8017d52:	4604      	mov	r4, r0
 8017d54:	b370      	cbz	r0, 8017db4 <sensor_msgs__msg__BatteryState__init+0x70>
 8017d56:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8017d5a:	2100      	movs	r1, #0
 8017d5c:	4630      	mov	r0, r6
 8017d5e:	f7ff ff97 	bl	8017c90 <rosidl_runtime_c__float__Sequence__init>
 8017d62:	4604      	mov	r4, r0
 8017d64:	2800      	cmp	r0, #0
 8017d66:	d047      	beq.n	8017df8 <sensor_msgs__msg__BatteryState__init+0xb4>
 8017d68:	f105 0740 	add.w	r7, r5, #64	; 0x40
 8017d6c:	2100      	movs	r1, #0
 8017d6e:	4638      	mov	r0, r7
 8017d70:	f7ff ff8e 	bl	8017c90 <rosidl_runtime_c__float__Sequence__init>
 8017d74:	4604      	mov	r4, r0
 8017d76:	b3b8      	cbz	r0, 8017de8 <sensor_msgs__msg__BatteryState__init+0xa4>
 8017d78:	f105 084c 	add.w	r8, r5, #76	; 0x4c
 8017d7c:	4640      	mov	r0, r8
 8017d7e:	f002 fab9 	bl	801a2f4 <rosidl_runtime_c__String__init>
 8017d82:	4604      	mov	r4, r0
 8017d84:	b3e8      	cbz	r0, 8017e02 <sensor_msgs__msg__BatteryState__init+0xbe>
 8017d86:	f105 0958 	add.w	r9, r5, #88	; 0x58
 8017d8a:	4648      	mov	r0, r9
 8017d8c:	f002 fab2 	bl	801a2f4 <rosidl_runtime_c__String__init>
 8017d90:	4604      	mov	r4, r0
 8017d92:	bb10      	cbnz	r0, 8017dda <sensor_msgs__msg__BatteryState__init+0x96>
 8017d94:	4628      	mov	r0, r5
 8017d96:	f000 f897 	bl	8017ec8 <std_msgs__msg__Header__fini>
 8017d9a:	4630      	mov	r0, r6
 8017d9c:	f7ff ff90 	bl	8017cc0 <rosidl_runtime_c__float__Sequence__fini>
 8017da0:	4638      	mov	r0, r7
 8017da2:	f7ff ff8d 	bl	8017cc0 <rosidl_runtime_c__float__Sequence__fini>
 8017da6:	4640      	mov	r0, r8
 8017da8:	f002 faba 	bl	801a320 <rosidl_runtime_c__String__fini>
 8017dac:	4648      	mov	r0, r9
 8017dae:	f002 fab7 	bl	801a320 <rosidl_runtime_c__String__fini>
 8017db2:	e012      	b.n	8017dda <sensor_msgs__msg__BatteryState__init+0x96>
 8017db4:	4628      	mov	r0, r5
 8017db6:	f000 f887 	bl	8017ec8 <std_msgs__msg__Header__fini>
 8017dba:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8017dbe:	f7ff ff7f 	bl	8017cc0 <rosidl_runtime_c__float__Sequence__fini>
 8017dc2:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8017dc6:	f7ff ff7b 	bl	8017cc0 <rosidl_runtime_c__float__Sequence__fini>
 8017dca:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8017dce:	f002 faa7 	bl	801a320 <rosidl_runtime_c__String__fini>
 8017dd2:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8017dd6:	f002 faa3 	bl	801a320 <rosidl_runtime_c__String__fini>
 8017dda:	4620      	mov	r0, r4
 8017ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017de0:	4604      	mov	r4, r0
 8017de2:	4620      	mov	r0, r4
 8017de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017de8:	4628      	mov	r0, r5
 8017dea:	f000 f86d 	bl	8017ec8 <std_msgs__msg__Header__fini>
 8017dee:	4630      	mov	r0, r6
 8017df0:	f7ff ff66 	bl	8017cc0 <rosidl_runtime_c__float__Sequence__fini>
 8017df4:	4638      	mov	r0, r7
 8017df6:	e7e6      	b.n	8017dc6 <sensor_msgs__msg__BatteryState__init+0x82>
 8017df8:	4628      	mov	r0, r5
 8017dfa:	f000 f865 	bl	8017ec8 <std_msgs__msg__Header__fini>
 8017dfe:	4630      	mov	r0, r6
 8017e00:	e7dd      	b.n	8017dbe <sensor_msgs__msg__BatteryState__init+0x7a>
 8017e02:	4628      	mov	r0, r5
 8017e04:	f000 f860 	bl	8017ec8 <std_msgs__msg__Header__fini>
 8017e08:	4630      	mov	r0, r6
 8017e0a:	f7ff ff59 	bl	8017cc0 <rosidl_runtime_c__float__Sequence__fini>
 8017e0e:	4638      	mov	r0, r7
 8017e10:	f7ff ff56 	bl	8017cc0 <rosidl_runtime_c__float__Sequence__fini>
 8017e14:	4640      	mov	r0, r8
 8017e16:	f002 fa83 	bl	801a320 <rosidl_runtime_c__String__fini>
 8017e1a:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8017e1e:	f002 fa7f 	bl	801a320 <rosidl_runtime_c__String__fini>
 8017e22:	e7da      	b.n	8017dda <sensor_msgs__msg__BatteryState__init+0x96>

08017e24 <sensor_msgs__msg__BatteryState__fini>:
 8017e24:	b1a8      	cbz	r0, 8017e52 <sensor_msgs__msg__BatteryState__fini+0x2e>
 8017e26:	b510      	push	{r4, lr}
 8017e28:	4604      	mov	r4, r0
 8017e2a:	f000 f84d 	bl	8017ec8 <std_msgs__msg__Header__fini>
 8017e2e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8017e32:	f7ff ff45 	bl	8017cc0 <rosidl_runtime_c__float__Sequence__fini>
 8017e36:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8017e3a:	f7ff ff41 	bl	8017cc0 <rosidl_runtime_c__float__Sequence__fini>
 8017e3e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017e42:	f002 fa6d 	bl	801a320 <rosidl_runtime_c__String__fini>
 8017e46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e4e:	f002 ba67 	b.w	801a320 <rosidl_runtime_c__String__fini>
 8017e52:	4770      	bx	lr

08017e54 <sensor_msgs__msg__Temperature__init>:
 8017e54:	b538      	push	{r3, r4, r5, lr}
 8017e56:	4604      	mov	r4, r0
 8017e58:	b128      	cbz	r0, 8017e66 <sensor_msgs__msg__Temperature__init+0x12>
 8017e5a:	f000 f811 	bl	8017e80 <std_msgs__msg__Header__init>
 8017e5e:	4605      	mov	r5, r0
 8017e60:	b120      	cbz	r0, 8017e6c <sensor_msgs__msg__Temperature__init+0x18>
 8017e62:	4628      	mov	r0, r5
 8017e64:	bd38      	pop	{r3, r4, r5, pc}
 8017e66:	4605      	mov	r5, r0
 8017e68:	4628      	mov	r0, r5
 8017e6a:	bd38      	pop	{r3, r4, r5, pc}
 8017e6c:	4620      	mov	r0, r4
 8017e6e:	f000 f82b 	bl	8017ec8 <std_msgs__msg__Header__fini>
 8017e72:	4628      	mov	r0, r5
 8017e74:	bd38      	pop	{r3, r4, r5, pc}
 8017e76:	bf00      	nop

08017e78 <sensor_msgs__msg__Temperature__fini>:
 8017e78:	b108      	cbz	r0, 8017e7e <sensor_msgs__msg__Temperature__fini+0x6>
 8017e7a:	f000 b825 	b.w	8017ec8 <std_msgs__msg__Header__fini>
 8017e7e:	4770      	bx	lr

08017e80 <std_msgs__msg__Header__init>:
 8017e80:	b570      	push	{r4, r5, r6, lr}
 8017e82:	4605      	mov	r5, r0
 8017e84:	b1a8      	cbz	r0, 8017eb2 <std_msgs__msg__Header__init+0x32>
 8017e86:	f000 f837 	bl	8017ef8 <builtin_interfaces__msg__Time__init>
 8017e8a:	4604      	mov	r4, r0
 8017e8c:	b140      	cbz	r0, 8017ea0 <std_msgs__msg__Header__init+0x20>
 8017e8e:	f105 0608 	add.w	r6, r5, #8
 8017e92:	4630      	mov	r0, r6
 8017e94:	f002 fa2e 	bl	801a2f4 <rosidl_runtime_c__String__init>
 8017e98:	4604      	mov	r4, r0
 8017e9a:	b168      	cbz	r0, 8017eb8 <std_msgs__msg__Header__init+0x38>
 8017e9c:	4620      	mov	r0, r4
 8017e9e:	bd70      	pop	{r4, r5, r6, pc}
 8017ea0:	4628      	mov	r0, r5
 8017ea2:	f000 f82d 	bl	8017f00 <builtin_interfaces__msg__Time__fini>
 8017ea6:	f105 0008 	add.w	r0, r5, #8
 8017eaa:	f002 fa39 	bl	801a320 <rosidl_runtime_c__String__fini>
 8017eae:	4620      	mov	r0, r4
 8017eb0:	bd70      	pop	{r4, r5, r6, pc}
 8017eb2:	4604      	mov	r4, r0
 8017eb4:	4620      	mov	r0, r4
 8017eb6:	bd70      	pop	{r4, r5, r6, pc}
 8017eb8:	4628      	mov	r0, r5
 8017eba:	f000 f821 	bl	8017f00 <builtin_interfaces__msg__Time__fini>
 8017ebe:	4630      	mov	r0, r6
 8017ec0:	f002 fa2e 	bl	801a320 <rosidl_runtime_c__String__fini>
 8017ec4:	e7ea      	b.n	8017e9c <std_msgs__msg__Header__init+0x1c>
 8017ec6:	bf00      	nop

08017ec8 <std_msgs__msg__Header__fini>:
 8017ec8:	b148      	cbz	r0, 8017ede <std_msgs__msg__Header__fini+0x16>
 8017eca:	b510      	push	{r4, lr}
 8017ecc:	4604      	mov	r4, r0
 8017ece:	f000 f817 	bl	8017f00 <builtin_interfaces__msg__Time__fini>
 8017ed2:	f104 0008 	add.w	r0, r4, #8
 8017ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017eda:	f002 ba21 	b.w	801a320 <rosidl_runtime_c__String__fini>
 8017ede:	4770      	bx	lr

08017ee0 <std_msgs__msg__Int32__init>:
 8017ee0:	3800      	subs	r0, #0
 8017ee2:	bf18      	it	ne
 8017ee4:	2001      	movne	r0, #1
 8017ee6:	4770      	bx	lr

08017ee8 <std_msgs__msg__Int32__fini>:
 8017ee8:	4770      	bx	lr
 8017eea:	bf00      	nop

08017eec <std_msgs__msg__Int64__init>:
 8017eec:	3800      	subs	r0, #0
 8017eee:	bf18      	it	ne
 8017ef0:	2001      	movne	r0, #1
 8017ef2:	4770      	bx	lr

08017ef4 <std_msgs__msg__Int64__fini>:
 8017ef4:	4770      	bx	lr
 8017ef6:	bf00      	nop

08017ef8 <builtin_interfaces__msg__Time__init>:
 8017ef8:	3800      	subs	r0, #0
 8017efa:	bf18      	it	ne
 8017efc:	2001      	movne	r0, #1
 8017efe:	4770      	bx	lr

08017f00 <builtin_interfaces__msg__Time__fini>:
 8017f00:	4770      	bx	lr
 8017f02:	bf00      	nop

08017f04 <ucdr_serialize_endian_array_char>:
 8017f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f08:	4619      	mov	r1, r3
 8017f0a:	461f      	mov	r7, r3
 8017f0c:	4605      	mov	r5, r0
 8017f0e:	4690      	mov	r8, r2
 8017f10:	f7fb f87a 	bl	8013008 <ucdr_check_buffer_available_for>
 8017f14:	b9e0      	cbnz	r0, 8017f50 <ucdr_serialize_endian_array_char+0x4c>
 8017f16:	463e      	mov	r6, r7
 8017f18:	e009      	b.n	8017f2e <ucdr_serialize_endian_array_char+0x2a>
 8017f1a:	68a8      	ldr	r0, [r5, #8]
 8017f1c:	f002 fc4e 	bl	801a7bc <memcpy>
 8017f20:	68ab      	ldr	r3, [r5, #8]
 8017f22:	6928      	ldr	r0, [r5, #16]
 8017f24:	4423      	add	r3, r4
 8017f26:	4420      	add	r0, r4
 8017f28:	1b36      	subs	r6, r6, r4
 8017f2a:	60ab      	str	r3, [r5, #8]
 8017f2c:	6128      	str	r0, [r5, #16]
 8017f2e:	4631      	mov	r1, r6
 8017f30:	2201      	movs	r2, #1
 8017f32:	4628      	mov	r0, r5
 8017f34:	f7fb f8f0 	bl	8013118 <ucdr_check_final_buffer_behavior_array>
 8017f38:	1bb9      	subs	r1, r7, r6
 8017f3a:	4441      	add	r1, r8
 8017f3c:	4604      	mov	r4, r0
 8017f3e:	4602      	mov	r2, r0
 8017f40:	2800      	cmp	r0, #0
 8017f42:	d1ea      	bne.n	8017f1a <ucdr_serialize_endian_array_char+0x16>
 8017f44:	2301      	movs	r3, #1
 8017f46:	7da8      	ldrb	r0, [r5, #22]
 8017f48:	756b      	strb	r3, [r5, #21]
 8017f4a:	4058      	eors	r0, r3
 8017f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f50:	463a      	mov	r2, r7
 8017f52:	68a8      	ldr	r0, [r5, #8]
 8017f54:	4641      	mov	r1, r8
 8017f56:	f002 fc31 	bl	801a7bc <memcpy>
 8017f5a:	68aa      	ldr	r2, [r5, #8]
 8017f5c:	692b      	ldr	r3, [r5, #16]
 8017f5e:	443a      	add	r2, r7
 8017f60:	443b      	add	r3, r7
 8017f62:	60aa      	str	r2, [r5, #8]
 8017f64:	612b      	str	r3, [r5, #16]
 8017f66:	e7ed      	b.n	8017f44 <ucdr_serialize_endian_array_char+0x40>

08017f68 <ucdr_deserialize_endian_array_char>:
 8017f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	461f      	mov	r7, r3
 8017f70:	4605      	mov	r5, r0
 8017f72:	4690      	mov	r8, r2
 8017f74:	f7fb f848 	bl	8013008 <ucdr_check_buffer_available_for>
 8017f78:	b9e0      	cbnz	r0, 8017fb4 <ucdr_deserialize_endian_array_char+0x4c>
 8017f7a:	463e      	mov	r6, r7
 8017f7c:	e009      	b.n	8017f92 <ucdr_deserialize_endian_array_char+0x2a>
 8017f7e:	68a9      	ldr	r1, [r5, #8]
 8017f80:	f002 fc1c 	bl	801a7bc <memcpy>
 8017f84:	68ab      	ldr	r3, [r5, #8]
 8017f86:	6928      	ldr	r0, [r5, #16]
 8017f88:	4423      	add	r3, r4
 8017f8a:	4420      	add	r0, r4
 8017f8c:	1b36      	subs	r6, r6, r4
 8017f8e:	60ab      	str	r3, [r5, #8]
 8017f90:	6128      	str	r0, [r5, #16]
 8017f92:	2201      	movs	r2, #1
 8017f94:	4631      	mov	r1, r6
 8017f96:	4628      	mov	r0, r5
 8017f98:	f7fb f8be 	bl	8013118 <ucdr_check_final_buffer_behavior_array>
 8017f9c:	4604      	mov	r4, r0
 8017f9e:	1bb8      	subs	r0, r7, r6
 8017fa0:	4440      	add	r0, r8
 8017fa2:	4622      	mov	r2, r4
 8017fa4:	2c00      	cmp	r4, #0
 8017fa6:	d1ea      	bne.n	8017f7e <ucdr_deserialize_endian_array_char+0x16>
 8017fa8:	2301      	movs	r3, #1
 8017faa:	7da8      	ldrb	r0, [r5, #22]
 8017fac:	756b      	strb	r3, [r5, #21]
 8017fae:	4058      	eors	r0, r3
 8017fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fb4:	463a      	mov	r2, r7
 8017fb6:	68a9      	ldr	r1, [r5, #8]
 8017fb8:	4640      	mov	r0, r8
 8017fba:	f002 fbff 	bl	801a7bc <memcpy>
 8017fbe:	68aa      	ldr	r2, [r5, #8]
 8017fc0:	692b      	ldr	r3, [r5, #16]
 8017fc2:	443a      	add	r2, r7
 8017fc4:	443b      	add	r3, r7
 8017fc6:	60aa      	str	r2, [r5, #8]
 8017fc8:	612b      	str	r3, [r5, #16]
 8017fca:	e7ed      	b.n	8017fa8 <ucdr_deserialize_endian_array_char+0x40>

08017fcc <ucdr_serialize_array_uint8_t>:
 8017fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fd0:	4688      	mov	r8, r1
 8017fd2:	4611      	mov	r1, r2
 8017fd4:	4617      	mov	r7, r2
 8017fd6:	4605      	mov	r5, r0
 8017fd8:	f7fb f816 	bl	8013008 <ucdr_check_buffer_available_for>
 8017fdc:	b9e0      	cbnz	r0, 8018018 <ucdr_serialize_array_uint8_t+0x4c>
 8017fde:	463e      	mov	r6, r7
 8017fe0:	e009      	b.n	8017ff6 <ucdr_serialize_array_uint8_t+0x2a>
 8017fe2:	68a8      	ldr	r0, [r5, #8]
 8017fe4:	f002 fbea 	bl	801a7bc <memcpy>
 8017fe8:	68aa      	ldr	r2, [r5, #8]
 8017fea:	692b      	ldr	r3, [r5, #16]
 8017fec:	4422      	add	r2, r4
 8017fee:	4423      	add	r3, r4
 8017ff0:	1b36      	subs	r6, r6, r4
 8017ff2:	60aa      	str	r2, [r5, #8]
 8017ff4:	612b      	str	r3, [r5, #16]
 8017ff6:	4631      	mov	r1, r6
 8017ff8:	2201      	movs	r2, #1
 8017ffa:	4628      	mov	r0, r5
 8017ffc:	f7fb f88c 	bl	8013118 <ucdr_check_final_buffer_behavior_array>
 8018000:	1bb9      	subs	r1, r7, r6
 8018002:	4441      	add	r1, r8
 8018004:	4604      	mov	r4, r0
 8018006:	4602      	mov	r2, r0
 8018008:	2800      	cmp	r0, #0
 801800a:	d1ea      	bne.n	8017fe2 <ucdr_serialize_array_uint8_t+0x16>
 801800c:	2301      	movs	r3, #1
 801800e:	7da8      	ldrb	r0, [r5, #22]
 8018010:	756b      	strb	r3, [r5, #21]
 8018012:	4058      	eors	r0, r3
 8018014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018018:	463a      	mov	r2, r7
 801801a:	68a8      	ldr	r0, [r5, #8]
 801801c:	4641      	mov	r1, r8
 801801e:	f002 fbcd 	bl	801a7bc <memcpy>
 8018022:	68aa      	ldr	r2, [r5, #8]
 8018024:	692b      	ldr	r3, [r5, #16]
 8018026:	443a      	add	r2, r7
 8018028:	443b      	add	r3, r7
 801802a:	60aa      	str	r2, [r5, #8]
 801802c:	612b      	str	r3, [r5, #16]
 801802e:	e7ed      	b.n	801800c <ucdr_serialize_array_uint8_t+0x40>

08018030 <ucdr_serialize_endian_array_uint8_t>:
 8018030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018034:	4619      	mov	r1, r3
 8018036:	461f      	mov	r7, r3
 8018038:	4605      	mov	r5, r0
 801803a:	4690      	mov	r8, r2
 801803c:	f7fa ffe4 	bl	8013008 <ucdr_check_buffer_available_for>
 8018040:	b9e0      	cbnz	r0, 801807c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8018042:	463e      	mov	r6, r7
 8018044:	e009      	b.n	801805a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8018046:	68a8      	ldr	r0, [r5, #8]
 8018048:	f002 fbb8 	bl	801a7bc <memcpy>
 801804c:	68ab      	ldr	r3, [r5, #8]
 801804e:	6928      	ldr	r0, [r5, #16]
 8018050:	4423      	add	r3, r4
 8018052:	4420      	add	r0, r4
 8018054:	1b36      	subs	r6, r6, r4
 8018056:	60ab      	str	r3, [r5, #8]
 8018058:	6128      	str	r0, [r5, #16]
 801805a:	4631      	mov	r1, r6
 801805c:	2201      	movs	r2, #1
 801805e:	4628      	mov	r0, r5
 8018060:	f7fb f85a 	bl	8013118 <ucdr_check_final_buffer_behavior_array>
 8018064:	1bb9      	subs	r1, r7, r6
 8018066:	4441      	add	r1, r8
 8018068:	4604      	mov	r4, r0
 801806a:	4602      	mov	r2, r0
 801806c:	2800      	cmp	r0, #0
 801806e:	d1ea      	bne.n	8018046 <ucdr_serialize_endian_array_uint8_t+0x16>
 8018070:	2301      	movs	r3, #1
 8018072:	7da8      	ldrb	r0, [r5, #22]
 8018074:	756b      	strb	r3, [r5, #21]
 8018076:	4058      	eors	r0, r3
 8018078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801807c:	463a      	mov	r2, r7
 801807e:	68a8      	ldr	r0, [r5, #8]
 8018080:	4641      	mov	r1, r8
 8018082:	f002 fb9b 	bl	801a7bc <memcpy>
 8018086:	68aa      	ldr	r2, [r5, #8]
 8018088:	692b      	ldr	r3, [r5, #16]
 801808a:	443a      	add	r2, r7
 801808c:	443b      	add	r3, r7
 801808e:	60aa      	str	r2, [r5, #8]
 8018090:	612b      	str	r3, [r5, #16]
 8018092:	e7ed      	b.n	8018070 <ucdr_serialize_endian_array_uint8_t+0x40>

08018094 <ucdr_deserialize_array_uint8_t>:
 8018094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018098:	4688      	mov	r8, r1
 801809a:	4611      	mov	r1, r2
 801809c:	4617      	mov	r7, r2
 801809e:	4605      	mov	r5, r0
 80180a0:	f7fa ffb2 	bl	8013008 <ucdr_check_buffer_available_for>
 80180a4:	b9e0      	cbnz	r0, 80180e0 <ucdr_deserialize_array_uint8_t+0x4c>
 80180a6:	463e      	mov	r6, r7
 80180a8:	e009      	b.n	80180be <ucdr_deserialize_array_uint8_t+0x2a>
 80180aa:	68a9      	ldr	r1, [r5, #8]
 80180ac:	f002 fb86 	bl	801a7bc <memcpy>
 80180b0:	68aa      	ldr	r2, [r5, #8]
 80180b2:	692b      	ldr	r3, [r5, #16]
 80180b4:	4422      	add	r2, r4
 80180b6:	4423      	add	r3, r4
 80180b8:	1b36      	subs	r6, r6, r4
 80180ba:	60aa      	str	r2, [r5, #8]
 80180bc:	612b      	str	r3, [r5, #16]
 80180be:	2201      	movs	r2, #1
 80180c0:	4631      	mov	r1, r6
 80180c2:	4628      	mov	r0, r5
 80180c4:	f7fb f828 	bl	8013118 <ucdr_check_final_buffer_behavior_array>
 80180c8:	4604      	mov	r4, r0
 80180ca:	1bb8      	subs	r0, r7, r6
 80180cc:	4440      	add	r0, r8
 80180ce:	4622      	mov	r2, r4
 80180d0:	2c00      	cmp	r4, #0
 80180d2:	d1ea      	bne.n	80180aa <ucdr_deserialize_array_uint8_t+0x16>
 80180d4:	2301      	movs	r3, #1
 80180d6:	7da8      	ldrb	r0, [r5, #22]
 80180d8:	756b      	strb	r3, [r5, #21]
 80180da:	4058      	eors	r0, r3
 80180dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180e0:	463a      	mov	r2, r7
 80180e2:	68a9      	ldr	r1, [r5, #8]
 80180e4:	4640      	mov	r0, r8
 80180e6:	f002 fb69 	bl	801a7bc <memcpy>
 80180ea:	68aa      	ldr	r2, [r5, #8]
 80180ec:	692b      	ldr	r3, [r5, #16]
 80180ee:	443a      	add	r2, r7
 80180f0:	443b      	add	r3, r7
 80180f2:	60aa      	str	r2, [r5, #8]
 80180f4:	612b      	str	r3, [r5, #16]
 80180f6:	e7ed      	b.n	80180d4 <ucdr_deserialize_array_uint8_t+0x40>

080180f8 <ucdr_deserialize_endian_array_uint8_t>:
 80180f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180fc:	4619      	mov	r1, r3
 80180fe:	461f      	mov	r7, r3
 8018100:	4605      	mov	r5, r0
 8018102:	4690      	mov	r8, r2
 8018104:	f7fa ff80 	bl	8013008 <ucdr_check_buffer_available_for>
 8018108:	b9e0      	cbnz	r0, 8018144 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801810a:	463e      	mov	r6, r7
 801810c:	e009      	b.n	8018122 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801810e:	68a9      	ldr	r1, [r5, #8]
 8018110:	f002 fb54 	bl	801a7bc <memcpy>
 8018114:	68ab      	ldr	r3, [r5, #8]
 8018116:	6928      	ldr	r0, [r5, #16]
 8018118:	4423      	add	r3, r4
 801811a:	4420      	add	r0, r4
 801811c:	1b36      	subs	r6, r6, r4
 801811e:	60ab      	str	r3, [r5, #8]
 8018120:	6128      	str	r0, [r5, #16]
 8018122:	2201      	movs	r2, #1
 8018124:	4631      	mov	r1, r6
 8018126:	4628      	mov	r0, r5
 8018128:	f7fa fff6 	bl	8013118 <ucdr_check_final_buffer_behavior_array>
 801812c:	4604      	mov	r4, r0
 801812e:	1bb8      	subs	r0, r7, r6
 8018130:	4440      	add	r0, r8
 8018132:	4622      	mov	r2, r4
 8018134:	2c00      	cmp	r4, #0
 8018136:	d1ea      	bne.n	801810e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8018138:	2301      	movs	r3, #1
 801813a:	7da8      	ldrb	r0, [r5, #22]
 801813c:	756b      	strb	r3, [r5, #21]
 801813e:	4058      	eors	r0, r3
 8018140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018144:	463a      	mov	r2, r7
 8018146:	68a9      	ldr	r1, [r5, #8]
 8018148:	4640      	mov	r0, r8
 801814a:	f002 fb37 	bl	801a7bc <memcpy>
 801814e:	68aa      	ldr	r2, [r5, #8]
 8018150:	692b      	ldr	r3, [r5, #16]
 8018152:	443a      	add	r2, r7
 8018154:	443b      	add	r3, r7
 8018156:	60aa      	str	r2, [r5, #8]
 8018158:	612b      	str	r3, [r5, #16]
 801815a:	e7ed      	b.n	8018138 <ucdr_deserialize_endian_array_uint8_t+0x40>

0801815c <ucdr_serialize_endian_array_float>:
 801815c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018160:	4688      	mov	r8, r1
 8018162:	2104      	movs	r1, #4
 8018164:	4604      	mov	r4, r0
 8018166:	4616      	mov	r6, r2
 8018168:	461f      	mov	r7, r3
 801816a:	f7fa ffad 	bl	80130c8 <ucdr_buffer_alignment>
 801816e:	4601      	mov	r1, r0
 8018170:	4620      	mov	r0, r4
 8018172:	7d65      	ldrb	r5, [r4, #21]
 8018174:	f7fa ffec 	bl	8013150 <ucdr_advance_buffer>
 8018178:	f1b8 0f01 	cmp.w	r8, #1
 801817c:	7565      	strb	r5, [r4, #21]
 801817e:	d00f      	beq.n	80181a0 <ucdr_serialize_endian_array_float+0x44>
 8018180:	2500      	movs	r5, #0
 8018182:	b147      	cbz	r7, 8018196 <ucdr_serialize_endian_array_float+0x3a>
 8018184:	ecb6 0a01 	vldmia	r6!, {s0}
 8018188:	4641      	mov	r1, r8
 801818a:	4620      	mov	r0, r4
 801818c:	3501      	adds	r5, #1
 801818e:	f7fa fbe5 	bl	801295c <ucdr_serialize_endian_float>
 8018192:	42af      	cmp	r7, r5
 8018194:	d1f6      	bne.n	8018184 <ucdr_serialize_endian_array_float+0x28>
 8018196:	7da0      	ldrb	r0, [r4, #22]
 8018198:	f080 0001 	eor.w	r0, r0, #1
 801819c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181a0:	00bf      	lsls	r7, r7, #2
 80181a2:	4639      	mov	r1, r7
 80181a4:	4620      	mov	r0, r4
 80181a6:	f7fa ff2f 	bl	8013008 <ucdr_check_buffer_available_for>
 80181aa:	b9f8      	cbnz	r0, 80181ec <ucdr_serialize_endian_array_float+0x90>
 80181ac:	46b8      	mov	r8, r7
 80181ae:	e00a      	b.n	80181c6 <ucdr_serialize_endian_array_float+0x6a>
 80181b0:	68a0      	ldr	r0, [r4, #8]
 80181b2:	f002 fb03 	bl	801a7bc <memcpy>
 80181b6:	68a2      	ldr	r2, [r4, #8]
 80181b8:	6923      	ldr	r3, [r4, #16]
 80181ba:	442a      	add	r2, r5
 80181bc:	442b      	add	r3, r5
 80181be:	eba8 0805 	sub.w	r8, r8, r5
 80181c2:	60a2      	str	r2, [r4, #8]
 80181c4:	6123      	str	r3, [r4, #16]
 80181c6:	4641      	mov	r1, r8
 80181c8:	2204      	movs	r2, #4
 80181ca:	4620      	mov	r0, r4
 80181cc:	f7fa ffa4 	bl	8013118 <ucdr_check_final_buffer_behavior_array>
 80181d0:	eba7 0108 	sub.w	r1, r7, r8
 80181d4:	4431      	add	r1, r6
 80181d6:	4605      	mov	r5, r0
 80181d8:	4602      	mov	r2, r0
 80181da:	2800      	cmp	r0, #0
 80181dc:	d1e8      	bne.n	80181b0 <ucdr_serialize_endian_array_float+0x54>
 80181de:	7da0      	ldrb	r0, [r4, #22]
 80181e0:	2304      	movs	r3, #4
 80181e2:	7563      	strb	r3, [r4, #21]
 80181e4:	f080 0001 	eor.w	r0, r0, #1
 80181e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181ec:	463a      	mov	r2, r7
 80181ee:	68a0      	ldr	r0, [r4, #8]
 80181f0:	4631      	mov	r1, r6
 80181f2:	f002 fae3 	bl	801a7bc <memcpy>
 80181f6:	68a2      	ldr	r2, [r4, #8]
 80181f8:	6923      	ldr	r3, [r4, #16]
 80181fa:	443a      	add	r2, r7
 80181fc:	441f      	add	r7, r3
 80181fe:	60a2      	str	r2, [r4, #8]
 8018200:	6127      	str	r7, [r4, #16]
 8018202:	e7ec      	b.n	80181de <ucdr_serialize_endian_array_float+0x82>

08018204 <ucdr_deserialize_endian_array_float>:
 8018204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018208:	4688      	mov	r8, r1
 801820a:	2104      	movs	r1, #4
 801820c:	4605      	mov	r5, r0
 801820e:	4614      	mov	r4, r2
 8018210:	461f      	mov	r7, r3
 8018212:	f7fa ff59 	bl	80130c8 <ucdr_buffer_alignment>
 8018216:	4601      	mov	r1, r0
 8018218:	4628      	mov	r0, r5
 801821a:	7d6e      	ldrb	r6, [r5, #21]
 801821c:	f7fa ff98 	bl	8013150 <ucdr_advance_buffer>
 8018220:	f1b8 0f01 	cmp.w	r8, #1
 8018224:	756e      	strb	r6, [r5, #21]
 8018226:	d010      	beq.n	801824a <ucdr_deserialize_endian_array_float+0x46>
 8018228:	2600      	movs	r6, #0
 801822a:	b14f      	cbz	r7, 8018240 <ucdr_deserialize_endian_array_float+0x3c>
 801822c:	4622      	mov	r2, r4
 801822e:	4641      	mov	r1, r8
 8018230:	4628      	mov	r0, r5
 8018232:	3601      	adds	r6, #1
 8018234:	f7fa fcbc 	bl	8012bb0 <ucdr_deserialize_endian_float>
 8018238:	42b7      	cmp	r7, r6
 801823a:	f104 0404 	add.w	r4, r4, #4
 801823e:	d1f5      	bne.n	801822c <ucdr_deserialize_endian_array_float+0x28>
 8018240:	7da8      	ldrb	r0, [r5, #22]
 8018242:	f080 0001 	eor.w	r0, r0, #1
 8018246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801824a:	00bf      	lsls	r7, r7, #2
 801824c:	4639      	mov	r1, r7
 801824e:	4628      	mov	r0, r5
 8018250:	f7fa feda 	bl	8013008 <ucdr_check_buffer_available_for>
 8018254:	b9f8      	cbnz	r0, 8018296 <ucdr_deserialize_endian_array_float+0x92>
 8018256:	46b8      	mov	r8, r7
 8018258:	e00a      	b.n	8018270 <ucdr_deserialize_endian_array_float+0x6c>
 801825a:	68a9      	ldr	r1, [r5, #8]
 801825c:	f002 faae 	bl	801a7bc <memcpy>
 8018260:	68aa      	ldr	r2, [r5, #8]
 8018262:	692b      	ldr	r3, [r5, #16]
 8018264:	4432      	add	r2, r6
 8018266:	4433      	add	r3, r6
 8018268:	eba8 0806 	sub.w	r8, r8, r6
 801826c:	60aa      	str	r2, [r5, #8]
 801826e:	612b      	str	r3, [r5, #16]
 8018270:	2204      	movs	r2, #4
 8018272:	4641      	mov	r1, r8
 8018274:	4628      	mov	r0, r5
 8018276:	f7fa ff4f 	bl	8013118 <ucdr_check_final_buffer_behavior_array>
 801827a:	4606      	mov	r6, r0
 801827c:	eba7 0008 	sub.w	r0, r7, r8
 8018280:	4420      	add	r0, r4
 8018282:	4632      	mov	r2, r6
 8018284:	2e00      	cmp	r6, #0
 8018286:	d1e8      	bne.n	801825a <ucdr_deserialize_endian_array_float+0x56>
 8018288:	7da8      	ldrb	r0, [r5, #22]
 801828a:	2304      	movs	r3, #4
 801828c:	756b      	strb	r3, [r5, #21]
 801828e:	f080 0001 	eor.w	r0, r0, #1
 8018292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018296:	463a      	mov	r2, r7
 8018298:	68a9      	ldr	r1, [r5, #8]
 801829a:	4620      	mov	r0, r4
 801829c:	f002 fa8e 	bl	801a7bc <memcpy>
 80182a0:	68aa      	ldr	r2, [r5, #8]
 80182a2:	692b      	ldr	r3, [r5, #16]
 80182a4:	443a      	add	r2, r7
 80182a6:	441f      	add	r7, r3
 80182a8:	60aa      	str	r2, [r5, #8]
 80182aa:	612f      	str	r7, [r5, #16]
 80182ac:	e7ec      	b.n	8018288 <ucdr_deserialize_endian_array_float+0x84>
 80182ae:	bf00      	nop

080182b0 <ucdr_serialize_string>:
 80182b0:	b510      	push	{r4, lr}
 80182b2:	b082      	sub	sp, #8
 80182b4:	4604      	mov	r4, r0
 80182b6:	4608      	mov	r0, r1
 80182b8:	9101      	str	r1, [sp, #4]
 80182ba:	f7e7 ff93 	bl	80001e4 <strlen>
 80182be:	9901      	ldr	r1, [sp, #4]
 80182c0:	1c42      	adds	r2, r0, #1
 80182c2:	4620      	mov	r0, r4
 80182c4:	b002      	add	sp, #8
 80182c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182ca:	f7fa bf61 	b.w	8013190 <ucdr_serialize_sequence_char>
 80182ce:	bf00      	nop

080182d0 <ucdr_deserialize_string>:
 80182d0:	b500      	push	{lr}
 80182d2:	b083      	sub	sp, #12
 80182d4:	ab01      	add	r3, sp, #4
 80182d6:	f7fa ff6d 	bl	80131b4 <ucdr_deserialize_sequence_char>
 80182da:	b003      	add	sp, #12
 80182dc:	f85d fb04 	ldr.w	pc, [sp], #4

080182e0 <get_custom_error>:
 80182e0:	4b01      	ldr	r3, [pc, #4]	; (80182e8 <get_custom_error+0x8>)
 80182e2:	7818      	ldrb	r0, [r3, #0]
 80182e4:	4770      	bx	lr
 80182e6:	bf00      	nop
 80182e8:	2001c940 	.word	0x2001c940

080182ec <recv_custom_msg>:
 80182ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182f0:	4693      	mov	fp, r2
 80182f2:	b089      	sub	sp, #36	; 0x24
 80182f4:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 80182f8:	9305      	str	r3, [sp, #20]
 80182fa:	468a      	mov	sl, r1
 80182fc:	2100      	movs	r1, #0
 80182fe:	4604      	mov	r4, r0
 8018300:	f88d 101e 	strb.w	r1, [sp, #30]
 8018304:	b322      	cbz	r2, 8018350 <recv_custom_msg+0x64>
 8018306:	f200 2902 	addw	r9, r0, #514	; 0x202
 801830a:	f10d 081f 	add.w	r8, sp, #31
 801830e:	af05      	add	r7, sp, #20
 8018310:	f10d 061e 	add.w	r6, sp, #30
 8018314:	f44f 7500 	mov.w	r5, #512	; 0x200
 8018318:	e002      	b.n	8018320 <recv_custom_msg+0x34>
 801831a:	9b05      	ldr	r3, [sp, #20]
 801831c:	2b00      	cmp	r3, #0
 801831e:	dd0f      	ble.n	8018340 <recv_custom_msg+0x54>
 8018320:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8018324:	4623      	mov	r3, r4
 8018326:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801832a:	e9cd 5600 	strd	r5, r6, [sp]
 801832e:	4622      	mov	r2, r4
 8018330:	4648      	mov	r0, r9
 8018332:	f001 f8e1 	bl	80194f8 <uxr_read_framed_msg>
 8018336:	2800      	cmp	r0, #0
 8018338:	d0ef      	beq.n	801831a <recv_custom_msg+0x2e>
 801833a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801833e:	b1b3      	cbz	r3, 801836e <recv_custom_msg+0x82>
 8018340:	4b0f      	ldr	r3, [pc, #60]	; (8018380 <recv_custom_msg+0x94>)
 8018342:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8018346:	701a      	strb	r2, [r3, #0]
 8018348:	2000      	movs	r0, #0
 801834a:	b009      	add	sp, #36	; 0x24
 801834c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018350:	f10d 021f 	add.w	r2, sp, #31
 8018354:	9200      	str	r2, [sp, #0]
 8018356:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 801835a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801835e:	4601      	mov	r1, r0
 8018360:	47a8      	blx	r5
 8018362:	2800      	cmp	r0, #0
 8018364:	d0ec      	beq.n	8018340 <recv_custom_msg+0x54>
 8018366:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d1e8      	bne.n	8018340 <recv_custom_msg+0x54>
 801836e:	f8cb 0000 	str.w	r0, [fp]
 8018372:	2001      	movs	r0, #1
 8018374:	f8ca 4000 	str.w	r4, [sl]
 8018378:	b009      	add	sp, #36	; 0x24
 801837a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801837e:	bf00      	nop
 8018380:	2001c940 	.word	0x2001c940

08018384 <send_custom_msg>:
 8018384:	b530      	push	{r4, r5, lr}
 8018386:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 801838a:	b087      	sub	sp, #28
 801838c:	4615      	mov	r5, r2
 801838e:	b974      	cbnz	r4, 80183ae <send_custom_msg+0x2a>
 8018390:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8018394:	f10d 0317 	add.w	r3, sp, #23
 8018398:	47a0      	blx	r4
 801839a:	b108      	cbz	r0, 80183a0 <send_custom_msg+0x1c>
 801839c:	42a8      	cmp	r0, r5
 801839e:	d015      	beq.n	80183cc <send_custom_msg+0x48>
 80183a0:	4b0c      	ldr	r3, [pc, #48]	; (80183d4 <send_custom_msg+0x50>)
 80183a2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80183a6:	701a      	strb	r2, [r3, #0]
 80183a8:	2000      	movs	r0, #0
 80183aa:	b007      	add	sp, #28
 80183ac:	bd30      	pop	{r4, r5, pc}
 80183ae:	460b      	mov	r3, r1
 80183b0:	2200      	movs	r2, #0
 80183b2:	f10d 0117 	add.w	r1, sp, #23
 80183b6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80183ba:	4602      	mov	r2, r0
 80183bc:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80183c0:	9500      	str	r5, [sp, #0]
 80183c2:	f200 2002 	addw	r0, r0, #514	; 0x202
 80183c6:	f000 fe9f 	bl	8019108 <uxr_write_framed_msg>
 80183ca:	e7e6      	b.n	801839a <send_custom_msg+0x16>
 80183cc:	2001      	movs	r0, #1
 80183ce:	b007      	add	sp, #28
 80183d0:	bd30      	pop	{r4, r5, pc}
 80183d2:	bf00      	nop
 80183d4:	2001c940 	.word	0x2001c940

080183d8 <uxr_set_custom_transport_callbacks>:
 80183d8:	b410      	push	{r4}
 80183da:	9c01      	ldr	r4, [sp, #4]
 80183dc:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 80183e0:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80183e4:	9b02      	ldr	r3, [sp, #8]
 80183e6:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80183ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183ee:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 80183f2:	4770      	bx	lr

080183f4 <uxr_init_custom_transport>:
 80183f4:	b538      	push	{r3, r4, r5, lr}
 80183f6:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80183fa:	b303      	cbz	r3, 801843e <uxr_init_custom_transport+0x4a>
 80183fc:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8018400:	4604      	mov	r4, r0
 8018402:	b1e2      	cbz	r2, 801843e <uxr_init_custom_transport+0x4a>
 8018404:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8018408:	b1ca      	cbz	r2, 801843e <uxr_init_custom_transport+0x4a>
 801840a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801840e:	b1b2      	cbz	r2, 801843e <uxr_init_custom_transport+0x4a>
 8018410:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8018414:	4798      	blx	r3
 8018416:	4605      	mov	r5, r0
 8018418:	b188      	cbz	r0, 801843e <uxr_init_custom_transport+0x4a>
 801841a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801841e:	b98b      	cbnz	r3, 8018444 <uxr_init_custom_transport+0x50>
 8018420:	490b      	ldr	r1, [pc, #44]	; (8018450 <uxr_init_custom_transport+0x5c>)
 8018422:	4b0c      	ldr	r3, [pc, #48]	; (8018454 <uxr_init_custom_transport+0x60>)
 8018424:	4a0c      	ldr	r2, [pc, #48]	; (8018458 <uxr_init_custom_transport+0x64>)
 8018426:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 801842a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801842e:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8018432:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8018436:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 801843a:	4628      	mov	r0, r5
 801843c:	bd38      	pop	{r3, r4, r5, pc}
 801843e:	2500      	movs	r5, #0
 8018440:	4628      	mov	r0, r5
 8018442:	bd38      	pop	{r3, r4, r5, pc}
 8018444:	2100      	movs	r1, #0
 8018446:	f204 2002 	addw	r0, r4, #514	; 0x202
 801844a:	f000 fe57 	bl	80190fc <uxr_init_framing_io>
 801844e:	e7e7      	b.n	8018420 <uxr_init_custom_transport+0x2c>
 8018450:	08018385 	.word	0x08018385
 8018454:	080182ed 	.word	0x080182ed
 8018458:	080182e1 	.word	0x080182e1

0801845c <uxr_close_custom_transport>:
 801845c:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8018460:	4718      	bx	r3
 8018462:	bf00      	nop

08018464 <uxr_init_input_best_effort_stream>:
 8018464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018468:	8003      	strh	r3, [r0, #0]
 801846a:	4770      	bx	lr

0801846c <uxr_reset_input_best_effort_stream>:
 801846c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018470:	8003      	strh	r3, [r0, #0]
 8018472:	4770      	bx	lr

08018474 <uxr_receive_best_effort_message>:
 8018474:	b538      	push	{r3, r4, r5, lr}
 8018476:	4604      	mov	r4, r0
 8018478:	8800      	ldrh	r0, [r0, #0]
 801847a:	460d      	mov	r5, r1
 801847c:	f000 fe26 	bl	80190cc <uxr_seq_num_cmp>
 8018480:	4603      	mov	r3, r0
 8018482:	2b00      	cmp	r3, #0
 8018484:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018488:	bfb8      	it	lt
 801848a:	8025      	strhlt	r5, [r4, #0]
 801848c:	bd38      	pop	{r3, r4, r5, pc}
 801848e:	bf00      	nop

08018490 <on_full_input_buffer>:
 8018490:	b570      	push	{r4, r5, r6, lr}
 8018492:	4605      	mov	r5, r0
 8018494:	460c      	mov	r4, r1
 8018496:	682b      	ldr	r3, [r5, #0]
 8018498:	6809      	ldr	r1, [r1, #0]
 801849a:	8920      	ldrh	r0, [r4, #8]
 801849c:	6862      	ldr	r2, [r4, #4]
 801849e:	fbb2 f2f0 	udiv	r2, r2, r0
 80184a2:	eba3 0c01 	sub.w	ip, r3, r1
 80184a6:	fbbc fcf2 	udiv	ip, ip, r2
 80184aa:	f10c 0c01 	add.w	ip, ip, #1
 80184ae:	fa1f f38c 	uxth.w	r3, ip
 80184b2:	fbb3 f6f0 	udiv	r6, r3, r0
 80184b6:	fb00 3316 	mls	r3, r0, r6, r3
 80184ba:	b29b      	uxth	r3, r3
 80184bc:	fb02 f303 	mul.w	r3, r2, r3
 80184c0:	1d18      	adds	r0, r3, #4
 80184c2:	4408      	add	r0, r1
 80184c4:	7d26      	ldrb	r6, [r4, #20]
 80184c6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80184ca:	b116      	cbz	r6, 80184d2 <on_full_input_buffer+0x42>
 80184cc:	2600      	movs	r6, #0
 80184ce:	f840 6c04 	str.w	r6, [r0, #-4]
 80184d2:	2a03      	cmp	r2, #3
 80184d4:	d801      	bhi.n	80184da <on_full_input_buffer+0x4a>
 80184d6:	2001      	movs	r0, #1
 80184d8:	bd70      	pop	{r4, r5, r6, pc}
 80184da:	3308      	adds	r3, #8
 80184dc:	4419      	add	r1, r3
 80184de:	4628      	mov	r0, r5
 80184e0:	692b      	ldr	r3, [r5, #16]
 80184e2:	3a04      	subs	r2, #4
 80184e4:	f7fa fddc 	bl	80130a0 <ucdr_init_buffer_origin>
 80184e8:	4628      	mov	r0, r5
 80184ea:	4903      	ldr	r1, [pc, #12]	; (80184f8 <on_full_input_buffer+0x68>)
 80184ec:	4622      	mov	r2, r4
 80184ee:	f7fa fdb3 	bl	8013058 <ucdr_set_on_full_buffer_callback>
 80184f2:	2000      	movs	r0, #0
 80184f4:	bd70      	pop	{r4, r5, r6, pc}
 80184f6:	bf00      	nop
 80184f8:	08018491 	.word	0x08018491

080184fc <uxr_init_input_reliable_stream>:
 80184fc:	b500      	push	{lr}
 80184fe:	e9c0 1200 	strd	r1, r2, [r0]
 8018502:	f04f 0e00 	mov.w	lr, #0
 8018506:	9a01      	ldr	r2, [sp, #4]
 8018508:	8103      	strh	r3, [r0, #8]
 801850a:	6102      	str	r2, [r0, #16]
 801850c:	f880 e014 	strb.w	lr, [r0, #20]
 8018510:	b1d3      	cbz	r3, 8018548 <uxr_init_input_reliable_stream+0x4c>
 8018512:	f8c1 e000 	str.w	lr, [r1]
 8018516:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801851a:	f1bc 0f01 	cmp.w	ip, #1
 801851e:	d913      	bls.n	8018548 <uxr_init_input_reliable_stream+0x4c>
 8018520:	2301      	movs	r3, #1
 8018522:	fbb3 f1fc 	udiv	r1, r3, ip
 8018526:	fb0c 3111 	mls	r1, ip, r1, r3
 801852a:	b289      	uxth	r1, r1
 801852c:	6842      	ldr	r2, [r0, #4]
 801852e:	fbb2 f2fc 	udiv	r2, r2, ip
 8018532:	fb01 f202 	mul.w	r2, r1, r2
 8018536:	6801      	ldr	r1, [r0, #0]
 8018538:	f841 e002 	str.w	lr, [r1, r2]
 801853c:	3301      	adds	r3, #1
 801853e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018542:	b29b      	uxth	r3, r3
 8018544:	459c      	cmp	ip, r3
 8018546:	d8ec      	bhi.n	8018522 <uxr_init_input_reliable_stream+0x26>
 8018548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801854c:	60c3      	str	r3, [r0, #12]
 801854e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018552:	bf00      	nop

08018554 <uxr_reset_input_reliable_stream>:
 8018554:	8901      	ldrh	r1, [r0, #8]
 8018556:	b1e9      	cbz	r1, 8018594 <uxr_reset_input_reliable_stream+0x40>
 8018558:	f04f 0c00 	mov.w	ip, #0
 801855c:	b500      	push	{lr}
 801855e:	4663      	mov	r3, ip
 8018560:	46e6      	mov	lr, ip
 8018562:	fbb3 f2f1 	udiv	r2, r3, r1
 8018566:	fb01 3312 	mls	r3, r1, r2, r3
 801856a:	b29b      	uxth	r3, r3
 801856c:	6842      	ldr	r2, [r0, #4]
 801856e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018572:	fb02 f303 	mul.w	r3, r2, r3
 8018576:	6802      	ldr	r2, [r0, #0]
 8018578:	f842 e003 	str.w	lr, [r2, r3]
 801857c:	f10c 0c01 	add.w	ip, ip, #1
 8018580:	8901      	ldrh	r1, [r0, #8]
 8018582:	fa1f f38c 	uxth.w	r3, ip
 8018586:	4299      	cmp	r1, r3
 8018588:	d8eb      	bhi.n	8018562 <uxr_reset_input_reliable_stream+0xe>
 801858a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801858e:	60c3      	str	r3, [r0, #12]
 8018590:	f85d fb04 	ldr.w	pc, [sp], #4
 8018594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018598:	60c3      	str	r3, [r0, #12]
 801859a:	4770      	bx	lr

0801859c <uxr_receive_reliable_message>:
 801859c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185a0:	4604      	mov	r4, r0
 80185a2:	460d      	mov	r5, r1
 80185a4:	8901      	ldrh	r1, [r0, #8]
 80185a6:	8980      	ldrh	r0, [r0, #12]
 80185a8:	4690      	mov	r8, r2
 80185aa:	461f      	mov	r7, r3
 80185ac:	f000 fd86 	bl	80190bc <uxr_seq_num_add>
 80185b0:	4629      	mov	r1, r5
 80185b2:	4606      	mov	r6, r0
 80185b4:	89a0      	ldrh	r0, [r4, #12]
 80185b6:	f000 fd89 	bl	80190cc <uxr_seq_num_cmp>
 80185ba:	2800      	cmp	r0, #0
 80185bc:	db0a      	blt.n	80185d4 <uxr_receive_reliable_message+0x38>
 80185be:	2600      	movs	r6, #0
 80185c0:	89e0      	ldrh	r0, [r4, #14]
 80185c2:	4629      	mov	r1, r5
 80185c4:	f000 fd82 	bl	80190cc <uxr_seq_num_cmp>
 80185c8:	2800      	cmp	r0, #0
 80185ca:	da00      	bge.n	80185ce <uxr_receive_reliable_message+0x32>
 80185cc:	81e5      	strh	r5, [r4, #14]
 80185ce:	4630      	mov	r0, r6
 80185d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185d4:	4630      	mov	r0, r6
 80185d6:	4629      	mov	r1, r5
 80185d8:	f000 fd78 	bl	80190cc <uxr_seq_num_cmp>
 80185dc:	2800      	cmp	r0, #0
 80185de:	dbee      	blt.n	80185be <uxr_receive_reliable_message+0x22>
 80185e0:	6923      	ldr	r3, [r4, #16]
 80185e2:	4640      	mov	r0, r8
 80185e4:	4798      	blx	r3
 80185e6:	2101      	movs	r1, #1
 80185e8:	4681      	mov	r9, r0
 80185ea:	89a0      	ldrh	r0, [r4, #12]
 80185ec:	f000 fd66 	bl	80190bc <uxr_seq_num_add>
 80185f0:	f1b9 0f00 	cmp.w	r9, #0
 80185f4:	d101      	bne.n	80185fa <uxr_receive_reliable_message+0x5e>
 80185f6:	4285      	cmp	r5, r0
 80185f8:	d047      	beq.n	801868a <uxr_receive_reliable_message+0xee>
 80185fa:	8922      	ldrh	r2, [r4, #8]
 80185fc:	fbb5 f0f2 	udiv	r0, r5, r2
 8018600:	fb02 5010 	mls	r0, r2, r0, r5
 8018604:	b280      	uxth	r0, r0
 8018606:	6863      	ldr	r3, [r4, #4]
 8018608:	fbb3 f3f2 	udiv	r3, r3, r2
 801860c:	fb00 f303 	mul.w	r3, r0, r3
 8018610:	6820      	ldr	r0, [r4, #0]
 8018612:	3304      	adds	r3, #4
 8018614:	4418      	add	r0, r3
 8018616:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d1cf      	bne.n	80185be <uxr_receive_reliable_message+0x22>
 801861e:	4641      	mov	r1, r8
 8018620:	463a      	mov	r2, r7
 8018622:	f002 f8cb 	bl	801a7bc <memcpy>
 8018626:	8921      	ldrh	r1, [r4, #8]
 8018628:	fbb5 f2f1 	udiv	r2, r5, r1
 801862c:	fb01 5212 	mls	r2, r1, r2, r5
 8018630:	b292      	uxth	r2, r2
 8018632:	6863      	ldr	r3, [r4, #4]
 8018634:	fbb3 f3f1 	udiv	r3, r3, r1
 8018638:	fb02 f303 	mul.w	r3, r2, r3
 801863c:	6822      	ldr	r2, [r4, #0]
 801863e:	50d7      	str	r7, [r2, r3]
 8018640:	9a08      	ldr	r2, [sp, #32]
 8018642:	2301      	movs	r3, #1
 8018644:	7013      	strb	r3, [r2, #0]
 8018646:	f1b9 0f00 	cmp.w	r9, #0
 801864a:	d0b8      	beq.n	80185be <uxr_receive_reliable_message+0x22>
 801864c:	89a6      	ldrh	r6, [r4, #12]
 801864e:	4630      	mov	r0, r6
 8018650:	2101      	movs	r1, #1
 8018652:	f000 fd33 	bl	80190bc <uxr_seq_num_add>
 8018656:	8922      	ldrh	r2, [r4, #8]
 8018658:	6863      	ldr	r3, [r4, #4]
 801865a:	fbb3 f3f2 	udiv	r3, r3, r2
 801865e:	4606      	mov	r6, r0
 8018660:	fbb0 f0f2 	udiv	r0, r0, r2
 8018664:	fb02 6010 	mls	r0, r2, r0, r6
 8018668:	b280      	uxth	r0, r0
 801866a:	fb00 f303 	mul.w	r3, r0, r3
 801866e:	6820      	ldr	r0, [r4, #0]
 8018670:	3304      	adds	r3, #4
 8018672:	4418      	add	r0, r3
 8018674:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d0a0      	beq.n	80185be <uxr_receive_reliable_message+0x22>
 801867c:	6923      	ldr	r3, [r4, #16]
 801867e:	4798      	blx	r3
 8018680:	2802      	cmp	r0, #2
 8018682:	d008      	beq.n	8018696 <uxr_receive_reliable_message+0xfa>
 8018684:	2801      	cmp	r0, #1
 8018686:	d0e2      	beq.n	801864e <uxr_receive_reliable_message+0xb2>
 8018688:	e799      	b.n	80185be <uxr_receive_reliable_message+0x22>
 801868a:	9b08      	ldr	r3, [sp, #32]
 801868c:	81a5      	strh	r5, [r4, #12]
 801868e:	2601      	movs	r6, #1
 8018690:	f883 9000 	strb.w	r9, [r3]
 8018694:	e794      	b.n	80185c0 <uxr_receive_reliable_message+0x24>
 8018696:	2601      	movs	r6, #1
 8018698:	e792      	b.n	80185c0 <uxr_receive_reliable_message+0x24>
 801869a:	bf00      	nop

0801869c <uxr_next_input_reliable_buffer_available>:
 801869c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186a0:	4604      	mov	r4, r0
 80186a2:	460f      	mov	r7, r1
 80186a4:	8980      	ldrh	r0, [r0, #12]
 80186a6:	2101      	movs	r1, #1
 80186a8:	4690      	mov	r8, r2
 80186aa:	f000 fd07 	bl	80190bc <uxr_seq_num_add>
 80186ae:	8922      	ldrh	r2, [r4, #8]
 80186b0:	fbb0 f6f2 	udiv	r6, r0, r2
 80186b4:	fb02 0616 	mls	r6, r2, r6, r0
 80186b8:	b2b6      	uxth	r6, r6
 80186ba:	6863      	ldr	r3, [r4, #4]
 80186bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80186c0:	fb06 f303 	mul.w	r3, r6, r3
 80186c4:	6826      	ldr	r6, [r4, #0]
 80186c6:	3304      	adds	r3, #4
 80186c8:	441e      	add	r6, r3
 80186ca:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80186ce:	f1b9 0f00 	cmp.w	r9, #0
 80186d2:	d023      	beq.n	801871c <uxr_next_input_reliable_buffer_available+0x80>
 80186d4:	6923      	ldr	r3, [r4, #16]
 80186d6:	4605      	mov	r5, r0
 80186d8:	4630      	mov	r0, r6
 80186da:	4798      	blx	r3
 80186dc:	4682      	mov	sl, r0
 80186de:	b300      	cbz	r0, 8018722 <uxr_next_input_reliable_buffer_available+0x86>
 80186e0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80186e4:	2101      	movs	r1, #1
 80186e6:	4650      	mov	r0, sl
 80186e8:	f000 fce8 	bl	80190bc <uxr_seq_num_add>
 80186ec:	8921      	ldrh	r1, [r4, #8]
 80186ee:	fbb0 f2f1 	udiv	r2, r0, r1
 80186f2:	4682      	mov	sl, r0
 80186f4:	fb01 0212 	mls	r2, r1, r2, r0
 80186f8:	e9d4 0300 	ldrd	r0, r3, [r4]
 80186fc:	b292      	uxth	r2, r2
 80186fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8018702:	fb02 f303 	mul.w	r3, r2, r3
 8018706:	3304      	adds	r3, #4
 8018708:	4418      	add	r0, r3
 801870a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801870e:	b12b      	cbz	r3, 801871c <uxr_next_input_reliable_buffer_available+0x80>
 8018710:	6923      	ldr	r3, [r4, #16]
 8018712:	4798      	blx	r3
 8018714:	2802      	cmp	r0, #2
 8018716:	d01b      	beq.n	8018750 <uxr_next_input_reliable_buffer_available+0xb4>
 8018718:	2801      	cmp	r0, #1
 801871a:	d0e3      	beq.n	80186e4 <uxr_next_input_reliable_buffer_available+0x48>
 801871c:	2000      	movs	r0, #0
 801871e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018722:	464a      	mov	r2, r9
 8018724:	4631      	mov	r1, r6
 8018726:	4638      	mov	r0, r7
 8018728:	f7fa fcc2 	bl	80130b0 <ucdr_init_buffer>
 801872c:	8921      	ldrh	r1, [r4, #8]
 801872e:	fbb5 f2f1 	udiv	r2, r5, r1
 8018732:	fb01 5212 	mls	r2, r1, r2, r5
 8018736:	b292      	uxth	r2, r2
 8018738:	6863      	ldr	r3, [r4, #4]
 801873a:	fbb3 f3f1 	udiv	r3, r3, r1
 801873e:	fb02 f303 	mul.w	r3, r2, r3
 8018742:	6822      	ldr	r2, [r4, #0]
 8018744:	f842 a003 	str.w	sl, [r2, r3]
 8018748:	2001      	movs	r0, #1
 801874a:	81a5      	strh	r5, [r4, #12]
 801874c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018750:	8920      	ldrh	r0, [r4, #8]
 8018752:	fbb5 f3f0 	udiv	r3, r5, r0
 8018756:	fb00 5513 	mls	r5, r0, r3, r5
 801875a:	b2ad      	uxth	r5, r5
 801875c:	6863      	ldr	r3, [r4, #4]
 801875e:	fbb3 f3f0 	udiv	r3, r3, r0
 8018762:	fb03 f505 	mul.w	r5, r3, r5
 8018766:	6823      	ldr	r3, [r4, #0]
 8018768:	2000      	movs	r0, #0
 801876a:	5158      	str	r0, [r3, r5]
 801876c:	eb06 0108 	add.w	r1, r6, r8
 8018770:	eba9 0208 	sub.w	r2, r9, r8
 8018774:	4638      	mov	r0, r7
 8018776:	f7fa fc9b 	bl	80130b0 <ucdr_init_buffer>
 801877a:	4638      	mov	r0, r7
 801877c:	4903      	ldr	r1, [pc, #12]	; (801878c <uxr_next_input_reliable_buffer_available+0xf0>)
 801877e:	4622      	mov	r2, r4
 8018780:	f7fa fc6a 	bl	8013058 <ucdr_set_on_full_buffer_callback>
 8018784:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018788:	2001      	movs	r0, #1
 801878a:	e7c8      	b.n	801871e <uxr_next_input_reliable_buffer_available+0x82>
 801878c:	08018491 	.word	0x08018491

08018790 <uxr_process_heartbeat>:
 8018790:	b538      	push	{r3, r4, r5, lr}
 8018792:	4611      	mov	r1, r2
 8018794:	4604      	mov	r4, r0
 8018796:	89c0      	ldrh	r0, [r0, #14]
 8018798:	4615      	mov	r5, r2
 801879a:	f000 fc97 	bl	80190cc <uxr_seq_num_cmp>
 801879e:	2800      	cmp	r0, #0
 80187a0:	bfb8      	it	lt
 80187a2:	81e5      	strhlt	r5, [r4, #14]
 80187a4:	bd38      	pop	{r3, r4, r5, pc}
 80187a6:	bf00      	nop

080187a8 <uxr_compute_acknack>:
 80187a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187ac:	8903      	ldrh	r3, [r0, #8]
 80187ae:	8985      	ldrh	r5, [r0, #12]
 80187b0:	4604      	mov	r4, r0
 80187b2:	460e      	mov	r6, r1
 80187b4:	b1d3      	cbz	r3, 80187ec <uxr_compute_acknack+0x44>
 80187b6:	4628      	mov	r0, r5
 80187b8:	2701      	movs	r7, #1
 80187ba:	e003      	b.n	80187c4 <uxr_compute_acknack+0x1c>
 80187bc:	4567      	cmp	r7, ip
 80187be:	d215      	bcs.n	80187ec <uxr_compute_acknack+0x44>
 80187c0:	89a0      	ldrh	r0, [r4, #12]
 80187c2:	3701      	adds	r7, #1
 80187c4:	b2b9      	uxth	r1, r7
 80187c6:	f000 fc79 	bl	80190bc <uxr_seq_num_add>
 80187ca:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80187ce:	fbb0 f3fc 	udiv	r3, r0, ip
 80187d2:	fb0c 0313 	mls	r3, ip, r3, r0
 80187d6:	b29a      	uxth	r2, r3
 80187d8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80187dc:	fbb3 f3fc 	udiv	r3, r3, ip
 80187e0:	fb02 f303 	mul.w	r3, r2, r3
 80187e4:	58cb      	ldr	r3, [r1, r3]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d1e8      	bne.n	80187bc <uxr_compute_acknack+0x14>
 80187ea:	4605      	mov	r5, r0
 80187ec:	8035      	strh	r5, [r6, #0]
 80187ee:	2101      	movs	r1, #1
 80187f0:	4628      	mov	r0, r5
 80187f2:	89e7      	ldrh	r7, [r4, #14]
 80187f4:	f000 fc66 	bl	80190c4 <uxr_seq_num_sub>
 80187f8:	4601      	mov	r1, r0
 80187fa:	4638      	mov	r0, r7
 80187fc:	f000 fc62 	bl	80190c4 <uxr_seq_num_sub>
 8018800:	4605      	mov	r5, r0
 8018802:	b318      	cbz	r0, 801884c <uxr_compute_acknack+0xa4>
 8018804:	f04f 0900 	mov.w	r9, #0
 8018808:	464f      	mov	r7, r9
 801880a:	f04f 0801 	mov.w	r8, #1
 801880e:	fa1f f189 	uxth.w	r1, r9
 8018812:	8830      	ldrh	r0, [r6, #0]
 8018814:	f000 fc52 	bl	80190bc <uxr_seq_num_add>
 8018818:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801881c:	fbb0 f3fc 	udiv	r3, r0, ip
 8018820:	e9d4 1200 	ldrd	r1, r2, [r4]
 8018824:	fb03 001c 	mls	r0, r3, ip, r0
 8018828:	b283      	uxth	r3, r0
 801882a:	fbb2 f2fc 	udiv	r2, r2, ip
 801882e:	fb02 f303 	mul.w	r3, r2, r3
 8018832:	fa08 f209 	lsl.w	r2, r8, r9
 8018836:	58cb      	ldr	r3, [r1, r3]
 8018838:	f109 0901 	add.w	r9, r9, #1
 801883c:	b90b      	cbnz	r3, 8018842 <uxr_compute_acknack+0x9a>
 801883e:	4317      	orrs	r7, r2
 8018840:	b2bf      	uxth	r7, r7
 8018842:	454d      	cmp	r5, r9
 8018844:	d1e3      	bne.n	801880e <uxr_compute_acknack+0x66>
 8018846:	4638      	mov	r0, r7
 8018848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801884c:	4607      	mov	r7, r0
 801884e:	4638      	mov	r0, r7
 8018850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018854 <uxr_init_output_best_effort_stream>:
 8018854:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8018858:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801885c:	6001      	str	r1, [r0, #0]
 801885e:	7303      	strb	r3, [r0, #12]
 8018860:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018864:	4770      	bx	lr
 8018866:	bf00      	nop

08018868 <uxr_reset_output_best_effort_stream>:
 8018868:	7b02      	ldrb	r2, [r0, #12]
 801886a:	6042      	str	r2, [r0, #4]
 801886c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018870:	81c3      	strh	r3, [r0, #14]
 8018872:	4770      	bx	lr

08018874 <uxr_prepare_best_effort_buffer_to_write>:
 8018874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018876:	4604      	mov	r4, r0
 8018878:	b083      	sub	sp, #12
 801887a:	6840      	ldr	r0, [r0, #4]
 801887c:	460d      	mov	r5, r1
 801887e:	4616      	mov	r6, r2
 8018880:	f7fc f864 	bl	801494c <uxr_submessage_padding>
 8018884:	6863      	ldr	r3, [r4, #4]
 8018886:	4418      	add	r0, r3
 8018888:	68a3      	ldr	r3, [r4, #8]
 801888a:	1942      	adds	r2, r0, r5
 801888c:	4293      	cmp	r3, r2
 801888e:	bf2c      	ite	cs
 8018890:	2701      	movcs	r7, #1
 8018892:	2700      	movcc	r7, #0
 8018894:	d202      	bcs.n	801889c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018896:	4638      	mov	r0, r7
 8018898:	b003      	add	sp, #12
 801889a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801889c:	9000      	str	r0, [sp, #0]
 801889e:	6821      	ldr	r1, [r4, #0]
 80188a0:	4630      	mov	r0, r6
 80188a2:	2300      	movs	r3, #0
 80188a4:	f7fa fbf2 	bl	801308c <ucdr_init_buffer_origin_offset>
 80188a8:	6861      	ldr	r1, [r4, #4]
 80188aa:	4638      	mov	r0, r7
 80188ac:	4429      	add	r1, r5
 80188ae:	6061      	str	r1, [r4, #4]
 80188b0:	b003      	add	sp, #12
 80188b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080188b4 <uxr_prepare_best_effort_buffer_to_send>:
 80188b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188b8:	4604      	mov	r4, r0
 80188ba:	461d      	mov	r5, r3
 80188bc:	6840      	ldr	r0, [r0, #4]
 80188be:	7b23      	ldrb	r3, [r4, #12]
 80188c0:	4298      	cmp	r0, r3
 80188c2:	bf8c      	ite	hi
 80188c4:	2601      	movhi	r6, #1
 80188c6:	2600      	movls	r6, #0
 80188c8:	d802      	bhi.n	80188d0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80188ca:	4630      	mov	r0, r6
 80188cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188d0:	4688      	mov	r8, r1
 80188d2:	89e0      	ldrh	r0, [r4, #14]
 80188d4:	2101      	movs	r1, #1
 80188d6:	4617      	mov	r7, r2
 80188d8:	f000 fbf0 	bl	80190bc <uxr_seq_num_add>
 80188dc:	6823      	ldr	r3, [r4, #0]
 80188de:	81e0      	strh	r0, [r4, #14]
 80188e0:	8028      	strh	r0, [r5, #0]
 80188e2:	f8c8 3000 	str.w	r3, [r8]
 80188e6:	6863      	ldr	r3, [r4, #4]
 80188e8:	603b      	str	r3, [r7, #0]
 80188ea:	7b23      	ldrb	r3, [r4, #12]
 80188ec:	6063      	str	r3, [r4, #4]
 80188ee:	4630      	mov	r0, r6
 80188f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080188f4 <on_full_output_buffer>:
 80188f4:	b538      	push	{r3, r4, r5, lr}
 80188f6:	6802      	ldr	r2, [r0, #0]
 80188f8:	460c      	mov	r4, r1
 80188fa:	6809      	ldr	r1, [r1, #0]
 80188fc:	8923      	ldrh	r3, [r4, #8]
 80188fe:	eba2 0c01 	sub.w	ip, r2, r1
 8018902:	6862      	ldr	r2, [r4, #4]
 8018904:	fbb2 f2f3 	udiv	r2, r2, r3
 8018908:	fbbc fcf2 	udiv	ip, ip, r2
 801890c:	f10c 0c01 	add.w	ip, ip, #1
 8018910:	fa1f fc8c 	uxth.w	ip, ip
 8018914:	fbbc fef3 	udiv	lr, ip, r3
 8018918:	fb03 c31e 	mls	r3, r3, lr, ip
 801891c:	b29b      	uxth	r3, r3
 801891e:	fb02 f303 	mul.w	r3, r2, r3
 8018922:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018926:	58ca      	ldr	r2, [r1, r3]
 8018928:	4463      	add	r3, ip
 801892a:	eba2 020c 	sub.w	r2, r2, ip
 801892e:	3308      	adds	r3, #8
 8018930:	4605      	mov	r5, r0
 8018932:	4419      	add	r1, r3
 8018934:	3a04      	subs	r2, #4
 8018936:	6903      	ldr	r3, [r0, #16]
 8018938:	f7fa fbb2 	bl	80130a0 <ucdr_init_buffer_origin>
 801893c:	4628      	mov	r0, r5
 801893e:	4903      	ldr	r1, [pc, #12]	; (801894c <on_full_output_buffer+0x58>)
 8018940:	4622      	mov	r2, r4
 8018942:	f7fa fb89 	bl	8013058 <ucdr_set_on_full_buffer_callback>
 8018946:	2000      	movs	r0, #0
 8018948:	bd38      	pop	{r3, r4, r5, pc}
 801894a:	bf00      	nop
 801894c:	080188f5 	.word	0x080188f5

08018950 <uxr_init_output_reliable_stream>:
 8018950:	b410      	push	{r4}
 8018952:	f89d c004 	ldrb.w	ip, [sp, #4]
 8018956:	8103      	strh	r3, [r0, #8]
 8018958:	e9c0 1200 	strd	r1, r2, [r0]
 801895c:	f880 c00c 	strb.w	ip, [r0, #12]
 8018960:	b1d3      	cbz	r3, 8018998 <uxr_init_output_reliable_stream+0x48>
 8018962:	f8c1 c000 	str.w	ip, [r1]
 8018966:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801896a:	f1bc 0f01 	cmp.w	ip, #1
 801896e:	d913      	bls.n	8018998 <uxr_init_output_reliable_stream+0x48>
 8018970:	2301      	movs	r3, #1
 8018972:	fbb3 f1fc 	udiv	r1, r3, ip
 8018976:	fb0c 3111 	mls	r1, ip, r1, r3
 801897a:	b289      	uxth	r1, r1
 801897c:	6842      	ldr	r2, [r0, #4]
 801897e:	6804      	ldr	r4, [r0, #0]
 8018980:	fbb2 f2fc 	udiv	r2, r2, ip
 8018984:	fb01 f202 	mul.w	r2, r1, r2
 8018988:	7b01      	ldrb	r1, [r0, #12]
 801898a:	50a1      	str	r1, [r4, r2]
 801898c:	3301      	adds	r3, #1
 801898e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018992:	b29b      	uxth	r3, r3
 8018994:	459c      	cmp	ip, r3
 8018996:	d8ec      	bhi.n	8018972 <uxr_init_output_reliable_stream+0x22>
 8018998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801899c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80189a0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80189a4:	4905      	ldr	r1, [pc, #20]	; (80189bc <uxr_init_output_reliable_stream+0x6c>)
 80189a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80189aa:	f8c0 100e 	str.w	r1, [r0, #14]
 80189ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80189b2:	2300      	movs	r3, #0
 80189b4:	8242      	strh	r2, [r0, #18]
 80189b6:	8403      	strh	r3, [r0, #32]
 80189b8:	4770      	bx	lr
 80189ba:	bf00      	nop
 80189bc:	ffff0000 	.word	0xffff0000

080189c0 <uxr_reset_output_reliable_stream>:
 80189c0:	8901      	ldrh	r1, [r0, #8]
 80189c2:	b1b1      	cbz	r1, 80189f2 <uxr_reset_output_reliable_stream+0x32>
 80189c4:	f04f 0c00 	mov.w	ip, #0
 80189c8:	4663      	mov	r3, ip
 80189ca:	fbb3 f2f1 	udiv	r2, r3, r1
 80189ce:	fb01 3312 	mls	r3, r1, r2, r3
 80189d2:	b29b      	uxth	r3, r3
 80189d4:	6842      	ldr	r2, [r0, #4]
 80189d6:	fbb2 f2f1 	udiv	r2, r2, r1
 80189da:	6801      	ldr	r1, [r0, #0]
 80189dc:	fb02 f303 	mul.w	r3, r2, r3
 80189e0:	7b02      	ldrb	r2, [r0, #12]
 80189e2:	50ca      	str	r2, [r1, r3]
 80189e4:	f10c 0c01 	add.w	ip, ip, #1
 80189e8:	8901      	ldrh	r1, [r0, #8]
 80189ea:	fa1f f38c 	uxth.w	r3, ip
 80189ee:	4299      	cmp	r1, r3
 80189f0:	d8eb      	bhi.n	80189ca <uxr_reset_output_reliable_stream+0xa>
 80189f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80189f6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80189fa:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80189fe:	4904      	ldr	r1, [pc, #16]	; (8018a10 <uxr_reset_output_reliable_stream+0x50>)
 8018a00:	f8c0 100e 	str.w	r1, [r0, #14]
 8018a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a08:	2300      	movs	r3, #0
 8018a0a:	8242      	strh	r2, [r0, #18]
 8018a0c:	8403      	strh	r3, [r0, #32]
 8018a0e:	4770      	bx	lr
 8018a10:	ffff0000 	.word	0xffff0000

08018a14 <uxr_prepare_reliable_buffer_to_write>:
 8018a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a18:	4604      	mov	r4, r0
 8018a1a:	8900      	ldrh	r0, [r0, #8]
 8018a1c:	89e5      	ldrh	r5, [r4, #14]
 8018a1e:	fbb5 f3f0 	udiv	r3, r5, r0
 8018a22:	b091      	sub	sp, #68	; 0x44
 8018a24:	fb00 5313 	mls	r3, r0, r3, r5
 8018a28:	b29b      	uxth	r3, r3
 8018a2a:	9205      	str	r2, [sp, #20]
 8018a2c:	6862      	ldr	r2, [r4, #4]
 8018a2e:	fbb2 f0f0 	udiv	r0, r2, r0
 8018a32:	6822      	ldr	r2, [r4, #0]
 8018a34:	9006      	str	r0, [sp, #24]
 8018a36:	fb00 f303 	mul.w	r3, r0, r3
 8018a3a:	3304      	adds	r3, #4
 8018a3c:	18d3      	adds	r3, r2, r3
 8018a3e:	4689      	mov	r9, r1
 8018a40:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8018a44:	9304      	str	r3, [sp, #16]
 8018a46:	f1a0 0804 	sub.w	r8, r0, #4
 8018a4a:	2104      	movs	r1, #4
 8018a4c:	4630      	mov	r0, r6
 8018a4e:	f7fa fb33 	bl	80130b8 <ucdr_alignment>
 8018a52:	1833      	adds	r3, r6, r0
 8018a54:	eb03 0609 	add.w	r6, r3, r9
 8018a58:	4546      	cmp	r6, r8
 8018a5a:	9303      	str	r3, [sp, #12]
 8018a5c:	f240 80d6 	bls.w	8018c0c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8018a60:	7b26      	ldrb	r6, [r4, #12]
 8018a62:	eb06 0309 	add.w	r3, r6, r9
 8018a66:	4543      	cmp	r3, r8
 8018a68:	f240 80bd 	bls.w	8018be6 <uxr_prepare_reliable_buffer_to_write+0x1d2>
 8018a6c:	9b03      	ldr	r3, [sp, #12]
 8018a6e:	3304      	adds	r3, #4
 8018a70:	4543      	cmp	r3, r8
 8018a72:	f080 810d 	bcs.w	8018c90 <uxr_prepare_reliable_buffer_to_write+0x27c>
 8018a76:	8920      	ldrh	r0, [r4, #8]
 8018a78:	2800      	cmp	r0, #0
 8018a7a:	f000 8122 	beq.w	8018cc2 <uxr_prepare_reliable_buffer_to_write+0x2ae>
 8018a7e:	2100      	movs	r1, #0
 8018a80:	6827      	ldr	r7, [r4, #0]
 8018a82:	6862      	ldr	r2, [r4, #4]
 8018a84:	fbb2 fef0 	udiv	lr, r2, r0
 8018a88:	468c      	mov	ip, r1
 8018a8a:	460b      	mov	r3, r1
 8018a8c:	fbb3 f2f0 	udiv	r2, r3, r0
 8018a90:	fb00 3312 	mls	r3, r0, r2, r3
 8018a94:	b29b      	uxth	r3, r3
 8018a96:	fb0e f303 	mul.w	r3, lr, r3
 8018a9a:	3101      	adds	r1, #1
 8018a9c:	58fa      	ldr	r2, [r7, r3]
 8018a9e:	4296      	cmp	r6, r2
 8018aa0:	bf08      	it	eq
 8018aa2:	f10c 0c01 	addeq.w	ip, ip, #1
 8018aa6:	b28b      	uxth	r3, r1
 8018aa8:	bf08      	it	eq
 8018aaa:	fa1f fc8c 	uxtheq.w	ip, ip
 8018aae:	4283      	cmp	r3, r0
 8018ab0:	d3ec      	bcc.n	8018a8c <uxr_prepare_reliable_buffer_to_write+0x78>
 8018ab2:	9b03      	ldr	r3, [sp, #12]
 8018ab4:	f1a8 0704 	sub.w	r7, r8, #4
 8018ab8:	b2bf      	uxth	r7, r7
 8018aba:	1bbe      	subs	r6, r7, r6
 8018abc:	1aff      	subs	r7, r7, r3
 8018abe:	b2bf      	uxth	r7, r7
 8018ac0:	b2b6      	uxth	r6, r6
 8018ac2:	eba9 0907 	sub.w	r9, r9, r7
 8018ac6:	fbb9 faf6 	udiv	sl, r9, r6
 8018aca:	fb06 911a 	mls	r1, r6, sl, r9
 8018ace:	9607      	str	r6, [sp, #28]
 8018ad0:	2900      	cmp	r1, #0
 8018ad2:	f040 80bc 	bne.w	8018c4e <uxr_prepare_reliable_buffer_to_write+0x23a>
 8018ad6:	fa1f fa8a 	uxth.w	sl, sl
 8018ada:	45e2      	cmp	sl, ip
 8018adc:	f200 8092 	bhi.w	8018c04 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8018ae0:	f10d 0b20 	add.w	fp, sp, #32
 8018ae4:	f1ba 0f00 	cmp.w	sl, #0
 8018ae8:	d03a      	beq.n	8018b60 <uxr_prepare_reliable_buffer_to_write+0x14c>
 8018aea:	f04f 0900 	mov.w	r9, #0
 8018aee:	f10d 0b20 	add.w	fp, sp, #32
 8018af2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018af6:	fbb5 fcf0 	udiv	ip, r5, r0
 8018afa:	fb00 511c 	mls	r1, r0, ip, r5
 8018afe:	fa1f fc81 	uxth.w	ip, r1
 8018b02:	fbb3 f1f0 	udiv	r1, r3, r0
 8018b06:	fb0c f101 	mul.w	r1, ip, r1
 8018b0a:	3104      	adds	r1, #4
 8018b0c:	4411      	add	r1, r2
 8018b0e:	4658      	mov	r0, fp
 8018b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b14:	9300      	str	r3, [sp, #0]
 8018b16:	4642      	mov	r2, r8
 8018b18:	2300      	movs	r3, #0
 8018b1a:	f7fa fab7 	bl	801308c <ucdr_init_buffer_origin_offset>
 8018b1e:	463a      	mov	r2, r7
 8018b20:	2300      	movs	r3, #0
 8018b22:	210d      	movs	r1, #13
 8018b24:	4658      	mov	r0, fp
 8018b26:	f7fb fed1 	bl	80148cc <uxr_buffer_submessage_header>
 8018b2a:	8921      	ldrh	r1, [r4, #8]
 8018b2c:	fbb5 f2f1 	udiv	r2, r5, r1
 8018b30:	fb01 5212 	mls	r2, r1, r2, r5
 8018b34:	b292      	uxth	r2, r2
 8018b36:	6863      	ldr	r3, [r4, #4]
 8018b38:	fbb3 f3f1 	udiv	r3, r3, r1
 8018b3c:	fb02 f303 	mul.w	r3, r2, r3
 8018b40:	6822      	ldr	r2, [r4, #0]
 8018b42:	4628      	mov	r0, r5
 8018b44:	f842 8003 	str.w	r8, [r2, r3]
 8018b48:	2101      	movs	r1, #1
 8018b4a:	f000 fab7 	bl	80190bc <uxr_seq_num_add>
 8018b4e:	f109 0901 	add.w	r9, r9, #1
 8018b52:	fa1f f389 	uxth.w	r3, r9
 8018b56:	459a      	cmp	sl, r3
 8018b58:	4605      	mov	r5, r0
 8018b5a:	4637      	mov	r7, r6
 8018b5c:	8920      	ldrh	r0, [r4, #8]
 8018b5e:	d8c8      	bhi.n	8018af2 <uxr_prepare_reliable_buffer_to_write+0xde>
 8018b60:	fbb5 f1f0 	udiv	r1, r5, r0
 8018b64:	fb00 5111 	mls	r1, r0, r1, r5
 8018b68:	b28e      	uxth	r6, r1
 8018b6a:	6863      	ldr	r3, [r4, #4]
 8018b6c:	fbb3 f1f0 	udiv	r1, r3, r0
 8018b70:	6823      	ldr	r3, [r4, #0]
 8018b72:	fb06 f101 	mul.w	r1, r6, r1
 8018b76:	3104      	adds	r1, #4
 8018b78:	4419      	add	r1, r3
 8018b7a:	4642      	mov	r2, r8
 8018b7c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018b80:	9000      	str	r0, [sp, #0]
 8018b82:	2300      	movs	r3, #0
 8018b84:	4658      	mov	r0, fp
 8018b86:	f7fa fa81 	bl	801308c <ucdr_init_buffer_origin_offset>
 8018b8a:	9e07      	ldr	r6, [sp, #28]
 8018b8c:	4658      	mov	r0, fp
 8018b8e:	b2b2      	uxth	r2, r6
 8018b90:	2302      	movs	r3, #2
 8018b92:	210d      	movs	r1, #13
 8018b94:	f7fb fe9a 	bl	80148cc <uxr_buffer_submessage_header>
 8018b98:	9b06      	ldr	r3, [sp, #24]
 8018b9a:	7b20      	ldrb	r0, [r4, #12]
 8018b9c:	8927      	ldrh	r7, [r4, #8]
 8018b9e:	f1a3 0208 	sub.w	r2, r3, #8
 8018ba2:	9b03      	ldr	r3, [sp, #12]
 8018ba4:	3004      	adds	r0, #4
 8018ba6:	1ad2      	subs	r2, r2, r3
 8018ba8:	1d19      	adds	r1, r3, #4
 8018baa:	9b04      	ldr	r3, [sp, #16]
 8018bac:	4430      	add	r0, r6
 8018bae:	fbb5 f6f7 	udiv	r6, r5, r7
 8018bb2:	fb07 5616 	mls	r6, r7, r6, r5
 8018bb6:	440b      	add	r3, r1
 8018bb8:	b2b6      	uxth	r6, r6
 8018bba:	4619      	mov	r1, r3
 8018bbc:	6863      	ldr	r3, [r4, #4]
 8018bbe:	fbb3 f3f7 	udiv	r3, r3, r7
 8018bc2:	fb06 f303 	mul.w	r3, r6, r3
 8018bc6:	6826      	ldr	r6, [r4, #0]
 8018bc8:	50f0      	str	r0, [r6, r3]
 8018bca:	9e05      	ldr	r6, [sp, #20]
 8018bcc:	4630      	mov	r0, r6
 8018bce:	f7fa fa6f 	bl	80130b0 <ucdr_init_buffer>
 8018bd2:	4630      	mov	r0, r6
 8018bd4:	493c      	ldr	r1, [pc, #240]	; (8018cc8 <uxr_prepare_reliable_buffer_to_write+0x2b4>)
 8018bd6:	4622      	mov	r2, r4
 8018bd8:	f7fa fa3e 	bl	8013058 <ucdr_set_on_full_buffer_callback>
 8018bdc:	2001      	movs	r0, #1
 8018bde:	81e5      	strh	r5, [r4, #14]
 8018be0:	b011      	add	sp, #68	; 0x44
 8018be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018be6:	2101      	movs	r1, #1
 8018be8:	89e0      	ldrh	r0, [r4, #14]
 8018bea:	f000 fa67 	bl	80190bc <uxr_seq_num_add>
 8018bee:	8921      	ldrh	r1, [r4, #8]
 8018bf0:	4605      	mov	r5, r0
 8018bf2:	8a60      	ldrh	r0, [r4, #18]
 8018bf4:	f000 fa62 	bl	80190bc <uxr_seq_num_add>
 8018bf8:	4601      	mov	r1, r0
 8018bfa:	4628      	mov	r0, r5
 8018bfc:	f000 fa66 	bl	80190cc <uxr_seq_num_cmp>
 8018c00:	2800      	cmp	r0, #0
 8018c02:	dd2a      	ble.n	8018c5a <uxr_prepare_reliable_buffer_to_write+0x246>
 8018c04:	2000      	movs	r0, #0
 8018c06:	b011      	add	sp, #68	; 0x44
 8018c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c0c:	8921      	ldrh	r1, [r4, #8]
 8018c0e:	8a60      	ldrh	r0, [r4, #18]
 8018c10:	f000 fa54 	bl	80190bc <uxr_seq_num_add>
 8018c14:	4601      	mov	r1, r0
 8018c16:	4628      	mov	r0, r5
 8018c18:	f000 fa58 	bl	80190cc <uxr_seq_num_cmp>
 8018c1c:	2800      	cmp	r0, #0
 8018c1e:	dcf1      	bgt.n	8018c04 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8018c20:	8927      	ldrh	r7, [r4, #8]
 8018c22:	fbb5 f2f7 	udiv	r2, r5, r7
 8018c26:	fb07 5512 	mls	r5, r7, r2, r5
 8018c2a:	b2ad      	uxth	r5, r5
 8018c2c:	6863      	ldr	r3, [r4, #4]
 8018c2e:	6822      	ldr	r2, [r4, #0]
 8018c30:	fbb3 f3f7 	udiv	r3, r3, r7
 8018c34:	fb05 f303 	mul.w	r3, r5, r3
 8018c38:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8018c3c:	50d6      	str	r6, [r2, r3]
 8018c3e:	9a03      	ldr	r2, [sp, #12]
 8018c40:	9200      	str	r2, [sp, #0]
 8018c42:	2300      	movs	r3, #0
 8018c44:	4632      	mov	r2, r6
 8018c46:	f7fa fa21 	bl	801308c <ucdr_init_buffer_origin_offset>
 8018c4a:	2001      	movs	r0, #1
 8018c4c:	e7db      	b.n	8018c06 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 8018c4e:	f10a 0a01 	add.w	sl, sl, #1
 8018c52:	fa1f fa8a 	uxth.w	sl, sl
 8018c56:	9107      	str	r1, [sp, #28]
 8018c58:	e73f      	b.n	8018ada <uxr_prepare_reliable_buffer_to_write+0xc6>
 8018c5a:	8921      	ldrh	r1, [r4, #8]
 8018c5c:	fbb5 f3f1 	udiv	r3, r5, r1
 8018c60:	fb01 5313 	mls	r3, r1, r3, r5
 8018c64:	b29a      	uxth	r2, r3
 8018c66:	6863      	ldr	r3, [r4, #4]
 8018c68:	fbb3 f3f1 	udiv	r3, r3, r1
 8018c6c:	6821      	ldr	r1, [r4, #0]
 8018c6e:	9805      	ldr	r0, [sp, #20]
 8018c70:	fb02 f303 	mul.w	r3, r2, r3
 8018c74:	3304      	adds	r3, #4
 8018c76:	7b22      	ldrb	r2, [r4, #12]
 8018c78:	4419      	add	r1, r3
 8018c7a:	444a      	add	r2, r9
 8018c7c:	f841 2c04 	str.w	r2, [r1, #-4]
 8018c80:	7b23      	ldrb	r3, [r4, #12]
 8018c82:	9300      	str	r3, [sp, #0]
 8018c84:	2300      	movs	r3, #0
 8018c86:	f7fa fa01 	bl	801308c <ucdr_init_buffer_origin_offset>
 8018c8a:	81e5      	strh	r5, [r4, #14]
 8018c8c:	2001      	movs	r0, #1
 8018c8e:	e7ba      	b.n	8018c06 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 8018c90:	4628      	mov	r0, r5
 8018c92:	2101      	movs	r1, #1
 8018c94:	f000 fa12 	bl	80190bc <uxr_seq_num_add>
 8018c98:	4605      	mov	r5, r0
 8018c9a:	8920      	ldrh	r0, [r4, #8]
 8018c9c:	fbb5 f3f0 	udiv	r3, r5, r0
 8018ca0:	fb00 5313 	mls	r3, r0, r3, r5
 8018ca4:	b29a      	uxth	r2, r3
 8018ca6:	6863      	ldr	r3, [r4, #4]
 8018ca8:	fbb3 f3f0 	udiv	r3, r3, r0
 8018cac:	fb02 f303 	mul.w	r3, r2, r3
 8018cb0:	6822      	ldr	r2, [r4, #0]
 8018cb2:	7b26      	ldrb	r6, [r4, #12]
 8018cb4:	3304      	adds	r3, #4
 8018cb6:	18d3      	adds	r3, r2, r3
 8018cb8:	9304      	str	r3, [sp, #16]
 8018cba:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018cbe:	9303      	str	r3, [sp, #12]
 8018cc0:	e6da      	b.n	8018a78 <uxr_prepare_reliable_buffer_to_write+0x64>
 8018cc2:	4684      	mov	ip, r0
 8018cc4:	e6f5      	b.n	8018ab2 <uxr_prepare_reliable_buffer_to_write+0x9e>
 8018cc6:	bf00      	nop
 8018cc8:	080188f5 	.word	0x080188f5

08018ccc <uxr_prepare_next_reliable_buffer_to_send>:
 8018ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cce:	4604      	mov	r4, r0
 8018cd0:	460f      	mov	r7, r1
 8018cd2:	8a00      	ldrh	r0, [r0, #16]
 8018cd4:	2101      	movs	r1, #1
 8018cd6:	4616      	mov	r6, r2
 8018cd8:	461d      	mov	r5, r3
 8018cda:	f000 f9ef 	bl	80190bc <uxr_seq_num_add>
 8018cde:	8028      	strh	r0, [r5, #0]
 8018ce0:	8922      	ldrh	r2, [r4, #8]
 8018ce2:	fbb0 f3f2 	udiv	r3, r0, r2
 8018ce6:	fb02 0c13 	mls	ip, r2, r3, r0
 8018cea:	fa1f fc8c 	uxth.w	ip, ip
 8018cee:	6863      	ldr	r3, [r4, #4]
 8018cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8018cf4:	fb0c fc03 	mul.w	ip, ip, r3
 8018cf8:	6823      	ldr	r3, [r4, #0]
 8018cfa:	89e1      	ldrh	r1, [r4, #14]
 8018cfc:	f10c 0c04 	add.w	ip, ip, #4
 8018d00:	4463      	add	r3, ip
 8018d02:	603b      	str	r3, [r7, #0]
 8018d04:	6823      	ldr	r3, [r4, #0]
 8018d06:	449c      	add	ip, r3
 8018d08:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018d0c:	6033      	str	r3, [r6, #0]
 8018d0e:	f000 f9dd 	bl	80190cc <uxr_seq_num_cmp>
 8018d12:	2800      	cmp	r0, #0
 8018d14:	dd01      	ble.n	8018d1a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8018d16:	2000      	movs	r0, #0
 8018d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d1a:	7b23      	ldrb	r3, [r4, #12]
 8018d1c:	6832      	ldr	r2, [r6, #0]
 8018d1e:	429a      	cmp	r2, r3
 8018d20:	d9f9      	bls.n	8018d16 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018d22:	8a61      	ldrh	r1, [r4, #18]
 8018d24:	8a20      	ldrh	r0, [r4, #16]
 8018d26:	f000 f9cd 	bl	80190c4 <uxr_seq_num_sub>
 8018d2a:	8923      	ldrh	r3, [r4, #8]
 8018d2c:	4283      	cmp	r3, r0
 8018d2e:	d0f2      	beq.n	8018d16 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018d30:	8828      	ldrh	r0, [r5, #0]
 8018d32:	89e3      	ldrh	r3, [r4, #14]
 8018d34:	8220      	strh	r0, [r4, #16]
 8018d36:	4298      	cmp	r0, r3
 8018d38:	d001      	beq.n	8018d3e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8018d3a:	2001      	movs	r0, #1
 8018d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d3e:	2101      	movs	r1, #1
 8018d40:	f000 f9bc 	bl	80190bc <uxr_seq_num_add>
 8018d44:	81e0      	strh	r0, [r4, #14]
 8018d46:	2001      	movs	r0, #1
 8018d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d4a:	bf00      	nop

08018d4c <uxr_update_output_stream_heartbeat_timestamp>:
 8018d4c:	b570      	push	{r4, r5, r6, lr}
 8018d4e:	8a01      	ldrh	r1, [r0, #16]
 8018d50:	4604      	mov	r4, r0
 8018d52:	8a40      	ldrh	r0, [r0, #18]
 8018d54:	4615      	mov	r5, r2
 8018d56:	461e      	mov	r6, r3
 8018d58:	f000 f9b8 	bl	80190cc <uxr_seq_num_cmp>
 8018d5c:	2800      	cmp	r0, #0
 8018d5e:	db07      	blt.n	8018d70 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018d68:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018d6c:	2000      	movs	r0, #0
 8018d6e:	bd70      	pop	{r4, r5, r6, pc}
 8018d70:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018d74:	b940      	cbnz	r0, 8018d88 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8018d76:	2301      	movs	r3, #1
 8018d78:	f884 3020 	strb.w	r3, [r4, #32]
 8018d7c:	3564      	adds	r5, #100	; 0x64
 8018d7e:	f146 0600 	adc.w	r6, r6, #0
 8018d82:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018d86:	bd70      	pop	{r4, r5, r6, pc}
 8018d88:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018d8c:	4295      	cmp	r5, r2
 8018d8e:	eb76 0303 	sbcs.w	r3, r6, r3
 8018d92:	bfa5      	ittet	ge
 8018d94:	3001      	addge	r0, #1
 8018d96:	f884 0020 	strbge.w	r0, [r4, #32]
 8018d9a:	2000      	movlt	r0, #0
 8018d9c:	2001      	movge	r0, #1
 8018d9e:	e7ed      	b.n	8018d7c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08018da0 <uxr_begin_output_nack_buffer_it>:
 8018da0:	8a40      	ldrh	r0, [r0, #18]
 8018da2:	4770      	bx	lr

08018da4 <uxr_next_reliable_nack_buffer_to_send>:
 8018da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018da8:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 8018dac:	b082      	sub	sp, #8
 8018dae:	f1b8 0f00 	cmp.w	r8, #0
 8018db2:	d011      	beq.n	8018dd8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8018db4:	4604      	mov	r4, r0
 8018db6:	8818      	ldrh	r0, [r3, #0]
 8018db8:	460e      	mov	r6, r1
 8018dba:	4617      	mov	r7, r2
 8018dbc:	461d      	mov	r5, r3
 8018dbe:	2101      	movs	r1, #1
 8018dc0:	f000 f97c 	bl	80190bc <uxr_seq_num_add>
 8018dc4:	8028      	strh	r0, [r5, #0]
 8018dc6:	8a21      	ldrh	r1, [r4, #16]
 8018dc8:	f000 f980 	bl	80190cc <uxr_seq_num_cmp>
 8018dcc:	2800      	cmp	r0, #0
 8018dce:	dd07      	ble.n	8018de0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8018dd0:	f04f 0800 	mov.w	r8, #0
 8018dd4:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8018dd8:	4640      	mov	r0, r8
 8018dda:	b002      	add	sp, #8
 8018ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018de0:	8921      	ldrh	r1, [r4, #8]
 8018de2:	8828      	ldrh	r0, [r5, #0]
 8018de4:	6823      	ldr	r3, [r4, #0]
 8018de6:	fbb0 f2f1 	udiv	r2, r0, r1
 8018dea:	fb01 0c12 	mls	ip, r1, r2, r0
 8018dee:	fa1f f28c 	uxth.w	r2, ip
 8018df2:	9301      	str	r3, [sp, #4]
 8018df4:	6863      	ldr	r3, [r4, #4]
 8018df6:	fbb3 fcf1 	udiv	ip, r3, r1
 8018dfa:	9b01      	ldr	r3, [sp, #4]
 8018dfc:	fb02 fc0c 	mul.w	ip, r2, ip
 8018e00:	f10c 0c04 	add.w	ip, ip, #4
 8018e04:	4463      	add	r3, ip
 8018e06:	6033      	str	r3, [r6, #0]
 8018e08:	6823      	ldr	r3, [r4, #0]
 8018e0a:	4463      	add	r3, ip
 8018e0c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018e10:	603b      	str	r3, [r7, #0]
 8018e12:	7b22      	ldrb	r2, [r4, #12]
 8018e14:	429a      	cmp	r2, r3
 8018e16:	d0d2      	beq.n	8018dbe <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8018e18:	4640      	mov	r0, r8
 8018e1a:	b002      	add	sp, #8
 8018e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018e20 <uxr_process_acknack>:
 8018e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e22:	4604      	mov	r4, r0
 8018e24:	460e      	mov	r6, r1
 8018e26:	4610      	mov	r0, r2
 8018e28:	2101      	movs	r1, #1
 8018e2a:	f000 f94b 	bl	80190c4 <uxr_seq_num_sub>
 8018e2e:	8a61      	ldrh	r1, [r4, #18]
 8018e30:	f000 f948 	bl	80190c4 <uxr_seq_num_sub>
 8018e34:	b1c0      	cbz	r0, 8018e68 <uxr_process_acknack+0x48>
 8018e36:	4605      	mov	r5, r0
 8018e38:	2700      	movs	r7, #0
 8018e3a:	2101      	movs	r1, #1
 8018e3c:	8a60      	ldrh	r0, [r4, #18]
 8018e3e:	f000 f93d 	bl	80190bc <uxr_seq_num_add>
 8018e42:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018e46:	fbb0 f1fc 	udiv	r1, r0, ip
 8018e4a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018e4e:	fb0c 0111 	mls	r1, ip, r1, r0
 8018e52:	b289      	uxth	r1, r1
 8018e54:	3701      	adds	r7, #1
 8018e56:	fbb3 f3fc 	udiv	r3, r3, ip
 8018e5a:	fb01 f303 	mul.w	r3, r1, r3
 8018e5e:	42bd      	cmp	r5, r7
 8018e60:	7b21      	ldrb	r1, [r4, #12]
 8018e62:	8260      	strh	r0, [r4, #18]
 8018e64:	50d1      	str	r1, [r2, r3]
 8018e66:	d1e8      	bne.n	8018e3a <uxr_process_acknack+0x1a>
 8018e68:	3e00      	subs	r6, #0
 8018e6a:	f04f 0300 	mov.w	r3, #0
 8018e6e:	bf18      	it	ne
 8018e70:	2601      	movne	r6, #1
 8018e72:	f884 3020 	strb.w	r3, [r4, #32]
 8018e76:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8018e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018e7c <uxr_is_output_up_to_date>:
 8018e7c:	8a01      	ldrh	r1, [r0, #16]
 8018e7e:	8a40      	ldrh	r0, [r0, #18]
 8018e80:	b508      	push	{r3, lr}
 8018e82:	f000 f923 	bl	80190cc <uxr_seq_num_cmp>
 8018e86:	fab0 f080 	clz	r0, r0
 8018e8a:	0940      	lsrs	r0, r0, #5
 8018e8c:	bd08      	pop	{r3, pc}
 8018e8e:	bf00      	nop

08018e90 <get_available_free_slots>:
 8018e90:	8902      	ldrh	r2, [r0, #8]
 8018e92:	b1da      	cbz	r2, 8018ecc <get_available_free_slots+0x3c>
 8018e94:	b530      	push	{r4, r5, lr}
 8018e96:	2100      	movs	r1, #0
 8018e98:	6843      	ldr	r3, [r0, #4]
 8018e9a:	6805      	ldr	r5, [r0, #0]
 8018e9c:	7b04      	ldrb	r4, [r0, #12]
 8018e9e:	fbb3 fef2 	udiv	lr, r3, r2
 8018ea2:	4608      	mov	r0, r1
 8018ea4:	460b      	mov	r3, r1
 8018ea6:	fbb3 fcf2 	udiv	ip, r3, r2
 8018eaa:	fb02 331c 	mls	r3, r2, ip, r3
 8018eae:	b29b      	uxth	r3, r3
 8018eb0:	fb0e f303 	mul.w	r3, lr, r3
 8018eb4:	3101      	adds	r1, #1
 8018eb6:	f855 c003 	ldr.w	ip, [r5, r3]
 8018eba:	4564      	cmp	r4, ip
 8018ebc:	bf08      	it	eq
 8018ebe:	3001      	addeq	r0, #1
 8018ec0:	b28b      	uxth	r3, r1
 8018ec2:	bf08      	it	eq
 8018ec4:	b280      	uxtheq	r0, r0
 8018ec6:	4293      	cmp	r3, r2
 8018ec8:	d3ed      	bcc.n	8018ea6 <get_available_free_slots+0x16>
 8018eca:	bd30      	pop	{r4, r5, pc}
 8018ecc:	4610      	mov	r0, r2
 8018ece:	4770      	bx	lr

08018ed0 <uxr_buffer_cancel_data>:
 8018ed0:	b510      	push	{r4, lr}
 8018ed2:	b094      	sub	sp, #80	; 0x50
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	9202      	str	r2, [sp, #8]
 8018ed8:	9205      	str	r2, [sp, #20]
 8018eda:	9301      	str	r3, [sp, #4]
 8018edc:	2201      	movs	r2, #1
 8018ede:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018ee2:	f88d 301e 	strb.w	r3, [sp, #30]
 8018ee6:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8018eea:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8018eee:	2308      	movs	r3, #8
 8018ef0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8018ef4:	9300      	str	r3, [sp, #0]
 8018ef6:	2210      	movs	r2, #16
 8018ef8:	ab0c      	add	r3, sp, #48	; 0x30
 8018efa:	4604      	mov	r4, r0
 8018efc:	9103      	str	r1, [sp, #12]
 8018efe:	f7fb fa47 	bl	8014390 <uxr_prepare_stream_to_write_submessage>
 8018f02:	b918      	cbnz	r0, 8018f0c <uxr_buffer_cancel_data+0x3c>
 8018f04:	4604      	mov	r4, r0
 8018f06:	4620      	mov	r0, r4
 8018f08:	b014      	add	sp, #80	; 0x50
 8018f0a:	bd10      	pop	{r4, pc}
 8018f0c:	9905      	ldr	r1, [sp, #20]
 8018f0e:	aa06      	add	r2, sp, #24
 8018f10:	4620      	mov	r0, r4
 8018f12:	f7fb fb73 	bl	80145fc <uxr_init_base_object_request>
 8018f16:	a906      	add	r1, sp, #24
 8018f18:	4604      	mov	r4, r0
 8018f1a:	a80c      	add	r0, sp, #48	; 0x30
 8018f1c:	f7fc fd82 	bl	8015a24 <uxr_serialize_READ_DATA_Payload>
 8018f20:	4620      	mov	r0, r4
 8018f22:	b014      	add	sp, #80	; 0x50
 8018f24:	bd10      	pop	{r4, pc}
 8018f26:	bf00      	nop

08018f28 <read_submessage_format>:
 8018f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f2c:	b095      	sub	sp, #84	; 0x54
 8018f2e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8018f32:	b113      	cbz	r3, 8018f3a <read_submessage_format+0x12>
 8018f34:	b015      	add	sp, #84	; 0x54
 8018f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f3a:	460c      	mov	r4, r1
 8018f3c:	4615      	mov	r5, r2
 8018f3e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8018f42:	4607      	mov	r7, r0
 8018f44:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018f46:	9004      	str	r0, [sp, #16]
 8018f48:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018f4a:	9005      	str	r0, [sp, #20]
 8018f4c:	1a52      	subs	r2, r2, r1
 8018f4e:	a80c      	add	r0, sp, #48	; 0x30
 8018f50:	4699      	mov	r9, r3
 8018f52:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8018f56:	f7fa f8ab 	bl	80130b0 <ucdr_init_buffer>
 8018f5a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018f5e:	a80c      	add	r0, sp, #48	; 0x30
 8018f60:	f7fa f87a 	bl	8013058 <ucdr_set_on_full_buffer_callback>
 8018f64:	69e2      	ldr	r2, [r4, #28]
 8018f66:	b19a      	cbz	r2, 8018f90 <read_submessage_format+0x68>
 8018f68:	f1b8 0f07 	cmp.w	r8, #7
 8018f6c:	f882 9014 	strb.w	r9, [r2, #20]
 8018f70:	d040      	beq.n	8018ff4 <read_submessage_format+0xcc>
 8018f72:	f1b8 0f08 	cmp.w	r8, #8
 8018f76:	d02e      	beq.n	8018fd6 <read_submessage_format+0xae>
 8018f78:	f1b8 0f06 	cmp.w	r8, #6
 8018f7c:	d011      	beq.n	8018fa2 <read_submessage_format+0x7a>
 8018f7e:	2301      	movs	r3, #1
 8018f80:	7513      	strb	r3, [r2, #20]
 8018f82:	4629      	mov	r1, r5
 8018f84:	4620      	mov	r0, r4
 8018f86:	f7fa f8e3 	bl	8013150 <ucdr_advance_buffer>
 8018f8a:	b015      	add	sp, #84	; 0x54
 8018f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f90:	f1b8 0f07 	cmp.w	r8, #7
 8018f94:	d02e      	beq.n	8018ff4 <read_submessage_format+0xcc>
 8018f96:	f1b8 0f08 	cmp.w	r8, #8
 8018f9a:	d01c      	beq.n	8018fd6 <read_submessage_format+0xae>
 8018f9c:	f1b8 0f06 	cmp.w	r8, #6
 8018fa0:	d1ef      	bne.n	8018f82 <read_submessage_format+0x5a>
 8018fa2:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 8018fa6:	f1b8 0f00 	cmp.w	r8, #0
 8018faa:	d011      	beq.n	8018fd0 <read_submessage_format+0xa8>
 8018fac:	ab0c      	add	r3, sp, #48	; 0x30
 8018fae:	e9cd 3500 	strd	r3, r5, [sp]
 8018fb2:	2306      	movs	r3, #6
 8018fb4:	f88d 3016 	strb.w	r3, [sp, #22]
 8018fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018fbc:	9302      	str	r3, [sp, #8]
 8018fbe:	4632      	mov	r2, r6
 8018fc0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8018fc4:	4638      	mov	r0, r7
 8018fc6:	47c0      	blx	r8
 8018fc8:	2301      	movs	r3, #1
 8018fca:	69e2      	ldr	r2, [r4, #28]
 8018fcc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8018fd0:	2a00      	cmp	r2, #0
 8018fd2:	d1d4      	bne.n	8018f7e <read_submessage_format+0x56>
 8018fd4:	e7d5      	b.n	8018f82 <read_submessage_format+0x5a>
 8018fd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d0f8      	beq.n	8018fd0 <read_submessage_format+0xa8>
 8018fde:	a906      	add	r1, sp, #24
 8018fe0:	a80c      	add	r0, sp, #48	; 0x30
 8018fe2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018fe6:	f7fc fdbd 	bl	8015b64 <uxr_deserialize_SampleIdentity>
 8018fea:	b9a0      	cbnz	r0, 8019016 <read_submessage_format+0xee>
 8018fec:	69e2      	ldr	r2, [r4, #28]
 8018fee:	2a00      	cmp	r2, #0
 8018ff0:	d1c5      	bne.n	8018f7e <read_submessage_format+0x56>
 8018ff2:	e7c6      	b.n	8018f82 <read_submessage_format+0x5a>
 8018ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018ff8:	b13b      	cbz	r3, 801900a <read_submessage_format+0xe2>
 8018ffa:	a906      	add	r1, sp, #24
 8018ffc:	a80c      	add	r0, sp, #48	; 0x30
 8018ffe:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8019002:	f7fc faa9 	bl	8015558 <uxr_deserialize_BaseObjectRequest>
 8019006:	bb60      	cbnz	r0, 8019062 <read_submessage_format+0x13a>
 8019008:	69e2      	ldr	r2, [r4, #28]
 801900a:	68a3      	ldr	r3, [r4, #8]
 801900c:	442b      	add	r3, r5
 801900e:	60a3      	str	r3, [r4, #8]
 8019010:	2a00      	cmp	r2, #0
 8019012:	d1b4      	bne.n	8018f7e <read_submessage_format+0x56>
 8019014:	e7b5      	b.n	8018f82 <read_submessage_format+0x5a>
 8019016:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801901a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801901c:	1a52      	subs	r2, r2, r1
 801901e:	eba8 0803 	sub.w	r8, r8, r3
 8019022:	a80c      	add	r0, sp, #48	; 0x30
 8019024:	f7fa f844 	bl	80130b0 <ucdr_init_buffer>
 8019028:	44a8      	add	r8, r5
 801902a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801902e:	a80c      	add	r0, sp, #48	; 0x30
 8019030:	f7fa f812 	bl	8013058 <ucdr_set_on_full_buffer_callback>
 8019034:	fa1f f888 	uxth.w	r8, r8
 8019038:	ab0c      	add	r3, sp, #48	; 0x30
 801903a:	9300      	str	r3, [sp, #0]
 801903c:	f8cd 8004 	str.w	r8, [sp, #4]
 8019040:	2108      	movs	r1, #8
 8019042:	f88d 1016 	strb.w	r1, [sp, #22]
 8019046:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801904a:	9102      	str	r1, [sp, #8]
 801904c:	ab06      	add	r3, sp, #24
 801904e:	4632      	mov	r2, r6
 8019050:	9905      	ldr	r1, [sp, #20]
 8019052:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 8019056:	4638      	mov	r0, r7
 8019058:	47b0      	blx	r6
 801905a:	2301      	movs	r3, #1
 801905c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8019060:	e7c4      	b.n	8018fec <read_submessage_format+0xc4>
 8019062:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8019066:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019068:	1a52      	subs	r2, r2, r1
 801906a:	a80c      	add	r0, sp, #48	; 0x30
 801906c:	eba8 0803 	sub.w	r8, r8, r3
 8019070:	f7fa f81e 	bl	80130b0 <ucdr_init_buffer>
 8019074:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8019078:	a80c      	add	r0, sp, #48	; 0x30
 801907a:	f7f9 ffed 	bl	8013058 <ucdr_set_on_full_buffer_callback>
 801907e:	ab0c      	add	r3, sp, #48	; 0x30
 8019080:	9300      	str	r3, [sp, #0]
 8019082:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8019086:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801908a:	44a8      	add	r8, r5
 801908c:	fa1f f888 	uxth.w	r8, r8
 8019090:	f8cd 8004 	str.w	r8, [sp, #4]
 8019094:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019098:	2107      	movs	r1, #7
 801909a:	f88d 1016 	strb.w	r1, [sp, #22]
 801909e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80190a2:	9102      	str	r1, [sp, #8]
 80190a4:	4632      	mov	r2, r6
 80190a6:	b29b      	uxth	r3, r3
 80190a8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 80190ac:	9905      	ldr	r1, [sp, #20]
 80190ae:	4638      	mov	r0, r7
 80190b0:	47b0      	blx	r6
 80190b2:	2301      	movs	r3, #1
 80190b4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80190b8:	e7a6      	b.n	8019008 <read_submessage_format+0xe0>
 80190ba:	bf00      	nop

080190bc <uxr_seq_num_add>:
 80190bc:	4408      	add	r0, r1
 80190be:	b280      	uxth	r0, r0
 80190c0:	4770      	bx	lr
 80190c2:	bf00      	nop

080190c4 <uxr_seq_num_sub>:
 80190c4:	1a40      	subs	r0, r0, r1
 80190c6:	b280      	uxth	r0, r0
 80190c8:	4770      	bx	lr
 80190ca:	bf00      	nop

080190cc <uxr_seq_num_cmp>:
 80190cc:	4288      	cmp	r0, r1
 80190ce:	d011      	beq.n	80190f4 <uxr_seq_num_cmp+0x28>
 80190d0:	d309      	bcc.n	80190e6 <uxr_seq_num_cmp+0x1a>
 80190d2:	4288      	cmp	r0, r1
 80190d4:	d910      	bls.n	80190f8 <uxr_seq_num_cmp+0x2c>
 80190d6:	1a40      	subs	r0, r0, r1
 80190d8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80190dc:	bfd4      	ite	le
 80190de:	2001      	movle	r0, #1
 80190e0:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80190e4:	4770      	bx	lr
 80190e6:	1a0b      	subs	r3, r1, r0
 80190e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80190ec:	daf1      	bge.n	80190d2 <uxr_seq_num_cmp+0x6>
 80190ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190f2:	4770      	bx	lr
 80190f4:	2000      	movs	r0, #0
 80190f6:	4770      	bx	lr
 80190f8:	2001      	movs	r0, #1
 80190fa:	4770      	bx	lr

080190fc <uxr_init_framing_io>:
 80190fc:	2300      	movs	r3, #0
 80190fe:	7041      	strb	r1, [r0, #1]
 8019100:	7003      	strb	r3, [r0, #0]
 8019102:	8583      	strh	r3, [r0, #44]	; 0x2c
 8019104:	4770      	bx	lr
 8019106:	bf00      	nop

08019108 <uxr_write_framed_msg>:
 8019108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801910c:	4617      	mov	r7, r2
 801910e:	7842      	ldrb	r2, [r0, #1]
 8019110:	b083      	sub	sp, #12
 8019112:	460e      	mov	r6, r1
 8019114:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8019118:	469a      	mov	sl, r3
 801911a:	2901      	cmp	r1, #1
 801911c:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8019120:	4604      	mov	r4, r0
 8019122:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019126:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801912a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801912e:	f240 8137 	bls.w	80193a0 <uxr_write_framed_msg+0x298>
 8019132:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019136:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 801913a:	2901      	cmp	r1, #1
 801913c:	f04f 0202 	mov.w	r2, #2
 8019140:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019144:	f240 808f 	bls.w	8019266 <uxr_write_framed_msg+0x15e>
 8019148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801914a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801914e:	b2dd      	uxtb	r5, r3
 8019150:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8019154:	2203      	movs	r2, #3
 8019156:	2901      	cmp	r1, #1
 8019158:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801915c:	f240 809a 	bls.w	8019294 <uxr_write_framed_msg+0x18c>
 8019160:	18a1      	adds	r1, r4, r2
 8019162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019164:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8019168:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801916c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8019170:	3201      	adds	r2, #1
 8019172:	2801      	cmp	r0, #1
 8019174:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019178:	f240 80a0 	bls.w	80192bc <uxr_write_framed_msg+0x1b4>
 801917c:	18a0      	adds	r0, r4, r2
 801917e:	3201      	adds	r2, #1
 8019180:	b2d2      	uxtb	r2, r2
 8019182:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019186:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801918a:	2b00      	cmp	r3, #0
 801918c:	f000 80a9 	beq.w	80192e2 <uxr_write_framed_msg+0x1da>
 8019190:	f04f 0900 	mov.w	r9, #0
 8019194:	46c8      	mov	r8, r9
 8019196:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801919a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801919e:	2901      	cmp	r1, #1
 80191a0:	f240 80c3 	bls.w	801932a <uxr_write_framed_msg+0x222>
 80191a4:	2a29      	cmp	r2, #41	; 0x29
 80191a6:	f200 809f 	bhi.w	80192e8 <uxr_write_framed_msg+0x1e0>
 80191aa:	18a1      	adds	r1, r4, r2
 80191ac:	3201      	adds	r2, #1
 80191ae:	b2d2      	uxtb	r2, r2
 80191b0:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80191b4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80191b8:	ea89 0303 	eor.w	r3, r9, r3
 80191bc:	498c      	ldr	r1, [pc, #560]	; (80193f0 <uxr_write_framed_msg+0x2e8>)
 80191be:	b2db      	uxtb	r3, r3
 80191c0:	f108 0801 	add.w	r8, r8, #1
 80191c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80191c8:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80191cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191ce:	4543      	cmp	r3, r8
 80191d0:	d8e1      	bhi.n	8019196 <uxr_write_framed_msg+0x8e>
 80191d2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80191d6:	fa5f f889 	uxtb.w	r8, r9
 80191da:	9301      	str	r3, [sp, #4]
 80191dc:	f04f 0900 	mov.w	r9, #0
 80191e0:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 80191e4:	fa5f f18a 	uxtb.w	r1, sl
 80191e8:	2901      	cmp	r1, #1
 80191ea:	d921      	bls.n	8019230 <uxr_write_framed_msg+0x128>
 80191ec:	2a29      	cmp	r2, #41	; 0x29
 80191ee:	f240 80af 	bls.w	8019350 <uxr_write_framed_msg+0x248>
 80191f2:	2500      	movs	r5, #0
 80191f4:	e000      	b.n	80191f8 <uxr_write_framed_msg+0xf0>
 80191f6:	b160      	cbz	r0, 8019212 <uxr_write_framed_msg+0x10a>
 80191f8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80191fc:	1b52      	subs	r2, r2, r5
 80191fe:	465b      	mov	r3, fp
 8019200:	4421      	add	r1, r4
 8019202:	4638      	mov	r0, r7
 8019204:	47b0      	blx	r6
 8019206:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801920a:	4405      	add	r5, r0
 801920c:	4295      	cmp	r5, r2
 801920e:	d3f2      	bcc.n	80191f6 <uxr_write_framed_msg+0xee>
 8019210:	d003      	beq.n	801921a <uxr_write_framed_msg+0x112>
 8019212:	2000      	movs	r0, #0
 8019214:	b003      	add	sp, #12
 8019216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801921a:	fa5f f18a 	uxtb.w	r1, sl
 801921e:	f04f 0300 	mov.w	r3, #0
 8019222:	2901      	cmp	r1, #1
 8019224:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019228:	f04f 0200 	mov.w	r2, #0
 801922c:	f200 8090 	bhi.w	8019350 <uxr_write_framed_msg+0x248>
 8019230:	1c51      	adds	r1, r2, #1
 8019232:	b2c9      	uxtb	r1, r1
 8019234:	2929      	cmp	r1, #41	; 0x29
 8019236:	d8dc      	bhi.n	80191f2 <uxr_write_framed_msg+0xea>
 8019238:	18a5      	adds	r5, r4, r2
 801923a:	4421      	add	r1, r4
 801923c:	3202      	adds	r2, #2
 801923e:	f088 0820 	eor.w	r8, r8, #32
 8019242:	4648      	mov	r0, r9
 8019244:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8019248:	b2d2      	uxtb	r2, r2
 801924a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 801924e:	f04f 0901 	mov.w	r9, #1
 8019252:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8019256:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801925a:	2800      	cmp	r0, #0
 801925c:	f040 8085 	bne.w	801936a <uxr_write_framed_msg+0x262>
 8019260:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019264:	e7bc      	b.n	80191e0 <uxr_write_framed_msg+0xd8>
 8019266:	4611      	mov	r1, r2
 8019268:	f04f 0c03 	mov.w	ip, #3
 801926c:	2204      	movs	r2, #4
 801926e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019270:	4421      	add	r1, r4
 8019272:	b2dd      	uxtb	r5, r3
 8019274:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8019278:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 801927c:	44a4      	add	ip, r4
 801927e:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8019282:	f080 0020 	eor.w	r0, r0, #32
 8019286:	2901      	cmp	r1, #1
 8019288:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801928c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019290:	f63f af66 	bhi.w	8019160 <uxr_write_framed_msg+0x58>
 8019294:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019296:	18a0      	adds	r0, r4, r2
 8019298:	f085 0520 	eor.w	r5, r5, #32
 801929c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80192a0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80192a4:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 80192a8:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 80192ac:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80192b0:	3202      	adds	r2, #2
 80192b2:	2801      	cmp	r0, #1
 80192b4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80192b8:	f63f af60 	bhi.w	801917c <uxr_write_framed_msg+0x74>
 80192bc:	1c50      	adds	r0, r2, #1
 80192be:	18a5      	adds	r5, r4, r2
 80192c0:	fa54 f080 	uxtab	r0, r4, r0
 80192c4:	3202      	adds	r2, #2
 80192c6:	f081 0120 	eor.w	r1, r1, #32
 80192ca:	b2d2      	uxtb	r2, r2
 80192cc:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80192d0:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 80192d4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80192d8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80192dc:	2b00      	cmp	r3, #0
 80192de:	f47f af57 	bne.w	8019190 <uxr_write_framed_msg+0x88>
 80192e2:	9301      	str	r3, [sp, #4]
 80192e4:	4698      	mov	r8, r3
 80192e6:	e779      	b.n	80191dc <uxr_write_framed_msg+0xd4>
 80192e8:	2500      	movs	r5, #0
 80192ea:	e001      	b.n	80192f0 <uxr_write_framed_msg+0x1e8>
 80192ec:	2800      	cmp	r0, #0
 80192ee:	d090      	beq.n	8019212 <uxr_write_framed_msg+0x10a>
 80192f0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80192f4:	1b52      	subs	r2, r2, r5
 80192f6:	465b      	mov	r3, fp
 80192f8:	4421      	add	r1, r4
 80192fa:	4638      	mov	r0, r7
 80192fc:	47b0      	blx	r6
 80192fe:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019302:	4405      	add	r5, r0
 8019304:	4295      	cmp	r5, r2
 8019306:	d3f1      	bcc.n	80192ec <uxr_write_framed_msg+0x1e4>
 8019308:	d183      	bne.n	8019212 <uxr_write_framed_msg+0x10a>
 801930a:	f04f 0300 	mov.w	r3, #0
 801930e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019314:	4543      	cmp	r3, r8
 8019316:	d964      	bls.n	80193e2 <uxr_write_framed_msg+0x2da>
 8019318:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801931c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8019320:	2901      	cmp	r1, #1
 8019322:	f04f 0200 	mov.w	r2, #0
 8019326:	f63f af3d 	bhi.w	80191a4 <uxr_write_framed_msg+0x9c>
 801932a:	1c51      	adds	r1, r2, #1
 801932c:	b2c9      	uxtb	r1, r1
 801932e:	2929      	cmp	r1, #41	; 0x29
 8019330:	d8da      	bhi.n	80192e8 <uxr_write_framed_msg+0x1e0>
 8019332:	18a0      	adds	r0, r4, r2
 8019334:	4421      	add	r1, r4
 8019336:	f04f 057d 	mov.w	r5, #125	; 0x7d
 801933a:	3202      	adds	r2, #2
 801933c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8019340:	b2d2      	uxtb	r2, r2
 8019342:	f083 0020 	eor.w	r0, r3, #32
 8019346:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801934a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801934e:	e733      	b.n	80191b8 <uxr_write_framed_msg+0xb0>
 8019350:	18a1      	adds	r1, r4, r2
 8019352:	3201      	adds	r2, #1
 8019354:	4648      	mov	r0, r9
 8019356:	b2d2      	uxtb	r2, r2
 8019358:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 801935c:	f04f 0901 	mov.w	r9, #1
 8019360:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019364:	2800      	cmp	r0, #0
 8019366:	f43f af7b 	beq.w	8019260 <uxr_write_framed_msg+0x158>
 801936a:	2500      	movs	r5, #0
 801936c:	e002      	b.n	8019374 <uxr_write_framed_msg+0x26c>
 801936e:	2800      	cmp	r0, #0
 8019370:	f43f af4f 	beq.w	8019212 <uxr_write_framed_msg+0x10a>
 8019374:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019378:	1b52      	subs	r2, r2, r5
 801937a:	465b      	mov	r3, fp
 801937c:	4421      	add	r1, r4
 801937e:	4638      	mov	r0, r7
 8019380:	47b0      	blx	r6
 8019382:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019386:	4405      	add	r5, r0
 8019388:	4295      	cmp	r5, r2
 801938a:	d3f0      	bcc.n	801936e <uxr_write_framed_msg+0x266>
 801938c:	f47f af41 	bne.w	8019212 <uxr_write_framed_msg+0x10a>
 8019390:	2300      	movs	r3, #0
 8019392:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019398:	b298      	uxth	r0, r3
 801939a:	b003      	add	sp, #12
 801939c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193a0:	217d      	movs	r1, #125	; 0x7d
 80193a2:	f082 0220 	eor.w	r2, r2, #32
 80193a6:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 80193aa:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80193ae:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 80193b2:	2901      	cmp	r1, #1
 80193b4:	f04f 0203 	mov.w	r2, #3
 80193b8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80193bc:	d804      	bhi.n	80193c8 <uxr_write_framed_msg+0x2c0>
 80193be:	4611      	mov	r1, r2
 80193c0:	f04f 0c04 	mov.w	ip, #4
 80193c4:	2205      	movs	r2, #5
 80193c6:	e752      	b.n	801926e <uxr_write_framed_msg+0x166>
 80193c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193ca:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80193ce:	b2dd      	uxtb	r5, r3
 80193d0:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 80193d4:	2204      	movs	r2, #4
 80193d6:	2901      	cmp	r1, #1
 80193d8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80193dc:	f63f aec0 	bhi.w	8019160 <uxr_write_framed_msg+0x58>
 80193e0:	e758      	b.n	8019294 <uxr_write_framed_msg+0x18c>
 80193e2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80193e6:	fa5f f889 	uxtb.w	r8, r9
 80193ea:	9301      	str	r3, [sp, #4]
 80193ec:	2200      	movs	r2, #0
 80193ee:	e6f5      	b.n	80191dc <uxr_write_framed_msg+0xd4>
 80193f0:	0801caf0 	.word	0x0801caf0

080193f4 <uxr_framing_read_transport>:
 80193f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193f8:	4604      	mov	r4, r0
 80193fa:	b083      	sub	sp, #12
 80193fc:	461f      	mov	r7, r3
 80193fe:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8019402:	4689      	mov	r9, r1
 8019404:	4692      	mov	sl, r2
 8019406:	f7fb faa7 	bl	8014958 <uxr_millis>
 801940a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801940e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8019412:	42b3      	cmp	r3, r6
 8019414:	4680      	mov	r8, r0
 8019416:	d061      	beq.n	80194dc <uxr_framing_read_transport+0xe8>
 8019418:	d81c      	bhi.n	8019454 <uxr_framing_read_transport+0x60>
 801941a:	1e75      	subs	r5, r6, #1
 801941c:	1aed      	subs	r5, r5, r3
 801941e:	b2ed      	uxtb	r5, r5
 8019420:	2600      	movs	r6, #0
 8019422:	455d      	cmp	r5, fp
 8019424:	d81f      	bhi.n	8019466 <uxr_framing_read_transport+0x72>
 8019426:	19ab      	adds	r3, r5, r6
 8019428:	455b      	cmp	r3, fp
 801942a:	bf84      	itt	hi
 801942c:	ebab 0605 	subhi.w	r6, fp, r5
 8019430:	b2f6      	uxtbhi	r6, r6
 8019432:	b9ed      	cbnz	r5, 8019470 <uxr_framing_read_transport+0x7c>
 8019434:	f04f 0b00 	mov.w	fp, #0
 8019438:	f7fb fa8e 	bl	8014958 <uxr_millis>
 801943c:	683b      	ldr	r3, [r7, #0]
 801943e:	eba0 0808 	sub.w	r8, r0, r8
 8019442:	eba3 0308 	sub.w	r3, r3, r8
 8019446:	4658      	mov	r0, fp
 8019448:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801944c:	603b      	str	r3, [r7, #0]
 801944e:	b003      	add	sp, #12
 8019450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019454:	2e00      	cmp	r6, #0
 8019456:	d049      	beq.n	80194ec <uxr_framing_read_transport+0xf8>
 8019458:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 801945c:	b2ed      	uxtb	r5, r5
 801945e:	3e01      	subs	r6, #1
 8019460:	455d      	cmp	r5, fp
 8019462:	b2f6      	uxtb	r6, r6
 8019464:	d9df      	bls.n	8019426 <uxr_framing_read_transport+0x32>
 8019466:	fa5f f58b 	uxtb.w	r5, fp
 801946a:	2600      	movs	r6, #0
 801946c:	2d00      	cmp	r5, #0
 801946e:	d0e1      	beq.n	8019434 <uxr_framing_read_transport+0x40>
 8019470:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019474:	3102      	adds	r1, #2
 8019476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019478:	9300      	str	r3, [sp, #0]
 801947a:	683b      	ldr	r3, [r7, #0]
 801947c:	4421      	add	r1, r4
 801947e:	462a      	mov	r2, r5
 8019480:	4650      	mov	r0, sl
 8019482:	47c8      	blx	r9
 8019484:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019488:	4a1a      	ldr	r2, [pc, #104]	; (80194f4 <uxr_framing_read_transport+0x100>)
 801948a:	4403      	add	r3, r0
 801948c:	0859      	lsrs	r1, r3, #1
 801948e:	fba2 2101 	umull	r2, r1, r2, r1
 8019492:	0889      	lsrs	r1, r1, #2
 8019494:	222a      	movs	r2, #42	; 0x2a
 8019496:	fb02 3111 	mls	r1, r2, r1, r3
 801949a:	4683      	mov	fp, r0
 801949c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80194a0:	2800      	cmp	r0, #0
 80194a2:	d0c7      	beq.n	8019434 <uxr_framing_read_transport+0x40>
 80194a4:	42a8      	cmp	r0, r5
 80194a6:	d1c7      	bne.n	8019438 <uxr_framing_read_transport+0x44>
 80194a8:	2e00      	cmp	r6, #0
 80194aa:	d0c5      	beq.n	8019438 <uxr_framing_read_transport+0x44>
 80194ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194ae:	9300      	str	r3, [sp, #0]
 80194b0:	3102      	adds	r1, #2
 80194b2:	4632      	mov	r2, r6
 80194b4:	4421      	add	r1, r4
 80194b6:	2300      	movs	r3, #0
 80194b8:	4650      	mov	r0, sl
 80194ba:	47c8      	blx	r9
 80194bc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80194c0:	4a0c      	ldr	r2, [pc, #48]	; (80194f4 <uxr_framing_read_transport+0x100>)
 80194c2:	180b      	adds	r3, r1, r0
 80194c4:	0859      	lsrs	r1, r3, #1
 80194c6:	fba2 1201 	umull	r1, r2, r2, r1
 80194ca:	0892      	lsrs	r2, r2, #2
 80194cc:	212a      	movs	r1, #42	; 0x2a
 80194ce:	fb01 3312 	mls	r3, r1, r2, r3
 80194d2:	eb00 0b05 	add.w	fp, r0, r5
 80194d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80194da:	e7ad      	b.n	8019438 <uxr_framing_read_transport+0x44>
 80194dc:	2600      	movs	r6, #0
 80194de:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80194e2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80194e4:	d9bf      	bls.n	8019466 <uxr_framing_read_transport+0x72>
 80194e6:	2102      	movs	r1, #2
 80194e8:	2529      	movs	r5, #41	; 0x29
 80194ea:	e7c4      	b.n	8019476 <uxr_framing_read_transport+0x82>
 80194ec:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80194f0:	b2ed      	uxtb	r5, r5
 80194f2:	e796      	b.n	8019422 <uxr_framing_read_transport+0x2e>
 80194f4:	30c30c31 	.word	0x30c30c31

080194f8 <uxr_read_framed_msg>:
 80194f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194fc:	461e      	mov	r6, r3
 80194fe:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019502:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8019506:	429d      	cmp	r5, r3
 8019508:	b083      	sub	sp, #12
 801950a:	4604      	mov	r4, r0
 801950c:	4688      	mov	r8, r1
 801950e:	4691      	mov	r9, r2
 8019510:	f000 8188 	beq.w	8019824 <uxr_read_framed_msg+0x32c>
 8019514:	7823      	ldrb	r3, [r4, #0]
 8019516:	4dc1      	ldr	r5, [pc, #772]	; (801981c <uxr_read_framed_msg+0x324>)
 8019518:	4fc1      	ldr	r7, [pc, #772]	; (8019820 <uxr_read_framed_msg+0x328>)
 801951a:	2b07      	cmp	r3, #7
 801951c:	d8fd      	bhi.n	801951a <uxr_read_framed_msg+0x22>
 801951e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019522:	0115      	.short	0x0115
 8019524:	00d600f6 	.word	0x00d600f6
 8019528:	009000b9 	.word	0x009000b9
 801952c:	0030004d 	.word	0x0030004d
 8019530:	0008      	.short	0x0008
 8019532:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019536:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801953a:	4299      	cmp	r1, r3
 801953c:	f000 814a 	beq.w	80197d4 <uxr_read_framed_msg+0x2dc>
 8019540:	18e2      	adds	r2, r4, r3
 8019542:	7892      	ldrb	r2, [r2, #2]
 8019544:	2a7d      	cmp	r2, #125	; 0x7d
 8019546:	f000 8199 	beq.w	801987c <uxr_read_framed_msg+0x384>
 801954a:	3301      	adds	r3, #1
 801954c:	0858      	lsrs	r0, r3, #1
 801954e:	fba5 1000 	umull	r1, r0, r5, r0
 8019552:	0880      	lsrs	r0, r0, #2
 8019554:	212a      	movs	r1, #42	; 0x2a
 8019556:	fb01 3310 	mls	r3, r1, r0, r3
 801955a:	2a7e      	cmp	r2, #126	; 0x7e
 801955c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019560:	f000 8252 	beq.w	8019a08 <uxr_read_framed_msg+0x510>
 8019564:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019566:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8019568:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801956c:	b29b      	uxth	r3, r3
 801956e:	2200      	movs	r2, #0
 8019570:	4299      	cmp	r1, r3
 8019572:	86a3      	strh	r3, [r4, #52]	; 0x34
 8019574:	7022      	strb	r2, [r4, #0]
 8019576:	f000 8179 	beq.w	801986c <uxr_read_framed_msg+0x374>
 801957a:	2000      	movs	r0, #0
 801957c:	b003      	add	sp, #12
 801957e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019582:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019586:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801958a:	4299      	cmp	r1, r3
 801958c:	f000 8131 	beq.w	80197f2 <uxr_read_framed_msg+0x2fa>
 8019590:	18e2      	adds	r2, r4, r3
 8019592:	7890      	ldrb	r0, [r2, #2]
 8019594:	287d      	cmp	r0, #125	; 0x7d
 8019596:	f000 8190 	beq.w	80198ba <uxr_read_framed_msg+0x3c2>
 801959a:	3301      	adds	r3, #1
 801959c:	085a      	lsrs	r2, r3, #1
 801959e:	fba5 1202 	umull	r1, r2, r5, r2
 80195a2:	0892      	lsrs	r2, r2, #2
 80195a4:	212a      	movs	r1, #42	; 0x2a
 80195a6:	fb01 3312 	mls	r3, r1, r2, r3
 80195aa:	287e      	cmp	r0, #126	; 0x7e
 80195ac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80195b0:	f000 821a 	beq.w	80199e8 <uxr_read_framed_msg+0x4f0>
 80195b4:	2307      	movs	r3, #7
 80195b6:	86a0      	strh	r0, [r4, #52]	; 0x34
 80195b8:	7023      	strb	r3, [r4, #0]
 80195ba:	e7ae      	b.n	801951a <uxr_read_framed_msg+0x22>
 80195bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80195be:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80195c2:	459e      	cmp	lr, r3
 80195c4:	d938      	bls.n	8019638 <uxr_read_framed_msg+0x140>
 80195c6:	ee07 8a90 	vmov	s15, r8
 80195ca:	212a      	movs	r1, #42	; 0x2a
 80195cc:	e020      	b.n	8019610 <uxr_read_framed_msg+0x118>
 80195ce:	f89b c002 	ldrb.w	ip, [fp, #2]
 80195d2:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80195d6:	f000 80d4 	beq.w	8019782 <uxr_read_framed_msg+0x28a>
 80195da:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80195de:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80195e2:	f000 8219 	beq.w	8019a18 <uxr_read_framed_msg+0x520>
 80195e6:	f806 c003 	strb.w	ip, [r6, r3]
 80195ea:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 80195ee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80195f0:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80195f4:	ea8a 000c 	eor.w	r0, sl, ip
 80195f8:	b2c0      	uxtb	r0, r0
 80195fa:	3301      	adds	r3, #1
 80195fc:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8019600:	b29b      	uxth	r3, r3
 8019602:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8019606:	4573      	cmp	r3, lr
 8019608:	8663      	strh	r3, [r4, #50]	; 0x32
 801960a:	86e2      	strh	r2, [r4, #54]	; 0x36
 801960c:	f080 8120 	bcs.w	8019850 <uxr_read_framed_msg+0x358>
 8019610:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8019614:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8019618:	f100 0c01 	add.w	ip, r0, #1
 801961c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019620:	fba5 8202 	umull	r8, r2, r5, r2
 8019624:	0892      	lsrs	r2, r2, #2
 8019626:	4582      	cmp	sl, r0
 8019628:	eb04 0b00 	add.w	fp, r4, r0
 801962c:	fb01 c212 	mls	r2, r1, r2, ip
 8019630:	d1cd      	bne.n	80195ce <uxr_read_framed_msg+0xd6>
 8019632:	ee17 8a90 	vmov	r8, s15
 8019636:	459e      	cmp	lr, r3
 8019638:	f040 8111 	bne.w	801985e <uxr_read_framed_msg+0x366>
 801963c:	2306      	movs	r3, #6
 801963e:	7023      	strb	r3, [r4, #0]
 8019640:	e76b      	b.n	801951a <uxr_read_framed_msg+0x22>
 8019642:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019646:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801964a:	4298      	cmp	r0, r3
 801964c:	f000 80c2 	beq.w	80197d4 <uxr_read_framed_msg+0x2dc>
 8019650:	18e2      	adds	r2, r4, r3
 8019652:	7891      	ldrb	r1, [r2, #2]
 8019654:	297d      	cmp	r1, #125	; 0x7d
 8019656:	f000 814c 	beq.w	80198f2 <uxr_read_framed_msg+0x3fa>
 801965a:	3301      	adds	r3, #1
 801965c:	085a      	lsrs	r2, r3, #1
 801965e:	fba5 0202 	umull	r0, r2, r5, r2
 8019662:	0892      	lsrs	r2, r2, #2
 8019664:	202a      	movs	r0, #42	; 0x2a
 8019666:	fb00 3312 	mls	r3, r0, r2, r3
 801966a:	297e      	cmp	r1, #126	; 0x7e
 801966c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019670:	f000 81ca 	beq.w	8019a08 <uxr_read_framed_msg+0x510>
 8019674:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019676:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801967a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801967c:	b29b      	uxth	r3, r3
 801967e:	2000      	movs	r0, #0
 8019680:	428b      	cmp	r3, r1
 8019682:	8623      	strh	r3, [r4, #48]	; 0x30
 8019684:	8660      	strh	r0, [r4, #50]	; 0x32
 8019686:	86e0      	strh	r0, [r4, #54]	; 0x36
 8019688:	f240 80df 	bls.w	801984a <uxr_read_framed_msg+0x352>
 801968c:	7020      	strb	r0, [r4, #0]
 801968e:	b003      	add	sp, #12
 8019690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019694:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019698:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801969c:	4299      	cmp	r1, r3
 801969e:	f000 80a8 	beq.w	80197f2 <uxr_read_framed_msg+0x2fa>
 80196a2:	18e2      	adds	r2, r4, r3
 80196a4:	7890      	ldrb	r0, [r2, #2]
 80196a6:	287d      	cmp	r0, #125	; 0x7d
 80196a8:	f000 8164 	beq.w	8019974 <uxr_read_framed_msg+0x47c>
 80196ac:	3301      	adds	r3, #1
 80196ae:	085a      	lsrs	r2, r3, #1
 80196b0:	fba5 1202 	umull	r1, r2, r5, r2
 80196b4:	0892      	lsrs	r2, r2, #2
 80196b6:	212a      	movs	r1, #42	; 0x2a
 80196b8:	fb01 3312 	mls	r3, r1, r2, r3
 80196bc:	287e      	cmp	r0, #126	; 0x7e
 80196be:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80196c2:	f000 8191 	beq.w	80199e8 <uxr_read_framed_msg+0x4f0>
 80196c6:	2304      	movs	r3, #4
 80196c8:	8620      	strh	r0, [r4, #48]	; 0x30
 80196ca:	7023      	strb	r3, [r4, #0]
 80196cc:	e725      	b.n	801951a <uxr_read_framed_msg+0x22>
 80196ce:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80196d2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80196d6:	4290      	cmp	r0, r2
 80196d8:	f000 80b3 	beq.w	8019842 <uxr_read_framed_msg+0x34a>
 80196dc:	18a3      	adds	r3, r4, r2
 80196de:	7899      	ldrb	r1, [r3, #2]
 80196e0:	297d      	cmp	r1, #125	; 0x7d
 80196e2:	f000 8164 	beq.w	80199ae <uxr_read_framed_msg+0x4b6>
 80196e6:	3201      	adds	r2, #1
 80196e8:	0850      	lsrs	r0, r2, #1
 80196ea:	fba5 3000 	umull	r3, r0, r5, r0
 80196ee:	0880      	lsrs	r0, r0, #2
 80196f0:	232a      	movs	r3, #42	; 0x2a
 80196f2:	fb03 2210 	mls	r2, r3, r0, r2
 80196f6:	297e      	cmp	r1, #126	; 0x7e
 80196f8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80196fc:	f000 8188 	beq.w	8019a10 <uxr_read_framed_msg+0x518>
 8019700:	7863      	ldrb	r3, [r4, #1]
 8019702:	428b      	cmp	r3, r1
 8019704:	bf0c      	ite	eq
 8019706:	2303      	moveq	r3, #3
 8019708:	2300      	movne	r3, #0
 801970a:	7023      	strb	r3, [r4, #0]
 801970c:	e705      	b.n	801951a <uxr_read_framed_msg+0x22>
 801970e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019712:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019716:	2200      	movs	r2, #0
 8019718:	4299      	cmp	r1, r3
 801971a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801971e:	d06c      	beq.n	80197fa <uxr_read_framed_msg+0x302>
 8019720:	18e2      	adds	r2, r4, r3
 8019722:	7890      	ldrb	r0, [r2, #2]
 8019724:	287d      	cmp	r0, #125	; 0x7d
 8019726:	f000 8101 	beq.w	801992c <uxr_read_framed_msg+0x434>
 801972a:	3301      	adds	r3, #1
 801972c:	085a      	lsrs	r2, r3, #1
 801972e:	fba5 1202 	umull	r1, r2, r5, r2
 8019732:	0892      	lsrs	r2, r2, #2
 8019734:	212a      	movs	r1, #42	; 0x2a
 8019736:	fb01 3312 	mls	r3, r1, r2, r3
 801973a:	287e      	cmp	r0, #126	; 0x7e
 801973c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8019740:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019744:	d059      	beq.n	80197fa <uxr_read_framed_msg+0x302>
 8019746:	2302      	movs	r3, #2
 8019748:	7023      	strb	r3, [r4, #0]
 801974a:	e6e6      	b.n	801951a <uxr_read_framed_msg+0x22>
 801974c:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8019750:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019754:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8019758:	1c51      	adds	r1, r2, #1
 801975a:	084b      	lsrs	r3, r1, #1
 801975c:	fba5 c303 	umull	ip, r3, r5, r3
 8019760:	089b      	lsrs	r3, r3, #2
 8019762:	fb0e 1313 	mls	r3, lr, r3, r1
 8019766:	4592      	cmp	sl, r2
 8019768:	eb04 0002 	add.w	r0, r4, r2
 801976c:	b2da      	uxtb	r2, r3
 801976e:	f43f af04 	beq.w	801957a <uxr_read_framed_msg+0x82>
 8019772:	7883      	ldrb	r3, [r0, #2]
 8019774:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019778:	2b7e      	cmp	r3, #126	; 0x7e
 801977a:	d1ed      	bne.n	8019758 <uxr_read_framed_msg+0x260>
 801977c:	2301      	movs	r3, #1
 801977e:	7023      	strb	r3, [r4, #0]
 8019780:	e6cb      	b.n	801951a <uxr_read_framed_msg+0x22>
 8019782:	f100 0c01 	add.w	ip, r0, #1
 8019786:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801978a:	fba5 8202 	umull	r8, r2, r5, r2
 801978e:	0892      	lsrs	r2, r2, #2
 8019790:	fb01 c212 	mls	r2, r1, r2, ip
 8019794:	eb04 0c02 	add.w	ip, r4, r2
 8019798:	b2d2      	uxtb	r2, r2
 801979a:	4592      	cmp	sl, r2
 801979c:	f100 0002 	add.w	r0, r0, #2
 80197a0:	f43f af47 	beq.w	8019632 <uxr_read_framed_msg+0x13a>
 80197a4:	0842      	lsrs	r2, r0, #1
 80197a6:	f89c a002 	ldrb.w	sl, [ip, #2]
 80197aa:	fba5 8202 	umull	r8, r2, r5, r2
 80197ae:	0892      	lsrs	r2, r2, #2
 80197b0:	fb01 0012 	mls	r0, r1, r2, r0
 80197b4:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 80197b8:	f08a 0c20 	eor.w	ip, sl, #32
 80197bc:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 80197c0:	f47f af11 	bne.w	80195e6 <uxr_read_framed_msg+0xee>
 80197c4:	459e      	cmp	lr, r3
 80197c6:	ee17 8a90 	vmov	r8, s15
 80197ca:	f43f af37 	beq.w	801963c <uxr_read_framed_msg+0x144>
 80197ce:	2301      	movs	r3, #1
 80197d0:	7023      	strb	r3, [r4, #0]
 80197d2:	e6a2      	b.n	801951a <uxr_read_framed_msg+0x22>
 80197d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80197d6:	9300      	str	r3, [sp, #0]
 80197d8:	2301      	movs	r3, #1
 80197da:	9301      	str	r3, [sp, #4]
 80197dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197de:	464a      	mov	r2, r9
 80197e0:	4641      	mov	r1, r8
 80197e2:	4620      	mov	r0, r4
 80197e4:	f7ff fe06 	bl	80193f4 <uxr_framing_read_transport>
 80197e8:	2800      	cmp	r0, #0
 80197ea:	f43f aec6 	beq.w	801957a <uxr_read_framed_msg+0x82>
 80197ee:	7823      	ldrb	r3, [r4, #0]
 80197f0:	e693      	b.n	801951a <uxr_read_framed_msg+0x22>
 80197f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80197f4:	9300      	str	r3, [sp, #0]
 80197f6:	2302      	movs	r3, #2
 80197f8:	e7ef      	b.n	80197da <uxr_read_framed_msg+0x2e2>
 80197fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80197fc:	9300      	str	r3, [sp, #0]
 80197fe:	2304      	movs	r3, #4
 8019800:	9301      	str	r3, [sp, #4]
 8019802:	464a      	mov	r2, r9
 8019804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019806:	4641      	mov	r1, r8
 8019808:	4620      	mov	r0, r4
 801980a:	f7ff fdf3 	bl	80193f4 <uxr_framing_read_transport>
 801980e:	2800      	cmp	r0, #0
 8019810:	d1ed      	bne.n	80197ee <uxr_read_framed_msg+0x2f6>
 8019812:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019816:	2b7e      	cmp	r3, #126	; 0x7e
 8019818:	d0e9      	beq.n	80197ee <uxr_read_framed_msg+0x2f6>
 801981a:	e6ae      	b.n	801957a <uxr_read_framed_msg+0x82>
 801981c:	30c30c31 	.word	0x30c30c31
 8019820:	0801caf0 	.word	0x0801caf0
 8019824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019826:	9300      	str	r3, [sp, #0]
 8019828:	2305      	movs	r3, #5
 801982a:	9301      	str	r3, [sp, #4]
 801982c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801982e:	f7ff fde1 	bl	80193f4 <uxr_framing_read_transport>
 8019832:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019836:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801983a:	429a      	cmp	r2, r3
 801983c:	f43f ae9d 	beq.w	801957a <uxr_read_framed_msg+0x82>
 8019840:	e668      	b.n	8019514 <uxr_read_framed_msg+0x1c>
 8019842:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019844:	9300      	str	r3, [sp, #0]
 8019846:	2303      	movs	r3, #3
 8019848:	e7c7      	b.n	80197da <uxr_read_framed_msg+0x2e2>
 801984a:	2305      	movs	r3, #5
 801984c:	7023      	strb	r3, [r4, #0]
 801984e:	e664      	b.n	801951a <uxr_read_framed_msg+0x22>
 8019850:	ee17 8a90 	vmov	r8, s15
 8019854:	f43f aef2 	beq.w	801963c <uxr_read_framed_msg+0x144>
 8019858:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801985c:	d08e      	beq.n	801977c <uxr_read_framed_msg+0x284>
 801985e:	ebae 0303 	sub.w	r3, lr, r3
 8019862:	3302      	adds	r3, #2
 8019864:	9301      	str	r3, [sp, #4]
 8019866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019868:	9300      	str	r3, [sp, #0]
 801986a:	e7b7      	b.n	80197dc <uxr_read_framed_msg+0x2e4>
 801986c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801986e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019872:	7013      	strb	r3, [r2, #0]
 8019874:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8019876:	b003      	add	sp, #12
 8019878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801987c:	f103 0c01 	add.w	ip, r3, #1
 8019880:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019884:	fba5 0202 	umull	r0, r2, r5, r2
 8019888:	0892      	lsrs	r2, r2, #2
 801988a:	202a      	movs	r0, #42	; 0x2a
 801988c:	fb00 c212 	mls	r2, r0, r2, ip
 8019890:	fa5f fc82 	uxtb.w	ip, r2
 8019894:	4561      	cmp	r1, ip
 8019896:	d09d      	beq.n	80197d4 <uxr_read_framed_msg+0x2dc>
 8019898:	3302      	adds	r3, #2
 801989a:	4422      	add	r2, r4
 801989c:	0859      	lsrs	r1, r3, #1
 801989e:	7892      	ldrb	r2, [r2, #2]
 80198a0:	fba5 c101 	umull	ip, r1, r5, r1
 80198a4:	0889      	lsrs	r1, r1, #2
 80198a6:	fb00 3311 	mls	r3, r0, r1, r3
 80198aa:	2a7e      	cmp	r2, #126	; 0x7e
 80198ac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80198b0:	f000 80aa 	beq.w	8019a08 <uxr_read_framed_msg+0x510>
 80198b4:	f082 0220 	eor.w	r2, r2, #32
 80198b8:	e654      	b.n	8019564 <uxr_read_framed_msg+0x6c>
 80198ba:	1c58      	adds	r0, r3, #1
 80198bc:	0842      	lsrs	r2, r0, #1
 80198be:	fba5 c202 	umull	ip, r2, r5, r2
 80198c2:	0892      	lsrs	r2, r2, #2
 80198c4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80198c8:	fb0c 0212 	mls	r2, ip, r2, r0
 80198cc:	b2d0      	uxtb	r0, r2
 80198ce:	4281      	cmp	r1, r0
 80198d0:	d08f      	beq.n	80197f2 <uxr_read_framed_msg+0x2fa>
 80198d2:	4422      	add	r2, r4
 80198d4:	3302      	adds	r3, #2
 80198d6:	7890      	ldrb	r0, [r2, #2]
 80198d8:	085a      	lsrs	r2, r3, #1
 80198da:	fba5 1202 	umull	r1, r2, r5, r2
 80198de:	0892      	lsrs	r2, r2, #2
 80198e0:	fb0c 3312 	mls	r3, ip, r2, r3
 80198e4:	287e      	cmp	r0, #126	; 0x7e
 80198e6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80198ea:	d07d      	beq.n	80199e8 <uxr_read_framed_msg+0x4f0>
 80198ec:	f080 0020 	eor.w	r0, r0, #32
 80198f0:	e660      	b.n	80195b4 <uxr_read_framed_msg+0xbc>
 80198f2:	1c59      	adds	r1, r3, #1
 80198f4:	084a      	lsrs	r2, r1, #1
 80198f6:	fba5 c202 	umull	ip, r2, r5, r2
 80198fa:	0892      	lsrs	r2, r2, #2
 80198fc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019900:	fb0c 1212 	mls	r2, ip, r2, r1
 8019904:	b2d1      	uxtb	r1, r2
 8019906:	4288      	cmp	r0, r1
 8019908:	f43f af64 	beq.w	80197d4 <uxr_read_framed_msg+0x2dc>
 801990c:	4422      	add	r2, r4
 801990e:	3302      	adds	r3, #2
 8019910:	7891      	ldrb	r1, [r2, #2]
 8019912:	085a      	lsrs	r2, r3, #1
 8019914:	fba5 0202 	umull	r0, r2, r5, r2
 8019918:	0892      	lsrs	r2, r2, #2
 801991a:	fb0c 3312 	mls	r3, ip, r2, r3
 801991e:	297e      	cmp	r1, #126	; 0x7e
 8019920:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019924:	d070      	beq.n	8019a08 <uxr_read_framed_msg+0x510>
 8019926:	f081 0120 	eor.w	r1, r1, #32
 801992a:	e6a3      	b.n	8019674 <uxr_read_framed_msg+0x17c>
 801992c:	f103 0c01 	add.w	ip, r3, #1
 8019930:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019934:	fba5 0202 	umull	r0, r2, r5, r2
 8019938:	0892      	lsrs	r2, r2, #2
 801993a:	202a      	movs	r0, #42	; 0x2a
 801993c:	fb00 c212 	mls	r2, r0, r2, ip
 8019940:	fa5f fc82 	uxtb.w	ip, r2
 8019944:	4561      	cmp	r1, ip
 8019946:	f43f af58 	beq.w	80197fa <uxr_read_framed_msg+0x302>
 801994a:	4422      	add	r2, r4
 801994c:	3302      	adds	r3, #2
 801994e:	7891      	ldrb	r1, [r2, #2]
 8019950:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019954:	085a      	lsrs	r2, r3, #1
 8019956:	fba5 c202 	umull	ip, r2, r5, r2
 801995a:	0892      	lsrs	r2, r2, #2
 801995c:	fb00 3312 	mls	r3, r0, r2, r3
 8019960:	297e      	cmp	r1, #126	; 0x7e
 8019962:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019966:	f43f af48 	beq.w	80197fa <uxr_read_framed_msg+0x302>
 801996a:	f081 0120 	eor.w	r1, r1, #32
 801996e:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019972:	e6e8      	b.n	8019746 <uxr_read_framed_msg+0x24e>
 8019974:	1c58      	adds	r0, r3, #1
 8019976:	0842      	lsrs	r2, r0, #1
 8019978:	fba5 c202 	umull	ip, r2, r5, r2
 801997c:	0892      	lsrs	r2, r2, #2
 801997e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019982:	fb0c 0212 	mls	r2, ip, r2, r0
 8019986:	b2d0      	uxtb	r0, r2
 8019988:	4281      	cmp	r1, r0
 801998a:	f43f af32 	beq.w	80197f2 <uxr_read_framed_msg+0x2fa>
 801998e:	4422      	add	r2, r4
 8019990:	3302      	adds	r3, #2
 8019992:	7890      	ldrb	r0, [r2, #2]
 8019994:	085a      	lsrs	r2, r3, #1
 8019996:	fba5 1202 	umull	r1, r2, r5, r2
 801999a:	0892      	lsrs	r2, r2, #2
 801999c:	fb0c 3312 	mls	r3, ip, r2, r3
 80199a0:	287e      	cmp	r0, #126	; 0x7e
 80199a2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80199a6:	d01f      	beq.n	80199e8 <uxr_read_framed_msg+0x4f0>
 80199a8:	f080 0020 	eor.w	r0, r0, #32
 80199ac:	e68b      	b.n	80196c6 <uxr_read_framed_msg+0x1ce>
 80199ae:	1c51      	adds	r1, r2, #1
 80199b0:	084b      	lsrs	r3, r1, #1
 80199b2:	fba5 c303 	umull	ip, r3, r5, r3
 80199b6:	089b      	lsrs	r3, r3, #2
 80199b8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80199bc:	fb0c 1313 	mls	r3, ip, r3, r1
 80199c0:	b2d9      	uxtb	r1, r3
 80199c2:	4288      	cmp	r0, r1
 80199c4:	f43f af3d 	beq.w	8019842 <uxr_read_framed_msg+0x34a>
 80199c8:	3202      	adds	r2, #2
 80199ca:	4423      	add	r3, r4
 80199cc:	0850      	lsrs	r0, r2, #1
 80199ce:	789b      	ldrb	r3, [r3, #2]
 80199d0:	fba5 1000 	umull	r1, r0, r5, r0
 80199d4:	0880      	lsrs	r0, r0, #2
 80199d6:	fb0c 2210 	mls	r2, ip, r0, r2
 80199da:	2b7e      	cmp	r3, #126	; 0x7e
 80199dc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80199e0:	d016      	beq.n	8019a10 <uxr_read_framed_msg+0x518>
 80199e2:	f083 0120 	eor.w	r1, r3, #32
 80199e6:	e68b      	b.n	8019700 <uxr_read_framed_msg+0x208>
 80199e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80199ea:	9300      	str	r3, [sp, #0]
 80199ec:	2302      	movs	r3, #2
 80199ee:	9301      	str	r3, [sp, #4]
 80199f0:	464a      	mov	r2, r9
 80199f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80199f4:	4641      	mov	r1, r8
 80199f6:	4620      	mov	r0, r4
 80199f8:	f7ff fcfc 	bl	80193f4 <uxr_framing_read_transport>
 80199fc:	2800      	cmp	r0, #0
 80199fe:	f47f aef6 	bne.w	80197ee <uxr_read_framed_msg+0x2f6>
 8019a02:	2301      	movs	r3, #1
 8019a04:	7023      	strb	r3, [r4, #0]
 8019a06:	e588      	b.n	801951a <uxr_read_framed_msg+0x22>
 8019a08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019a0a:	9300      	str	r3, [sp, #0]
 8019a0c:	2301      	movs	r3, #1
 8019a0e:	e7ee      	b.n	80199ee <uxr_read_framed_msg+0x4f6>
 8019a10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019a12:	9300      	str	r3, [sp, #0]
 8019a14:	2303      	movs	r3, #3
 8019a16:	e7ea      	b.n	80199ee <uxr_read_framed_msg+0x4f6>
 8019a18:	ee17 8a90 	vmov	r8, s15
 8019a1c:	e6ae      	b.n	801977c <uxr_read_framed_msg+0x284>
 8019a1e:	bf00      	nop

08019a20 <rcl_get_default_domain_id>:
 8019a20:	b530      	push	{r4, r5, lr}
 8019a22:	b083      	sub	sp, #12
 8019a24:	2300      	movs	r3, #0
 8019a26:	9300      	str	r3, [sp, #0]
 8019a28:	b1d0      	cbz	r0, 8019a60 <rcl_get_default_domain_id+0x40>
 8019a2a:	4604      	mov	r4, r0
 8019a2c:	4669      	mov	r1, sp
 8019a2e:	4815      	ldr	r0, [pc, #84]	; (8019a84 <rcl_get_default_domain_id+0x64>)
 8019a30:	f7fc ffe2 	bl	80169f8 <rcutils_get_env>
 8019a34:	4602      	mov	r2, r0
 8019a36:	b110      	cbz	r0, 8019a3e <rcl_get_default_domain_id+0x1e>
 8019a38:	2001      	movs	r0, #1
 8019a3a:	b003      	add	sp, #12
 8019a3c:	bd30      	pop	{r4, r5, pc}
 8019a3e:	9b00      	ldr	r3, [sp, #0]
 8019a40:	b18b      	cbz	r3, 8019a66 <rcl_get_default_domain_id+0x46>
 8019a42:	7818      	ldrb	r0, [r3, #0]
 8019a44:	2800      	cmp	r0, #0
 8019a46:	d0f8      	beq.n	8019a3a <rcl_get_default_domain_id+0x1a>
 8019a48:	a901      	add	r1, sp, #4
 8019a4a:	4618      	mov	r0, r3
 8019a4c:	9201      	str	r2, [sp, #4]
 8019a4e:	f001 f9ef 	bl	801ae30 <strtoul>
 8019a52:	4605      	mov	r5, r0
 8019a54:	b150      	cbz	r0, 8019a6c <rcl_get_default_domain_id+0x4c>
 8019a56:	1c43      	adds	r3, r0, #1
 8019a58:	d00d      	beq.n	8019a76 <rcl_get_default_domain_id+0x56>
 8019a5a:	6025      	str	r5, [r4, #0]
 8019a5c:	2000      	movs	r0, #0
 8019a5e:	e7ec      	b.n	8019a3a <rcl_get_default_domain_id+0x1a>
 8019a60:	200b      	movs	r0, #11
 8019a62:	b003      	add	sp, #12
 8019a64:	bd30      	pop	{r4, r5, pc}
 8019a66:	4618      	mov	r0, r3
 8019a68:	b003      	add	sp, #12
 8019a6a:	bd30      	pop	{r4, r5, pc}
 8019a6c:	9b01      	ldr	r3, [sp, #4]
 8019a6e:	781b      	ldrb	r3, [r3, #0]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d0f2      	beq.n	8019a5a <rcl_get_default_domain_id+0x3a>
 8019a74:	e7e0      	b.n	8019a38 <rcl_get_default_domain_id+0x18>
 8019a76:	f000 fca3 	bl	801a3c0 <__errno>
 8019a7a:	6803      	ldr	r3, [r0, #0]
 8019a7c:	2b22      	cmp	r3, #34	; 0x22
 8019a7e:	d1ec      	bne.n	8019a5a <rcl_get_default_domain_id+0x3a>
 8019a80:	e7da      	b.n	8019a38 <rcl_get_default_domain_id+0x18>
 8019a82:	bf00      	nop
 8019a84:	0801ccf0 	.word	0x0801ccf0

08019a88 <rcl_expand_topic_name>:
 8019a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a8c:	b08b      	sub	sp, #44	; 0x2c
 8019a8e:	9306      	str	r3, [sp, #24]
 8019a90:	2800      	cmp	r0, #0
 8019a92:	f000 80ad 	beq.w	8019bf0 <rcl_expand_topic_name+0x168>
 8019a96:	460e      	mov	r6, r1
 8019a98:	2900      	cmp	r1, #0
 8019a9a:	f000 80a9 	beq.w	8019bf0 <rcl_expand_topic_name+0x168>
 8019a9e:	4617      	mov	r7, r2
 8019aa0:	2a00      	cmp	r2, #0
 8019aa2:	f000 80a5 	beq.w	8019bf0 <rcl_expand_topic_name+0x168>
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	f000 80a2 	beq.w	8019bf0 <rcl_expand_topic_name+0x168>
 8019aac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	f000 809e 	beq.w	8019bf0 <rcl_expand_topic_name+0x168>
 8019ab4:	2200      	movs	r2, #0
 8019ab6:	a909      	add	r1, sp, #36	; 0x24
 8019ab8:	4680      	mov	r8, r0
 8019aba:	f000 f9f5 	bl	8019ea8 <rcl_validate_topic_name>
 8019abe:	4604      	mov	r4, r0
 8019ac0:	2800      	cmp	r0, #0
 8019ac2:	f040 8096 	bne.w	8019bf2 <rcl_expand_topic_name+0x16a>
 8019ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	f040 809a 	bne.w	8019c02 <rcl_expand_topic_name+0x17a>
 8019ace:	4602      	mov	r2, r0
 8019ad0:	a909      	add	r1, sp, #36	; 0x24
 8019ad2:	4630      	mov	r0, r6
 8019ad4:	f7fd fb92 	bl	80171fc <rmw_validate_node_name>
 8019ad8:	2800      	cmp	r0, #0
 8019ada:	f040 808e 	bne.w	8019bfa <rcl_expand_topic_name+0x172>
 8019ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ae0:	2a00      	cmp	r2, #0
 8019ae2:	f040 8093 	bne.w	8019c0c <rcl_expand_topic_name+0x184>
 8019ae6:	a909      	add	r1, sp, #36	; 0x24
 8019ae8:	4638      	mov	r0, r7
 8019aea:	f7fd fb69 	bl	80171c0 <rmw_validate_namespace>
 8019aee:	2800      	cmp	r0, #0
 8019af0:	f040 8083 	bne.w	8019bfa <rcl_expand_topic_name+0x172>
 8019af4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019af6:	2c00      	cmp	r4, #0
 8019af8:	f040 80ed 	bne.w	8019cd6 <rcl_expand_topic_name+0x24e>
 8019afc:	217b      	movs	r1, #123	; 0x7b
 8019afe:	4640      	mov	r0, r8
 8019b00:	f001 f8e5 	bl	801acce <strchr>
 8019b04:	f898 3000 	ldrb.w	r3, [r8]
 8019b08:	2b2f      	cmp	r3, #47	; 0x2f
 8019b0a:	4605      	mov	r5, r0
 8019b0c:	f000 809e 	beq.w	8019c4c <rcl_expand_topic_name+0x1c4>
 8019b10:	2b7e      	cmp	r3, #126	; 0x7e
 8019b12:	f040 80a2 	bne.w	8019c5a <rcl_expand_topic_name+0x1d2>
 8019b16:	4638      	mov	r0, r7
 8019b18:	f7e6 fb64 	bl	80001e4 <strlen>
 8019b1c:	4a82      	ldr	r2, [pc, #520]	; (8019d28 <rcl_expand_topic_name+0x2a0>)
 8019b1e:	4b83      	ldr	r3, [pc, #524]	; (8019d2c <rcl_expand_topic_name+0x2a4>)
 8019b20:	2801      	cmp	r0, #1
 8019b22:	bf18      	it	ne
 8019b24:	4613      	movne	r3, r2
 8019b26:	9302      	str	r3, [sp, #8]
 8019b28:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019b2a:	9300      	str	r3, [sp, #0]
 8019b2c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8019b30:	f108 0301 	add.w	r3, r8, #1
 8019b34:	9305      	str	r3, [sp, #20]
 8019b36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019b3a:	9301      	str	r3, [sp, #4]
 8019b3c:	ab14      	add	r3, sp, #80	; 0x50
 8019b3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019b40:	f7fc ff82 	bl	8016a48 <rcutils_format_string_limit>
 8019b44:	4682      	mov	sl, r0
 8019b46:	2800      	cmp	r0, #0
 8019b48:	f000 80c7 	beq.w	8019cda <rcl_expand_topic_name+0x252>
 8019b4c:	2d00      	cmp	r5, #0
 8019b4e:	f000 80a2 	beq.w	8019c96 <rcl_expand_topic_name+0x20e>
 8019b52:	217b      	movs	r1, #123	; 0x7b
 8019b54:	f001 f8bb 	bl	801acce <strchr>
 8019b58:	46d1      	mov	r9, sl
 8019b5a:	4605      	mov	r5, r0
 8019b5c:	9407      	str	r4, [sp, #28]
 8019b5e:	46d3      	mov	fp, sl
 8019b60:	464c      	mov	r4, r9
 8019b62:	2d00      	cmp	r5, #0
 8019b64:	f000 80be 	beq.w	8019ce4 <rcl_expand_topic_name+0x25c>
 8019b68:	217d      	movs	r1, #125	; 0x7d
 8019b6a:	4620      	mov	r0, r4
 8019b6c:	f001 f8af 	bl	801acce <strchr>
 8019b70:	eba0 0905 	sub.w	r9, r0, r5
 8019b74:	f109 0a01 	add.w	sl, r9, #1
 8019b78:	486d      	ldr	r0, [pc, #436]	; (8019d30 <rcl_expand_topic_name+0x2a8>)
 8019b7a:	4652      	mov	r2, sl
 8019b7c:	4629      	mov	r1, r5
 8019b7e:	f001 f8bb 	bl	801acf8 <strncmp>
 8019b82:	2800      	cmp	r0, #0
 8019b84:	d067      	beq.n	8019c56 <rcl_expand_topic_name+0x1ce>
 8019b86:	486b      	ldr	r0, [pc, #428]	; (8019d34 <rcl_expand_topic_name+0x2ac>)
 8019b88:	4652      	mov	r2, sl
 8019b8a:	4629      	mov	r1, r5
 8019b8c:	f001 f8b4 	bl	801acf8 <strncmp>
 8019b90:	b130      	cbz	r0, 8019ba0 <rcl_expand_topic_name+0x118>
 8019b92:	4869      	ldr	r0, [pc, #420]	; (8019d38 <rcl_expand_topic_name+0x2b0>)
 8019b94:	4652      	mov	r2, sl
 8019b96:	4629      	mov	r1, r5
 8019b98:	f001 f8ae 	bl	801acf8 <strncmp>
 8019b9c:	2800      	cmp	r0, #0
 8019b9e:	d137      	bne.n	8019c10 <rcl_expand_topic_name+0x188>
 8019ba0:	46b9      	mov	r9, r7
 8019ba2:	ab16      	add	r3, sp, #88	; 0x58
 8019ba4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019ba8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019bac:	ab14      	add	r3, sp, #80	; 0x50
 8019bae:	4628      	mov	r0, r5
 8019bb0:	cb0c      	ldmia	r3, {r2, r3}
 8019bb2:	4651      	mov	r1, sl
 8019bb4:	f7fd f884 	bl	8016cc0 <rcutils_strndup>
 8019bb8:	4605      	mov	r5, r0
 8019bba:	2800      	cmp	r0, #0
 8019bbc:	f000 809c 	beq.w	8019cf8 <rcl_expand_topic_name+0x270>
 8019bc0:	464a      	mov	r2, r9
 8019bc2:	4620      	mov	r0, r4
 8019bc4:	ab14      	add	r3, sp, #80	; 0x50
 8019bc6:	4629      	mov	r1, r5
 8019bc8:	f7fc ff78 	bl	8016abc <rcutils_repl_str>
 8019bcc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019bce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019bd0:	4604      	mov	r4, r0
 8019bd2:	4628      	mov	r0, r5
 8019bd4:	4798      	blx	r3
 8019bd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019bd8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019bda:	4658      	mov	r0, fp
 8019bdc:	4798      	blx	r3
 8019bde:	2c00      	cmp	r4, #0
 8019be0:	d07b      	beq.n	8019cda <rcl_expand_topic_name+0x252>
 8019be2:	217b      	movs	r1, #123	; 0x7b
 8019be4:	4620      	mov	r0, r4
 8019be6:	f001 f872 	bl	801acce <strchr>
 8019bea:	46a3      	mov	fp, r4
 8019bec:	4605      	mov	r5, r0
 8019bee:	e7b8      	b.n	8019b62 <rcl_expand_topic_name+0xda>
 8019bf0:	240b      	movs	r4, #11
 8019bf2:	4620      	mov	r0, r4
 8019bf4:	b00b      	add	sp, #44	; 0x2c
 8019bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bfa:	f7fb ffdd 	bl	8015bb8 <rcl_convert_rmw_ret_to_rcl_ret>
 8019bfe:	4604      	mov	r4, r0
 8019c00:	e7f7      	b.n	8019bf2 <rcl_expand_topic_name+0x16a>
 8019c02:	2467      	movs	r4, #103	; 0x67
 8019c04:	4620      	mov	r0, r4
 8019c06:	b00b      	add	sp, #44	; 0x2c
 8019c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c0c:	24c9      	movs	r4, #201	; 0xc9
 8019c0e:	e7f0      	b.n	8019bf2 <rcl_expand_topic_name+0x16a>
 8019c10:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8019c14:	9806      	ldr	r0, [sp, #24]
 8019c16:	1c69      	adds	r1, r5, #1
 8019c18:	f7fd f96c 	bl	8016ef4 <rcutils_string_map_getn>
 8019c1c:	4681      	mov	r9, r0
 8019c1e:	2800      	cmp	r0, #0
 8019c20:	d1bf      	bne.n	8019ba2 <rcl_expand_topic_name+0x11a>
 8019c22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019c24:	aa16      	add	r2, sp, #88	; 0x58
 8019c26:	6018      	str	r0, [r3, #0]
 8019c28:	ca07      	ldmia	r2, {r0, r1, r2}
 8019c2a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019c2e:	ab14      	add	r3, sp, #80	; 0x50
 8019c30:	cb0c      	ldmia	r3, {r2, r3}
 8019c32:	4651      	mov	r1, sl
 8019c34:	4628      	mov	r0, r5
 8019c36:	f7fd f843 	bl	8016cc0 <rcutils_strndup>
 8019c3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019c3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019c3e:	4798      	blx	r3
 8019c40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019c42:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019c44:	4658      	mov	r0, fp
 8019c46:	2469      	movs	r4, #105	; 0x69
 8019c48:	4798      	blx	r3
 8019c4a:	e7d2      	b.n	8019bf2 <rcl_expand_topic_name+0x16a>
 8019c4c:	2800      	cmp	r0, #0
 8019c4e:	d05b      	beq.n	8019d08 <rcl_expand_topic_name+0x280>
 8019c50:	46c1      	mov	r9, r8
 8019c52:	46a2      	mov	sl, r4
 8019c54:	e782      	b.n	8019b5c <rcl_expand_topic_name+0xd4>
 8019c56:	46b1      	mov	r9, r6
 8019c58:	e7a3      	b.n	8019ba2 <rcl_expand_topic_name+0x11a>
 8019c5a:	2800      	cmp	r0, #0
 8019c5c:	d1f8      	bne.n	8019c50 <rcl_expand_topic_name+0x1c8>
 8019c5e:	4638      	mov	r0, r7
 8019c60:	f7e6 fac0 	bl	80001e4 <strlen>
 8019c64:	4a35      	ldr	r2, [pc, #212]	; (8019d3c <rcl_expand_topic_name+0x2b4>)
 8019c66:	4b36      	ldr	r3, [pc, #216]	; (8019d40 <rcl_expand_topic_name+0x2b8>)
 8019c68:	f8cd 8010 	str.w	r8, [sp, #16]
 8019c6c:	2801      	cmp	r0, #1
 8019c6e:	bf18      	it	ne
 8019c70:	4613      	movne	r3, r2
 8019c72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8019c76:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019c7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019c7c:	9703      	str	r7, [sp, #12]
 8019c7e:	9200      	str	r2, [sp, #0]
 8019c80:	ab14      	add	r3, sp, #80	; 0x50
 8019c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019c84:	f7fc fee0 	bl	8016a48 <rcutils_format_string_limit>
 8019c88:	4682      	mov	sl, r0
 8019c8a:	4653      	mov	r3, sl
 8019c8c:	b32b      	cbz	r3, 8019cda <rcl_expand_topic_name+0x252>
 8019c8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019c90:	f8c3 a000 	str.w	sl, [r3]
 8019c94:	e7ad      	b.n	8019bf2 <rcl_expand_topic_name+0x16a>
 8019c96:	f89a 3000 	ldrb.w	r3, [sl]
 8019c9a:	2b2f      	cmp	r3, #47	; 0x2f
 8019c9c:	d0f7      	beq.n	8019c8e <rcl_expand_topic_name+0x206>
 8019c9e:	4638      	mov	r0, r7
 8019ca0:	f7e6 faa0 	bl	80001e4 <strlen>
 8019ca4:	4a25      	ldr	r2, [pc, #148]	; (8019d3c <rcl_expand_topic_name+0x2b4>)
 8019ca6:	4b26      	ldr	r3, [pc, #152]	; (8019d40 <rcl_expand_topic_name+0x2b8>)
 8019ca8:	f8cd a010 	str.w	sl, [sp, #16]
 8019cac:	2801      	cmp	r0, #1
 8019cae:	bf18      	it	ne
 8019cb0:	4613      	movne	r3, r2
 8019cb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8019cb6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019cba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019cbc:	9703      	str	r7, [sp, #12]
 8019cbe:	9200      	str	r2, [sp, #0]
 8019cc0:	ab14      	add	r3, sp, #80	; 0x50
 8019cc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019cc4:	f7fc fec0 	bl	8016a48 <rcutils_format_string_limit>
 8019cc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019cca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019ccc:	4605      	mov	r5, r0
 8019cce:	4650      	mov	r0, sl
 8019cd0:	4798      	blx	r3
 8019cd2:	46aa      	mov	sl, r5
 8019cd4:	e7d9      	b.n	8019c8a <rcl_expand_topic_name+0x202>
 8019cd6:	24ca      	movs	r4, #202	; 0xca
 8019cd8:	e78b      	b.n	8019bf2 <rcl_expand_topic_name+0x16a>
 8019cda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019cdc:	2300      	movs	r3, #0
 8019cde:	6013      	str	r3, [r2, #0]
 8019ce0:	240a      	movs	r4, #10
 8019ce2:	e786      	b.n	8019bf2 <rcl_expand_topic_name+0x16a>
 8019ce4:	465b      	mov	r3, fp
 8019ce6:	9c07      	ldr	r4, [sp, #28]
 8019ce8:	46da      	mov	sl, fp
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d1d3      	bne.n	8019c96 <rcl_expand_topic_name+0x20e>
 8019cee:	f898 3000 	ldrb.w	r3, [r8]
 8019cf2:	2b2f      	cmp	r3, #47	; 0x2f
 8019cf4:	d0cb      	beq.n	8019c8e <rcl_expand_topic_name+0x206>
 8019cf6:	e7b2      	b.n	8019c5e <rcl_expand_topic_name+0x1d6>
 8019cf8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 8019cfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019cfe:	6015      	str	r5, [r2, #0]
 8019d00:	4658      	mov	r0, fp
 8019d02:	4798      	blx	r3
 8019d04:	240a      	movs	r4, #10
 8019d06:	e774      	b.n	8019bf2 <rcl_expand_topic_name+0x16a>
 8019d08:	ab17      	add	r3, sp, #92	; 0x5c
 8019d0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019d0e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019d12:	ab14      	add	r3, sp, #80	; 0x50
 8019d14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019d16:	4640      	mov	r0, r8
 8019d18:	f7fc ffb0 	bl	8016c7c <rcutils_strdup>
 8019d1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019d1e:	2800      	cmp	r0, #0
 8019d20:	6018      	str	r0, [r3, #0]
 8019d22:	bf08      	it	eq
 8019d24:	240a      	moveq	r4, #10
 8019d26:	e764      	b.n	8019bf2 <rcl_expand_topic_name+0x16a>
 8019d28:	0801cd00 	.word	0x0801cd00
 8019d2c:	0801c014 	.word	0x0801c014
 8019d30:	0801cd08 	.word	0x0801cd08
 8019d34:	0801cd10 	.word	0x0801cd10
 8019d38:	0801cd18 	.word	0x0801cd18
 8019d3c:	0801c67c 	.word	0x0801c67c
 8019d40:	0801c024 	.word	0x0801c024

08019d44 <rcl_get_default_topic_name_substitutions>:
 8019d44:	2800      	cmp	r0, #0
 8019d46:	bf0c      	ite	eq
 8019d48:	200b      	moveq	r0, #11
 8019d4a:	2000      	movne	r0, #0
 8019d4c:	4770      	bx	lr
 8019d4e:	bf00      	nop

08019d50 <rcl_get_zero_initialized_guard_condition>:
 8019d50:	4a03      	ldr	r2, [pc, #12]	; (8019d60 <rcl_get_zero_initialized_guard_condition+0x10>)
 8019d52:	4603      	mov	r3, r0
 8019d54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019d58:	e883 0003 	stmia.w	r3, {r0, r1}
 8019d5c:	4618      	mov	r0, r3
 8019d5e:	4770      	bx	lr
 8019d60:	0801cd24 	.word	0x0801cd24

08019d64 <rcl_guard_condition_init_from_rmw>:
 8019d64:	b082      	sub	sp, #8
 8019d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d6a:	b086      	sub	sp, #24
 8019d6c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019d70:	4604      	mov	r4, r0
 8019d72:	f84c 3f04 	str.w	r3, [ip, #4]!
 8019d76:	460e      	mov	r6, r1
 8019d78:	4617      	mov	r7, r2
 8019d7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019d7e:	f10d 0e04 	add.w	lr, sp, #4
 8019d82:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019d86:	f8dc 3000 	ldr.w	r3, [ip]
 8019d8a:	f8ce 3000 	str.w	r3, [lr]
 8019d8e:	a801      	add	r0, sp, #4
 8019d90:	f7f6 fa52 	bl	8010238 <rcutils_allocator_is_valid>
 8019d94:	b350      	cbz	r0, 8019dec <rcl_guard_condition_init_from_rmw+0x88>
 8019d96:	b34c      	cbz	r4, 8019dec <rcl_guard_condition_init_from_rmw+0x88>
 8019d98:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8019d9c:	f1b8 0f00 	cmp.w	r8, #0
 8019da0:	d11e      	bne.n	8019de0 <rcl_guard_condition_init_from_rmw+0x7c>
 8019da2:	b31f      	cbz	r7, 8019dec <rcl_guard_condition_init_from_rmw+0x88>
 8019da4:	4638      	mov	r0, r7
 8019da6:	f7fb ff25 	bl	8015bf4 <rcl_context_is_valid>
 8019daa:	b328      	cbz	r0, 8019df8 <rcl_guard_condition_init_from_rmw+0x94>
 8019dac:	9b01      	ldr	r3, [sp, #4]
 8019dae:	9905      	ldr	r1, [sp, #20]
 8019db0:	201c      	movs	r0, #28
 8019db2:	4798      	blx	r3
 8019db4:	4605      	mov	r5, r0
 8019db6:	6060      	str	r0, [r4, #4]
 8019db8:	b358      	cbz	r0, 8019e12 <rcl_guard_condition_init_from_rmw+0xae>
 8019dba:	b1fe      	cbz	r6, 8019dfc <rcl_guard_condition_init_from_rmw+0x98>
 8019dbc:	6006      	str	r6, [r0, #0]
 8019dbe:	f880 8004 	strb.w	r8, [r0, #4]
 8019dc2:	ac01      	add	r4, sp, #4
 8019dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019dc6:	f105 0c08 	add.w	ip, r5, #8
 8019dca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019dce:	6823      	ldr	r3, [r4, #0]
 8019dd0:	f8cc 3000 	str.w	r3, [ip]
 8019dd4:	2000      	movs	r0, #0
 8019dd6:	b006      	add	sp, #24
 8019dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ddc:	b002      	add	sp, #8
 8019dde:	4770      	bx	lr
 8019de0:	2064      	movs	r0, #100	; 0x64
 8019de2:	b006      	add	sp, #24
 8019de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019de8:	b002      	add	sp, #8
 8019dea:	4770      	bx	lr
 8019dec:	200b      	movs	r0, #11
 8019dee:	b006      	add	sp, #24
 8019df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019df4:	b002      	add	sp, #8
 8019df6:	4770      	bx	lr
 8019df8:	2065      	movs	r0, #101	; 0x65
 8019dfa:	e7f2      	b.n	8019de2 <rcl_guard_condition_init_from_rmw+0x7e>
 8019dfc:	6838      	ldr	r0, [r7, #0]
 8019dfe:	3028      	adds	r0, #40	; 0x28
 8019e00:	f000 fa50 	bl	801a2a4 <rmw_create_guard_condition>
 8019e04:	6028      	str	r0, [r5, #0]
 8019e06:	6865      	ldr	r5, [r4, #4]
 8019e08:	682e      	ldr	r6, [r5, #0]
 8019e0a:	b126      	cbz	r6, 8019e16 <rcl_guard_condition_init_from_rmw+0xb2>
 8019e0c:	2301      	movs	r3, #1
 8019e0e:	712b      	strb	r3, [r5, #4]
 8019e10:	e7d7      	b.n	8019dc2 <rcl_guard_condition_init_from_rmw+0x5e>
 8019e12:	200a      	movs	r0, #10
 8019e14:	e7e5      	b.n	8019de2 <rcl_guard_condition_init_from_rmw+0x7e>
 8019e16:	4628      	mov	r0, r5
 8019e18:	9b02      	ldr	r3, [sp, #8]
 8019e1a:	9905      	ldr	r1, [sp, #20]
 8019e1c:	4798      	blx	r3
 8019e1e:	6066      	str	r6, [r4, #4]
 8019e20:	2001      	movs	r0, #1
 8019e22:	e7de      	b.n	8019de2 <rcl_guard_condition_init_from_rmw+0x7e>

08019e24 <rcl_guard_condition_fini>:
 8019e24:	b570      	push	{r4, r5, r6, lr}
 8019e26:	b082      	sub	sp, #8
 8019e28:	b1f0      	cbz	r0, 8019e68 <rcl_guard_condition_fini+0x44>
 8019e2a:	6843      	ldr	r3, [r0, #4]
 8019e2c:	4604      	mov	r4, r0
 8019e2e:	b163      	cbz	r3, 8019e4a <rcl_guard_condition_fini+0x26>
 8019e30:	6818      	ldr	r0, [r3, #0]
 8019e32:	68de      	ldr	r6, [r3, #12]
 8019e34:	6999      	ldr	r1, [r3, #24]
 8019e36:	b160      	cbz	r0, 8019e52 <rcl_guard_condition_fini+0x2e>
 8019e38:	791d      	ldrb	r5, [r3, #4]
 8019e3a:	b965      	cbnz	r5, 8019e56 <rcl_guard_condition_fini+0x32>
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	47b0      	blx	r6
 8019e40:	2300      	movs	r3, #0
 8019e42:	4628      	mov	r0, r5
 8019e44:	6063      	str	r3, [r4, #4]
 8019e46:	b002      	add	sp, #8
 8019e48:	bd70      	pop	{r4, r5, r6, pc}
 8019e4a:	461d      	mov	r5, r3
 8019e4c:	4628      	mov	r0, r5
 8019e4e:	b002      	add	sp, #8
 8019e50:	bd70      	pop	{r4, r5, r6, pc}
 8019e52:	4605      	mov	r5, r0
 8019e54:	e7f2      	b.n	8019e3c <rcl_guard_condition_fini+0x18>
 8019e56:	9101      	str	r1, [sp, #4]
 8019e58:	f000 fa38 	bl	801a2cc <rmw_destroy_guard_condition>
 8019e5c:	1e05      	subs	r5, r0, #0
 8019e5e:	6863      	ldr	r3, [r4, #4]
 8019e60:	9901      	ldr	r1, [sp, #4]
 8019e62:	bf18      	it	ne
 8019e64:	2501      	movne	r5, #1
 8019e66:	e7e9      	b.n	8019e3c <rcl_guard_condition_fini+0x18>
 8019e68:	250b      	movs	r5, #11
 8019e6a:	4628      	mov	r0, r5
 8019e6c:	b002      	add	sp, #8
 8019e6e:	bd70      	pop	{r4, r5, r6, pc}

08019e70 <rcl_guard_condition_get_default_options>:
 8019e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e72:	b087      	sub	sp, #28
 8019e74:	4606      	mov	r6, r0
 8019e76:	4668      	mov	r0, sp
 8019e78:	f7f6 f9d0 	bl	801021c <rcutils_get_default_allocator>
 8019e7c:	4b09      	ldr	r3, [pc, #36]	; (8019ea4 <rcl_guard_condition_get_default_options+0x34>)
 8019e7e:	46ee      	mov	lr, sp
 8019e80:	469c      	mov	ip, r3
 8019e82:	461d      	mov	r5, r3
 8019e84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019e88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e8e:	4634      	mov	r4, r6
 8019e90:	f8de 7000 	ldr.w	r7, [lr]
 8019e94:	f8cc 7000 	str.w	r7, [ip]
 8019e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019e9a:	4630      	mov	r0, r6
 8019e9c:	6027      	str	r7, [r4, #0]
 8019e9e:	b007      	add	sp, #28
 8019ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ea2:	bf00      	nop
 8019ea4:	2001c944 	.word	0x2001c944

08019ea8 <rcl_validate_topic_name>:
 8019ea8:	2800      	cmp	r0, #0
 8019eaa:	d07a      	beq.n	8019fa2 <rcl_validate_topic_name+0xfa>
 8019eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019eb0:	460e      	mov	r6, r1
 8019eb2:	2900      	cmp	r1, #0
 8019eb4:	d07c      	beq.n	8019fb0 <rcl_validate_topic_name+0x108>
 8019eb6:	4617      	mov	r7, r2
 8019eb8:	4605      	mov	r5, r0
 8019eba:	f7e6 f993 	bl	80001e4 <strlen>
 8019ebe:	b1b0      	cbz	r0, 8019eee <rcl_validate_topic_name+0x46>
 8019ec0:	f895 9000 	ldrb.w	r9, [r5]
 8019ec4:	f8df c180 	ldr.w	ip, [pc, #384]	; 801a048 <rcl_validate_topic_name+0x1a0>
 8019ec8:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8019ecc:	f013 0304 	ands.w	r3, r3, #4
 8019ed0:	d169      	bne.n	8019fa6 <rcl_validate_topic_name+0xfe>
 8019ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8019ed6:	f815 2008 	ldrb.w	r2, [r5, r8]
 8019eda:	2a2f      	cmp	r2, #47	; 0x2f
 8019edc:	d10e      	bne.n	8019efc <rcl_validate_topic_name+0x54>
 8019ede:	2202      	movs	r2, #2
 8019ee0:	6032      	str	r2, [r6, #0]
 8019ee2:	b36f      	cbz	r7, 8019f40 <rcl_validate_topic_name+0x98>
 8019ee4:	f8c7 8000 	str.w	r8, [r7]
 8019ee8:	4618      	mov	r0, r3
 8019eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019eee:	2301      	movs	r3, #1
 8019ef0:	6033      	str	r3, [r6, #0]
 8019ef2:	b32f      	cbz	r7, 8019f40 <rcl_validate_topic_name+0x98>
 8019ef4:	2000      	movs	r0, #0
 8019ef6:	6038      	str	r0, [r7, #0]
 8019ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019efc:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8019f00:	461c      	mov	r4, r3
 8019f02:	4619      	mov	r1, r3
 8019f04:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8019f08:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8019f0c:	f1be 0f09 	cmp.w	lr, #9
 8019f10:	d919      	bls.n	8019f46 <rcl_validate_topic_name+0x9e>
 8019f12:	f022 0e20 	bic.w	lr, r2, #32
 8019f16:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8019f1a:	f1be 0f19 	cmp.w	lr, #25
 8019f1e:	d912      	bls.n	8019f46 <rcl_validate_topic_name+0x9e>
 8019f20:	2a5f      	cmp	r2, #95	; 0x5f
 8019f22:	d019      	beq.n	8019f58 <rcl_validate_topic_name+0xb0>
 8019f24:	2a2f      	cmp	r2, #47	; 0x2f
 8019f26:	d051      	beq.n	8019fcc <rcl_validate_topic_name+0x124>
 8019f28:	2a7e      	cmp	r2, #126	; 0x7e
 8019f2a:	d048      	beq.n	8019fbe <rcl_validate_topic_name+0x116>
 8019f2c:	2a7b      	cmp	r2, #123	; 0x7b
 8019f2e:	d054      	beq.n	8019fda <rcl_validate_topic_name+0x132>
 8019f30:	2a7d      	cmp	r2, #125	; 0x7d
 8019f32:	d161      	bne.n	8019ff8 <rcl_validate_topic_name+0x150>
 8019f34:	2c00      	cmp	r4, #0
 8019f36:	d155      	bne.n	8019fe4 <rcl_validate_topic_name+0x13c>
 8019f38:	2305      	movs	r3, #5
 8019f3a:	6033      	str	r3, [r6, #0]
 8019f3c:	b107      	cbz	r7, 8019f40 <rcl_validate_topic_name+0x98>
 8019f3e:	6039      	str	r1, [r7, #0]
 8019f40:	2000      	movs	r0, #0
 8019f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f46:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019f4a:	0752      	lsls	r2, r2, #29
 8019f4c:	d504      	bpl.n	8019f58 <rcl_validate_topic_name+0xb0>
 8019f4e:	b11c      	cbz	r4, 8019f58 <rcl_validate_topic_name+0xb0>
 8019f50:	b111      	cbz	r1, 8019f58 <rcl_validate_topic_name+0xb0>
 8019f52:	1e4a      	subs	r2, r1, #1
 8019f54:	429a      	cmp	r2, r3
 8019f56:	d02d      	beq.n	8019fb4 <rcl_validate_topic_name+0x10c>
 8019f58:	3101      	adds	r1, #1
 8019f5a:	4288      	cmp	r0, r1
 8019f5c:	d1d2      	bne.n	8019f04 <rcl_validate_topic_name+0x5c>
 8019f5e:	2c00      	cmp	r4, #0
 8019f60:	d145      	bne.n	8019fee <rcl_validate_topic_name+0x146>
 8019f62:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8019f66:	d04f      	beq.n	801a008 <rcl_validate_topic_name+0x160>
 8019f68:	4620      	mov	r0, r4
 8019f6a:	2301      	movs	r3, #1
 8019f6c:	e006      	b.n	8019f7c <rcl_validate_topic_name+0xd4>
 8019f6e:	428b      	cmp	r3, r1
 8019f70:	f105 0501 	add.w	r5, r5, #1
 8019f74:	f103 0201 	add.w	r2, r3, #1
 8019f78:	d236      	bcs.n	8019fe8 <rcl_validate_topic_name+0x140>
 8019f7a:	4613      	mov	r3, r2
 8019f7c:	4580      	cmp	r8, r0
 8019f7e:	f100 0001 	add.w	r0, r0, #1
 8019f82:	d0f4      	beq.n	8019f6e <rcl_validate_topic_name+0xc6>
 8019f84:	782a      	ldrb	r2, [r5, #0]
 8019f86:	2a2f      	cmp	r2, #47	; 0x2f
 8019f88:	d1f1      	bne.n	8019f6e <rcl_validate_topic_name+0xc6>
 8019f8a:	786a      	ldrb	r2, [r5, #1]
 8019f8c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019f90:	0754      	lsls	r4, r2, #29
 8019f92:	d5ec      	bpl.n	8019f6e <rcl_validate_topic_name+0xc6>
 8019f94:	2204      	movs	r2, #4
 8019f96:	6032      	str	r2, [r6, #0]
 8019f98:	2f00      	cmp	r7, #0
 8019f9a:	d0d1      	beq.n	8019f40 <rcl_validate_topic_name+0x98>
 8019f9c:	603b      	str	r3, [r7, #0]
 8019f9e:	2000      	movs	r0, #0
 8019fa0:	e7aa      	b.n	8019ef8 <rcl_validate_topic_name+0x50>
 8019fa2:	200b      	movs	r0, #11
 8019fa4:	4770      	bx	lr
 8019fa6:	2304      	movs	r3, #4
 8019fa8:	6033      	str	r3, [r6, #0]
 8019faa:	2f00      	cmp	r7, #0
 8019fac:	d1a2      	bne.n	8019ef4 <rcl_validate_topic_name+0x4c>
 8019fae:	e7c7      	b.n	8019f40 <rcl_validate_topic_name+0x98>
 8019fb0:	200b      	movs	r0, #11
 8019fb2:	e7a1      	b.n	8019ef8 <rcl_validate_topic_name+0x50>
 8019fb4:	2309      	movs	r3, #9
 8019fb6:	6033      	str	r3, [r6, #0]
 8019fb8:	2f00      	cmp	r7, #0
 8019fba:	d1c0      	bne.n	8019f3e <rcl_validate_topic_name+0x96>
 8019fbc:	e7c0      	b.n	8019f40 <rcl_validate_topic_name+0x98>
 8019fbe:	2900      	cmp	r1, #0
 8019fc0:	d0ca      	beq.n	8019f58 <rcl_validate_topic_name+0xb0>
 8019fc2:	2306      	movs	r3, #6
 8019fc4:	6033      	str	r3, [r6, #0]
 8019fc6:	2f00      	cmp	r7, #0
 8019fc8:	d1b9      	bne.n	8019f3e <rcl_validate_topic_name+0x96>
 8019fca:	e7b9      	b.n	8019f40 <rcl_validate_topic_name+0x98>
 8019fcc:	2c00      	cmp	r4, #0
 8019fce:	d0c3      	beq.n	8019f58 <rcl_validate_topic_name+0xb0>
 8019fd0:	2308      	movs	r3, #8
 8019fd2:	6033      	str	r3, [r6, #0]
 8019fd4:	2f00      	cmp	r7, #0
 8019fd6:	d1b2      	bne.n	8019f3e <rcl_validate_topic_name+0x96>
 8019fd8:	e7b2      	b.n	8019f40 <rcl_validate_topic_name+0x98>
 8019fda:	2c00      	cmp	r4, #0
 8019fdc:	d1f8      	bne.n	8019fd0 <rcl_validate_topic_name+0x128>
 8019fde:	460b      	mov	r3, r1
 8019fe0:	2401      	movs	r4, #1
 8019fe2:	e7b9      	b.n	8019f58 <rcl_validate_topic_name+0xb0>
 8019fe4:	2400      	movs	r4, #0
 8019fe6:	e7b7      	b.n	8019f58 <rcl_validate_topic_name+0xb0>
 8019fe8:	2000      	movs	r0, #0
 8019fea:	6030      	str	r0, [r6, #0]
 8019fec:	e784      	b.n	8019ef8 <rcl_validate_topic_name+0x50>
 8019fee:	2205      	movs	r2, #5
 8019ff0:	6032      	str	r2, [r6, #0]
 8019ff2:	2f00      	cmp	r7, #0
 8019ff4:	d1d2      	bne.n	8019f9c <rcl_validate_topic_name+0xf4>
 8019ff6:	e7a3      	b.n	8019f40 <rcl_validate_topic_name+0x98>
 8019ff8:	2c00      	cmp	r4, #0
 8019ffa:	bf14      	ite	ne
 8019ffc:	2308      	movne	r3, #8
 8019ffe:	2303      	moveq	r3, #3
 801a000:	6033      	str	r3, [r6, #0]
 801a002:	2f00      	cmp	r7, #0
 801a004:	d19b      	bne.n	8019f3e <rcl_validate_topic_name+0x96>
 801a006:	e79b      	b.n	8019f40 <rcl_validate_topic_name+0x98>
 801a008:	2301      	movs	r3, #1
 801a00a:	e00a      	b.n	801a022 <rcl_validate_topic_name+0x17a>
 801a00c:	2c01      	cmp	r4, #1
 801a00e:	d013      	beq.n	801a038 <rcl_validate_topic_name+0x190>
 801a010:	4299      	cmp	r1, r3
 801a012:	f104 0401 	add.w	r4, r4, #1
 801a016:	f105 0501 	add.w	r5, r5, #1
 801a01a:	f103 0201 	add.w	r2, r3, #1
 801a01e:	d9e3      	bls.n	8019fe8 <rcl_validate_topic_name+0x140>
 801a020:	4613      	mov	r3, r2
 801a022:	45a0      	cmp	r8, r4
 801a024:	d0f4      	beq.n	801a010 <rcl_validate_topic_name+0x168>
 801a026:	782a      	ldrb	r2, [r5, #0]
 801a028:	2a2f      	cmp	r2, #47	; 0x2f
 801a02a:	d1ef      	bne.n	801a00c <rcl_validate_topic_name+0x164>
 801a02c:	786a      	ldrb	r2, [r5, #1]
 801a02e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a032:	0752      	lsls	r2, r2, #29
 801a034:	d5ec      	bpl.n	801a010 <rcl_validate_topic_name+0x168>
 801a036:	e7ad      	b.n	8019f94 <rcl_validate_topic_name+0xec>
 801a038:	2307      	movs	r3, #7
 801a03a:	6033      	str	r3, [r6, #0]
 801a03c:	2f00      	cmp	r7, #0
 801a03e:	f43f af7f 	beq.w	8019f40 <rcl_validate_topic_name+0x98>
 801a042:	603c      	str	r4, [r7, #0]
 801a044:	2000      	movs	r0, #0
 801a046:	e757      	b.n	8019ef8 <rcl_validate_topic_name+0x50>
 801a048:	0801ce1f 	.word	0x0801ce1f

0801a04c <on_status>:
 801a04c:	b082      	sub	sp, #8
 801a04e:	b002      	add	sp, #8
 801a050:	4770      	bx	lr
 801a052:	bf00      	nop

0801a054 <on_topic>:
 801a054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a058:	4a22      	ldr	r2, [pc, #136]	; (801a0e4 <on_topic+0x90>)
 801a05a:	b094      	sub	sp, #80	; 0x50
 801a05c:	6812      	ldr	r2, [r2, #0]
 801a05e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801a060:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801a064:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 801a068:	b3c2      	cbz	r2, 801a0dc <on_topic+0x88>
 801a06a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801a06e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801a072:	e001      	b.n	801a078 <on_topic+0x24>
 801a074:	6852      	ldr	r2, [r2, #4]
 801a076:	b38a      	cbz	r2, 801a0dc <on_topic+0x88>
 801a078:	6894      	ldr	r4, [r2, #8]
 801a07a:	8aa3      	ldrh	r3, [r4, #20]
 801a07c:	428b      	cmp	r3, r1
 801a07e:	d1f9      	bne.n	801a074 <on_topic+0x20>
 801a080:	7da3      	ldrb	r3, [r4, #22]
 801a082:	4283      	cmp	r3, r0
 801a084:	d1f6      	bne.n	801a074 <on_topic+0x20>
 801a086:	2248      	movs	r2, #72	; 0x48
 801a088:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a08c:	4668      	mov	r0, sp
 801a08e:	f000 fb95 	bl	801a7bc <memcpy>
 801a092:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801a096:	cb0c      	ldmia	r3, {r2, r3}
 801a098:	4620      	mov	r0, r4
 801a09a:	f7f6 fca1 	bl	80109e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a09e:	4607      	mov	r7, r0
 801a0a0:	b1e0      	cbz	r0, 801a0dc <on_topic+0x88>
 801a0a2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a0a6:	4632      	mov	r2, r6
 801a0a8:	4628      	mov	r0, r5
 801a0aa:	f108 0110 	add.w	r1, r8, #16
 801a0ae:	f7fd fff1 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 801a0b2:	b930      	cbnz	r0, 801a0c2 <on_topic+0x6e>
 801a0b4:	480c      	ldr	r0, [pc, #48]	; (801a0e8 <on_topic+0x94>)
 801a0b6:	4639      	mov	r1, r7
 801a0b8:	b014      	add	sp, #80	; 0x50
 801a0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a0be:	f7fd b90b 	b.w	80172d8 <put_memory>
 801a0c2:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801a0c6:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 801a0ca:	f7fd fdd3 	bl	8017c74 <rmw_uros_epoch_nanos>
 801a0ce:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801a0d2:	2305      	movs	r3, #5
 801a0d4:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a0d8:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801a0dc:	b014      	add	sp, #80	; 0x50
 801a0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0e2:	bf00      	nop
 801a0e4:	2001c814 	.word	0x2001c814
 801a0e8:	2001c804 	.word	0x2001c804

0801a0ec <on_request>:
 801a0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0f0:	4823      	ldr	r0, [pc, #140]	; (801a180 <on_request+0x94>)
 801a0f2:	b094      	sub	sp, #80	; 0x50
 801a0f4:	6800      	ldr	r0, [r0, #0]
 801a0f6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801a0f8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801a0fc:	9113      	str	r1, [sp, #76]	; 0x4c
 801a0fe:	2800      	cmp	r0, #0
 801a100:	d03b      	beq.n	801a17a <on_request+0x8e>
 801a102:	461d      	mov	r5, r3
 801a104:	e001      	b.n	801a10a <on_request+0x1e>
 801a106:	6840      	ldr	r0, [r0, #4]
 801a108:	b3b8      	cbz	r0, 801a17a <on_request+0x8e>
 801a10a:	6884      	ldr	r4, [r0, #8]
 801a10c:	8b21      	ldrh	r1, [r4, #24]
 801a10e:	4291      	cmp	r1, r2
 801a110:	d1f9      	bne.n	801a106 <on_request+0x1a>
 801a112:	2248      	movs	r2, #72	; 0x48
 801a114:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801a118:	4668      	mov	r0, sp
 801a11a:	f000 fb4f 	bl	801a7bc <memcpy>
 801a11e:	f104 0320 	add.w	r3, r4, #32
 801a122:	cb0c      	ldmia	r3, {r2, r3}
 801a124:	4620      	mov	r0, r4
 801a126:	f7f6 fc5b 	bl	80109e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a12a:	4680      	mov	r8, r0
 801a12c:	b328      	cbz	r0, 801a17a <on_request+0x8e>
 801a12e:	4638      	mov	r0, r7
 801a130:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801a134:	4632      	mov	r2, r6
 801a136:	f107 0110 	add.w	r1, r7, #16
 801a13a:	f7fd ffab 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 801a13e:	b930      	cbnz	r0, 801a14e <on_request+0x62>
 801a140:	4810      	ldr	r0, [pc, #64]	; (801a184 <on_request+0x98>)
 801a142:	4641      	mov	r1, r8
 801a144:	b014      	add	sp, #80	; 0x50
 801a146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a14a:	f7fd b8c5 	b.w	80172d8 <put_memory>
 801a14e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a150:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 801a154:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 801a158:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 801a15c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a160:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a164:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a168:	f7fd fd84 	bl	8017c74 <rmw_uros_epoch_nanos>
 801a16c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801a170:	2303      	movs	r3, #3
 801a172:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a176:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801a17a:	b014      	add	sp, #80	; 0x50
 801a17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a180:	2001c7e4 	.word	0x2001c7e4
 801a184:	2001c804 	.word	0x2001c804

0801a188 <on_reply>:
 801a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a18c:	4821      	ldr	r0, [pc, #132]	; (801a214 <on_reply+0x8c>)
 801a18e:	b094      	sub	sp, #80	; 0x50
 801a190:	6800      	ldr	r0, [r0, #0]
 801a192:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801a194:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801a198:	9113      	str	r1, [sp, #76]	; 0x4c
 801a19a:	b3b8      	cbz	r0, 801a20c <on_reply+0x84>
 801a19c:	461d      	mov	r5, r3
 801a19e:	e001      	b.n	801a1a4 <on_reply+0x1c>
 801a1a0:	6840      	ldr	r0, [r0, #4]
 801a1a2:	b398      	cbz	r0, 801a20c <on_reply+0x84>
 801a1a4:	6884      	ldr	r4, [r0, #8]
 801a1a6:	8b21      	ldrh	r1, [r4, #24]
 801a1a8:	4291      	cmp	r1, r2
 801a1aa:	d1f9      	bne.n	801a1a0 <on_reply+0x18>
 801a1ac:	2248      	movs	r2, #72	; 0x48
 801a1ae:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801a1b2:	4668      	mov	r0, sp
 801a1b4:	f000 fb02 	bl	801a7bc <memcpy>
 801a1b8:	f104 0320 	add.w	r3, r4, #32
 801a1bc:	cb0c      	ldmia	r3, {r2, r3}
 801a1be:	4620      	mov	r0, r4
 801a1c0:	f7f6 fc0e 	bl	80109e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a1c4:	4680      	mov	r8, r0
 801a1c6:	b308      	cbz	r0, 801a20c <on_reply+0x84>
 801a1c8:	4638      	mov	r0, r7
 801a1ca:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801a1ce:	4632      	mov	r2, r6
 801a1d0:	f107 0110 	add.w	r1, r7, #16
 801a1d4:	f7fd ff5e 	bl	8018094 <ucdr_deserialize_array_uint8_t>
 801a1d8:	b930      	cbnz	r0, 801a1e8 <on_reply+0x60>
 801a1da:	480f      	ldr	r0, [pc, #60]	; (801a218 <on_reply+0x90>)
 801a1dc:	4641      	mov	r1, r8
 801a1de:	b014      	add	sp, #80	; 0x50
 801a1e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a1e4:	f7fd b878 	b.w	80172d8 <put_memory>
 801a1e8:	2200      	movs	r2, #0
 801a1ea:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 801a1ee:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 801a1f2:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 801a1f6:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 801a1fa:	f7fd fd3b 	bl	8017c74 <rmw_uros_epoch_nanos>
 801a1fe:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801a202:	2304      	movs	r3, #4
 801a204:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a208:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801a20c:	b014      	add	sp, #80	; 0x50
 801a20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a212:	bf00      	nop
 801a214:	20017ef8 	.word	0x20017ef8
 801a218:	2001c804 	.word	0x2001c804

0801a21c <rmw_destroy_client>:
 801a21c:	b570      	push	{r4, r5, r6, lr}
 801a21e:	b128      	cbz	r0, 801a22c <rmw_destroy_client+0x10>
 801a220:	4604      	mov	r4, r0
 801a222:	6800      	ldr	r0, [r0, #0]
 801a224:	460d      	mov	r5, r1
 801a226:	f7f6 fcab 	bl	8010b80 <is_uxrce_rmw_identifier_valid>
 801a22a:	b910      	cbnz	r0, 801a232 <rmw_destroy_client+0x16>
 801a22c:	2401      	movs	r4, #1
 801a22e:	4620      	mov	r0, r4
 801a230:	bd70      	pop	{r4, r5, r6, pc}
 801a232:	6863      	ldr	r3, [r4, #4]
 801a234:	2b00      	cmp	r3, #0
 801a236:	d0f9      	beq.n	801a22c <rmw_destroy_client+0x10>
 801a238:	2d00      	cmp	r5, #0
 801a23a:	d0f7      	beq.n	801a22c <rmw_destroy_client+0x10>
 801a23c:	6828      	ldr	r0, [r5, #0]
 801a23e:	f7f6 fc9f 	bl	8010b80 <is_uxrce_rmw_identifier_valid>
 801a242:	2800      	cmp	r0, #0
 801a244:	d0f2      	beq.n	801a22c <rmw_destroy_client+0x10>
 801a246:	686e      	ldr	r6, [r5, #4]
 801a248:	2e00      	cmp	r6, #0
 801a24a:	d0ef      	beq.n	801a22c <rmw_destroy_client+0x10>
 801a24c:	6864      	ldr	r4, [r4, #4]
 801a24e:	6932      	ldr	r2, [r6, #16]
 801a250:	6920      	ldr	r0, [r4, #16]
 801a252:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a256:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a25a:	6819      	ldr	r1, [r3, #0]
 801a25c:	f7fe fe38 	bl	8018ed0 <uxr_buffer_cancel_data>
 801a260:	4602      	mov	r2, r0
 801a262:	6920      	ldr	r0, [r4, #16]
 801a264:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a268:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a26c:	f7f6 fc08 	bl	8010a80 <run_xrce_session>
 801a270:	6920      	ldr	r0, [r4, #16]
 801a272:	6932      	ldr	r2, [r6, #16]
 801a274:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a278:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a27c:	6819      	ldr	r1, [r3, #0]
 801a27e:	f7f9 f80b 	bl	8013298 <uxr_buffer_delete_entity>
 801a282:	4602      	mov	r2, r0
 801a284:	6920      	ldr	r0, [r4, #16]
 801a286:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a28a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a28e:	f7f6 fbf7 	bl	8010a80 <run_xrce_session>
 801a292:	2800      	cmp	r0, #0
 801a294:	4628      	mov	r0, r5
 801a296:	bf14      	ite	ne
 801a298:	2400      	movne	r4, #0
 801a29a:	2402      	moveq	r4, #2
 801a29c:	f7f6 fb7e 	bl	801099c <rmw_uxrce_fini_client_memory>
 801a2a0:	e7c5      	b.n	801a22e <rmw_destroy_client+0x12>
 801a2a2:	bf00      	nop

0801a2a4 <rmw_create_guard_condition>:
 801a2a4:	b538      	push	{r3, r4, r5, lr}
 801a2a6:	4605      	mov	r5, r0
 801a2a8:	4807      	ldr	r0, [pc, #28]	; (801a2c8 <rmw_create_guard_condition+0x24>)
 801a2aa:	f7fd f805 	bl	80172b8 <get_memory>
 801a2ae:	b148      	cbz	r0, 801a2c4 <rmw_create_guard_condition+0x20>
 801a2b0:	6884      	ldr	r4, [r0, #8]
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	7423      	strb	r3, [r4, #16]
 801a2b6:	61e5      	str	r5, [r4, #28]
 801a2b8:	f7fd f822 	bl	8017300 <rmw_get_implementation_identifier>
 801a2bc:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801a2c0:	f104 0014 	add.w	r0, r4, #20
 801a2c4:	bd38      	pop	{r3, r4, r5, pc}
 801a2c6:	bf00      	nop
 801a2c8:	2001c7a4 	.word	0x2001c7a4

0801a2cc <rmw_destroy_guard_condition>:
 801a2cc:	b508      	push	{r3, lr}
 801a2ce:	4b08      	ldr	r3, [pc, #32]	; (801a2f0 <rmw_destroy_guard_condition+0x24>)
 801a2d0:	6819      	ldr	r1, [r3, #0]
 801a2d2:	b911      	cbnz	r1, 801a2da <rmw_destroy_guard_condition+0xe>
 801a2d4:	e00a      	b.n	801a2ec <rmw_destroy_guard_condition+0x20>
 801a2d6:	6849      	ldr	r1, [r1, #4]
 801a2d8:	b141      	cbz	r1, 801a2ec <rmw_destroy_guard_condition+0x20>
 801a2da:	688b      	ldr	r3, [r1, #8]
 801a2dc:	3314      	adds	r3, #20
 801a2de:	4298      	cmp	r0, r3
 801a2e0:	d1f9      	bne.n	801a2d6 <rmw_destroy_guard_condition+0xa>
 801a2e2:	4803      	ldr	r0, [pc, #12]	; (801a2f0 <rmw_destroy_guard_condition+0x24>)
 801a2e4:	f7fc fff8 	bl	80172d8 <put_memory>
 801a2e8:	2000      	movs	r0, #0
 801a2ea:	bd08      	pop	{r3, pc}
 801a2ec:	2001      	movs	r0, #1
 801a2ee:	bd08      	pop	{r3, pc}
 801a2f0:	2001c7a4 	.word	0x2001c7a4

0801a2f4 <rosidl_runtime_c__String__init>:
 801a2f4:	b510      	push	{r4, lr}
 801a2f6:	4604      	mov	r4, r0
 801a2f8:	b086      	sub	sp, #24
 801a2fa:	b170      	cbz	r0, 801a31a <rosidl_runtime_c__String__init+0x26>
 801a2fc:	a801      	add	r0, sp, #4
 801a2fe:	f7f5 ff8d 	bl	801021c <rcutils_get_default_allocator>
 801a302:	9b01      	ldr	r3, [sp, #4]
 801a304:	9905      	ldr	r1, [sp, #20]
 801a306:	2001      	movs	r0, #1
 801a308:	4798      	blx	r3
 801a30a:	6020      	str	r0, [r4, #0]
 801a30c:	b128      	cbz	r0, 801a31a <rosidl_runtime_c__String__init+0x26>
 801a30e:	2100      	movs	r1, #0
 801a310:	2201      	movs	r2, #1
 801a312:	7001      	strb	r1, [r0, #0]
 801a314:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801a318:	4610      	mov	r0, r2
 801a31a:	b006      	add	sp, #24
 801a31c:	bd10      	pop	{r4, pc}
 801a31e:	bf00      	nop

0801a320 <rosidl_runtime_c__String__fini>:
 801a320:	b320      	cbz	r0, 801a36c <rosidl_runtime_c__String__fini+0x4c>
 801a322:	b510      	push	{r4, lr}
 801a324:	6803      	ldr	r3, [r0, #0]
 801a326:	b086      	sub	sp, #24
 801a328:	4604      	mov	r4, r0
 801a32a:	b173      	cbz	r3, 801a34a <rosidl_runtime_c__String__fini+0x2a>
 801a32c:	6883      	ldr	r3, [r0, #8]
 801a32e:	b1f3      	cbz	r3, 801a36e <rosidl_runtime_c__String__fini+0x4e>
 801a330:	a801      	add	r0, sp, #4
 801a332:	f7f5 ff73 	bl	801021c <rcutils_get_default_allocator>
 801a336:	9b02      	ldr	r3, [sp, #8]
 801a338:	9905      	ldr	r1, [sp, #20]
 801a33a:	6820      	ldr	r0, [r4, #0]
 801a33c:	4798      	blx	r3
 801a33e:	2300      	movs	r3, #0
 801a340:	e9c4 3300 	strd	r3, r3, [r4]
 801a344:	60a3      	str	r3, [r4, #8]
 801a346:	b006      	add	sp, #24
 801a348:	bd10      	pop	{r4, pc}
 801a34a:	6843      	ldr	r3, [r0, #4]
 801a34c:	b9db      	cbnz	r3, 801a386 <rosidl_runtime_c__String__fini+0x66>
 801a34e:	6883      	ldr	r3, [r0, #8]
 801a350:	2b00      	cmp	r3, #0
 801a352:	d0f8      	beq.n	801a346 <rosidl_runtime_c__String__fini+0x26>
 801a354:	4b12      	ldr	r3, [pc, #72]	; (801a3a0 <rosidl_runtime_c__String__fini+0x80>)
 801a356:	4813      	ldr	r0, [pc, #76]	; (801a3a4 <rosidl_runtime_c__String__fini+0x84>)
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	2251      	movs	r2, #81	; 0x51
 801a35c:	68db      	ldr	r3, [r3, #12]
 801a35e:	2101      	movs	r1, #1
 801a360:	f000 f99e 	bl	801a6a0 <fwrite>
 801a364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a368:	f000 f830 	bl	801a3cc <exit>
 801a36c:	4770      	bx	lr
 801a36e:	4b0c      	ldr	r3, [pc, #48]	; (801a3a0 <rosidl_runtime_c__String__fini+0x80>)
 801a370:	480d      	ldr	r0, [pc, #52]	; (801a3a8 <rosidl_runtime_c__String__fini+0x88>)
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	224c      	movs	r2, #76	; 0x4c
 801a376:	68db      	ldr	r3, [r3, #12]
 801a378:	2101      	movs	r1, #1
 801a37a:	f000 f991 	bl	801a6a0 <fwrite>
 801a37e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a382:	f000 f823 	bl	801a3cc <exit>
 801a386:	4b06      	ldr	r3, [pc, #24]	; (801a3a0 <rosidl_runtime_c__String__fini+0x80>)
 801a388:	4808      	ldr	r0, [pc, #32]	; (801a3ac <rosidl_runtime_c__String__fini+0x8c>)
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	224e      	movs	r2, #78	; 0x4e
 801a38e:	68db      	ldr	r3, [r3, #12]
 801a390:	2101      	movs	r1, #1
 801a392:	f000 f985 	bl	801a6a0 <fwrite>
 801a396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a39a:	f000 f817 	bl	801a3cc <exit>
 801a39e:	bf00      	nop
 801a3a0:	20000884 	.word	0x20000884
 801a3a4:	0801cdcc 	.word	0x0801cdcc
 801a3a8:	0801cd2c 	.word	0x0801cd2c
 801a3ac:	0801cd7c 	.word	0x0801cd7c

0801a3b0 <calloc>:
 801a3b0:	4b02      	ldr	r3, [pc, #8]	; (801a3bc <calloc+0xc>)
 801a3b2:	460a      	mov	r2, r1
 801a3b4:	4601      	mov	r1, r0
 801a3b6:	6818      	ldr	r0, [r3, #0]
 801a3b8:	f000 ba16 	b.w	801a7e8 <_calloc_r>
 801a3bc:	20000884 	.word	0x20000884

0801a3c0 <__errno>:
 801a3c0:	4b01      	ldr	r3, [pc, #4]	; (801a3c8 <__errno+0x8>)
 801a3c2:	6818      	ldr	r0, [r3, #0]
 801a3c4:	4770      	bx	lr
 801a3c6:	bf00      	nop
 801a3c8:	20000884 	.word	0x20000884

0801a3cc <exit>:
 801a3cc:	b508      	push	{r3, lr}
 801a3ce:	4b07      	ldr	r3, [pc, #28]	; (801a3ec <exit+0x20>)
 801a3d0:	4604      	mov	r4, r0
 801a3d2:	b113      	cbz	r3, 801a3da <exit+0xe>
 801a3d4:	2100      	movs	r1, #0
 801a3d6:	f3af 8000 	nop.w
 801a3da:	4b05      	ldr	r3, [pc, #20]	; (801a3f0 <exit+0x24>)
 801a3dc:	6818      	ldr	r0, [r3, #0]
 801a3de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a3e0:	b103      	cbz	r3, 801a3e4 <exit+0x18>
 801a3e2:	4798      	blx	r3
 801a3e4:	4620      	mov	r0, r4
 801a3e6:	f7e7 ff45 	bl	8002274 <_exit>
 801a3ea:	bf00      	nop
 801a3ec:	00000000 	.word	0x00000000
 801a3f0:	0801cf80 	.word	0x0801cf80

0801a3f4 <std>:
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	b510      	push	{r4, lr}
 801a3f8:	4604      	mov	r4, r0
 801a3fa:	e9c0 3300 	strd	r3, r3, [r0]
 801a3fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a402:	6083      	str	r3, [r0, #8]
 801a404:	8181      	strh	r1, [r0, #12]
 801a406:	6643      	str	r3, [r0, #100]	; 0x64
 801a408:	81c2      	strh	r2, [r0, #14]
 801a40a:	6183      	str	r3, [r0, #24]
 801a40c:	4619      	mov	r1, r3
 801a40e:	2208      	movs	r2, #8
 801a410:	305c      	adds	r0, #92	; 0x5c
 801a412:	f000 f9e1 	bl	801a7d8 <memset>
 801a416:	4b05      	ldr	r3, [pc, #20]	; (801a42c <std+0x38>)
 801a418:	6263      	str	r3, [r4, #36]	; 0x24
 801a41a:	4b05      	ldr	r3, [pc, #20]	; (801a430 <std+0x3c>)
 801a41c:	62a3      	str	r3, [r4, #40]	; 0x28
 801a41e:	4b05      	ldr	r3, [pc, #20]	; (801a434 <std+0x40>)
 801a420:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a422:	4b05      	ldr	r3, [pc, #20]	; (801a438 <std+0x44>)
 801a424:	6224      	str	r4, [r4, #32]
 801a426:	6323      	str	r3, [r4, #48]	; 0x30
 801a428:	bd10      	pop	{r4, pc}
 801a42a:	bf00      	nop
 801a42c:	0801ac49 	.word	0x0801ac49
 801a430:	0801ac6b 	.word	0x0801ac6b
 801a434:	0801aca3 	.word	0x0801aca3
 801a438:	0801acc7 	.word	0x0801acc7

0801a43c <_cleanup_r>:
 801a43c:	4901      	ldr	r1, [pc, #4]	; (801a444 <_cleanup_r+0x8>)
 801a43e:	f000 b8af 	b.w	801a5a0 <_fwalk_reent>
 801a442:	bf00      	nop
 801a444:	0801b1dd 	.word	0x0801b1dd

0801a448 <__sfmoreglue>:
 801a448:	b570      	push	{r4, r5, r6, lr}
 801a44a:	2268      	movs	r2, #104	; 0x68
 801a44c:	1e4d      	subs	r5, r1, #1
 801a44e:	4355      	muls	r5, r2
 801a450:	460e      	mov	r6, r1
 801a452:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a456:	f000 fa49 	bl	801a8ec <_malloc_r>
 801a45a:	4604      	mov	r4, r0
 801a45c:	b140      	cbz	r0, 801a470 <__sfmoreglue+0x28>
 801a45e:	2100      	movs	r1, #0
 801a460:	e9c0 1600 	strd	r1, r6, [r0]
 801a464:	300c      	adds	r0, #12
 801a466:	60a0      	str	r0, [r4, #8]
 801a468:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a46c:	f000 f9b4 	bl	801a7d8 <memset>
 801a470:	4620      	mov	r0, r4
 801a472:	bd70      	pop	{r4, r5, r6, pc}

0801a474 <__sfp_lock_acquire>:
 801a474:	4801      	ldr	r0, [pc, #4]	; (801a47c <__sfp_lock_acquire+0x8>)
 801a476:	f000 b98e 	b.w	801a796 <__retarget_lock_acquire_recursive>
 801a47a:	bf00      	nop
 801a47c:	2001c95a 	.word	0x2001c95a

0801a480 <__sfp_lock_release>:
 801a480:	4801      	ldr	r0, [pc, #4]	; (801a488 <__sfp_lock_release+0x8>)
 801a482:	f000 b989 	b.w	801a798 <__retarget_lock_release_recursive>
 801a486:	bf00      	nop
 801a488:	2001c95a 	.word	0x2001c95a

0801a48c <__sinit_lock_acquire>:
 801a48c:	4801      	ldr	r0, [pc, #4]	; (801a494 <__sinit_lock_acquire+0x8>)
 801a48e:	f000 b982 	b.w	801a796 <__retarget_lock_acquire_recursive>
 801a492:	bf00      	nop
 801a494:	2001c95b 	.word	0x2001c95b

0801a498 <__sinit_lock_release>:
 801a498:	4801      	ldr	r0, [pc, #4]	; (801a4a0 <__sinit_lock_release+0x8>)
 801a49a:	f000 b97d 	b.w	801a798 <__retarget_lock_release_recursive>
 801a49e:	bf00      	nop
 801a4a0:	2001c95b 	.word	0x2001c95b

0801a4a4 <__sinit>:
 801a4a4:	b510      	push	{r4, lr}
 801a4a6:	4604      	mov	r4, r0
 801a4a8:	f7ff fff0 	bl	801a48c <__sinit_lock_acquire>
 801a4ac:	69a3      	ldr	r3, [r4, #24]
 801a4ae:	b11b      	cbz	r3, 801a4b8 <__sinit+0x14>
 801a4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4b4:	f7ff bff0 	b.w	801a498 <__sinit_lock_release>
 801a4b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a4bc:	6523      	str	r3, [r4, #80]	; 0x50
 801a4be:	4b13      	ldr	r3, [pc, #76]	; (801a50c <__sinit+0x68>)
 801a4c0:	4a13      	ldr	r2, [pc, #76]	; (801a510 <__sinit+0x6c>)
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	62a2      	str	r2, [r4, #40]	; 0x28
 801a4c6:	42a3      	cmp	r3, r4
 801a4c8:	bf04      	itt	eq
 801a4ca:	2301      	moveq	r3, #1
 801a4cc:	61a3      	streq	r3, [r4, #24]
 801a4ce:	4620      	mov	r0, r4
 801a4d0:	f000 f820 	bl	801a514 <__sfp>
 801a4d4:	6060      	str	r0, [r4, #4]
 801a4d6:	4620      	mov	r0, r4
 801a4d8:	f000 f81c 	bl	801a514 <__sfp>
 801a4dc:	60a0      	str	r0, [r4, #8]
 801a4de:	4620      	mov	r0, r4
 801a4e0:	f000 f818 	bl	801a514 <__sfp>
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	60e0      	str	r0, [r4, #12]
 801a4e8:	2104      	movs	r1, #4
 801a4ea:	6860      	ldr	r0, [r4, #4]
 801a4ec:	f7ff ff82 	bl	801a3f4 <std>
 801a4f0:	68a0      	ldr	r0, [r4, #8]
 801a4f2:	2201      	movs	r2, #1
 801a4f4:	2109      	movs	r1, #9
 801a4f6:	f7ff ff7d 	bl	801a3f4 <std>
 801a4fa:	68e0      	ldr	r0, [r4, #12]
 801a4fc:	2202      	movs	r2, #2
 801a4fe:	2112      	movs	r1, #18
 801a500:	f7ff ff78 	bl	801a3f4 <std>
 801a504:	2301      	movs	r3, #1
 801a506:	61a3      	str	r3, [r4, #24]
 801a508:	e7d2      	b.n	801a4b0 <__sinit+0xc>
 801a50a:	bf00      	nop
 801a50c:	0801cf80 	.word	0x0801cf80
 801a510:	0801a43d 	.word	0x0801a43d

0801a514 <__sfp>:
 801a514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a516:	4607      	mov	r7, r0
 801a518:	f7ff ffac 	bl	801a474 <__sfp_lock_acquire>
 801a51c:	4b1e      	ldr	r3, [pc, #120]	; (801a598 <__sfp+0x84>)
 801a51e:	681e      	ldr	r6, [r3, #0]
 801a520:	69b3      	ldr	r3, [r6, #24]
 801a522:	b913      	cbnz	r3, 801a52a <__sfp+0x16>
 801a524:	4630      	mov	r0, r6
 801a526:	f7ff ffbd 	bl	801a4a4 <__sinit>
 801a52a:	3648      	adds	r6, #72	; 0x48
 801a52c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a530:	3b01      	subs	r3, #1
 801a532:	d503      	bpl.n	801a53c <__sfp+0x28>
 801a534:	6833      	ldr	r3, [r6, #0]
 801a536:	b30b      	cbz	r3, 801a57c <__sfp+0x68>
 801a538:	6836      	ldr	r6, [r6, #0]
 801a53a:	e7f7      	b.n	801a52c <__sfp+0x18>
 801a53c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a540:	b9d5      	cbnz	r5, 801a578 <__sfp+0x64>
 801a542:	4b16      	ldr	r3, [pc, #88]	; (801a59c <__sfp+0x88>)
 801a544:	60e3      	str	r3, [r4, #12]
 801a546:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a54a:	6665      	str	r5, [r4, #100]	; 0x64
 801a54c:	f000 f922 	bl	801a794 <__retarget_lock_init_recursive>
 801a550:	f7ff ff96 	bl	801a480 <__sfp_lock_release>
 801a554:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a558:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a55c:	6025      	str	r5, [r4, #0]
 801a55e:	61a5      	str	r5, [r4, #24]
 801a560:	2208      	movs	r2, #8
 801a562:	4629      	mov	r1, r5
 801a564:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a568:	f000 f936 	bl	801a7d8 <memset>
 801a56c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a570:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a574:	4620      	mov	r0, r4
 801a576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a578:	3468      	adds	r4, #104	; 0x68
 801a57a:	e7d9      	b.n	801a530 <__sfp+0x1c>
 801a57c:	2104      	movs	r1, #4
 801a57e:	4638      	mov	r0, r7
 801a580:	f7ff ff62 	bl	801a448 <__sfmoreglue>
 801a584:	4604      	mov	r4, r0
 801a586:	6030      	str	r0, [r6, #0]
 801a588:	2800      	cmp	r0, #0
 801a58a:	d1d5      	bne.n	801a538 <__sfp+0x24>
 801a58c:	f7ff ff78 	bl	801a480 <__sfp_lock_release>
 801a590:	230c      	movs	r3, #12
 801a592:	603b      	str	r3, [r7, #0]
 801a594:	e7ee      	b.n	801a574 <__sfp+0x60>
 801a596:	bf00      	nop
 801a598:	0801cf80 	.word	0x0801cf80
 801a59c:	ffff0001 	.word	0xffff0001

0801a5a0 <_fwalk_reent>:
 801a5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5a4:	4606      	mov	r6, r0
 801a5a6:	4688      	mov	r8, r1
 801a5a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a5ac:	2700      	movs	r7, #0
 801a5ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a5b2:	f1b9 0901 	subs.w	r9, r9, #1
 801a5b6:	d505      	bpl.n	801a5c4 <_fwalk_reent+0x24>
 801a5b8:	6824      	ldr	r4, [r4, #0]
 801a5ba:	2c00      	cmp	r4, #0
 801a5bc:	d1f7      	bne.n	801a5ae <_fwalk_reent+0xe>
 801a5be:	4638      	mov	r0, r7
 801a5c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a5c4:	89ab      	ldrh	r3, [r5, #12]
 801a5c6:	2b01      	cmp	r3, #1
 801a5c8:	d907      	bls.n	801a5da <_fwalk_reent+0x3a>
 801a5ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a5ce:	3301      	adds	r3, #1
 801a5d0:	d003      	beq.n	801a5da <_fwalk_reent+0x3a>
 801a5d2:	4629      	mov	r1, r5
 801a5d4:	4630      	mov	r0, r6
 801a5d6:	47c0      	blx	r8
 801a5d8:	4307      	orrs	r7, r0
 801a5da:	3568      	adds	r5, #104	; 0x68
 801a5dc:	e7e9      	b.n	801a5b2 <_fwalk_reent+0x12>
	...

0801a5e0 <_fwrite_r>:
 801a5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a5e4:	9c08      	ldr	r4, [sp, #32]
 801a5e6:	468a      	mov	sl, r1
 801a5e8:	4690      	mov	r8, r2
 801a5ea:	fb02 f903 	mul.w	r9, r2, r3
 801a5ee:	4605      	mov	r5, r0
 801a5f0:	b118      	cbz	r0, 801a5fa <_fwrite_r+0x1a>
 801a5f2:	6983      	ldr	r3, [r0, #24]
 801a5f4:	b90b      	cbnz	r3, 801a5fa <_fwrite_r+0x1a>
 801a5f6:	f7ff ff55 	bl	801a4a4 <__sinit>
 801a5fa:	4b26      	ldr	r3, [pc, #152]	; (801a694 <_fwrite_r+0xb4>)
 801a5fc:	429c      	cmp	r4, r3
 801a5fe:	d123      	bne.n	801a648 <_fwrite_r+0x68>
 801a600:	686c      	ldr	r4, [r5, #4]
 801a602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a604:	07de      	lsls	r6, r3, #31
 801a606:	d405      	bmi.n	801a614 <_fwrite_r+0x34>
 801a608:	89a3      	ldrh	r3, [r4, #12]
 801a60a:	0598      	lsls	r0, r3, #22
 801a60c:	d402      	bmi.n	801a614 <_fwrite_r+0x34>
 801a60e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a610:	f000 f8c1 	bl	801a796 <__retarget_lock_acquire_recursive>
 801a614:	89a3      	ldrh	r3, [r4, #12]
 801a616:	0719      	lsls	r1, r3, #28
 801a618:	d520      	bpl.n	801a65c <_fwrite_r+0x7c>
 801a61a:	6923      	ldr	r3, [r4, #16]
 801a61c:	b1f3      	cbz	r3, 801a65c <_fwrite_r+0x7c>
 801a61e:	2600      	movs	r6, #0
 801a620:	454e      	cmp	r6, r9
 801a622:	d029      	beq.n	801a678 <_fwrite_r+0x98>
 801a624:	68a7      	ldr	r7, [r4, #8]
 801a626:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801a62a:	3f01      	subs	r7, #1
 801a62c:	2f00      	cmp	r7, #0
 801a62e:	60a7      	str	r7, [r4, #8]
 801a630:	da04      	bge.n	801a63c <_fwrite_r+0x5c>
 801a632:	69a3      	ldr	r3, [r4, #24]
 801a634:	429f      	cmp	r7, r3
 801a636:	db19      	blt.n	801a66c <_fwrite_r+0x8c>
 801a638:	290a      	cmp	r1, #10
 801a63a:	d017      	beq.n	801a66c <_fwrite_r+0x8c>
 801a63c:	6823      	ldr	r3, [r4, #0]
 801a63e:	1c5a      	adds	r2, r3, #1
 801a640:	6022      	str	r2, [r4, #0]
 801a642:	7019      	strb	r1, [r3, #0]
 801a644:	3601      	adds	r6, #1
 801a646:	e7eb      	b.n	801a620 <_fwrite_r+0x40>
 801a648:	4b13      	ldr	r3, [pc, #76]	; (801a698 <_fwrite_r+0xb8>)
 801a64a:	429c      	cmp	r4, r3
 801a64c:	d101      	bne.n	801a652 <_fwrite_r+0x72>
 801a64e:	68ac      	ldr	r4, [r5, #8]
 801a650:	e7d7      	b.n	801a602 <_fwrite_r+0x22>
 801a652:	4b12      	ldr	r3, [pc, #72]	; (801a69c <_fwrite_r+0xbc>)
 801a654:	429c      	cmp	r4, r3
 801a656:	bf08      	it	eq
 801a658:	68ec      	ldreq	r4, [r5, #12]
 801a65a:	e7d2      	b.n	801a602 <_fwrite_r+0x22>
 801a65c:	4621      	mov	r1, r4
 801a65e:	4628      	mov	r0, r5
 801a660:	f000 fc8e 	bl	801af80 <__swsetup_r>
 801a664:	2800      	cmp	r0, #0
 801a666:	d0da      	beq.n	801a61e <_fwrite_r+0x3e>
 801a668:	2600      	movs	r6, #0
 801a66a:	e005      	b.n	801a678 <_fwrite_r+0x98>
 801a66c:	4622      	mov	r2, r4
 801a66e:	4628      	mov	r0, r5
 801a670:	f000 fc22 	bl	801aeb8 <__swbuf_r>
 801a674:	3001      	adds	r0, #1
 801a676:	d1e5      	bne.n	801a644 <_fwrite_r+0x64>
 801a678:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a67a:	07da      	lsls	r2, r3, #31
 801a67c:	d405      	bmi.n	801a68a <_fwrite_r+0xaa>
 801a67e:	89a3      	ldrh	r3, [r4, #12]
 801a680:	059b      	lsls	r3, r3, #22
 801a682:	d402      	bmi.n	801a68a <_fwrite_r+0xaa>
 801a684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a686:	f000 f887 	bl	801a798 <__retarget_lock_release_recursive>
 801a68a:	fbb6 f0f8 	udiv	r0, r6, r8
 801a68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a692:	bf00      	nop
 801a694:	0801cf40 	.word	0x0801cf40
 801a698:	0801cf60 	.word	0x0801cf60
 801a69c:	0801cf20 	.word	0x0801cf20

0801a6a0 <fwrite>:
 801a6a0:	b507      	push	{r0, r1, r2, lr}
 801a6a2:	9300      	str	r3, [sp, #0]
 801a6a4:	4613      	mov	r3, r2
 801a6a6:	460a      	mov	r2, r1
 801a6a8:	4601      	mov	r1, r0
 801a6aa:	4803      	ldr	r0, [pc, #12]	; (801a6b8 <fwrite+0x18>)
 801a6ac:	6800      	ldr	r0, [r0, #0]
 801a6ae:	f7ff ff97 	bl	801a5e0 <_fwrite_r>
 801a6b2:	b003      	add	sp, #12
 801a6b4:	f85d fb04 	ldr.w	pc, [sp], #4
 801a6b8:	20000884 	.word	0x20000884

0801a6bc <getenv>:
 801a6bc:	b507      	push	{r0, r1, r2, lr}
 801a6be:	4b04      	ldr	r3, [pc, #16]	; (801a6d0 <getenv+0x14>)
 801a6c0:	4601      	mov	r1, r0
 801a6c2:	aa01      	add	r2, sp, #4
 801a6c4:	6818      	ldr	r0, [r3, #0]
 801a6c6:	f000 f805 	bl	801a6d4 <_findenv_r>
 801a6ca:	b003      	add	sp, #12
 801a6cc:	f85d fb04 	ldr.w	pc, [sp], #4
 801a6d0:	20000884 	.word	0x20000884

0801a6d4 <_findenv_r>:
 801a6d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6d8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801a748 <_findenv_r+0x74>
 801a6dc:	4607      	mov	r7, r0
 801a6de:	4689      	mov	r9, r1
 801a6e0:	4616      	mov	r6, r2
 801a6e2:	f000 fce9 	bl	801b0b8 <__env_lock>
 801a6e6:	f8da 4000 	ldr.w	r4, [sl]
 801a6ea:	b134      	cbz	r4, 801a6fa <_findenv_r+0x26>
 801a6ec:	464b      	mov	r3, r9
 801a6ee:	4698      	mov	r8, r3
 801a6f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a6f4:	b13a      	cbz	r2, 801a706 <_findenv_r+0x32>
 801a6f6:	2a3d      	cmp	r2, #61	; 0x3d
 801a6f8:	d1f9      	bne.n	801a6ee <_findenv_r+0x1a>
 801a6fa:	4638      	mov	r0, r7
 801a6fc:	f000 fce2 	bl	801b0c4 <__env_unlock>
 801a700:	2000      	movs	r0, #0
 801a702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a706:	eba8 0809 	sub.w	r8, r8, r9
 801a70a:	46a3      	mov	fp, r4
 801a70c:	f854 0b04 	ldr.w	r0, [r4], #4
 801a710:	2800      	cmp	r0, #0
 801a712:	d0f2      	beq.n	801a6fa <_findenv_r+0x26>
 801a714:	4642      	mov	r2, r8
 801a716:	4649      	mov	r1, r9
 801a718:	f000 faee 	bl	801acf8 <strncmp>
 801a71c:	2800      	cmp	r0, #0
 801a71e:	d1f4      	bne.n	801a70a <_findenv_r+0x36>
 801a720:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a724:	eb03 0508 	add.w	r5, r3, r8
 801a728:	f813 3008 	ldrb.w	r3, [r3, r8]
 801a72c:	2b3d      	cmp	r3, #61	; 0x3d
 801a72e:	d1ec      	bne.n	801a70a <_findenv_r+0x36>
 801a730:	f8da 3000 	ldr.w	r3, [sl]
 801a734:	ebab 0303 	sub.w	r3, fp, r3
 801a738:	109b      	asrs	r3, r3, #2
 801a73a:	4638      	mov	r0, r7
 801a73c:	6033      	str	r3, [r6, #0]
 801a73e:	f000 fcc1 	bl	801b0c4 <__env_unlock>
 801a742:	1c68      	adds	r0, r5, #1
 801a744:	e7dd      	b.n	801a702 <_findenv_r+0x2e>
 801a746:	bf00      	nop
 801a748:	20000000 	.word	0x20000000

0801a74c <__libc_init_array>:
 801a74c:	b570      	push	{r4, r5, r6, lr}
 801a74e:	4d0d      	ldr	r5, [pc, #52]	; (801a784 <__libc_init_array+0x38>)
 801a750:	4c0d      	ldr	r4, [pc, #52]	; (801a788 <__libc_init_array+0x3c>)
 801a752:	1b64      	subs	r4, r4, r5
 801a754:	10a4      	asrs	r4, r4, #2
 801a756:	2600      	movs	r6, #0
 801a758:	42a6      	cmp	r6, r4
 801a75a:	d109      	bne.n	801a770 <__libc_init_array+0x24>
 801a75c:	4d0b      	ldr	r5, [pc, #44]	; (801a78c <__libc_init_array+0x40>)
 801a75e:	4c0c      	ldr	r4, [pc, #48]	; (801a790 <__libc_init_array+0x44>)
 801a760:	f001 fb28 	bl	801bdb4 <_init>
 801a764:	1b64      	subs	r4, r4, r5
 801a766:	10a4      	asrs	r4, r4, #2
 801a768:	2600      	movs	r6, #0
 801a76a:	42a6      	cmp	r6, r4
 801a76c:	d105      	bne.n	801a77a <__libc_init_array+0x2e>
 801a76e:	bd70      	pop	{r4, r5, r6, pc}
 801a770:	f855 3b04 	ldr.w	r3, [r5], #4
 801a774:	4798      	blx	r3
 801a776:	3601      	adds	r6, #1
 801a778:	e7ee      	b.n	801a758 <__libc_init_array+0xc>
 801a77a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a77e:	4798      	blx	r3
 801a780:	3601      	adds	r6, #1
 801a782:	e7f2      	b.n	801a76a <__libc_init_array+0x1e>
 801a784:	0801d070 	.word	0x0801d070
 801a788:	0801d070 	.word	0x0801d070
 801a78c:	0801d070 	.word	0x0801d070
 801a790:	0801d084 	.word	0x0801d084

0801a794 <__retarget_lock_init_recursive>:
 801a794:	4770      	bx	lr

0801a796 <__retarget_lock_acquire_recursive>:
 801a796:	4770      	bx	lr

0801a798 <__retarget_lock_release_recursive>:
 801a798:	4770      	bx	lr
	...

0801a79c <malloc>:
 801a79c:	4b02      	ldr	r3, [pc, #8]	; (801a7a8 <malloc+0xc>)
 801a79e:	4601      	mov	r1, r0
 801a7a0:	6818      	ldr	r0, [r3, #0]
 801a7a2:	f000 b8a3 	b.w	801a8ec <_malloc_r>
 801a7a6:	bf00      	nop
 801a7a8:	20000884 	.word	0x20000884

0801a7ac <free>:
 801a7ac:	4b02      	ldr	r3, [pc, #8]	; (801a7b8 <free+0xc>)
 801a7ae:	4601      	mov	r1, r0
 801a7b0:	6818      	ldr	r0, [r3, #0]
 801a7b2:	f000 b82f 	b.w	801a814 <_free_r>
 801a7b6:	bf00      	nop
 801a7b8:	20000884 	.word	0x20000884

0801a7bc <memcpy>:
 801a7bc:	440a      	add	r2, r1
 801a7be:	4291      	cmp	r1, r2
 801a7c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a7c4:	d100      	bne.n	801a7c8 <memcpy+0xc>
 801a7c6:	4770      	bx	lr
 801a7c8:	b510      	push	{r4, lr}
 801a7ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a7ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a7d2:	4291      	cmp	r1, r2
 801a7d4:	d1f9      	bne.n	801a7ca <memcpy+0xe>
 801a7d6:	bd10      	pop	{r4, pc}

0801a7d8 <memset>:
 801a7d8:	4402      	add	r2, r0
 801a7da:	4603      	mov	r3, r0
 801a7dc:	4293      	cmp	r3, r2
 801a7de:	d100      	bne.n	801a7e2 <memset+0xa>
 801a7e0:	4770      	bx	lr
 801a7e2:	f803 1b01 	strb.w	r1, [r3], #1
 801a7e6:	e7f9      	b.n	801a7dc <memset+0x4>

0801a7e8 <_calloc_r>:
 801a7e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a7ea:	fba1 2402 	umull	r2, r4, r1, r2
 801a7ee:	b94c      	cbnz	r4, 801a804 <_calloc_r+0x1c>
 801a7f0:	4611      	mov	r1, r2
 801a7f2:	9201      	str	r2, [sp, #4]
 801a7f4:	f000 f87a 	bl	801a8ec <_malloc_r>
 801a7f8:	9a01      	ldr	r2, [sp, #4]
 801a7fa:	4605      	mov	r5, r0
 801a7fc:	b930      	cbnz	r0, 801a80c <_calloc_r+0x24>
 801a7fe:	4628      	mov	r0, r5
 801a800:	b003      	add	sp, #12
 801a802:	bd30      	pop	{r4, r5, pc}
 801a804:	220c      	movs	r2, #12
 801a806:	6002      	str	r2, [r0, #0]
 801a808:	2500      	movs	r5, #0
 801a80a:	e7f8      	b.n	801a7fe <_calloc_r+0x16>
 801a80c:	4621      	mov	r1, r4
 801a80e:	f7ff ffe3 	bl	801a7d8 <memset>
 801a812:	e7f4      	b.n	801a7fe <_calloc_r+0x16>

0801a814 <_free_r>:
 801a814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a816:	2900      	cmp	r1, #0
 801a818:	d044      	beq.n	801a8a4 <_free_r+0x90>
 801a81a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a81e:	9001      	str	r0, [sp, #4]
 801a820:	2b00      	cmp	r3, #0
 801a822:	f1a1 0404 	sub.w	r4, r1, #4
 801a826:	bfb8      	it	lt
 801a828:	18e4      	addlt	r4, r4, r3
 801a82a:	f000 fd9d 	bl	801b368 <__malloc_lock>
 801a82e:	4a1e      	ldr	r2, [pc, #120]	; (801a8a8 <_free_r+0x94>)
 801a830:	9801      	ldr	r0, [sp, #4]
 801a832:	6813      	ldr	r3, [r2, #0]
 801a834:	b933      	cbnz	r3, 801a844 <_free_r+0x30>
 801a836:	6063      	str	r3, [r4, #4]
 801a838:	6014      	str	r4, [r2, #0]
 801a83a:	b003      	add	sp, #12
 801a83c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a840:	f000 bd98 	b.w	801b374 <__malloc_unlock>
 801a844:	42a3      	cmp	r3, r4
 801a846:	d908      	bls.n	801a85a <_free_r+0x46>
 801a848:	6825      	ldr	r5, [r4, #0]
 801a84a:	1961      	adds	r1, r4, r5
 801a84c:	428b      	cmp	r3, r1
 801a84e:	bf01      	itttt	eq
 801a850:	6819      	ldreq	r1, [r3, #0]
 801a852:	685b      	ldreq	r3, [r3, #4]
 801a854:	1949      	addeq	r1, r1, r5
 801a856:	6021      	streq	r1, [r4, #0]
 801a858:	e7ed      	b.n	801a836 <_free_r+0x22>
 801a85a:	461a      	mov	r2, r3
 801a85c:	685b      	ldr	r3, [r3, #4]
 801a85e:	b10b      	cbz	r3, 801a864 <_free_r+0x50>
 801a860:	42a3      	cmp	r3, r4
 801a862:	d9fa      	bls.n	801a85a <_free_r+0x46>
 801a864:	6811      	ldr	r1, [r2, #0]
 801a866:	1855      	adds	r5, r2, r1
 801a868:	42a5      	cmp	r5, r4
 801a86a:	d10b      	bne.n	801a884 <_free_r+0x70>
 801a86c:	6824      	ldr	r4, [r4, #0]
 801a86e:	4421      	add	r1, r4
 801a870:	1854      	adds	r4, r2, r1
 801a872:	42a3      	cmp	r3, r4
 801a874:	6011      	str	r1, [r2, #0]
 801a876:	d1e0      	bne.n	801a83a <_free_r+0x26>
 801a878:	681c      	ldr	r4, [r3, #0]
 801a87a:	685b      	ldr	r3, [r3, #4]
 801a87c:	6053      	str	r3, [r2, #4]
 801a87e:	4421      	add	r1, r4
 801a880:	6011      	str	r1, [r2, #0]
 801a882:	e7da      	b.n	801a83a <_free_r+0x26>
 801a884:	d902      	bls.n	801a88c <_free_r+0x78>
 801a886:	230c      	movs	r3, #12
 801a888:	6003      	str	r3, [r0, #0]
 801a88a:	e7d6      	b.n	801a83a <_free_r+0x26>
 801a88c:	6825      	ldr	r5, [r4, #0]
 801a88e:	1961      	adds	r1, r4, r5
 801a890:	428b      	cmp	r3, r1
 801a892:	bf04      	itt	eq
 801a894:	6819      	ldreq	r1, [r3, #0]
 801a896:	685b      	ldreq	r3, [r3, #4]
 801a898:	6063      	str	r3, [r4, #4]
 801a89a:	bf04      	itt	eq
 801a89c:	1949      	addeq	r1, r1, r5
 801a89e:	6021      	streq	r1, [r4, #0]
 801a8a0:	6054      	str	r4, [r2, #4]
 801a8a2:	e7ca      	b.n	801a83a <_free_r+0x26>
 801a8a4:	b003      	add	sp, #12
 801a8a6:	bd30      	pop	{r4, r5, pc}
 801a8a8:	2001c95c 	.word	0x2001c95c

0801a8ac <sbrk_aligned>:
 801a8ac:	b570      	push	{r4, r5, r6, lr}
 801a8ae:	4e0e      	ldr	r6, [pc, #56]	; (801a8e8 <sbrk_aligned+0x3c>)
 801a8b0:	460c      	mov	r4, r1
 801a8b2:	6831      	ldr	r1, [r6, #0]
 801a8b4:	4605      	mov	r5, r0
 801a8b6:	b911      	cbnz	r1, 801a8be <sbrk_aligned+0x12>
 801a8b8:	f000 f982 	bl	801abc0 <_sbrk_r>
 801a8bc:	6030      	str	r0, [r6, #0]
 801a8be:	4621      	mov	r1, r4
 801a8c0:	4628      	mov	r0, r5
 801a8c2:	f000 f97d 	bl	801abc0 <_sbrk_r>
 801a8c6:	1c43      	adds	r3, r0, #1
 801a8c8:	d00a      	beq.n	801a8e0 <sbrk_aligned+0x34>
 801a8ca:	1cc4      	adds	r4, r0, #3
 801a8cc:	f024 0403 	bic.w	r4, r4, #3
 801a8d0:	42a0      	cmp	r0, r4
 801a8d2:	d007      	beq.n	801a8e4 <sbrk_aligned+0x38>
 801a8d4:	1a21      	subs	r1, r4, r0
 801a8d6:	4628      	mov	r0, r5
 801a8d8:	f000 f972 	bl	801abc0 <_sbrk_r>
 801a8dc:	3001      	adds	r0, #1
 801a8de:	d101      	bne.n	801a8e4 <sbrk_aligned+0x38>
 801a8e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a8e4:	4620      	mov	r0, r4
 801a8e6:	bd70      	pop	{r4, r5, r6, pc}
 801a8e8:	2001c960 	.word	0x2001c960

0801a8ec <_malloc_r>:
 801a8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8f0:	1ccd      	adds	r5, r1, #3
 801a8f2:	f025 0503 	bic.w	r5, r5, #3
 801a8f6:	3508      	adds	r5, #8
 801a8f8:	2d0c      	cmp	r5, #12
 801a8fa:	bf38      	it	cc
 801a8fc:	250c      	movcc	r5, #12
 801a8fe:	2d00      	cmp	r5, #0
 801a900:	4607      	mov	r7, r0
 801a902:	db01      	blt.n	801a908 <_malloc_r+0x1c>
 801a904:	42a9      	cmp	r1, r5
 801a906:	d905      	bls.n	801a914 <_malloc_r+0x28>
 801a908:	230c      	movs	r3, #12
 801a90a:	603b      	str	r3, [r7, #0]
 801a90c:	2600      	movs	r6, #0
 801a90e:	4630      	mov	r0, r6
 801a910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a914:	4e2e      	ldr	r6, [pc, #184]	; (801a9d0 <_malloc_r+0xe4>)
 801a916:	f000 fd27 	bl	801b368 <__malloc_lock>
 801a91a:	6833      	ldr	r3, [r6, #0]
 801a91c:	461c      	mov	r4, r3
 801a91e:	bb34      	cbnz	r4, 801a96e <_malloc_r+0x82>
 801a920:	4629      	mov	r1, r5
 801a922:	4638      	mov	r0, r7
 801a924:	f7ff ffc2 	bl	801a8ac <sbrk_aligned>
 801a928:	1c43      	adds	r3, r0, #1
 801a92a:	4604      	mov	r4, r0
 801a92c:	d14d      	bne.n	801a9ca <_malloc_r+0xde>
 801a92e:	6834      	ldr	r4, [r6, #0]
 801a930:	4626      	mov	r6, r4
 801a932:	2e00      	cmp	r6, #0
 801a934:	d140      	bne.n	801a9b8 <_malloc_r+0xcc>
 801a936:	6823      	ldr	r3, [r4, #0]
 801a938:	4631      	mov	r1, r6
 801a93a:	4638      	mov	r0, r7
 801a93c:	eb04 0803 	add.w	r8, r4, r3
 801a940:	f000 f93e 	bl	801abc0 <_sbrk_r>
 801a944:	4580      	cmp	r8, r0
 801a946:	d13a      	bne.n	801a9be <_malloc_r+0xd2>
 801a948:	6821      	ldr	r1, [r4, #0]
 801a94a:	3503      	adds	r5, #3
 801a94c:	1a6d      	subs	r5, r5, r1
 801a94e:	f025 0503 	bic.w	r5, r5, #3
 801a952:	3508      	adds	r5, #8
 801a954:	2d0c      	cmp	r5, #12
 801a956:	bf38      	it	cc
 801a958:	250c      	movcc	r5, #12
 801a95a:	4629      	mov	r1, r5
 801a95c:	4638      	mov	r0, r7
 801a95e:	f7ff ffa5 	bl	801a8ac <sbrk_aligned>
 801a962:	3001      	adds	r0, #1
 801a964:	d02b      	beq.n	801a9be <_malloc_r+0xd2>
 801a966:	6823      	ldr	r3, [r4, #0]
 801a968:	442b      	add	r3, r5
 801a96a:	6023      	str	r3, [r4, #0]
 801a96c:	e00e      	b.n	801a98c <_malloc_r+0xa0>
 801a96e:	6822      	ldr	r2, [r4, #0]
 801a970:	1b52      	subs	r2, r2, r5
 801a972:	d41e      	bmi.n	801a9b2 <_malloc_r+0xc6>
 801a974:	2a0b      	cmp	r2, #11
 801a976:	d916      	bls.n	801a9a6 <_malloc_r+0xba>
 801a978:	1961      	adds	r1, r4, r5
 801a97a:	42a3      	cmp	r3, r4
 801a97c:	6025      	str	r5, [r4, #0]
 801a97e:	bf18      	it	ne
 801a980:	6059      	strne	r1, [r3, #4]
 801a982:	6863      	ldr	r3, [r4, #4]
 801a984:	bf08      	it	eq
 801a986:	6031      	streq	r1, [r6, #0]
 801a988:	5162      	str	r2, [r4, r5]
 801a98a:	604b      	str	r3, [r1, #4]
 801a98c:	4638      	mov	r0, r7
 801a98e:	f104 060b 	add.w	r6, r4, #11
 801a992:	f000 fcef 	bl	801b374 <__malloc_unlock>
 801a996:	f026 0607 	bic.w	r6, r6, #7
 801a99a:	1d23      	adds	r3, r4, #4
 801a99c:	1af2      	subs	r2, r6, r3
 801a99e:	d0b6      	beq.n	801a90e <_malloc_r+0x22>
 801a9a0:	1b9b      	subs	r3, r3, r6
 801a9a2:	50a3      	str	r3, [r4, r2]
 801a9a4:	e7b3      	b.n	801a90e <_malloc_r+0x22>
 801a9a6:	6862      	ldr	r2, [r4, #4]
 801a9a8:	42a3      	cmp	r3, r4
 801a9aa:	bf0c      	ite	eq
 801a9ac:	6032      	streq	r2, [r6, #0]
 801a9ae:	605a      	strne	r2, [r3, #4]
 801a9b0:	e7ec      	b.n	801a98c <_malloc_r+0xa0>
 801a9b2:	4623      	mov	r3, r4
 801a9b4:	6864      	ldr	r4, [r4, #4]
 801a9b6:	e7b2      	b.n	801a91e <_malloc_r+0x32>
 801a9b8:	4634      	mov	r4, r6
 801a9ba:	6876      	ldr	r6, [r6, #4]
 801a9bc:	e7b9      	b.n	801a932 <_malloc_r+0x46>
 801a9be:	230c      	movs	r3, #12
 801a9c0:	603b      	str	r3, [r7, #0]
 801a9c2:	4638      	mov	r0, r7
 801a9c4:	f000 fcd6 	bl	801b374 <__malloc_unlock>
 801a9c8:	e7a1      	b.n	801a90e <_malloc_r+0x22>
 801a9ca:	6025      	str	r5, [r4, #0]
 801a9cc:	e7de      	b.n	801a98c <_malloc_r+0xa0>
 801a9ce:	bf00      	nop
 801a9d0:	2001c95c 	.word	0x2001c95c

0801a9d4 <iprintf>:
 801a9d4:	b40f      	push	{r0, r1, r2, r3}
 801a9d6:	4b0a      	ldr	r3, [pc, #40]	; (801aa00 <iprintf+0x2c>)
 801a9d8:	b513      	push	{r0, r1, r4, lr}
 801a9da:	681c      	ldr	r4, [r3, #0]
 801a9dc:	b124      	cbz	r4, 801a9e8 <iprintf+0x14>
 801a9de:	69a3      	ldr	r3, [r4, #24]
 801a9e0:	b913      	cbnz	r3, 801a9e8 <iprintf+0x14>
 801a9e2:	4620      	mov	r0, r4
 801a9e4:	f7ff fd5e 	bl	801a4a4 <__sinit>
 801a9e8:	ab05      	add	r3, sp, #20
 801a9ea:	9a04      	ldr	r2, [sp, #16]
 801a9ec:	68a1      	ldr	r1, [r4, #8]
 801a9ee:	9301      	str	r3, [sp, #4]
 801a9f0:	4620      	mov	r0, r4
 801a9f2:	f000 fe79 	bl	801b6e8 <_vfiprintf_r>
 801a9f6:	b002      	add	sp, #8
 801a9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9fc:	b004      	add	sp, #16
 801a9fe:	4770      	bx	lr
 801aa00:	20000884 	.word	0x20000884

0801aa04 <srand>:
 801aa04:	b538      	push	{r3, r4, r5, lr}
 801aa06:	4b10      	ldr	r3, [pc, #64]	; (801aa48 <srand+0x44>)
 801aa08:	681d      	ldr	r5, [r3, #0]
 801aa0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801aa0c:	4604      	mov	r4, r0
 801aa0e:	b9b3      	cbnz	r3, 801aa3e <srand+0x3a>
 801aa10:	2018      	movs	r0, #24
 801aa12:	f7ff fec3 	bl	801a79c <malloc>
 801aa16:	4602      	mov	r2, r0
 801aa18:	63a8      	str	r0, [r5, #56]	; 0x38
 801aa1a:	b920      	cbnz	r0, 801aa26 <srand+0x22>
 801aa1c:	4b0b      	ldr	r3, [pc, #44]	; (801aa4c <srand+0x48>)
 801aa1e:	480c      	ldr	r0, [pc, #48]	; (801aa50 <srand+0x4c>)
 801aa20:	2142      	movs	r1, #66	; 0x42
 801aa22:	f000 fb1b 	bl	801b05c <__assert_func>
 801aa26:	490b      	ldr	r1, [pc, #44]	; (801aa54 <srand+0x50>)
 801aa28:	4b0b      	ldr	r3, [pc, #44]	; (801aa58 <srand+0x54>)
 801aa2a:	e9c0 1300 	strd	r1, r3, [r0]
 801aa2e:	4b0b      	ldr	r3, [pc, #44]	; (801aa5c <srand+0x58>)
 801aa30:	6083      	str	r3, [r0, #8]
 801aa32:	230b      	movs	r3, #11
 801aa34:	8183      	strh	r3, [r0, #12]
 801aa36:	2100      	movs	r1, #0
 801aa38:	2001      	movs	r0, #1
 801aa3a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801aa3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801aa40:	2200      	movs	r2, #0
 801aa42:	611c      	str	r4, [r3, #16]
 801aa44:	615a      	str	r2, [r3, #20]
 801aa46:	bd38      	pop	{r3, r4, r5, pc}
 801aa48:	20000884 	.word	0x20000884
 801aa4c:	0801cf84 	.word	0x0801cf84
 801aa50:	0801cf9b 	.word	0x0801cf9b
 801aa54:	abcd330e 	.word	0xabcd330e
 801aa58:	e66d1234 	.word	0xe66d1234
 801aa5c:	0005deec 	.word	0x0005deec

0801aa60 <rand>:
 801aa60:	4b16      	ldr	r3, [pc, #88]	; (801aabc <rand+0x5c>)
 801aa62:	b510      	push	{r4, lr}
 801aa64:	681c      	ldr	r4, [r3, #0]
 801aa66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801aa68:	b9b3      	cbnz	r3, 801aa98 <rand+0x38>
 801aa6a:	2018      	movs	r0, #24
 801aa6c:	f7ff fe96 	bl	801a79c <malloc>
 801aa70:	63a0      	str	r0, [r4, #56]	; 0x38
 801aa72:	b928      	cbnz	r0, 801aa80 <rand+0x20>
 801aa74:	4602      	mov	r2, r0
 801aa76:	4b12      	ldr	r3, [pc, #72]	; (801aac0 <rand+0x60>)
 801aa78:	4812      	ldr	r0, [pc, #72]	; (801aac4 <rand+0x64>)
 801aa7a:	214e      	movs	r1, #78	; 0x4e
 801aa7c:	f000 faee 	bl	801b05c <__assert_func>
 801aa80:	4a11      	ldr	r2, [pc, #68]	; (801aac8 <rand+0x68>)
 801aa82:	4b12      	ldr	r3, [pc, #72]	; (801aacc <rand+0x6c>)
 801aa84:	e9c0 2300 	strd	r2, r3, [r0]
 801aa88:	4b11      	ldr	r3, [pc, #68]	; (801aad0 <rand+0x70>)
 801aa8a:	6083      	str	r3, [r0, #8]
 801aa8c:	230b      	movs	r3, #11
 801aa8e:	8183      	strh	r3, [r0, #12]
 801aa90:	2201      	movs	r2, #1
 801aa92:	2300      	movs	r3, #0
 801aa94:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801aa98:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801aa9a:	4a0e      	ldr	r2, [pc, #56]	; (801aad4 <rand+0x74>)
 801aa9c:	6920      	ldr	r0, [r4, #16]
 801aa9e:	6963      	ldr	r3, [r4, #20]
 801aaa0:	490d      	ldr	r1, [pc, #52]	; (801aad8 <rand+0x78>)
 801aaa2:	4342      	muls	r2, r0
 801aaa4:	fb01 2203 	mla	r2, r1, r3, r2
 801aaa8:	fba0 0101 	umull	r0, r1, r0, r1
 801aaac:	1c43      	adds	r3, r0, #1
 801aaae:	eb42 0001 	adc.w	r0, r2, r1
 801aab2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801aab6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801aaba:	bd10      	pop	{r4, pc}
 801aabc:	20000884 	.word	0x20000884
 801aac0:	0801cf84 	.word	0x0801cf84
 801aac4:	0801cf9b 	.word	0x0801cf9b
 801aac8:	abcd330e 	.word	0xabcd330e
 801aacc:	e66d1234 	.word	0xe66d1234
 801aad0:	0005deec 	.word	0x0005deec
 801aad4:	5851f42d 	.word	0x5851f42d
 801aad8:	4c957f2d 	.word	0x4c957f2d

0801aadc <realloc>:
 801aadc:	4b02      	ldr	r3, [pc, #8]	; (801aae8 <realloc+0xc>)
 801aade:	460a      	mov	r2, r1
 801aae0:	4601      	mov	r1, r0
 801aae2:	6818      	ldr	r0, [r3, #0]
 801aae4:	f000 bc4c 	b.w	801b380 <_realloc_r>
 801aae8:	20000884 	.word	0x20000884

0801aaec <cleanup_glue>:
 801aaec:	b538      	push	{r3, r4, r5, lr}
 801aaee:	460c      	mov	r4, r1
 801aaf0:	6809      	ldr	r1, [r1, #0]
 801aaf2:	4605      	mov	r5, r0
 801aaf4:	b109      	cbz	r1, 801aafa <cleanup_glue+0xe>
 801aaf6:	f7ff fff9 	bl	801aaec <cleanup_glue>
 801aafa:	4621      	mov	r1, r4
 801aafc:	4628      	mov	r0, r5
 801aafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ab02:	f7ff be87 	b.w	801a814 <_free_r>
	...

0801ab08 <_reclaim_reent>:
 801ab08:	4b2c      	ldr	r3, [pc, #176]	; (801abbc <_reclaim_reent+0xb4>)
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	4283      	cmp	r3, r0
 801ab0e:	b570      	push	{r4, r5, r6, lr}
 801ab10:	4604      	mov	r4, r0
 801ab12:	d051      	beq.n	801abb8 <_reclaim_reent+0xb0>
 801ab14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ab16:	b143      	cbz	r3, 801ab2a <_reclaim_reent+0x22>
 801ab18:	68db      	ldr	r3, [r3, #12]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d14a      	bne.n	801abb4 <_reclaim_reent+0xac>
 801ab1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ab20:	6819      	ldr	r1, [r3, #0]
 801ab22:	b111      	cbz	r1, 801ab2a <_reclaim_reent+0x22>
 801ab24:	4620      	mov	r0, r4
 801ab26:	f7ff fe75 	bl	801a814 <_free_r>
 801ab2a:	6961      	ldr	r1, [r4, #20]
 801ab2c:	b111      	cbz	r1, 801ab34 <_reclaim_reent+0x2c>
 801ab2e:	4620      	mov	r0, r4
 801ab30:	f7ff fe70 	bl	801a814 <_free_r>
 801ab34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ab36:	b111      	cbz	r1, 801ab3e <_reclaim_reent+0x36>
 801ab38:	4620      	mov	r0, r4
 801ab3a:	f7ff fe6b 	bl	801a814 <_free_r>
 801ab3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ab40:	b111      	cbz	r1, 801ab48 <_reclaim_reent+0x40>
 801ab42:	4620      	mov	r0, r4
 801ab44:	f7ff fe66 	bl	801a814 <_free_r>
 801ab48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ab4a:	b111      	cbz	r1, 801ab52 <_reclaim_reent+0x4a>
 801ab4c:	4620      	mov	r0, r4
 801ab4e:	f7ff fe61 	bl	801a814 <_free_r>
 801ab52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ab54:	b111      	cbz	r1, 801ab5c <_reclaim_reent+0x54>
 801ab56:	4620      	mov	r0, r4
 801ab58:	f7ff fe5c 	bl	801a814 <_free_r>
 801ab5c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ab5e:	b111      	cbz	r1, 801ab66 <_reclaim_reent+0x5e>
 801ab60:	4620      	mov	r0, r4
 801ab62:	f7ff fe57 	bl	801a814 <_free_r>
 801ab66:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ab68:	b111      	cbz	r1, 801ab70 <_reclaim_reent+0x68>
 801ab6a:	4620      	mov	r0, r4
 801ab6c:	f7ff fe52 	bl	801a814 <_free_r>
 801ab70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ab72:	b111      	cbz	r1, 801ab7a <_reclaim_reent+0x72>
 801ab74:	4620      	mov	r0, r4
 801ab76:	f7ff fe4d 	bl	801a814 <_free_r>
 801ab7a:	69a3      	ldr	r3, [r4, #24]
 801ab7c:	b1e3      	cbz	r3, 801abb8 <_reclaim_reent+0xb0>
 801ab7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ab80:	4620      	mov	r0, r4
 801ab82:	4798      	blx	r3
 801ab84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ab86:	b1b9      	cbz	r1, 801abb8 <_reclaim_reent+0xb0>
 801ab88:	4620      	mov	r0, r4
 801ab8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab8e:	f7ff bfad 	b.w	801aaec <cleanup_glue>
 801ab92:	5949      	ldr	r1, [r1, r5]
 801ab94:	b941      	cbnz	r1, 801aba8 <_reclaim_reent+0xa0>
 801ab96:	3504      	adds	r5, #4
 801ab98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ab9a:	2d80      	cmp	r5, #128	; 0x80
 801ab9c:	68d9      	ldr	r1, [r3, #12]
 801ab9e:	d1f8      	bne.n	801ab92 <_reclaim_reent+0x8a>
 801aba0:	4620      	mov	r0, r4
 801aba2:	f7ff fe37 	bl	801a814 <_free_r>
 801aba6:	e7ba      	b.n	801ab1e <_reclaim_reent+0x16>
 801aba8:	680e      	ldr	r6, [r1, #0]
 801abaa:	4620      	mov	r0, r4
 801abac:	f7ff fe32 	bl	801a814 <_free_r>
 801abb0:	4631      	mov	r1, r6
 801abb2:	e7ef      	b.n	801ab94 <_reclaim_reent+0x8c>
 801abb4:	2500      	movs	r5, #0
 801abb6:	e7ef      	b.n	801ab98 <_reclaim_reent+0x90>
 801abb8:	bd70      	pop	{r4, r5, r6, pc}
 801abba:	bf00      	nop
 801abbc:	20000884 	.word	0x20000884

0801abc0 <_sbrk_r>:
 801abc0:	b538      	push	{r3, r4, r5, lr}
 801abc2:	4d06      	ldr	r5, [pc, #24]	; (801abdc <_sbrk_r+0x1c>)
 801abc4:	2300      	movs	r3, #0
 801abc6:	4604      	mov	r4, r0
 801abc8:	4608      	mov	r0, r1
 801abca:	602b      	str	r3, [r5, #0]
 801abcc:	f7e7 fb96 	bl	80022fc <_sbrk>
 801abd0:	1c43      	adds	r3, r0, #1
 801abd2:	d102      	bne.n	801abda <_sbrk_r+0x1a>
 801abd4:	682b      	ldr	r3, [r5, #0]
 801abd6:	b103      	cbz	r3, 801abda <_sbrk_r+0x1a>
 801abd8:	6023      	str	r3, [r4, #0]
 801abda:	bd38      	pop	{r3, r4, r5, pc}
 801abdc:	2001c964 	.word	0x2001c964

0801abe0 <sniprintf>:
 801abe0:	b40c      	push	{r2, r3}
 801abe2:	b530      	push	{r4, r5, lr}
 801abe4:	4b17      	ldr	r3, [pc, #92]	; (801ac44 <sniprintf+0x64>)
 801abe6:	1e0c      	subs	r4, r1, #0
 801abe8:	681d      	ldr	r5, [r3, #0]
 801abea:	b09d      	sub	sp, #116	; 0x74
 801abec:	da08      	bge.n	801ac00 <sniprintf+0x20>
 801abee:	238b      	movs	r3, #139	; 0x8b
 801abf0:	602b      	str	r3, [r5, #0]
 801abf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801abf6:	b01d      	add	sp, #116	; 0x74
 801abf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801abfc:	b002      	add	sp, #8
 801abfe:	4770      	bx	lr
 801ac00:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ac04:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ac08:	bf14      	ite	ne
 801ac0a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801ac0e:	4623      	moveq	r3, r4
 801ac10:	9304      	str	r3, [sp, #16]
 801ac12:	9307      	str	r3, [sp, #28]
 801ac14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac18:	9002      	str	r0, [sp, #8]
 801ac1a:	9006      	str	r0, [sp, #24]
 801ac1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ac20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ac22:	ab21      	add	r3, sp, #132	; 0x84
 801ac24:	a902      	add	r1, sp, #8
 801ac26:	4628      	mov	r0, r5
 801ac28:	9301      	str	r3, [sp, #4]
 801ac2a:	f000 fc33 	bl	801b494 <_svfiprintf_r>
 801ac2e:	1c43      	adds	r3, r0, #1
 801ac30:	bfbc      	itt	lt
 801ac32:	238b      	movlt	r3, #139	; 0x8b
 801ac34:	602b      	strlt	r3, [r5, #0]
 801ac36:	2c00      	cmp	r4, #0
 801ac38:	d0dd      	beq.n	801abf6 <sniprintf+0x16>
 801ac3a:	9b02      	ldr	r3, [sp, #8]
 801ac3c:	2200      	movs	r2, #0
 801ac3e:	701a      	strb	r2, [r3, #0]
 801ac40:	e7d9      	b.n	801abf6 <sniprintf+0x16>
 801ac42:	bf00      	nop
 801ac44:	20000884 	.word	0x20000884

0801ac48 <__sread>:
 801ac48:	b510      	push	{r4, lr}
 801ac4a:	460c      	mov	r4, r1
 801ac4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac50:	f001 f80e 	bl	801bc70 <_read_r>
 801ac54:	2800      	cmp	r0, #0
 801ac56:	bfab      	itete	ge
 801ac58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ac5a:	89a3      	ldrhlt	r3, [r4, #12]
 801ac5c:	181b      	addge	r3, r3, r0
 801ac5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ac62:	bfac      	ite	ge
 801ac64:	6563      	strge	r3, [r4, #84]	; 0x54
 801ac66:	81a3      	strhlt	r3, [r4, #12]
 801ac68:	bd10      	pop	{r4, pc}

0801ac6a <__swrite>:
 801ac6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac6e:	461f      	mov	r7, r3
 801ac70:	898b      	ldrh	r3, [r1, #12]
 801ac72:	05db      	lsls	r3, r3, #23
 801ac74:	4605      	mov	r5, r0
 801ac76:	460c      	mov	r4, r1
 801ac78:	4616      	mov	r6, r2
 801ac7a:	d505      	bpl.n	801ac88 <__swrite+0x1e>
 801ac7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac80:	2302      	movs	r3, #2
 801ac82:	2200      	movs	r2, #0
 801ac84:	f000 faf8 	bl	801b278 <_lseek_r>
 801ac88:	89a3      	ldrh	r3, [r4, #12]
 801ac8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ac92:	81a3      	strh	r3, [r4, #12]
 801ac94:	4632      	mov	r2, r6
 801ac96:	463b      	mov	r3, r7
 801ac98:	4628      	mov	r0, r5
 801ac9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac9e:	f000 b95d 	b.w	801af5c <_write_r>

0801aca2 <__sseek>:
 801aca2:	b510      	push	{r4, lr}
 801aca4:	460c      	mov	r4, r1
 801aca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801acaa:	f000 fae5 	bl	801b278 <_lseek_r>
 801acae:	1c43      	adds	r3, r0, #1
 801acb0:	89a3      	ldrh	r3, [r4, #12]
 801acb2:	bf15      	itete	ne
 801acb4:	6560      	strne	r0, [r4, #84]	; 0x54
 801acb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801acba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801acbe:	81a3      	strheq	r3, [r4, #12]
 801acc0:	bf18      	it	ne
 801acc2:	81a3      	strhne	r3, [r4, #12]
 801acc4:	bd10      	pop	{r4, pc}

0801acc6 <__sclose>:
 801acc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801acca:	f000 b9e5 	b.w	801b098 <_close_r>

0801acce <strchr>:
 801acce:	b2c9      	uxtb	r1, r1
 801acd0:	4603      	mov	r3, r0
 801acd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801acd6:	b11a      	cbz	r2, 801ace0 <strchr+0x12>
 801acd8:	428a      	cmp	r2, r1
 801acda:	d1f9      	bne.n	801acd0 <strchr+0x2>
 801acdc:	4618      	mov	r0, r3
 801acde:	4770      	bx	lr
 801ace0:	2900      	cmp	r1, #0
 801ace2:	bf18      	it	ne
 801ace4:	2300      	movne	r3, #0
 801ace6:	e7f9      	b.n	801acdc <strchr+0xe>

0801ace8 <strcpy>:
 801ace8:	4603      	mov	r3, r0
 801acea:	f811 2b01 	ldrb.w	r2, [r1], #1
 801acee:	f803 2b01 	strb.w	r2, [r3], #1
 801acf2:	2a00      	cmp	r2, #0
 801acf4:	d1f9      	bne.n	801acea <strcpy+0x2>
 801acf6:	4770      	bx	lr

0801acf8 <strncmp>:
 801acf8:	b510      	push	{r4, lr}
 801acfa:	b17a      	cbz	r2, 801ad1c <strncmp+0x24>
 801acfc:	4603      	mov	r3, r0
 801acfe:	3901      	subs	r1, #1
 801ad00:	1884      	adds	r4, r0, r2
 801ad02:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ad06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ad0a:	4290      	cmp	r0, r2
 801ad0c:	d101      	bne.n	801ad12 <strncmp+0x1a>
 801ad0e:	42a3      	cmp	r3, r4
 801ad10:	d101      	bne.n	801ad16 <strncmp+0x1e>
 801ad12:	1a80      	subs	r0, r0, r2
 801ad14:	bd10      	pop	{r4, pc}
 801ad16:	2800      	cmp	r0, #0
 801ad18:	d1f3      	bne.n	801ad02 <strncmp+0xa>
 801ad1a:	e7fa      	b.n	801ad12 <strncmp+0x1a>
 801ad1c:	4610      	mov	r0, r2
 801ad1e:	e7f9      	b.n	801ad14 <strncmp+0x1c>

0801ad20 <strstr>:
 801ad20:	780a      	ldrb	r2, [r1, #0]
 801ad22:	b570      	push	{r4, r5, r6, lr}
 801ad24:	b96a      	cbnz	r2, 801ad42 <strstr+0x22>
 801ad26:	bd70      	pop	{r4, r5, r6, pc}
 801ad28:	429a      	cmp	r2, r3
 801ad2a:	d109      	bne.n	801ad40 <strstr+0x20>
 801ad2c:	460c      	mov	r4, r1
 801ad2e:	4605      	mov	r5, r0
 801ad30:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d0f6      	beq.n	801ad26 <strstr+0x6>
 801ad38:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801ad3c:	429e      	cmp	r6, r3
 801ad3e:	d0f7      	beq.n	801ad30 <strstr+0x10>
 801ad40:	3001      	adds	r0, #1
 801ad42:	7803      	ldrb	r3, [r0, #0]
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d1ef      	bne.n	801ad28 <strstr+0x8>
 801ad48:	4618      	mov	r0, r3
 801ad4a:	e7ec      	b.n	801ad26 <strstr+0x6>

0801ad4c <_strtoul_l.constprop.0>:
 801ad4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad50:	4f36      	ldr	r7, [pc, #216]	; (801ae2c <_strtoul_l.constprop.0+0xe0>)
 801ad52:	4686      	mov	lr, r0
 801ad54:	460d      	mov	r5, r1
 801ad56:	4628      	mov	r0, r5
 801ad58:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ad5c:	5de6      	ldrb	r6, [r4, r7]
 801ad5e:	f016 0608 	ands.w	r6, r6, #8
 801ad62:	d1f8      	bne.n	801ad56 <_strtoul_l.constprop.0+0xa>
 801ad64:	2c2d      	cmp	r4, #45	; 0x2d
 801ad66:	d12f      	bne.n	801adc8 <_strtoul_l.constprop.0+0x7c>
 801ad68:	782c      	ldrb	r4, [r5, #0]
 801ad6a:	2601      	movs	r6, #1
 801ad6c:	1c85      	adds	r5, r0, #2
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d057      	beq.n	801ae22 <_strtoul_l.constprop.0+0xd6>
 801ad72:	2b10      	cmp	r3, #16
 801ad74:	d109      	bne.n	801ad8a <_strtoul_l.constprop.0+0x3e>
 801ad76:	2c30      	cmp	r4, #48	; 0x30
 801ad78:	d107      	bne.n	801ad8a <_strtoul_l.constprop.0+0x3e>
 801ad7a:	7828      	ldrb	r0, [r5, #0]
 801ad7c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801ad80:	2858      	cmp	r0, #88	; 0x58
 801ad82:	d149      	bne.n	801ae18 <_strtoul_l.constprop.0+0xcc>
 801ad84:	786c      	ldrb	r4, [r5, #1]
 801ad86:	2310      	movs	r3, #16
 801ad88:	3502      	adds	r5, #2
 801ad8a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801ad8e:	2700      	movs	r7, #0
 801ad90:	fbb8 f8f3 	udiv	r8, r8, r3
 801ad94:	fb03 f908 	mul.w	r9, r3, r8
 801ad98:	ea6f 0909 	mvn.w	r9, r9
 801ad9c:	4638      	mov	r0, r7
 801ad9e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ada2:	f1bc 0f09 	cmp.w	ip, #9
 801ada6:	d814      	bhi.n	801add2 <_strtoul_l.constprop.0+0x86>
 801ada8:	4664      	mov	r4, ip
 801adaa:	42a3      	cmp	r3, r4
 801adac:	dd22      	ble.n	801adf4 <_strtoul_l.constprop.0+0xa8>
 801adae:	2f00      	cmp	r7, #0
 801adb0:	db1d      	blt.n	801adee <_strtoul_l.constprop.0+0xa2>
 801adb2:	4580      	cmp	r8, r0
 801adb4:	d31b      	bcc.n	801adee <_strtoul_l.constprop.0+0xa2>
 801adb6:	d101      	bne.n	801adbc <_strtoul_l.constprop.0+0x70>
 801adb8:	45a1      	cmp	r9, r4
 801adba:	db18      	blt.n	801adee <_strtoul_l.constprop.0+0xa2>
 801adbc:	fb00 4003 	mla	r0, r0, r3, r4
 801adc0:	2701      	movs	r7, #1
 801adc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801adc6:	e7ea      	b.n	801ad9e <_strtoul_l.constprop.0+0x52>
 801adc8:	2c2b      	cmp	r4, #43	; 0x2b
 801adca:	bf04      	itt	eq
 801adcc:	782c      	ldrbeq	r4, [r5, #0]
 801adce:	1c85      	addeq	r5, r0, #2
 801add0:	e7cd      	b.n	801ad6e <_strtoul_l.constprop.0+0x22>
 801add2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801add6:	f1bc 0f19 	cmp.w	ip, #25
 801adda:	d801      	bhi.n	801ade0 <_strtoul_l.constprop.0+0x94>
 801addc:	3c37      	subs	r4, #55	; 0x37
 801adde:	e7e4      	b.n	801adaa <_strtoul_l.constprop.0+0x5e>
 801ade0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801ade4:	f1bc 0f19 	cmp.w	ip, #25
 801ade8:	d804      	bhi.n	801adf4 <_strtoul_l.constprop.0+0xa8>
 801adea:	3c57      	subs	r4, #87	; 0x57
 801adec:	e7dd      	b.n	801adaa <_strtoul_l.constprop.0+0x5e>
 801adee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801adf2:	e7e6      	b.n	801adc2 <_strtoul_l.constprop.0+0x76>
 801adf4:	2f00      	cmp	r7, #0
 801adf6:	da07      	bge.n	801ae08 <_strtoul_l.constprop.0+0xbc>
 801adf8:	2322      	movs	r3, #34	; 0x22
 801adfa:	f8ce 3000 	str.w	r3, [lr]
 801adfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ae02:	b932      	cbnz	r2, 801ae12 <_strtoul_l.constprop.0+0xc6>
 801ae04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae08:	b106      	cbz	r6, 801ae0c <_strtoul_l.constprop.0+0xc0>
 801ae0a:	4240      	negs	r0, r0
 801ae0c:	2a00      	cmp	r2, #0
 801ae0e:	d0f9      	beq.n	801ae04 <_strtoul_l.constprop.0+0xb8>
 801ae10:	b107      	cbz	r7, 801ae14 <_strtoul_l.constprop.0+0xc8>
 801ae12:	1e69      	subs	r1, r5, #1
 801ae14:	6011      	str	r1, [r2, #0]
 801ae16:	e7f5      	b.n	801ae04 <_strtoul_l.constprop.0+0xb8>
 801ae18:	2430      	movs	r4, #48	; 0x30
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d1b5      	bne.n	801ad8a <_strtoul_l.constprop.0+0x3e>
 801ae1e:	2308      	movs	r3, #8
 801ae20:	e7b3      	b.n	801ad8a <_strtoul_l.constprop.0+0x3e>
 801ae22:	2c30      	cmp	r4, #48	; 0x30
 801ae24:	d0a9      	beq.n	801ad7a <_strtoul_l.constprop.0+0x2e>
 801ae26:	230a      	movs	r3, #10
 801ae28:	e7af      	b.n	801ad8a <_strtoul_l.constprop.0+0x3e>
 801ae2a:	bf00      	nop
 801ae2c:	0801ce1f 	.word	0x0801ce1f

0801ae30 <strtoul>:
 801ae30:	4613      	mov	r3, r2
 801ae32:	460a      	mov	r2, r1
 801ae34:	4601      	mov	r1, r0
 801ae36:	4802      	ldr	r0, [pc, #8]	; (801ae40 <strtoul+0x10>)
 801ae38:	6800      	ldr	r0, [r0, #0]
 801ae3a:	f7ff bf87 	b.w	801ad4c <_strtoul_l.constprop.0>
 801ae3e:	bf00      	nop
 801ae40:	20000884 	.word	0x20000884

0801ae44 <_vsniprintf_r>:
 801ae44:	b530      	push	{r4, r5, lr}
 801ae46:	4614      	mov	r4, r2
 801ae48:	2c00      	cmp	r4, #0
 801ae4a:	b09b      	sub	sp, #108	; 0x6c
 801ae4c:	4605      	mov	r5, r0
 801ae4e:	461a      	mov	r2, r3
 801ae50:	da05      	bge.n	801ae5e <_vsniprintf_r+0x1a>
 801ae52:	238b      	movs	r3, #139	; 0x8b
 801ae54:	6003      	str	r3, [r0, #0]
 801ae56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ae5a:	b01b      	add	sp, #108	; 0x6c
 801ae5c:	bd30      	pop	{r4, r5, pc}
 801ae5e:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ae62:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ae66:	bf14      	ite	ne
 801ae68:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801ae6c:	4623      	moveq	r3, r4
 801ae6e:	9302      	str	r3, [sp, #8]
 801ae70:	9305      	str	r3, [sp, #20]
 801ae72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ae76:	9100      	str	r1, [sp, #0]
 801ae78:	9104      	str	r1, [sp, #16]
 801ae7a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ae7e:	4669      	mov	r1, sp
 801ae80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ae82:	f000 fb07 	bl	801b494 <_svfiprintf_r>
 801ae86:	1c43      	adds	r3, r0, #1
 801ae88:	bfbc      	itt	lt
 801ae8a:	238b      	movlt	r3, #139	; 0x8b
 801ae8c:	602b      	strlt	r3, [r5, #0]
 801ae8e:	2c00      	cmp	r4, #0
 801ae90:	d0e3      	beq.n	801ae5a <_vsniprintf_r+0x16>
 801ae92:	9b00      	ldr	r3, [sp, #0]
 801ae94:	2200      	movs	r2, #0
 801ae96:	701a      	strb	r2, [r3, #0]
 801ae98:	e7df      	b.n	801ae5a <_vsniprintf_r+0x16>
	...

0801ae9c <vsniprintf>:
 801ae9c:	b507      	push	{r0, r1, r2, lr}
 801ae9e:	9300      	str	r3, [sp, #0]
 801aea0:	4613      	mov	r3, r2
 801aea2:	460a      	mov	r2, r1
 801aea4:	4601      	mov	r1, r0
 801aea6:	4803      	ldr	r0, [pc, #12]	; (801aeb4 <vsniprintf+0x18>)
 801aea8:	6800      	ldr	r0, [r0, #0]
 801aeaa:	f7ff ffcb 	bl	801ae44 <_vsniprintf_r>
 801aeae:	b003      	add	sp, #12
 801aeb0:	f85d fb04 	ldr.w	pc, [sp], #4
 801aeb4:	20000884 	.word	0x20000884

0801aeb8 <__swbuf_r>:
 801aeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeba:	460e      	mov	r6, r1
 801aebc:	4614      	mov	r4, r2
 801aebe:	4605      	mov	r5, r0
 801aec0:	b118      	cbz	r0, 801aeca <__swbuf_r+0x12>
 801aec2:	6983      	ldr	r3, [r0, #24]
 801aec4:	b90b      	cbnz	r3, 801aeca <__swbuf_r+0x12>
 801aec6:	f7ff faed 	bl	801a4a4 <__sinit>
 801aeca:	4b21      	ldr	r3, [pc, #132]	; (801af50 <__swbuf_r+0x98>)
 801aecc:	429c      	cmp	r4, r3
 801aece:	d12b      	bne.n	801af28 <__swbuf_r+0x70>
 801aed0:	686c      	ldr	r4, [r5, #4]
 801aed2:	69a3      	ldr	r3, [r4, #24]
 801aed4:	60a3      	str	r3, [r4, #8]
 801aed6:	89a3      	ldrh	r3, [r4, #12]
 801aed8:	071a      	lsls	r2, r3, #28
 801aeda:	d52f      	bpl.n	801af3c <__swbuf_r+0x84>
 801aedc:	6923      	ldr	r3, [r4, #16]
 801aede:	b36b      	cbz	r3, 801af3c <__swbuf_r+0x84>
 801aee0:	6923      	ldr	r3, [r4, #16]
 801aee2:	6820      	ldr	r0, [r4, #0]
 801aee4:	1ac0      	subs	r0, r0, r3
 801aee6:	6963      	ldr	r3, [r4, #20]
 801aee8:	b2f6      	uxtb	r6, r6
 801aeea:	4283      	cmp	r3, r0
 801aeec:	4637      	mov	r7, r6
 801aeee:	dc04      	bgt.n	801aefa <__swbuf_r+0x42>
 801aef0:	4621      	mov	r1, r4
 801aef2:	4628      	mov	r0, r5
 801aef4:	f000 f972 	bl	801b1dc <_fflush_r>
 801aef8:	bb30      	cbnz	r0, 801af48 <__swbuf_r+0x90>
 801aefa:	68a3      	ldr	r3, [r4, #8]
 801aefc:	3b01      	subs	r3, #1
 801aefe:	60a3      	str	r3, [r4, #8]
 801af00:	6823      	ldr	r3, [r4, #0]
 801af02:	1c5a      	adds	r2, r3, #1
 801af04:	6022      	str	r2, [r4, #0]
 801af06:	701e      	strb	r6, [r3, #0]
 801af08:	6963      	ldr	r3, [r4, #20]
 801af0a:	3001      	adds	r0, #1
 801af0c:	4283      	cmp	r3, r0
 801af0e:	d004      	beq.n	801af1a <__swbuf_r+0x62>
 801af10:	89a3      	ldrh	r3, [r4, #12]
 801af12:	07db      	lsls	r3, r3, #31
 801af14:	d506      	bpl.n	801af24 <__swbuf_r+0x6c>
 801af16:	2e0a      	cmp	r6, #10
 801af18:	d104      	bne.n	801af24 <__swbuf_r+0x6c>
 801af1a:	4621      	mov	r1, r4
 801af1c:	4628      	mov	r0, r5
 801af1e:	f000 f95d 	bl	801b1dc <_fflush_r>
 801af22:	b988      	cbnz	r0, 801af48 <__swbuf_r+0x90>
 801af24:	4638      	mov	r0, r7
 801af26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af28:	4b0a      	ldr	r3, [pc, #40]	; (801af54 <__swbuf_r+0x9c>)
 801af2a:	429c      	cmp	r4, r3
 801af2c:	d101      	bne.n	801af32 <__swbuf_r+0x7a>
 801af2e:	68ac      	ldr	r4, [r5, #8]
 801af30:	e7cf      	b.n	801aed2 <__swbuf_r+0x1a>
 801af32:	4b09      	ldr	r3, [pc, #36]	; (801af58 <__swbuf_r+0xa0>)
 801af34:	429c      	cmp	r4, r3
 801af36:	bf08      	it	eq
 801af38:	68ec      	ldreq	r4, [r5, #12]
 801af3a:	e7ca      	b.n	801aed2 <__swbuf_r+0x1a>
 801af3c:	4621      	mov	r1, r4
 801af3e:	4628      	mov	r0, r5
 801af40:	f000 f81e 	bl	801af80 <__swsetup_r>
 801af44:	2800      	cmp	r0, #0
 801af46:	d0cb      	beq.n	801aee0 <__swbuf_r+0x28>
 801af48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801af4c:	e7ea      	b.n	801af24 <__swbuf_r+0x6c>
 801af4e:	bf00      	nop
 801af50:	0801cf40 	.word	0x0801cf40
 801af54:	0801cf60 	.word	0x0801cf60
 801af58:	0801cf20 	.word	0x0801cf20

0801af5c <_write_r>:
 801af5c:	b538      	push	{r3, r4, r5, lr}
 801af5e:	4d07      	ldr	r5, [pc, #28]	; (801af7c <_write_r+0x20>)
 801af60:	4604      	mov	r4, r0
 801af62:	4608      	mov	r0, r1
 801af64:	4611      	mov	r1, r2
 801af66:	2200      	movs	r2, #0
 801af68:	602a      	str	r2, [r5, #0]
 801af6a:	461a      	mov	r2, r3
 801af6c:	f7e7 f9a9 	bl	80022c2 <_write>
 801af70:	1c43      	adds	r3, r0, #1
 801af72:	d102      	bne.n	801af7a <_write_r+0x1e>
 801af74:	682b      	ldr	r3, [r5, #0]
 801af76:	b103      	cbz	r3, 801af7a <_write_r+0x1e>
 801af78:	6023      	str	r3, [r4, #0]
 801af7a:	bd38      	pop	{r3, r4, r5, pc}
 801af7c:	2001c964 	.word	0x2001c964

0801af80 <__swsetup_r>:
 801af80:	4b32      	ldr	r3, [pc, #200]	; (801b04c <__swsetup_r+0xcc>)
 801af82:	b570      	push	{r4, r5, r6, lr}
 801af84:	681d      	ldr	r5, [r3, #0]
 801af86:	4606      	mov	r6, r0
 801af88:	460c      	mov	r4, r1
 801af8a:	b125      	cbz	r5, 801af96 <__swsetup_r+0x16>
 801af8c:	69ab      	ldr	r3, [r5, #24]
 801af8e:	b913      	cbnz	r3, 801af96 <__swsetup_r+0x16>
 801af90:	4628      	mov	r0, r5
 801af92:	f7ff fa87 	bl	801a4a4 <__sinit>
 801af96:	4b2e      	ldr	r3, [pc, #184]	; (801b050 <__swsetup_r+0xd0>)
 801af98:	429c      	cmp	r4, r3
 801af9a:	d10f      	bne.n	801afbc <__swsetup_r+0x3c>
 801af9c:	686c      	ldr	r4, [r5, #4]
 801af9e:	89a3      	ldrh	r3, [r4, #12]
 801afa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801afa4:	0719      	lsls	r1, r3, #28
 801afa6:	d42c      	bmi.n	801b002 <__swsetup_r+0x82>
 801afa8:	06dd      	lsls	r5, r3, #27
 801afaa:	d411      	bmi.n	801afd0 <__swsetup_r+0x50>
 801afac:	2309      	movs	r3, #9
 801afae:	6033      	str	r3, [r6, #0]
 801afb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801afb4:	81a3      	strh	r3, [r4, #12]
 801afb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801afba:	e03e      	b.n	801b03a <__swsetup_r+0xba>
 801afbc:	4b25      	ldr	r3, [pc, #148]	; (801b054 <__swsetup_r+0xd4>)
 801afbe:	429c      	cmp	r4, r3
 801afc0:	d101      	bne.n	801afc6 <__swsetup_r+0x46>
 801afc2:	68ac      	ldr	r4, [r5, #8]
 801afc4:	e7eb      	b.n	801af9e <__swsetup_r+0x1e>
 801afc6:	4b24      	ldr	r3, [pc, #144]	; (801b058 <__swsetup_r+0xd8>)
 801afc8:	429c      	cmp	r4, r3
 801afca:	bf08      	it	eq
 801afcc:	68ec      	ldreq	r4, [r5, #12]
 801afce:	e7e6      	b.n	801af9e <__swsetup_r+0x1e>
 801afd0:	0758      	lsls	r0, r3, #29
 801afd2:	d512      	bpl.n	801affa <__swsetup_r+0x7a>
 801afd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801afd6:	b141      	cbz	r1, 801afea <__swsetup_r+0x6a>
 801afd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afdc:	4299      	cmp	r1, r3
 801afde:	d002      	beq.n	801afe6 <__swsetup_r+0x66>
 801afe0:	4630      	mov	r0, r6
 801afe2:	f7ff fc17 	bl	801a814 <_free_r>
 801afe6:	2300      	movs	r3, #0
 801afe8:	6363      	str	r3, [r4, #52]	; 0x34
 801afea:	89a3      	ldrh	r3, [r4, #12]
 801afec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801aff0:	81a3      	strh	r3, [r4, #12]
 801aff2:	2300      	movs	r3, #0
 801aff4:	6063      	str	r3, [r4, #4]
 801aff6:	6923      	ldr	r3, [r4, #16]
 801aff8:	6023      	str	r3, [r4, #0]
 801affa:	89a3      	ldrh	r3, [r4, #12]
 801affc:	f043 0308 	orr.w	r3, r3, #8
 801b000:	81a3      	strh	r3, [r4, #12]
 801b002:	6923      	ldr	r3, [r4, #16]
 801b004:	b94b      	cbnz	r3, 801b01a <__swsetup_r+0x9a>
 801b006:	89a3      	ldrh	r3, [r4, #12]
 801b008:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b00c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b010:	d003      	beq.n	801b01a <__swsetup_r+0x9a>
 801b012:	4621      	mov	r1, r4
 801b014:	4630      	mov	r0, r6
 801b016:	f000 f967 	bl	801b2e8 <__smakebuf_r>
 801b01a:	89a0      	ldrh	r0, [r4, #12]
 801b01c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b020:	f010 0301 	ands.w	r3, r0, #1
 801b024:	d00a      	beq.n	801b03c <__swsetup_r+0xbc>
 801b026:	2300      	movs	r3, #0
 801b028:	60a3      	str	r3, [r4, #8]
 801b02a:	6963      	ldr	r3, [r4, #20]
 801b02c:	425b      	negs	r3, r3
 801b02e:	61a3      	str	r3, [r4, #24]
 801b030:	6923      	ldr	r3, [r4, #16]
 801b032:	b943      	cbnz	r3, 801b046 <__swsetup_r+0xc6>
 801b034:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b038:	d1ba      	bne.n	801afb0 <__swsetup_r+0x30>
 801b03a:	bd70      	pop	{r4, r5, r6, pc}
 801b03c:	0781      	lsls	r1, r0, #30
 801b03e:	bf58      	it	pl
 801b040:	6963      	ldrpl	r3, [r4, #20]
 801b042:	60a3      	str	r3, [r4, #8]
 801b044:	e7f4      	b.n	801b030 <__swsetup_r+0xb0>
 801b046:	2000      	movs	r0, #0
 801b048:	e7f7      	b.n	801b03a <__swsetup_r+0xba>
 801b04a:	bf00      	nop
 801b04c:	20000884 	.word	0x20000884
 801b050:	0801cf40 	.word	0x0801cf40
 801b054:	0801cf60 	.word	0x0801cf60
 801b058:	0801cf20 	.word	0x0801cf20

0801b05c <__assert_func>:
 801b05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b05e:	4614      	mov	r4, r2
 801b060:	461a      	mov	r2, r3
 801b062:	4b09      	ldr	r3, [pc, #36]	; (801b088 <__assert_func+0x2c>)
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	4605      	mov	r5, r0
 801b068:	68d8      	ldr	r0, [r3, #12]
 801b06a:	b14c      	cbz	r4, 801b080 <__assert_func+0x24>
 801b06c:	4b07      	ldr	r3, [pc, #28]	; (801b08c <__assert_func+0x30>)
 801b06e:	9100      	str	r1, [sp, #0]
 801b070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b074:	4906      	ldr	r1, [pc, #24]	; (801b090 <__assert_func+0x34>)
 801b076:	462b      	mov	r3, r5
 801b078:	f000 f8ec 	bl	801b254 <fiprintf>
 801b07c:	f000 fe0a 	bl	801bc94 <abort>
 801b080:	4b04      	ldr	r3, [pc, #16]	; (801b094 <__assert_func+0x38>)
 801b082:	461c      	mov	r4, r3
 801b084:	e7f3      	b.n	801b06e <__assert_func+0x12>
 801b086:	bf00      	nop
 801b088:	20000884 	.word	0x20000884
 801b08c:	0801cff6 	.word	0x0801cff6
 801b090:	0801d003 	.word	0x0801d003
 801b094:	0801d031 	.word	0x0801d031

0801b098 <_close_r>:
 801b098:	b538      	push	{r3, r4, r5, lr}
 801b09a:	4d06      	ldr	r5, [pc, #24]	; (801b0b4 <_close_r+0x1c>)
 801b09c:	2300      	movs	r3, #0
 801b09e:	4604      	mov	r4, r0
 801b0a0:	4608      	mov	r0, r1
 801b0a2:	602b      	str	r3, [r5, #0]
 801b0a4:	f7e7 f960 	bl	8002368 <_close>
 801b0a8:	1c43      	adds	r3, r0, #1
 801b0aa:	d102      	bne.n	801b0b2 <_close_r+0x1a>
 801b0ac:	682b      	ldr	r3, [r5, #0]
 801b0ae:	b103      	cbz	r3, 801b0b2 <_close_r+0x1a>
 801b0b0:	6023      	str	r3, [r4, #0]
 801b0b2:	bd38      	pop	{r3, r4, r5, pc}
 801b0b4:	2001c964 	.word	0x2001c964

0801b0b8 <__env_lock>:
 801b0b8:	4801      	ldr	r0, [pc, #4]	; (801b0c0 <__env_lock+0x8>)
 801b0ba:	f7ff bb6c 	b.w	801a796 <__retarget_lock_acquire_recursive>
 801b0be:	bf00      	nop
 801b0c0:	2001c958 	.word	0x2001c958

0801b0c4 <__env_unlock>:
 801b0c4:	4801      	ldr	r0, [pc, #4]	; (801b0cc <__env_unlock+0x8>)
 801b0c6:	f7ff bb67 	b.w	801a798 <__retarget_lock_release_recursive>
 801b0ca:	bf00      	nop
 801b0cc:	2001c958 	.word	0x2001c958

0801b0d0 <__sflush_r>:
 801b0d0:	898a      	ldrh	r2, [r1, #12]
 801b0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0d6:	4605      	mov	r5, r0
 801b0d8:	0710      	lsls	r0, r2, #28
 801b0da:	460c      	mov	r4, r1
 801b0dc:	d458      	bmi.n	801b190 <__sflush_r+0xc0>
 801b0de:	684b      	ldr	r3, [r1, #4]
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	dc05      	bgt.n	801b0f0 <__sflush_r+0x20>
 801b0e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	dc02      	bgt.n	801b0f0 <__sflush_r+0x20>
 801b0ea:	2000      	movs	r0, #0
 801b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b0f2:	2e00      	cmp	r6, #0
 801b0f4:	d0f9      	beq.n	801b0ea <__sflush_r+0x1a>
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b0fc:	682f      	ldr	r7, [r5, #0]
 801b0fe:	602b      	str	r3, [r5, #0]
 801b100:	d032      	beq.n	801b168 <__sflush_r+0x98>
 801b102:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b104:	89a3      	ldrh	r3, [r4, #12]
 801b106:	075a      	lsls	r2, r3, #29
 801b108:	d505      	bpl.n	801b116 <__sflush_r+0x46>
 801b10a:	6863      	ldr	r3, [r4, #4]
 801b10c:	1ac0      	subs	r0, r0, r3
 801b10e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b110:	b10b      	cbz	r3, 801b116 <__sflush_r+0x46>
 801b112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b114:	1ac0      	subs	r0, r0, r3
 801b116:	2300      	movs	r3, #0
 801b118:	4602      	mov	r2, r0
 801b11a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b11c:	6a21      	ldr	r1, [r4, #32]
 801b11e:	4628      	mov	r0, r5
 801b120:	47b0      	blx	r6
 801b122:	1c43      	adds	r3, r0, #1
 801b124:	89a3      	ldrh	r3, [r4, #12]
 801b126:	d106      	bne.n	801b136 <__sflush_r+0x66>
 801b128:	6829      	ldr	r1, [r5, #0]
 801b12a:	291d      	cmp	r1, #29
 801b12c:	d82c      	bhi.n	801b188 <__sflush_r+0xb8>
 801b12e:	4a2a      	ldr	r2, [pc, #168]	; (801b1d8 <__sflush_r+0x108>)
 801b130:	40ca      	lsrs	r2, r1
 801b132:	07d6      	lsls	r6, r2, #31
 801b134:	d528      	bpl.n	801b188 <__sflush_r+0xb8>
 801b136:	2200      	movs	r2, #0
 801b138:	6062      	str	r2, [r4, #4]
 801b13a:	04d9      	lsls	r1, r3, #19
 801b13c:	6922      	ldr	r2, [r4, #16]
 801b13e:	6022      	str	r2, [r4, #0]
 801b140:	d504      	bpl.n	801b14c <__sflush_r+0x7c>
 801b142:	1c42      	adds	r2, r0, #1
 801b144:	d101      	bne.n	801b14a <__sflush_r+0x7a>
 801b146:	682b      	ldr	r3, [r5, #0]
 801b148:	b903      	cbnz	r3, 801b14c <__sflush_r+0x7c>
 801b14a:	6560      	str	r0, [r4, #84]	; 0x54
 801b14c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b14e:	602f      	str	r7, [r5, #0]
 801b150:	2900      	cmp	r1, #0
 801b152:	d0ca      	beq.n	801b0ea <__sflush_r+0x1a>
 801b154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b158:	4299      	cmp	r1, r3
 801b15a:	d002      	beq.n	801b162 <__sflush_r+0x92>
 801b15c:	4628      	mov	r0, r5
 801b15e:	f7ff fb59 	bl	801a814 <_free_r>
 801b162:	2000      	movs	r0, #0
 801b164:	6360      	str	r0, [r4, #52]	; 0x34
 801b166:	e7c1      	b.n	801b0ec <__sflush_r+0x1c>
 801b168:	6a21      	ldr	r1, [r4, #32]
 801b16a:	2301      	movs	r3, #1
 801b16c:	4628      	mov	r0, r5
 801b16e:	47b0      	blx	r6
 801b170:	1c41      	adds	r1, r0, #1
 801b172:	d1c7      	bne.n	801b104 <__sflush_r+0x34>
 801b174:	682b      	ldr	r3, [r5, #0]
 801b176:	2b00      	cmp	r3, #0
 801b178:	d0c4      	beq.n	801b104 <__sflush_r+0x34>
 801b17a:	2b1d      	cmp	r3, #29
 801b17c:	d001      	beq.n	801b182 <__sflush_r+0xb2>
 801b17e:	2b16      	cmp	r3, #22
 801b180:	d101      	bne.n	801b186 <__sflush_r+0xb6>
 801b182:	602f      	str	r7, [r5, #0]
 801b184:	e7b1      	b.n	801b0ea <__sflush_r+0x1a>
 801b186:	89a3      	ldrh	r3, [r4, #12]
 801b188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b18c:	81a3      	strh	r3, [r4, #12]
 801b18e:	e7ad      	b.n	801b0ec <__sflush_r+0x1c>
 801b190:	690f      	ldr	r7, [r1, #16]
 801b192:	2f00      	cmp	r7, #0
 801b194:	d0a9      	beq.n	801b0ea <__sflush_r+0x1a>
 801b196:	0793      	lsls	r3, r2, #30
 801b198:	680e      	ldr	r6, [r1, #0]
 801b19a:	bf08      	it	eq
 801b19c:	694b      	ldreq	r3, [r1, #20]
 801b19e:	600f      	str	r7, [r1, #0]
 801b1a0:	bf18      	it	ne
 801b1a2:	2300      	movne	r3, #0
 801b1a4:	eba6 0807 	sub.w	r8, r6, r7
 801b1a8:	608b      	str	r3, [r1, #8]
 801b1aa:	f1b8 0f00 	cmp.w	r8, #0
 801b1ae:	dd9c      	ble.n	801b0ea <__sflush_r+0x1a>
 801b1b0:	6a21      	ldr	r1, [r4, #32]
 801b1b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b1b4:	4643      	mov	r3, r8
 801b1b6:	463a      	mov	r2, r7
 801b1b8:	4628      	mov	r0, r5
 801b1ba:	47b0      	blx	r6
 801b1bc:	2800      	cmp	r0, #0
 801b1be:	dc06      	bgt.n	801b1ce <__sflush_r+0xfe>
 801b1c0:	89a3      	ldrh	r3, [r4, #12]
 801b1c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b1c6:	81a3      	strh	r3, [r4, #12]
 801b1c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b1cc:	e78e      	b.n	801b0ec <__sflush_r+0x1c>
 801b1ce:	4407      	add	r7, r0
 801b1d0:	eba8 0800 	sub.w	r8, r8, r0
 801b1d4:	e7e9      	b.n	801b1aa <__sflush_r+0xda>
 801b1d6:	bf00      	nop
 801b1d8:	20400001 	.word	0x20400001

0801b1dc <_fflush_r>:
 801b1dc:	b538      	push	{r3, r4, r5, lr}
 801b1de:	690b      	ldr	r3, [r1, #16]
 801b1e0:	4605      	mov	r5, r0
 801b1e2:	460c      	mov	r4, r1
 801b1e4:	b913      	cbnz	r3, 801b1ec <_fflush_r+0x10>
 801b1e6:	2500      	movs	r5, #0
 801b1e8:	4628      	mov	r0, r5
 801b1ea:	bd38      	pop	{r3, r4, r5, pc}
 801b1ec:	b118      	cbz	r0, 801b1f6 <_fflush_r+0x1a>
 801b1ee:	6983      	ldr	r3, [r0, #24]
 801b1f0:	b90b      	cbnz	r3, 801b1f6 <_fflush_r+0x1a>
 801b1f2:	f7ff f957 	bl	801a4a4 <__sinit>
 801b1f6:	4b14      	ldr	r3, [pc, #80]	; (801b248 <_fflush_r+0x6c>)
 801b1f8:	429c      	cmp	r4, r3
 801b1fa:	d11b      	bne.n	801b234 <_fflush_r+0x58>
 801b1fc:	686c      	ldr	r4, [r5, #4]
 801b1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b202:	2b00      	cmp	r3, #0
 801b204:	d0ef      	beq.n	801b1e6 <_fflush_r+0xa>
 801b206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b208:	07d0      	lsls	r0, r2, #31
 801b20a:	d404      	bmi.n	801b216 <_fflush_r+0x3a>
 801b20c:	0599      	lsls	r1, r3, #22
 801b20e:	d402      	bmi.n	801b216 <_fflush_r+0x3a>
 801b210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b212:	f7ff fac0 	bl	801a796 <__retarget_lock_acquire_recursive>
 801b216:	4628      	mov	r0, r5
 801b218:	4621      	mov	r1, r4
 801b21a:	f7ff ff59 	bl	801b0d0 <__sflush_r>
 801b21e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b220:	07da      	lsls	r2, r3, #31
 801b222:	4605      	mov	r5, r0
 801b224:	d4e0      	bmi.n	801b1e8 <_fflush_r+0xc>
 801b226:	89a3      	ldrh	r3, [r4, #12]
 801b228:	059b      	lsls	r3, r3, #22
 801b22a:	d4dd      	bmi.n	801b1e8 <_fflush_r+0xc>
 801b22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b22e:	f7ff fab3 	bl	801a798 <__retarget_lock_release_recursive>
 801b232:	e7d9      	b.n	801b1e8 <_fflush_r+0xc>
 801b234:	4b05      	ldr	r3, [pc, #20]	; (801b24c <_fflush_r+0x70>)
 801b236:	429c      	cmp	r4, r3
 801b238:	d101      	bne.n	801b23e <_fflush_r+0x62>
 801b23a:	68ac      	ldr	r4, [r5, #8]
 801b23c:	e7df      	b.n	801b1fe <_fflush_r+0x22>
 801b23e:	4b04      	ldr	r3, [pc, #16]	; (801b250 <_fflush_r+0x74>)
 801b240:	429c      	cmp	r4, r3
 801b242:	bf08      	it	eq
 801b244:	68ec      	ldreq	r4, [r5, #12]
 801b246:	e7da      	b.n	801b1fe <_fflush_r+0x22>
 801b248:	0801cf40 	.word	0x0801cf40
 801b24c:	0801cf60 	.word	0x0801cf60
 801b250:	0801cf20 	.word	0x0801cf20

0801b254 <fiprintf>:
 801b254:	b40e      	push	{r1, r2, r3}
 801b256:	b503      	push	{r0, r1, lr}
 801b258:	4601      	mov	r1, r0
 801b25a:	ab03      	add	r3, sp, #12
 801b25c:	4805      	ldr	r0, [pc, #20]	; (801b274 <fiprintf+0x20>)
 801b25e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b262:	6800      	ldr	r0, [r0, #0]
 801b264:	9301      	str	r3, [sp, #4]
 801b266:	f000 fa3f 	bl	801b6e8 <_vfiprintf_r>
 801b26a:	b002      	add	sp, #8
 801b26c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b270:	b003      	add	sp, #12
 801b272:	4770      	bx	lr
 801b274:	20000884 	.word	0x20000884

0801b278 <_lseek_r>:
 801b278:	b538      	push	{r3, r4, r5, lr}
 801b27a:	4d07      	ldr	r5, [pc, #28]	; (801b298 <_lseek_r+0x20>)
 801b27c:	4604      	mov	r4, r0
 801b27e:	4608      	mov	r0, r1
 801b280:	4611      	mov	r1, r2
 801b282:	2200      	movs	r2, #0
 801b284:	602a      	str	r2, [r5, #0]
 801b286:	461a      	mov	r2, r3
 801b288:	f7e7 f895 	bl	80023b6 <_lseek>
 801b28c:	1c43      	adds	r3, r0, #1
 801b28e:	d102      	bne.n	801b296 <_lseek_r+0x1e>
 801b290:	682b      	ldr	r3, [r5, #0]
 801b292:	b103      	cbz	r3, 801b296 <_lseek_r+0x1e>
 801b294:	6023      	str	r3, [r4, #0]
 801b296:	bd38      	pop	{r3, r4, r5, pc}
 801b298:	2001c964 	.word	0x2001c964

0801b29c <__swhatbuf_r>:
 801b29c:	b570      	push	{r4, r5, r6, lr}
 801b29e:	460e      	mov	r6, r1
 801b2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2a4:	2900      	cmp	r1, #0
 801b2a6:	b096      	sub	sp, #88	; 0x58
 801b2a8:	4614      	mov	r4, r2
 801b2aa:	461d      	mov	r5, r3
 801b2ac:	da08      	bge.n	801b2c0 <__swhatbuf_r+0x24>
 801b2ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b2b2:	2200      	movs	r2, #0
 801b2b4:	602a      	str	r2, [r5, #0]
 801b2b6:	061a      	lsls	r2, r3, #24
 801b2b8:	d410      	bmi.n	801b2dc <__swhatbuf_r+0x40>
 801b2ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b2be:	e00e      	b.n	801b2de <__swhatbuf_r+0x42>
 801b2c0:	466a      	mov	r2, sp
 801b2c2:	f000 fcef 	bl	801bca4 <_fstat_r>
 801b2c6:	2800      	cmp	r0, #0
 801b2c8:	dbf1      	blt.n	801b2ae <__swhatbuf_r+0x12>
 801b2ca:	9a01      	ldr	r2, [sp, #4]
 801b2cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b2d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b2d4:	425a      	negs	r2, r3
 801b2d6:	415a      	adcs	r2, r3
 801b2d8:	602a      	str	r2, [r5, #0]
 801b2da:	e7ee      	b.n	801b2ba <__swhatbuf_r+0x1e>
 801b2dc:	2340      	movs	r3, #64	; 0x40
 801b2de:	2000      	movs	r0, #0
 801b2e0:	6023      	str	r3, [r4, #0]
 801b2e2:	b016      	add	sp, #88	; 0x58
 801b2e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b2e8 <__smakebuf_r>:
 801b2e8:	898b      	ldrh	r3, [r1, #12]
 801b2ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b2ec:	079d      	lsls	r5, r3, #30
 801b2ee:	4606      	mov	r6, r0
 801b2f0:	460c      	mov	r4, r1
 801b2f2:	d507      	bpl.n	801b304 <__smakebuf_r+0x1c>
 801b2f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b2f8:	6023      	str	r3, [r4, #0]
 801b2fa:	6123      	str	r3, [r4, #16]
 801b2fc:	2301      	movs	r3, #1
 801b2fe:	6163      	str	r3, [r4, #20]
 801b300:	b002      	add	sp, #8
 801b302:	bd70      	pop	{r4, r5, r6, pc}
 801b304:	ab01      	add	r3, sp, #4
 801b306:	466a      	mov	r2, sp
 801b308:	f7ff ffc8 	bl	801b29c <__swhatbuf_r>
 801b30c:	9900      	ldr	r1, [sp, #0]
 801b30e:	4605      	mov	r5, r0
 801b310:	4630      	mov	r0, r6
 801b312:	f7ff faeb 	bl	801a8ec <_malloc_r>
 801b316:	b948      	cbnz	r0, 801b32c <__smakebuf_r+0x44>
 801b318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b31c:	059a      	lsls	r2, r3, #22
 801b31e:	d4ef      	bmi.n	801b300 <__smakebuf_r+0x18>
 801b320:	f023 0303 	bic.w	r3, r3, #3
 801b324:	f043 0302 	orr.w	r3, r3, #2
 801b328:	81a3      	strh	r3, [r4, #12]
 801b32a:	e7e3      	b.n	801b2f4 <__smakebuf_r+0xc>
 801b32c:	4b0d      	ldr	r3, [pc, #52]	; (801b364 <__smakebuf_r+0x7c>)
 801b32e:	62b3      	str	r3, [r6, #40]	; 0x28
 801b330:	89a3      	ldrh	r3, [r4, #12]
 801b332:	6020      	str	r0, [r4, #0]
 801b334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b338:	81a3      	strh	r3, [r4, #12]
 801b33a:	9b00      	ldr	r3, [sp, #0]
 801b33c:	6163      	str	r3, [r4, #20]
 801b33e:	9b01      	ldr	r3, [sp, #4]
 801b340:	6120      	str	r0, [r4, #16]
 801b342:	b15b      	cbz	r3, 801b35c <__smakebuf_r+0x74>
 801b344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b348:	4630      	mov	r0, r6
 801b34a:	f000 fcbd 	bl	801bcc8 <_isatty_r>
 801b34e:	b128      	cbz	r0, 801b35c <__smakebuf_r+0x74>
 801b350:	89a3      	ldrh	r3, [r4, #12]
 801b352:	f023 0303 	bic.w	r3, r3, #3
 801b356:	f043 0301 	orr.w	r3, r3, #1
 801b35a:	81a3      	strh	r3, [r4, #12]
 801b35c:	89a0      	ldrh	r0, [r4, #12]
 801b35e:	4305      	orrs	r5, r0
 801b360:	81a5      	strh	r5, [r4, #12]
 801b362:	e7cd      	b.n	801b300 <__smakebuf_r+0x18>
 801b364:	0801a43d 	.word	0x0801a43d

0801b368 <__malloc_lock>:
 801b368:	4801      	ldr	r0, [pc, #4]	; (801b370 <__malloc_lock+0x8>)
 801b36a:	f7ff ba14 	b.w	801a796 <__retarget_lock_acquire_recursive>
 801b36e:	bf00      	nop
 801b370:	2001c959 	.word	0x2001c959

0801b374 <__malloc_unlock>:
 801b374:	4801      	ldr	r0, [pc, #4]	; (801b37c <__malloc_unlock+0x8>)
 801b376:	f7ff ba0f 	b.w	801a798 <__retarget_lock_release_recursive>
 801b37a:	bf00      	nop
 801b37c:	2001c959 	.word	0x2001c959

0801b380 <_realloc_r>:
 801b380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b384:	4680      	mov	r8, r0
 801b386:	4614      	mov	r4, r2
 801b388:	460e      	mov	r6, r1
 801b38a:	b921      	cbnz	r1, 801b396 <_realloc_r+0x16>
 801b38c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b390:	4611      	mov	r1, r2
 801b392:	f7ff baab 	b.w	801a8ec <_malloc_r>
 801b396:	b92a      	cbnz	r2, 801b3a4 <_realloc_r+0x24>
 801b398:	f7ff fa3c 	bl	801a814 <_free_r>
 801b39c:	4625      	mov	r5, r4
 801b39e:	4628      	mov	r0, r5
 801b3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3a4:	f000 fcba 	bl	801bd1c <_malloc_usable_size_r>
 801b3a8:	4284      	cmp	r4, r0
 801b3aa:	4607      	mov	r7, r0
 801b3ac:	d802      	bhi.n	801b3b4 <_realloc_r+0x34>
 801b3ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b3b2:	d812      	bhi.n	801b3da <_realloc_r+0x5a>
 801b3b4:	4621      	mov	r1, r4
 801b3b6:	4640      	mov	r0, r8
 801b3b8:	f7ff fa98 	bl	801a8ec <_malloc_r>
 801b3bc:	4605      	mov	r5, r0
 801b3be:	2800      	cmp	r0, #0
 801b3c0:	d0ed      	beq.n	801b39e <_realloc_r+0x1e>
 801b3c2:	42bc      	cmp	r4, r7
 801b3c4:	4622      	mov	r2, r4
 801b3c6:	4631      	mov	r1, r6
 801b3c8:	bf28      	it	cs
 801b3ca:	463a      	movcs	r2, r7
 801b3cc:	f7ff f9f6 	bl	801a7bc <memcpy>
 801b3d0:	4631      	mov	r1, r6
 801b3d2:	4640      	mov	r0, r8
 801b3d4:	f7ff fa1e 	bl	801a814 <_free_r>
 801b3d8:	e7e1      	b.n	801b39e <_realloc_r+0x1e>
 801b3da:	4635      	mov	r5, r6
 801b3dc:	e7df      	b.n	801b39e <_realloc_r+0x1e>

0801b3de <__ssputs_r>:
 801b3de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3e2:	688e      	ldr	r6, [r1, #8]
 801b3e4:	429e      	cmp	r6, r3
 801b3e6:	4682      	mov	sl, r0
 801b3e8:	460c      	mov	r4, r1
 801b3ea:	4690      	mov	r8, r2
 801b3ec:	461f      	mov	r7, r3
 801b3ee:	d838      	bhi.n	801b462 <__ssputs_r+0x84>
 801b3f0:	898a      	ldrh	r2, [r1, #12]
 801b3f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b3f6:	d032      	beq.n	801b45e <__ssputs_r+0x80>
 801b3f8:	6825      	ldr	r5, [r4, #0]
 801b3fa:	6909      	ldr	r1, [r1, #16]
 801b3fc:	eba5 0901 	sub.w	r9, r5, r1
 801b400:	6965      	ldr	r5, [r4, #20]
 801b402:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b406:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b40a:	3301      	adds	r3, #1
 801b40c:	444b      	add	r3, r9
 801b40e:	106d      	asrs	r5, r5, #1
 801b410:	429d      	cmp	r5, r3
 801b412:	bf38      	it	cc
 801b414:	461d      	movcc	r5, r3
 801b416:	0553      	lsls	r3, r2, #21
 801b418:	d531      	bpl.n	801b47e <__ssputs_r+0xa0>
 801b41a:	4629      	mov	r1, r5
 801b41c:	f7ff fa66 	bl	801a8ec <_malloc_r>
 801b420:	4606      	mov	r6, r0
 801b422:	b950      	cbnz	r0, 801b43a <__ssputs_r+0x5c>
 801b424:	230c      	movs	r3, #12
 801b426:	f8ca 3000 	str.w	r3, [sl]
 801b42a:	89a3      	ldrh	r3, [r4, #12]
 801b42c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b430:	81a3      	strh	r3, [r4, #12]
 801b432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b43a:	6921      	ldr	r1, [r4, #16]
 801b43c:	464a      	mov	r2, r9
 801b43e:	f7ff f9bd 	bl	801a7bc <memcpy>
 801b442:	89a3      	ldrh	r3, [r4, #12]
 801b444:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b44c:	81a3      	strh	r3, [r4, #12]
 801b44e:	6126      	str	r6, [r4, #16]
 801b450:	6165      	str	r5, [r4, #20]
 801b452:	444e      	add	r6, r9
 801b454:	eba5 0509 	sub.w	r5, r5, r9
 801b458:	6026      	str	r6, [r4, #0]
 801b45a:	60a5      	str	r5, [r4, #8]
 801b45c:	463e      	mov	r6, r7
 801b45e:	42be      	cmp	r6, r7
 801b460:	d900      	bls.n	801b464 <__ssputs_r+0x86>
 801b462:	463e      	mov	r6, r7
 801b464:	6820      	ldr	r0, [r4, #0]
 801b466:	4632      	mov	r2, r6
 801b468:	4641      	mov	r1, r8
 801b46a:	f000 fc3d 	bl	801bce8 <memmove>
 801b46e:	68a3      	ldr	r3, [r4, #8]
 801b470:	1b9b      	subs	r3, r3, r6
 801b472:	60a3      	str	r3, [r4, #8]
 801b474:	6823      	ldr	r3, [r4, #0]
 801b476:	4433      	add	r3, r6
 801b478:	6023      	str	r3, [r4, #0]
 801b47a:	2000      	movs	r0, #0
 801b47c:	e7db      	b.n	801b436 <__ssputs_r+0x58>
 801b47e:	462a      	mov	r2, r5
 801b480:	f7ff ff7e 	bl	801b380 <_realloc_r>
 801b484:	4606      	mov	r6, r0
 801b486:	2800      	cmp	r0, #0
 801b488:	d1e1      	bne.n	801b44e <__ssputs_r+0x70>
 801b48a:	6921      	ldr	r1, [r4, #16]
 801b48c:	4650      	mov	r0, sl
 801b48e:	f7ff f9c1 	bl	801a814 <_free_r>
 801b492:	e7c7      	b.n	801b424 <__ssputs_r+0x46>

0801b494 <_svfiprintf_r>:
 801b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b498:	4698      	mov	r8, r3
 801b49a:	898b      	ldrh	r3, [r1, #12]
 801b49c:	061b      	lsls	r3, r3, #24
 801b49e:	b09d      	sub	sp, #116	; 0x74
 801b4a0:	4607      	mov	r7, r0
 801b4a2:	460d      	mov	r5, r1
 801b4a4:	4614      	mov	r4, r2
 801b4a6:	d50e      	bpl.n	801b4c6 <_svfiprintf_r+0x32>
 801b4a8:	690b      	ldr	r3, [r1, #16]
 801b4aa:	b963      	cbnz	r3, 801b4c6 <_svfiprintf_r+0x32>
 801b4ac:	2140      	movs	r1, #64	; 0x40
 801b4ae:	f7ff fa1d 	bl	801a8ec <_malloc_r>
 801b4b2:	6028      	str	r0, [r5, #0]
 801b4b4:	6128      	str	r0, [r5, #16]
 801b4b6:	b920      	cbnz	r0, 801b4c2 <_svfiprintf_r+0x2e>
 801b4b8:	230c      	movs	r3, #12
 801b4ba:	603b      	str	r3, [r7, #0]
 801b4bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b4c0:	e0d1      	b.n	801b666 <_svfiprintf_r+0x1d2>
 801b4c2:	2340      	movs	r3, #64	; 0x40
 801b4c4:	616b      	str	r3, [r5, #20]
 801b4c6:	2300      	movs	r3, #0
 801b4c8:	9309      	str	r3, [sp, #36]	; 0x24
 801b4ca:	2320      	movs	r3, #32
 801b4cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b4d0:	f8cd 800c 	str.w	r8, [sp, #12]
 801b4d4:	2330      	movs	r3, #48	; 0x30
 801b4d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b680 <_svfiprintf_r+0x1ec>
 801b4da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b4de:	f04f 0901 	mov.w	r9, #1
 801b4e2:	4623      	mov	r3, r4
 801b4e4:	469a      	mov	sl, r3
 801b4e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b4ea:	b10a      	cbz	r2, 801b4f0 <_svfiprintf_r+0x5c>
 801b4ec:	2a25      	cmp	r2, #37	; 0x25
 801b4ee:	d1f9      	bne.n	801b4e4 <_svfiprintf_r+0x50>
 801b4f0:	ebba 0b04 	subs.w	fp, sl, r4
 801b4f4:	d00b      	beq.n	801b50e <_svfiprintf_r+0x7a>
 801b4f6:	465b      	mov	r3, fp
 801b4f8:	4622      	mov	r2, r4
 801b4fa:	4629      	mov	r1, r5
 801b4fc:	4638      	mov	r0, r7
 801b4fe:	f7ff ff6e 	bl	801b3de <__ssputs_r>
 801b502:	3001      	adds	r0, #1
 801b504:	f000 80aa 	beq.w	801b65c <_svfiprintf_r+0x1c8>
 801b508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b50a:	445a      	add	r2, fp
 801b50c:	9209      	str	r2, [sp, #36]	; 0x24
 801b50e:	f89a 3000 	ldrb.w	r3, [sl]
 801b512:	2b00      	cmp	r3, #0
 801b514:	f000 80a2 	beq.w	801b65c <_svfiprintf_r+0x1c8>
 801b518:	2300      	movs	r3, #0
 801b51a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b51e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b522:	f10a 0a01 	add.w	sl, sl, #1
 801b526:	9304      	str	r3, [sp, #16]
 801b528:	9307      	str	r3, [sp, #28]
 801b52a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b52e:	931a      	str	r3, [sp, #104]	; 0x68
 801b530:	4654      	mov	r4, sl
 801b532:	2205      	movs	r2, #5
 801b534:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b538:	4851      	ldr	r0, [pc, #324]	; (801b680 <_svfiprintf_r+0x1ec>)
 801b53a:	f7e4 fe61 	bl	8000200 <memchr>
 801b53e:	9a04      	ldr	r2, [sp, #16]
 801b540:	b9d8      	cbnz	r0, 801b57a <_svfiprintf_r+0xe6>
 801b542:	06d0      	lsls	r0, r2, #27
 801b544:	bf44      	itt	mi
 801b546:	2320      	movmi	r3, #32
 801b548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b54c:	0711      	lsls	r1, r2, #28
 801b54e:	bf44      	itt	mi
 801b550:	232b      	movmi	r3, #43	; 0x2b
 801b552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b556:	f89a 3000 	ldrb.w	r3, [sl]
 801b55a:	2b2a      	cmp	r3, #42	; 0x2a
 801b55c:	d015      	beq.n	801b58a <_svfiprintf_r+0xf6>
 801b55e:	9a07      	ldr	r2, [sp, #28]
 801b560:	4654      	mov	r4, sl
 801b562:	2000      	movs	r0, #0
 801b564:	f04f 0c0a 	mov.w	ip, #10
 801b568:	4621      	mov	r1, r4
 801b56a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b56e:	3b30      	subs	r3, #48	; 0x30
 801b570:	2b09      	cmp	r3, #9
 801b572:	d94e      	bls.n	801b612 <_svfiprintf_r+0x17e>
 801b574:	b1b0      	cbz	r0, 801b5a4 <_svfiprintf_r+0x110>
 801b576:	9207      	str	r2, [sp, #28]
 801b578:	e014      	b.n	801b5a4 <_svfiprintf_r+0x110>
 801b57a:	eba0 0308 	sub.w	r3, r0, r8
 801b57e:	fa09 f303 	lsl.w	r3, r9, r3
 801b582:	4313      	orrs	r3, r2
 801b584:	9304      	str	r3, [sp, #16]
 801b586:	46a2      	mov	sl, r4
 801b588:	e7d2      	b.n	801b530 <_svfiprintf_r+0x9c>
 801b58a:	9b03      	ldr	r3, [sp, #12]
 801b58c:	1d19      	adds	r1, r3, #4
 801b58e:	681b      	ldr	r3, [r3, #0]
 801b590:	9103      	str	r1, [sp, #12]
 801b592:	2b00      	cmp	r3, #0
 801b594:	bfbb      	ittet	lt
 801b596:	425b      	neglt	r3, r3
 801b598:	f042 0202 	orrlt.w	r2, r2, #2
 801b59c:	9307      	strge	r3, [sp, #28]
 801b59e:	9307      	strlt	r3, [sp, #28]
 801b5a0:	bfb8      	it	lt
 801b5a2:	9204      	strlt	r2, [sp, #16]
 801b5a4:	7823      	ldrb	r3, [r4, #0]
 801b5a6:	2b2e      	cmp	r3, #46	; 0x2e
 801b5a8:	d10c      	bne.n	801b5c4 <_svfiprintf_r+0x130>
 801b5aa:	7863      	ldrb	r3, [r4, #1]
 801b5ac:	2b2a      	cmp	r3, #42	; 0x2a
 801b5ae:	d135      	bne.n	801b61c <_svfiprintf_r+0x188>
 801b5b0:	9b03      	ldr	r3, [sp, #12]
 801b5b2:	1d1a      	adds	r2, r3, #4
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	9203      	str	r2, [sp, #12]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	bfb8      	it	lt
 801b5bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b5c0:	3402      	adds	r4, #2
 801b5c2:	9305      	str	r3, [sp, #20]
 801b5c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b690 <_svfiprintf_r+0x1fc>
 801b5c8:	7821      	ldrb	r1, [r4, #0]
 801b5ca:	2203      	movs	r2, #3
 801b5cc:	4650      	mov	r0, sl
 801b5ce:	f7e4 fe17 	bl	8000200 <memchr>
 801b5d2:	b140      	cbz	r0, 801b5e6 <_svfiprintf_r+0x152>
 801b5d4:	2340      	movs	r3, #64	; 0x40
 801b5d6:	eba0 000a 	sub.w	r0, r0, sl
 801b5da:	fa03 f000 	lsl.w	r0, r3, r0
 801b5de:	9b04      	ldr	r3, [sp, #16]
 801b5e0:	4303      	orrs	r3, r0
 801b5e2:	3401      	adds	r4, #1
 801b5e4:	9304      	str	r3, [sp, #16]
 801b5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5ea:	4826      	ldr	r0, [pc, #152]	; (801b684 <_svfiprintf_r+0x1f0>)
 801b5ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b5f0:	2206      	movs	r2, #6
 801b5f2:	f7e4 fe05 	bl	8000200 <memchr>
 801b5f6:	2800      	cmp	r0, #0
 801b5f8:	d038      	beq.n	801b66c <_svfiprintf_r+0x1d8>
 801b5fa:	4b23      	ldr	r3, [pc, #140]	; (801b688 <_svfiprintf_r+0x1f4>)
 801b5fc:	bb1b      	cbnz	r3, 801b646 <_svfiprintf_r+0x1b2>
 801b5fe:	9b03      	ldr	r3, [sp, #12]
 801b600:	3307      	adds	r3, #7
 801b602:	f023 0307 	bic.w	r3, r3, #7
 801b606:	3308      	adds	r3, #8
 801b608:	9303      	str	r3, [sp, #12]
 801b60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b60c:	4433      	add	r3, r6
 801b60e:	9309      	str	r3, [sp, #36]	; 0x24
 801b610:	e767      	b.n	801b4e2 <_svfiprintf_r+0x4e>
 801b612:	fb0c 3202 	mla	r2, ip, r2, r3
 801b616:	460c      	mov	r4, r1
 801b618:	2001      	movs	r0, #1
 801b61a:	e7a5      	b.n	801b568 <_svfiprintf_r+0xd4>
 801b61c:	2300      	movs	r3, #0
 801b61e:	3401      	adds	r4, #1
 801b620:	9305      	str	r3, [sp, #20]
 801b622:	4619      	mov	r1, r3
 801b624:	f04f 0c0a 	mov.w	ip, #10
 801b628:	4620      	mov	r0, r4
 801b62a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b62e:	3a30      	subs	r2, #48	; 0x30
 801b630:	2a09      	cmp	r2, #9
 801b632:	d903      	bls.n	801b63c <_svfiprintf_r+0x1a8>
 801b634:	2b00      	cmp	r3, #0
 801b636:	d0c5      	beq.n	801b5c4 <_svfiprintf_r+0x130>
 801b638:	9105      	str	r1, [sp, #20]
 801b63a:	e7c3      	b.n	801b5c4 <_svfiprintf_r+0x130>
 801b63c:	fb0c 2101 	mla	r1, ip, r1, r2
 801b640:	4604      	mov	r4, r0
 801b642:	2301      	movs	r3, #1
 801b644:	e7f0      	b.n	801b628 <_svfiprintf_r+0x194>
 801b646:	ab03      	add	r3, sp, #12
 801b648:	9300      	str	r3, [sp, #0]
 801b64a:	462a      	mov	r2, r5
 801b64c:	4b0f      	ldr	r3, [pc, #60]	; (801b68c <_svfiprintf_r+0x1f8>)
 801b64e:	a904      	add	r1, sp, #16
 801b650:	4638      	mov	r0, r7
 801b652:	f3af 8000 	nop.w
 801b656:	1c42      	adds	r2, r0, #1
 801b658:	4606      	mov	r6, r0
 801b65a:	d1d6      	bne.n	801b60a <_svfiprintf_r+0x176>
 801b65c:	89ab      	ldrh	r3, [r5, #12]
 801b65e:	065b      	lsls	r3, r3, #25
 801b660:	f53f af2c 	bmi.w	801b4bc <_svfiprintf_r+0x28>
 801b664:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b666:	b01d      	add	sp, #116	; 0x74
 801b668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b66c:	ab03      	add	r3, sp, #12
 801b66e:	9300      	str	r3, [sp, #0]
 801b670:	462a      	mov	r2, r5
 801b672:	4b06      	ldr	r3, [pc, #24]	; (801b68c <_svfiprintf_r+0x1f8>)
 801b674:	a904      	add	r1, sp, #16
 801b676:	4638      	mov	r0, r7
 801b678:	f000 f9d4 	bl	801ba24 <_printf_i>
 801b67c:	e7eb      	b.n	801b656 <_svfiprintf_r+0x1c2>
 801b67e:	bf00      	nop
 801b680:	0801d032 	.word	0x0801d032
 801b684:	0801d03c 	.word	0x0801d03c
 801b688:	00000000 	.word	0x00000000
 801b68c:	0801b3df 	.word	0x0801b3df
 801b690:	0801d038 	.word	0x0801d038

0801b694 <__sfputc_r>:
 801b694:	6893      	ldr	r3, [r2, #8]
 801b696:	3b01      	subs	r3, #1
 801b698:	2b00      	cmp	r3, #0
 801b69a:	b410      	push	{r4}
 801b69c:	6093      	str	r3, [r2, #8]
 801b69e:	da08      	bge.n	801b6b2 <__sfputc_r+0x1e>
 801b6a0:	6994      	ldr	r4, [r2, #24]
 801b6a2:	42a3      	cmp	r3, r4
 801b6a4:	db01      	blt.n	801b6aa <__sfputc_r+0x16>
 801b6a6:	290a      	cmp	r1, #10
 801b6a8:	d103      	bne.n	801b6b2 <__sfputc_r+0x1e>
 801b6aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b6ae:	f7ff bc03 	b.w	801aeb8 <__swbuf_r>
 801b6b2:	6813      	ldr	r3, [r2, #0]
 801b6b4:	1c58      	adds	r0, r3, #1
 801b6b6:	6010      	str	r0, [r2, #0]
 801b6b8:	7019      	strb	r1, [r3, #0]
 801b6ba:	4608      	mov	r0, r1
 801b6bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b6c0:	4770      	bx	lr

0801b6c2 <__sfputs_r>:
 801b6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6c4:	4606      	mov	r6, r0
 801b6c6:	460f      	mov	r7, r1
 801b6c8:	4614      	mov	r4, r2
 801b6ca:	18d5      	adds	r5, r2, r3
 801b6cc:	42ac      	cmp	r4, r5
 801b6ce:	d101      	bne.n	801b6d4 <__sfputs_r+0x12>
 801b6d0:	2000      	movs	r0, #0
 801b6d2:	e007      	b.n	801b6e4 <__sfputs_r+0x22>
 801b6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6d8:	463a      	mov	r2, r7
 801b6da:	4630      	mov	r0, r6
 801b6dc:	f7ff ffda 	bl	801b694 <__sfputc_r>
 801b6e0:	1c43      	adds	r3, r0, #1
 801b6e2:	d1f3      	bne.n	801b6cc <__sfputs_r+0xa>
 801b6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b6e8 <_vfiprintf_r>:
 801b6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6ec:	460d      	mov	r5, r1
 801b6ee:	b09d      	sub	sp, #116	; 0x74
 801b6f0:	4614      	mov	r4, r2
 801b6f2:	4698      	mov	r8, r3
 801b6f4:	4606      	mov	r6, r0
 801b6f6:	b118      	cbz	r0, 801b700 <_vfiprintf_r+0x18>
 801b6f8:	6983      	ldr	r3, [r0, #24]
 801b6fa:	b90b      	cbnz	r3, 801b700 <_vfiprintf_r+0x18>
 801b6fc:	f7fe fed2 	bl	801a4a4 <__sinit>
 801b700:	4b89      	ldr	r3, [pc, #548]	; (801b928 <_vfiprintf_r+0x240>)
 801b702:	429d      	cmp	r5, r3
 801b704:	d11b      	bne.n	801b73e <_vfiprintf_r+0x56>
 801b706:	6875      	ldr	r5, [r6, #4]
 801b708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b70a:	07d9      	lsls	r1, r3, #31
 801b70c:	d405      	bmi.n	801b71a <_vfiprintf_r+0x32>
 801b70e:	89ab      	ldrh	r3, [r5, #12]
 801b710:	059a      	lsls	r2, r3, #22
 801b712:	d402      	bmi.n	801b71a <_vfiprintf_r+0x32>
 801b714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b716:	f7ff f83e 	bl	801a796 <__retarget_lock_acquire_recursive>
 801b71a:	89ab      	ldrh	r3, [r5, #12]
 801b71c:	071b      	lsls	r3, r3, #28
 801b71e:	d501      	bpl.n	801b724 <_vfiprintf_r+0x3c>
 801b720:	692b      	ldr	r3, [r5, #16]
 801b722:	b9eb      	cbnz	r3, 801b760 <_vfiprintf_r+0x78>
 801b724:	4629      	mov	r1, r5
 801b726:	4630      	mov	r0, r6
 801b728:	f7ff fc2a 	bl	801af80 <__swsetup_r>
 801b72c:	b1c0      	cbz	r0, 801b760 <_vfiprintf_r+0x78>
 801b72e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b730:	07dc      	lsls	r4, r3, #31
 801b732:	d50e      	bpl.n	801b752 <_vfiprintf_r+0x6a>
 801b734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b738:	b01d      	add	sp, #116	; 0x74
 801b73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b73e:	4b7b      	ldr	r3, [pc, #492]	; (801b92c <_vfiprintf_r+0x244>)
 801b740:	429d      	cmp	r5, r3
 801b742:	d101      	bne.n	801b748 <_vfiprintf_r+0x60>
 801b744:	68b5      	ldr	r5, [r6, #8]
 801b746:	e7df      	b.n	801b708 <_vfiprintf_r+0x20>
 801b748:	4b79      	ldr	r3, [pc, #484]	; (801b930 <_vfiprintf_r+0x248>)
 801b74a:	429d      	cmp	r5, r3
 801b74c:	bf08      	it	eq
 801b74e:	68f5      	ldreq	r5, [r6, #12]
 801b750:	e7da      	b.n	801b708 <_vfiprintf_r+0x20>
 801b752:	89ab      	ldrh	r3, [r5, #12]
 801b754:	0598      	lsls	r0, r3, #22
 801b756:	d4ed      	bmi.n	801b734 <_vfiprintf_r+0x4c>
 801b758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b75a:	f7ff f81d 	bl	801a798 <__retarget_lock_release_recursive>
 801b75e:	e7e9      	b.n	801b734 <_vfiprintf_r+0x4c>
 801b760:	2300      	movs	r3, #0
 801b762:	9309      	str	r3, [sp, #36]	; 0x24
 801b764:	2320      	movs	r3, #32
 801b766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b76a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b76e:	2330      	movs	r3, #48	; 0x30
 801b770:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b934 <_vfiprintf_r+0x24c>
 801b774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b778:	f04f 0901 	mov.w	r9, #1
 801b77c:	4623      	mov	r3, r4
 801b77e:	469a      	mov	sl, r3
 801b780:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b784:	b10a      	cbz	r2, 801b78a <_vfiprintf_r+0xa2>
 801b786:	2a25      	cmp	r2, #37	; 0x25
 801b788:	d1f9      	bne.n	801b77e <_vfiprintf_r+0x96>
 801b78a:	ebba 0b04 	subs.w	fp, sl, r4
 801b78e:	d00b      	beq.n	801b7a8 <_vfiprintf_r+0xc0>
 801b790:	465b      	mov	r3, fp
 801b792:	4622      	mov	r2, r4
 801b794:	4629      	mov	r1, r5
 801b796:	4630      	mov	r0, r6
 801b798:	f7ff ff93 	bl	801b6c2 <__sfputs_r>
 801b79c:	3001      	adds	r0, #1
 801b79e:	f000 80aa 	beq.w	801b8f6 <_vfiprintf_r+0x20e>
 801b7a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b7a4:	445a      	add	r2, fp
 801b7a6:	9209      	str	r2, [sp, #36]	; 0x24
 801b7a8:	f89a 3000 	ldrb.w	r3, [sl]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	f000 80a2 	beq.w	801b8f6 <_vfiprintf_r+0x20e>
 801b7b2:	2300      	movs	r3, #0
 801b7b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b7b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b7bc:	f10a 0a01 	add.w	sl, sl, #1
 801b7c0:	9304      	str	r3, [sp, #16]
 801b7c2:	9307      	str	r3, [sp, #28]
 801b7c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b7c8:	931a      	str	r3, [sp, #104]	; 0x68
 801b7ca:	4654      	mov	r4, sl
 801b7cc:	2205      	movs	r2, #5
 801b7ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b7d2:	4858      	ldr	r0, [pc, #352]	; (801b934 <_vfiprintf_r+0x24c>)
 801b7d4:	f7e4 fd14 	bl	8000200 <memchr>
 801b7d8:	9a04      	ldr	r2, [sp, #16]
 801b7da:	b9d8      	cbnz	r0, 801b814 <_vfiprintf_r+0x12c>
 801b7dc:	06d1      	lsls	r1, r2, #27
 801b7de:	bf44      	itt	mi
 801b7e0:	2320      	movmi	r3, #32
 801b7e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b7e6:	0713      	lsls	r3, r2, #28
 801b7e8:	bf44      	itt	mi
 801b7ea:	232b      	movmi	r3, #43	; 0x2b
 801b7ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b7f0:	f89a 3000 	ldrb.w	r3, [sl]
 801b7f4:	2b2a      	cmp	r3, #42	; 0x2a
 801b7f6:	d015      	beq.n	801b824 <_vfiprintf_r+0x13c>
 801b7f8:	9a07      	ldr	r2, [sp, #28]
 801b7fa:	4654      	mov	r4, sl
 801b7fc:	2000      	movs	r0, #0
 801b7fe:	f04f 0c0a 	mov.w	ip, #10
 801b802:	4621      	mov	r1, r4
 801b804:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b808:	3b30      	subs	r3, #48	; 0x30
 801b80a:	2b09      	cmp	r3, #9
 801b80c:	d94e      	bls.n	801b8ac <_vfiprintf_r+0x1c4>
 801b80e:	b1b0      	cbz	r0, 801b83e <_vfiprintf_r+0x156>
 801b810:	9207      	str	r2, [sp, #28]
 801b812:	e014      	b.n	801b83e <_vfiprintf_r+0x156>
 801b814:	eba0 0308 	sub.w	r3, r0, r8
 801b818:	fa09 f303 	lsl.w	r3, r9, r3
 801b81c:	4313      	orrs	r3, r2
 801b81e:	9304      	str	r3, [sp, #16]
 801b820:	46a2      	mov	sl, r4
 801b822:	e7d2      	b.n	801b7ca <_vfiprintf_r+0xe2>
 801b824:	9b03      	ldr	r3, [sp, #12]
 801b826:	1d19      	adds	r1, r3, #4
 801b828:	681b      	ldr	r3, [r3, #0]
 801b82a:	9103      	str	r1, [sp, #12]
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	bfbb      	ittet	lt
 801b830:	425b      	neglt	r3, r3
 801b832:	f042 0202 	orrlt.w	r2, r2, #2
 801b836:	9307      	strge	r3, [sp, #28]
 801b838:	9307      	strlt	r3, [sp, #28]
 801b83a:	bfb8      	it	lt
 801b83c:	9204      	strlt	r2, [sp, #16]
 801b83e:	7823      	ldrb	r3, [r4, #0]
 801b840:	2b2e      	cmp	r3, #46	; 0x2e
 801b842:	d10c      	bne.n	801b85e <_vfiprintf_r+0x176>
 801b844:	7863      	ldrb	r3, [r4, #1]
 801b846:	2b2a      	cmp	r3, #42	; 0x2a
 801b848:	d135      	bne.n	801b8b6 <_vfiprintf_r+0x1ce>
 801b84a:	9b03      	ldr	r3, [sp, #12]
 801b84c:	1d1a      	adds	r2, r3, #4
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	9203      	str	r2, [sp, #12]
 801b852:	2b00      	cmp	r3, #0
 801b854:	bfb8      	it	lt
 801b856:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b85a:	3402      	adds	r4, #2
 801b85c:	9305      	str	r3, [sp, #20]
 801b85e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b944 <_vfiprintf_r+0x25c>
 801b862:	7821      	ldrb	r1, [r4, #0]
 801b864:	2203      	movs	r2, #3
 801b866:	4650      	mov	r0, sl
 801b868:	f7e4 fcca 	bl	8000200 <memchr>
 801b86c:	b140      	cbz	r0, 801b880 <_vfiprintf_r+0x198>
 801b86e:	2340      	movs	r3, #64	; 0x40
 801b870:	eba0 000a 	sub.w	r0, r0, sl
 801b874:	fa03 f000 	lsl.w	r0, r3, r0
 801b878:	9b04      	ldr	r3, [sp, #16]
 801b87a:	4303      	orrs	r3, r0
 801b87c:	3401      	adds	r4, #1
 801b87e:	9304      	str	r3, [sp, #16]
 801b880:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b884:	482c      	ldr	r0, [pc, #176]	; (801b938 <_vfiprintf_r+0x250>)
 801b886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b88a:	2206      	movs	r2, #6
 801b88c:	f7e4 fcb8 	bl	8000200 <memchr>
 801b890:	2800      	cmp	r0, #0
 801b892:	d03f      	beq.n	801b914 <_vfiprintf_r+0x22c>
 801b894:	4b29      	ldr	r3, [pc, #164]	; (801b93c <_vfiprintf_r+0x254>)
 801b896:	bb1b      	cbnz	r3, 801b8e0 <_vfiprintf_r+0x1f8>
 801b898:	9b03      	ldr	r3, [sp, #12]
 801b89a:	3307      	adds	r3, #7
 801b89c:	f023 0307 	bic.w	r3, r3, #7
 801b8a0:	3308      	adds	r3, #8
 801b8a2:	9303      	str	r3, [sp, #12]
 801b8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8a6:	443b      	add	r3, r7
 801b8a8:	9309      	str	r3, [sp, #36]	; 0x24
 801b8aa:	e767      	b.n	801b77c <_vfiprintf_r+0x94>
 801b8ac:	fb0c 3202 	mla	r2, ip, r2, r3
 801b8b0:	460c      	mov	r4, r1
 801b8b2:	2001      	movs	r0, #1
 801b8b4:	e7a5      	b.n	801b802 <_vfiprintf_r+0x11a>
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	3401      	adds	r4, #1
 801b8ba:	9305      	str	r3, [sp, #20]
 801b8bc:	4619      	mov	r1, r3
 801b8be:	f04f 0c0a 	mov.w	ip, #10
 801b8c2:	4620      	mov	r0, r4
 801b8c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b8c8:	3a30      	subs	r2, #48	; 0x30
 801b8ca:	2a09      	cmp	r2, #9
 801b8cc:	d903      	bls.n	801b8d6 <_vfiprintf_r+0x1ee>
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d0c5      	beq.n	801b85e <_vfiprintf_r+0x176>
 801b8d2:	9105      	str	r1, [sp, #20]
 801b8d4:	e7c3      	b.n	801b85e <_vfiprintf_r+0x176>
 801b8d6:	fb0c 2101 	mla	r1, ip, r1, r2
 801b8da:	4604      	mov	r4, r0
 801b8dc:	2301      	movs	r3, #1
 801b8de:	e7f0      	b.n	801b8c2 <_vfiprintf_r+0x1da>
 801b8e0:	ab03      	add	r3, sp, #12
 801b8e2:	9300      	str	r3, [sp, #0]
 801b8e4:	462a      	mov	r2, r5
 801b8e6:	4b16      	ldr	r3, [pc, #88]	; (801b940 <_vfiprintf_r+0x258>)
 801b8e8:	a904      	add	r1, sp, #16
 801b8ea:	4630      	mov	r0, r6
 801b8ec:	f3af 8000 	nop.w
 801b8f0:	4607      	mov	r7, r0
 801b8f2:	1c78      	adds	r0, r7, #1
 801b8f4:	d1d6      	bne.n	801b8a4 <_vfiprintf_r+0x1bc>
 801b8f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b8f8:	07d9      	lsls	r1, r3, #31
 801b8fa:	d405      	bmi.n	801b908 <_vfiprintf_r+0x220>
 801b8fc:	89ab      	ldrh	r3, [r5, #12]
 801b8fe:	059a      	lsls	r2, r3, #22
 801b900:	d402      	bmi.n	801b908 <_vfiprintf_r+0x220>
 801b902:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b904:	f7fe ff48 	bl	801a798 <__retarget_lock_release_recursive>
 801b908:	89ab      	ldrh	r3, [r5, #12]
 801b90a:	065b      	lsls	r3, r3, #25
 801b90c:	f53f af12 	bmi.w	801b734 <_vfiprintf_r+0x4c>
 801b910:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b912:	e711      	b.n	801b738 <_vfiprintf_r+0x50>
 801b914:	ab03      	add	r3, sp, #12
 801b916:	9300      	str	r3, [sp, #0]
 801b918:	462a      	mov	r2, r5
 801b91a:	4b09      	ldr	r3, [pc, #36]	; (801b940 <_vfiprintf_r+0x258>)
 801b91c:	a904      	add	r1, sp, #16
 801b91e:	4630      	mov	r0, r6
 801b920:	f000 f880 	bl	801ba24 <_printf_i>
 801b924:	e7e4      	b.n	801b8f0 <_vfiprintf_r+0x208>
 801b926:	bf00      	nop
 801b928:	0801cf40 	.word	0x0801cf40
 801b92c:	0801cf60 	.word	0x0801cf60
 801b930:	0801cf20 	.word	0x0801cf20
 801b934:	0801d032 	.word	0x0801d032
 801b938:	0801d03c 	.word	0x0801d03c
 801b93c:	00000000 	.word	0x00000000
 801b940:	0801b6c3 	.word	0x0801b6c3
 801b944:	0801d038 	.word	0x0801d038

0801b948 <_printf_common>:
 801b948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b94c:	4616      	mov	r6, r2
 801b94e:	4699      	mov	r9, r3
 801b950:	688a      	ldr	r2, [r1, #8]
 801b952:	690b      	ldr	r3, [r1, #16]
 801b954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b958:	4293      	cmp	r3, r2
 801b95a:	bfb8      	it	lt
 801b95c:	4613      	movlt	r3, r2
 801b95e:	6033      	str	r3, [r6, #0]
 801b960:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b964:	4607      	mov	r7, r0
 801b966:	460c      	mov	r4, r1
 801b968:	b10a      	cbz	r2, 801b96e <_printf_common+0x26>
 801b96a:	3301      	adds	r3, #1
 801b96c:	6033      	str	r3, [r6, #0]
 801b96e:	6823      	ldr	r3, [r4, #0]
 801b970:	0699      	lsls	r1, r3, #26
 801b972:	bf42      	ittt	mi
 801b974:	6833      	ldrmi	r3, [r6, #0]
 801b976:	3302      	addmi	r3, #2
 801b978:	6033      	strmi	r3, [r6, #0]
 801b97a:	6825      	ldr	r5, [r4, #0]
 801b97c:	f015 0506 	ands.w	r5, r5, #6
 801b980:	d106      	bne.n	801b990 <_printf_common+0x48>
 801b982:	f104 0a19 	add.w	sl, r4, #25
 801b986:	68e3      	ldr	r3, [r4, #12]
 801b988:	6832      	ldr	r2, [r6, #0]
 801b98a:	1a9b      	subs	r3, r3, r2
 801b98c:	42ab      	cmp	r3, r5
 801b98e:	dc26      	bgt.n	801b9de <_printf_common+0x96>
 801b990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b994:	1e13      	subs	r3, r2, #0
 801b996:	6822      	ldr	r2, [r4, #0]
 801b998:	bf18      	it	ne
 801b99a:	2301      	movne	r3, #1
 801b99c:	0692      	lsls	r2, r2, #26
 801b99e:	d42b      	bmi.n	801b9f8 <_printf_common+0xb0>
 801b9a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b9a4:	4649      	mov	r1, r9
 801b9a6:	4638      	mov	r0, r7
 801b9a8:	47c0      	blx	r8
 801b9aa:	3001      	adds	r0, #1
 801b9ac:	d01e      	beq.n	801b9ec <_printf_common+0xa4>
 801b9ae:	6823      	ldr	r3, [r4, #0]
 801b9b0:	68e5      	ldr	r5, [r4, #12]
 801b9b2:	6832      	ldr	r2, [r6, #0]
 801b9b4:	f003 0306 	and.w	r3, r3, #6
 801b9b8:	2b04      	cmp	r3, #4
 801b9ba:	bf08      	it	eq
 801b9bc:	1aad      	subeq	r5, r5, r2
 801b9be:	68a3      	ldr	r3, [r4, #8]
 801b9c0:	6922      	ldr	r2, [r4, #16]
 801b9c2:	bf0c      	ite	eq
 801b9c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b9c8:	2500      	movne	r5, #0
 801b9ca:	4293      	cmp	r3, r2
 801b9cc:	bfc4      	itt	gt
 801b9ce:	1a9b      	subgt	r3, r3, r2
 801b9d0:	18ed      	addgt	r5, r5, r3
 801b9d2:	2600      	movs	r6, #0
 801b9d4:	341a      	adds	r4, #26
 801b9d6:	42b5      	cmp	r5, r6
 801b9d8:	d11a      	bne.n	801ba10 <_printf_common+0xc8>
 801b9da:	2000      	movs	r0, #0
 801b9dc:	e008      	b.n	801b9f0 <_printf_common+0xa8>
 801b9de:	2301      	movs	r3, #1
 801b9e0:	4652      	mov	r2, sl
 801b9e2:	4649      	mov	r1, r9
 801b9e4:	4638      	mov	r0, r7
 801b9e6:	47c0      	blx	r8
 801b9e8:	3001      	adds	r0, #1
 801b9ea:	d103      	bne.n	801b9f4 <_printf_common+0xac>
 801b9ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9f4:	3501      	adds	r5, #1
 801b9f6:	e7c6      	b.n	801b986 <_printf_common+0x3e>
 801b9f8:	18e1      	adds	r1, r4, r3
 801b9fa:	1c5a      	adds	r2, r3, #1
 801b9fc:	2030      	movs	r0, #48	; 0x30
 801b9fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ba02:	4422      	add	r2, r4
 801ba04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ba08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ba0c:	3302      	adds	r3, #2
 801ba0e:	e7c7      	b.n	801b9a0 <_printf_common+0x58>
 801ba10:	2301      	movs	r3, #1
 801ba12:	4622      	mov	r2, r4
 801ba14:	4649      	mov	r1, r9
 801ba16:	4638      	mov	r0, r7
 801ba18:	47c0      	blx	r8
 801ba1a:	3001      	adds	r0, #1
 801ba1c:	d0e6      	beq.n	801b9ec <_printf_common+0xa4>
 801ba1e:	3601      	adds	r6, #1
 801ba20:	e7d9      	b.n	801b9d6 <_printf_common+0x8e>
	...

0801ba24 <_printf_i>:
 801ba24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ba28:	7e0f      	ldrb	r7, [r1, #24]
 801ba2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ba2c:	2f78      	cmp	r7, #120	; 0x78
 801ba2e:	4691      	mov	r9, r2
 801ba30:	4680      	mov	r8, r0
 801ba32:	460c      	mov	r4, r1
 801ba34:	469a      	mov	sl, r3
 801ba36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ba3a:	d807      	bhi.n	801ba4c <_printf_i+0x28>
 801ba3c:	2f62      	cmp	r7, #98	; 0x62
 801ba3e:	d80a      	bhi.n	801ba56 <_printf_i+0x32>
 801ba40:	2f00      	cmp	r7, #0
 801ba42:	f000 80d8 	beq.w	801bbf6 <_printf_i+0x1d2>
 801ba46:	2f58      	cmp	r7, #88	; 0x58
 801ba48:	f000 80a3 	beq.w	801bb92 <_printf_i+0x16e>
 801ba4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ba50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ba54:	e03a      	b.n	801bacc <_printf_i+0xa8>
 801ba56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ba5a:	2b15      	cmp	r3, #21
 801ba5c:	d8f6      	bhi.n	801ba4c <_printf_i+0x28>
 801ba5e:	a101      	add	r1, pc, #4	; (adr r1, 801ba64 <_printf_i+0x40>)
 801ba60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ba64:	0801babd 	.word	0x0801babd
 801ba68:	0801bad1 	.word	0x0801bad1
 801ba6c:	0801ba4d 	.word	0x0801ba4d
 801ba70:	0801ba4d 	.word	0x0801ba4d
 801ba74:	0801ba4d 	.word	0x0801ba4d
 801ba78:	0801ba4d 	.word	0x0801ba4d
 801ba7c:	0801bad1 	.word	0x0801bad1
 801ba80:	0801ba4d 	.word	0x0801ba4d
 801ba84:	0801ba4d 	.word	0x0801ba4d
 801ba88:	0801ba4d 	.word	0x0801ba4d
 801ba8c:	0801ba4d 	.word	0x0801ba4d
 801ba90:	0801bbdd 	.word	0x0801bbdd
 801ba94:	0801bb01 	.word	0x0801bb01
 801ba98:	0801bbbf 	.word	0x0801bbbf
 801ba9c:	0801ba4d 	.word	0x0801ba4d
 801baa0:	0801ba4d 	.word	0x0801ba4d
 801baa4:	0801bbff 	.word	0x0801bbff
 801baa8:	0801ba4d 	.word	0x0801ba4d
 801baac:	0801bb01 	.word	0x0801bb01
 801bab0:	0801ba4d 	.word	0x0801ba4d
 801bab4:	0801ba4d 	.word	0x0801ba4d
 801bab8:	0801bbc7 	.word	0x0801bbc7
 801babc:	682b      	ldr	r3, [r5, #0]
 801babe:	1d1a      	adds	r2, r3, #4
 801bac0:	681b      	ldr	r3, [r3, #0]
 801bac2:	602a      	str	r2, [r5, #0]
 801bac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bacc:	2301      	movs	r3, #1
 801bace:	e0a3      	b.n	801bc18 <_printf_i+0x1f4>
 801bad0:	6820      	ldr	r0, [r4, #0]
 801bad2:	6829      	ldr	r1, [r5, #0]
 801bad4:	0606      	lsls	r6, r0, #24
 801bad6:	f101 0304 	add.w	r3, r1, #4
 801bada:	d50a      	bpl.n	801baf2 <_printf_i+0xce>
 801badc:	680e      	ldr	r6, [r1, #0]
 801bade:	602b      	str	r3, [r5, #0]
 801bae0:	2e00      	cmp	r6, #0
 801bae2:	da03      	bge.n	801baec <_printf_i+0xc8>
 801bae4:	232d      	movs	r3, #45	; 0x2d
 801bae6:	4276      	negs	r6, r6
 801bae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801baec:	485e      	ldr	r0, [pc, #376]	; (801bc68 <_printf_i+0x244>)
 801baee:	230a      	movs	r3, #10
 801baf0:	e019      	b.n	801bb26 <_printf_i+0x102>
 801baf2:	680e      	ldr	r6, [r1, #0]
 801baf4:	602b      	str	r3, [r5, #0]
 801baf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bafa:	bf18      	it	ne
 801bafc:	b236      	sxthne	r6, r6
 801bafe:	e7ef      	b.n	801bae0 <_printf_i+0xbc>
 801bb00:	682b      	ldr	r3, [r5, #0]
 801bb02:	6820      	ldr	r0, [r4, #0]
 801bb04:	1d19      	adds	r1, r3, #4
 801bb06:	6029      	str	r1, [r5, #0]
 801bb08:	0601      	lsls	r1, r0, #24
 801bb0a:	d501      	bpl.n	801bb10 <_printf_i+0xec>
 801bb0c:	681e      	ldr	r6, [r3, #0]
 801bb0e:	e002      	b.n	801bb16 <_printf_i+0xf2>
 801bb10:	0646      	lsls	r6, r0, #25
 801bb12:	d5fb      	bpl.n	801bb0c <_printf_i+0xe8>
 801bb14:	881e      	ldrh	r6, [r3, #0]
 801bb16:	4854      	ldr	r0, [pc, #336]	; (801bc68 <_printf_i+0x244>)
 801bb18:	2f6f      	cmp	r7, #111	; 0x6f
 801bb1a:	bf0c      	ite	eq
 801bb1c:	2308      	moveq	r3, #8
 801bb1e:	230a      	movne	r3, #10
 801bb20:	2100      	movs	r1, #0
 801bb22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bb26:	6865      	ldr	r5, [r4, #4]
 801bb28:	60a5      	str	r5, [r4, #8]
 801bb2a:	2d00      	cmp	r5, #0
 801bb2c:	bfa2      	ittt	ge
 801bb2e:	6821      	ldrge	r1, [r4, #0]
 801bb30:	f021 0104 	bicge.w	r1, r1, #4
 801bb34:	6021      	strge	r1, [r4, #0]
 801bb36:	b90e      	cbnz	r6, 801bb3c <_printf_i+0x118>
 801bb38:	2d00      	cmp	r5, #0
 801bb3a:	d04d      	beq.n	801bbd8 <_printf_i+0x1b4>
 801bb3c:	4615      	mov	r5, r2
 801bb3e:	fbb6 f1f3 	udiv	r1, r6, r3
 801bb42:	fb03 6711 	mls	r7, r3, r1, r6
 801bb46:	5dc7      	ldrb	r7, [r0, r7]
 801bb48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801bb4c:	4637      	mov	r7, r6
 801bb4e:	42bb      	cmp	r3, r7
 801bb50:	460e      	mov	r6, r1
 801bb52:	d9f4      	bls.n	801bb3e <_printf_i+0x11a>
 801bb54:	2b08      	cmp	r3, #8
 801bb56:	d10b      	bne.n	801bb70 <_printf_i+0x14c>
 801bb58:	6823      	ldr	r3, [r4, #0]
 801bb5a:	07de      	lsls	r6, r3, #31
 801bb5c:	d508      	bpl.n	801bb70 <_printf_i+0x14c>
 801bb5e:	6923      	ldr	r3, [r4, #16]
 801bb60:	6861      	ldr	r1, [r4, #4]
 801bb62:	4299      	cmp	r1, r3
 801bb64:	bfde      	ittt	le
 801bb66:	2330      	movle	r3, #48	; 0x30
 801bb68:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bb6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801bb70:	1b52      	subs	r2, r2, r5
 801bb72:	6122      	str	r2, [r4, #16]
 801bb74:	f8cd a000 	str.w	sl, [sp]
 801bb78:	464b      	mov	r3, r9
 801bb7a:	aa03      	add	r2, sp, #12
 801bb7c:	4621      	mov	r1, r4
 801bb7e:	4640      	mov	r0, r8
 801bb80:	f7ff fee2 	bl	801b948 <_printf_common>
 801bb84:	3001      	adds	r0, #1
 801bb86:	d14c      	bne.n	801bc22 <_printf_i+0x1fe>
 801bb88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bb8c:	b004      	add	sp, #16
 801bb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb92:	4835      	ldr	r0, [pc, #212]	; (801bc68 <_printf_i+0x244>)
 801bb94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801bb98:	6829      	ldr	r1, [r5, #0]
 801bb9a:	6823      	ldr	r3, [r4, #0]
 801bb9c:	f851 6b04 	ldr.w	r6, [r1], #4
 801bba0:	6029      	str	r1, [r5, #0]
 801bba2:	061d      	lsls	r5, r3, #24
 801bba4:	d514      	bpl.n	801bbd0 <_printf_i+0x1ac>
 801bba6:	07df      	lsls	r7, r3, #31
 801bba8:	bf44      	itt	mi
 801bbaa:	f043 0320 	orrmi.w	r3, r3, #32
 801bbae:	6023      	strmi	r3, [r4, #0]
 801bbb0:	b91e      	cbnz	r6, 801bbba <_printf_i+0x196>
 801bbb2:	6823      	ldr	r3, [r4, #0]
 801bbb4:	f023 0320 	bic.w	r3, r3, #32
 801bbb8:	6023      	str	r3, [r4, #0]
 801bbba:	2310      	movs	r3, #16
 801bbbc:	e7b0      	b.n	801bb20 <_printf_i+0xfc>
 801bbbe:	6823      	ldr	r3, [r4, #0]
 801bbc0:	f043 0320 	orr.w	r3, r3, #32
 801bbc4:	6023      	str	r3, [r4, #0]
 801bbc6:	2378      	movs	r3, #120	; 0x78
 801bbc8:	4828      	ldr	r0, [pc, #160]	; (801bc6c <_printf_i+0x248>)
 801bbca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bbce:	e7e3      	b.n	801bb98 <_printf_i+0x174>
 801bbd0:	0659      	lsls	r1, r3, #25
 801bbd2:	bf48      	it	mi
 801bbd4:	b2b6      	uxthmi	r6, r6
 801bbd6:	e7e6      	b.n	801bba6 <_printf_i+0x182>
 801bbd8:	4615      	mov	r5, r2
 801bbda:	e7bb      	b.n	801bb54 <_printf_i+0x130>
 801bbdc:	682b      	ldr	r3, [r5, #0]
 801bbde:	6826      	ldr	r6, [r4, #0]
 801bbe0:	6961      	ldr	r1, [r4, #20]
 801bbe2:	1d18      	adds	r0, r3, #4
 801bbe4:	6028      	str	r0, [r5, #0]
 801bbe6:	0635      	lsls	r5, r6, #24
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	d501      	bpl.n	801bbf0 <_printf_i+0x1cc>
 801bbec:	6019      	str	r1, [r3, #0]
 801bbee:	e002      	b.n	801bbf6 <_printf_i+0x1d2>
 801bbf0:	0670      	lsls	r0, r6, #25
 801bbf2:	d5fb      	bpl.n	801bbec <_printf_i+0x1c8>
 801bbf4:	8019      	strh	r1, [r3, #0]
 801bbf6:	2300      	movs	r3, #0
 801bbf8:	6123      	str	r3, [r4, #16]
 801bbfa:	4615      	mov	r5, r2
 801bbfc:	e7ba      	b.n	801bb74 <_printf_i+0x150>
 801bbfe:	682b      	ldr	r3, [r5, #0]
 801bc00:	1d1a      	adds	r2, r3, #4
 801bc02:	602a      	str	r2, [r5, #0]
 801bc04:	681d      	ldr	r5, [r3, #0]
 801bc06:	6862      	ldr	r2, [r4, #4]
 801bc08:	2100      	movs	r1, #0
 801bc0a:	4628      	mov	r0, r5
 801bc0c:	f7e4 faf8 	bl	8000200 <memchr>
 801bc10:	b108      	cbz	r0, 801bc16 <_printf_i+0x1f2>
 801bc12:	1b40      	subs	r0, r0, r5
 801bc14:	6060      	str	r0, [r4, #4]
 801bc16:	6863      	ldr	r3, [r4, #4]
 801bc18:	6123      	str	r3, [r4, #16]
 801bc1a:	2300      	movs	r3, #0
 801bc1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bc20:	e7a8      	b.n	801bb74 <_printf_i+0x150>
 801bc22:	6923      	ldr	r3, [r4, #16]
 801bc24:	462a      	mov	r2, r5
 801bc26:	4649      	mov	r1, r9
 801bc28:	4640      	mov	r0, r8
 801bc2a:	47d0      	blx	sl
 801bc2c:	3001      	adds	r0, #1
 801bc2e:	d0ab      	beq.n	801bb88 <_printf_i+0x164>
 801bc30:	6823      	ldr	r3, [r4, #0]
 801bc32:	079b      	lsls	r3, r3, #30
 801bc34:	d413      	bmi.n	801bc5e <_printf_i+0x23a>
 801bc36:	68e0      	ldr	r0, [r4, #12]
 801bc38:	9b03      	ldr	r3, [sp, #12]
 801bc3a:	4298      	cmp	r0, r3
 801bc3c:	bfb8      	it	lt
 801bc3e:	4618      	movlt	r0, r3
 801bc40:	e7a4      	b.n	801bb8c <_printf_i+0x168>
 801bc42:	2301      	movs	r3, #1
 801bc44:	4632      	mov	r2, r6
 801bc46:	4649      	mov	r1, r9
 801bc48:	4640      	mov	r0, r8
 801bc4a:	47d0      	blx	sl
 801bc4c:	3001      	adds	r0, #1
 801bc4e:	d09b      	beq.n	801bb88 <_printf_i+0x164>
 801bc50:	3501      	adds	r5, #1
 801bc52:	68e3      	ldr	r3, [r4, #12]
 801bc54:	9903      	ldr	r1, [sp, #12]
 801bc56:	1a5b      	subs	r3, r3, r1
 801bc58:	42ab      	cmp	r3, r5
 801bc5a:	dcf2      	bgt.n	801bc42 <_printf_i+0x21e>
 801bc5c:	e7eb      	b.n	801bc36 <_printf_i+0x212>
 801bc5e:	2500      	movs	r5, #0
 801bc60:	f104 0619 	add.w	r6, r4, #25
 801bc64:	e7f5      	b.n	801bc52 <_printf_i+0x22e>
 801bc66:	bf00      	nop
 801bc68:	0801d043 	.word	0x0801d043
 801bc6c:	0801d054 	.word	0x0801d054

0801bc70 <_read_r>:
 801bc70:	b538      	push	{r3, r4, r5, lr}
 801bc72:	4d07      	ldr	r5, [pc, #28]	; (801bc90 <_read_r+0x20>)
 801bc74:	4604      	mov	r4, r0
 801bc76:	4608      	mov	r0, r1
 801bc78:	4611      	mov	r1, r2
 801bc7a:	2200      	movs	r2, #0
 801bc7c:	602a      	str	r2, [r5, #0]
 801bc7e:	461a      	mov	r2, r3
 801bc80:	f7e6 fb02 	bl	8002288 <_read>
 801bc84:	1c43      	adds	r3, r0, #1
 801bc86:	d102      	bne.n	801bc8e <_read_r+0x1e>
 801bc88:	682b      	ldr	r3, [r5, #0]
 801bc8a:	b103      	cbz	r3, 801bc8e <_read_r+0x1e>
 801bc8c:	6023      	str	r3, [r4, #0]
 801bc8e:	bd38      	pop	{r3, r4, r5, pc}
 801bc90:	2001c964 	.word	0x2001c964

0801bc94 <abort>:
 801bc94:	b508      	push	{r3, lr}
 801bc96:	2006      	movs	r0, #6
 801bc98:	f000 f870 	bl	801bd7c <raise>
 801bc9c:	2001      	movs	r0, #1
 801bc9e:	f7e6 fae9 	bl	8002274 <_exit>
	...

0801bca4 <_fstat_r>:
 801bca4:	b538      	push	{r3, r4, r5, lr}
 801bca6:	4d07      	ldr	r5, [pc, #28]	; (801bcc4 <_fstat_r+0x20>)
 801bca8:	2300      	movs	r3, #0
 801bcaa:	4604      	mov	r4, r0
 801bcac:	4608      	mov	r0, r1
 801bcae:	4611      	mov	r1, r2
 801bcb0:	602b      	str	r3, [r5, #0]
 801bcb2:	f7e6 fb65 	bl	8002380 <_fstat>
 801bcb6:	1c43      	adds	r3, r0, #1
 801bcb8:	d102      	bne.n	801bcc0 <_fstat_r+0x1c>
 801bcba:	682b      	ldr	r3, [r5, #0]
 801bcbc:	b103      	cbz	r3, 801bcc0 <_fstat_r+0x1c>
 801bcbe:	6023      	str	r3, [r4, #0]
 801bcc0:	bd38      	pop	{r3, r4, r5, pc}
 801bcc2:	bf00      	nop
 801bcc4:	2001c964 	.word	0x2001c964

0801bcc8 <_isatty_r>:
 801bcc8:	b538      	push	{r3, r4, r5, lr}
 801bcca:	4d06      	ldr	r5, [pc, #24]	; (801bce4 <_isatty_r+0x1c>)
 801bccc:	2300      	movs	r3, #0
 801bcce:	4604      	mov	r4, r0
 801bcd0:	4608      	mov	r0, r1
 801bcd2:	602b      	str	r3, [r5, #0]
 801bcd4:	f7e6 fb64 	bl	80023a0 <_isatty>
 801bcd8:	1c43      	adds	r3, r0, #1
 801bcda:	d102      	bne.n	801bce2 <_isatty_r+0x1a>
 801bcdc:	682b      	ldr	r3, [r5, #0]
 801bcde:	b103      	cbz	r3, 801bce2 <_isatty_r+0x1a>
 801bce0:	6023      	str	r3, [r4, #0]
 801bce2:	bd38      	pop	{r3, r4, r5, pc}
 801bce4:	2001c964 	.word	0x2001c964

0801bce8 <memmove>:
 801bce8:	4288      	cmp	r0, r1
 801bcea:	b510      	push	{r4, lr}
 801bcec:	eb01 0402 	add.w	r4, r1, r2
 801bcf0:	d902      	bls.n	801bcf8 <memmove+0x10>
 801bcf2:	4284      	cmp	r4, r0
 801bcf4:	4623      	mov	r3, r4
 801bcf6:	d807      	bhi.n	801bd08 <memmove+0x20>
 801bcf8:	1e43      	subs	r3, r0, #1
 801bcfa:	42a1      	cmp	r1, r4
 801bcfc:	d008      	beq.n	801bd10 <memmove+0x28>
 801bcfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bd02:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bd06:	e7f8      	b.n	801bcfa <memmove+0x12>
 801bd08:	4402      	add	r2, r0
 801bd0a:	4601      	mov	r1, r0
 801bd0c:	428a      	cmp	r2, r1
 801bd0e:	d100      	bne.n	801bd12 <memmove+0x2a>
 801bd10:	bd10      	pop	{r4, pc}
 801bd12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bd16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bd1a:	e7f7      	b.n	801bd0c <memmove+0x24>

0801bd1c <_malloc_usable_size_r>:
 801bd1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bd20:	1f18      	subs	r0, r3, #4
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	bfbc      	itt	lt
 801bd26:	580b      	ldrlt	r3, [r1, r0]
 801bd28:	18c0      	addlt	r0, r0, r3
 801bd2a:	4770      	bx	lr

0801bd2c <_raise_r>:
 801bd2c:	291f      	cmp	r1, #31
 801bd2e:	b538      	push	{r3, r4, r5, lr}
 801bd30:	4604      	mov	r4, r0
 801bd32:	460d      	mov	r5, r1
 801bd34:	d904      	bls.n	801bd40 <_raise_r+0x14>
 801bd36:	2316      	movs	r3, #22
 801bd38:	6003      	str	r3, [r0, #0]
 801bd3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd3e:	bd38      	pop	{r3, r4, r5, pc}
 801bd40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bd42:	b112      	cbz	r2, 801bd4a <_raise_r+0x1e>
 801bd44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bd48:	b94b      	cbnz	r3, 801bd5e <_raise_r+0x32>
 801bd4a:	4620      	mov	r0, r4
 801bd4c:	f000 f830 	bl	801bdb0 <_getpid_r>
 801bd50:	462a      	mov	r2, r5
 801bd52:	4601      	mov	r1, r0
 801bd54:	4620      	mov	r0, r4
 801bd56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd5a:	f000 b817 	b.w	801bd8c <_kill_r>
 801bd5e:	2b01      	cmp	r3, #1
 801bd60:	d00a      	beq.n	801bd78 <_raise_r+0x4c>
 801bd62:	1c59      	adds	r1, r3, #1
 801bd64:	d103      	bne.n	801bd6e <_raise_r+0x42>
 801bd66:	2316      	movs	r3, #22
 801bd68:	6003      	str	r3, [r0, #0]
 801bd6a:	2001      	movs	r0, #1
 801bd6c:	e7e7      	b.n	801bd3e <_raise_r+0x12>
 801bd6e:	2400      	movs	r4, #0
 801bd70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bd74:	4628      	mov	r0, r5
 801bd76:	4798      	blx	r3
 801bd78:	2000      	movs	r0, #0
 801bd7a:	e7e0      	b.n	801bd3e <_raise_r+0x12>

0801bd7c <raise>:
 801bd7c:	4b02      	ldr	r3, [pc, #8]	; (801bd88 <raise+0xc>)
 801bd7e:	4601      	mov	r1, r0
 801bd80:	6818      	ldr	r0, [r3, #0]
 801bd82:	f7ff bfd3 	b.w	801bd2c <_raise_r>
 801bd86:	bf00      	nop
 801bd88:	20000884 	.word	0x20000884

0801bd8c <_kill_r>:
 801bd8c:	b538      	push	{r3, r4, r5, lr}
 801bd8e:	4d07      	ldr	r5, [pc, #28]	; (801bdac <_kill_r+0x20>)
 801bd90:	2300      	movs	r3, #0
 801bd92:	4604      	mov	r4, r0
 801bd94:	4608      	mov	r0, r1
 801bd96:	4611      	mov	r1, r2
 801bd98:	602b      	str	r3, [r5, #0]
 801bd9a:	f7e6 fa5b 	bl	8002254 <_kill>
 801bd9e:	1c43      	adds	r3, r0, #1
 801bda0:	d102      	bne.n	801bda8 <_kill_r+0x1c>
 801bda2:	682b      	ldr	r3, [r5, #0]
 801bda4:	b103      	cbz	r3, 801bda8 <_kill_r+0x1c>
 801bda6:	6023      	str	r3, [r4, #0]
 801bda8:	bd38      	pop	{r3, r4, r5, pc}
 801bdaa:	bf00      	nop
 801bdac:	2001c964 	.word	0x2001c964

0801bdb0 <_getpid_r>:
 801bdb0:	f7e6 ba48 	b.w	8002244 <_getpid>

0801bdb4 <_init>:
 801bdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdb6:	bf00      	nop
 801bdb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bdba:	bc08      	pop	{r3}
 801bdbc:	469e      	mov	lr, r3
 801bdbe:	4770      	bx	lr

0801bdc0 <_fini>:
 801bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdc2:	bf00      	nop
 801bdc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bdc6:	bc08      	pop	{r3}
 801bdc8:	469e      	mov	lr, r3
 801bdca:	4770      	bx	lr
