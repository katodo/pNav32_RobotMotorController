
pNav32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c588  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013c8  0801c718  0801c718  0002c718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dae0  0801dae0  00030a20  2**0
                  CONTENTS
  4 .ARM          00000008  0801dae0  0801dae0  0002dae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dae8  0801dae8  00030a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0801dae8  0801dae8  0002dae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801db00  0801db00  0002db00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a20  20000000  0801db04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030a20  2**0
                  CONTENTS
 10 .bss          000158f0  20000a20  20000a20  00030a20  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20016310  20016310  00030a20  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030a20  2**0
                  CONTENTS, READONLY
 13 .debug_info   000330a2  00000000  00000000  00030a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007559  00000000  00000000  00063af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002718  00000000  00000000  0006b050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000023f0  00000000  00000000  0006d768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f177  00000000  00000000  0006fb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003562f  00000000  00000000  0009eccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9312  00000000  00000000  000d42fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000083  00000000  00000000  001cd610  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b194  00000000  00000000  001cd694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a20 	.word	0x20000a20
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c700 	.word	0x0801c700

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a24 	.word	0x20000a24
 80001cc:	0801c700 	.word	0x0801c700

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_ldivmod>:
 80006b8:	b97b      	cbnz	r3, 80006da <__aeabi_ldivmod+0x22>
 80006ba:	b972      	cbnz	r2, 80006da <__aeabi_ldivmod+0x22>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bfbe      	ittt	lt
 80006c0:	2000      	movlt	r0, #0
 80006c2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80006c6:	e006      	blt.n	80006d6 <__aeabi_ldivmod+0x1e>
 80006c8:	bf08      	it	eq
 80006ca:	2800      	cmpeq	r0, #0
 80006cc:	bf1c      	itt	ne
 80006ce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80006d2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006d6:	f000 b9bf 	b.w	8000a58 <__aeabi_idiv0>
 80006da:	f1ad 0c08 	sub.w	ip, sp, #8
 80006de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e2:	2900      	cmp	r1, #0
 80006e4:	db09      	blt.n	80006fa <__aeabi_ldivmod+0x42>
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db1a      	blt.n	8000720 <__aeabi_ldivmod+0x68>
 80006ea:	f000 f84d 	bl	8000788 <__udivmoddi4>
 80006ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f6:	b004      	add	sp, #16
 80006f8:	4770      	bx	lr
 80006fa:	4240      	negs	r0, r0
 80006fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000700:	2b00      	cmp	r3, #0
 8000702:	db1b      	blt.n	800073c <__aeabi_ldivmod+0x84>
 8000704:	f000 f840 	bl	8000788 <__udivmoddi4>
 8000708:	f8dd e004 	ldr.w	lr, [sp, #4]
 800070c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000710:	b004      	add	sp, #16
 8000712:	4240      	negs	r0, r0
 8000714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000718:	4252      	negs	r2, r2
 800071a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800071e:	4770      	bx	lr
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	f000 f82f 	bl	8000788 <__udivmoddi4>
 800072a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800072e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000732:	b004      	add	sp, #16
 8000734:	4240      	negs	r0, r0
 8000736:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073a:	4770      	bx	lr
 800073c:	4252      	negs	r2, r2
 800073e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000742:	f000 f821 	bl	8000788 <__udivmoddi4>
 8000746:	f8dd e004 	ldr.w	lr, [sp, #4]
 800074a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800074e:	b004      	add	sp, #16
 8000750:	4252      	negs	r2, r2
 8000752:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000756:	4770      	bx	lr

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000768:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800076c:	f000 b974 	b.w	8000a58 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f806 	bl	8000788 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__udivmoddi4>:
 8000788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800078c:	9d08      	ldr	r5, [sp, #32]
 800078e:	4604      	mov	r4, r0
 8000790:	468e      	mov	lr, r1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d14d      	bne.n	8000832 <__udivmoddi4+0xaa>
 8000796:	428a      	cmp	r2, r1
 8000798:	4694      	mov	ip, r2
 800079a:	d969      	bls.n	8000870 <__udivmoddi4+0xe8>
 800079c:	fab2 f282 	clz	r2, r2
 80007a0:	b152      	cbz	r2, 80007b8 <__udivmoddi4+0x30>
 80007a2:	fa01 f302 	lsl.w	r3, r1, r2
 80007a6:	f1c2 0120 	rsb	r1, r2, #32
 80007aa:	fa20 f101 	lsr.w	r1, r0, r1
 80007ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80007b2:	ea41 0e03 	orr.w	lr, r1, r3
 80007b6:	4094      	lsls	r4, r2
 80007b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007bc:	0c21      	lsrs	r1, r4, #16
 80007be:	fbbe f6f8 	udiv	r6, lr, r8
 80007c2:	fa1f f78c 	uxth.w	r7, ip
 80007c6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ce:	fb06 f107 	mul.w	r1, r6, r7
 80007d2:	4299      	cmp	r1, r3
 80007d4:	d90a      	bls.n	80007ec <__udivmoddi4+0x64>
 80007d6:	eb1c 0303 	adds.w	r3, ip, r3
 80007da:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007de:	f080 811f 	bcs.w	8000a20 <__udivmoddi4+0x298>
 80007e2:	4299      	cmp	r1, r3
 80007e4:	f240 811c 	bls.w	8000a20 <__udivmoddi4+0x298>
 80007e8:	3e02      	subs	r6, #2
 80007ea:	4463      	add	r3, ip
 80007ec:	1a5b      	subs	r3, r3, r1
 80007ee:	b2a4      	uxth	r4, r4
 80007f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007f4:	fb08 3310 	mls	r3, r8, r0, r3
 80007f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007fc:	fb00 f707 	mul.w	r7, r0, r7
 8000800:	42a7      	cmp	r7, r4
 8000802:	d90a      	bls.n	800081a <__udivmoddi4+0x92>
 8000804:	eb1c 0404 	adds.w	r4, ip, r4
 8000808:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800080c:	f080 810a 	bcs.w	8000a24 <__udivmoddi4+0x29c>
 8000810:	42a7      	cmp	r7, r4
 8000812:	f240 8107 	bls.w	8000a24 <__udivmoddi4+0x29c>
 8000816:	4464      	add	r4, ip
 8000818:	3802      	subs	r0, #2
 800081a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800081e:	1be4      	subs	r4, r4, r7
 8000820:	2600      	movs	r6, #0
 8000822:	b11d      	cbz	r5, 800082c <__udivmoddi4+0xa4>
 8000824:	40d4      	lsrs	r4, r2
 8000826:	2300      	movs	r3, #0
 8000828:	e9c5 4300 	strd	r4, r3, [r5]
 800082c:	4631      	mov	r1, r6
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	428b      	cmp	r3, r1
 8000834:	d909      	bls.n	800084a <__udivmoddi4+0xc2>
 8000836:	2d00      	cmp	r5, #0
 8000838:	f000 80ef 	beq.w	8000a1a <__udivmoddi4+0x292>
 800083c:	2600      	movs	r6, #0
 800083e:	e9c5 0100 	strd	r0, r1, [r5]
 8000842:	4630      	mov	r0, r6
 8000844:	4631      	mov	r1, r6
 8000846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084a:	fab3 f683 	clz	r6, r3
 800084e:	2e00      	cmp	r6, #0
 8000850:	d14a      	bne.n	80008e8 <__udivmoddi4+0x160>
 8000852:	428b      	cmp	r3, r1
 8000854:	d302      	bcc.n	800085c <__udivmoddi4+0xd4>
 8000856:	4282      	cmp	r2, r0
 8000858:	f200 80f9 	bhi.w	8000a4e <__udivmoddi4+0x2c6>
 800085c:	1a84      	subs	r4, r0, r2
 800085e:	eb61 0303 	sbc.w	r3, r1, r3
 8000862:	2001      	movs	r0, #1
 8000864:	469e      	mov	lr, r3
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e0      	beq.n	800082c <__udivmoddi4+0xa4>
 800086a:	e9c5 4e00 	strd	r4, lr, [r5]
 800086e:	e7dd      	b.n	800082c <__udivmoddi4+0xa4>
 8000870:	b902      	cbnz	r2, 8000874 <__udivmoddi4+0xec>
 8000872:	deff      	udf	#255	; 0xff
 8000874:	fab2 f282 	clz	r2, r2
 8000878:	2a00      	cmp	r2, #0
 800087a:	f040 8092 	bne.w	80009a2 <__udivmoddi4+0x21a>
 800087e:	eba1 010c 	sub.w	r1, r1, ip
 8000882:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000886:	fa1f fe8c 	uxth.w	lr, ip
 800088a:	2601      	movs	r6, #1
 800088c:	0c20      	lsrs	r0, r4, #16
 800088e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000892:	fb07 1113 	mls	r1, r7, r3, r1
 8000896:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089a:	fb0e f003 	mul.w	r0, lr, r3
 800089e:	4288      	cmp	r0, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0x12c>
 80008a2:	eb1c 0101 	adds.w	r1, ip, r1
 80008a6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x12a>
 80008ac:	4288      	cmp	r0, r1
 80008ae:	f200 80cb 	bhi.w	8000a48 <__udivmoddi4+0x2c0>
 80008b2:	4643      	mov	r3, r8
 80008b4:	1a09      	subs	r1, r1, r0
 80008b6:	b2a4      	uxth	r4, r4
 80008b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008bc:	fb07 1110 	mls	r1, r7, r0, r1
 80008c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008c4:	fb0e fe00 	mul.w	lr, lr, r0
 80008c8:	45a6      	cmp	lr, r4
 80008ca:	d908      	bls.n	80008de <__udivmoddi4+0x156>
 80008cc:	eb1c 0404 	adds.w	r4, ip, r4
 80008d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008d4:	d202      	bcs.n	80008dc <__udivmoddi4+0x154>
 80008d6:	45a6      	cmp	lr, r4
 80008d8:	f200 80bb 	bhi.w	8000a52 <__udivmoddi4+0x2ca>
 80008dc:	4608      	mov	r0, r1
 80008de:	eba4 040e 	sub.w	r4, r4, lr
 80008e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008e6:	e79c      	b.n	8000822 <__udivmoddi4+0x9a>
 80008e8:	f1c6 0720 	rsb	r7, r6, #32
 80008ec:	40b3      	lsls	r3, r6
 80008ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80008f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008f6:	fa20 f407 	lsr.w	r4, r0, r7
 80008fa:	fa01 f306 	lsl.w	r3, r1, r6
 80008fe:	431c      	orrs	r4, r3
 8000900:	40f9      	lsrs	r1, r7
 8000902:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000906:	fa00 f306 	lsl.w	r3, r0, r6
 800090a:	fbb1 f8f9 	udiv	r8, r1, r9
 800090e:	0c20      	lsrs	r0, r4, #16
 8000910:	fa1f fe8c 	uxth.w	lr, ip
 8000914:	fb09 1118 	mls	r1, r9, r8, r1
 8000918:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800091c:	fb08 f00e 	mul.w	r0, r8, lr
 8000920:	4288      	cmp	r0, r1
 8000922:	fa02 f206 	lsl.w	r2, r2, r6
 8000926:	d90b      	bls.n	8000940 <__udivmoddi4+0x1b8>
 8000928:	eb1c 0101 	adds.w	r1, ip, r1
 800092c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000930:	f080 8088 	bcs.w	8000a44 <__udivmoddi4+0x2bc>
 8000934:	4288      	cmp	r0, r1
 8000936:	f240 8085 	bls.w	8000a44 <__udivmoddi4+0x2bc>
 800093a:	f1a8 0802 	sub.w	r8, r8, #2
 800093e:	4461      	add	r1, ip
 8000940:	1a09      	subs	r1, r1, r0
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb1 f0f9 	udiv	r0, r1, r9
 8000948:	fb09 1110 	mls	r1, r9, r0, r1
 800094c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000950:	fb00 fe0e 	mul.w	lr, r0, lr
 8000954:	458e      	cmp	lr, r1
 8000956:	d908      	bls.n	800096a <__udivmoddi4+0x1e2>
 8000958:	eb1c 0101 	adds.w	r1, ip, r1
 800095c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000960:	d26c      	bcs.n	8000a3c <__udivmoddi4+0x2b4>
 8000962:	458e      	cmp	lr, r1
 8000964:	d96a      	bls.n	8000a3c <__udivmoddi4+0x2b4>
 8000966:	3802      	subs	r0, #2
 8000968:	4461      	add	r1, ip
 800096a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800096e:	fba0 9402 	umull	r9, r4, r0, r2
 8000972:	eba1 010e 	sub.w	r1, r1, lr
 8000976:	42a1      	cmp	r1, r4
 8000978:	46c8      	mov	r8, r9
 800097a:	46a6      	mov	lr, r4
 800097c:	d356      	bcc.n	8000a2c <__udivmoddi4+0x2a4>
 800097e:	d053      	beq.n	8000a28 <__udivmoddi4+0x2a0>
 8000980:	b15d      	cbz	r5, 800099a <__udivmoddi4+0x212>
 8000982:	ebb3 0208 	subs.w	r2, r3, r8
 8000986:	eb61 010e 	sbc.w	r1, r1, lr
 800098a:	fa01 f707 	lsl.w	r7, r1, r7
 800098e:	fa22 f306 	lsr.w	r3, r2, r6
 8000992:	40f1      	lsrs	r1, r6
 8000994:	431f      	orrs	r7, r3
 8000996:	e9c5 7100 	strd	r7, r1, [r5]
 800099a:	2600      	movs	r6, #0
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	f1c2 0320 	rsb	r3, r2, #32
 80009a6:	40d8      	lsrs	r0, r3
 80009a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ac:	fa21 f303 	lsr.w	r3, r1, r3
 80009b0:	4091      	lsls	r1, r2
 80009b2:	4301      	orrs	r1, r0
 80009b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b8:	fa1f fe8c 	uxth.w	lr, ip
 80009bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009c0:	fb07 3610 	mls	r6, r7, r0, r3
 80009c4:	0c0b      	lsrs	r3, r1, #16
 80009c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ca:	fb00 f60e 	mul.w	r6, r0, lr
 80009ce:	429e      	cmp	r6, r3
 80009d0:	fa04 f402 	lsl.w	r4, r4, r2
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x260>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80009de:	d22f      	bcs.n	8000a40 <__udivmoddi4+0x2b8>
 80009e0:	429e      	cmp	r6, r3
 80009e2:	d92d      	bls.n	8000a40 <__udivmoddi4+0x2b8>
 80009e4:	3802      	subs	r0, #2
 80009e6:	4463      	add	r3, ip
 80009e8:	1b9b      	subs	r3, r3, r6
 80009ea:	b289      	uxth	r1, r1
 80009ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80009f0:	fb07 3316 	mls	r3, r7, r6, r3
 80009f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009f8:	fb06 f30e 	mul.w	r3, r6, lr
 80009fc:	428b      	cmp	r3, r1
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x28a>
 8000a00:	eb1c 0101 	adds.w	r1, ip, r1
 8000a04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000a08:	d216      	bcs.n	8000a38 <__udivmoddi4+0x2b0>
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	d914      	bls.n	8000a38 <__udivmoddi4+0x2b0>
 8000a0e:	3e02      	subs	r6, #2
 8000a10:	4461      	add	r1, ip
 8000a12:	1ac9      	subs	r1, r1, r3
 8000a14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a18:	e738      	b.n	800088c <__udivmoddi4+0x104>
 8000a1a:	462e      	mov	r6, r5
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	e705      	b.n	800082c <__udivmoddi4+0xa4>
 8000a20:	4606      	mov	r6, r0
 8000a22:	e6e3      	b.n	80007ec <__udivmoddi4+0x64>
 8000a24:	4618      	mov	r0, r3
 8000a26:	e6f8      	b.n	800081a <__udivmoddi4+0x92>
 8000a28:	454b      	cmp	r3, r9
 8000a2a:	d2a9      	bcs.n	8000980 <__udivmoddi4+0x1f8>
 8000a2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a34:	3801      	subs	r0, #1
 8000a36:	e7a3      	b.n	8000980 <__udivmoddi4+0x1f8>
 8000a38:	4646      	mov	r6, r8
 8000a3a:	e7ea      	b.n	8000a12 <__udivmoddi4+0x28a>
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	e794      	b.n	800096a <__udivmoddi4+0x1e2>
 8000a40:	4640      	mov	r0, r8
 8000a42:	e7d1      	b.n	80009e8 <__udivmoddi4+0x260>
 8000a44:	46d0      	mov	r8, sl
 8000a46:	e77b      	b.n	8000940 <__udivmoddi4+0x1b8>
 8000a48:	3b02      	subs	r3, #2
 8000a4a:	4461      	add	r1, ip
 8000a4c:	e732      	b.n	80008b4 <__udivmoddi4+0x12c>
 8000a4e:	4630      	mov	r0, r6
 8000a50:	e709      	b.n	8000866 <__udivmoddi4+0xde>
 8000a52:	4464      	add	r4, ip
 8000a54:	3802      	subs	r0, #2
 8000a56:	e742      	b.n	80008de <__udivmoddi4+0x156>

08000a58 <__aeabi_idiv0>:
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a6e:	4b48      	ldr	r3, [pc, #288]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000a70:	4a48      	ldr	r2, [pc, #288]	; (8000b94 <MX_ADC1_Init+0x138>)
 8000a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a74:	4b46      	ldr	r3, [pc, #280]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7c:	4b44      	ldr	r3, [pc, #272]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a82:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a88:	4b41      	ldr	r3, [pc, #260]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a8e:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a96:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9c:	4b3c      	ldr	r3, [pc, #240]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000a9e:	4a3e      	ldr	r2, [pc, #248]	; (8000b98 <MX_ADC1_Init+0x13c>)
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000aaa:	2206      	movs	r2, #6
 8000aac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000aae:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ab6:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000abc:	4834      	ldr	r0, [pc, #208]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000abe:	f002 fca9 	bl	8003414 <HAL_ADC_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ac8:	f001 f9ea 	bl	8001ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	4619      	mov	r1, r3
 8000adc:	482c      	ldr	r0, [pc, #176]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000ade:	f002 fdf7 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ae8:	f001 f9da 	bl	8001ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4825      	ldr	r0, [pc, #148]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000afa:	f002 fde9 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b04:	f001 f9cc 	bl	8001ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	4619      	mov	r1, r3
 8000b14:	481e      	ldr	r0, [pc, #120]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000b16:	f002 fddb 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000b20:	f001 f9be 	bl	8001ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b24:	2304      	movs	r3, #4
 8000b26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4817      	ldr	r0, [pc, #92]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000b32:	f002 fdcd 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b3c:	f001 f9b0 	bl	8001ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b40:	230c      	movs	r3, #12
 8000b42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000b44:	2305      	movs	r3, #5
 8000b46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4810      	ldr	r0, [pc, #64]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000b4e:	f002 fdbf 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000b58:	f001 f9a2 	bl	8001ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000b60:	2306      	movs	r3, #6
 8000b62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000b6a:	f002 fdb1 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000b74:	f001 f994 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)bufferAdc1Dma, hadc1.Init.NbrOfConversion);
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4907      	ldr	r1, [pc, #28]	; (8000b9c <MX_ADC1_Init+0x140>)
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <MX_ADC1_Init+0x134>)
 8000b82:	f002 fc8b 	bl	800349c <HAL_ADC_Start_DMA>
  /* USER CODE END ADC1_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000a3c 	.word	0x20000a3c
 8000b94:	40012000 	.word	0x40012000
 8000b98:	0f000001 	.word	0x0f000001
 8000b9c:	2000ad08 	.word	0x2000ad08

08000ba0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000bb2:	4b33      	ldr	r3, [pc, #204]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000bb4:	4a33      	ldr	r2, [pc, #204]	; (8000c84 <MX_ADC3_Init+0xe4>)
 8000bb6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bb8:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000bba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bbe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc0:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bd2:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000be2:	4a29      	ldr	r2, [pc, #164]	; (8000c88 <MX_ADC3_Init+0xe8>)
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000bee:	2203      	movs	r2, #3
 8000bf0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c00:	481f      	ldr	r0, [pc, #124]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000c02:	f002 fc07 	bl	8003414 <HAL_ADC_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c0c:	f001 f948 	bl	8001ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c10:	230a      	movs	r3, #10
 8000c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4817      	ldr	r0, [pc, #92]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000c22:	f002 fd55 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c2c:	f001 f938 	bl	8001ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c30:	230b      	movs	r3, #11
 8000c32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4810      	ldr	r0, [pc, #64]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000c3e:	f002 fd47 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000c48:	f001 f92a 	bl	8001ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000c50:	2303      	movs	r3, #3
 8000c52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	4809      	ldr	r0, [pc, #36]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000c5a:	f002 fd39 	bl	80036d0 <HAL_ADC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000c64:	f001 f91c 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)bufferAdc3Dma, hadc3.Init.NbrOfConversion);
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4907      	ldr	r1, [pc, #28]	; (8000c8c <MX_ADC3_Init+0xec>)
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <MX_ADC3_Init+0xe0>)
 8000c72:	f002 fc13 	bl	800349c <HAL_ADC_Start_DMA>
  /* USER CODE END ADC3_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000a84 	.word	0x20000a84
 8000c84:	40012200 	.word	0x40012200
 8000c88:	0f000001 	.word	0x0f000001
 8000c8c:	2000ad20 	.word	0x2000ad20

08000c90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a6b      	ldr	r2, [pc, #428]	; (8000e5c <HAL_ADC_MspInit+0x1cc>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d172      	bne.n	8000d98 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	4b6a      	ldr	r3, [pc, #424]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a69      	ldr	r2, [pc, #420]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b67      	ldr	r3, [pc, #412]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cca:	61bb      	str	r3, [r7, #24]
 8000ccc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	4b63      	ldr	r3, [pc, #396]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a62      	ldr	r2, [pc, #392]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b60      	ldr	r3, [pc, #384]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b5c      	ldr	r3, [pc, #368]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a5b      	ldr	r2, [pc, #364]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b59      	ldr	r3, [pc, #356]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_VREF_Pin;
 8000d06:	2304      	movs	r3, #4
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_VREF_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4852      	ldr	r0, [pc, #328]	; (8000e64 <HAL_ADC_MspInit+0x1d4>)
 8000d1a:	f003 fd75 	bl	8004808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA0_MAIN_SUPPLY_Pin|ADC_TEMP_Pin|PA3_M1_V_Pin|PA4_M2_V_Pin;
 8000d1e:	231d      	movs	r3, #29
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	484d      	ldr	r0, [pc, #308]	; (8000e68 <HAL_ADC_MspInit+0x1d8>)
 8000d32:	f003 fd69 	bl	8004808 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000d36:	4b4d      	ldr	r3, [pc, #308]	; (8000e6c <HAL_ADC_MspInit+0x1dc>)
 8000d38:	4a4d      	ldr	r2, [pc, #308]	; (8000e70 <HAL_ADC_MspInit+0x1e0>)
 8000d3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d3c:	4b4b      	ldr	r3, [pc, #300]	; (8000e6c <HAL_ADC_MspInit+0x1dc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d42:	4b4a      	ldr	r3, [pc, #296]	; (8000e6c <HAL_ADC_MspInit+0x1dc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d48:	4b48      	ldr	r3, [pc, #288]	; (8000e6c <HAL_ADC_MspInit+0x1dc>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d4e:	4b47      	ldr	r3, [pc, #284]	; (8000e6c <HAL_ADC_MspInit+0x1dc>)
 8000d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d56:	4b45      	ldr	r3, [pc, #276]	; (8000e6c <HAL_ADC_MspInit+0x1dc>)
 8000d58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d5e:	4b43      	ldr	r3, [pc, #268]	; (8000e6c <HAL_ADC_MspInit+0x1dc>)
 8000d60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d66:	4b41      	ldr	r3, [pc, #260]	; (8000e6c <HAL_ADC_MspInit+0x1dc>)
 8000d68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d6e:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <HAL_ADC_MspInit+0x1dc>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d74:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <HAL_ADC_MspInit+0x1dc>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d7a:	483c      	ldr	r0, [pc, #240]	; (8000e6c <HAL_ADC_MspInit+0x1dc>)
 8000d7c:	f003 f942 	bl	8004004 <HAL_DMA_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000d86:	f001 f88b 	bl	8001ea0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a37      	ldr	r2, [pc, #220]	; (8000e6c <HAL_ADC_MspInit+0x1dc>)
 8000d8e:	639a      	str	r2, [r3, #56]	; 0x38
 8000d90:	4a36      	ldr	r2, [pc, #216]	; (8000e6c <HAL_ADC_MspInit+0x1dc>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000d96:	e05d      	b.n	8000e54 <HAL_ADC_MspInit+0x1c4>
  else if(adcHandle->Instance==ADC3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a35      	ldr	r2, [pc, #212]	; (8000e74 <HAL_ADC_MspInit+0x1e4>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d158      	bne.n	8000e54 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a2d      	ldr	r2, [pc, #180]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000dac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a26      	ldr	r2, [pc, #152]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <HAL_ADC_MspInit+0x1d0>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PC0_M1_CURRENT_Pin|PC1_M2_CURRENT_Pin|ADC_VREF_Pin;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dde:	2303      	movs	r3, #3
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	481d      	ldr	r0, [pc, #116]	; (8000e64 <HAL_ADC_MspInit+0x1d4>)
 8000dee:	f003 fd0b 	bl	8004808 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <HAL_ADC_MspInit+0x1e8>)
 8000df4:	4a21      	ldr	r2, [pc, #132]	; (8000e7c <HAL_ADC_MspInit+0x1ec>)
 8000df6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <HAL_ADC_MspInit+0x1e8>)
 8000dfa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000dfe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <HAL_ADC_MspInit+0x1e8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <HAL_ADC_MspInit+0x1e8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <HAL_ADC_MspInit+0x1e8>)
 8000e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e12:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_ADC_MspInit+0x1e8>)
 8000e16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e1a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_ADC_MspInit+0x1e8>)
 8000e1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e22:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_ADC_MspInit+0x1e8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_ADC_MspInit+0x1e8>)
 8000e2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e30:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_ADC_MspInit+0x1e8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000e38:	480f      	ldr	r0, [pc, #60]	; (8000e78 <HAL_ADC_MspInit+0x1e8>)
 8000e3a:	f003 f8e3 	bl	8004004 <HAL_DMA_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8000e44:	f001 f82c 	bl	8001ea0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_ADC_MspInit+0x1e8>)
 8000e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_ADC_MspInit+0x1e8>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e54:	bf00      	nop
 8000e56:	3730      	adds	r7, #48	; 0x30
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40012000 	.word	0x40012000
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020800 	.word	0x40020800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	20000acc 	.word	0x20000acc
 8000e70:	40026470 	.word	0x40026470
 8000e74:	40012200 	.word	0x40012200
 8000e78:	20000b2c 	.word	0x20000b2c
 8000e7c:	40026410 	.word	0x40026410

08000e80 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_CAN1_Init+0x60>)
 8000e86:	4a17      	ldr	r2, [pc, #92]	; (8000ee4 <MX_CAN1_Init+0x64>)
 8000e88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_CAN1_Init+0x60>)
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_CAN1_Init+0x60>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_CAN1_Init+0x60>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_CAN1_Init+0x60>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_CAN1_Init+0x60>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <MX_CAN1_Init+0x60>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_CAN1_Init+0x60>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <MX_CAN1_Init+0x60>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_CAN1_Init+0x60>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <MX_CAN1_Init+0x60>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_CAN1_Init+0x60>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_CAN1_Init+0x60>)
 8000ece:	f002 fe9f 	bl	8003c10 <HAL_CAN_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000ed8:	f000 ffe2 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000b8c 	.word	0x20000b8c
 8000ee4:	40006400 	.word	0x40006400

08000ee8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <HAL_CAN_MspInit+0x84>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d12b      	bne.n	8000f62 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <HAL_CAN_MspInit+0x88>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <HAL_CAN_MspInit+0x88>)
 8000f14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_CAN_MspInit+0x88>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_CAN_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <HAL_CAN_MspInit+0x88>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_CAN_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f42:	2303      	movs	r3, #3
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f52:	2309      	movs	r3, #9
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <HAL_CAN_MspInit+0x8c>)
 8000f5e:	f003 fc53 	bl	8004808 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40006400 	.word	0x40006400
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020c00 	.word	0x40020c00

08000f78 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_CRC_Init+0x20>)
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <MX_CRC_Init+0x24>)
 8000f80:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_CRC_Init+0x20>)
 8000f84:	f003 f822 	bl	8003fcc <HAL_CRC_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f8e:	f000 ff87 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000bb4 	.word	0x20000bb4
 8000f9c:	40023000 	.word	0x40023000

08000fa0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <HAL_CRC_MspInit+0x3c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d10d      	bne.n	8000fce <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_CRC_MspInit+0x40>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <HAL_CRC_MspInit+0x40>)
 8000fbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_CRC_MspInit+0x40>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40023000 	.word	0x40023000
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000ff0:	f00d f9b0 	bl	800e354 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000ff4:	4b58      	ldr	r3, [pc, #352]	; (8001158 <pvPortMallocMicroROS+0x174>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000ffc:	f000 f980 	bl	8001300 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001000:	4b56      	ldr	r3, [pc, #344]	; (800115c <pvPortMallocMicroROS+0x178>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	f040 808e 	bne.w	800112a <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d01d      	beq.n	8001050 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001014:	2208      	movs	r2, #8
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	2b00      	cmp	r3, #0
 8001024:	d014      	beq.n	8001050 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f023 0307 	bic.w	r3, r3, #7
 800102c:	3308      	adds	r3, #8
 800102e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00a      	beq.n	8001050 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800103a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800103e:	f383 8811 	msr	BASEPRI, r3
 8001042:	f3bf 8f6f 	isb	sy
 8001046:	f3bf 8f4f 	dsb	sy
 800104a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800104c:	bf00      	nop
 800104e:	e7fe      	b.n	800104e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d069      	beq.n	800112a <pvPortMallocMicroROS+0x146>
 8001056:	4b42      	ldr	r3, [pc, #264]	; (8001160 <pvPortMallocMicroROS+0x17c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	d864      	bhi.n	800112a <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001060:	4b40      	ldr	r3, [pc, #256]	; (8001164 <pvPortMallocMicroROS+0x180>)
 8001062:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001064:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <pvPortMallocMicroROS+0x180>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800106a:	e004      	b.n	8001076 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	d903      	bls.n	8001088 <pvPortMallocMicroROS+0xa4>
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f1      	bne.n	800106c <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001088:	4b33      	ldr	r3, [pc, #204]	; (8001158 <pvPortMallocMicroROS+0x174>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800108e:	429a      	cmp	r2, r3
 8001090:	d04b      	beq.n	800112a <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2208      	movs	r2, #8
 8001098:	4413      	add	r3, r2
 800109a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	1ad2      	subs	r2, r2, r3
 80010ac:	2308      	movs	r3, #8
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d91f      	bls.n	80010f4 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00a      	beq.n	80010dc <pvPortMallocMicroROS+0xf8>
	__asm volatile
 80010c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ca:	f383 8811 	msr	BASEPRI, r3
 80010ce:	f3bf 8f6f 	isb	sy
 80010d2:	f3bf 8f4f 	dsb	sy
 80010d6:	613b      	str	r3, [r7, #16]
}
 80010d8:	bf00      	nop
 80010da:	e7fe      	b.n	80010da <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	1ad2      	subs	r2, r2, r3
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010ee:	69b8      	ldr	r0, [r7, #24]
 80010f0:	f000 f968 	bl	80013c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <pvPortMallocMicroROS+0x17c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <pvPortMallocMicroROS+0x17c>)
 8001100:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <pvPortMallocMicroROS+0x17c>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <pvPortMallocMicroROS+0x184>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d203      	bcs.n	8001116 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <pvPortMallocMicroROS+0x17c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a15      	ldr	r2, [pc, #84]	; (8001168 <pvPortMallocMicroROS+0x184>)
 8001114:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <pvPortMallocMicroROS+0x178>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	431a      	orrs	r2, r3
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800112a:	f00d f921 	bl	800e370 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00a      	beq.n	800114e <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800113c:	f383 8811 	msr	BASEPRI, r3
 8001140:	f3bf 8f6f 	isb	sy
 8001144:	f3bf 8f4f 	dsb	sy
 8001148:	60fb      	str	r3, [r7, #12]
}
 800114a:	bf00      	nop
 800114c:	e7fe      	b.n	800114c <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800114e:	69fb      	ldr	r3, [r7, #28]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200047c4 	.word	0x200047c4
 800115c:	200047d0 	.word	0x200047d0
 8001160:	200047c8 	.word	0x200047c8
 8001164:	200047bc 	.word	0x200047bc
 8001168:	200047cc 	.word	0x200047cc

0800116c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d048      	beq.n	8001210 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800117e:	2308      	movs	r3, #8
 8001180:	425b      	negs	r3, r3
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4413      	add	r3, r2
 8001186:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	4b21      	ldr	r3, [pc, #132]	; (8001218 <vPortFreeMicroROS+0xac>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4013      	ands	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10a      	bne.n	80011b0 <vPortFreeMicroROS+0x44>
	__asm volatile
 800119a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800119e:	f383 8811 	msr	BASEPRI, r3
 80011a2:	f3bf 8f6f 	isb	sy
 80011a6:	f3bf 8f4f 	dsb	sy
 80011aa:	60fb      	str	r3, [r7, #12]
}
 80011ac:	bf00      	nop
 80011ae:	e7fe      	b.n	80011ae <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00a      	beq.n	80011ce <vPortFreeMicroROS+0x62>
	__asm volatile
 80011b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011bc:	f383 8811 	msr	BASEPRI, r3
 80011c0:	f3bf 8f6f 	isb	sy
 80011c4:	f3bf 8f4f 	dsb	sy
 80011c8:	60bb      	str	r3, [r7, #8]
}
 80011ca:	bf00      	nop
 80011cc:	e7fe      	b.n	80011cc <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <vPortFreeMicroROS+0xac>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d019      	beq.n	8001210 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d115      	bne.n	8001210 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <vPortFreeMicroROS+0xac>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	401a      	ands	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011f4:	f00d f8ae 	bl	800e354 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <vPortFreeMicroROS+0xb0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4413      	add	r3, r2
 8001202:	4a06      	ldr	r2, [pc, #24]	; (800121c <vPortFreeMicroROS+0xb0>)
 8001204:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001206:	6938      	ldr	r0, [r7, #16]
 8001208:	f000 f8dc 	bl	80013c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800120c:	f00d f8b0 	bl	800e370 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200047d0 	.word	0x200047d0
 800121c:	200047c8 	.word	0x200047c8

08001220 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800122c:	2308      	movs	r3, #8
 800122e:	425b      	negs	r3, r3
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	4413      	add	r3, r2
 8001234:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <getBlockSize+0x38>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	43db      	mvns	r3, r3
 8001244:	4013      	ands	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]

	return count;
 8001248:	68fb      	ldr	r3, [r7, #12]
}
 800124a:	4618      	mov	r0, r3
 800124c:	371c      	adds	r7, #28
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	200047d0 	.word	0x200047d0

0800125c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001266:	f00d f875 	bl	800e354 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800126a:	6838      	ldr	r0, [r7, #0]
 800126c:	f7ff feba 	bl	8000fe4 <pvPortMallocMicroROS>
 8001270:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d017      	beq.n	80012a8 <pvPortReallocMicroROS+0x4c>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d014      	beq.n	80012a8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffce 	bl	8001220 <getBlockSize>
 8001284:	4603      	mov	r3, r0
 8001286:	2208      	movs	r2, #8
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d201      	bcs.n	8001298 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	68b8      	ldr	r0, [r7, #8]
 800129e:	f019 ff33 	bl	801b108 <memcpy>

		vPortFreeMicroROS(pv);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff62 	bl	800116c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80012a8:	f00d f862 	bl	800e370 <xTaskResumeAll>

	return newmem;
 80012ac:	68bb      	ldr	r3, [r7, #8]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012c0:	f00d f848 	bl	800e354 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f7ff fe88 	bl	8000fe4 <pvPortMallocMicroROS>
 80012d4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012da:	e004      	b.n	80012e6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	613a      	str	r2, [r7, #16]
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	1e5a      	subs	r2, r3, #1
 80012ea:	617a      	str	r2, [r7, #20]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f5      	bne.n	80012dc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012f0:	f00d f83e 	bl	800e370 <xTaskResumeAll>
  	return mem;
 80012f4:	68fb      	ldr	r3, [r7, #12]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001306:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800130a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <prvHeapInit+0xac>)
 800130e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00c      	beq.n	8001334 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3307      	adds	r3, #7
 800131e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f023 0307 	bic.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <prvHeapInit+0xac>)
 8001330:	4413      	add	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001338:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <prvHeapInit+0xb0>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <prvHeapInit+0xb0>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	4413      	add	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800134c:	2208      	movs	r2, #8
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f023 0307 	bic.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <prvHeapInit+0xb4>)
 8001360:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <prvHeapInit+0xb4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <prvHeapInit+0xb4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	1ad2      	subs	r2, r2, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <prvHeapInit+0xb4>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <prvHeapInit+0xb8>)
 800138e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a09      	ldr	r2, [pc, #36]	; (80013bc <prvHeapInit+0xbc>)
 8001396:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <prvHeapInit+0xc0>)
 800139a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	20000bbc 	.word	0x20000bbc
 80013b0:	200047bc 	.word	0x200047bc
 80013b4:	200047c4 	.word	0x200047c4
 80013b8:	200047cc 	.word	0x200047cc
 80013bc:	200047c8 	.word	0x200047c8
 80013c0:	200047d0 	.word	0x200047d0

080013c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <prvInsertBlockIntoFreeList+0xac>)
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e002      	b.n	80013d8 <prvInsertBlockIntoFreeList+0x14>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d8f7      	bhi.n	80013d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	4413      	add	r3, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d108      	bne.n	8001406 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	441a      	add	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	441a      	add	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d118      	bne.n	800144c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <prvInsertBlockIntoFreeList+0xb0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d00d      	beq.n	8001442 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	441a      	add	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	e008      	b.n	8001454 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <prvInsertBlockIntoFreeList+0xb0>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e003      	b.n	8001454 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	d002      	beq.n	8001462 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	200047bc 	.word	0x200047bc
 8001474:	200047c4 	.word	0x200047c4

08001478 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <MX_DMA_Init+0x6c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <MX_DMA_Init+0x6c>)
 8001488:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <MX_DMA_Init+0x6c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2105      	movs	r1, #5
 800149e:	2038      	movs	r0, #56	; 0x38
 80014a0:	f002 fd6a 	bl	8003f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014a4:	2038      	movs	r0, #56	; 0x38
 80014a6:	f002 fd83 	bl	8003fb0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2105      	movs	r1, #5
 80014ae:	203a      	movs	r0, #58	; 0x3a
 80014b0:	f002 fd62 	bl	8003f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014b4:	203a      	movs	r0, #58	; 0x3a
 80014b6:	f002 fd7b 	bl	8003fb0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2105      	movs	r1, #5
 80014be:	203c      	movs	r0, #60	; 0x3c
 80014c0:	f002 fd5a 	bl	8003f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80014c4:	203c      	movs	r0, #60	; 0x3c
 80014c6:	f002 fd73 	bl	8003fb0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2105      	movs	r1, #5
 80014ce:	2046      	movs	r0, #70	; 0x46
 80014d0:	f002 fd52 	bl	8003f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80014d4:	2046      	movs	r0, #70	; 0x46
 80014d6:	f002 fd6b 	bl	8003fb0 <HAL_NVIC_EnableIRQ>

}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80014f6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014fc:	4904      	ldr	r1, [pc, #16]	; (8001510 <cubemx_transport_open+0x28>)
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f007 f848 	bl	8008594 <HAL_UART_Receive_DMA>
    return true;
 8001504:	2301      	movs	r3, #1
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200047d4 	.word	0x200047d4

08001514 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001522:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f007 f865 	bl	80085f4 <HAL_UART_DMAStop>
    return true;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001548:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b20      	cmp	r3, #32
 8001554:	d11c      	bne.n	8001590 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	b29b      	uxth	r3, r3
 800155a:	461a      	mov	r2, r3
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f006 ff9a 	bl	8008498 <HAL_UART_Transmit_DMA>
 8001564:	4603      	mov	r3, r0
 8001566:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001568:	e002      	b.n	8001570 <cubemx_transport_write+0x3c>
            osDelay(1);
 800156a:	2001      	movs	r0, #1
 800156c:	f00b fea6 	bl	800d2bc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001570:	7cfb      	ldrb	r3, [r7, #19]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d105      	bne.n	8001582 <cubemx_transport_write+0x4e>
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b20      	cmp	r3, #32
 8001580:	d1f3      	bne.n	800156a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001582:	7cfb      	ldrb	r3, [r7, #19]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <cubemx_transport_write+0x58>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	e002      	b.n	8001592 <cubemx_transport_write+0x5e>
 800158c:	2300      	movs	r3, #0
 800158e:	e000      	b.n	8001592 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001590:	2300      	movs	r3, #0
    }
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80015b0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b6:	b672      	cpsid	i
}
 80015b8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <cubemx_transport_read+0x9c>)
 80015c8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015ca:	b662      	cpsie	i
}
 80015cc:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3301      	adds	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f00b fe71 	bl	800d2bc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <cubemx_transport_read+0xa0>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <cubemx_transport_read+0x9c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d103      	bne.n	80015ee <cubemx_transport_read+0x52>
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	dbe3      	blt.n	80015b6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015f2:	e011      	b.n	8001618 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <cubemx_transport_read+0xa0>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	440b      	add	r3, r1
 80015fe:	4910      	ldr	r1, [pc, #64]	; (8001640 <cubemx_transport_read+0xa4>)
 8001600:	5c8a      	ldrb	r2, [r1, r2]
 8001602:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <cubemx_transport_read+0xa0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <cubemx_transport_read+0xa0>)
 8001610:	6013      	str	r3, [r2, #0]
        wrote++;
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	3301      	adds	r3, #1
 8001616:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <cubemx_transport_read+0xa0>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <cubemx_transport_read+0x9c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d003      	beq.n	800162c <cubemx_transport_read+0x90>
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	d3e3      	bcc.n	80015f4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 800162c:	69bb      	ldr	r3, [r7, #24]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20004fd8 	.word	0x20004fd8
 800163c:	20004fd4 	.word	0x20004fd4
 8001640:	200047d4 	.word	0x200047d4

08001644 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of rosTaskLed */
  rosTaskLedHandle = osThreadNew(StartTaskLed, NULL, &rosTaskLed_attributes);
 8001648:	4a0c      	ldr	r2, [pc, #48]	; (800167c <MX_FREERTOS_Init+0x38>)
 800164a:	2100      	movs	r1, #0
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <MX_FREERTOS_Init+0x3c>)
 800164e:	f00b fda3 	bl	800d198 <osThreadNew>
 8001652:	4603      	mov	r3, r0
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <MX_FREERTOS_Init+0x40>)
 8001656:	6013      	str	r3, [r2, #0]

  /* creation of rosTaskCom */
  rosTaskComHandle = osThreadNew(StartTaskCom, NULL, &rosTaskCom_attributes);
 8001658:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <MX_FREERTOS_Init+0x44>)
 800165a:	2100      	movs	r1, #0
 800165c:	480b      	ldr	r0, [pc, #44]	; (800168c <MX_FREERTOS_Init+0x48>)
 800165e:	f00b fd9b 	bl	800d198 <osThreadNew>
 8001662:	4603      	mov	r3, r0
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <MX_FREERTOS_Init+0x4c>)
 8001666:	6013      	str	r3, [r2, #0]

  /* creation of rosTaskAnalog */
  rosTaskAnalogHandle = osThreadNew(StartTaskAnalog, NULL, &rosTaskAnalog_attributes);
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <MX_FREERTOS_Init+0x50>)
 800166a:	2100      	movs	r1, #0
 800166c:	480a      	ldr	r0, [pc, #40]	; (8001698 <MX_FREERTOS_Init+0x54>)
 800166e:	f00b fd93 	bl	800d198 <osThreadNew>
 8001672:	4603      	mov	r3, r0
 8001674:	4a09      	ldr	r2, [pc, #36]	; (800169c <MX_FREERTOS_Init+0x58>)
 8001676:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	0801c810 	.word	0x0801c810
 8001680:	080016a1 	.word	0x080016a1
 8001684:	200050a8 	.word	0x200050a8
 8001688:	0801c834 	.word	0x0801c834
 800168c:	080016d9 	.word	0x080016d9
 8001690:	20005968 	.word	0x20005968
 8001694:	0801c858 	.word	0x0801c858
 8001698:	08001a01 	.word	0x08001a01
 800169c:	2000a848 	.word	0x2000a848

080016a0 <StartTaskLed>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskLed */
void StartTaskLed(void *argument)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80016a8:	f00e fad0 	bl	800fc4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartTaskLed */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2140      	movs	r1, #64	; 0x40
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <StartTaskLed+0x30>)
 80016b2:	f003 fa45 	bl	8004b40 <HAL_GPIO_WritePin>
		osDelay(100);
 80016b6:	2064      	movs	r0, #100	; 0x64
 80016b8:	f00b fe00 	bl	800d2bc <osDelay>
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2140      	movs	r1, #64	; 0x40
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <StartTaskLed+0x30>)
 80016c2:	f003 fa3d 	bl	8004b40 <HAL_GPIO_WritePin>
		osDelay(200);
 80016c6:	20c8      	movs	r0, #200	; 0xc8
 80016c8:	f00b fdf8 	bl	800d2bc <osDelay>
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 1);
 80016cc:	e7ee      	b.n	80016ac <StartTaskLed+0xc>
 80016ce:	bf00      	nop
 80016d0:	40020000 	.word	0x40020000
 80016d4:	00000000 	.word	0x00000000

080016d8 <StartTaskCom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCom */
void StartTaskCom(void *argument)
{
 80016d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016dc:	b0a4      	sub	sp, #144	; 0x90
 80016de:	af02      	add	r7, sp, #8
 80016e0:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartTaskCom */
	rmw_uros_set_custom_transport(
 80016e2:	4ba3      	ldr	r3, [pc, #652]	; (8001970 <StartTaskCom+0x298>)
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	4ba3      	ldr	r3, [pc, #652]	; (8001974 <StartTaskCom+0x29c>)
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	4ba3      	ldr	r3, [pc, #652]	; (8001978 <StartTaskCom+0x2a0>)
 80016ec:	4aa3      	ldr	r2, [pc, #652]	; (800197c <StartTaskCom+0x2a4>)
 80016ee:	49a4      	ldr	r1, [pc, #656]	; (8001980 <StartTaskCom+0x2a8>)
 80016f0:	2001      	movs	r0, #1
 80016f2:	f00f f9cd 	bl	8010a90 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80016f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016fa:	4618      	mov	r0, r3
 80016fc:	f00f f94a 	bl	8010994 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001700:	4ba0      	ldr	r3, [pc, #640]	; (8001984 <StartTaskCom+0x2ac>)
 8001702:	673b      	str	r3, [r7, #112]	; 0x70
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001704:	4ba0      	ldr	r3, [pc, #640]	; (8001988 <StartTaskCom+0x2b0>)
 8001706:	677b      	str	r3, [r7, #116]	; 0x74
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001708:	4ba0      	ldr	r3, [pc, #640]	; (800198c <StartTaskCom+0x2b4>)
 800170a:	67bb      	str	r3, [r7, #120]	; 0x78
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800170c:	4ba0      	ldr	r3, [pc, #640]	; (8001990 <StartTaskCom+0x2b8>)
 800170e:	67fb      	str	r3, [r7, #124]	; 0x7c

	if (!rcutils_set_default_allocator(&freeRTOS_allocator))
 8001710:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001714:	4618      	mov	r0, r3
 8001716:	f00f f94b 	bl	80109b0 <rcutils_set_default_allocator>
 800171a:	4603      	mov	r3, r0
 800171c:	f083 0301 	eor.w	r3, r3, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <StartTaskCom+0x56>
	{	printf("Error on default allocators (line %d)\n", __LINE__);
 8001726:	21ed      	movs	r1, #237	; 0xed
 8001728:	489a      	ldr	r0, [pc, #616]	; (8001994 <StartTaskCom+0x2bc>)
 800172a:	f019 fdf9 	bl	801b320 <iprintf>

	rclc_support_t support;
	rcl_allocator_t allocator;
	rcl_node_t node;

	allocator = rcl_get_default_allocator();
 800172e:	463b      	mov	r3, r7
 8001730:	4618      	mov	r0, r3
 8001732:	f00f f95b 	bl	80109ec <rcutils_get_default_allocator>
 8001736:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800173a:	463d      	mov	r5, r7
 800173c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001740:	682b      	ldr	r3, [r5, #0]
 8001742:	6023      	str	r3, [r4, #0]

	//create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 8001744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001748:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	f00f f85e 	bl	8010810 <rclc_support_init>

	// create node
	rclc_node_init_default(&node, "pnav32", "", &support);
 8001754:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001758:	f107 0020 	add.w	r0, r7, #32
 800175c:	4a8e      	ldr	r2, [pc, #568]	; (8001998 <StartTaskCom+0x2c0>)
 800175e:	498f      	ldr	r1, [pc, #572]	; (800199c <StartTaskCom+0x2c4>)
 8001760:	f00f f8a0 	bl	80108a4 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_default( &publisher_int32, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), "pInt32");
 8001764:	f010 f96e 	bl	8011a44 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001768:	4602      	mov	r2, r0
 800176a:	f107 0120 	add.w	r1, r7, #32
 800176e:	4b8c      	ldr	r3, [pc, #560]	; (80019a0 <StartTaskCom+0x2c8>)
 8001770:	488c      	ldr	r0, [pc, #560]	; (80019a4 <StartTaskCom+0x2cc>)
 8001772:	f00f f8d3 	bl	801091c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher_int64, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int64), "pInt64");
 8001776:	f010 f97d 	bl	8011a74 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>
 800177a:	4602      	mov	r2, r0
 800177c:	f107 0120 	add.w	r1, r7, #32
 8001780:	4b89      	ldr	r3, [pc, #548]	; (80019a8 <StartTaskCom+0x2d0>)
 8001782:	488a      	ldr	r0, [pc, #552]	; (80019ac <StartTaskCom+0x2d4>)
 8001784:	f00f f8ca 	bl	801091c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher_color, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, ColorRGBA), "pColorRGBA");
 8001788:	f010 f944 	bl	8011a14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>
 800178c:	4602      	mov	r2, r0
 800178e:	f107 0120 	add.w	r1, r7, #32
 8001792:	4b87      	ldr	r3, [pc, #540]	; (80019b0 <StartTaskCom+0x2d8>)
 8001794:	4887      	ldr	r0, [pc, #540]	; (80019b4 <StartTaskCom+0x2dc>)
 8001796:	f00f f8c1 	bl	801091c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher_batt, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, BatteryState), "pBatt");
 800179a:	f00f fdf3 	bl	8011384 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>
 800179e:	4602      	mov	r2, r0
 80017a0:	f107 0120 	add.w	r1, r7, #32
 80017a4:	4b84      	ldr	r3, [pc, #528]	; (80019b8 <StartTaskCom+0x2e0>)
 80017a6:	4885      	ldr	r0, [pc, #532]	; (80019bc <StartTaskCom+0x2e4>)
 80017a8:	f00f f8b8 	bl	801091c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher_temp, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Temperature), "pTemp");
 80017ac:	f00f fe02 	bl	80113b4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f107 0120 	add.w	r1, r7, #32
 80017b6:	4b82      	ldr	r3, [pc, #520]	; (80019c0 <StartTaskCom+0x2e8>)
 80017b8:	4882      	ldr	r0, [pc, #520]	; (80019c4 <StartTaskCom+0x2ec>)
 80017ba:	f00f f8af 	bl	801091c <rclc_publisher_init_default>

	// preinit with random test value
	msgInt32.data = 1;
 80017be:	4b82      	ldr	r3, [pc, #520]	; (80019c8 <StartTaskCom+0x2f0>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

	msgInt64.data = 10;
 80017c4:	4981      	ldr	r1, [pc, #516]	; (80019cc <StartTaskCom+0x2f4>)
 80017c6:	f04f 020a 	mov.w	r2, #10
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	e9c1 2300 	strd	r2, r3, [r1]

	msgColorRGBA.r= 127;
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <StartTaskCom+0x2f8>)
 80017d4:	4a7f      	ldr	r2, [pc, #508]	; (80019d4 <StartTaskCom+0x2fc>)
 80017d6:	601a      	str	r2, [r3, #0]
	msgColorRGBA.g= 127;
 80017d8:	4b7d      	ldr	r3, [pc, #500]	; (80019d0 <StartTaskCom+0x2f8>)
 80017da:	4a7e      	ldr	r2, [pc, #504]	; (80019d4 <StartTaskCom+0x2fc>)
 80017dc:	605a      	str	r2, [r3, #4]
	msgColorRGBA.b= 100;
 80017de:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <StartTaskCom+0x2f8>)
 80017e0:	4a7d      	ldr	r2, [pc, #500]	; (80019d8 <StartTaskCom+0x300>)
 80017e2:	609a      	str	r2, [r3, #8]
	msgColorRGBA.a= 200;
 80017e4:	4b7a      	ldr	r3, [pc, #488]	; (80019d0 <StartTaskCom+0x2f8>)
 80017e6:	4a7d      	ldr	r2, [pc, #500]	; (80019dc <StartTaskCom+0x304>)
 80017e8:	60da      	str	r2, [r3, #12]

	msgBattery.power_supply_status = sensor_msgs__msg__BatteryState__POWER_SUPPLY_STATUS_UNKNOWN;
 80017ea:	4b7d      	ldr	r3, [pc, #500]	; (80019e0 <StartTaskCom+0x308>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	msgBattery.power_supply_health = sensor_msgs__msg__BatteryState__POWER_SUPPLY_HEALTH_UNKNOWN;
 80017f2:	4b7b      	ldr	r3, [pc, #492]	; (80019e0 <StartTaskCom+0x308>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	msgBattery.power_supply_technology = sensor_msgs__msg__BatteryState__POWER_SUPPLY_TECHNOLOGY_LION;
 80017fa:	4b79      	ldr	r3, [pc, #484]	; (80019e0 <StartTaskCom+0x308>)
 80017fc:	2202      	movs	r2, #2
 80017fe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	msgBattery.charge = 2;
 8001802:	4b77      	ldr	r3, [pc, #476]	; (80019e0 <StartTaskCom+0x308>)
 8001804:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001808:	621a      	str	r2, [r3, #32]
	msgBattery.current = 10;
 800180a:	4b75      	ldr	r3, [pc, #468]	; (80019e0 <StartTaskCom+0x308>)
 800180c:	4a75      	ldr	r2, [pc, #468]	; (80019e4 <StartTaskCom+0x30c>)
 800180e:	61da      	str	r2, [r3, #28]
    battVoltage.size = NUMBEROFFCELL;
 8001810:	2206      	movs	r2, #6
 8001812:	4b75      	ldr	r3, [pc, #468]	; (80019e8 <StartTaskCom+0x310>)
 8001814:	605a      	str	r2, [r3, #4]
    msgBattery.cell_voltage.capacity = NUMBEROFFCELL;
 8001816:	2206      	movs	r2, #6
 8001818:	4b71      	ldr	r3, [pc, #452]	; (80019e0 <StartTaskCom+0x308>)
 800181a:	63da      	str	r2, [r3, #60]	; 0x3c
    msgBattery.cell_voltage.size = NUMBEROFFCELL;
 800181c:	2206      	movs	r2, #6
 800181e:	4b70      	ldr	r3, [pc, #448]	; (80019e0 <StartTaskCom+0x308>)
 8001820:	639a      	str	r2, [r3, #56]	; 0x38
    msgBattery.cell_voltage.data = ( float*) malloc( msgBattery.cell_voltage.capacity * sizeof(float));
 8001822:	4b6f      	ldr	r3, [pc, #444]	; (80019e0 <StartTaskCom+0x308>)
 8001824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4618      	mov	r0, r3
 800182a:	f019 fc5d 	bl	801b0e8 <malloc>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	4b6b      	ldr	r3, [pc, #428]	; (80019e0 <StartTaskCom+0x308>)
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
    msgBattery.cell_voltage.data[0] = 0;
 8001836:	4b6a      	ldr	r3, [pc, #424]	; (80019e0 <StartTaskCom+0x308>)
 8001838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
    msgBattery.cell_voltage.data[1] = 1;
 8001840:	4b67      	ldr	r3, [pc, #412]	; (80019e0 <StartTaskCom+0x308>)
 8001842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001844:	3304      	adds	r3, #4
 8001846:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800184a:	601a      	str	r2, [r3, #0]
    msgBattery.cell_voltage.data[3] = 3;
 800184c:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <StartTaskCom+0x308>)
 800184e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001850:	330c      	adds	r3, #12
 8001852:	4a66      	ldr	r2, [pc, #408]	; (80019ec <StartTaskCom+0x314>)
 8001854:	601a      	str	r2, [r3, #0]

	msgTemperature.temperature = 25;
 8001856:	4966      	ldr	r1, [pc, #408]	; (80019f0 <StartTaskCom+0x318>)
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b65      	ldr	r3, [pc, #404]	; (80019f4 <StartTaskCom+0x31c>)
 800185e:	e9c1 2306 	strd	r2, r3, [r1, #24]

  for(;;)
  {
	// TEST: Random data update before publish
	msgInt32.data++;
 8001862:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <StartTaskCom+0x2f0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	4a57      	ldr	r2, [pc, #348]	; (80019c8 <StartTaskCom+0x2f0>)
 800186a:	6013      	str	r3, [r2, #0]
	msgInt64.data++;
 800186c:	4b57      	ldr	r3, [pc, #348]	; (80019cc <StartTaskCom+0x2f4>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f112 0801 	adds.w	r8, r2, #1
 8001876:	f143 0900 	adc.w	r9, r3, #0
 800187a:	4b54      	ldr	r3, [pc, #336]	; (80019cc <StartTaskCom+0x2f4>)
 800187c:	e9c3 8900 	strd	r8, r9, [r3]
	msgBattery.voltage += 0.001;
 8001880:	4b57      	ldr	r3, [pc, #348]	; (80019e0 <StartTaskCom+0x308>)
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe6f 	bl	8000568 <__aeabi_f2d>
 800188a:	a337      	add	r3, pc, #220	; (adr r3, 8001968 <StartTaskCom+0x290>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe fd0c 	bl	80002ac <__adddf3>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7fe febc 	bl	8000618 <__aeabi_d2f>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a4f      	ldr	r2, [pc, #316]	; (80019e0 <StartTaskCom+0x308>)
 80018a4:	6153      	str	r3, [r2, #20]
	msgTemperature.temperature += 0.001;
 80018a6:	4b52      	ldr	r3, [pc, #328]	; (80019f0 <StartTaskCom+0x318>)
 80018a8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80018ac:	a32e      	add	r3, pc, #184	; (adr r3, 8001968 <StartTaskCom+0x290>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe fcfb 	bl	80002ac <__adddf3>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	494d      	ldr	r1, [pc, #308]	; (80019f0 <StartTaskCom+0x318>)
 80018bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	msgColorRGBA.g++;
 80018c0:	4b43      	ldr	r3, [pc, #268]	; (80019d0 <StartTaskCom+0x2f8>)
 80018c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ce:	4b40      	ldr	r3, [pc, #256]	; (80019d0 <StartTaskCom+0x2f8>)
 80018d0:	edc3 7a01 	vstr	s15, [r3, #4]
	// TEST END

	// Led ON
	HAL_GPIO_WritePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	4847      	ldr	r0, [pc, #284]	; (80019f8 <StartTaskCom+0x320>)
 80018da:	f003 f931 	bl	8004b40 <HAL_GPIO_WritePin>

	rcl_ret_t ret;
	ret = rcl_publish(&publisher_int32, &msgInt32, NULL);
 80018de:	2200      	movs	r2, #0
 80018e0:	4939      	ldr	r1, [pc, #228]	; (80019c8 <StartTaskCom+0x2f0>)
 80018e2:	4830      	ldr	r0, [pc, #192]	; (80019a4 <StartTaskCom+0x2cc>)
 80018e4:	f00e ff70 	bl	80107c8 <rcl_publish>
 80018e8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	ret += rcl_publish(&publisher_int64, &msgInt64, NULL);
 80018ec:	2200      	movs	r2, #0
 80018ee:	4937      	ldr	r1, [pc, #220]	; (80019cc <StartTaskCom+0x2f4>)
 80018f0:	482e      	ldr	r0, [pc, #184]	; (80019ac <StartTaskCom+0x2d4>)
 80018f2:	f00e ff69 	bl	80107c8 <rcl_publish>
 80018f6:	4602      	mov	r2, r0
 80018f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018fc:	4413      	add	r3, r2
 80018fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ret += rcl_publish(&publisher_color, &msgColorRGBA, NULL);
 8001902:	2200      	movs	r2, #0
 8001904:	4932      	ldr	r1, [pc, #200]	; (80019d0 <StartTaskCom+0x2f8>)
 8001906:	482b      	ldr	r0, [pc, #172]	; (80019b4 <StartTaskCom+0x2dc>)
 8001908:	f00e ff5e 	bl	80107c8 <rcl_publish>
 800190c:	4602      	mov	r2, r0
 800190e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001912:	4413      	add	r3, r2
 8001914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ret += rcl_publish(&publisher_batt, &msgBattery, NULL);
 8001918:	2200      	movs	r2, #0
 800191a:	4931      	ldr	r1, [pc, #196]	; (80019e0 <StartTaskCom+0x308>)
 800191c:	4827      	ldr	r0, [pc, #156]	; (80019bc <StartTaskCom+0x2e4>)
 800191e:	f00e ff53 	bl	80107c8 <rcl_publish>
 8001922:	4602      	mov	r2, r0
 8001924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001928:	4413      	add	r3, r2
 800192a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ret += rcl_publish(&publisher_temp, &msgTemperature, NULL);
 800192e:	2200      	movs	r2, #0
 8001930:	492f      	ldr	r1, [pc, #188]	; (80019f0 <StartTaskCom+0x318>)
 8001932:	4824      	ldr	r0, [pc, #144]	; (80019c4 <StartTaskCom+0x2ec>)
 8001934:	f00e ff48 	bl	80107c8 <rcl_publish>
 8001938:	4602      	mov	r2, r0
 800193a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800193e:	4413      	add	r3, r2
 8001940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	if (ret != RCL_RET_OK)
 8001944:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <StartTaskCom+0x27e>
	{
	  printf("Error publishing (line %d)\n", __LINE__);
 800194c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8001950:	482a      	ldr	r0, [pc, #168]	; (80019fc <StartTaskCom+0x324>)
 8001952:	f019 fce5 	bl	801b320 <iprintf>
	}

	// Led turn Off
	HAL_GPIO_WritePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin, 1);
 8001956:	2201      	movs	r2, #1
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	4827      	ldr	r0, [pc, #156]	; (80019f8 <StartTaskCom+0x320>)
 800195c:	f003 f8f0 	bl	8004b40 <HAL_GPIO_WritePin>
	osDelay(100);
 8001960:	2064      	movs	r0, #100	; 0x64
 8001962:	f00b fcab 	bl	800d2bc <osDelay>
  {
 8001966:	e77c      	b.n	8001862 <StartTaskCom+0x18a>
 8001968:	d2f1a9fc 	.word	0xd2f1a9fc
 800196c:	3f50624d 	.word	0x3f50624d
 8001970:	0800159d 	.word	0x0800159d
 8001974:	08001535 	.word	0x08001535
 8001978:	08001515 	.word	0x08001515
 800197c:	080014e9 	.word	0x080014e9
 8001980:	2000b090 	.word	0x2000b090
 8001984:	08001ead 	.word	0x08001ead
 8001988:	08001ef1 	.word	0x08001ef1
 800198c:	08001f29 	.word	0x08001f29
 8001990:	08001f95 	.word	0x08001f95
 8001994:	0801c740 	.word	0x0801c740
 8001998:	0801c768 	.word	0x0801c768
 800199c:	0801c76c 	.word	0x0801c76c
 80019a0:	0801c774 	.word	0x0801c774
 80019a4:	20004fdc 	.word	0x20004fdc
 80019a8:	0801c77c 	.word	0x0801c77c
 80019ac:	20004fe4 	.word	0x20004fe4
 80019b0:	0801c784 	.word	0x0801c784
 80019b4:	20005020 	.word	0x20005020
 80019b8:	0801c790 	.word	0x0801c790
 80019bc:	20005034 	.word	0x20005034
 80019c0:	0801c798 	.word	0x0801c798
 80019c4:	20004ff0 	.word	0x20004ff0
 80019c8:	20004fe0 	.word	0x20004fe0
 80019cc:	20004fe8 	.word	0x20004fe8
 80019d0:	20005024 	.word	0x20005024
 80019d4:	42fe0000 	.word	0x42fe0000
 80019d8:	42c80000 	.word	0x42c80000
 80019dc:	43480000 	.word	0x43480000
 80019e0:	20005038 	.word	0x20005038
 80019e4:	41200000 	.word	0x41200000
 80019e8:	2000509c 	.word	0x2000509c
 80019ec:	40400000 	.word	0x40400000
 80019f0:	20004ff8 	.word	0x20004ff8
 80019f4:	40390000 	.word	0x40390000
 80019f8:	40020000 	.word	0x40020000
 80019fc:	0801c7a0 	.word	0x0801c7a0

08001a00 <StartTaskAnalog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAnalog */
void StartTaskAnalog(void *argument)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAnalog */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f00b fc57 	bl	800d2bc <osDelay>
 8001a0e:	e7fb      	b.n	8001a08 <StartTaskAnalog+0x8>

08001a10 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> S_TIM11_CH1
*/
void MX_GPIO_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08c      	sub	sp, #48	; 0x30
 8001a14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	4b74      	ldr	r3, [pc, #464]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a73      	ldr	r2, [pc, #460]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001a30:	f043 0310 	orr.w	r3, r3, #16
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b71      	ldr	r3, [pc, #452]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	4b6d      	ldr	r3, [pc, #436]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a6c      	ldr	r2, [pc, #432]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b66      	ldr	r3, [pc, #408]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b5f      	ldr	r3, [pc, #380]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a5e      	ldr	r2, [pc, #376]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b5c      	ldr	r3, [pc, #368]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	4b58      	ldr	r3, [pc, #352]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a57      	ldr	r2, [pc, #348]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b55      	ldr	r3, [pc, #340]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a50      	ldr	r2, [pc, #320]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b4e      	ldr	r3, [pc, #312]	; (8001bfc <MX_GPIO_Init+0x1ec>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8001ad4:	484a      	ldr	r0, [pc, #296]	; (8001c00 <MX_GPIO_Init+0x1f0>)
 8001ad6:	f003 f833 	bl	8004b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE8_MOT1_AUX_Pin|PE9_MOT2_AUX_Pin|PE12_TEMP1_Pin|PE13_TEMP2_Pin
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 8001ae0:	4848      	ldr	r0, [pc, #288]	; (8001c04 <MX_GPIO_Init+0x1f4>)
 8001ae2:	f003 f82d 	bl	8004b40 <HAL_GPIO_WritePin>
                          |PE14_TEMP3_Pin|PE15_TEMP4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB12_MOT1_EN_Pin|O_PWR_REG_EN_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8001aec:	4846      	ldr	r0, [pc, #280]	; (8001c08 <MX_GPIO_Init+0x1f8>)
 8001aee:	f003 f827 	bl	8004b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8001af8:	4844      	ldr	r0, [pc, #272]	; (8001c0c <MX_GPIO_Init+0x1fc>)
 8001afa:	f003 f821 	bl	8004b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD3_MOT2_EN_GPIO_Port, PD3_MOT2_EN_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2108      	movs	r1, #8
 8001b02:	4843      	ldr	r0, [pc, #268]	; (8001c10 <MX_GPIO_Init+0x200>)
 8001b04:	f003 f81c 	bl	8004b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = I_KEY1_Pin|I_KEY0_Pin;
 8001b08:	2318      	movs	r3, #24
 8001b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	483a      	ldr	r0, [pc, #232]	; (8001c04 <MX_GPIO_Init+0x1f4>)
 8001b1c:	f002 fe74 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin;
 8001b20:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4831      	ldr	r0, [pc, #196]	; (8001c00 <MX_GPIO_Init+0x1f0>)
 8001b3a:	f002 fe65 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = PE8_MOT1_AUX_Pin|PE9_MOT2_AUX_Pin|PE12_TEMP1_Pin|PE13_TEMP2_Pin
 8001b3e:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 8001b42:	61fb      	str	r3, [r7, #28]
                          |PE14_TEMP3_Pin|PE15_TEMP4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	4619      	mov	r1, r3
 8001b56:	482b      	ldr	r0, [pc, #172]	; (8001c04 <MX_GPIO_Init+0x1f4>)
 8001b58:	f002 fe56 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PB12_MOT1_EN_Pin|O_PWR_REG_EN_Pin;
 8001b5c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	4824      	ldr	r0, [pc, #144]	; (8001c08 <MX_GPIO_Init+0x1f8>)
 8001b76:	f002 fe47 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = PD11_EXTI11_E1_IDX_Pin|PD12_EXTI12_E2_IDX_Pin;
 8001b7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	481f      	ldr	r0, [pc, #124]	; (8001c10 <MX_GPIO_Init+0x200>)
 8001b92:	f002 fe39 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin;
 8001b96:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	4619      	mov	r1, r3
 8001bae:	4817      	ldr	r0, [pc, #92]	; (8001c0c <MX_GPIO_Init+0x1fc>)
 8001bb0:	f002 fe2a 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PD3_MOT2_EN_Pin;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD3_MOT2_EN_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4811      	ldr	r0, [pc, #68]	; (8001c10 <MX_GPIO_Init+0x200>)
 8001bcc:	f002 fe1c 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TIM_AUX2_PWM_Pin;
 8001bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001be2:	2303      	movs	r3, #3
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TIM_AUX2_PWM_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	4619      	mov	r1, r3
 8001bec:	4806      	ldr	r0, [pc, #24]	; (8001c08 <MX_GPIO_Init+0x1f8>)
 8001bee:	f002 fe0b 	bl	8004808 <HAL_GPIO_Init>

}
 8001bf2:	bf00      	nop
 8001bf4:	3730      	adds	r7, #48	; 0x30
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00

08001c14 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <MX_I2C2_Init+0x50>)
 8001c1a:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <MX_I2C2_Init+0x54>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_I2C2_Init+0x50>)
 8001c20:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <MX_I2C2_Init+0x58>)
 8001c22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_I2C2_Init+0x50>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <MX_I2C2_Init+0x50>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <MX_I2C2_Init+0x50>)
 8001c32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <MX_I2C2_Init+0x50>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_I2C2_Init+0x50>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <MX_I2C2_Init+0x50>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_I2C2_Init+0x50>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <MX_I2C2_Init+0x50>)
 8001c52:	f002 ff8f 	bl	8004b74 <HAL_I2C_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c5c:	f000 f920 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000ad40 	.word	0x2000ad40
 8001c68:	40005800 	.word	0x40005800
 8001c6c:	000186a0 	.word	0x000186a0

08001c70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	; 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <HAL_I2C_MspInit+0x84>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d12c      	bne.n	8001cec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a17      	ldr	r2, [pc, #92]	; (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001cae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb4:	2312      	movs	r3, #18
 8001cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480c      	ldr	r0, [pc, #48]	; (8001cfc <HAL_I2C_MspInit+0x8c>)
 8001ccc:	f002 fd9c 	bl	8004808 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001cda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cde:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_I2C_MspInit+0x88>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40005800 	.word	0x40005800
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40020400 	.word	0x40020400

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d04:	f001 fb20 	bl	8003348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d08:	f000 f82e 	bl	8001d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0c:	f7ff fe80 	bl	8001a10 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001d10:	f000 fca4 	bl	800265c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d14:	f000 fcfa 	bl	800270c <MX_TIM2_Init>
  MX_TIM8_Init();
 8001d18:	f000 fe26 	bl	8002968 <MX_TIM8_Init>
  MX_I2C2_Init();
 8001d1c:	f7ff ff7a 	bl	8001c14 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001d20:	f000 fa60 	bl	80021e4 <MX_SPI1_Init>
  MX_DMA_Init();
 8001d24:	f7ff fba8 	bl	8001478 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001d28:	f001 f94e 	bl	8002fc8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001d2c:	f7fe fe96 	bl	8000a5c <MX_ADC1_Init>
  MX_ADC3_Init();
 8001d30:	f7fe ff36 	bl	8000ba0 <MX_ADC3_Init>
  MX_TIM3_Init();
 8001d34:	f000 fd3e 	bl	80027b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d38:	f000 fdb8 	bl	80028ac <MX_TIM4_Init>
  MX_UART5_Init();
 8001d3c:	f001 f91a 	bl	8002f74 <MX_UART5_Init>
  MX_CRC_Init();
 8001d40:	f7ff f91a 	bl	8000f78 <MX_CRC_Init>
  MX_RNG_Init();
 8001d44:	f000 fa18 	bl	8002178 <MX_RNG_Init>
  MX_TIM14_Init();
 8001d48:	f000 ff0c 	bl	8002b64 <MX_TIM14_Init>
  MX_TIM9_Init();
 8001d4c:	f000 feba 	bl	8002ac4 <MX_TIM9_Init>
  MX_CAN1_Init();
 8001d50:	f7ff f896 	bl	8000e80 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8001d54:	f001 f962 	bl	800301c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001d58:	f00b f9d4 	bl	800d104 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001d5c:	f7ff fc72 	bl	8001644 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d60:	f00b f9f4 	bl	800d14c <osKernelStart>
//
//	  }
//  }


  while (1)
 8001d64:	e7fe      	b.n	8001d64 <main+0x64>
	...

08001d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b094      	sub	sp, #80	; 0x50
 8001d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	2230      	movs	r2, #48	; 0x30
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f019 f9d4 	bl	801b124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <SystemClock_Config+0xcc>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <SystemClock_Config+0xcc>)
 8001d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <SystemClock_Config+0xcc>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da8:	2300      	movs	r3, #0
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <SystemClock_Config+0xd0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <SystemClock_Config+0xd0>)
 8001db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <SystemClock_Config+0xd0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001dd8:	2304      	movs	r3, #4
 8001dda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ddc:	23a8      	movs	r3, #168	; 0xa8
 8001dde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de0:	2302      	movs	r3, #2
 8001de2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001de4:	2307      	movs	r3, #7
 8001de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de8:	f107 0320 	add.w	r3, r7, #32
 8001dec:	4618      	mov	r0, r3
 8001dee:	f004 fa83 	bl	80062f8 <HAL_RCC_OscConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001df8:	f000 f852 	bl	8001ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e00:	2302      	movs	r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	2105      	movs	r1, #5
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 fce4 	bl	80067e8 <HAL_RCC_ClockConfig>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e26:	f000 f83b 	bl	8001ea0 <Error_Handler>
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3750      	adds	r7, #80	; 0x50
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40007000 	.word	0x40007000

08001e3c <HAL_ADC_ConvCpltCallback>:
  * @note   This example shows a simple way to report end of conversion
  *         and get conversion result. You can add your own implementation.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  //ubDmaTransferStatus = 1;

  /* Set LED depending on DMA transfer status */
  /* - Turn-on if DMA transfer is completed */
  /* - Turn-off if DMA transfer is not completed */
	dmaTransferComplete = 1;
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	2000ad38 	.word	0x2000ad38

08001e5c <HAL_ADC_ConvHalfCpltCallback>:
  * @note   This example shows a simple way to report end of conversion
  *         and get conversion result. You can add your own implementation.
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Set LED depending on DMA transfer status */
  /* - Turn-on if DMA transfer is completed */
  /* - Turn-off if DMA transfer is not completed */
	dmaHalfTransferComplete=1;
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	2000ad3c 	.word	0x2000ad3c

08001e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e8e:	f001 fa7d 	bl	800338c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40014400 	.word	0x40014400

08001ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
}
 8001ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <Error_Handler+0x8>
	...

08001eac <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <microros_allocate+0x3c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <microros_allocate+0x3c>)
 8001ec4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <microros_allocate+0x40>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <microros_allocate+0x40>)
 8001ed4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff f884 	bl	8000fe4 <pvPortMallocMicroROS>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000ad94 	.word	0x2000ad94
 8001eec:	2000ad98 	.word	0x2000ad98

08001ef0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00c      	beq.n	8001f1a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff f98d 	bl	8001220 <getBlockSize>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <microros_deallocate+0x34>)
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <microros_deallocate+0x34>)
 8001f12:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff f929 	bl	800116c <vPortFreeMicroROS>
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	2000ad98 	.word	0x2000ad98

08001f28 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001f34:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <microros_reallocate+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <microros_reallocate+0x64>)
 8001f42:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <microros_reallocate+0x68>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <microros_reallocate+0x68>)
 8001f52:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d104      	bne.n	8001f64 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001f5a:	68b8      	ldr	r0, [r7, #8]
 8001f5c:	f7ff f842 	bl	8000fe4 <pvPortMallocMicroROS>
 8001f60:	4603      	mov	r3, r0
 8001f62:	e00e      	b.n	8001f82 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff f95b 	bl	8001220 <getBlockSize>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <microros_reallocate+0x68>)
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <microros_reallocate+0x68>)
 8001f76:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f7ff f96e 	bl	800125c <pvPortReallocMicroROS>
 8001f80:	4603      	mov	r3, r0
  }
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000ad94 	.word	0x2000ad94
 8001f90:	2000ad98 	.word	0x2000ad98

08001f94 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <microros_zero_allocate+0x48>)
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	4413      	add	r3, r2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <microros_zero_allocate+0x48>)
 8001fb2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	fb02 f303 	mul.w	r3, r2, r3
 8001fbc:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <microros_zero_allocate+0x4c>)
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <microros_zero_allocate+0x4c>)
 8001fc6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff f973 	bl	80012b6 <pvPortCallocMicroROS>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000ad94 	.word	0x2000ad94
 8001fe0:	2000ad98 	.word	0x2000ad98
 8001fe4:	00000000 	.word	0x00000000

08001fe8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001fe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001ffa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ffe:	a320      	add	r3, pc, #128	; (adr r3, 8002080 <UTILS_NanosecondsToTimespec+0x98>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe fb58 	bl	80006b8 <__aeabi_ldivmod>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002016:	a31a      	add	r3, pc, #104	; (adr r3, 8002080 <UTILS_NanosecondsToTimespec+0x98>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe fb4c 	bl	80006b8 <__aeabi_ldivmod>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da20      	bge.n	800206e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a11      	ldr	r2, [pc, #68]	; (8002078 <UTILS_NanosecondsToTimespec+0x90>)
 8002032:	fb82 1203 	smull	r1, r2, r2, r3
 8002036:	1712      	asrs	r2, r2, #28
 8002038:	17db      	asrs	r3, r3, #31
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	6979      	ldr	r1, [r7, #20]
 8002048:	17c8      	asrs	r0, r1, #31
 800204a:	460c      	mov	r4, r1
 800204c:	4605      	mov	r5, r0
 800204e:	ebb2 0804 	subs.w	r8, r2, r4
 8002052:	eb63 0905 	sbc.w	r9, r3, r5
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	4906      	ldr	r1, [pc, #24]	; (800207c <UTILS_NanosecondsToTimespec+0x94>)
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	441a      	add	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	609a      	str	r2, [r3, #8]
    }
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002078:	44b82fa1 	.word	0x44b82fa1
 800207c:	3b9aca00 	.word	0x3b9aca00
 8002080:	3b9aca00 	.word	0x3b9aca00
 8002084:	00000000 	.word	0x00000000

08002088 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800208c:	b08e      	sub	sp, #56	; 0x38
 800208e:	af00      	add	r7, sp, #0
 8002090:	6278      	str	r0, [r7, #36]	; 0x24
 8002092:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002094:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002098:	2300      	movs	r3, #0
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80020aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ae:	4618      	mov	r0, r3
 80020b0:	f00c fbde 	bl	800e870 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	17da      	asrs	r2, r3, #31
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	61fa      	str	r2, [r7, #28]
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	69b9      	ldr	r1, [r7, #24]
 80020c6:	000b      	movs	r3, r1
 80020c8:	2200      	movs	r2, #0
 80020ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80020ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d0:	2200      	movs	r2, #0
 80020d2:	461c      	mov	r4, r3
 80020d4:	4615      	mov	r5, r2
 80020d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020da:	1911      	adds	r1, r2, r4
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	416b      	adcs	r3, r5
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80020e6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80020ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	f04f 0400 	mov.w	r4, #0
 80020f6:	f04f 0500 	mov.w	r5, #0
 80020fa:	015d      	lsls	r5, r3, #5
 80020fc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002100:	0154      	lsls	r4, r2, #5
 8002102:	4622      	mov	r2, r4
 8002104:	462b      	mov	r3, r5
 8002106:	ebb2 0800 	subs.w	r8, r2, r0
 800210a:	eb63 0901 	sbc.w	r9, r3, r1
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800211a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800211e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002122:	4690      	mov	r8, r2
 8002124:	4699      	mov	r9, r3
 8002126:	eb18 0a00 	adds.w	sl, r8, r0
 800212a:	eb49 0b01 	adc.w	fp, r9, r1
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800213a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800213e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002142:	ebb2 040a 	subs.w	r4, r2, sl
 8002146:	603c      	str	r4, [r7, #0]
 8002148:	eb63 030b 	sbc.w	r3, r3, fp
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002152:	4623      	mov	r3, r4
 8002154:	181b      	adds	r3, r3, r0
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	462b      	mov	r3, r5
 800215a:	eb41 0303 	adc.w	r3, r1, r3
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	6a3a      	ldr	r2, [r7, #32]
 8002162:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002166:	f7ff ff3f 	bl	8001fe8 <UTILS_NanosecondsToTimespec>

    return 0;
 800216a:	2300      	movs	r3, #0
 800216c:	4618      	mov	r0, r3
 800216e:	3738      	adds	r7, #56	; 0x38
 8002170:	46bd      	mov	sp, r7
 8002172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002178 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_RNG_Init+0x20>)
 800217e:	4a07      	ldr	r2, [pc, #28]	; (800219c <MX_RNG_Init+0x24>)
 8002180:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_RNG_Init+0x20>)
 8002184:	f004 fd82 	bl	8006c8c <HAL_RNG_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800218e:	f7ff fe87 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000ad9c 	.word	0x2000ad9c
 800219c:	50060800 	.word	0x50060800

080021a0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <HAL_RNG_MspInit+0x3c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10d      	bne.n	80021ce <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_RNG_MspInit+0x40>)
 80021b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <HAL_RNG_MspInit+0x40>)
 80021bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021c0:	6353      	str	r3, [r2, #52]	; 0x34
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <HAL_RNG_MspInit+0x40>)
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	50060800 	.word	0x50060800
 80021e0:	40023800 	.word	0x40023800

080021e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <MX_SPI1_Init+0x64>)
 80021ea:	4a18      	ldr	r2, [pc, #96]	; (800224c <MX_SPI1_Init+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <MX_SPI1_Init+0x64>)
 80021f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <MX_SPI1_Init+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <MX_SPI1_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <MX_SPI1_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <MX_SPI1_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <MX_SPI1_Init+0x64>)
 8002210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002214:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <MX_SPI1_Init+0x64>)
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <MX_SPI1_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <MX_SPI1_Init+0x64>)
 8002224:	2200      	movs	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <MX_SPI1_Init+0x64>)
 800222a:	2200      	movs	r2, #0
 800222c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <MX_SPI1_Init+0x64>)
 8002230:	220a      	movs	r2, #10
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002234:	4804      	ldr	r0, [pc, #16]	; (8002248 <MX_SPI1_Init+0x64>)
 8002236:	f004 fd53 	bl	8006ce0 <HAL_SPI_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002240:	f7ff fe2e 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	2000adac 	.word	0x2000adac
 800224c:	40013000 	.word	0x40013000

08002250 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <HAL_SPI_MspInit+0x84>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d12b      	bne.n	80022ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_SPI_MspInit+0x88>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_SPI_MspInit+0x88>)
 800227c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_SPI_MspInit+0x88>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_SPI_MspInit+0x88>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_SPI_MspInit+0x88>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_SPI_MspInit+0x88>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80022aa:	2338      	movs	r3, #56	; 0x38
 80022ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ba:	2305      	movs	r3, #5
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <HAL_SPI_MspInit+0x8c>)
 80022c6:	f002 fa9f 	bl	8004808 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022ca:	bf00      	nop
 80022cc:	3728      	adds	r7, #40	; 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40013000 	.word	0x40013000
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020400 	.word	0x40020400

080022e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_MspInit+0x54>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	4a11      	ldr	r2, [pc, #68]	; (8002334 <HAL_MspInit+0x54>)
 80022f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_MspInit+0x54>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_MspInit+0x54>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <HAL_MspInit+0x54>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	6413      	str	r3, [r2, #64]	; 0x40
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_MspInit+0x54>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	210f      	movs	r1, #15
 8002322:	f06f 0001 	mvn.w	r0, #1
 8002326:	f001 fe27 	bl	8003f78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800

08002338 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08c      	sub	sp, #48	; 0x30
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002348:	2200      	movs	r2, #0
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	2019      	movs	r0, #25
 800234e:	f001 fe13 	bl	8003f78 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002352:	2019      	movs	r0, #25
 8002354:	f001 fe2c 	bl	8003fb0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <HAL_InitTick+0xa4>)
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <HAL_InitTick+0xa4>)
 8002362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002366:	6453      	str	r3, [r2, #68]	; 0x44
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_InitTick+0xa4>)
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002374:	f107 0210 	add.w	r2, r7, #16
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f004 fc52 	bl	8006c28 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002384:	f004 fc3c 	bl	8006c00 <HAL_RCC_GetPCLK2Freq>
 8002388:	4603      	mov	r3, r0
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	4a13      	ldr	r2, [pc, #76]	; (80023e0 <HAL_InitTick+0xa8>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0c9b      	lsrs	r3, r3, #18
 8002398:	3b01      	subs	r3, #1
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_InitTick+0xac>)
 800239e:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <HAL_InitTick+0xb0>)
 80023a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <HAL_InitTick+0xac>)
 80023a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023a8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80023aa:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <HAL_InitTick+0xac>)
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <HAL_InitTick+0xac>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_InitTick+0xac>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80023bc:	4809      	ldr	r0, [pc, #36]	; (80023e4 <HAL_InitTick+0xac>)
 80023be:	f004 fd18 	bl	8006df2 <HAL_TIM_Base_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d104      	bne.n	80023d2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80023c8:	4806      	ldr	r0, [pc, #24]	; (80023e4 <HAL_InitTick+0xac>)
 80023ca:	f004 fd61 	bl	8006e90 <HAL_TIM_Base_Start_IT>
 80023ce:	4603      	mov	r3, r0
 80023d0:	e000      	b.n	80023d4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3730      	adds	r7, #48	; 0x30
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	431bde83 	.word	0x431bde83
 80023e4:	2000ae04 	.word	0x2000ae04
 80023e8:	40014400 	.word	0x40014400

080023ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <NMI_Handler+0x4>

080023f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f6:	e7fe      	b.n	80023f6 <HardFault_Handler+0x4>

080023f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <MemManage_Handler+0x4>

080023fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002402:	e7fe      	b.n	8002402 <BusFault_Handler+0x4>

08002404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <UsageFault_Handler+0x4>

0800240a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800241c:	4803      	ldr	r0, [pc, #12]	; (800242c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800241e:	f004 ff44 	bl	80072aa <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002422:	4803      	ldr	r0, [pc, #12]	; (8002430 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002424:	f004 ff41 	bl	80072aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	2000ae54 	.word	0x2000ae54
 8002430:	2000ae04 	.word	0x2000ae04

08002434 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <USART1_IRQHandler+0x10>)
 800243a:	f006 f95b 	bl	80086f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	2000b090 	.word	0x2000b090

08002448 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <DMA2_Stream0_IRQHandler+0x10>)
 800244e:	f001 ff71 	bl	8004334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000b2c 	.word	0x20000b2c

0800245c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <DMA2_Stream2_IRQHandler+0x10>)
 8002462:	f001 ff67 	bl	8004334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000b118 	.word	0x2000b118

08002470 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <DMA2_Stream4_IRQHandler+0x10>)
 8002476:	f001 ff5d 	bl	8004334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000acc 	.word	0x20000acc

08002484 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <OTG_FS_IRQHandler+0x10>)
 800248a:	f002 fe07 	bl	800509c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200110cc 	.word	0x200110cc

08002498 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <DMA2_Stream7_IRQHandler+0x10>)
 800249e:	f001 ff49 	bl	8004334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000b178 	.word	0x2000b178

080024ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
	return 1;
 80024b0:	2301      	movs	r3, #1
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_kill>:

int _kill(int pid, int sig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024c6:	f018 fc21 	bl	801ad0c <__errno>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2216      	movs	r2, #22
 80024ce:	601a      	str	r2, [r3, #0]
	return -1;
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_exit>:

void _exit (int status)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ffe7 	bl	80024bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80024ee:	e7fe      	b.n	80024ee <_exit+0x12>

080024f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e00a      	b.n	8002518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002502:	f3af 8000 	nop.w
 8002506:	4601      	mov	r1, r0
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	60ba      	str	r2, [r7, #8]
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	dbf0      	blt.n	8002502 <_read+0x12>
	}

return len;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	e009      	b.n	8002550 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60ba      	str	r2, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	dbf1      	blt.n	800253c <_write+0x12>
	}
	return len;
 8002558:	687b      	ldr	r3, [r7, #4]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <_sbrk>:

caddr_t _sbrk(int incr) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
    extern char __heap_start__ asm("end");  // Defined by the linker.
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == NULL) heap_end = &__heap_start__;
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <_sbrk+0x5c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <_sbrk+0x16>
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <_sbrk+0x5c>)
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <_sbrk+0x60>)
 8002578:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <_sbrk+0x5c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	60fb      	str	r3, [r7, #12]

    if (heap_end + incr > &_estack - _Min_Stack_Size) {
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <_sbrk+0x5c>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	441a      	add	r2, r3
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <_sbrk+0x64>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	425b      	negs	r3, r3
 800258e:	490f      	ldr	r1, [pc, #60]	; (80025cc <_sbrk+0x68>)
 8002590:	440b      	add	r3, r1
 8002592:	429a      	cmp	r2, r3
 8002594:	d908      	bls.n	80025a8 <_sbrk+0x44>
    		__asm("BKPT #0\n");
 8002596:	be00      	bkpt	0x0000
        errno = ENOMEM;
 8002598:	f018 fbb8 	bl	801ad0c <__errno>
 800259c:	4603      	mov	r3, r0
 800259e:	220c      	movs	r2, #12
 80025a0:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025a6:	e006      	b.n	80025b6 <_sbrk+0x52>

    }

    heap_end += incr;
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <_sbrk+0x5c>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	4a03      	ldr	r2, [pc, #12]	; (80025c0 <_sbrk+0x5c>)
 80025b2:	6013      	str	r3, [r2, #0]
    return (caddr_t)prev_heap_end;
 80025b4:	68fb      	ldr	r3, [r7, #12]

}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2000ae50 	.word	0x2000ae50
 80025c4:	20016310 	.word	0x20016310
 80025c8:	00000400 	.word	0x00000400
 80025cc:	20020000 	.word	0x20020000

080025d0 <_close>:

int _close(int file)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	return -1;
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025f8:	605a      	str	r2, [r3, #4]
	return 0;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <_isatty>:

int _isatty(int file)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	return 1;
 8002610:	2301      	movs	r3, #1
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
	return 0;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <SystemInit+0x20>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	4a05      	ldr	r2, [pc, #20]	; (8002658 <SystemInit+0x20>)
 8002644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	; 0x30
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002662:	f107 030c 	add.w	r3, r7, #12
 8002666:	2224      	movs	r2, #36	; 0x24
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f018 fd5a 	bl	801b124 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002678:	4b22      	ldr	r3, [pc, #136]	; (8002704 <MX_TIM1_Init+0xa8>)
 800267a:	4a23      	ldr	r2, [pc, #140]	; (8002708 <MX_TIM1_Init+0xac>)
 800267c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800267e:	4b21      	ldr	r3, [pc, #132]	; (8002704 <MX_TIM1_Init+0xa8>)
 8002680:	2200      	movs	r2, #0
 8002682:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002684:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <MX_TIM1_Init+0xa8>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <MX_TIM1_Init+0xa8>)
 800268c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002690:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002692:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <MX_TIM1_Init+0xa8>)
 8002694:	2200      	movs	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <MX_TIM1_Init+0xa8>)
 800269a:	2200      	movs	r2, #0
 800269c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <MX_TIM1_Init+0xa8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026a4:	2303      	movs	r3, #3
 80026a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026ac:	2301      	movs	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026b8:	2300      	movs	r3, #0
 80026ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026bc:	2301      	movs	r3, #1
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	4619      	mov	r1, r3
 80026ce:	480d      	ldr	r0, [pc, #52]	; (8002704 <MX_TIM1_Init+0xa8>)
 80026d0:	f004 fd45 	bl	800715e <HAL_TIM_Encoder_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80026da:	f7ff fbe1 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	4806      	ldr	r0, [pc, #24]	; (8002704 <MX_TIM1_Init+0xa8>)
 80026ec:	f005 fda4 	bl	8008238 <HAL_TIMEx_MasterConfigSynchronization>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80026f6:	f7ff fbd3 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	3730      	adds	r7, #48	; 0x30
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	2000ae54 	.word	0x2000ae54
 8002708:	40010000 	.word	0x40010000

0800270c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08c      	sub	sp, #48	; 0x30
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	2224      	movs	r2, #36	; 0x24
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f018 fd02 	bl	801b124 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <MX_TIM2_Init+0xa4>)
 800272a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800272e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <MX_TIM2_Init+0xa4>)
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002736:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <MX_TIM2_Init+0xa4>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <MX_TIM2_Init+0xa4>)
 800273e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <MX_TIM2_Init+0xa4>)
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <MX_TIM2_Init+0xa4>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002750:	2303      	movs	r3, #3
 8002752:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002758:	2301      	movs	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002768:	2301      	movs	r3, #1
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800276c:	2300      	movs	r3, #0
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	4619      	mov	r1, r3
 800277a:	480d      	ldr	r0, [pc, #52]	; (80027b0 <MX_TIM2_Init+0xa4>)
 800277c:	f004 fcef 	bl	800715e <HAL_TIM_Encoder_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002786:	f7ff fb8b 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	4619      	mov	r1, r3
 8002796:	4806      	ldr	r0, [pc, #24]	; (80027b0 <MX_TIM2_Init+0xa4>)
 8002798:	f005 fd4e 	bl	8008238 <HAL_TIMEx_MasterConfigSynchronization>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80027a2:	f7ff fb7d 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027a6:	bf00      	nop
 80027a8:	3730      	adds	r7, #48	; 0x30
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000ae9c 	.word	0x2000ae9c

080027b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08e      	sub	sp, #56	; 0x38
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
 80027d4:	615a      	str	r2, [r3, #20]
 80027d6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027e4:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <MX_TIM3_Init+0xf0>)
 80027e6:	4a30      	ldr	r2, [pc, #192]	; (80028a8 <MX_TIM3_Init+0xf4>)
 80027e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027ea:	4b2e      	ldr	r3, [pc, #184]	; (80028a4 <MX_TIM3_Init+0xf0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f0:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <MX_TIM3_Init+0xf0>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027f6:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <MX_TIM3_Init+0xf0>)
 80027f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fe:	4b29      	ldr	r3, [pc, #164]	; (80028a4 <MX_TIM3_Init+0xf0>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002804:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <MX_TIM3_Init+0xf0>)
 8002806:	2200      	movs	r2, #0
 8002808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800280a:	4826      	ldr	r0, [pc, #152]	; (80028a4 <MX_TIM3_Init+0xf0>)
 800280c:	f004 fbff 	bl	800700e <HAL_TIM_PWM_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002816:	f7ff fb43 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800281a:	4822      	ldr	r0, [pc, #136]	; (80028a4 <MX_TIM3_Init+0xf0>)
 800281c:	f004 fc46 	bl	80070ac <HAL_TIM_IC_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002826:	f7ff fb3b 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002832:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002836:	4619      	mov	r1, r3
 8002838:	481a      	ldr	r0, [pc, #104]	; (80028a4 <MX_TIM3_Init+0xf0>)
 800283a:	f005 fcfd 	bl	8008238 <HAL_TIMEx_MasterConfigSynchronization>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002844:	f7ff fb2c 	bl	8001ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002848:	2360      	movs	r3, #96	; 0x60
 800284a:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2208      	movs	r2, #8
 800285e:	4619      	mov	r1, r3
 8002860:	4810      	ldr	r0, [pc, #64]	; (80028a4 <MX_TIM3_Init+0xf0>)
 8002862:	f004 ff23 	bl	80076ac <HAL_TIM_PWM_ConfigChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 800286c:	f7ff fb18 	bl	8001ea0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002870:	2300      	movs	r3, #0
 8002872:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002874:	2301      	movs	r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	220c      	movs	r2, #12
 8002884:	4619      	mov	r1, r3
 8002886:	4807      	ldr	r0, [pc, #28]	; (80028a4 <MX_TIM3_Init+0xf0>)
 8002888:	f004 fe74 	bl	8007574 <HAL_TIM_IC_ConfigChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8002892:	f7ff fb05 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002896:	4803      	ldr	r0, [pc, #12]	; (80028a4 <MX_TIM3_Init+0xf0>)
 8002898:	f000 fac2 	bl	8002e20 <HAL_TIM_MspPostInit>

}
 800289c:	bf00      	nop
 800289e:	3738      	adds	r7, #56	; 0x38
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	2000aee4 	.word	0x2000aee4
 80028a8:	40000400 	.word	0x40000400

080028ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b2:	f107 0320 	add.w	r3, r7, #32
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	611a      	str	r2, [r3, #16]
 80028ca:	615a      	str	r2, [r3, #20]
 80028cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <MX_TIM4_Init+0xb4>)
 80028d0:	4a24      	ldr	r2, [pc, #144]	; (8002964 <MX_TIM4_Init+0xb8>)
 80028d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80028d4:	4b22      	ldr	r3, [pc, #136]	; (8002960 <MX_TIM4_Init+0xb4>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <MX_TIM4_Init+0xb4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80028e0:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <MX_TIM4_Init+0xb4>)
 80028e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <MX_TIM4_Init+0xb4>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <MX_TIM4_Init+0xb4>)
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80028f4:	481a      	ldr	r0, [pc, #104]	; (8002960 <MX_TIM4_Init+0xb4>)
 80028f6:	f004 fb3b 	bl	8006f70 <HAL_TIM_OC_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002900:	f7ff face 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800290c:	f107 0320 	add.w	r3, r7, #32
 8002910:	4619      	mov	r1, r3
 8002912:	4813      	ldr	r0, [pc, #76]	; (8002960 <MX_TIM4_Init+0xb4>)
 8002914:	f005 fc90 	bl	8008238 <HAL_TIMEx_MasterConfigSynchronization>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800291e:	f7ff fabf 	bl	8001ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	220c      	movs	r2, #12
 8002936:	4619      	mov	r1, r3
 8002938:	4809      	ldr	r0, [pc, #36]	; (8002960 <MX_TIM4_Init+0xb4>)
 800293a:	f004 fdbf 	bl	80074bc <HAL_TIM_OC_ConfigChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002944:	f7ff faac 	bl	8001ea0 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <MX_TIM4_Init+0xb4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <MX_TIM4_Init+0xb4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002956:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002958:	bf00      	nop
 800295a:	3728      	adds	r7, #40	; 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	2000af2c 	.word	0x2000af2c
 8002964:	40000800 	.word	0x40000800

08002968 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b096      	sub	sp, #88	; 0x58
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800296e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	60da      	str	r2, [r3, #12]
 8002994:	611a      	str	r2, [r3, #16]
 8002996:	615a      	str	r2, [r3, #20]
 8002998:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	2220      	movs	r2, #32
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f018 fbbf 	bl	801b124 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80029a6:	4b45      	ldr	r3, [pc, #276]	; (8002abc <MX_TIM8_Init+0x154>)
 80029a8:	4a45      	ldr	r2, [pc, #276]	; (8002ac0 <MX_TIM8_Init+0x158>)
 80029aa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80029ac:	4b43      	ldr	r3, [pc, #268]	; (8002abc <MX_TIM8_Init+0x154>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b2:	4b42      	ldr	r3, [pc, #264]	; (8002abc <MX_TIM8_Init+0x154>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80029b8:	4b40      	ldr	r3, [pc, #256]	; (8002abc <MX_TIM8_Init+0x154>)
 80029ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029be:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029c0:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <MX_TIM8_Init+0x154>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80029c6:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <MX_TIM8_Init+0x154>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029cc:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <MX_TIM8_Init+0x154>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80029d2:	483a      	ldr	r0, [pc, #232]	; (8002abc <MX_TIM8_Init+0x154>)
 80029d4:	f004 fa0d 	bl	8006df2 <HAL_TIM_Base_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80029de:	f7ff fa5f 	bl	8001ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80029e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029ec:	4619      	mov	r1, r3
 80029ee:	4833      	ldr	r0, [pc, #204]	; (8002abc <MX_TIM8_Init+0x154>)
 80029f0:	f004 ff1e 	bl	8007830 <HAL_TIM_ConfigClockSource>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80029fa:	f7ff fa51 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80029fe:	482f      	ldr	r0, [pc, #188]	; (8002abc <MX_TIM8_Init+0x154>)
 8002a00:	f004 fb05 	bl	800700e <HAL_TIM_PWM_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002a0a:	f7ff fa49 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4827      	ldr	r0, [pc, #156]	; (8002abc <MX_TIM8_Init+0x154>)
 8002a1e:	f005 fc0b 	bl	8008238 <HAL_TIMEx_MasterConfigSynchronization>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002a28:	f7ff fa3a 	bl	8001ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a2c:	2360      	movs	r3, #96	; 0x60
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 512;
 8002a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4e:	2204      	movs	r2, #4
 8002a50:	4619      	mov	r1, r3
 8002a52:	481a      	ldr	r0, [pc, #104]	; (8002abc <MX_TIM8_Init+0x154>)
 8002a54:	f004 fe2a 	bl	80076ac <HAL_TIM_PWM_ConfigChannel>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8002a5e:	f7ff fa1f 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a66:	2208      	movs	r2, #8
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4814      	ldr	r0, [pc, #80]	; (8002abc <MX_TIM8_Init+0x154>)
 8002a6c:	f004 fe1e 	bl	80076ac <HAL_TIM_PWM_ConfigChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8002a76:	f7ff fa13 	bl	8001ea0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 2;
 8002a86:	2302      	movs	r3, #2
 8002a88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4807      	ldr	r0, [pc, #28]	; (8002abc <MX_TIM8_Init+0x154>)
 8002a9e:	f005 fc47 	bl	8008330 <HAL_TIMEx_ConfigBreakDeadTime>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8002aa8:	f7ff f9fa 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002aac:	4803      	ldr	r0, [pc, #12]	; (8002abc <MX_TIM8_Init+0x154>)
 8002aae:	f000 f9b7 	bl	8002e20 <HAL_TIM_MspPostInit>

}
 8002ab2:	bf00      	nop
 8002ab4:	3758      	adds	r7, #88	; 0x58
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	2000af74 	.word	0x2000af74
 8002ac0:	40010400 	.word	0x40010400

08002ac4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
 8002ad8:	615a      	str	r2, [r3, #20]
 8002ada:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002adc:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <MX_TIM9_Init+0x98>)
 8002ade:	4a20      	ldr	r2, [pc, #128]	; (8002b60 <MX_TIM9_Init+0x9c>)
 8002ae0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <MX_TIM9_Init+0x98>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <MX_TIM9_Init+0x98>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <MX_TIM9_Init+0x98>)
 8002af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <MX_TIM9_Init+0x98>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <MX_TIM9_Init+0x98>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002b02:	4816      	ldr	r0, [pc, #88]	; (8002b5c <MX_TIM9_Init+0x98>)
 8002b04:	f004 fa83 	bl	800700e <HAL_TIM_PWM_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002b0e:	f7ff f9c7 	bl	8001ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b12:	2360      	movs	r3, #96	; 0x60
 8002b14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b22:	1d3b      	adds	r3, r7, #4
 8002b24:	2200      	movs	r2, #0
 8002b26:	4619      	mov	r1, r3
 8002b28:	480c      	ldr	r0, [pc, #48]	; (8002b5c <MX_TIM9_Init+0x98>)
 8002b2a:	f004 fdbf 	bl	80076ac <HAL_TIM_PWM_ConfigChannel>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8002b34:	f7ff f9b4 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4807      	ldr	r0, [pc, #28]	; (8002b5c <MX_TIM9_Init+0x98>)
 8002b40:	f004 fdb4 	bl	80076ac <HAL_TIM_PWM_ConfigChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002b4a:	f7ff f9a9 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002b4e:	4803      	ldr	r0, [pc, #12]	; (8002b5c <MX_TIM9_Init+0x98>)
 8002b50:	f000 f966 	bl	8002e20 <HAL_TIM_MspPostInit>

}
 8002b54:	bf00      	nop
 8002b56:	3720      	adds	r7, #32
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	2000afbc 	.word	0x2000afbc
 8002b60:	40014000 	.word	0x40014000

08002b64 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <MX_TIM14_Init+0x40>)
 8002b6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ba8 <MX_TIM14_Init+0x44>)
 8002b6c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <MX_TIM14_Init+0x40>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <MX_TIM14_Init+0x40>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <MX_TIM14_Init+0x40>)
 8002b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b80:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <MX_TIM14_Init+0x40>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <MX_TIM14_Init+0x40>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002b8e:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <MX_TIM14_Init+0x40>)
 8002b90:	f004 f92f 	bl	8006df2 <HAL_TIM_Base_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002b9a:	f7ff f981 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2000b004 	.word	0x2000b004
 8002ba8:	40002000 	.word	0x40002000

08002bac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08c      	sub	sp, #48	; 0x30
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a36      	ldr	r2, [pc, #216]	; (8002ca4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d135      	bne.n	8002c3a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	4a34      	ldr	r2, [pc, #208]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bde:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	4b2e      	ldr	r3, [pc, #184]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a2d      	ldr	r2, [pc, #180]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM_ENC1_A_Pin|TIM_ENC1_B_Pin;
 8002c06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	4619      	mov	r1, r3
 8002c22:	4822      	ldr	r0, [pc, #136]	; (8002cac <HAL_TIM_Encoder_MspInit+0x100>)
 8002c24:	f001 fdf0 	bl	8004808 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2105      	movs	r1, #5
 8002c2c:	2019      	movs	r0, #25
 8002c2e:	f001 f9a3 	bl	8003f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c32:	2019      	movs	r0, #25
 8002c34:	f001 f9bc 	bl	8003fb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c38:	e030      	b.n	8002c9c <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM2)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c42:	d12b      	bne.n	8002c9c <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	4a16      	ldr	r2, [pc, #88]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6413      	str	r3, [r2, #64]	; 0x40
 8002c54:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c70:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_ENC2_B_Pin|TIM_ENC2_A_Pin;
 8002c7c:	2322      	movs	r3, #34	; 0x22
 8002c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c90:	f107 031c 	add.w	r3, r7, #28
 8002c94:	4619      	mov	r1, r3
 8002c96:	4805      	ldr	r0, [pc, #20]	; (8002cac <HAL_TIM_Encoder_MspInit+0x100>)
 8002c98:	f001 fdb6 	bl	8004808 <HAL_GPIO_Init>
}
 8002c9c:	bf00      	nop
 8002c9e:	3730      	adds	r7, #48	; 0x30
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020000 	.word	0x40020000

08002cb0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM3)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a23      	ldr	r2, [pc, #140]	; (8002d5c <HAL_TIM_PWM_MspInit+0xac>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d12c      	bne.n	8002d2c <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <HAL_TIM_PWM_MspInit+0xb0>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <HAL_TIM_PWM_MspInit+0xb0>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <HAL_TIM_PWM_MspInit+0xb0>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_TIM_PWM_MspInit+0xb0>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <HAL_TIM_PWM_MspInit+0xb0>)
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_FAN_INDEX_Pin;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_FAN_INDEX_GPIO_Port, &GPIO_InitStruct);
 8002d1e:	f107 0314 	add.w	r3, r7, #20
 8002d22:	4619      	mov	r1, r3
 8002d24:	480f      	ldr	r0, [pc, #60]	; (8002d64 <HAL_TIM_PWM_MspInit+0xb4>)
 8002d26:	f001 fd6f 	bl	8004808 <HAL_GPIO_Init>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002d2a:	e012      	b.n	8002d52 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM9)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0d      	ldr	r2, [pc, #52]	; (8002d68 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10d      	bne.n	8002d52 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4a08      	ldr	r2, [pc, #32]	; (8002d60 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6453      	str	r3, [r2, #68]	; 0x44
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
}
 8002d52:	bf00      	nop
 8002d54:	3728      	adds	r7, #40	; 0x28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40000400 	.word	0x40000400
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40014000 	.word	0x40014000

08002d6c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0b      	ldr	r2, [pc, #44]	; (8002da8 <HAL_TIM_OC_MspInit+0x3c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d10d      	bne.n	8002d9a <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_TIM_OC_MspInit+0x40>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <HAL_TIM_OC_MspInit+0x40>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <HAL_TIM_OC_MspInit+0x40>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40000800 	.word	0x40000800
 8002dac:	40023800 	.word	0x40023800

08002db0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <HAL_TIM_Base_MspInit+0x64>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d10e      	bne.n	8002de0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <HAL_TIM_Base_MspInit+0x68>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <HAL_TIM_Base_MspInit+0x68>)
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd2:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_TIM_Base_MspInit+0x68>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002dde:	e012      	b.n	8002e06 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM14)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0d      	ldr	r2, [pc, #52]	; (8002e1c <HAL_TIM_Base_MspInit+0x6c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10d      	bne.n	8002e06 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_TIM_Base_MspInit+0x68>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_TIM_Base_MspInit+0x68>)
 8002df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfa:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <HAL_TIM_Base_MspInit+0x68>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	68bb      	ldr	r3, [r7, #8]
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40010400 	.word	0x40010400
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40002000 	.word	0x40002000

08002e20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08c      	sub	sp, #48	; 0x30
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a46      	ldr	r2, [pc, #280]	; (8002f58 <HAL_TIM_MspPostInit+0x138>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d11e      	bne.n	8002e80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	4b45      	ldr	r3, [pc, #276]	; (8002f5c <HAL_TIM_MspPostInit+0x13c>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a44      	ldr	r2, [pc, #272]	; (8002f5c <HAL_TIM_MspPostInit+0x13c>)
 8002e4c:	f043 0302 	orr.w	r3, r3, #2
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b42      	ldr	r3, [pc, #264]	; (8002f5c <HAL_TIM_MspPostInit+0x13c>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	61bb      	str	r3, [r7, #24]
 8002e5c:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = TIM_FAN_PWM_Pin;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM_FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e72:	f107 031c 	add.w	r3, r7, #28
 8002e76:	4619      	mov	r1, r3
 8002e78:	4839      	ldr	r0, [pc, #228]	; (8002f60 <HAL_TIM_MspPostInit+0x140>)
 8002e7a:	f001 fcc5 	bl	8004808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002e7e:	e066      	b.n	8002f4e <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM8)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a37      	ldr	r2, [pc, #220]	; (8002f64 <HAL_TIM_MspPostInit+0x144>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d13e      	bne.n	8002f08 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <HAL_TIM_MspPostInit+0x13c>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a32      	ldr	r2, [pc, #200]	; (8002f5c <HAL_TIM_MspPostInit+0x13c>)
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9a:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <HAL_TIM_MspPostInit+0x13c>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <HAL_TIM_MspPostInit+0x13c>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <HAL_TIM_MspPostInit+0x13c>)
 8002eb0:	f043 0304 	orr.w	r3, r3, #4
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <HAL_TIM_MspPostInit+0x13c>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PB14_TIM8_MOT1_N_Pin|PB15_TIM8_MOT2_N_Pin;
 8002ec2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed8:	f107 031c 	add.w	r3, r7, #28
 8002edc:	4619      	mov	r1, r3
 8002ede:	4820      	ldr	r0, [pc, #128]	; (8002f60 <HAL_TIM_MspPostInit+0x140>)
 8002ee0:	f001 fc92 	bl	8004808 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PC7_TIM8_MOT1_P_Pin|PC8_TIM8_MOT2_P_Pin;
 8002ee4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eea:	2302      	movs	r3, #2
 8002eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efa:	f107 031c 	add.w	r3, r7, #28
 8002efe:	4619      	mov	r1, r3
 8002f00:	4819      	ldr	r0, [pc, #100]	; (8002f68 <HAL_TIM_MspPostInit+0x148>)
 8002f02:	f001 fc81 	bl	8004808 <HAL_GPIO_Init>
}
 8002f06:	e022      	b.n	8002f4e <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM9)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <HAL_TIM_MspPostInit+0x14c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d11d      	bne.n	8002f4e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_TIM_MspPostInit+0x13c>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a10      	ldr	r2, [pc, #64]	; (8002f5c <HAL_TIM_MspPostInit+0x13c>)
 8002f1c:	f043 0310 	orr.w	r3, r3, #16
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <HAL_TIM_MspPostInit+0x13c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f2e:	2360      	movs	r3, #96	; 0x60
 8002f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f42:	f107 031c 	add.w	r3, r7, #28
 8002f46:	4619      	mov	r1, r3
 8002f48:	4809      	ldr	r0, [pc, #36]	; (8002f70 <HAL_TIM_MspPostInit+0x150>)
 8002f4a:	f001 fc5d 	bl	8004808 <HAL_GPIO_Init>
}
 8002f4e:	bf00      	nop
 8002f50:	3730      	adds	r7, #48	; 0x30
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020400 	.word	0x40020400
 8002f64:	40010400 	.word	0x40010400
 8002f68:	40020800 	.word	0x40020800
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40021000 	.word	0x40021000

08002f74 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <MX_UART5_Init+0x4c>)
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <MX_UART5_Init+0x50>)
 8002f7c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <MX_UART5_Init+0x4c>)
 8002f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f84:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <MX_UART5_Init+0x4c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <MX_UART5_Init+0x4c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <MX_UART5_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <MX_UART5_Init+0x4c>)
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <MX_UART5_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <MX_UART5_Init+0x4c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002faa:	4805      	ldr	r0, [pc, #20]	; (8002fc0 <MX_UART5_Init+0x4c>)
 8002fac:	f005 fa26 	bl	80083fc <HAL_UART_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002fb6:	f7fe ff73 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	2000b04c 	.word	0x2000b04c
 8002fc4:	40005000 	.word	0x40005000

08002fc8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <MX_USART1_UART_Init+0x4c>)
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <MX_USART1_UART_Init+0x50>)
 8002fd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <MX_USART1_UART_Init+0x4c>)
 8002fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fda:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <MX_USART1_UART_Init+0x4c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <MX_USART1_UART_Init+0x4c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <MX_USART1_UART_Init+0x4c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <MX_USART1_UART_Init+0x4c>)
 8002fee:	220c      	movs	r2, #12
 8002ff0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <MX_USART1_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <MX_USART1_UART_Init+0x4c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ffe:	4805      	ldr	r0, [pc, #20]	; (8003014 <MX_USART1_UART_Init+0x4c>)
 8003000:	f005 f9fc 	bl	80083fc <HAL_UART_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800300a:	f7fe ff49 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	2000b090 	.word	0x2000b090
 8003018:	40011000 	.word	0x40011000

0800301c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <MX_USART2_UART_Init+0x4c>)
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <MX_USART2_UART_Init+0x50>)
 8003024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <MX_USART2_UART_Init+0x4c>)
 8003028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800302c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <MX_USART2_UART_Init+0x4c>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <MX_USART2_UART_Init+0x4c>)
 8003036:	2200      	movs	r2, #0
 8003038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <MX_USART2_UART_Init+0x4c>)
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <MX_USART2_UART_Init+0x4c>)
 8003042:	220c      	movs	r2, #12
 8003044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <MX_USART2_UART_Init+0x4c>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <MX_USART2_UART_Init+0x4c>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003052:	4805      	ldr	r0, [pc, #20]	; (8003068 <MX_USART2_UART_Init+0x4c>)
 8003054:	f005 f9d2 	bl	80083fc <HAL_UART_Init>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800305e:	f7fe ff1f 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	2000b0d4 	.word	0x2000b0d4
 800306c:	40004400 	.word	0x40004400

08003070 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08e      	sub	sp, #56	; 0x38
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a8e      	ldr	r2, [pc, #568]	; (80032c8 <HAL_UART_MspInit+0x258>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d14b      	bne.n	800312a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
 8003096:	4b8d      	ldr	r3, [pc, #564]	; (80032cc <HAL_UART_MspInit+0x25c>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a8c      	ldr	r2, [pc, #560]	; (80032cc <HAL_UART_MspInit+0x25c>)
 800309c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b8a      	ldr	r3, [pc, #552]	; (80032cc <HAL_UART_MspInit+0x25c>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	4b86      	ldr	r3, [pc, #536]	; (80032cc <HAL_UART_MspInit+0x25c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a85      	ldr	r2, [pc, #532]	; (80032cc <HAL_UART_MspInit+0x25c>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b83      	ldr	r3, [pc, #524]	; (80032cc <HAL_UART_MspInit+0x25c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	4b7f      	ldr	r3, [pc, #508]	; (80032cc <HAL_UART_MspInit+0x25c>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a7e      	ldr	r2, [pc, #504]	; (80032cc <HAL_UART_MspInit+0x25c>)
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b7c      	ldr	r3, [pc, #496]	; (80032cc <HAL_UART_MspInit+0x25c>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = SER2_TX_Pin;
 80030e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f4:	2303      	movs	r3, #3
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80030f8:	2308      	movs	r3, #8
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SER2_TX_GPIO_Port, &GPIO_InitStruct);
 80030fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003100:	4619      	mov	r1, r3
 8003102:	4873      	ldr	r0, [pc, #460]	; (80032d0 <HAL_UART_MspInit+0x260>)
 8003104:	f001 fb80 	bl	8004808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SER2_RX_Pin;
 8003108:	2304      	movs	r3, #4
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003114:	2303      	movs	r3, #3
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003118:	2308      	movs	r3, #8
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SER2_RX_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003120:	4619      	mov	r1, r3
 8003122:	486c      	ldr	r0, [pc, #432]	; (80032d4 <HAL_UART_MspInit+0x264>)
 8003124:	f001 fb70 	bl	8004808 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003128:	e0ca      	b.n	80032c0 <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a6a      	ldr	r2, [pc, #424]	; (80032d8 <HAL_UART_MspInit+0x268>)
 8003130:	4293      	cmp	r3, r2
 8003132:	f040 8094 	bne.w	800325e <HAL_UART_MspInit+0x1ee>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	4b64      	ldr	r3, [pc, #400]	; (80032cc <HAL_UART_MspInit+0x25c>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	4a63      	ldr	r2, [pc, #396]	; (80032cc <HAL_UART_MspInit+0x25c>)
 8003140:	f043 0310 	orr.w	r3, r3, #16
 8003144:	6453      	str	r3, [r2, #68]	; 0x44
 8003146:	4b61      	ldr	r3, [pc, #388]	; (80032cc <HAL_UART_MspInit+0x25c>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	4b5d      	ldr	r3, [pc, #372]	; (80032cc <HAL_UART_MspInit+0x25c>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a5c      	ldr	r2, [pc, #368]	; (80032cc <HAL_UART_MspInit+0x25c>)
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b5a      	ldr	r3, [pc, #360]	; (80032cc <HAL_UART_MspInit+0x25c>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800316e:	23c0      	movs	r3, #192	; 0xc0
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317a:	2303      	movs	r3, #3
 800317c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800317e:	2307      	movs	r3, #7
 8003180:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003186:	4619      	mov	r1, r3
 8003188:	4854      	ldr	r0, [pc, #336]	; (80032dc <HAL_UART_MspInit+0x26c>)
 800318a:	f001 fb3d 	bl	8004808 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800318e:	4b54      	ldr	r3, [pc, #336]	; (80032e0 <HAL_UART_MspInit+0x270>)
 8003190:	4a54      	ldr	r2, [pc, #336]	; (80032e4 <HAL_UART_MspInit+0x274>)
 8003192:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003194:	4b52      	ldr	r3, [pc, #328]	; (80032e0 <HAL_UART_MspInit+0x270>)
 8003196:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800319a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800319c:	4b50      	ldr	r3, [pc, #320]	; (80032e0 <HAL_UART_MspInit+0x270>)
 800319e:	2200      	movs	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031a2:	4b4f      	ldr	r3, [pc, #316]	; (80032e0 <HAL_UART_MspInit+0x270>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031a8:	4b4d      	ldr	r3, [pc, #308]	; (80032e0 <HAL_UART_MspInit+0x270>)
 80031aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031b0:	4b4b      	ldr	r3, [pc, #300]	; (80032e0 <HAL_UART_MspInit+0x270>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031b6:	4b4a      	ldr	r3, [pc, #296]	; (80032e0 <HAL_UART_MspInit+0x270>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80031bc:	4b48      	ldr	r3, [pc, #288]	; (80032e0 <HAL_UART_MspInit+0x270>)
 80031be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031c4:	4b46      	ldr	r3, [pc, #280]	; (80032e0 <HAL_UART_MspInit+0x270>)
 80031c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80031ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031cc:	4b44      	ldr	r3, [pc, #272]	; (80032e0 <HAL_UART_MspInit+0x270>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80031d2:	4843      	ldr	r0, [pc, #268]	; (80032e0 <HAL_UART_MspInit+0x270>)
 80031d4:	f000 ff16 	bl	8004004 <HAL_DMA_Init>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_UART_MspInit+0x172>
      Error_Handler();
 80031de:	f7fe fe5f 	bl	8001ea0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a3e      	ldr	r2, [pc, #248]	; (80032e0 <HAL_UART_MspInit+0x270>)
 80031e6:	639a      	str	r2, [r3, #56]	; 0x38
 80031e8:	4a3d      	ldr	r2, [pc, #244]	; (80032e0 <HAL_UART_MspInit+0x270>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80031ee:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <HAL_UART_MspInit+0x278>)
 80031f0:	4a3e      	ldr	r2, [pc, #248]	; (80032ec <HAL_UART_MspInit+0x27c>)
 80031f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80031f4:	4b3c      	ldr	r3, [pc, #240]	; (80032e8 <HAL_UART_MspInit+0x278>)
 80031f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031fc:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <HAL_UART_MspInit+0x278>)
 80031fe:	2240      	movs	r2, #64	; 0x40
 8003200:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003202:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <HAL_UART_MspInit+0x278>)
 8003204:	2200      	movs	r2, #0
 8003206:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003208:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <HAL_UART_MspInit+0x278>)
 800320a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800320e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_UART_MspInit+0x278>)
 8003212:	2200      	movs	r2, #0
 8003214:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003216:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <HAL_UART_MspInit+0x278>)
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800321c:	4b32      	ldr	r3, [pc, #200]	; (80032e8 <HAL_UART_MspInit+0x278>)
 800321e:	2200      	movs	r2, #0
 8003220:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003222:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <HAL_UART_MspInit+0x278>)
 8003224:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003228:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800322a:	4b2f      	ldr	r3, [pc, #188]	; (80032e8 <HAL_UART_MspInit+0x278>)
 800322c:	2200      	movs	r2, #0
 800322e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003230:	482d      	ldr	r0, [pc, #180]	; (80032e8 <HAL_UART_MspInit+0x278>)
 8003232:	f000 fee7 	bl	8004004 <HAL_DMA_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 800323c:	f7fe fe30 	bl	8001ea0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a29      	ldr	r2, [pc, #164]	; (80032e8 <HAL_UART_MspInit+0x278>)
 8003244:	635a      	str	r2, [r3, #52]	; 0x34
 8003246:	4a28      	ldr	r2, [pc, #160]	; (80032e8 <HAL_UART_MspInit+0x278>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800324c:	2200      	movs	r2, #0
 800324e:	2105      	movs	r1, #5
 8003250:	2025      	movs	r0, #37	; 0x25
 8003252:	f000 fe91 	bl	8003f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003256:	2025      	movs	r0, #37	; 0x25
 8003258:	f000 feaa 	bl	8003fb0 <HAL_NVIC_EnableIRQ>
}
 800325c:	e030      	b.n	80032c0 <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a23      	ldr	r2, [pc, #140]	; (80032f0 <HAL_UART_MspInit+0x280>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d12b      	bne.n	80032c0 <HAL_UART_MspInit+0x250>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	4b17      	ldr	r3, [pc, #92]	; (80032cc <HAL_UART_MspInit+0x25c>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	4a16      	ldr	r2, [pc, #88]	; (80032cc <HAL_UART_MspInit+0x25c>)
 8003272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003276:	6413      	str	r3, [r2, #64]	; 0x40
 8003278:	4b14      	ldr	r3, [pc, #80]	; (80032cc <HAL_UART_MspInit+0x25c>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	4b10      	ldr	r3, [pc, #64]	; (80032cc <HAL_UART_MspInit+0x25c>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	4a0f      	ldr	r2, [pc, #60]	; (80032cc <HAL_UART_MspInit+0x25c>)
 800328e:	f043 0308 	orr.w	r3, r3, #8
 8003292:	6313      	str	r3, [r2, #48]	; 0x30
 8003294:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <HAL_UART_MspInit+0x25c>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80032a0:	2360      	movs	r3, #96	; 0x60
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ac:	2303      	movs	r3, #3
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032b0:	2307      	movs	r3, #7
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032b8:	4619      	mov	r1, r3
 80032ba:	4806      	ldr	r0, [pc, #24]	; (80032d4 <HAL_UART_MspInit+0x264>)
 80032bc:	f001 faa4 	bl	8004808 <HAL_GPIO_Init>
}
 80032c0:	bf00      	nop
 80032c2:	3738      	adds	r7, #56	; 0x38
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40005000 	.word	0x40005000
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40020800 	.word	0x40020800
 80032d4:	40020c00 	.word	0x40020c00
 80032d8:	40011000 	.word	0x40011000
 80032dc:	40020400 	.word	0x40020400
 80032e0:	2000b118 	.word	0x2000b118
 80032e4:	40026440 	.word	0x40026440
 80032e8:	2000b178 	.word	0x2000b178
 80032ec:	400264b8 	.word	0x400264b8
 80032f0:	40004400 	.word	0x40004400

080032f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800332c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032f8:	480d      	ldr	r0, [pc, #52]	; (8003330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032fa:	490e      	ldr	r1, [pc, #56]	; (8003334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032fc:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003300:	e002      	b.n	8003308 <LoopCopyDataInit>

08003302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003306:	3304      	adds	r3, #4

08003308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800330c:	d3f9      	bcc.n	8003302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003310:	4c0b      	ldr	r4, [pc, #44]	; (8003340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003314:	e001      	b.n	800331a <LoopFillZerobss>

08003316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003318:	3204      	adds	r2, #4

0800331a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800331c:	d3fb      	bcc.n	8003316 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800331e:	f7ff f98b 	bl	8002638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003322:	f017 feb9 	bl	801b098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003326:	f7fe fceb 	bl	8001d00 <main>
  bx  lr    
 800332a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800332c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003334:	20000a20 	.word	0x20000a20
  ldr r2, =_sidata
 8003338:	0801db04 	.word	0x0801db04
  ldr r2, =_sbss
 800333c:	20000a20 	.word	0x20000a20
  ldr r4, =_ebss
 8003340:	20016310 	.word	0x20016310

08003344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003344:	e7fe      	b.n	8003344 <ADC_IRQHandler>
	...

08003348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <HAL_Init+0x40>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <HAL_Init+0x40>)
 8003352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_Init+0x40>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_Init+0x40>)
 800335e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_Init+0x40>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <HAL_Init+0x40>)
 800336a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003370:	2003      	movs	r0, #3
 8003372:	f000 fdf6 	bl	8003f62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003376:	2005      	movs	r0, #5
 8003378:	f7fe ffde 	bl	8002338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800337c:	f7fe ffb0 	bl	80022e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023c00 	.word	0x40023c00

0800338c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_IncTick+0x20>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_IncTick+0x24>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4413      	add	r3, r2
 800339c:	4a04      	ldr	r2, [pc, #16]	; (80033b0 <HAL_IncTick+0x24>)
 800339e:	6013      	str	r3, [r2, #0]
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	2000000c 	.word	0x2000000c
 80033b0:	2000b1d8 	.word	0x2000b1d8

080033b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return uwTick;
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_GetTick+0x14>)
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	2000b1d8 	.word	0x2000b1d8

080033cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033d4:	f7ff ffee 	bl	80033b4 <HAL_GetTick>
 80033d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033e4:	d005      	beq.n	80033f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <HAL_Delay+0x44>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033f2:	bf00      	nop
 80033f4:	f7ff ffde 	bl	80033b4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	429a      	cmp	r2, r3
 8003402:	d8f7      	bhi.n	80033f4 <HAL_Delay+0x28>
  {
  }
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	2000000c 	.word	0x2000000c

08003414 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e033      	b.n	8003492 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fc2c 	bl	8000c90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b00      	cmp	r3, #0
 8003450:	d118      	bne.n	8003484 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800345a:	f023 0302 	bic.w	r3, r3, #2
 800345e:	f043 0202 	orr.w	r2, r3, #2
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fa54 	bl	8003914 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
 8003482:	e001      	b.n	8003488 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003490:	7bfb      	ldrb	r3, [r7, #15]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_Start_DMA+0x1e>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e0e9      	b.n	800368e <HAL_ADC_Start_DMA+0x1f2>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d018      	beq.n	8003502 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034e0:	4b6d      	ldr	r3, [pc, #436]	; (8003698 <HAL_ADC_Start_DMA+0x1fc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a6d      	ldr	r2, [pc, #436]	; (800369c <HAL_ADC_Start_DMA+0x200>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	0c9a      	lsrs	r2, r3, #18
 80034ec:	4613      	mov	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4413      	add	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034f4:	e002      	b.n	80034fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f9      	bne.n	80034f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003510:	d107      	bne.n	8003522 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003520:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	f040 80a1 	bne.w	8003674 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800355c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003570:	d106      	bne.n	8003580 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f023 0206 	bic.w	r2, r3, #6
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
 800357e:	e002      	b.n	8003586 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800358e:	4b44      	ldr	r3, [pc, #272]	; (80036a0 <HAL_ADC_Start_DMA+0x204>)
 8003590:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	4a43      	ldr	r2, [pc, #268]	; (80036a4 <HAL_ADC_Start_DMA+0x208>)
 8003598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	4a42      	ldr	r2, [pc, #264]	; (80036a8 <HAL_ADC_Start_DMA+0x20c>)
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	4a41      	ldr	r2, [pc, #260]	; (80036ac <HAL_ADC_Start_DMA+0x210>)
 80035a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80035b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80035c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	334c      	adds	r3, #76	; 0x4c
 80035de:	4619      	mov	r1, r3
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f000 fdbc 	bl	8004160 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d12a      	bne.n	800364a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2d      	ldr	r2, [pc, #180]	; (80036b0 <HAL_ADC_Start_DMA+0x214>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d015      	beq.n	800362a <HAL_ADC_Start_DMA+0x18e>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2c      	ldr	r2, [pc, #176]	; (80036b4 <HAL_ADC_Start_DMA+0x218>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d105      	bne.n	8003614 <HAL_ADC_Start_DMA+0x178>
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <HAL_ADC_Start_DMA+0x204>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <HAL_ADC_Start_DMA+0x21c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d136      	bne.n	800368c <HAL_ADC_Start_DMA+0x1f0>
 800361e:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <HAL_ADC_Start_DMA+0x204>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b00      	cmp	r3, #0
 8003628:	d130      	bne.n	800368c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d129      	bne.n	800368c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	e020      	b.n	800368c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <HAL_ADC_Start_DMA+0x214>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d11b      	bne.n	800368c <HAL_ADC_Start_DMA+0x1f0>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d114      	bne.n	800368c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	e00b      	b.n	800368c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f043 0210 	orr.w	r2, r3, #16
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003684:	f043 0201 	orr.w	r2, r3, #1
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000004 	.word	0x20000004
 800369c:	431bde83 	.word	0x431bde83
 80036a0:	40012300 	.word	0x40012300
 80036a4:	08003b0d 	.word	0x08003b0d
 80036a8:	08003bc7 	.word	0x08003bc7
 80036ac:	08003be3 	.word	0x08003be3
 80036b0:	40012000 	.word	0x40012000
 80036b4:	40012100 	.word	0x40012100
 80036b8:	40012200 	.word	0x40012200

080036bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x1c>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e105      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x228>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b09      	cmp	r3, #9
 80036fa:	d925      	bls.n	8003748 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68d9      	ldr	r1, [r3, #12]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	3b1e      	subs	r3, #30
 8003712:	2207      	movs	r2, #7
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43da      	mvns	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	400a      	ands	r2, r1
 8003720:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68d9      	ldr	r1, [r3, #12]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	b29b      	uxth	r3, r3
 8003732:	4618      	mov	r0, r3
 8003734:	4603      	mov	r3, r0
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4403      	add	r3, r0
 800373a:	3b1e      	subs	r3, #30
 800373c:	409a      	lsls	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	e022      	b.n	800378e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6919      	ldr	r1, [r3, #16]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	2207      	movs	r2, #7
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	400a      	ands	r2, r1
 800376a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6919      	ldr	r1, [r3, #16]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	4618      	mov	r0, r3
 800377e:	4603      	mov	r3, r0
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4403      	add	r3, r0
 8003784:	409a      	lsls	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b06      	cmp	r3, #6
 8003794:	d824      	bhi.n	80037e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	3b05      	subs	r3, #5
 80037a8:	221f      	movs	r2, #31
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43da      	mvns	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	400a      	ands	r2, r1
 80037b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	4618      	mov	r0, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	3b05      	subs	r3, #5
 80037d2:	fa00 f203 	lsl.w	r2, r0, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	635a      	str	r2, [r3, #52]	; 0x34
 80037de:	e04c      	b.n	800387a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	d824      	bhi.n	8003832 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	3b23      	subs	r3, #35	; 0x23
 80037fa:	221f      	movs	r2, #31
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43da      	mvns	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	400a      	ands	r2, r1
 8003808:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	4618      	mov	r0, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	3b23      	subs	r3, #35	; 0x23
 8003824:	fa00 f203 	lsl.w	r2, r0, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
 8003830:	e023      	b.n	800387a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	3b41      	subs	r3, #65	; 0x41
 8003844:	221f      	movs	r2, #31
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	400a      	ands	r2, r1
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	b29b      	uxth	r3, r3
 8003860:	4618      	mov	r0, r3
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	3b41      	subs	r3, #65	; 0x41
 800386e:	fa00 f203 	lsl.w	r2, r0, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <HAL_ADC_ConfigChannel+0x234>)
 800387c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a21      	ldr	r2, [pc, #132]	; (8003908 <HAL_ADC_ConfigChannel+0x238>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d109      	bne.n	800389c <HAL_ADC_ConfigChannel+0x1cc>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b12      	cmp	r3, #18
 800388e:	d105      	bne.n	800389c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a19      	ldr	r2, [pc, #100]	; (8003908 <HAL_ADC_ConfigChannel+0x238>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d123      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x21e>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d003      	beq.n	80038b6 <HAL_ADC_ConfigChannel+0x1e6>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b11      	cmp	r3, #17
 80038b4:	d11b      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d111      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <HAL_ADC_ConfigChannel+0x23c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a10      	ldr	r2, [pc, #64]	; (8003910 <HAL_ADC_ConfigChannel+0x240>)
 80038d0:	fba2 2303 	umull	r2, r3, r2, r3
 80038d4:	0c9a      	lsrs	r2, r3, #18
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038e0:	e002      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f9      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40012300 	.word	0x40012300
 8003908:	40012000 	.word	0x40012000
 800390c:	20000004 	.word	0x20000004
 8003910:	431bde83 	.word	0x431bde83

08003914 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800391c:	4b79      	ldr	r3, [pc, #484]	; (8003b04 <ADC_Init+0x1f0>)
 800391e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	431a      	orrs	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	021a      	lsls	r2, r3, #8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800396c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800398e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6899      	ldr	r1, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	4a58      	ldr	r2, [pc, #352]	; (8003b08 <ADC_Init+0x1f4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d022      	beq.n	80039f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6899      	ldr	r1, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6899      	ldr	r1, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	e00f      	b.n	8003a12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0202 	bic.w	r2, r2, #2
 8003a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6899      	ldr	r1, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7e1b      	ldrb	r3, [r3, #24]
 8003a2c:	005a      	lsls	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01b      	beq.n	8003a78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	035a      	lsls	r2, r3, #13
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	e007      	b.n	8003a88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	051a      	lsls	r2, r3, #20
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6899      	ldr	r1, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003aca:	025a      	lsls	r2, r3, #9
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6899      	ldr	r1, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	029a      	lsls	r2, r3, #10
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	609a      	str	r2, [r3, #8]
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	40012300 	.word	0x40012300
 8003b08:	0f000001 	.word	0x0f000001

08003b0c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d13c      	bne.n	8003ba0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d12b      	bne.n	8003b98 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d127      	bne.n	8003b98 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d006      	beq.n	8003b64 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d119      	bne.n	8003b98 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0220 	bic.w	r2, r2, #32
 8003b72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f043 0201 	orr.w	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f7fe f94f 	bl	8001e3c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b9e:	e00e      	b.n	8003bbe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f7ff fd85 	bl	80036bc <HAL_ADC_ErrorCallback>
}
 8003bb2:	e004      	b.n	8003bbe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f7fe f941 	bl	8001e5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2240      	movs	r2, #64	; 0x40
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	f043 0204 	orr.w	r2, r3, #4
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f7ff fd5a 	bl	80036bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e0ed      	b.n	8003dfe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d102      	bne.n	8003c34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd f95a 	bl	8000ee8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c44:	f7ff fbb6 	bl	80033b4 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c4a:	e012      	b.n	8003c72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c4c:	f7ff fbb2 	bl	80033b4 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b0a      	cmp	r3, #10
 8003c58:	d90b      	bls.n	8003c72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2205      	movs	r2, #5
 8003c6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e0c5      	b.n	8003dfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0e5      	beq.n	8003c4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0202 	bic.w	r2, r2, #2
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c90:	f7ff fb90 	bl	80033b4 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c96:	e012      	b.n	8003cbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c98:	f7ff fb8c 	bl	80033b4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b0a      	cmp	r3, #10
 8003ca4:	d90b      	bls.n	8003cbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2205      	movs	r2, #5
 8003cb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e09f      	b.n	8003dfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e5      	bne.n	8003c98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7e1b      	ldrb	r3, [r3, #24]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d108      	bne.n	8003ce6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e007      	b.n	8003cf6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	7e5b      	ldrb	r3, [r3, #25]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d108      	bne.n	8003d10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	e007      	b.n	8003d20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	7e9b      	ldrb	r3, [r3, #26]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d108      	bne.n	8003d3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0220 	orr.w	r2, r2, #32
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e007      	b.n	8003d4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0220 	bic.w	r2, r2, #32
 8003d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	7edb      	ldrb	r3, [r3, #27]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d108      	bne.n	8003d64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0210 	bic.w	r2, r2, #16
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e007      	b.n	8003d74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0210 	orr.w	r2, r2, #16
 8003d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	7f1b      	ldrb	r3, [r3, #28]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d108      	bne.n	8003d8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0208 	orr.w	r2, r2, #8
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e007      	b.n	8003d9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0208 	bic.w	r2, r2, #8
 8003d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	7f5b      	ldrb	r3, [r3, #29]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d108      	bne.n	8003db8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0204 	orr.w	r2, r2, #4
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e007      	b.n	8003dc8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0204 	bic.w	r2, r2, #4
 8003dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	ea42 0103 	orr.w	r1, r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	1e5a      	subs	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <__NVIC_SetPriorityGrouping+0x44>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e24:	4013      	ands	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e3a:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <__NVIC_SetPriorityGrouping+0x44>)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	60d3      	str	r3, [r2, #12]
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	e000ed00 	.word	0xe000ed00

08003e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e54:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <__NVIC_GetPriorityGrouping+0x18>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	0a1b      	lsrs	r3, r3, #8
 8003e5a:	f003 0307 	and.w	r3, r3, #7
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	e000ed00 	.word	0xe000ed00

08003e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	db0b      	blt.n	8003e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	f003 021f 	and.w	r2, r3, #31
 8003e84:	4907      	ldr	r1, [pc, #28]	; (8003ea4 <__NVIC_EnableIRQ+0x38>)
 8003e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	e000e100 	.word	0xe000e100

08003ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	6039      	str	r1, [r7, #0]
 8003eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	db0a      	blt.n	8003ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	490c      	ldr	r1, [pc, #48]	; (8003ef4 <__NVIC_SetPriority+0x4c>)
 8003ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec6:	0112      	lsls	r2, r2, #4
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	440b      	add	r3, r1
 8003ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ed0:	e00a      	b.n	8003ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	4908      	ldr	r1, [pc, #32]	; (8003ef8 <__NVIC_SetPriority+0x50>)
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	3b04      	subs	r3, #4
 8003ee0:	0112      	lsls	r2, r2, #4
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	761a      	strb	r2, [r3, #24]
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	e000e100 	.word	0xe000e100
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b089      	sub	sp, #36	; 0x24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f1c3 0307 	rsb	r3, r3, #7
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	bf28      	it	cs
 8003f1a:	2304      	movcs	r3, #4
 8003f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3304      	adds	r3, #4
 8003f22:	2b06      	cmp	r3, #6
 8003f24:	d902      	bls.n	8003f2c <NVIC_EncodePriority+0x30>
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3b03      	subs	r3, #3
 8003f2a:	e000      	b.n	8003f2e <NVIC_EncodePriority+0x32>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	401a      	ands	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4e:	43d9      	mvns	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f54:	4313      	orrs	r3, r2
         );
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3724      	adds	r7, #36	; 0x24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff ff4c 	bl	8003e08 <__NVIC_SetPriorityGrouping>
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f8a:	f7ff ff61 	bl	8003e50 <__NVIC_GetPriorityGrouping>
 8003f8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	6978      	ldr	r0, [r7, #20]
 8003f96:	f7ff ffb1 	bl	8003efc <NVIC_EncodePriority>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff ff80 	bl	8003ea8 <__NVIC_SetPriority>
}
 8003fa8:	bf00      	nop
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff ff54 	bl	8003e6c <__NVIC_EnableIRQ>
}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e00e      	b.n	8003ffc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	795b      	ldrb	r3, [r3, #5]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc ffd6 	bl	8000fa0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004010:	f7ff f9d0 	bl	80033b4 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e099      	b.n	8004154 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004040:	e00f      	b.n	8004062 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004042:	f7ff f9b7 	bl	80033b4 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b05      	cmp	r3, #5
 800404e:	d908      	bls.n	8004062 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2203      	movs	r2, #3
 800405a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e078      	b.n	8004154 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e8      	bne.n	8004042 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4b38      	ldr	r3, [pc, #224]	; (800415c <HAL_DMA_Init+0x158>)
 800407c:	4013      	ands	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800408e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800409a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d107      	bne.n	80040cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	4313      	orrs	r3, r2
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f023 0307 	bic.w	r3, r3, #7
 80040e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d117      	bne.n	8004126 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00e      	beq.n	8004126 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fb01 	bl	8004710 <DMA_CheckFifoParam>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2240      	movs	r2, #64	; 0x40
 8004118:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004122:	2301      	movs	r3, #1
 8004124:	e016      	b.n	8004154 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fab8 	bl	80046a4 <DMA_CalcBaseAndBitshift>
 8004134:	4603      	mov	r3, r0
 8004136:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	223f      	movs	r2, #63	; 0x3f
 800413e:	409a      	lsls	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	f010803f 	.word	0xf010803f

08004160 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_DMA_Start_IT+0x26>
 8004182:	2302      	movs	r3, #2
 8004184:	e040      	b.n	8004208 <HAL_DMA_Start_IT+0xa8>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b01      	cmp	r3, #1
 8004198:	d12f      	bne.n	80041fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2202      	movs	r2, #2
 800419e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fa4a 	bl	8004648 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b8:	223f      	movs	r2, #63	; 0x3f
 80041ba:	409a      	lsls	r2, r3
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0216 	orr.w	r2, r2, #22
 80041ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0208 	orr.w	r2, r2, #8
 80041e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	e005      	b.n	8004206 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004202:	2302      	movs	r3, #2
 8004204:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004206:	7dfb      	ldrb	r3, [r7, #23]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800421e:	f7ff f8c9 	bl	80033b4 <HAL_GetTick>
 8004222:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d008      	beq.n	8004242 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2280      	movs	r2, #128	; 0x80
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e052      	b.n	80042e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0216 	bic.w	r2, r2, #22
 8004250:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004260:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d103      	bne.n	8004272 <HAL_DMA_Abort+0x62>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0208 	bic.w	r2, r2, #8
 8004280:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004292:	e013      	b.n	80042bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004294:	f7ff f88e 	bl	80033b4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b05      	cmp	r3, #5
 80042a0:	d90c      	bls.n	80042bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2203      	movs	r2, #3
 80042ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e015      	b.n	80042e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e4      	bne.n	8004294 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ce:	223f      	movs	r2, #63	; 0x3f
 80042d0:	409a      	lsls	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d004      	beq.n	800430e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2280      	movs	r2, #128	; 0x80
 8004308:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e00c      	b.n	8004328 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2205      	movs	r2, #5
 8004312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0201 	bic.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004340:	4b8e      	ldr	r3, [pc, #568]	; (800457c <HAL_DMA_IRQHandler+0x248>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a8e      	ldr	r2, [pc, #568]	; (8004580 <HAL_DMA_IRQHandler+0x24c>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	0a9b      	lsrs	r3, r3, #10
 800434c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435e:	2208      	movs	r2, #8
 8004360:	409a      	lsls	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4013      	ands	r3, r2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01a      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d013      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0204 	bic.w	r2, r2, #4
 8004386:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438c:	2208      	movs	r2, #8
 800438e:	409a      	lsls	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	f043 0201 	orr.w	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a4:	2201      	movs	r2, #1
 80043a6:	409a      	lsls	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d012      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00b      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	2201      	movs	r2, #1
 80043c4:	409a      	lsls	r2, r3
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	f043 0202 	orr.w	r2, r3, #2
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043da:	2204      	movs	r2, #4
 80043dc:	409a      	lsls	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d012      	beq.n	800440c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f8:	2204      	movs	r2, #4
 80043fa:	409a      	lsls	r2, r3
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	f043 0204 	orr.w	r2, r3, #4
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004410:	2210      	movs	r2, #16
 8004412:	409a      	lsls	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d043      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d03c      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442e:	2210      	movs	r2, #16
 8004430:	409a      	lsls	r2, r3
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d018      	beq.n	8004476 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d108      	bne.n	8004464 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d024      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4798      	blx	r3
 8004462:	e01f      	b.n	80044a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01b      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
 8004474:	e016      	b.n	80044a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d107      	bne.n	8004494 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0208 	bic.w	r2, r2, #8
 8004492:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	2220      	movs	r2, #32
 80044aa:	409a      	lsls	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4013      	ands	r3, r2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 808f 	beq.w	80045d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8087 	beq.w	80045d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ca:	2220      	movs	r2, #32
 80044cc:	409a      	lsls	r2, r3
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d136      	bne.n	800454c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0216 	bic.w	r2, r2, #22
 80044ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <HAL_DMA_IRQHandler+0x1da>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0208 	bic.w	r2, r2, #8
 800451c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004522:	223f      	movs	r2, #63	; 0x3f
 8004524:	409a      	lsls	r2, r3
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453e:	2b00      	cmp	r3, #0
 8004540:	d07e      	beq.n	8004640 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	4798      	blx	r3
        }
        return;
 800454a:	e079      	b.n	8004640 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01d      	beq.n	8004596 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10d      	bne.n	8004584 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	2b00      	cmp	r3, #0
 800456e:	d031      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4798      	blx	r3
 8004578:	e02c      	b.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
 800457a:	bf00      	nop
 800457c:	20000004 	.word	0x20000004
 8004580:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004588:	2b00      	cmp	r3, #0
 800458a:	d023      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	4798      	blx	r3
 8004594:	e01e      	b.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10f      	bne.n	80045c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0210 	bic.w	r2, r2, #16
 80045b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d032      	beq.n	8004642 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d022      	beq.n	800462e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2205      	movs	r2, #5
 80045ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	3301      	adds	r3, #1
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	429a      	cmp	r2, r3
 800460a:	d307      	bcc.n	800461c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f2      	bne.n	8004600 <HAL_DMA_IRQHandler+0x2cc>
 800461a:	e000      	b.n	800461e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800461c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
 800463e:	e000      	b.n	8004642 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004640:	bf00      	nop
    }
  }
}
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004664:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d108      	bne.n	8004688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004686:	e007      	b.n	8004698 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	60da      	str	r2, [r3, #12]
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	3b10      	subs	r3, #16
 80046b4:	4a14      	ldr	r2, [pc, #80]	; (8004708 <DMA_CalcBaseAndBitshift+0x64>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046be:	4a13      	ldr	r2, [pc, #76]	; (800470c <DMA_CalcBaseAndBitshift+0x68>)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d909      	bls.n	80046e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	1d1a      	adds	r2, r3, #4
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	659a      	str	r2, [r3, #88]	; 0x58
 80046e4:	e007      	b.n	80046f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046ee:	f023 0303 	bic.w	r3, r3, #3
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	aaaaaaab 	.word	0xaaaaaaab
 800470c:	0801c894 	.word	0x0801c894

08004710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d11f      	bne.n	800476a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d856      	bhi.n	80047de <DMA_CheckFifoParam+0xce>
 8004730:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <DMA_CheckFifoParam+0x28>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	08004749 	.word	0x08004749
 800473c:	0800475b 	.word	0x0800475b
 8004740:	08004749 	.word	0x08004749
 8004744:	080047df 	.word	0x080047df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d046      	beq.n	80047e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004758:	e043      	b.n	80047e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004762:	d140      	bne.n	80047e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004768:	e03d      	b.n	80047e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004772:	d121      	bne.n	80047b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b03      	cmp	r3, #3
 8004778:	d837      	bhi.n	80047ea <DMA_CheckFifoParam+0xda>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <DMA_CheckFifoParam+0x70>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	08004791 	.word	0x08004791
 8004784:	08004797 	.word	0x08004797
 8004788:	08004791 	.word	0x08004791
 800478c:	080047a9 	.word	0x080047a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	e030      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d025      	beq.n	80047ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a6:	e022      	b.n	80047ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047b0:	d11f      	bne.n	80047f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047b6:	e01c      	b.n	80047f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d903      	bls.n	80047c6 <DMA_CheckFifoParam+0xb6>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d003      	beq.n	80047cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047c4:	e018      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
      break;
 80047ca:	e015      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00e      	beq.n	80047f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
      break;
 80047dc:	e00b      	b.n	80047f6 <DMA_CheckFifoParam+0xe6>
      break;
 80047de:	bf00      	nop
 80047e0:	e00a      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047e2:	bf00      	nop
 80047e4:	e008      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047e6:	bf00      	nop
 80047e8:	e006      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047ea:	bf00      	nop
 80047ec:	e004      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047ee:	bf00      	nop
 80047f0:	e002      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80047f2:	bf00      	nop
 80047f4:	e000      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047f6:	bf00      	nop
    }
  } 
  
  return status; 
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop

08004808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004808:	b480      	push	{r7}
 800480a:	b089      	sub	sp, #36	; 0x24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004816:	2300      	movs	r3, #0
 8004818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	e16b      	b.n	8004afc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004824:	2201      	movs	r2, #1
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	429a      	cmp	r2, r3
 800483e:	f040 815a 	bne.w	8004af6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d005      	beq.n	800485a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004856:	2b02      	cmp	r3, #2
 8004858:	d130      	bne.n	80048bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	2203      	movs	r2, #3
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4313      	orrs	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004890:	2201      	movs	r2, #1
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 0201 	and.w	r2, r3, #1
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d017      	beq.n	80048f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	2203      	movs	r2, #3
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d123      	bne.n	800494c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	08da      	lsrs	r2, r3, #3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3208      	adds	r2, #8
 800490c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	220f      	movs	r2, #15
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4013      	ands	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	08da      	lsrs	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3208      	adds	r2, #8
 8004946:	69b9      	ldr	r1, [r7, #24]
 8004948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	2203      	movs	r2, #3
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 0203 	and.w	r2, r3, #3
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4313      	orrs	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80b4 	beq.w	8004af6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	4b60      	ldr	r3, [pc, #384]	; (8004b14 <HAL_GPIO_Init+0x30c>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	4a5f      	ldr	r2, [pc, #380]	; (8004b14 <HAL_GPIO_Init+0x30c>)
 8004998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800499c:	6453      	str	r3, [r2, #68]	; 0x44
 800499e:	4b5d      	ldr	r3, [pc, #372]	; (8004b14 <HAL_GPIO_Init+0x30c>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049aa:	4a5b      	ldr	r2, [pc, #364]	; (8004b18 <HAL_GPIO_Init+0x310>)
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	3302      	adds	r3, #2
 80049b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	220f      	movs	r2, #15
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a52      	ldr	r2, [pc, #328]	; (8004b1c <HAL_GPIO_Init+0x314>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d02b      	beq.n	8004a2e <HAL_GPIO_Init+0x226>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a51      	ldr	r2, [pc, #324]	; (8004b20 <HAL_GPIO_Init+0x318>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d025      	beq.n	8004a2a <HAL_GPIO_Init+0x222>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a50      	ldr	r2, [pc, #320]	; (8004b24 <HAL_GPIO_Init+0x31c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01f      	beq.n	8004a26 <HAL_GPIO_Init+0x21e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a4f      	ldr	r2, [pc, #316]	; (8004b28 <HAL_GPIO_Init+0x320>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d019      	beq.n	8004a22 <HAL_GPIO_Init+0x21a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a4e      	ldr	r2, [pc, #312]	; (8004b2c <HAL_GPIO_Init+0x324>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d013      	beq.n	8004a1e <HAL_GPIO_Init+0x216>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a4d      	ldr	r2, [pc, #308]	; (8004b30 <HAL_GPIO_Init+0x328>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00d      	beq.n	8004a1a <HAL_GPIO_Init+0x212>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a4c      	ldr	r2, [pc, #304]	; (8004b34 <HAL_GPIO_Init+0x32c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <HAL_GPIO_Init+0x20e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a4b      	ldr	r2, [pc, #300]	; (8004b38 <HAL_GPIO_Init+0x330>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <HAL_GPIO_Init+0x20a>
 8004a0e:	2307      	movs	r3, #7
 8004a10:	e00e      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a12:	2308      	movs	r3, #8
 8004a14:	e00c      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a16:	2306      	movs	r3, #6
 8004a18:	e00a      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a1a:	2305      	movs	r3, #5
 8004a1c:	e008      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a1e:	2304      	movs	r3, #4
 8004a20:	e006      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a22:	2303      	movs	r3, #3
 8004a24:	e004      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e002      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	f002 0203 	and.w	r2, r2, #3
 8004a36:	0092      	lsls	r2, r2, #2
 8004a38:	4093      	lsls	r3, r2
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a40:	4935      	ldr	r1, [pc, #212]	; (8004b18 <HAL_GPIO_Init+0x310>)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	089b      	lsrs	r3, r3, #2
 8004a46:	3302      	adds	r3, #2
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a4e:	4b3b      	ldr	r3, [pc, #236]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a72:	4a32      	ldr	r2, [pc, #200]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a78:	4b30      	ldr	r3, [pc, #192]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a9c:	4a27      	ldr	r2, [pc, #156]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004aa2:	4b26      	ldr	r3, [pc, #152]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ac6:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004af0:	4a12      	ldr	r2, [pc, #72]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3301      	adds	r3, #1
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	2b0f      	cmp	r3, #15
 8004b00:	f67f ae90 	bls.w	8004824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	3724      	adds	r7, #36	; 0x24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40013800 	.word	0x40013800
 8004b1c:	40020000 	.word	0x40020000
 8004b20:	40020400 	.word	0x40020400
 8004b24:	40020800 	.word	0x40020800
 8004b28:	40020c00 	.word	0x40020c00
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	40021400 	.word	0x40021400
 8004b34:	40021800 	.word	0x40021800
 8004b38:	40021c00 	.word	0x40021c00
 8004b3c:	40013c00 	.word	0x40013c00

08004b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	807b      	strh	r3, [r7, #2]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b50:	787b      	ldrb	r3, [r7, #1]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b5c:	e003      	b.n	8004b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b5e:	887b      	ldrh	r3, [r7, #2]
 8004b60:	041a      	lsls	r2, r3, #16
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	619a      	str	r2, [r3, #24]
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e12b      	b.n	8004dde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fd f868 	bl	8001c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2224      	movs	r2, #36	; 0x24
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0201 	bic.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bd8:	f001 fffe 	bl	8006bd8 <HAL_RCC_GetPCLK1Freq>
 8004bdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	4a81      	ldr	r2, [pc, #516]	; (8004de8 <HAL_I2C_Init+0x274>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d807      	bhi.n	8004bf8 <HAL_I2C_Init+0x84>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a80      	ldr	r2, [pc, #512]	; (8004dec <HAL_I2C_Init+0x278>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	bf94      	ite	ls
 8004bf0:	2301      	movls	r3, #1
 8004bf2:	2300      	movhi	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e006      	b.n	8004c06 <HAL_I2C_Init+0x92>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4a7d      	ldr	r2, [pc, #500]	; (8004df0 <HAL_I2C_Init+0x27c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	bf94      	ite	ls
 8004c00:	2301      	movls	r3, #1
 8004c02:	2300      	movhi	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e0e7      	b.n	8004dde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4a78      	ldr	r2, [pc, #480]	; (8004df4 <HAL_I2C_Init+0x280>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	0c9b      	lsrs	r3, r3, #18
 8004c18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4a6a      	ldr	r2, [pc, #424]	; (8004de8 <HAL_I2C_Init+0x274>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d802      	bhi.n	8004c48 <HAL_I2C_Init+0xd4>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	3301      	adds	r3, #1
 8004c46:	e009      	b.n	8004c5c <HAL_I2C_Init+0xe8>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	4a69      	ldr	r2, [pc, #420]	; (8004df8 <HAL_I2C_Init+0x284>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	099b      	lsrs	r3, r3, #6
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	430b      	orrs	r3, r1
 8004c62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	495c      	ldr	r1, [pc, #368]	; (8004de8 <HAL_I2C_Init+0x274>)
 8004c78:	428b      	cmp	r3, r1
 8004c7a:	d819      	bhi.n	8004cb0 <HAL_I2C_Init+0x13c>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	1e59      	subs	r1, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c8a:	1c59      	adds	r1, r3, #1
 8004c8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c90:	400b      	ands	r3, r1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_I2C_Init+0x138>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1e59      	subs	r1, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004caa:	e051      	b.n	8004d50 <HAL_I2C_Init+0x1dc>
 8004cac:	2304      	movs	r3, #4
 8004cae:	e04f      	b.n	8004d50 <HAL_I2C_Init+0x1dc>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d111      	bne.n	8004cdc <HAL_I2C_Init+0x168>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	1e58      	subs	r0, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	440b      	add	r3, r1
 8004cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	e012      	b.n	8004d02 <HAL_I2C_Init+0x18e>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	1e58      	subs	r0, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6859      	ldr	r1, [r3, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	0099      	lsls	r1, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf0c      	ite	eq
 8004cfc:	2301      	moveq	r3, #1
 8004cfe:	2300      	movne	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_I2C_Init+0x196>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e022      	b.n	8004d50 <HAL_I2C_Init+0x1dc>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10e      	bne.n	8004d30 <HAL_I2C_Init+0x1bc>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1e58      	subs	r0, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6859      	ldr	r1, [r3, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	440b      	add	r3, r1
 8004d20:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d24:	3301      	adds	r3, #1
 8004d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2e:	e00f      	b.n	8004d50 <HAL_I2C_Init+0x1dc>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1e58      	subs	r0, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	0099      	lsls	r1, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d46:	3301      	adds	r3, #1
 8004d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	6809      	ldr	r1, [r1, #0]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69da      	ldr	r2, [r3, #28]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6911      	ldr	r1, [r2, #16]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	68d2      	ldr	r2, [r2, #12]
 8004d8a:	4311      	orrs	r1, r2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695a      	ldr	r2, [r3, #20]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	000186a0 	.word	0x000186a0
 8004dec:	001e847f 	.word	0x001e847f
 8004df0:	003d08ff 	.word	0x003d08ff
 8004df4:	431bde83 	.word	0x431bde83
 8004df8:	10624dd3 	.word	0x10624dd3

08004dfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfe:	b08f      	sub	sp, #60	; 0x3c
 8004e00:	af0a      	add	r7, sp, #40	; 0x28
 8004e02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e10f      	b.n	800502e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f00b f8ef 	bl	801000c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2203      	movs	r2, #3
 8004e32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f004 fe5a 	bl	8009b06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	687e      	ldr	r6, [r7, #4]
 8004e5a:	466d      	mov	r5, sp
 8004e5c:	f106 0410 	add.w	r4, r6, #16
 8004e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e70:	1d33      	adds	r3, r6, #4
 8004e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e74:	6838      	ldr	r0, [r7, #0]
 8004e76:	f004 fd31 	bl	80098dc <USB_CoreInit>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0d0      	b.n	800502e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2100      	movs	r1, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	f004 fe48 	bl	8009b28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	73fb      	strb	r3, [r7, #15]
 8004e9c:	e04a      	b.n	8004f34 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	333d      	adds	r3, #61	; 0x3d
 8004eae:	2201      	movs	r2, #1
 8004eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004eb2:	7bfa      	ldrb	r2, [r7, #15]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	333c      	adds	r3, #60	; 0x3c
 8004ec2:	7bfa      	ldrb	r2, [r7, #15]
 8004ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	b298      	uxth	r0, r3
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3344      	adds	r3, #68	; 0x44
 8004eda:	4602      	mov	r2, r0
 8004edc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ede:	7bfa      	ldrb	r2, [r7, #15]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	3340      	adds	r3, #64	; 0x40
 8004eee:	2200      	movs	r2, #0
 8004ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	3348      	adds	r3, #72	; 0x48
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f06:	7bfa      	ldrb	r2, [r7, #15]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	334c      	adds	r3, #76	; 0x4c
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f1a:	7bfa      	ldrb	r2, [r7, #15]
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	3354      	adds	r3, #84	; 0x54
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	3301      	adds	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
 8004f34:	7bfa      	ldrb	r2, [r7, #15]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d3af      	bcc.n	8004e9e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
 8004f42:	e044      	b.n	8004fce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f44:	7bfa      	ldrb	r2, [r7, #15]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f5a:	7bfa      	ldrb	r2, [r7, #15]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004f6c:	7bfa      	ldrb	r2, [r7, #15]
 8004f6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f70:	7bfa      	ldrb	r2, [r7, #15]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f86:	7bfa      	ldrb	r2, [r7, #15]
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f9c:	7bfa      	ldrb	r2, [r7, #15]
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fb2:	7bfa      	ldrb	r2, [r7, #15]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
 8004fce:	7bfa      	ldrb	r2, [r7, #15]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d3b5      	bcc.n	8004f44 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	603b      	str	r3, [r7, #0]
 8004fde:	687e      	ldr	r6, [r7, #4]
 8004fe0:	466d      	mov	r5, sp
 8004fe2:	f106 0410 	add.w	r4, r6, #16
 8004fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ff6:	1d33      	adds	r3, r6, #4
 8004ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ffa:	6838      	ldr	r0, [r7, #0]
 8004ffc:	f004 fde0 	bl	8009bc0 <USB_DevInit>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2202      	movs	r2, #2
 800500a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e00d      	b.n	800502e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f005 ff2f 	bl	800ae8a <USB_DevDisconnect>

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005036 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_PCD_Start+0x1c>
 800504e:	2302      	movs	r3, #2
 8005050:	e020      	b.n	8005094 <HAL_PCD_Start+0x5e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	2b01      	cmp	r3, #1
 8005060:	d109      	bne.n	8005076 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005066:	2b01      	cmp	r3, #1
 8005068:	d005      	beq.n	8005076 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f004 fd32 	bl	8009ae4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f005 fedf 	bl	800ae48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800509c:	b590      	push	{r4, r7, lr}
 800509e:	b08d      	sub	sp, #52	; 0x34
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f005 ff9d 	bl	800aff2 <USB_GetMode>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f040 848a 	bne.w	80059d4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f005 ff01 	bl	800aecc <USB_ReadInterrupts>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 8480 	beq.w	80059d2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	0a1b      	lsrs	r3, r3, #8
 80050dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f005 feee 	bl	800aecc <USB_ReadInterrupts>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d107      	bne.n	800510a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695a      	ldr	r2, [r3, #20]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f002 0202 	and.w	r2, r2, #2
 8005108:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f005 fedc 	bl	800aecc <USB_ReadInterrupts>
 8005114:	4603      	mov	r3, r0
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b10      	cmp	r3, #16
 800511c:	d161      	bne.n	80051e2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0210 	bic.w	r2, r2, #16
 800512c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	f003 020f 	and.w	r2, r3, #15
 800513a:	4613      	mov	r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4413      	add	r3, r2
 800514a:	3304      	adds	r3, #4
 800514c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	0c5b      	lsrs	r3, r3, #17
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	2b02      	cmp	r3, #2
 8005158:	d124      	bne.n	80051a4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005160:	4013      	ands	r3, r2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d035      	beq.n	80051d2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005174:	b29b      	uxth	r3, r3
 8005176:	461a      	mov	r2, r3
 8005178:	6a38      	ldr	r0, [r7, #32]
 800517a:	f005 fd13 	bl	800aba4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800518a:	441a      	add	r2, r3
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	6a1a      	ldr	r2, [r3, #32]
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800519c:	441a      	add	r2, r3
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	621a      	str	r2, [r3, #32]
 80051a2:	e016      	b.n	80051d2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	0c5b      	lsrs	r3, r3, #17
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	2b06      	cmp	r3, #6
 80051ae:	d110      	bne.n	80051d2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051b6:	2208      	movs	r2, #8
 80051b8:	4619      	mov	r1, r3
 80051ba:	6a38      	ldr	r0, [r7, #32]
 80051bc:	f005 fcf2 	bl	800aba4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	6a1a      	ldr	r2, [r3, #32]
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	091b      	lsrs	r3, r3, #4
 80051c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051cc:	441a      	add	r2, r3
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699a      	ldr	r2, [r3, #24]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0210 	orr.w	r2, r2, #16
 80051e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f005 fe70 	bl	800aecc <USB_ReadInterrupts>
 80051ec:	4603      	mov	r3, r0
 80051ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051f6:	f040 80a7 	bne.w	8005348 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f005 fe75 	bl	800aef2 <USB_ReadDevAllOutEpInterrupt>
 8005208:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800520a:	e099      	b.n	8005340 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 808e 	beq.w	8005334 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	4611      	mov	r1, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f005 fe99 	bl	800af5a <USB_ReadDevOutEPInterrupt>
 8005228:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00c      	beq.n	800524e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005240:	461a      	mov	r2, r3
 8005242:	2301      	movs	r3, #1
 8005244:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fec3 	bl	8005fd4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00c      	beq.n	8005272 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005264:	461a      	mov	r2, r3
 8005266:	2308      	movs	r3, #8
 8005268:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800526a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 ff99 	bl	80061a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	461a      	mov	r2, r3
 800528a:	2310      	movs	r3, #16
 800528c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d030      	beq.n	80052fa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a0:	2b80      	cmp	r3, #128	; 0x80
 80052a2:	d109      	bne.n	80052b8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052b6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80052b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ba:	4613      	mov	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4413      	add	r3, r2
 80052ca:	3304      	adds	r3, #4
 80052cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	78db      	ldrb	r3, [r3, #3]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d108      	bne.n	80052e8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2200      	movs	r2, #0
 80052da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f00a ff98 	bl	8010218 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	461a      	mov	r2, r3
 80052f6:	2302      	movs	r3, #2
 80052f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005310:	461a      	mov	r2, r3
 8005312:	2320      	movs	r3, #32
 8005314:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d009      	beq.n	8005334 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532c:	461a      	mov	r2, r3
 800532e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005332:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	3301      	adds	r3, #1
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	085b      	lsrs	r3, r3, #1
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	2b00      	cmp	r3, #0
 8005344:	f47f af62 	bne.w	800520c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f005 fdbd 	bl	800aecc <USB_ReadInterrupts>
 8005352:	4603      	mov	r3, r0
 8005354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005358:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800535c:	f040 80db 	bne.w	8005516 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f005 fdde 	bl	800af26 <USB_ReadDevAllInEpInterrupt>
 800536a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005370:	e0cd      	b.n	800550e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80c2 	beq.w	8005502 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	4611      	mov	r1, r2
 8005388:	4618      	mov	r0, r3
 800538a:	f005 fe04 	bl	800af96 <USB_ReadDevInEPInterrupt>
 800538e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d057      	beq.n	800544a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	f003 030f 	and.w	r3, r3, #15
 80053a0:	2201      	movs	r2, #1
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	43db      	mvns	r3, r3
 80053b4:	69f9      	ldr	r1, [r7, #28]
 80053b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ba:	4013      	ands	r3, r2
 80053bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ca:	461a      	mov	r2, r3
 80053cc:	2301      	movs	r3, #1
 80053ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d132      	bne.n	800543e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053dc:	4613      	mov	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	334c      	adds	r3, #76	; 0x4c
 80053e8:	6819      	ldr	r1, [r3, #0]
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ee:	4613      	mov	r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4403      	add	r3, r0
 80053f8:	3348      	adds	r3, #72	; 0x48
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4419      	add	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4403      	add	r3, r0
 800540c:	334c      	adds	r3, #76	; 0x4c
 800540e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	2b00      	cmp	r3, #0
 8005414:	d113      	bne.n	800543e <HAL_PCD_IRQHandler+0x3a2>
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	3354      	adds	r3, #84	; 0x54
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d108      	bne.n	800543e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005436:	461a      	mov	r2, r3
 8005438:	2101      	movs	r1, #1
 800543a:	f005 fe0b 	bl	800b054 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	b2db      	uxtb	r3, r3
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f00a fe62 	bl	801010e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005460:	461a      	mov	r2, r3
 8005462:	2308      	movs	r3, #8
 8005464:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	d008      	beq.n	8005482 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547c:	461a      	mov	r2, r3
 800547e:	2310      	movs	r3, #16
 8005480:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005498:	461a      	mov	r2, r3
 800549a:	2340      	movs	r3, #64	; 0x40
 800549c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d023      	beq.n	80054f0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80054a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054aa:	6a38      	ldr	r0, [r7, #32]
 80054ac:	f004 fcec 	bl	8009e88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80054b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b2:	4613      	mov	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	3338      	adds	r3, #56	; 0x38
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	4413      	add	r3, r2
 80054c0:	3304      	adds	r3, #4
 80054c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	78db      	ldrb	r3, [r3, #3]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d108      	bne.n	80054de <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2200      	movs	r2, #0
 80054d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	4619      	mov	r1, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f00a feaf 	bl	801023c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	461a      	mov	r2, r3
 80054ec:	2302      	movs	r3, #2
 80054ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80054fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fcdb 	bl	8005eb8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	3301      	adds	r3, #1
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	2b00      	cmp	r3, #0
 8005512:	f47f af2e 	bne.w	8005372 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f005 fcd6 	bl	800aecc <USB_ReadInterrupts>
 8005520:	4603      	mov	r3, r0
 8005522:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005526:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800552a:	d122      	bne.n	8005572 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800553a:	f023 0301 	bic.w	r3, r3, #1
 800553e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005546:	2b01      	cmp	r3, #1
 8005548:	d108      	bne.n	800555c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005552:	2100      	movs	r1, #0
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fec3 	bl	80062e0 <HAL_PCDEx_LPM_Callback>
 800555a:	e002      	b.n	8005562 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f00a fe4d 	bl	80101fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f005 fca8 	bl	800aecc <USB_ReadInterrupts>
 800557c:	4603      	mov	r3, r0
 800557e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005586:	d112      	bne.n	80055ae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b01      	cmp	r3, #1
 8005596:	d102      	bne.n	800559e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f00a fe09 	bl	80101b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80055ac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f005 fc8a 	bl	800aecc <USB_ReadInterrupts>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c2:	f040 80b7 	bne.w	8005734 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2110      	movs	r1, #16
 80055e0:	4618      	mov	r0, r3
 80055e2:	f004 fc51 	bl	8009e88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ea:	e046      	b.n	800567a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	461a      	mov	r2, r3
 80055fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	440a      	add	r2, r1
 8005616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800561e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562c:	461a      	mov	r2, r3
 800562e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005632:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800564e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005652:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005672:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	3301      	adds	r3, #1
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005680:	429a      	cmp	r2, r3
 8005682:	d3b3      	bcc.n	80055ec <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005692:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005696:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	2b00      	cmp	r3, #0
 800569e:	d016      	beq.n	80056ce <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056b0:	f043 030b 	orr.w	r3, r3, #11
 80056b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c0:	69fa      	ldr	r2, [r7, #28]
 80056c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056c6:	f043 030b 	orr.w	r3, r3, #11
 80056ca:	6453      	str	r3, [r2, #68]	; 0x44
 80056cc:	e015      	b.n	80056fa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80056e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056f4:	f043 030b 	orr.w	r3, r3, #11
 80056f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005708:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800570c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800571e:	461a      	mov	r2, r3
 8005720:	f005 fc98 	bl	800b054 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695a      	ldr	r2, [r3, #20]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005732:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f005 fbc7 	bl	800aecc <USB_ReadInterrupts>
 800573e:	4603      	mov	r3, r0
 8005740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005748:	d124      	bne.n	8005794 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f005 fc5d 	bl	800b00e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f004 fc12 	bl	8009f82 <USB_GetDevSpeed>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681c      	ldr	r4, [r3, #0]
 800576a:	f001 fa29 	bl	8006bc0 <HAL_RCC_GetHCLKFreq>
 800576e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005774:	b2db      	uxtb	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	4620      	mov	r0, r4
 800577a:	f004 f911 	bl	80099a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f00a fced 	bl	801015e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695a      	ldr	r2, [r3, #20]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005792:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f005 fb97 	bl	800aecc <USB_ReadInterrupts>
 800579e:	4603      	mov	r3, r0
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d10a      	bne.n	80057be <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f00a fcca 	bl	8010142 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695a      	ldr	r2, [r3, #20]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f002 0208 	and.w	r2, r2, #8
 80057bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f005 fb82 	bl	800aecc <USB_ReadInterrupts>
 80057c8:	4603      	mov	r3, r0
 80057ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ce:	2b80      	cmp	r3, #128	; 0x80
 80057d0:	d122      	bne.n	8005818 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057de:	2301      	movs	r3, #1
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
 80057e2:	e014      	b.n	800580e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d105      	bne.n	8005808 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fb27 	bl	8005e56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	3301      	adds	r3, #1
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005814:	429a      	cmp	r2, r3
 8005816:	d3e5      	bcc.n	80057e4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f005 fb55 	bl	800aecc <USB_ReadInterrupts>
 8005822:	4603      	mov	r3, r0
 8005824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800582c:	d13b      	bne.n	80058a6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800582e:	2301      	movs	r3, #1
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
 8005832:	e02b      	b.n	800588c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005848:	4613      	mov	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	3340      	adds	r3, #64	; 0x40
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d115      	bne.n	8005886 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800585a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800585c:	2b00      	cmp	r3, #0
 800585e:	da12      	bge.n	8005886 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005864:	4613      	mov	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	333f      	adds	r3, #63	; 0x3f
 8005870:	2201      	movs	r2, #1
 8005872:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800587c:	b2db      	uxtb	r3, r3
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fae8 	bl	8005e56 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	3301      	adds	r3, #1
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005892:	429a      	cmp	r2, r3
 8005894:	d3ce      	bcc.n	8005834 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695a      	ldr	r2, [r3, #20]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80058a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f005 fb0e 	bl	800aecc <USB_ReadInterrupts>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058ba:	d155      	bne.n	8005968 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058bc:	2301      	movs	r3, #1
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
 80058c0:	e045      	b.n	800594e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d6:	4613      	mov	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	440b      	add	r3, r1
 80058e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d12e      	bne.n	8005948 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	da2b      	bge.n	8005948 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80058fc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005900:	429a      	cmp	r2, r3
 8005902:	d121      	bne.n	8005948 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005908:	4613      	mov	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005916:	2201      	movs	r2, #1
 8005918:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005944:	6053      	str	r3, [r2, #4]
            break;
 8005946:	e007      	b.n	8005958 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	3301      	adds	r3, #1
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	429a      	cmp	r2, r3
 8005956:	d3b4      	bcc.n	80058c2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695a      	ldr	r2, [r3, #20]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005966:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f005 faad 	bl	800aecc <USB_ReadInterrupts>
 8005972:	4603      	mov	r3, r0
 8005974:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597c:	d10a      	bne.n	8005994 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f00a fc6e 	bl	8010260 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695a      	ldr	r2, [r3, #20]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	f005 fa97 	bl	800aecc <USB_ReadInterrupts>
 800599e:	4603      	mov	r3, r0
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d115      	bne.n	80059d4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f00a fc5e 	bl	801027c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6859      	ldr	r1, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]
 80059d0:	e000      	b.n	80059d4 <HAL_PCD_IRQHandler+0x938>
      return;
 80059d2:	bf00      	nop
    }
  }
}
 80059d4:	3734      	adds	r7, #52	; 0x34
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd90      	pop	{r4, r7, pc}

080059da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_PCD_SetAddress+0x1a>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e013      	b.n	8005a1c <HAL_PCD_SetAddress+0x42>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	78fa      	ldrb	r2, [r7, #3]
 8005a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	78fa      	ldrb	r2, [r7, #3]
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f005 f9f5 	bl	800adfc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	4608      	mov	r0, r1
 8005a2e:	4611      	mov	r1, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	4603      	mov	r3, r0
 8005a34:	70fb      	strb	r3, [r7, #3]
 8005a36:	460b      	mov	r3, r1
 8005a38:	803b      	strh	r3, [r7, #0]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	da0f      	bge.n	8005a6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	f003 020f 	and.w	r2, r3, #15
 8005a50:	4613      	mov	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	3338      	adds	r3, #56	; 0x38
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	3304      	adds	r3, #4
 8005a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	705a      	strb	r2, [r3, #1]
 8005a68:	e00f      	b.n	8005a8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	f003 020f 	and.w	r2, r3, #15
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	4413      	add	r3, r2
 8005a80:	3304      	adds	r3, #4
 8005a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a96:	883a      	ldrh	r2, [r7, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	78ba      	ldrb	r2, [r7, #2]
 8005aa0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005ab4:	78bb      	ldrb	r3, [r7, #2]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d102      	bne.n	8005ac0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_PCD_EP_Open+0xaa>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e00e      	b.n	8005aec <HAL_PCD_EP_Open+0xc8>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68f9      	ldr	r1, [r7, #12]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f004 fa75 	bl	8009fcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005aea:	7afb      	ldrb	r3, [r7, #11]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	da0f      	bge.n	8005b28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	f003 020f 	and.w	r2, r3, #15
 8005b0e:	4613      	mov	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	3338      	adds	r3, #56	; 0x38
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	705a      	strb	r2, [r3, #1]
 8005b26:	e00f      	b.n	8005b48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	f003 020f 	and.w	r2, r3, #15
 8005b2e:	4613      	mov	r3, r2
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	3304      	adds	r3, #4
 8005b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_PCD_EP_Close+0x6e>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e00e      	b.n	8005b80 <HAL_PCD_EP_Close+0x8c>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68f9      	ldr	r1, [r7, #12]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f004 fab3 	bl	800a0dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	607a      	str	r2, [r7, #4]
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	460b      	mov	r3, r1
 8005b96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b98:	7afb      	ldrb	r3, [r7, #11]
 8005b9a:	f003 020f 	and.w	r2, r3, #15
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	3304      	adds	r3, #4
 8005bb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bca:	7afb      	ldrb	r3, [r7, #11]
 8005bcc:	f003 030f 	and.w	r3, r3, #15
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d102      	bne.n	8005be4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005be4:	7afb      	ldrb	r3, [r7, #11]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6979      	ldr	r1, [r7, #20]
 8005bfc:	f004 fd92 	bl	800a724 <USB_EP0StartXfer>
 8005c00:	e008      	b.n	8005c14 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6979      	ldr	r1, [r7, #20]
 8005c10:	f004 fb40 	bl	800a294 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	460b      	mov	r3, r1
 8005c28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	f003 020f 	and.w	r2, r3, #15
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005c40:	681b      	ldr	r3, [r3, #0]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b086      	sub	sp, #24
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c5e:	7afb      	ldrb	r3, [r7, #11]
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	4613      	mov	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	3338      	adds	r3, #56	; 0x38
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4413      	add	r3, r2
 8005c72:	3304      	adds	r3, #4
 8005c74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2200      	movs	r2, #0
 8005c86:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c8e:	7afb      	ldrb	r3, [r7, #11]
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d102      	bne.n	8005ca8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ca8:	7afb      	ldrb	r3, [r7, #11]
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6979      	ldr	r1, [r7, #20]
 8005cc0:	f004 fd30 	bl	800a724 <USB_EP0StartXfer>
 8005cc4:	e008      	b.n	8005cd8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6979      	ldr	r1, [r7, #20]
 8005cd4:	f004 fade 	bl	800a294 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	460b      	mov	r3, r1
 8005cec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005cee:	78fb      	ldrb	r3, [r7, #3]
 8005cf0:	f003 020f 	and.w	r2, r3, #15
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d901      	bls.n	8005d00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e050      	b.n	8005da2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	da0f      	bge.n	8005d28 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	f003 020f 	and.w	r2, r3, #15
 8005d0e:	4613      	mov	r3, r2
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	3338      	adds	r3, #56	; 0x38
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	705a      	strb	r2, [r3, #1]
 8005d26:	e00d      	b.n	8005d44 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d28:	78fa      	ldrb	r2, [r7, #3]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	4413      	add	r3, r2
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2201      	movs	r2, #1
 8005d48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_PCD_EP_SetStall+0x82>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e01e      	b.n	8005da2 <HAL_PCD_EP_SetStall+0xc0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68f9      	ldr	r1, [r7, #12]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f004 ff6e 	bl	800ac54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10a      	bne.n	8005d98 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	b2d9      	uxtb	r1, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d92:	461a      	mov	r2, r3
 8005d94:	f005 f95e 	bl	800b054 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	460b      	mov	r3, r1
 8005db4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	f003 020f 	and.w	r2, r3, #15
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d901      	bls.n	8005dc8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e042      	b.n	8005e4e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	da0f      	bge.n	8005df0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	f003 020f 	and.w	r2, r3, #15
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	3338      	adds	r3, #56	; 0x38
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	3304      	adds	r3, #4
 8005de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2201      	movs	r2, #1
 8005dec:	705a      	strb	r2, [r3, #1]
 8005dee:	e00f      	b.n	8005e10 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	f003 020f 	and.w	r2, r3, #15
 8005df6:	4613      	mov	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	3304      	adds	r3, #4
 8005e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_PCD_EP_ClrStall+0x86>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e00e      	b.n	8005e4e <HAL_PCD_EP_ClrStall+0xa4>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68f9      	ldr	r1, [r7, #12]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f004 ff76 	bl	800ad30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	da0c      	bge.n	8005e84 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	f003 020f 	and.w	r2, r3, #15
 8005e70:	4613      	mov	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	3338      	adds	r3, #56	; 0x38
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3304      	adds	r3, #4
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	e00c      	b.n	8005e9e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	f003 020f 	and.w	r2, r3, #15
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68f9      	ldr	r1, [r7, #12]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f004 fd95 	bl	800a9d4 <USB_EPStopXfer>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005eae:	7afb      	ldrb	r3, [r7, #11]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	; 0x28
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	3338      	adds	r3, #56	; 0x38
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	4413      	add	r3, r2
 8005edc:	3304      	adds	r3, #4
 8005ede:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1a      	ldr	r2, [r3, #32]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d901      	bls.n	8005ef0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e06c      	b.n	8005fca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d902      	bls.n	8005f0c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	3303      	adds	r3, #3
 8005f10:	089b      	lsrs	r3, r3, #2
 8005f12:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f14:	e02b      	b.n	8005f6e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	699a      	ldr	r2, [r3, #24]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d902      	bls.n	8005f32 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	3303      	adds	r3, #3
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6919      	ldr	r1, [r3, #16]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	4603      	mov	r3, r0
 8005f50:	6978      	ldr	r0, [r7, #20]
 8005f52:	f004 fde9 	bl	800ab28 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	441a      	add	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a1a      	ldr	r2, [r3, #32]
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	441a      	add	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d809      	bhi.n	8005f98 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a1a      	ldr	r2, [r3, #32]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d203      	bcs.n	8005f98 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1be      	bne.n	8005f16 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	699a      	ldr	r2, [r3, #24]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d811      	bhi.n	8005fc8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	2201      	movs	r2, #1
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	6939      	ldr	r1, [r7, #16]
 8005fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3720      	adds	r7, #32
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	333c      	adds	r3, #60	; 0x3c
 8005fec:	3304      	adds	r3, #4
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d17b      	bne.n	8006102 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d015      	beq.n	8006040 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	4a61      	ldr	r2, [pc, #388]	; (800619c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	f240 80b9 	bls.w	8006190 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80b3 	beq.w	8006190 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006036:	461a      	mov	r2, r3
 8006038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800603c:	6093      	str	r3, [r2, #8]
 800603e:	e0a7      	b.n	8006190 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006056:	461a      	mov	r2, r3
 8006058:	2320      	movs	r3, #32
 800605a:	6093      	str	r3, [r2, #8]
 800605c:	e098      	b.n	8006190 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006064:	2b00      	cmp	r3, #0
 8006066:	f040 8093 	bne.w	8006190 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	4a4b      	ldr	r2, [pc, #300]	; (800619c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d90f      	bls.n	8006092 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	461a      	mov	r2, r3
 800608a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800608e:	6093      	str	r3, [r2, #8]
 8006090:	e07e      	b.n	8006190 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	4613      	mov	r3, r2
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	4413      	add	r3, r2
 80060a4:	3304      	adds	r3, #4
 80060a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	69da      	ldr	r2, [r3, #28]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	0159      	lsls	r1, r3, #5
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	440b      	add	r3, r1
 80060b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d114      	bne.n	80060f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060dc:	461a      	mov	r2, r3
 80060de:	2101      	movs	r1, #1
 80060e0:	f004 ffb8 	bl	800b054 <USB_EP0_OutStart>
 80060e4:	e006      	b.n	80060f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	691a      	ldr	r2, [r3, #16]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	441a      	add	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f009 ffec 	bl	80100d8 <HAL_PCD_DataOutStageCallback>
 8006100:	e046      	b.n	8006190 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	4a26      	ldr	r2, [pc, #152]	; (80061a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d124      	bne.n	8006154 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006120:	461a      	mov	r2, r3
 8006122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006126:	6093      	str	r3, [r2, #8]
 8006128:	e032      	b.n	8006190 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d008      	beq.n	8006146 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006140:	461a      	mov	r2, r3
 8006142:	2320      	movs	r3, #32
 8006144:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f009 ffc3 	bl	80100d8 <HAL_PCD_DataOutStageCallback>
 8006152:	e01d      	b.n	8006190 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d114      	bne.n	8006184 <PCD_EP_OutXfrComplete_int+0x1b0>
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	4613      	mov	r3, r2
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	440b      	add	r3, r1
 8006168:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d108      	bne.n	8006184 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6818      	ldr	r0, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800617c:	461a      	mov	r2, r3
 800617e:	2100      	movs	r1, #0
 8006180:	f004 ff68 	bl	800b054 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f009 ffa4 	bl	80100d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	4f54300a 	.word	0x4f54300a
 80061a0:	4f54310a 	.word	0x4f54310a

080061a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	333c      	adds	r3, #60	; 0x3c
 80061bc:	3304      	adds	r3, #4
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4a15      	ldr	r2, [pc, #84]	; (800622c <PCD_EP_OutSetupPacket_int+0x88>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d90e      	bls.n	80061f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d009      	beq.n	80061f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f0:	461a      	mov	r2, r3
 80061f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f009 ff5b 	bl	80100b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4a0a      	ldr	r2, [pc, #40]	; (800622c <PCD_EP_OutSetupPacket_int+0x88>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d90c      	bls.n	8006220 <PCD_EP_OutSetupPacket_int+0x7c>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d108      	bne.n	8006220 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006218:	461a      	mov	r2, r3
 800621a:	2101      	movs	r1, #1
 800621c:	f004 ff1a 	bl	800b054 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	4f54300a 	.word	0x4f54300a

08006230 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]
 800623c:	4613      	mov	r3, r2
 800623e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d107      	bne.n	800625e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800624e:	883b      	ldrh	r3, [r7, #0]
 8006250:	0419      	lsls	r1, r3, #16
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	430a      	orrs	r2, r1
 800625a:	629a      	str	r2, [r3, #40]	; 0x28
 800625c:	e028      	b.n	80062b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006264:	0c1b      	lsrs	r3, r3, #16
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	4413      	add	r3, r2
 800626a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800626c:	2300      	movs	r3, #0
 800626e:	73fb      	strb	r3, [r7, #15]
 8006270:	e00d      	b.n	800628e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	3340      	adds	r3, #64	; 0x40
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	0c1b      	lsrs	r3, r3, #16
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	4413      	add	r3, r2
 8006286:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	3301      	adds	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
 800628e:	7bfa      	ldrb	r2, [r7, #15]
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	3b01      	subs	r3, #1
 8006294:	429a      	cmp	r2, r3
 8006296:	d3ec      	bcc.n	8006272 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006298:	883b      	ldrh	r3, [r7, #0]
 800629a:	0418      	lsls	r0, r3, #16
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6819      	ldr	r1, [r3, #0]
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	4302      	orrs	r2, r0
 80062a8:	3340      	adds	r3, #64	; 0x40
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	440b      	add	r3, r1
 80062ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	887a      	ldrh	r2, [r7, #2]
 80062d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e267      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d075      	beq.n	8006402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006316:	4b88      	ldr	r3, [pc, #544]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b04      	cmp	r3, #4
 8006320:	d00c      	beq.n	800633c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006322:	4b85      	ldr	r3, [pc, #532]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800632a:	2b08      	cmp	r3, #8
 800632c:	d112      	bne.n	8006354 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800632e:	4b82      	ldr	r3, [pc, #520]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800633a:	d10b      	bne.n	8006354 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800633c:	4b7e      	ldr	r3, [pc, #504]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d05b      	beq.n	8006400 <HAL_RCC_OscConfig+0x108>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d157      	bne.n	8006400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e242      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800635c:	d106      	bne.n	800636c <HAL_RCC_OscConfig+0x74>
 800635e:	4b76      	ldr	r3, [pc, #472]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a75      	ldr	r2, [pc, #468]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	e01d      	b.n	80063a8 <HAL_RCC_OscConfig+0xb0>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006374:	d10c      	bne.n	8006390 <HAL_RCC_OscConfig+0x98>
 8006376:	4b70      	ldr	r3, [pc, #448]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a6f      	ldr	r2, [pc, #444]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 800637c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	4b6d      	ldr	r3, [pc, #436]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a6c      	ldr	r2, [pc, #432]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e00b      	b.n	80063a8 <HAL_RCC_OscConfig+0xb0>
 8006390:	4b69      	ldr	r3, [pc, #420]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a68      	ldr	r2, [pc, #416]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	4b66      	ldr	r3, [pc, #408]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a65      	ldr	r2, [pc, #404]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 80063a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d013      	beq.n	80063d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b0:	f7fd f800 	bl	80033b4 <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063b8:	f7fc fffc 	bl	80033b4 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b64      	cmp	r3, #100	; 0x64
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e207      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ca:	4b5b      	ldr	r3, [pc, #364]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0f0      	beq.n	80063b8 <HAL_RCC_OscConfig+0xc0>
 80063d6:	e014      	b.n	8006402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d8:	f7fc ffec 	bl	80033b4 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063e0:	f7fc ffe8 	bl	80033b4 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b64      	cmp	r3, #100	; 0x64
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e1f3      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063f2:	4b51      	ldr	r3, [pc, #324]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f0      	bne.n	80063e0 <HAL_RCC_OscConfig+0xe8>
 80063fe:	e000      	b.n	8006402 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d063      	beq.n	80064d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800640e:	4b4a      	ldr	r3, [pc, #296]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 030c 	and.w	r3, r3, #12
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00b      	beq.n	8006432 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800641a:	4b47      	ldr	r3, [pc, #284]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006422:	2b08      	cmp	r3, #8
 8006424:	d11c      	bne.n	8006460 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006426:	4b44      	ldr	r3, [pc, #272]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d116      	bne.n	8006460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006432:	4b41      	ldr	r3, [pc, #260]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <HAL_RCC_OscConfig+0x152>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d001      	beq.n	800644a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e1c7      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644a:	4b3b      	ldr	r3, [pc, #236]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	4937      	ldr	r1, [pc, #220]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 800645a:	4313      	orrs	r3, r2
 800645c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800645e:	e03a      	b.n	80064d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d020      	beq.n	80064aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006468:	4b34      	ldr	r3, [pc, #208]	; (800653c <HAL_RCC_OscConfig+0x244>)
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646e:	f7fc ffa1 	bl	80033b4 <HAL_GetTick>
 8006472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006474:	e008      	b.n	8006488 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006476:	f7fc ff9d 	bl	80033b4 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b02      	cmp	r3, #2
 8006482:	d901      	bls.n	8006488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e1a8      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006488:	4b2b      	ldr	r3, [pc, #172]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0f0      	beq.n	8006476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006494:	4b28      	ldr	r3, [pc, #160]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	4925      	ldr	r1, [pc, #148]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	600b      	str	r3, [r1, #0]
 80064a8:	e015      	b.n	80064d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064aa:	4b24      	ldr	r3, [pc, #144]	; (800653c <HAL_RCC_OscConfig+0x244>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b0:	f7fc ff80 	bl	80033b4 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064b8:	f7fc ff7c 	bl	80033b4 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e187      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ca:	4b1b      	ldr	r3, [pc, #108]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1f0      	bne.n	80064b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d036      	beq.n	8006550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d016      	beq.n	8006518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ea:	4b15      	ldr	r3, [pc, #84]	; (8006540 <HAL_RCC_OscConfig+0x248>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f0:	f7fc ff60 	bl	80033b4 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064f8:	f7fc ff5c 	bl	80033b4 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e167      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800650a:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <HAL_RCC_OscConfig+0x240>)
 800650c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCC_OscConfig+0x200>
 8006516:	e01b      	b.n	8006550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006518:	4b09      	ldr	r3, [pc, #36]	; (8006540 <HAL_RCC_OscConfig+0x248>)
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800651e:	f7fc ff49 	bl	80033b4 <HAL_GetTick>
 8006522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006524:	e00e      	b.n	8006544 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006526:	f7fc ff45 	bl	80033b4 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d907      	bls.n	8006544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e150      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
 8006538:	40023800 	.word	0x40023800
 800653c:	42470000 	.word	0x42470000
 8006540:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006544:	4b88      	ldr	r3, [pc, #544]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1ea      	bne.n	8006526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 8097 	beq.w	800668c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800655e:	2300      	movs	r3, #0
 8006560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006562:	4b81      	ldr	r3, [pc, #516]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10f      	bne.n	800658e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800656e:	2300      	movs	r3, #0
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	4b7d      	ldr	r3, [pc, #500]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	4a7c      	ldr	r2, [pc, #496]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800657c:	6413      	str	r3, [r2, #64]	; 0x40
 800657e:	4b7a      	ldr	r3, [pc, #488]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006586:	60bb      	str	r3, [r7, #8]
 8006588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800658a:	2301      	movs	r3, #1
 800658c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658e:	4b77      	ldr	r3, [pc, #476]	; (800676c <HAL_RCC_OscConfig+0x474>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	2b00      	cmp	r3, #0
 8006598:	d118      	bne.n	80065cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800659a:	4b74      	ldr	r3, [pc, #464]	; (800676c <HAL_RCC_OscConfig+0x474>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a73      	ldr	r2, [pc, #460]	; (800676c <HAL_RCC_OscConfig+0x474>)
 80065a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065a6:	f7fc ff05 	bl	80033b4 <HAL_GetTick>
 80065aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ac:	e008      	b.n	80065c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ae:	f7fc ff01 	bl	80033b4 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e10c      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c0:	4b6a      	ldr	r3, [pc, #424]	; (800676c <HAL_RCC_OscConfig+0x474>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0f0      	beq.n	80065ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d106      	bne.n	80065e2 <HAL_RCC_OscConfig+0x2ea>
 80065d4:	4b64      	ldr	r3, [pc, #400]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 80065d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d8:	4a63      	ldr	r2, [pc, #396]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 80065da:	f043 0301 	orr.w	r3, r3, #1
 80065de:	6713      	str	r3, [r2, #112]	; 0x70
 80065e0:	e01c      	b.n	800661c <HAL_RCC_OscConfig+0x324>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b05      	cmp	r3, #5
 80065e8:	d10c      	bne.n	8006604 <HAL_RCC_OscConfig+0x30c>
 80065ea:	4b5f      	ldr	r3, [pc, #380]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 80065ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ee:	4a5e      	ldr	r2, [pc, #376]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 80065f0:	f043 0304 	orr.w	r3, r3, #4
 80065f4:	6713      	str	r3, [r2, #112]	; 0x70
 80065f6:	4b5c      	ldr	r3, [pc, #368]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	4a5b      	ldr	r2, [pc, #364]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	6713      	str	r3, [r2, #112]	; 0x70
 8006602:	e00b      	b.n	800661c <HAL_RCC_OscConfig+0x324>
 8006604:	4b58      	ldr	r3, [pc, #352]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006608:	4a57      	ldr	r2, [pc, #348]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 800660a:	f023 0301 	bic.w	r3, r3, #1
 800660e:	6713      	str	r3, [r2, #112]	; 0x70
 8006610:	4b55      	ldr	r3, [pc, #340]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006614:	4a54      	ldr	r2, [pc, #336]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006616:	f023 0304 	bic.w	r3, r3, #4
 800661a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d015      	beq.n	8006650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006624:	f7fc fec6 	bl	80033b4 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800662a:	e00a      	b.n	8006642 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800662c:	f7fc fec2 	bl	80033b4 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	f241 3288 	movw	r2, #5000	; 0x1388
 800663a:	4293      	cmp	r3, r2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e0cb      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006642:	4b49      	ldr	r3, [pc, #292]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0ee      	beq.n	800662c <HAL_RCC_OscConfig+0x334>
 800664e:	e014      	b.n	800667a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006650:	f7fc feb0 	bl	80033b4 <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006656:	e00a      	b.n	800666e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006658:	f7fc feac 	bl	80033b4 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	f241 3288 	movw	r2, #5000	; 0x1388
 8006666:	4293      	cmp	r3, r2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e0b5      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800666e:	4b3e      	ldr	r3, [pc, #248]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1ee      	bne.n	8006658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d105      	bne.n	800668c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006680:	4b39      	ldr	r3, [pc, #228]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	4a38      	ldr	r2, [pc, #224]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800668a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80a1 	beq.w	80067d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006696:	4b34      	ldr	r3, [pc, #208]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 030c 	and.w	r3, r3, #12
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d05c      	beq.n	800675c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d141      	bne.n	800672e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066aa:	4b31      	ldr	r3, [pc, #196]	; (8006770 <HAL_RCC_OscConfig+0x478>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b0:	f7fc fe80 	bl	80033b4 <HAL_GetTick>
 80066b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b6:	e008      	b.n	80066ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066b8:	f7fc fe7c 	bl	80033b4 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d901      	bls.n	80066ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e087      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ca:	4b27      	ldr	r3, [pc, #156]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1f0      	bne.n	80066b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69da      	ldr	r2, [r3, #28]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	019b      	lsls	r3, r3, #6
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	085b      	lsrs	r3, r3, #1
 80066ee:	3b01      	subs	r3, #1
 80066f0:	041b      	lsls	r3, r3, #16
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	061b      	lsls	r3, r3, #24
 80066fa:	491b      	ldr	r1, [pc, #108]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006700:	4b1b      	ldr	r3, [pc, #108]	; (8006770 <HAL_RCC_OscConfig+0x478>)
 8006702:	2201      	movs	r2, #1
 8006704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006706:	f7fc fe55 	bl	80033b4 <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800670e:	f7fc fe51 	bl	80033b4 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e05c      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006720:	4b11      	ldr	r3, [pc, #68]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f0      	beq.n	800670e <HAL_RCC_OscConfig+0x416>
 800672c:	e054      	b.n	80067d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800672e:	4b10      	ldr	r3, [pc, #64]	; (8006770 <HAL_RCC_OscConfig+0x478>)
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006734:	f7fc fe3e 	bl	80033b4 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800673c:	f7fc fe3a 	bl	80033b4 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e045      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800674e:	4b06      	ldr	r3, [pc, #24]	; (8006768 <HAL_RCC_OscConfig+0x470>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x444>
 800675a:	e03d      	b.n	80067d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d107      	bne.n	8006774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e038      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
 8006768:	40023800 	.word	0x40023800
 800676c:	40007000 	.word	0x40007000
 8006770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006774:	4b1b      	ldr	r3, [pc, #108]	; (80067e4 <HAL_RCC_OscConfig+0x4ec>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d028      	beq.n	80067d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800678c:	429a      	cmp	r2, r3
 800678e:	d121      	bne.n	80067d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800679a:	429a      	cmp	r2, r3
 800679c:	d11a      	bne.n	80067d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067a4:	4013      	ands	r3, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d111      	bne.n	80067d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	3b01      	subs	r3, #1
 80067be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d107      	bne.n	80067d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d001      	beq.n	80067d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40023800 	.word	0x40023800

080067e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e0cc      	b.n	8006996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067fc:	4b68      	ldr	r3, [pc, #416]	; (80069a0 <HAL_RCC_ClockConfig+0x1b8>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d90c      	bls.n	8006824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800680a:	4b65      	ldr	r3, [pc, #404]	; (80069a0 <HAL_RCC_ClockConfig+0x1b8>)
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006812:	4b63      	ldr	r3, [pc, #396]	; (80069a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d001      	beq.n	8006824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e0b8      	b.n	8006996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d020      	beq.n	8006872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800683c:	4b59      	ldr	r3, [pc, #356]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	4a58      	ldr	r2, [pc, #352]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0308 	and.w	r3, r3, #8
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006854:	4b53      	ldr	r3, [pc, #332]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	4a52      	ldr	r2, [pc, #328]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800685e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006860:	4b50      	ldr	r3, [pc, #320]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	494d      	ldr	r1, [pc, #308]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	4313      	orrs	r3, r2
 8006870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d044      	beq.n	8006908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d107      	bne.n	8006896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006886:	4b47      	ldr	r3, [pc, #284]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d119      	bne.n	80068c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e07f      	b.n	8006996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b02      	cmp	r3, #2
 800689c:	d003      	beq.n	80068a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d107      	bne.n	80068b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a6:	4b3f      	ldr	r3, [pc, #252]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e06f      	b.n	8006996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b6:	4b3b      	ldr	r3, [pc, #236]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e067      	b.n	8006996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068c6:	4b37      	ldr	r3, [pc, #220]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f023 0203 	bic.w	r2, r3, #3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	4934      	ldr	r1, [pc, #208]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068d8:	f7fc fd6c 	bl	80033b4 <HAL_GetTick>
 80068dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068de:	e00a      	b.n	80068f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068e0:	f7fc fd68 	bl	80033b4 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e04f      	b.n	8006996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f6:	4b2b      	ldr	r3, [pc, #172]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 020c 	and.w	r2, r3, #12
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	429a      	cmp	r2, r3
 8006906:	d1eb      	bne.n	80068e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006908:	4b25      	ldr	r3, [pc, #148]	; (80069a0 <HAL_RCC_ClockConfig+0x1b8>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	d20c      	bcs.n	8006930 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006916:	4b22      	ldr	r3, [pc, #136]	; (80069a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800691e:	4b20      	ldr	r3, [pc, #128]	; (80069a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0307 	and.w	r3, r3, #7
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d001      	beq.n	8006930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e032      	b.n	8006996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b00      	cmp	r3, #0
 800693a:	d008      	beq.n	800694e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800693c:	4b19      	ldr	r3, [pc, #100]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	4916      	ldr	r1, [pc, #88]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 800694a:	4313      	orrs	r3, r2
 800694c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d009      	beq.n	800696e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800695a:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	490e      	ldr	r1, [pc, #56]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 800696a:	4313      	orrs	r3, r2
 800696c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800696e:	f000 f821 	bl	80069b4 <HAL_RCC_GetSysClockFreq>
 8006972:	4602      	mov	r2, r0
 8006974:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	091b      	lsrs	r3, r3, #4
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	490a      	ldr	r1, [pc, #40]	; (80069a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006980:	5ccb      	ldrb	r3, [r1, r3]
 8006982:	fa22 f303 	lsr.w	r3, r2, r3
 8006986:	4a09      	ldr	r2, [pc, #36]	; (80069ac <HAL_RCC_ClockConfig+0x1c4>)
 8006988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800698a:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <HAL_RCC_ClockConfig+0x1c8>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f7fb fcd2 	bl	8002338 <HAL_InitTick>

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	40023c00 	.word	0x40023c00
 80069a4:	40023800 	.word	0x40023800
 80069a8:	0801c87c 	.word	0x0801c87c
 80069ac:	20000004 	.word	0x20000004
 80069b0:	20000008 	.word	0x20000008

080069b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b8:	b094      	sub	sp, #80	; 0x50
 80069ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	647b      	str	r3, [r7, #68]	; 0x44
 80069c0:	2300      	movs	r3, #0
 80069c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c4:	2300      	movs	r3, #0
 80069c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069cc:	4b79      	ldr	r3, [pc, #484]	; (8006bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f003 030c 	and.w	r3, r3, #12
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d00d      	beq.n	80069f4 <HAL_RCC_GetSysClockFreq+0x40>
 80069d8:	2b08      	cmp	r3, #8
 80069da:	f200 80e1 	bhi.w	8006ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <HAL_RCC_GetSysClockFreq+0x34>
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d003      	beq.n	80069ee <HAL_RCC_GetSysClockFreq+0x3a>
 80069e6:	e0db      	b.n	8006ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069e8:	4b73      	ldr	r3, [pc, #460]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 80069ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80069ec:	e0db      	b.n	8006ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069ee:	4b73      	ldr	r3, [pc, #460]	; (8006bbc <HAL_RCC_GetSysClockFreq+0x208>)
 80069f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80069f2:	e0d8      	b.n	8006ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069f4:	4b6f      	ldr	r3, [pc, #444]	; (8006bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069fe:	4b6d      	ldr	r3, [pc, #436]	; (8006bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d063      	beq.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a0a:	4b6a      	ldr	r3, [pc, #424]	; (8006bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	099b      	lsrs	r3, r3, #6
 8006a10:	2200      	movs	r2, #0
 8006a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a1e:	2300      	movs	r3, #0
 8006a20:	637b      	str	r3, [r7, #52]	; 0x34
 8006a22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a26:	4622      	mov	r2, r4
 8006a28:	462b      	mov	r3, r5
 8006a2a:	f04f 0000 	mov.w	r0, #0
 8006a2e:	f04f 0100 	mov.w	r1, #0
 8006a32:	0159      	lsls	r1, r3, #5
 8006a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a38:	0150      	lsls	r0, r2, #5
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4621      	mov	r1, r4
 8006a40:	1a51      	subs	r1, r2, r1
 8006a42:	6139      	str	r1, [r7, #16]
 8006a44:	4629      	mov	r1, r5
 8006a46:	eb63 0301 	sbc.w	r3, r3, r1
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a58:	4659      	mov	r1, fp
 8006a5a:	018b      	lsls	r3, r1, #6
 8006a5c:	4651      	mov	r1, sl
 8006a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a62:	4651      	mov	r1, sl
 8006a64:	018a      	lsls	r2, r1, #6
 8006a66:	4651      	mov	r1, sl
 8006a68:	ebb2 0801 	subs.w	r8, r2, r1
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	eb63 0901 	sbc.w	r9, r3, r1
 8006a72:	f04f 0200 	mov.w	r2, #0
 8006a76:	f04f 0300 	mov.w	r3, #0
 8006a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a86:	4690      	mov	r8, r2
 8006a88:	4699      	mov	r9, r3
 8006a8a:	4623      	mov	r3, r4
 8006a8c:	eb18 0303 	adds.w	r3, r8, r3
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	462b      	mov	r3, r5
 8006a94:	eb49 0303 	adc.w	r3, r9, r3
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	024b      	lsls	r3, r1, #9
 8006aaa:	4621      	mov	r1, r4
 8006aac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	024a      	lsls	r2, r1, #9
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aba:	2200      	movs	r2, #0
 8006abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006abe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ac4:	f7f9 fe48 	bl	8000758 <__aeabi_uldivmod>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4613      	mov	r3, r2
 8006ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ad0:	e058      	b.n	8006b84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ad2:	4b38      	ldr	r3, [pc, #224]	; (8006bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	099b      	lsrs	r3, r3, #6
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4618      	mov	r0, r3
 8006adc:	4611      	mov	r1, r2
 8006ade:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ae2:	623b      	str	r3, [r7, #32]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006aec:	4642      	mov	r2, r8
 8006aee:	464b      	mov	r3, r9
 8006af0:	f04f 0000 	mov.w	r0, #0
 8006af4:	f04f 0100 	mov.w	r1, #0
 8006af8:	0159      	lsls	r1, r3, #5
 8006afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006afe:	0150      	lsls	r0, r2, #5
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4641      	mov	r1, r8
 8006b06:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b10:	f04f 0200 	mov.w	r2, #0
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b24:	ebb2 040a 	subs.w	r4, r2, sl
 8006b28:	eb63 050b 	sbc.w	r5, r3, fp
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	00eb      	lsls	r3, r5, #3
 8006b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b3a:	00e2      	lsls	r2, r4, #3
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	461d      	mov	r5, r3
 8006b40:	4643      	mov	r3, r8
 8006b42:	18e3      	adds	r3, r4, r3
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	464b      	mov	r3, r9
 8006b48:	eb45 0303 	adc.w	r3, r5, r3
 8006b4c:	607b      	str	r3, [r7, #4]
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	028b      	lsls	r3, r1, #10
 8006b5e:	4621      	mov	r1, r4
 8006b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b64:	4621      	mov	r1, r4
 8006b66:	028a      	lsls	r2, r1, #10
 8006b68:	4610      	mov	r0, r2
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b6e:	2200      	movs	r2, #0
 8006b70:	61bb      	str	r3, [r7, #24]
 8006b72:	61fa      	str	r2, [r7, #28]
 8006b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b78:	f7f9 fdee 	bl	8000758 <__aeabi_uldivmod>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4613      	mov	r3, r2
 8006b82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b84:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	0c1b      	lsrs	r3, r3, #16
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	3301      	adds	r3, #1
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006b94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b9e:	e002      	b.n	8006ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ba0:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ba2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3750      	adds	r7, #80	; 0x50
 8006bac:	46bd      	mov	sp, r7
 8006bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bb2:	bf00      	nop
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	00f42400 	.word	0x00f42400
 8006bbc:	007a1200 	.word	0x007a1200

08006bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bc4:	4b03      	ldr	r3, [pc, #12]	; (8006bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	20000004 	.word	0x20000004

08006bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bdc:	f7ff fff0 	bl	8006bc0 <HAL_RCC_GetHCLKFreq>
 8006be0:	4602      	mov	r2, r0
 8006be2:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	0a9b      	lsrs	r3, r3, #10
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	4903      	ldr	r1, [pc, #12]	; (8006bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bee:	5ccb      	ldrb	r3, [r1, r3]
 8006bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	0801c88c 	.word	0x0801c88c

08006c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c04:	f7ff ffdc 	bl	8006bc0 <HAL_RCC_GetHCLKFreq>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	0b5b      	lsrs	r3, r3, #13
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	4903      	ldr	r1, [pc, #12]	; (8006c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c16:	5ccb      	ldrb	r3, [r1, r3]
 8006c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40023800 	.word	0x40023800
 8006c24:	0801c88c 	.word	0x0801c88c

08006c28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	220f      	movs	r2, #15
 8006c36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c38:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <HAL_RCC_GetClockConfig+0x5c>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f003 0203 	and.w	r2, r3, #3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c44:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <HAL_RCC_GetClockConfig+0x5c>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c50:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <HAL_RCC_GetClockConfig+0x5c>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c5c:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <HAL_RCC_GetClockConfig+0x5c>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	08db      	lsrs	r3, r3, #3
 8006c62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c6a:	4b07      	ldr	r3, [pc, #28]	; (8006c88 <HAL_RCC_GetClockConfig+0x60>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0207 	and.w	r2, r3, #7
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	601a      	str	r2, [r3, #0]
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40023800 	.word	0x40023800
 8006c88:	40023c00 	.word	0x40023c00

08006c8c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e01c      	b.n	8006cd8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	795b      	ldrb	r3, [r3, #5]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d105      	bne.n	8006cb4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7fb fa76 	bl	80021a0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f042 0204 	orr.w	r2, r2, #4
 8006cc8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e07b      	b.n	8006dea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d108      	bne.n	8006d0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d02:	d009      	beq.n	8006d18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	61da      	str	r2, [r3, #28]
 8006d0a:	e005      	b.n	8006d18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d106      	bne.n	8006d38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fb fa8c 	bl	8002250 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9c:	ea42 0103 	orr.w	r1, r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	0c1b      	lsrs	r3, r3, #16
 8006db6:	f003 0104 	and.w	r1, r3, #4
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	f003 0210 	and.w	r2, r3, #16
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69da      	ldr	r2, [r3, #28]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e041      	b.n	8006e88 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d106      	bne.n	8006e1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7fb ffc9 	bl	8002db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4610      	mov	r0, r2
 8006e32:	f000 fded 	bl	8007a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d001      	beq.n	8006ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e04e      	b.n	8006f46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0201 	orr.w	r2, r2, #1
 8006ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a23      	ldr	r2, [pc, #140]	; (8006f54 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d022      	beq.n	8006f10 <HAL_TIM_Base_Start_IT+0x80>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed2:	d01d      	beq.n	8006f10 <HAL_TIM_Base_Start_IT+0x80>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1f      	ldr	r2, [pc, #124]	; (8006f58 <HAL_TIM_Base_Start_IT+0xc8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d018      	beq.n	8006f10 <HAL_TIM_Base_Start_IT+0x80>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1e      	ldr	r2, [pc, #120]	; (8006f5c <HAL_TIM_Base_Start_IT+0xcc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d013      	beq.n	8006f10 <HAL_TIM_Base_Start_IT+0x80>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1c      	ldr	r2, [pc, #112]	; (8006f60 <HAL_TIM_Base_Start_IT+0xd0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00e      	beq.n	8006f10 <HAL_TIM_Base_Start_IT+0x80>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1b      	ldr	r2, [pc, #108]	; (8006f64 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d009      	beq.n	8006f10 <HAL_TIM_Base_Start_IT+0x80>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d004      	beq.n	8006f10 <HAL_TIM_Base_Start_IT+0x80>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a18      	ldr	r2, [pc, #96]	; (8006f6c <HAL_TIM_Base_Start_IT+0xdc>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d111      	bne.n	8006f34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b06      	cmp	r3, #6
 8006f20:	d010      	beq.n	8006f44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0201 	orr.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f32:	e007      	b.n	8006f44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0201 	orr.w	r2, r2, #1
 8006f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40010000 	.word	0x40010000
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800
 8006f60:	40000c00 	.word	0x40000c00
 8006f64:	40010400 	.word	0x40010400
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	40001800 	.word	0x40001800

08006f70 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e041      	b.n	8007006 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7fb fee8 	bl	8002d6c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4619      	mov	r1, r3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	f000 fd2e 	bl	8007a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e041      	b.n	80070a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d106      	bne.n	800703a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7fb fe3b 	bl	8002cb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2202      	movs	r2, #2
 800703e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	3304      	adds	r3, #4
 800704a:	4619      	mov	r1, r3
 800704c:	4610      	mov	r0, r2
 800704e:	f000 fcdf 	bl	8007a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e041      	b.n	8007142 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f839 	bl	800714a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3304      	adds	r3, #4
 80070e8:	4619      	mov	r1, r3
 80070ea:	4610      	mov	r0, r2
 80070ec:	f000 fc90 	bl	8007a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b086      	sub	sp, #24
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e097      	b.n	80072a2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7fb fd10 	bl	8002bac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6812      	ldr	r2, [r2, #0]
 800719e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a2:	f023 0307 	bic.w	r3, r3, #7
 80071a6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4619      	mov	r1, r3
 80071b2:	4610      	mov	r0, r2
 80071b4:	f000 fc2c 	bl	8007a10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e0:	f023 0303 	bic.w	r3, r3, #3
 80071e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	689a      	ldr	r2, [r3, #8]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	021b      	lsls	r3, r3, #8
 80071f0:	4313      	orrs	r3, r2
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80071fe:	f023 030c 	bic.w	r3, r3, #12
 8007202:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800720a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800720e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	68da      	ldr	r2, [r3, #12]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	4313      	orrs	r3, r2
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	4313      	orrs	r3, r2
 8007220:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	011a      	lsls	r2, r3, #4
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	031b      	lsls	r3, r3, #12
 800722e:	4313      	orrs	r3, r2
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800723c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007244:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	4313      	orrs	r3, r2
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d122      	bne.n	8007306 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d11b      	bne.n	8007306 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f06f 0202 	mvn.w	r2, #2
 80072d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f003 0303 	and.w	r3, r3, #3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fb70 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 80072f2:	e005      	b.n	8007300 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fb62 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fb73 	bl	80079e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b04      	cmp	r3, #4
 8007312:	d122      	bne.n	800735a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	2b04      	cmp	r3, #4
 8007320:	d11b      	bne.n	800735a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f06f 0204 	mvn.w	r2, #4
 800732a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fb46 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 8007346:	e005      	b.n	8007354 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fb38 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fb49 	bl	80079e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	f003 0308 	and.w	r3, r3, #8
 8007364:	2b08      	cmp	r3, #8
 8007366:	d122      	bne.n	80073ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b08      	cmp	r3, #8
 8007374:	d11b      	bne.n	80073ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f06f 0208 	mvn.w	r2, #8
 800737e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2204      	movs	r2, #4
 8007384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fb1c 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 800739a:	e005      	b.n	80073a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fb0e 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fb1f 	bl	80079e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f003 0310 	and.w	r3, r3, #16
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d122      	bne.n	8007402 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f003 0310 	and.w	r3, r3, #16
 80073c6:	2b10      	cmp	r3, #16
 80073c8:	d11b      	bne.n	8007402 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f06f 0210 	mvn.w	r2, #16
 80073d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2208      	movs	r2, #8
 80073d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 faf2 	bl	80079d2 <HAL_TIM_IC_CaptureCallback>
 80073ee:	e005      	b.n	80073fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fae4 	bl	80079be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 faf5 	bl	80079e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b01      	cmp	r3, #1
 800740e:	d10e      	bne.n	800742e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b01      	cmp	r3, #1
 800741c:	d107      	bne.n	800742e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f06f 0201 	mvn.w	r2, #1
 8007426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7fa fd27 	bl	8001e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007438:	2b80      	cmp	r3, #128	; 0x80
 800743a:	d10e      	bne.n	800745a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007446:	2b80      	cmp	r3, #128	; 0x80
 8007448:	d107      	bne.n	800745a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 ffc7 	bl	80083e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007464:	2b40      	cmp	r3, #64	; 0x40
 8007466:	d10e      	bne.n	8007486 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b40      	cmp	r3, #64	; 0x40
 8007474:	d107      	bne.n	8007486 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800747e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 faba 	bl	80079fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f003 0320 	and.w	r3, r3, #32
 8007490:	2b20      	cmp	r3, #32
 8007492:	d10e      	bne.n	80074b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b20      	cmp	r3, #32
 80074a0:	d107      	bne.n	80074b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f06f 0220 	mvn.w	r2, #32
 80074aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 ff91 	bl	80083d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_TIM_OC_ConfigChannel+0x1e>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e048      	b.n	800756c <HAL_TIM_OC_ConfigChannel+0xb0>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b0c      	cmp	r3, #12
 80074e6:	d839      	bhi.n	800755c <HAL_TIM_OC_ConfigChannel+0xa0>
 80074e8:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80074ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ee:	bf00      	nop
 80074f0:	08007525 	.word	0x08007525
 80074f4:	0800755d 	.word	0x0800755d
 80074f8:	0800755d 	.word	0x0800755d
 80074fc:	0800755d 	.word	0x0800755d
 8007500:	08007533 	.word	0x08007533
 8007504:	0800755d 	.word	0x0800755d
 8007508:	0800755d 	.word	0x0800755d
 800750c:	0800755d 	.word	0x0800755d
 8007510:	08007541 	.word	0x08007541
 8007514:	0800755d 	.word	0x0800755d
 8007518:	0800755d 	.word	0x0800755d
 800751c:	0800755d 	.word	0x0800755d
 8007520:	0800754f 	.word	0x0800754f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68b9      	ldr	r1, [r7, #8]
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fb10 	bl	8007b50 <TIM_OC1_SetConfig>
      break;
 8007530:	e017      	b.n	8007562 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	4618      	mov	r0, r3
 800753a:	f000 fb79 	bl	8007c30 <TIM_OC2_SetConfig>
      break;
 800753e:	e010      	b.n	8007562 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fbe8 	bl	8007d1c <TIM_OC3_SetConfig>
      break;
 800754c:	e009      	b.n	8007562 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	4618      	mov	r0, r3
 8007556:	f000 fc55 	bl	8007e04 <TIM_OC4_SetConfig>
      break;
 800755a:	e002      	b.n	8007562 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	75fb      	strb	r3, [r7, #23]
      break;
 8007560:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800756a:	7dfb      	ldrb	r3, [r7, #23]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800758a:	2b01      	cmp	r3, #1
 800758c:	d101      	bne.n	8007592 <HAL_TIM_IC_ConfigChannel+0x1e>
 800758e:	2302      	movs	r3, #2
 8007590:	e088      	b.n	80076a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d11b      	bne.n	80075d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	6819      	ldr	r1, [r3, #0]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f000 fc7e 	bl	8007eb0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 020c 	bic.w	r2, r2, #12
 80075c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6999      	ldr	r1, [r3, #24]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	619a      	str	r2, [r3, #24]
 80075d6:	e060      	b.n	800769a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d11c      	bne.n	8007618 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	6819      	ldr	r1, [r3, #0]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f000 fd02 	bl	8007ff6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699a      	ldr	r2, [r3, #24]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007600:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6999      	ldr	r1, [r3, #24]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	021a      	lsls	r2, r3, #8
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	619a      	str	r2, [r3, #24]
 8007616:	e040      	b.n	800769a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b08      	cmp	r3, #8
 800761c:	d11b      	bne.n	8007656 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	6819      	ldr	r1, [r3, #0]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f000 fd4f 	bl	80080d0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69da      	ldr	r2, [r3, #28]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 020c 	bic.w	r2, r2, #12
 8007640:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69d9      	ldr	r1, [r3, #28]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	61da      	str	r2, [r3, #28]
 8007654:	e021      	b.n	800769a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b0c      	cmp	r3, #12
 800765a:	d11c      	bne.n	8007696 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	6819      	ldr	r1, [r3, #0]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f000 fd6c 	bl	8008148 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	69da      	ldr	r2, [r3, #28]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800767e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69d9      	ldr	r1, [r3, #28]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	021a      	lsls	r2, r3, #8
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	61da      	str	r2, [r3, #28]
 8007694:	e001      	b.n	800769a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d101      	bne.n	80076ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076c6:	2302      	movs	r3, #2
 80076c8:	e0ae      	b.n	8007828 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b0c      	cmp	r3, #12
 80076d6:	f200 809f 	bhi.w	8007818 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076da:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	08007715 	.word	0x08007715
 80076e4:	08007819 	.word	0x08007819
 80076e8:	08007819 	.word	0x08007819
 80076ec:	08007819 	.word	0x08007819
 80076f0:	08007755 	.word	0x08007755
 80076f4:	08007819 	.word	0x08007819
 80076f8:	08007819 	.word	0x08007819
 80076fc:	08007819 	.word	0x08007819
 8007700:	08007797 	.word	0x08007797
 8007704:	08007819 	.word	0x08007819
 8007708:	08007819 	.word	0x08007819
 800770c:	08007819 	.word	0x08007819
 8007710:	080077d7 	.word	0x080077d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68b9      	ldr	r1, [r7, #8]
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fa18 	bl	8007b50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699a      	ldr	r2, [r3, #24]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f042 0208 	orr.w	r2, r2, #8
 800772e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699a      	ldr	r2, [r3, #24]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 0204 	bic.w	r2, r2, #4
 800773e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6999      	ldr	r1, [r3, #24]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	691a      	ldr	r2, [r3, #16]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	619a      	str	r2, [r3, #24]
      break;
 8007752:	e064      	b.n	800781e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68b9      	ldr	r1, [r7, #8]
 800775a:	4618      	mov	r0, r3
 800775c:	f000 fa68 	bl	8007c30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	699a      	ldr	r2, [r3, #24]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800776e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699a      	ldr	r2, [r3, #24]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800777e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6999      	ldr	r1, [r3, #24]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	021a      	lsls	r2, r3, #8
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	619a      	str	r2, [r3, #24]
      break;
 8007794:	e043      	b.n	800781e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68b9      	ldr	r1, [r7, #8]
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fabd 	bl	8007d1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69da      	ldr	r2, [r3, #28]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0208 	orr.w	r2, r2, #8
 80077b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	69da      	ldr	r2, [r3, #28]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0204 	bic.w	r2, r2, #4
 80077c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69d9      	ldr	r1, [r3, #28]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	691a      	ldr	r2, [r3, #16]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	61da      	str	r2, [r3, #28]
      break;
 80077d4:	e023      	b.n	800781e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68b9      	ldr	r1, [r7, #8]
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 fb11 	bl	8007e04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69da      	ldr	r2, [r3, #28]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69da      	ldr	r2, [r3, #28]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69d9      	ldr	r1, [r3, #28]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	021a      	lsls	r2, r3, #8
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	61da      	str	r2, [r3, #28]
      break;
 8007816:	e002      	b.n	800781e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	75fb      	strb	r3, [r7, #23]
      break;
 800781c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007826:	7dfb      	ldrb	r3, [r7, #23]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <HAL_TIM_ConfigClockSource+0x1c>
 8007848:	2302      	movs	r3, #2
 800784a:	e0b4      	b.n	80079b6 <HAL_TIM_ConfigClockSource+0x186>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2202      	movs	r2, #2
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800786a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007884:	d03e      	beq.n	8007904 <HAL_TIM_ConfigClockSource+0xd4>
 8007886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800788a:	f200 8087 	bhi.w	800799c <HAL_TIM_ConfigClockSource+0x16c>
 800788e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007892:	f000 8086 	beq.w	80079a2 <HAL_TIM_ConfigClockSource+0x172>
 8007896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800789a:	d87f      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 800789c:	2b70      	cmp	r3, #112	; 0x70
 800789e:	d01a      	beq.n	80078d6 <HAL_TIM_ConfigClockSource+0xa6>
 80078a0:	2b70      	cmp	r3, #112	; 0x70
 80078a2:	d87b      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 80078a4:	2b60      	cmp	r3, #96	; 0x60
 80078a6:	d050      	beq.n	800794a <HAL_TIM_ConfigClockSource+0x11a>
 80078a8:	2b60      	cmp	r3, #96	; 0x60
 80078aa:	d877      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 80078ac:	2b50      	cmp	r3, #80	; 0x50
 80078ae:	d03c      	beq.n	800792a <HAL_TIM_ConfigClockSource+0xfa>
 80078b0:	2b50      	cmp	r3, #80	; 0x50
 80078b2:	d873      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 80078b4:	2b40      	cmp	r3, #64	; 0x40
 80078b6:	d058      	beq.n	800796a <HAL_TIM_ConfigClockSource+0x13a>
 80078b8:	2b40      	cmp	r3, #64	; 0x40
 80078ba:	d86f      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 80078bc:	2b30      	cmp	r3, #48	; 0x30
 80078be:	d064      	beq.n	800798a <HAL_TIM_ConfigClockSource+0x15a>
 80078c0:	2b30      	cmp	r3, #48	; 0x30
 80078c2:	d86b      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d060      	beq.n	800798a <HAL_TIM_ConfigClockSource+0x15a>
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d867      	bhi.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d05c      	beq.n	800798a <HAL_TIM_ConfigClockSource+0x15a>
 80078d0:	2b10      	cmp	r3, #16
 80078d2:	d05a      	beq.n	800798a <HAL_TIM_ConfigClockSource+0x15a>
 80078d4:	e062      	b.n	800799c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	6899      	ldr	r1, [r3, #8]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f000 fc87 	bl	80081f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	609a      	str	r2, [r3, #8]
      break;
 8007902:	e04f      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	6899      	ldr	r1, [r3, #8]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	f000 fc70 	bl	80081f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007926:	609a      	str	r2, [r3, #8]
      break;
 8007928:	e03c      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6818      	ldr	r0, [r3, #0]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	6859      	ldr	r1, [r3, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	461a      	mov	r2, r3
 8007938:	f000 fb2e 	bl	8007f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2150      	movs	r1, #80	; 0x50
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fc3d 	bl	80081c2 <TIM_ITRx_SetConfig>
      break;
 8007948:	e02c      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6818      	ldr	r0, [r3, #0]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	6859      	ldr	r1, [r3, #4]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	461a      	mov	r2, r3
 8007958:	f000 fb8a 	bl	8008070 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2160      	movs	r1, #96	; 0x60
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fc2d 	bl	80081c2 <TIM_ITRx_SetConfig>
      break;
 8007968:	e01c      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6818      	ldr	r0, [r3, #0]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	6859      	ldr	r1, [r3, #4]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	461a      	mov	r2, r3
 8007978:	f000 fb0e 	bl	8007f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2140      	movs	r1, #64	; 0x40
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fc1d 	bl	80081c2 <TIM_ITRx_SetConfig>
      break;
 8007988:	e00c      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4619      	mov	r1, r3
 8007994:	4610      	mov	r0, r2
 8007996:	f000 fc14 	bl	80081c2 <TIM_ITRx_SetConfig>
      break;
 800799a:	e003      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	73fb      	strb	r3, [r7, #15]
      break;
 80079a0:	e000      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
	...

08007a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a40      	ldr	r2, [pc, #256]	; (8007b24 <TIM_Base_SetConfig+0x114>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d013      	beq.n	8007a50 <TIM_Base_SetConfig+0x40>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a2e:	d00f      	beq.n	8007a50 <TIM_Base_SetConfig+0x40>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a3d      	ldr	r2, [pc, #244]	; (8007b28 <TIM_Base_SetConfig+0x118>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d00b      	beq.n	8007a50 <TIM_Base_SetConfig+0x40>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a3c      	ldr	r2, [pc, #240]	; (8007b2c <TIM_Base_SetConfig+0x11c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d007      	beq.n	8007a50 <TIM_Base_SetConfig+0x40>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a3b      	ldr	r2, [pc, #236]	; (8007b30 <TIM_Base_SetConfig+0x120>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d003      	beq.n	8007a50 <TIM_Base_SetConfig+0x40>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a3a      	ldr	r2, [pc, #232]	; (8007b34 <TIM_Base_SetConfig+0x124>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d108      	bne.n	8007a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a2f      	ldr	r2, [pc, #188]	; (8007b24 <TIM_Base_SetConfig+0x114>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d02b      	beq.n	8007ac2 <TIM_Base_SetConfig+0xb2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a70:	d027      	beq.n	8007ac2 <TIM_Base_SetConfig+0xb2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a2c      	ldr	r2, [pc, #176]	; (8007b28 <TIM_Base_SetConfig+0x118>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d023      	beq.n	8007ac2 <TIM_Base_SetConfig+0xb2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a2b      	ldr	r2, [pc, #172]	; (8007b2c <TIM_Base_SetConfig+0x11c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d01f      	beq.n	8007ac2 <TIM_Base_SetConfig+0xb2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a2a      	ldr	r2, [pc, #168]	; (8007b30 <TIM_Base_SetConfig+0x120>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01b      	beq.n	8007ac2 <TIM_Base_SetConfig+0xb2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a29      	ldr	r2, [pc, #164]	; (8007b34 <TIM_Base_SetConfig+0x124>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d017      	beq.n	8007ac2 <TIM_Base_SetConfig+0xb2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a28      	ldr	r2, [pc, #160]	; (8007b38 <TIM_Base_SetConfig+0x128>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d013      	beq.n	8007ac2 <TIM_Base_SetConfig+0xb2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a27      	ldr	r2, [pc, #156]	; (8007b3c <TIM_Base_SetConfig+0x12c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00f      	beq.n	8007ac2 <TIM_Base_SetConfig+0xb2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a26      	ldr	r2, [pc, #152]	; (8007b40 <TIM_Base_SetConfig+0x130>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00b      	beq.n	8007ac2 <TIM_Base_SetConfig+0xb2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a25      	ldr	r2, [pc, #148]	; (8007b44 <TIM_Base_SetConfig+0x134>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d007      	beq.n	8007ac2 <TIM_Base_SetConfig+0xb2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a24      	ldr	r2, [pc, #144]	; (8007b48 <TIM_Base_SetConfig+0x138>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d003      	beq.n	8007ac2 <TIM_Base_SetConfig+0xb2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a23      	ldr	r2, [pc, #140]	; (8007b4c <TIM_Base_SetConfig+0x13c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d108      	bne.n	8007ad4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a0a      	ldr	r2, [pc, #40]	; (8007b24 <TIM_Base_SetConfig+0x114>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d003      	beq.n	8007b08 <TIM_Base_SetConfig+0xf8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a0c      	ldr	r2, [pc, #48]	; (8007b34 <TIM_Base_SetConfig+0x124>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d103      	bne.n	8007b10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	615a      	str	r2, [r3, #20]
}
 8007b16:	bf00      	nop
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40010000 	.word	0x40010000
 8007b28:	40000400 	.word	0x40000400
 8007b2c:	40000800 	.word	0x40000800
 8007b30:	40000c00 	.word	0x40000c00
 8007b34:	40010400 	.word	0x40010400
 8007b38:	40014000 	.word	0x40014000
 8007b3c:	40014400 	.word	0x40014400
 8007b40:	40014800 	.word	0x40014800
 8007b44:	40001800 	.word	0x40001800
 8007b48:	40001c00 	.word	0x40001c00
 8007b4c:	40002000 	.word	0x40002000

08007b50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	f023 0201 	bic.w	r2, r3, #1
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f023 0302 	bic.w	r3, r3, #2
 8007b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a20      	ldr	r2, [pc, #128]	; (8007c28 <TIM_OC1_SetConfig+0xd8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d003      	beq.n	8007bb4 <TIM_OC1_SetConfig+0x64>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a1f      	ldr	r2, [pc, #124]	; (8007c2c <TIM_OC1_SetConfig+0xdc>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d10c      	bne.n	8007bce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f023 0308 	bic.w	r3, r3, #8
 8007bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f023 0304 	bic.w	r3, r3, #4
 8007bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a15      	ldr	r2, [pc, #84]	; (8007c28 <TIM_OC1_SetConfig+0xd8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d003      	beq.n	8007bde <TIM_OC1_SetConfig+0x8e>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a14      	ldr	r2, [pc, #80]	; (8007c2c <TIM_OC1_SetConfig+0xdc>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d111      	bne.n	8007c02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	621a      	str	r2, [r3, #32]
}
 8007c1c:	bf00      	nop
 8007c1e:	371c      	adds	r7, #28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	40010000 	.word	0x40010000
 8007c2c:	40010400 	.word	0x40010400

08007c30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	f023 0210 	bic.w	r2, r3, #16
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f023 0320 	bic.w	r3, r3, #32
 8007c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	011b      	lsls	r3, r3, #4
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a22      	ldr	r2, [pc, #136]	; (8007d14 <TIM_OC2_SetConfig+0xe4>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d003      	beq.n	8007c98 <TIM_OC2_SetConfig+0x68>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a21      	ldr	r2, [pc, #132]	; (8007d18 <TIM_OC2_SetConfig+0xe8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d10d      	bne.n	8007cb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a17      	ldr	r2, [pc, #92]	; (8007d14 <TIM_OC2_SetConfig+0xe4>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d003      	beq.n	8007cc4 <TIM_OC2_SetConfig+0x94>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a16      	ldr	r2, [pc, #88]	; (8007d18 <TIM_OC2_SetConfig+0xe8>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d113      	bne.n	8007cec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	621a      	str	r2, [r3, #32]
}
 8007d06:	bf00      	nop
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	40010000 	.word	0x40010000
 8007d18:	40010400 	.word	0x40010400

08007d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0303 	bic.w	r3, r3, #3
 8007d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	021b      	lsls	r3, r3, #8
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a21      	ldr	r2, [pc, #132]	; (8007dfc <TIM_OC3_SetConfig+0xe0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d003      	beq.n	8007d82 <TIM_OC3_SetConfig+0x66>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a20      	ldr	r2, [pc, #128]	; (8007e00 <TIM_OC3_SetConfig+0xe4>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d10d      	bne.n	8007d9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a16      	ldr	r2, [pc, #88]	; (8007dfc <TIM_OC3_SetConfig+0xe0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d003      	beq.n	8007dae <TIM_OC3_SetConfig+0x92>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a15      	ldr	r2, [pc, #84]	; (8007e00 <TIM_OC3_SetConfig+0xe4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d113      	bne.n	8007dd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	011b      	lsls	r3, r3, #4
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	621a      	str	r2, [r3, #32]
}
 8007df0:	bf00      	nop
 8007df2:	371c      	adds	r7, #28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	40010000 	.word	0x40010000
 8007e00:	40010400 	.word	0x40010400

08007e04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	021b      	lsls	r3, r3, #8
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	031b      	lsls	r3, r3, #12
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a12      	ldr	r2, [pc, #72]	; (8007ea8 <TIM_OC4_SetConfig+0xa4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d003      	beq.n	8007e6c <TIM_OC4_SetConfig+0x68>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a11      	ldr	r2, [pc, #68]	; (8007eac <TIM_OC4_SetConfig+0xa8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d109      	bne.n	8007e80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	019b      	lsls	r3, r3, #6
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	621a      	str	r2, [r3, #32]
}
 8007e9a:	bf00      	nop
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	40010000 	.word	0x40010000
 8007eac:	40010400 	.word	0x40010400

08007eb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f023 0201 	bic.w	r2, r3, #1
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a28      	ldr	r2, [pc, #160]	; (8007f7c <TIM_TI1_SetConfig+0xcc>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d01b      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee4:	d017      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4a25      	ldr	r2, [pc, #148]	; (8007f80 <TIM_TI1_SetConfig+0xd0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4a24      	ldr	r2, [pc, #144]	; (8007f84 <TIM_TI1_SetConfig+0xd4>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00f      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	4a23      	ldr	r2, [pc, #140]	; (8007f88 <TIM_TI1_SetConfig+0xd8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00b      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4a22      	ldr	r2, [pc, #136]	; (8007f8c <TIM_TI1_SetConfig+0xdc>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d007      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4a21      	ldr	r2, [pc, #132]	; (8007f90 <TIM_TI1_SetConfig+0xe0>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d003      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4a20      	ldr	r2, [pc, #128]	; (8007f94 <TIM_TI1_SetConfig+0xe4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d101      	bne.n	8007f1a <TIM_TI1_SetConfig+0x6a>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <TIM_TI1_SetConfig+0x6c>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d008      	beq.n	8007f32 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f023 0303 	bic.w	r3, r3, #3
 8007f26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	e003      	b.n	8007f3a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f043 0301 	orr.w	r3, r3, #1
 8007f38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	011b      	lsls	r3, r3, #4
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f023 030a 	bic.w	r3, r3, #10
 8007f54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f003 030a 	and.w	r3, r3, #10
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	621a      	str	r2, [r3, #32]
}
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40010000 	.word	0x40010000
 8007f80:	40000400 	.word	0x40000400
 8007f84:	40000800 	.word	0x40000800
 8007f88:	40000c00 	.word	0x40000c00
 8007f8c:	40010400 	.word	0x40010400
 8007f90:	40014000 	.word	0x40014000
 8007f94:	40001800 	.word	0x40001800

08007f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	f023 0201 	bic.w	r2, r3, #1
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f023 030a 	bic.w	r3, r3, #10
 8007fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	621a      	str	r2, [r3, #32]
}
 8007fea:	bf00      	nop
 8007fec:	371c      	adds	r7, #28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b087      	sub	sp, #28
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	607a      	str	r2, [r7, #4]
 8008002:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	f023 0210 	bic.w	r2, r3, #16
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008022:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	021b      	lsls	r3, r3, #8
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	4313      	orrs	r3, r2
 800802c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008034:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	031b      	lsls	r3, r3, #12
 800803a:	b29b      	uxth	r3, r3
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008048:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	011b      	lsls	r3, r3, #4
 800804e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	621a      	str	r2, [r3, #32]
}
 8008064:	bf00      	nop
 8008066:	371c      	adds	r7, #28
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	f023 0210 	bic.w	r2, r3, #16
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800809a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	031b      	lsls	r3, r3, #12
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	011b      	lsls	r3, r3, #4
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	621a      	str	r2, [r3, #32]
}
 80080c4:	bf00      	nop
 80080c6:	371c      	adds	r7, #28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f023 0303 	bic.w	r3, r3, #3
 80080fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800810c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	b2db      	uxtb	r3, r3
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008120:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	021b      	lsls	r3, r3, #8
 8008126:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	621a      	str	r2, [r3, #32]
}
 800813c:	bf00      	nop
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008174:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	4313      	orrs	r3, r2
 800817e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008186:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	031b      	lsls	r3, r3, #12
 800818c:	b29b      	uxth	r3, r3
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4313      	orrs	r3, r2
 8008192:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800819a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	031b      	lsls	r3, r3, #12
 80081a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	621a      	str	r2, [r3, #32]
}
 80081b6:	bf00      	nop
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b085      	sub	sp, #20
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4313      	orrs	r3, r2
 80081e0:	f043 0307 	orr.w	r3, r3, #7
 80081e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	609a      	str	r2, [r3, #8]
}
 80081ec:	bf00      	nop
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	021a      	lsls	r2, r3, #8
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	431a      	orrs	r2, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4313      	orrs	r3, r2
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	4313      	orrs	r3, r2
 8008224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	609a      	str	r2, [r3, #8]
}
 800822c:	bf00      	nop
 800822e:	371c      	adds	r7, #28
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008248:	2b01      	cmp	r3, #1
 800824a:	d101      	bne.n	8008250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800824c:	2302      	movs	r3, #2
 800824e:	e05a      	b.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	4313      	orrs	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a21      	ldr	r2, [pc, #132]	; (8008314 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d022      	beq.n	80082da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800829c:	d01d      	beq.n	80082da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a1d      	ldr	r2, [pc, #116]	; (8008318 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d018      	beq.n	80082da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a1b      	ldr	r2, [pc, #108]	; (800831c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d013      	beq.n	80082da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a1a      	ldr	r2, [pc, #104]	; (8008320 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d00e      	beq.n	80082da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a18      	ldr	r2, [pc, #96]	; (8008324 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d009      	beq.n	80082da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a17      	ldr	r2, [pc, #92]	; (8008328 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d004      	beq.n	80082da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a15      	ldr	r2, [pc, #84]	; (800832c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d10c      	bne.n	80082f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	40010000 	.word	0x40010000
 8008318:	40000400 	.word	0x40000400
 800831c:	40000800 	.word	0x40000800
 8008320:	40000c00 	.word	0x40000c00
 8008324:	40010400 	.word	0x40010400
 8008328:	40014000 	.word	0x40014000
 800832c:	40001800 	.word	0x40001800

08008330 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008344:	2b01      	cmp	r3, #1
 8008346:	d101      	bne.n	800834c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008348:	2302      	movs	r3, #2
 800834a:	e03d      	b.n	80083c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	4313      	orrs	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	4313      	orrs	r3, r2
 800837c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4313      	orrs	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e03f      	b.n	800848e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d106      	bne.n	8008428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7fa fe24 	bl	8003070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2224      	movs	r2, #36	; 0x24
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68da      	ldr	r2, [r3, #12]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800843e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 ffd7 	bl	80093f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	695a      	ldr	r2, [r3, #20]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2220      	movs	r2, #32
 8008488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08c      	sub	sp, #48	; 0x30
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b20      	cmp	r3, #32
 80084b0:	d165      	bne.n	800857e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <HAL_UART_Transmit_DMA+0x26>
 80084b8:	88fb      	ldrh	r3, [r7, #6]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e05e      	b.n	8008580 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_UART_Transmit_DMA+0x38>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e057      	b.n	8008580 <HAL_UART_Transmit_DMA+0xe8>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	88fa      	ldrh	r2, [r7, #6]
 80084e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	88fa      	ldrh	r2, [r7, #6]
 80084e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2221      	movs	r2, #33	; 0x21
 80084f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fc:	4a22      	ldr	r2, [pc, #136]	; (8008588 <HAL_UART_Transmit_DMA+0xf0>)
 80084fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008504:	4a21      	ldr	r2, [pc, #132]	; (800858c <HAL_UART_Transmit_DMA+0xf4>)
 8008506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800850c:	4a20      	ldr	r2, [pc, #128]	; (8008590 <HAL_UART_Transmit_DMA+0xf8>)
 800850e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008514:	2200      	movs	r2, #0
 8008516:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008518:	f107 0308 	add.w	r3, r7, #8
 800851c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	6819      	ldr	r1, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3304      	adds	r3, #4
 800852c:	461a      	mov	r2, r3
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	f7fb fe16 	bl	8004160 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800853c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3314      	adds	r3, #20
 800854c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	617b      	str	r3, [r7, #20]
   return(result);
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855c:	62bb      	str	r3, [r7, #40]	; 0x28
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3314      	adds	r3, #20
 8008564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008566:	627a      	str	r2, [r7, #36]	; 0x24
 8008568:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856a:	6a39      	ldr	r1, [r7, #32]
 800856c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	61fb      	str	r3, [r7, #28]
   return(result);
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1e5      	bne.n	8008546 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	e000      	b.n	8008580 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800857e:	2302      	movs	r3, #2
  }
}
 8008580:	4618      	mov	r0, r3
 8008582:	3730      	adds	r7, #48	; 0x30
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	08008c8d 	.word	0x08008c8d
 800858c:	08008d27 	.word	0x08008d27
 8008590:	08008e9f 	.word	0x08008e9f

08008594 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b20      	cmp	r3, #32
 80085ac:	d11d      	bne.n	80085ea <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <HAL_UART_Receive_DMA+0x26>
 80085b4:	88fb      	ldrh	r3, [r7, #6]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e016      	b.n	80085ec <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d101      	bne.n	80085cc <HAL_UART_Receive_DMA+0x38>
 80085c8:	2302      	movs	r3, #2
 80085ca:	e00f      	b.n	80085ec <HAL_UART_Receive_DMA+0x58>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80085da:	88fb      	ldrh	r3, [r7, #6]
 80085dc:	461a      	mov	r2, r3
 80085de:	68b9      	ldr	r1, [r7, #8]
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 fca7 	bl	8008f34 <UART_Start_Receive_DMA>
 80085e6:	4603      	mov	r3, r0
 80085e8:	e000      	b.n	80085ec <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80085ea:	2302      	movs	r3, #2
  }
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b090      	sub	sp, #64	; 0x40
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860a:	2b80      	cmp	r3, #128	; 0x80
 800860c:	bf0c      	ite	eq
 800860e:	2301      	moveq	r3, #1
 8008610:	2300      	movne	r3, #0
 8008612:	b2db      	uxtb	r3, r3
 8008614:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b21      	cmp	r3, #33	; 0x21
 8008620:	d128      	bne.n	8008674 <HAL_UART_DMAStop+0x80>
 8008622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008624:	2b00      	cmp	r3, #0
 8008626:	d025      	beq.n	8008674 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3314      	adds	r3, #20
 800862e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	623b      	str	r3, [r7, #32]
   return(result);
 8008638:	6a3b      	ldr	r3, [r7, #32]
 800863a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800863e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3314      	adds	r3, #20
 8008646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008648:	633a      	str	r2, [r7, #48]	; 0x30
 800864a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800864e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008650:	e841 2300 	strex	r3, r2, [r1]
 8008654:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e5      	bne.n	8008628 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008660:	2b00      	cmp	r3, #0
 8008662:	d004      	beq.n	800866e <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008668:	4618      	mov	r0, r3
 800866a:	f7fb fdd1 	bl	8004210 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fcfe 	bl	8009070 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867e:	2b40      	cmp	r3, #64	; 0x40
 8008680:	bf0c      	ite	eq
 8008682:	2301      	moveq	r3, #1
 8008684:	2300      	movne	r3, #0
 8008686:	b2db      	uxtb	r3, r3
 8008688:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b22      	cmp	r3, #34	; 0x22
 8008694:	d128      	bne.n	80086e8 <HAL_UART_DMAStop+0xf4>
 8008696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008698:	2b00      	cmp	r3, #0
 800869a:	d025      	beq.n	80086e8 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3314      	adds	r3, #20
 80086a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	e853 3f00 	ldrex	r3, [r3]
 80086aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b2:	637b      	str	r3, [r7, #52]	; 0x34
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3314      	adds	r3, #20
 80086ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086bc:	61fa      	str	r2, [r7, #28]
 80086be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c0:	69b9      	ldr	r1, [r7, #24]
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	e841 2300 	strex	r3, r2, [r1]
 80086c8:	617b      	str	r3, [r7, #20]
   return(result);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1e5      	bne.n	800869c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d004      	beq.n	80086e2 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fb fd97 	bl	8004210 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fcec 	bl	80090c0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3740      	adds	r7, #64	; 0x40
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b0ba      	sub	sp, #232	; 0xe8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800871a:	2300      	movs	r3, #0
 800871c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008720:	2300      	movs	r3, #0
 8008722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872a:	f003 030f 	and.w	r3, r3, #15
 800872e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10f      	bne.n	800875a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800873a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800873e:	f003 0320 	and.w	r3, r3, #32
 8008742:	2b00      	cmp	r3, #0
 8008744:	d009      	beq.n	800875a <HAL_UART_IRQHandler+0x66>
 8008746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fd93 	bl	800927e <UART_Receive_IT>
      return;
 8008758:	e256      	b.n	8008c08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800875a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 80de 	beq.w	8008920 <HAL_UART_IRQHandler+0x22c>
 8008764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d106      	bne.n	800877e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008774:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 80d1 	beq.w	8008920 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800877e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00b      	beq.n	80087a2 <HAL_UART_IRQHandler+0xae>
 800878a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800878e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008792:	2b00      	cmp	r3, #0
 8008794:	d005      	beq.n	80087a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	f043 0201 	orr.w	r2, r3, #1
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a6:	f003 0304 	and.w	r3, r3, #4
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00b      	beq.n	80087c6 <HAL_UART_IRQHandler+0xd2>
 80087ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d005      	beq.n	80087c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087be:	f043 0202 	orr.w	r2, r3, #2
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00b      	beq.n	80087ea <HAL_UART_IRQHandler+0xf6>
 80087d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d005      	beq.n	80087ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e2:	f043 0204 	orr.w	r2, r3, #4
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80087ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ee:	f003 0308 	and.w	r3, r3, #8
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d011      	beq.n	800881a <HAL_UART_IRQHandler+0x126>
 80087f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087fa:	f003 0320 	and.w	r3, r3, #32
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d105      	bne.n	800880e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d005      	beq.n	800881a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	f043 0208 	orr.w	r2, r3, #8
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 81ed 	beq.w	8008bfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008828:	f003 0320 	and.w	r3, r3, #32
 800882c:	2b00      	cmp	r3, #0
 800882e:	d008      	beq.n	8008842 <HAL_UART_IRQHandler+0x14e>
 8008830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008834:	f003 0320 	and.w	r3, r3, #32
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fd1e 	bl	800927e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884c:	2b40      	cmp	r3, #64	; 0x40
 800884e:	bf0c      	ite	eq
 8008850:	2301      	moveq	r3, #1
 8008852:	2300      	movne	r3, #0
 8008854:	b2db      	uxtb	r3, r3
 8008856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	f003 0308 	and.w	r3, r3, #8
 8008862:	2b00      	cmp	r3, #0
 8008864:	d103      	bne.n	800886e <HAL_UART_IRQHandler+0x17a>
 8008866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800886a:	2b00      	cmp	r3, #0
 800886c:	d04f      	beq.n	800890e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fc26 	bl	80090c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887e:	2b40      	cmp	r3, #64	; 0x40
 8008880:	d141      	bne.n	8008906 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3314      	adds	r3, #20
 8008888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008890:	e853 3f00 	ldrex	r3, [r3]
 8008894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800889c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3314      	adds	r3, #20
 80088aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80088ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80088b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80088ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80088be:	e841 2300 	strex	r3, r2, [r1]
 80088c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80088c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1d9      	bne.n	8008882 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d013      	beq.n	80088fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088da:	4a7d      	ldr	r2, [pc, #500]	; (8008ad0 <HAL_UART_IRQHandler+0x3dc>)
 80088dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fb fd04 	bl	80042f0 <HAL_DMA_Abort_IT>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d016      	beq.n	800891c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088fc:	e00e      	b.n	800891c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f9ae 	bl	8008c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008904:	e00a      	b.n	800891c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f9aa 	bl	8008c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800890c:	e006      	b.n	800891c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f9a6 	bl	8008c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800891a:	e170      	b.n	8008bfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800891c:	bf00      	nop
    return;
 800891e:	e16e      	b.n	8008bfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008924:	2b01      	cmp	r3, #1
 8008926:	f040 814a 	bne.w	8008bbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800892a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800892e:	f003 0310 	and.w	r3, r3, #16
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 8143 	beq.w	8008bbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800893c:	f003 0310 	and.w	r3, r3, #16
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 813c 	beq.w	8008bbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008946:	2300      	movs	r3, #0
 8008948:	60bb      	str	r3, [r7, #8]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60bb      	str	r3, [r7, #8]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	60bb      	str	r3, [r7, #8]
 800895a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008966:	2b40      	cmp	r3, #64	; 0x40
 8008968:	f040 80b4 	bne.w	8008ad4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008978:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8140 	beq.w	8008c02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800898a:	429a      	cmp	r2, r3
 800898c:	f080 8139 	bcs.w	8008c02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008996:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089a2:	f000 8088 	beq.w	8008ab6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	330c      	adds	r3, #12
 80089ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089b4:	e853 3f00 	ldrex	r3, [r3]
 80089b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80089bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	330c      	adds	r3, #12
 80089ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80089d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80089de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80089ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1d9      	bne.n	80089a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3314      	adds	r3, #20
 80089f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a04:	f023 0301 	bic.w	r3, r3, #1
 8008a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3314      	adds	r3, #20
 8008a12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e1      	bne.n	80089f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3314      	adds	r3, #20
 8008a34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3314      	adds	r3, #20
 8008a4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e3      	bne.n	8008a2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	330c      	adds	r3, #12
 8008a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a86:	f023 0310 	bic.w	r3, r3, #16
 8008a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	330c      	adds	r3, #12
 8008a94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008a98:	65ba      	str	r2, [r7, #88]	; 0x58
 8008a9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008aa0:	e841 2300 	strex	r3, r2, [r1]
 8008aa4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e3      	bne.n	8008a74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fb fbad 	bl	8004210 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f8d4 	bl	8008c74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008acc:	e099      	b.n	8008c02 <HAL_UART_IRQHandler+0x50e>
 8008ace:	bf00      	nop
 8008ad0:	08009187 	.word	0x08009187
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 808b 	beq.w	8008c06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 8086 	beq.w	8008c06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	330c      	adds	r3, #12
 8008b00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	330c      	adds	r3, #12
 8008b1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b1e:	647a      	str	r2, [r7, #68]	; 0x44
 8008b20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b26:	e841 2300 	strex	r3, r2, [r1]
 8008b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1e3      	bne.n	8008afa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3314      	adds	r3, #20
 8008b38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	e853 3f00 	ldrex	r3, [r3]
 8008b40:	623b      	str	r3, [r7, #32]
   return(result);
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	f023 0301 	bic.w	r3, r3, #1
 8008b48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3314      	adds	r3, #20
 8008b52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b56:	633a      	str	r2, [r7, #48]	; 0x30
 8008b58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e3      	bne.n	8008b32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	e853 3f00 	ldrex	r3, [r3]
 8008b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0310 	bic.w	r3, r3, #16
 8008b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	330c      	adds	r3, #12
 8008b98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008b9c:	61fa      	str	r2, [r7, #28]
 8008b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba0:	69b9      	ldr	r1, [r7, #24]
 8008ba2:	69fa      	ldr	r2, [r7, #28]
 8008ba4:	e841 2300 	strex	r3, r2, [r1]
 8008ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1e3      	bne.n	8008b78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f85c 	bl	8008c74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bbc:	e023      	b.n	8008c06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <HAL_UART_IRQHandler+0x4ea>
 8008bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fae9 	bl	80091ae <UART_Transmit_IT>
    return;
 8008bdc:	e014      	b.n	8008c08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00e      	beq.n	8008c08 <HAL_UART_IRQHandler+0x514>
 8008bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d008      	beq.n	8008c08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fb29 	bl	800924e <UART_EndTransmit_IT>
    return;
 8008bfc:	e004      	b.n	8008c08 <HAL_UART_IRQHandler+0x514>
    return;
 8008bfe:	bf00      	nop
 8008c00:	e002      	b.n	8008c08 <HAL_UART_IRQHandler+0x514>
      return;
 8008c02:	bf00      	nop
 8008c04:	e000      	b.n	8008c08 <HAL_UART_IRQHandler+0x514>
      return;
 8008c06:	bf00      	nop
  }
}
 8008c08:	37e8      	adds	r7, #232	; 0xe8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop

08008c10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b090      	sub	sp, #64	; 0x40
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d137      	bne.n	8008d18 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008caa:	2200      	movs	r2, #0
 8008cac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3314      	adds	r3, #20
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	e853 3f00 	ldrex	r3, [r3]
 8008cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3314      	adds	r3, #20
 8008ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cce:	633a      	str	r2, [r7, #48]	; 0x30
 8008cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e5      	bne.n	8008cae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	330c      	adds	r3, #12
 8008ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	330c      	adds	r3, #12
 8008d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d02:	61fa      	str	r2, [r7, #28]
 8008d04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	69b9      	ldr	r1, [r7, #24]
 8008d08:	69fa      	ldr	r2, [r7, #28]
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e5      	bne.n	8008ce2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d16:	e002      	b.n	8008d1e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008d18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008d1a:	f7ff ff79 	bl	8008c10 <HAL_UART_TxCpltCallback>
}
 8008d1e:	bf00      	nop
 8008d20:	3740      	adds	r7, #64	; 0x40
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f7ff ff75 	bl	8008c24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d3a:	bf00      	nop
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b09c      	sub	sp, #112	; 0x70
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d172      	bne.n	8008e44 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d60:	2200      	movs	r2, #0
 8008d62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	330c      	adds	r3, #12
 8008d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	330c      	adds	r3, #12
 8008d82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d84:	65ba      	str	r2, [r7, #88]	; 0x58
 8008d86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d8c:	e841 2300 	strex	r3, r2, [r1]
 8008d90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e5      	bne.n	8008d64 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3314      	adds	r3, #20
 8008d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da2:	e853 3f00 	ldrex	r3, [r3]
 8008da6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008daa:	f023 0301 	bic.w	r3, r3, #1
 8008dae:	667b      	str	r3, [r7, #100]	; 0x64
 8008db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3314      	adds	r3, #20
 8008db6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008db8:	647a      	str	r2, [r7, #68]	; 0x44
 8008dba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dc0:	e841 2300 	strex	r3, r2, [r1]
 8008dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e5      	bne.n	8008d98 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3314      	adds	r3, #20
 8008dd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	623b      	str	r3, [r7, #32]
   return(result);
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de2:	663b      	str	r3, [r7, #96]	; 0x60
 8008de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3314      	adds	r3, #20
 8008dea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008dec:	633a      	str	r2, [r7, #48]	; 0x30
 8008dee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e5      	bne.n	8008dcc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e02:	2220      	movs	r2, #32
 8008e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d119      	bne.n	8008e44 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	330c      	adds	r3, #12
 8008e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	e853 3f00 	ldrex	r3, [r3]
 8008e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 0310 	bic.w	r3, r3, #16
 8008e26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e30:	61fa      	str	r2, [r7, #28]
 8008e32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e34:	69b9      	ldr	r1, [r7, #24]
 8008e36:	69fa      	ldr	r2, [r7, #28]
 8008e38:	e841 2300 	strex	r3, r2, [r1]
 8008e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1e5      	bne.n	8008e10 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d106      	bne.n	8008e5a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e50:	4619      	mov	r1, r3
 8008e52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008e54:	f7ff ff0e 	bl	8008c74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e58:	e002      	b.n	8008e60 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008e5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008e5c:	f7ff feec 	bl	8008c38 <HAL_UART_RxCpltCallback>
}
 8008e60:	bf00      	nop
 8008e62:	3770      	adds	r7, #112	; 0x70
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e74:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d108      	bne.n	8008e90 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e82:	085b      	lsrs	r3, r3, #1
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	4619      	mov	r1, r3
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f7ff fef3 	bl	8008c74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e8e:	e002      	b.n	8008e96 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f7ff fedb 	bl	8008c4c <HAL_UART_RxHalfCpltCallback>
}
 8008e96:	bf00      	nop
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eba:	2b80      	cmp	r3, #128	; 0x80
 8008ebc:	bf0c      	ite	eq
 8008ebe:	2301      	moveq	r3, #1
 8008ec0:	2300      	movne	r3, #0
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b21      	cmp	r3, #33	; 0x21
 8008ed0:	d108      	bne.n	8008ee4 <UART_DMAError+0x46>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2200      	movs	r2, #0
 8008edc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008ede:	68b8      	ldr	r0, [r7, #8]
 8008ee0:	f000 f8c6 	bl	8009070 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eee:	2b40      	cmp	r3, #64	; 0x40
 8008ef0:	bf0c      	ite	eq
 8008ef2:	2301      	moveq	r3, #1
 8008ef4:	2300      	movne	r3, #0
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b22      	cmp	r3, #34	; 0x22
 8008f04:	d108      	bne.n	8008f18 <UART_DMAError+0x7a>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d005      	beq.n	8008f18 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008f12:	68b8      	ldr	r0, [r7, #8]
 8008f14:	f000 f8d4 	bl	80090c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1c:	f043 0210 	orr.w	r2, r3, #16
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f24:	68b8      	ldr	r0, [r7, #8]
 8008f26:	f7ff fe9b 	bl	8008c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f2a:	bf00      	nop
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b098      	sub	sp, #96	; 0x60
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	88fa      	ldrh	r2, [r7, #6]
 8008f4c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2222      	movs	r2, #34	; 0x22
 8008f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	4a40      	ldr	r2, [pc, #256]	; (8009064 <UART_Start_Receive_DMA+0x130>)
 8008f62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	4a3f      	ldr	r2, [pc, #252]	; (8009068 <UART_Start_Receive_DMA+0x134>)
 8008f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	4a3e      	ldr	r2, [pc, #248]	; (800906c <UART_Start_Receive_DMA+0x138>)
 8008f72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f78:	2200      	movs	r2, #0
 8008f7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008f7c:	f107 0308 	add.w	r3, r7, #8
 8008f80:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	88fb      	ldrh	r3, [r7, #6]
 8008f94:	f7fb f8e4 	bl	8004160 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008f98:	2300      	movs	r3, #0
 8008f9a:	613b      	str	r3, [r7, #16]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	613b      	str	r3, [r7, #16]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	613b      	str	r3, [r7, #16]
 8008fac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d019      	beq.n	8008ff2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	330c      	adds	r3, #12
 8008fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fc8:	e853 3f00 	ldrex	r3, [r3]
 8008fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	330c      	adds	r3, #12
 8008fdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fde:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008fe0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e5      	bne.n	8008fbe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3314      	adds	r3, #20
 8008ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009004:	f043 0301 	orr.w	r3, r3, #1
 8009008:	657b      	str	r3, [r7, #84]	; 0x54
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3314      	adds	r3, #20
 8009010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009012:	63ba      	str	r2, [r7, #56]	; 0x38
 8009014:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800901a:	e841 2300 	strex	r3, r2, [r1]
 800901e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e5      	bne.n	8008ff2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3314      	adds	r3, #20
 800902c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	617b      	str	r3, [r7, #20]
   return(result);
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903c:	653b      	str	r3, [r7, #80]	; 0x50
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3314      	adds	r3, #20
 8009044:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009046:	627a      	str	r2, [r7, #36]	; 0x24
 8009048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6a39      	ldr	r1, [r7, #32]
 800904c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	61fb      	str	r3, [r7, #28]
   return(result);
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e5      	bne.n	8009026 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3760      	adds	r7, #96	; 0x60
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	08008d43 	.word	0x08008d43
 8009068:	08008e69 	.word	0x08008e69
 800906c:	08008e9f 	.word	0x08008e9f

08009070 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009070:	b480      	push	{r7}
 8009072:	b089      	sub	sp, #36	; 0x24
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	330c      	adds	r3, #12
 800907e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	e853 3f00 	ldrex	r3, [r3]
 8009086:	60bb      	str	r3, [r7, #8]
   return(result);
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800908e:	61fb      	str	r3, [r7, #28]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	330c      	adds	r3, #12
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	61ba      	str	r2, [r7, #24]
 800909a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909c:	6979      	ldr	r1, [r7, #20]
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	e841 2300 	strex	r3, r2, [r1]
 80090a4:	613b      	str	r3, [r7, #16]
   return(result);
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1e5      	bne.n	8009078 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2220      	movs	r2, #32
 80090b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80090b4:	bf00      	nop
 80090b6:	3724      	adds	r7, #36	; 0x24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b095      	sub	sp, #84	; 0x54
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	330c      	adds	r3, #12
 80090ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d2:	e853 3f00 	ldrex	r3, [r3]
 80090d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	330c      	adds	r3, #12
 80090e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090e8:	643a      	str	r2, [r7, #64]	; 0x40
 80090ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090f0:	e841 2300 	strex	r3, r2, [r1]
 80090f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1e5      	bne.n	80090c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3314      	adds	r3, #20
 8009102:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	61fb      	str	r3, [r7, #28]
   return(result);
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	f023 0301 	bic.w	r3, r3, #1
 8009112:	64bb      	str	r3, [r7, #72]	; 0x48
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3314      	adds	r3, #20
 800911a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800911c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800911e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009124:	e841 2300 	strex	r3, r2, [r1]
 8009128:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e5      	bne.n	80090fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009134:	2b01      	cmp	r3, #1
 8009136:	d119      	bne.n	800916c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	330c      	adds	r3, #12
 800913e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	e853 3f00 	ldrex	r3, [r3]
 8009146:	60bb      	str	r3, [r7, #8]
   return(result);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	f023 0310 	bic.w	r3, r3, #16
 800914e:	647b      	str	r3, [r7, #68]	; 0x44
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	330c      	adds	r3, #12
 8009156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009158:	61ba      	str	r2, [r7, #24]
 800915a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915c:	6979      	ldr	r1, [r7, #20]
 800915e:	69ba      	ldr	r2, [r7, #24]
 8009160:	e841 2300 	strex	r3, r2, [r1]
 8009164:	613b      	str	r3, [r7, #16]
   return(result);
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1e5      	bne.n	8009138 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2220      	movs	r2, #32
 8009170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	631a      	str	r2, [r3, #48]	; 0x30
}
 800917a:	bf00      	nop
 800917c:	3754      	adds	r7, #84	; 0x54
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009192:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f7ff fd5d 	bl	8008c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b085      	sub	sp, #20
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b21      	cmp	r3, #33	; 0x21
 80091c0:	d13e      	bne.n	8009240 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ca:	d114      	bne.n	80091f6 <UART_Transmit_IT+0x48>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d110      	bne.n	80091f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a1b      	ldr	r3, [r3, #32]
 80091d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	1c9a      	adds	r2, r3, #2
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	621a      	str	r2, [r3, #32]
 80091f4:	e008      	b.n	8009208 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	1c59      	adds	r1, r3, #1
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	6211      	str	r1, [r2, #32]
 8009200:	781a      	ldrb	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800920c:	b29b      	uxth	r3, r3
 800920e:	3b01      	subs	r3, #1
 8009210:	b29b      	uxth	r3, r3
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	4619      	mov	r1, r3
 8009216:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10f      	bne.n	800923c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68da      	ldr	r2, [r3, #12]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800922a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800923a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	e000      	b.n	8009242 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009240:	2302      	movs	r3, #2
  }
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68da      	ldr	r2, [r3, #12]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009264:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2220      	movs	r2, #32
 800926a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7ff fcce 	bl	8008c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b08c      	sub	sp, #48	; 0x30
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b22      	cmp	r3, #34	; 0x22
 8009290:	f040 80ab 	bne.w	80093ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800929c:	d117      	bne.n	80092ce <UART_Receive_IT+0x50>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d113      	bne.n	80092ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092a6:	2300      	movs	r3, #0
 80092a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092bc:	b29a      	uxth	r2, r3
 80092be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c6:	1c9a      	adds	r2, r3, #2
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	629a      	str	r2, [r3, #40]	; 0x28
 80092cc:	e026      	b.n	800931c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80092d4:	2300      	movs	r3, #0
 80092d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092e0:	d007      	beq.n	80092f2 <UART_Receive_IT+0x74>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10a      	bne.n	8009300 <UART_Receive_IT+0x82>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d106      	bne.n	8009300 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fc:	701a      	strb	r2, [r3, #0]
 80092fe:	e008      	b.n	8009312 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800930c:	b2da      	uxtb	r2, r3
 800930e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009310:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009316:	1c5a      	adds	r2, r3, #1
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009320:	b29b      	uxth	r3, r3
 8009322:	3b01      	subs	r3, #1
 8009324:	b29b      	uxth	r3, r3
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	4619      	mov	r1, r3
 800932a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800932c:	2b00      	cmp	r3, #0
 800932e:	d15a      	bne.n	80093e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f022 0220 	bic.w	r2, r2, #32
 800933e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800934e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	695a      	ldr	r2, [r3, #20]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 0201 	bic.w	r2, r2, #1
 800935e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2220      	movs	r2, #32
 8009364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936c:	2b01      	cmp	r3, #1
 800936e:	d135      	bne.n	80093dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	330c      	adds	r3, #12
 800937c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	613b      	str	r3, [r7, #16]
   return(result);
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	f023 0310 	bic.w	r3, r3, #16
 800938c:	627b      	str	r3, [r7, #36]	; 0x24
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	330c      	adds	r3, #12
 8009394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009396:	623a      	str	r2, [r7, #32]
 8009398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939a:	69f9      	ldr	r1, [r7, #28]
 800939c:	6a3a      	ldr	r2, [r7, #32]
 800939e:	e841 2300 	strex	r3, r2, [r1]
 80093a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1e5      	bne.n	8009376 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0310 	and.w	r3, r3, #16
 80093b4:	2b10      	cmp	r3, #16
 80093b6:	d10a      	bne.n	80093ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093b8:	2300      	movs	r3, #0
 80093ba:	60fb      	str	r3, [r7, #12]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	60fb      	str	r3, [r7, #12]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f7ff fc4d 	bl	8008c74 <HAL_UARTEx_RxEventCallback>
 80093da:	e002      	b.n	80093e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7ff fc2b 	bl	8008c38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	e002      	b.n	80093ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	e000      	b.n	80093ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80093ea:	2302      	movs	r3, #2
  }
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3730      	adds	r7, #48	; 0x30
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093f8:	b0c0      	sub	sp, #256	; 0x100
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800940c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009410:	68d9      	ldr	r1, [r3, #12]
 8009412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	ea40 0301 	orr.w	r3, r0, r1
 800941c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800941e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	431a      	orrs	r2, r3
 800942c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	431a      	orrs	r2, r3
 8009434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	4313      	orrs	r3, r2
 800943c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800944c:	f021 010c 	bic.w	r1, r1, #12
 8009450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800945a:	430b      	orrs	r3, r1
 800945c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800945e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800946a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800946e:	6999      	ldr	r1, [r3, #24]
 8009470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	ea40 0301 	orr.w	r3, r0, r1
 800947a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800947c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	4b8f      	ldr	r3, [pc, #572]	; (80096c0 <UART_SetConfig+0x2cc>)
 8009484:	429a      	cmp	r2, r3
 8009486:	d005      	beq.n	8009494 <UART_SetConfig+0xa0>
 8009488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	4b8d      	ldr	r3, [pc, #564]	; (80096c4 <UART_SetConfig+0x2d0>)
 8009490:	429a      	cmp	r2, r3
 8009492:	d104      	bne.n	800949e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009494:	f7fd fbb4 	bl	8006c00 <HAL_RCC_GetPCLK2Freq>
 8009498:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800949c:	e003      	b.n	80094a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800949e:	f7fd fb9b 	bl	8006bd8 <HAL_RCC_GetPCLK1Freq>
 80094a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094aa:	69db      	ldr	r3, [r3, #28]
 80094ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094b0:	f040 810c 	bne.w	80096cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094b8:	2200      	movs	r2, #0
 80094ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80094be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80094c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80094c6:	4622      	mov	r2, r4
 80094c8:	462b      	mov	r3, r5
 80094ca:	1891      	adds	r1, r2, r2
 80094cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80094ce:	415b      	adcs	r3, r3
 80094d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80094d6:	4621      	mov	r1, r4
 80094d8:	eb12 0801 	adds.w	r8, r2, r1
 80094dc:	4629      	mov	r1, r5
 80094de:	eb43 0901 	adc.w	r9, r3, r1
 80094e2:	f04f 0200 	mov.w	r2, #0
 80094e6:	f04f 0300 	mov.w	r3, #0
 80094ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80094ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80094f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80094f6:	4690      	mov	r8, r2
 80094f8:	4699      	mov	r9, r3
 80094fa:	4623      	mov	r3, r4
 80094fc:	eb18 0303 	adds.w	r3, r8, r3
 8009500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009504:	462b      	mov	r3, r5
 8009506:	eb49 0303 	adc.w	r3, r9, r3
 800950a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800950e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800951a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800951e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009522:	460b      	mov	r3, r1
 8009524:	18db      	adds	r3, r3, r3
 8009526:	653b      	str	r3, [r7, #80]	; 0x50
 8009528:	4613      	mov	r3, r2
 800952a:	eb42 0303 	adc.w	r3, r2, r3
 800952e:	657b      	str	r3, [r7, #84]	; 0x54
 8009530:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009534:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009538:	f7f7 f90e 	bl	8000758 <__aeabi_uldivmod>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4b61      	ldr	r3, [pc, #388]	; (80096c8 <UART_SetConfig+0x2d4>)
 8009542:	fba3 2302 	umull	r2, r3, r3, r2
 8009546:	095b      	lsrs	r3, r3, #5
 8009548:	011c      	lsls	r4, r3, #4
 800954a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800954e:	2200      	movs	r2, #0
 8009550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009554:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009558:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800955c:	4642      	mov	r2, r8
 800955e:	464b      	mov	r3, r9
 8009560:	1891      	adds	r1, r2, r2
 8009562:	64b9      	str	r1, [r7, #72]	; 0x48
 8009564:	415b      	adcs	r3, r3
 8009566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009568:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800956c:	4641      	mov	r1, r8
 800956e:	eb12 0a01 	adds.w	sl, r2, r1
 8009572:	4649      	mov	r1, r9
 8009574:	eb43 0b01 	adc.w	fp, r3, r1
 8009578:	f04f 0200 	mov.w	r2, #0
 800957c:	f04f 0300 	mov.w	r3, #0
 8009580:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009584:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009588:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800958c:	4692      	mov	sl, r2
 800958e:	469b      	mov	fp, r3
 8009590:	4643      	mov	r3, r8
 8009592:	eb1a 0303 	adds.w	r3, sl, r3
 8009596:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800959a:	464b      	mov	r3, r9
 800959c:	eb4b 0303 	adc.w	r3, fp, r3
 80095a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80095b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80095b8:	460b      	mov	r3, r1
 80095ba:	18db      	adds	r3, r3, r3
 80095bc:	643b      	str	r3, [r7, #64]	; 0x40
 80095be:	4613      	mov	r3, r2
 80095c0:	eb42 0303 	adc.w	r3, r2, r3
 80095c4:	647b      	str	r3, [r7, #68]	; 0x44
 80095c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80095ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80095ce:	f7f7 f8c3 	bl	8000758 <__aeabi_uldivmod>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4611      	mov	r1, r2
 80095d8:	4b3b      	ldr	r3, [pc, #236]	; (80096c8 <UART_SetConfig+0x2d4>)
 80095da:	fba3 2301 	umull	r2, r3, r3, r1
 80095de:	095b      	lsrs	r3, r3, #5
 80095e0:	2264      	movs	r2, #100	; 0x64
 80095e2:	fb02 f303 	mul.w	r3, r2, r3
 80095e6:	1acb      	subs	r3, r1, r3
 80095e8:	00db      	lsls	r3, r3, #3
 80095ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80095ee:	4b36      	ldr	r3, [pc, #216]	; (80096c8 <UART_SetConfig+0x2d4>)
 80095f0:	fba3 2302 	umull	r2, r3, r3, r2
 80095f4:	095b      	lsrs	r3, r3, #5
 80095f6:	005b      	lsls	r3, r3, #1
 80095f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80095fc:	441c      	add	r4, r3
 80095fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009602:	2200      	movs	r2, #0
 8009604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009608:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800960c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009610:	4642      	mov	r2, r8
 8009612:	464b      	mov	r3, r9
 8009614:	1891      	adds	r1, r2, r2
 8009616:	63b9      	str	r1, [r7, #56]	; 0x38
 8009618:	415b      	adcs	r3, r3
 800961a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800961c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009620:	4641      	mov	r1, r8
 8009622:	1851      	adds	r1, r2, r1
 8009624:	6339      	str	r1, [r7, #48]	; 0x30
 8009626:	4649      	mov	r1, r9
 8009628:	414b      	adcs	r3, r1
 800962a:	637b      	str	r3, [r7, #52]	; 0x34
 800962c:	f04f 0200 	mov.w	r2, #0
 8009630:	f04f 0300 	mov.w	r3, #0
 8009634:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009638:	4659      	mov	r1, fp
 800963a:	00cb      	lsls	r3, r1, #3
 800963c:	4651      	mov	r1, sl
 800963e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009642:	4651      	mov	r1, sl
 8009644:	00ca      	lsls	r2, r1, #3
 8009646:	4610      	mov	r0, r2
 8009648:	4619      	mov	r1, r3
 800964a:	4603      	mov	r3, r0
 800964c:	4642      	mov	r2, r8
 800964e:	189b      	adds	r3, r3, r2
 8009650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009654:	464b      	mov	r3, r9
 8009656:	460a      	mov	r2, r1
 8009658:	eb42 0303 	adc.w	r3, r2, r3
 800965c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800966c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009670:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009674:	460b      	mov	r3, r1
 8009676:	18db      	adds	r3, r3, r3
 8009678:	62bb      	str	r3, [r7, #40]	; 0x28
 800967a:	4613      	mov	r3, r2
 800967c:	eb42 0303 	adc.w	r3, r2, r3
 8009680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009682:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009686:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800968a:	f7f7 f865 	bl	8000758 <__aeabi_uldivmod>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	4b0d      	ldr	r3, [pc, #52]	; (80096c8 <UART_SetConfig+0x2d4>)
 8009694:	fba3 1302 	umull	r1, r3, r3, r2
 8009698:	095b      	lsrs	r3, r3, #5
 800969a:	2164      	movs	r1, #100	; 0x64
 800969c:	fb01 f303 	mul.w	r3, r1, r3
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	3332      	adds	r3, #50	; 0x32
 80096a6:	4a08      	ldr	r2, [pc, #32]	; (80096c8 <UART_SetConfig+0x2d4>)
 80096a8:	fba2 2303 	umull	r2, r3, r2, r3
 80096ac:	095b      	lsrs	r3, r3, #5
 80096ae:	f003 0207 	and.w	r2, r3, #7
 80096b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4422      	add	r2, r4
 80096ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80096bc:	e105      	b.n	80098ca <UART_SetConfig+0x4d6>
 80096be:	bf00      	nop
 80096c0:	40011000 	.word	0x40011000
 80096c4:	40011400 	.word	0x40011400
 80096c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80096cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096d0:	2200      	movs	r2, #0
 80096d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80096d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80096da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80096de:	4642      	mov	r2, r8
 80096e0:	464b      	mov	r3, r9
 80096e2:	1891      	adds	r1, r2, r2
 80096e4:	6239      	str	r1, [r7, #32]
 80096e6:	415b      	adcs	r3, r3
 80096e8:	627b      	str	r3, [r7, #36]	; 0x24
 80096ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80096ee:	4641      	mov	r1, r8
 80096f0:	1854      	adds	r4, r2, r1
 80096f2:	4649      	mov	r1, r9
 80096f4:	eb43 0501 	adc.w	r5, r3, r1
 80096f8:	f04f 0200 	mov.w	r2, #0
 80096fc:	f04f 0300 	mov.w	r3, #0
 8009700:	00eb      	lsls	r3, r5, #3
 8009702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009706:	00e2      	lsls	r2, r4, #3
 8009708:	4614      	mov	r4, r2
 800970a:	461d      	mov	r5, r3
 800970c:	4643      	mov	r3, r8
 800970e:	18e3      	adds	r3, r4, r3
 8009710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009714:	464b      	mov	r3, r9
 8009716:	eb45 0303 	adc.w	r3, r5, r3
 800971a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800971e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800972a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800972e:	f04f 0200 	mov.w	r2, #0
 8009732:	f04f 0300 	mov.w	r3, #0
 8009736:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800973a:	4629      	mov	r1, r5
 800973c:	008b      	lsls	r3, r1, #2
 800973e:	4621      	mov	r1, r4
 8009740:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009744:	4621      	mov	r1, r4
 8009746:	008a      	lsls	r2, r1, #2
 8009748:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800974c:	f7f7 f804 	bl	8000758 <__aeabi_uldivmod>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4b60      	ldr	r3, [pc, #384]	; (80098d8 <UART_SetConfig+0x4e4>)
 8009756:	fba3 2302 	umull	r2, r3, r3, r2
 800975a:	095b      	lsrs	r3, r3, #5
 800975c:	011c      	lsls	r4, r3, #4
 800975e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009762:	2200      	movs	r2, #0
 8009764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009768:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800976c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009770:	4642      	mov	r2, r8
 8009772:	464b      	mov	r3, r9
 8009774:	1891      	adds	r1, r2, r2
 8009776:	61b9      	str	r1, [r7, #24]
 8009778:	415b      	adcs	r3, r3
 800977a:	61fb      	str	r3, [r7, #28]
 800977c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009780:	4641      	mov	r1, r8
 8009782:	1851      	adds	r1, r2, r1
 8009784:	6139      	str	r1, [r7, #16]
 8009786:	4649      	mov	r1, r9
 8009788:	414b      	adcs	r3, r1
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	f04f 0200 	mov.w	r2, #0
 8009790:	f04f 0300 	mov.w	r3, #0
 8009794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009798:	4659      	mov	r1, fp
 800979a:	00cb      	lsls	r3, r1, #3
 800979c:	4651      	mov	r1, sl
 800979e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097a2:	4651      	mov	r1, sl
 80097a4:	00ca      	lsls	r2, r1, #3
 80097a6:	4610      	mov	r0, r2
 80097a8:	4619      	mov	r1, r3
 80097aa:	4603      	mov	r3, r0
 80097ac:	4642      	mov	r2, r8
 80097ae:	189b      	adds	r3, r3, r2
 80097b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097b4:	464b      	mov	r3, r9
 80097b6:	460a      	mov	r2, r1
 80097b8:	eb42 0303 	adc.w	r3, r2, r3
 80097bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80097ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80097cc:	f04f 0200 	mov.w	r2, #0
 80097d0:	f04f 0300 	mov.w	r3, #0
 80097d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80097d8:	4649      	mov	r1, r9
 80097da:	008b      	lsls	r3, r1, #2
 80097dc:	4641      	mov	r1, r8
 80097de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097e2:	4641      	mov	r1, r8
 80097e4:	008a      	lsls	r2, r1, #2
 80097e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80097ea:	f7f6 ffb5 	bl	8000758 <__aeabi_uldivmod>
 80097ee:	4602      	mov	r2, r0
 80097f0:	460b      	mov	r3, r1
 80097f2:	4b39      	ldr	r3, [pc, #228]	; (80098d8 <UART_SetConfig+0x4e4>)
 80097f4:	fba3 1302 	umull	r1, r3, r3, r2
 80097f8:	095b      	lsrs	r3, r3, #5
 80097fa:	2164      	movs	r1, #100	; 0x64
 80097fc:	fb01 f303 	mul.w	r3, r1, r3
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	011b      	lsls	r3, r3, #4
 8009804:	3332      	adds	r3, #50	; 0x32
 8009806:	4a34      	ldr	r2, [pc, #208]	; (80098d8 <UART_SetConfig+0x4e4>)
 8009808:	fba2 2303 	umull	r2, r3, r2, r3
 800980c:	095b      	lsrs	r3, r3, #5
 800980e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009812:	441c      	add	r4, r3
 8009814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009818:	2200      	movs	r2, #0
 800981a:	673b      	str	r3, [r7, #112]	; 0x70
 800981c:	677a      	str	r2, [r7, #116]	; 0x74
 800981e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009822:	4642      	mov	r2, r8
 8009824:	464b      	mov	r3, r9
 8009826:	1891      	adds	r1, r2, r2
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	415b      	adcs	r3, r3
 800982c:	60fb      	str	r3, [r7, #12]
 800982e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009832:	4641      	mov	r1, r8
 8009834:	1851      	adds	r1, r2, r1
 8009836:	6039      	str	r1, [r7, #0]
 8009838:	4649      	mov	r1, r9
 800983a:	414b      	adcs	r3, r1
 800983c:	607b      	str	r3, [r7, #4]
 800983e:	f04f 0200 	mov.w	r2, #0
 8009842:	f04f 0300 	mov.w	r3, #0
 8009846:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800984a:	4659      	mov	r1, fp
 800984c:	00cb      	lsls	r3, r1, #3
 800984e:	4651      	mov	r1, sl
 8009850:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009854:	4651      	mov	r1, sl
 8009856:	00ca      	lsls	r2, r1, #3
 8009858:	4610      	mov	r0, r2
 800985a:	4619      	mov	r1, r3
 800985c:	4603      	mov	r3, r0
 800985e:	4642      	mov	r2, r8
 8009860:	189b      	adds	r3, r3, r2
 8009862:	66bb      	str	r3, [r7, #104]	; 0x68
 8009864:	464b      	mov	r3, r9
 8009866:	460a      	mov	r2, r1
 8009868:	eb42 0303 	adc.w	r3, r2, r3
 800986c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800986e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	663b      	str	r3, [r7, #96]	; 0x60
 8009878:	667a      	str	r2, [r7, #100]	; 0x64
 800987a:	f04f 0200 	mov.w	r2, #0
 800987e:	f04f 0300 	mov.w	r3, #0
 8009882:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009886:	4649      	mov	r1, r9
 8009888:	008b      	lsls	r3, r1, #2
 800988a:	4641      	mov	r1, r8
 800988c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009890:	4641      	mov	r1, r8
 8009892:	008a      	lsls	r2, r1, #2
 8009894:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009898:	f7f6 ff5e 	bl	8000758 <__aeabi_uldivmod>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	4b0d      	ldr	r3, [pc, #52]	; (80098d8 <UART_SetConfig+0x4e4>)
 80098a2:	fba3 1302 	umull	r1, r3, r3, r2
 80098a6:	095b      	lsrs	r3, r3, #5
 80098a8:	2164      	movs	r1, #100	; 0x64
 80098aa:	fb01 f303 	mul.w	r3, r1, r3
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	011b      	lsls	r3, r3, #4
 80098b2:	3332      	adds	r3, #50	; 0x32
 80098b4:	4a08      	ldr	r2, [pc, #32]	; (80098d8 <UART_SetConfig+0x4e4>)
 80098b6:	fba2 2303 	umull	r2, r3, r2, r3
 80098ba:	095b      	lsrs	r3, r3, #5
 80098bc:	f003 020f 	and.w	r2, r3, #15
 80098c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4422      	add	r2, r4
 80098c8:	609a      	str	r2, [r3, #8]
}
 80098ca:	bf00      	nop
 80098cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80098d0:	46bd      	mov	sp, r7
 80098d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098d6:	bf00      	nop
 80098d8:	51eb851f 	.word	0x51eb851f

080098dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098dc:	b084      	sub	sp, #16
 80098de:	b580      	push	{r7, lr}
 80098e0:	b084      	sub	sp, #16
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	f107 001c 	add.w	r0, r7, #28
 80098ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d122      	bne.n	800993a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800991c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800991e:	2b01      	cmp	r3, #1
 8009920:	d105      	bne.n	800992e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f001 fbee 	bl	800b110 <USB_CoreReset>
 8009934:	4603      	mov	r3, r0
 8009936:	73fb      	strb	r3, [r7, #15]
 8009938:	e01a      	b.n	8009970 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f001 fbe2 	bl	800b110 <USB_CoreReset>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009952:	2b00      	cmp	r3, #0
 8009954:	d106      	bne.n	8009964 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	639a      	str	r2, [r3, #56]	; 0x38
 8009962:	e005      	b.n	8009970 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009968:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009972:	2b01      	cmp	r3, #1
 8009974:	d10b      	bne.n	800998e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f043 0206 	orr.w	r2, r3, #6
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	f043 0220 	orr.w	r2, r3, #32
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800998e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800999a:	b004      	add	sp, #16
 800999c:	4770      	bx	lr
	...

080099a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	4613      	mov	r3, r2
 80099ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d165      	bne.n	8009a80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	4a41      	ldr	r2, [pc, #260]	; (8009abc <USB_SetTurnaroundTime+0x11c>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d906      	bls.n	80099ca <USB_SetTurnaroundTime+0x2a>
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	4a40      	ldr	r2, [pc, #256]	; (8009ac0 <USB_SetTurnaroundTime+0x120>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d202      	bcs.n	80099ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80099c4:	230f      	movs	r3, #15
 80099c6:	617b      	str	r3, [r7, #20]
 80099c8:	e062      	b.n	8009a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	4a3c      	ldr	r2, [pc, #240]	; (8009ac0 <USB_SetTurnaroundTime+0x120>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d306      	bcc.n	80099e0 <USB_SetTurnaroundTime+0x40>
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	4a3b      	ldr	r2, [pc, #236]	; (8009ac4 <USB_SetTurnaroundTime+0x124>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d202      	bcs.n	80099e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80099da:	230e      	movs	r3, #14
 80099dc:	617b      	str	r3, [r7, #20]
 80099de:	e057      	b.n	8009a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	4a38      	ldr	r2, [pc, #224]	; (8009ac4 <USB_SetTurnaroundTime+0x124>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d306      	bcc.n	80099f6 <USB_SetTurnaroundTime+0x56>
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	4a37      	ldr	r2, [pc, #220]	; (8009ac8 <USB_SetTurnaroundTime+0x128>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d202      	bcs.n	80099f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80099f0:	230d      	movs	r3, #13
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	e04c      	b.n	8009a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	4a33      	ldr	r2, [pc, #204]	; (8009ac8 <USB_SetTurnaroundTime+0x128>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d306      	bcc.n	8009a0c <USB_SetTurnaroundTime+0x6c>
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	4a32      	ldr	r2, [pc, #200]	; (8009acc <USB_SetTurnaroundTime+0x12c>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d802      	bhi.n	8009a0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009a06:	230c      	movs	r3, #12
 8009a08:	617b      	str	r3, [r7, #20]
 8009a0a:	e041      	b.n	8009a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	4a2f      	ldr	r2, [pc, #188]	; (8009acc <USB_SetTurnaroundTime+0x12c>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d906      	bls.n	8009a22 <USB_SetTurnaroundTime+0x82>
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	4a2e      	ldr	r2, [pc, #184]	; (8009ad0 <USB_SetTurnaroundTime+0x130>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d802      	bhi.n	8009a22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009a1c:	230b      	movs	r3, #11
 8009a1e:	617b      	str	r3, [r7, #20]
 8009a20:	e036      	b.n	8009a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	4a2a      	ldr	r2, [pc, #168]	; (8009ad0 <USB_SetTurnaroundTime+0x130>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d906      	bls.n	8009a38 <USB_SetTurnaroundTime+0x98>
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	4a29      	ldr	r2, [pc, #164]	; (8009ad4 <USB_SetTurnaroundTime+0x134>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d802      	bhi.n	8009a38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009a32:	230a      	movs	r3, #10
 8009a34:	617b      	str	r3, [r7, #20]
 8009a36:	e02b      	b.n	8009a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	4a26      	ldr	r2, [pc, #152]	; (8009ad4 <USB_SetTurnaroundTime+0x134>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d906      	bls.n	8009a4e <USB_SetTurnaroundTime+0xae>
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	4a25      	ldr	r2, [pc, #148]	; (8009ad8 <USB_SetTurnaroundTime+0x138>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d202      	bcs.n	8009a4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009a48:	2309      	movs	r3, #9
 8009a4a:	617b      	str	r3, [r7, #20]
 8009a4c:	e020      	b.n	8009a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	4a21      	ldr	r2, [pc, #132]	; (8009ad8 <USB_SetTurnaroundTime+0x138>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d306      	bcc.n	8009a64 <USB_SetTurnaroundTime+0xc4>
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	4a20      	ldr	r2, [pc, #128]	; (8009adc <USB_SetTurnaroundTime+0x13c>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d802      	bhi.n	8009a64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009a5e:	2308      	movs	r3, #8
 8009a60:	617b      	str	r3, [r7, #20]
 8009a62:	e015      	b.n	8009a90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	4a1d      	ldr	r2, [pc, #116]	; (8009adc <USB_SetTurnaroundTime+0x13c>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d906      	bls.n	8009a7a <USB_SetTurnaroundTime+0xda>
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	4a1c      	ldr	r2, [pc, #112]	; (8009ae0 <USB_SetTurnaroundTime+0x140>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d202      	bcs.n	8009a7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009a74:	2307      	movs	r3, #7
 8009a76:	617b      	str	r3, [r7, #20]
 8009a78:	e00a      	b.n	8009a90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009a7a:	2306      	movs	r3, #6
 8009a7c:	617b      	str	r3, [r7, #20]
 8009a7e:	e007      	b.n	8009a90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d102      	bne.n	8009a8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009a86:	2309      	movs	r3, #9
 8009a88:	617b      	str	r3, [r7, #20]
 8009a8a:	e001      	b.n	8009a90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009a8c:	2309      	movs	r3, #9
 8009a8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	68da      	ldr	r2, [r3, #12]
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	029b      	lsls	r3, r3, #10
 8009aa4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	371c      	adds	r7, #28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	00d8acbf 	.word	0x00d8acbf
 8009ac0:	00e4e1c0 	.word	0x00e4e1c0
 8009ac4:	00f42400 	.word	0x00f42400
 8009ac8:	01067380 	.word	0x01067380
 8009acc:	011a499f 	.word	0x011a499f
 8009ad0:	01312cff 	.word	0x01312cff
 8009ad4:	014ca43f 	.word	0x014ca43f
 8009ad8:	016e3600 	.word	0x016e3600
 8009adc:	01a6ab1f 	.word	0x01a6ab1f
 8009ae0:	01e84800 	.word	0x01e84800

08009ae4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f043 0201 	orr.w	r2, r3, #1
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	370c      	adds	r7, #12
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b06:	b480      	push	{r7}
 8009b08:	b083      	sub	sp, #12
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f023 0201 	bic.w	r2, r3, #1
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	460b      	mov	r3, r1
 8009b32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009b44:	78fb      	ldrb	r3, [r7, #3]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d115      	bne.n	8009b76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b56:	2001      	movs	r0, #1
 8009b58:	f7f9 fc38 	bl	80033cc <HAL_Delay>
      ms++;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f001 fa45 	bl	800aff2 <USB_GetMode>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d01e      	beq.n	8009bac <USB_SetCurrentMode+0x84>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2b31      	cmp	r3, #49	; 0x31
 8009b72:	d9f0      	bls.n	8009b56 <USB_SetCurrentMode+0x2e>
 8009b74:	e01a      	b.n	8009bac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009b76:	78fb      	ldrb	r3, [r7, #3]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d115      	bne.n	8009ba8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b88:	2001      	movs	r0, #1
 8009b8a:	f7f9 fc1f 	bl	80033cc <HAL_Delay>
      ms++;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3301      	adds	r3, #1
 8009b92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f001 fa2c 	bl	800aff2 <USB_GetMode>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d005      	beq.n	8009bac <USB_SetCurrentMode+0x84>
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b31      	cmp	r3, #49	; 0x31
 8009ba4:	d9f0      	bls.n	8009b88 <USB_SetCurrentMode+0x60>
 8009ba6:	e001      	b.n	8009bac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e005      	b.n	8009bb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b32      	cmp	r3, #50	; 0x32
 8009bb0:	d101      	bne.n	8009bb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e000      	b.n	8009bb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009bc0:	b084      	sub	sp, #16
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b086      	sub	sp, #24
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009bda:	2300      	movs	r3, #0
 8009bdc:	613b      	str	r3, [r7, #16]
 8009bde:	e009      	b.n	8009bf4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	3340      	adds	r3, #64	; 0x40
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	2200      	movs	r2, #0
 8009bec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	613b      	str	r3, [r7, #16]
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	2b0e      	cmp	r3, #14
 8009bf8:	d9f2      	bls.n	8009be0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d11c      	bne.n	8009c3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c0e:	f043 0302 	orr.w	r3, r3, #2
 8009c12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	639a      	str	r2, [r3, #56]	; 0x38
 8009c38:	e00b      	b.n	8009c52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c58:	461a      	mov	r2, r3
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c64:	4619      	mov	r1, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	680b      	ldr	r3, [r1, #0]
 8009c70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d10c      	bne.n	8009c92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d104      	bne.n	8009c88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009c7e:	2100      	movs	r1, #0
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f965 	bl	8009f50 <USB_SetDevSpeed>
 8009c86:	e008      	b.n	8009c9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009c88:	2101      	movs	r1, #1
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f960 	bl	8009f50 <USB_SetDevSpeed>
 8009c90:	e003      	b.n	8009c9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009c92:	2103      	movs	r1, #3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f95b 	bl	8009f50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009c9a:	2110      	movs	r1, #16
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f8f3 	bl	8009e88 <USB_FlushTxFifo>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f91f 	bl	8009ef0 <USB_FlushRxFifo>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cce:	461a      	mov	r2, r3
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cda:	461a      	mov	r2, r3
 8009cdc:	2300      	movs	r3, #0
 8009cde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	613b      	str	r3, [r7, #16]
 8009ce4:	e043      	b.n	8009d6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cfc:	d118      	bne.n	8009d30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10a      	bne.n	8009d1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d10:	461a      	mov	r2, r3
 8009d12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d16:	6013      	str	r3, [r2, #0]
 8009d18:	e013      	b.n	8009d42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d26:	461a      	mov	r2, r3
 8009d28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009d2c:	6013      	str	r3, [r2, #0]
 8009d2e:	e008      	b.n	8009d42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	2300      	movs	r3, #0
 8009d40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	015a      	lsls	r2, r3, #5
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d4e:	461a      	mov	r2, r3
 8009d50:	2300      	movs	r3, #0
 8009d52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	015a      	lsls	r2, r3, #5
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d60:	461a      	mov	r2, r3
 8009d62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	613b      	str	r3, [r7, #16]
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d3b7      	bcc.n	8009ce6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d76:	2300      	movs	r3, #0
 8009d78:	613b      	str	r3, [r7, #16]
 8009d7a:	e043      	b.n	8009e04 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d92:	d118      	bne.n	8009dc6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10a      	bne.n	8009db0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	015a      	lsls	r2, r3, #5
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	4413      	add	r3, r2
 8009da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da6:	461a      	mov	r2, r3
 8009da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	e013      	b.n	8009dd8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	e008      	b.n	8009dd8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	015a      	lsls	r2, r3, #5
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	015a      	lsls	r2, r3, #5
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de4:	461a      	mov	r2, r3
 8009de6:	2300      	movs	r3, #0
 8009de8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	015a      	lsls	r2, r3, #5
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	4413      	add	r3, r2
 8009df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df6:	461a      	mov	r2, r3
 8009df8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009dfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	3301      	adds	r3, #1
 8009e02:	613b      	str	r3, [r7, #16]
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d3b7      	bcc.n	8009d7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009e2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d105      	bne.n	8009e40 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	f043 0210 	orr.w	r2, r3, #16
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	699a      	ldr	r2, [r3, #24]
 8009e44:	4b0f      	ldr	r3, [pc, #60]	; (8009e84 <USB_DevInit+0x2c4>)
 8009e46:	4313      	orrs	r3, r2
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d005      	beq.n	8009e5e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	f043 0208 	orr.w	r2, r3, #8
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d107      	bne.n	8009e74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e6c:	f043 0304 	orr.w	r3, r3, #4
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3718      	adds	r7, #24
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e80:	b004      	add	sp, #16
 8009e82:	4770      	bx	lr
 8009e84:	803c3800 	.word	0x803c3800

08009e88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4a13      	ldr	r2, [pc, #76]	; (8009eec <USB_FlushTxFifo+0x64>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d901      	bls.n	8009ea8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e01b      	b.n	8009ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	daf2      	bge.n	8009e96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	019b      	lsls	r3, r3, #6
 8009eb8:	f043 0220 	orr.w	r2, r3, #32
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	4a08      	ldr	r2, [pc, #32]	; (8009eec <USB_FlushTxFifo+0x64>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d901      	bls.n	8009ed2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e006      	b.n	8009ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	f003 0320 	and.w	r3, r3, #32
 8009eda:	2b20      	cmp	r3, #32
 8009edc:	d0f0      	beq.n	8009ec0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	00030d40 	.word	0x00030d40

08009ef0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	3301      	adds	r3, #1
 8009f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	4a11      	ldr	r2, [pc, #68]	; (8009f4c <USB_FlushRxFifo+0x5c>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d901      	bls.n	8009f0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	e018      	b.n	8009f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	daf2      	bge.n	8009efc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009f16:	2300      	movs	r3, #0
 8009f18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2210      	movs	r2, #16
 8009f1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	3301      	adds	r3, #1
 8009f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4a08      	ldr	r2, [pc, #32]	; (8009f4c <USB_FlushRxFifo+0x5c>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d901      	bls.n	8009f32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e006      	b.n	8009f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	f003 0310 	and.w	r3, r3, #16
 8009f3a:	2b10      	cmp	r3, #16
 8009f3c:	d0f0      	beq.n	8009f20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	00030d40 	.word	0x00030d40

08009f50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	78fb      	ldrb	r3, [r7, #3]
 8009f6a:	68f9      	ldr	r1, [r7, #12]
 8009f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f70:	4313      	orrs	r3, r2
 8009f72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b087      	sub	sp, #28
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	f003 0306 	and.w	r3, r3, #6
 8009f9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d102      	bne.n	8009fa8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	75fb      	strb	r3, [r7, #23]
 8009fa6:	e00a      	b.n	8009fbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d002      	beq.n	8009fb4 <USB_GetDevSpeed+0x32>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b06      	cmp	r3, #6
 8009fb2:	d102      	bne.n	8009fba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	75fb      	strb	r3, [r7, #23]
 8009fb8:	e001      	b.n	8009fbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009fba:	230f      	movs	r3, #15
 8009fbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	371c      	adds	r7, #28
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	785b      	ldrb	r3, [r3, #1]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d13a      	bne.n	800a05e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fee:	69da      	ldr	r2, [r3, #28]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	f003 030f 	and.w	r3, r3, #15
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	68f9      	ldr	r1, [r7, #12]
 800a002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a006:	4313      	orrs	r3, r2
 800a008:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	015a      	lsls	r2, r3, #5
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	4413      	add	r3, r2
 800a012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d155      	bne.n	800a0cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	015a      	lsls	r2, r3, #5
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4413      	add	r3, r2
 800a028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	791b      	ldrb	r3, [r3, #4]
 800a03a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a03c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	059b      	lsls	r3, r3, #22
 800a042:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a044:	4313      	orrs	r3, r2
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	0151      	lsls	r1, r2, #5
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	440a      	add	r2, r1
 800a04e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	e036      	b.n	800a0cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a064:	69da      	ldr	r2, [r3, #28]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	f003 030f 	and.w	r3, r3, #15
 800a06e:	2101      	movs	r1, #1
 800a070:	fa01 f303 	lsl.w	r3, r1, r3
 800a074:	041b      	lsls	r3, r3, #16
 800a076:	68f9      	ldr	r1, [r7, #12]
 800a078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a07c:	4313      	orrs	r3, r2
 800a07e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	015a      	lsls	r2, r3, #5
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4413      	add	r3, r2
 800a088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d11a      	bne.n	800a0cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	791b      	ldrb	r3, [r3, #4]
 800a0b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0b2:	430b      	orrs	r3, r1
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	0151      	lsls	r1, r2, #5
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	440a      	add	r2, r1
 800a0be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
	...

0800a0dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	785b      	ldrb	r3, [r3, #1]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d161      	bne.n	800a1bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	015a      	lsls	r2, r3, #5
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a10a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a10e:	d11f      	bne.n	800a150 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	4413      	add	r3, r2
 800a118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	0151      	lsls	r1, r2, #5
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	440a      	add	r2, r1
 800a126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a12a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a12e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	0151      	lsls	r1, r2, #5
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	440a      	add	r2, r1
 800a146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a14a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a14e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	f003 030f 	and.w	r3, r3, #15
 800a160:	2101      	movs	r1, #1
 800a162:	fa01 f303 	lsl.w	r3, r1, r3
 800a166:	b29b      	uxth	r3, r3
 800a168:	43db      	mvns	r3, r3
 800a16a:	68f9      	ldr	r1, [r7, #12]
 800a16c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a170:	4013      	ands	r3, r2
 800a172:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a17a:	69da      	ldr	r2, [r3, #28]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	f003 030f 	and.w	r3, r3, #15
 800a184:	2101      	movs	r1, #1
 800a186:	fa01 f303 	lsl.w	r3, r1, r3
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	43db      	mvns	r3, r3
 800a18e:	68f9      	ldr	r1, [r7, #12]
 800a190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a194:	4013      	ands	r3, r2
 800a196:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	0159      	lsls	r1, r3, #5
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	440b      	add	r3, r1
 800a1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	4b35      	ldr	r3, [pc, #212]	; (800a28c <USB_DeactivateEndpoint+0x1b0>)
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	600b      	str	r3, [r1, #0]
 800a1ba:	e060      	b.n	800a27e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1d2:	d11f      	bne.n	800a214 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	0151      	lsls	r1, r2, #5
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	440a      	add	r2, r1
 800a1ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a1f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	0151      	lsls	r1, r2, #5
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	440a      	add	r2, r1
 800a20a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a20e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a212:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a21a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	f003 030f 	and.w	r3, r3, #15
 800a224:	2101      	movs	r1, #1
 800a226:	fa01 f303 	lsl.w	r3, r1, r3
 800a22a:	041b      	lsls	r3, r3, #16
 800a22c:	43db      	mvns	r3, r3
 800a22e:	68f9      	ldr	r1, [r7, #12]
 800a230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a234:	4013      	ands	r3, r2
 800a236:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a23e:	69da      	ldr	r2, [r3, #28]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	f003 030f 	and.w	r3, r3, #15
 800a248:	2101      	movs	r1, #1
 800a24a:	fa01 f303 	lsl.w	r3, r1, r3
 800a24e:	041b      	lsls	r3, r3, #16
 800a250:	43db      	mvns	r3, r3
 800a252:	68f9      	ldr	r1, [r7, #12]
 800a254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a258:	4013      	ands	r3, r2
 800a25a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	0159      	lsls	r1, r3, #5
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	440b      	add	r3, r1
 800a272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a276:	4619      	mov	r1, r3
 800a278:	4b05      	ldr	r3, [pc, #20]	; (800a290 <USB_DeactivateEndpoint+0x1b4>)
 800a27a:	4013      	ands	r3, r2
 800a27c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	ec337800 	.word	0xec337800
 800a290:	eff37800 	.word	0xeff37800

0800a294 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08a      	sub	sp, #40	; 0x28
 800a298:	af02      	add	r7, sp, #8
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	785b      	ldrb	r3, [r3, #1]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	f040 815c 	bne.w	800a56e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d132      	bne.n	800a324 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	015a      	lsls	r2, r3, #5
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	69ba      	ldr	r2, [r7, #24]
 800a2ce:	0151      	lsls	r1, r2, #5
 800a2d0:	69fa      	ldr	r2, [r7, #28]
 800a2d2:	440a      	add	r2, r1
 800a2d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	015a      	lsls	r2, r3, #5
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	69ba      	ldr	r2, [r7, #24]
 800a2f2:	0151      	lsls	r1, r2, #5
 800a2f4:	69fa      	ldr	r2, [r7, #28]
 800a2f6:	440a      	add	r2, r1
 800a2f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a300:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	015a      	lsls	r2, r3, #5
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	4413      	add	r3, r2
 800a30a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	69ba      	ldr	r2, [r7, #24]
 800a312:	0151      	lsls	r1, r2, #5
 800a314:	69fa      	ldr	r2, [r7, #28]
 800a316:	440a      	add	r2, r1
 800a318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a31c:	0cdb      	lsrs	r3, r3, #19
 800a31e:	04db      	lsls	r3, r3, #19
 800a320:	6113      	str	r3, [r2, #16]
 800a322:	e074      	b.n	800a40e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	015a      	lsls	r2, r3, #5
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	4413      	add	r3, r2
 800a32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	69ba      	ldr	r2, [r7, #24]
 800a334:	0151      	lsls	r1, r2, #5
 800a336:	69fa      	ldr	r2, [r7, #28]
 800a338:	440a      	add	r2, r1
 800a33a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a33e:	0cdb      	lsrs	r3, r3, #19
 800a340:	04db      	lsls	r3, r3, #19
 800a342:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	015a      	lsls	r2, r3, #5
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	4413      	add	r3, r2
 800a34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	0151      	lsls	r1, r2, #5
 800a356:	69fa      	ldr	r2, [r7, #28]
 800a358:	440a      	add	r2, r1
 800a35a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a35e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a362:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a366:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	015a      	lsls	r2, r3, #5
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	4413      	add	r3, r2
 800a370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a374:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	6999      	ldr	r1, [r3, #24]
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	440b      	add	r3, r1
 800a380:	1e59      	subs	r1, r3, #1
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	fbb1 f3f3 	udiv	r3, r1, r3
 800a38a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a38c:	4b9d      	ldr	r3, [pc, #628]	; (800a604 <USB_EPStartXfer+0x370>)
 800a38e:	400b      	ands	r3, r1
 800a390:	69b9      	ldr	r1, [r7, #24]
 800a392:	0148      	lsls	r0, r1, #5
 800a394:	69f9      	ldr	r1, [r7, #28]
 800a396:	4401      	add	r1, r0
 800a398:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a39c:	4313      	orrs	r3, r2
 800a39e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	015a      	lsls	r2, r3, #5
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ac:	691a      	ldr	r2, [r3, #16]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3b6:	69b9      	ldr	r1, [r7, #24]
 800a3b8:	0148      	lsls	r0, r1, #5
 800a3ba:	69f9      	ldr	r1, [r7, #28]
 800a3bc:	4401      	add	r1, r0
 800a3be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	791b      	ldrb	r3, [r3, #4]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d11f      	bne.n	800a40e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	015a      	lsls	r2, r3, #5
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	69ba      	ldr	r2, [r7, #24]
 800a3de:	0151      	lsls	r1, r2, #5
 800a3e0:	69fa      	ldr	r2, [r7, #28]
 800a3e2:	440a      	add	r2, r1
 800a3e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a3ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	015a      	lsls	r2, r3, #5
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	69ba      	ldr	r2, [r7, #24]
 800a3fe:	0151      	lsls	r1, r2, #5
 800a400:	69fa      	ldr	r2, [r7, #28]
 800a402:	440a      	add	r2, r1
 800a404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a40c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a40e:	79fb      	ldrb	r3, [r7, #7]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d14b      	bne.n	800a4ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d009      	beq.n	800a430 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a428:	461a      	mov	r2, r3
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	695b      	ldr	r3, [r3, #20]
 800a42e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	791b      	ldrb	r3, [r3, #4]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d128      	bne.n	800a48a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a444:	2b00      	cmp	r3, #0
 800a446:	d110      	bne.n	800a46a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	0151      	lsls	r1, r2, #5
 800a45a:	69fa      	ldr	r2, [r7, #28]
 800a45c:	440a      	add	r2, r1
 800a45e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a466:	6013      	str	r3, [r2, #0]
 800a468:	e00f      	b.n	800a48a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	4413      	add	r3, r2
 800a472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	69ba      	ldr	r2, [r7, #24]
 800a47a:	0151      	lsls	r1, r2, #5
 800a47c:	69fa      	ldr	r2, [r7, #28]
 800a47e:	440a      	add	r2, r1
 800a480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a488:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	015a      	lsls	r2, r3, #5
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	4413      	add	r3, r2
 800a492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	69ba      	ldr	r2, [r7, #24]
 800a49a:	0151      	lsls	r1, r2, #5
 800a49c:	69fa      	ldr	r2, [r7, #28]
 800a49e:	440a      	add	r2, r1
 800a4a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4a8:	6013      	str	r3, [r2, #0]
 800a4aa:	e133      	b.n	800a714 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	69ba      	ldr	r2, [r7, #24]
 800a4bc:	0151      	lsls	r1, r2, #5
 800a4be:	69fa      	ldr	r2, [r7, #28]
 800a4c0:	440a      	add	r2, r1
 800a4c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	791b      	ldrb	r3, [r3, #4]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d015      	beq.n	800a500 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 811b 	beq.w	800a714 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	f003 030f 	and.w	r3, r3, #15
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4f4:	69f9      	ldr	r1, [r7, #28]
 800a4f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	634b      	str	r3, [r1, #52]	; 0x34
 800a4fe:	e109      	b.n	800a714 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d110      	bne.n	800a532 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	0151      	lsls	r1, r2, #5
 800a522:	69fa      	ldr	r2, [r7, #28]
 800a524:	440a      	add	r2, r1
 800a526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a52a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a52e:	6013      	str	r3, [r2, #0]
 800a530:	e00f      	b.n	800a552 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	69ba      	ldr	r2, [r7, #24]
 800a542:	0151      	lsls	r1, r2, #5
 800a544:	69fa      	ldr	r2, [r7, #28]
 800a546:	440a      	add	r2, r1
 800a548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a54c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a550:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	6919      	ldr	r1, [r3, #16]
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	781a      	ldrb	r2, [r3, #0]
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	b298      	uxth	r0, r3
 800a560:	79fb      	ldrb	r3, [r7, #7]
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	4603      	mov	r3, r0
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f000 fade 	bl	800ab28 <USB_WritePacket>
 800a56c:	e0d2      	b.n	800a714 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	015a      	lsls	r2, r3, #5
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	4413      	add	r3, r2
 800a576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	69ba      	ldr	r2, [r7, #24]
 800a57e:	0151      	lsls	r1, r2, #5
 800a580:	69fa      	ldr	r2, [r7, #28]
 800a582:	440a      	add	r2, r1
 800a584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a588:	0cdb      	lsrs	r3, r3, #19
 800a58a:	04db      	lsls	r3, r3, #19
 800a58c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	015a      	lsls	r2, r3, #5
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	4413      	add	r3, r2
 800a596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	69ba      	ldr	r2, [r7, #24]
 800a59e:	0151      	lsls	r1, r2, #5
 800a5a0:	69fa      	ldr	r2, [r7, #28]
 800a5a2:	440a      	add	r2, r1
 800a5a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d126      	bne.n	800a608 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c6:	691a      	ldr	r2, [r3, #16]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5d0:	69b9      	ldr	r1, [r7, #24]
 800a5d2:	0148      	lsls	r0, r1, #5
 800a5d4:	69f9      	ldr	r1, [r7, #28]
 800a5d6:	4401      	add	r1, r0
 800a5d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	69ba      	ldr	r2, [r7, #24]
 800a5f0:	0151      	lsls	r1, r2, #5
 800a5f2:	69fa      	ldr	r2, [r7, #28]
 800a5f4:	440a      	add	r2, r1
 800a5f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5fe:	6113      	str	r3, [r2, #16]
 800a600:	e03a      	b.n	800a678 <USB_EPStartXfer+0x3e4>
 800a602:	bf00      	nop
 800a604:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	699a      	ldr	r2, [r3, #24]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	4413      	add	r3, r2
 800a612:	1e5a      	subs	r2, r3, #1
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	8afa      	ldrh	r2, [r7, #22]
 800a624:	fb03 f202 	mul.w	r2, r3, r2
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	4413      	add	r3, r2
 800a634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a638:	691a      	ldr	r2, [r3, #16]
 800a63a:	8afb      	ldrh	r3, [r7, #22]
 800a63c:	04d9      	lsls	r1, r3, #19
 800a63e:	4b38      	ldr	r3, [pc, #224]	; (800a720 <USB_EPStartXfer+0x48c>)
 800a640:	400b      	ands	r3, r1
 800a642:	69b9      	ldr	r1, [r7, #24]
 800a644:	0148      	lsls	r0, r1, #5
 800a646:	69f9      	ldr	r1, [r7, #28]
 800a648:	4401      	add	r1, r0
 800a64a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a64e:	4313      	orrs	r3, r2
 800a650:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a65e:	691a      	ldr	r2, [r3, #16]
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	69db      	ldr	r3, [r3, #28]
 800a664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a668:	69b9      	ldr	r1, [r7, #24]
 800a66a:	0148      	lsls	r0, r1, #5
 800a66c:	69f9      	ldr	r1, [r7, #28]
 800a66e:	4401      	add	r1, r0
 800a670:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a674:	4313      	orrs	r3, r2
 800a676:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d10d      	bne.n	800a69a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d009      	beq.n	800a69a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	6919      	ldr	r1, [r3, #16]
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	015a      	lsls	r2, r3, #5
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	4413      	add	r3, r2
 800a692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a696:	460a      	mov	r2, r1
 800a698:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	791b      	ldrb	r3, [r3, #4]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d128      	bne.n	800a6f4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d110      	bne.n	800a6d4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	015a      	lsls	r2, r3, #5
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	69ba      	ldr	r2, [r7, #24]
 800a6c2:	0151      	lsls	r1, r2, #5
 800a6c4:	69fa      	ldr	r2, [r7, #28]
 800a6c6:	440a      	add	r2, r1
 800a6c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a6d0:	6013      	str	r3, [r2, #0]
 800a6d2:	e00f      	b.n	800a6f4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	015a      	lsls	r2, r3, #5
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	69ba      	ldr	r2, [r7, #24]
 800a6e4:	0151      	lsls	r1, r2, #5
 800a6e6:	69fa      	ldr	r2, [r7, #28]
 800a6e8:	440a      	add	r2, r1
 800a6ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	69ba      	ldr	r2, [r7, #24]
 800a704:	0151      	lsls	r1, r2, #5
 800a706:	69fa      	ldr	r2, [r7, #28]
 800a708:	440a      	add	r2, r1
 800a70a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a70e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a712:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3720      	adds	r7, #32
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	1ff80000 	.word	0x1ff80000

0800a724 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a724:	b480      	push	{r7}
 800a726:	b087      	sub	sp, #28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	4613      	mov	r3, r2
 800a730:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	785b      	ldrb	r3, [r3, #1]
 800a740:	2b01      	cmp	r3, #1
 800a742:	f040 80ce 	bne.w	800a8e2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d132      	bne.n	800a7b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	015a      	lsls	r2, r3, #5
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	4413      	add	r3, r2
 800a756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	693a      	ldr	r2, [r7, #16]
 800a75e:	0151      	lsls	r1, r2, #5
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	440a      	add	r2, r1
 800a764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a768:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a76c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a770:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	015a      	lsls	r2, r3, #5
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	4413      	add	r3, r2
 800a77a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	0151      	lsls	r1, r2, #5
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	440a      	add	r2, r1
 800a788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a78c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a790:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	0151      	lsls	r1, r2, #5
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	440a      	add	r2, r1
 800a7a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ac:	0cdb      	lsrs	r3, r3, #19
 800a7ae:	04db      	lsls	r3, r3, #19
 800a7b0:	6113      	str	r3, [r2, #16]
 800a7b2:	e04e      	b.n	800a852 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	015a      	lsls	r2, r3, #5
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	693a      	ldr	r2, [r7, #16]
 800a7c4:	0151      	lsls	r1, r2, #5
 800a7c6:	697a      	ldr	r2, [r7, #20]
 800a7c8:	440a      	add	r2, r1
 800a7ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ce:	0cdb      	lsrs	r3, r3, #19
 800a7d0:	04db      	lsls	r3, r3, #19
 800a7d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	0151      	lsls	r1, r2, #5
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	440a      	add	r2, r1
 800a7ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a7f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a7f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	699a      	ldr	r2, [r3, #24]
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	429a      	cmp	r2, r3
 800a802:	d903      	bls.n	800a80c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	68da      	ldr	r2, [r3, #12]
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	015a      	lsls	r2, r3, #5
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	4413      	add	r3, r2
 800a814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	693a      	ldr	r2, [r7, #16]
 800a81c:	0151      	lsls	r1, r2, #5
 800a81e:	697a      	ldr	r2, [r7, #20]
 800a820:	440a      	add	r2, r1
 800a822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a826:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a82a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	4413      	add	r3, r2
 800a834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a838:	691a      	ldr	r2, [r3, #16]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a842:	6939      	ldr	r1, [r7, #16]
 800a844:	0148      	lsls	r0, r1, #5
 800a846:	6979      	ldr	r1, [r7, #20]
 800a848:	4401      	add	r1, r0
 800a84a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a84e:	4313      	orrs	r3, r2
 800a850:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a852:	79fb      	ldrb	r3, [r7, #7]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d11e      	bne.n	800a896 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	695b      	ldr	r3, [r3, #20]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d009      	beq.n	800a874 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	015a      	lsls	r2, r3, #5
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	4413      	add	r3, r2
 800a868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a86c:	461a      	mov	r2, r3
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	015a      	lsls	r2, r3, #5
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	0151      	lsls	r1, r2, #5
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	440a      	add	r2, r1
 800a88a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a88e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a892:	6013      	str	r3, [r2, #0]
 800a894:	e097      	b.n	800a9c6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	015a      	lsls	r2, r3, #5
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	4413      	add	r3, r2
 800a89e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	0151      	lsls	r1, r2, #5
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	440a      	add	r2, r1
 800a8ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a8b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f000 8083 	beq.w	800a9c6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	f003 030f 	and.w	r3, r3, #15
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a8d6:	6979      	ldr	r1, [r7, #20]
 800a8d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	634b      	str	r3, [r1, #52]	; 0x34
 800a8e0:	e071      	b.n	800a9c6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	0151      	lsls	r1, r2, #5
 800a8f4:	697a      	ldr	r2, [r7, #20]
 800a8f6:	440a      	add	r2, r1
 800a8f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8fc:	0cdb      	lsrs	r3, r3, #19
 800a8fe:	04db      	lsls	r3, r3, #19
 800a900:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	015a      	lsls	r2, r3, #5
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	4413      	add	r3, r2
 800a90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	0151      	lsls	r1, r2, #5
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	440a      	add	r2, r1
 800a918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a91c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a920:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a924:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	68da      	ldr	r2, [r3, #12]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	68da      	ldr	r2, [r3, #12]
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	015a      	lsls	r2, r3, #5
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	4413      	add	r3, r2
 800a946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	693a      	ldr	r2, [r7, #16]
 800a94e:	0151      	lsls	r1, r2, #5
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	440a      	add	r2, r1
 800a954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a95c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	015a      	lsls	r2, r3, #5
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	4413      	add	r3, r2
 800a966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a96a:	691a      	ldr	r2, [r3, #16]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	69db      	ldr	r3, [r3, #28]
 800a970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a974:	6939      	ldr	r1, [r7, #16]
 800a976:	0148      	lsls	r0, r1, #5
 800a978:	6979      	ldr	r1, [r7, #20]
 800a97a:	4401      	add	r1, r0
 800a97c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a980:	4313      	orrs	r3, r2
 800a982:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a984:	79fb      	ldrb	r3, [r7, #7]
 800a986:	2b01      	cmp	r3, #1
 800a988:	d10d      	bne.n	800a9a6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d009      	beq.n	800a9a6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	6919      	ldr	r1, [r3, #16]
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a2:	460a      	mov	r2, r1
 800a9a4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	015a      	lsls	r2, r3, #5
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	0151      	lsls	r1, r2, #5
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	440a      	add	r2, r1
 800a9bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a9c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	371c      	adds	r7, #28
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	785b      	ldrb	r3, [r3, #1]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d14a      	bne.n	800aa88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	015a      	lsls	r2, r3, #5
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa0a:	f040 8086 	bne.w	800ab1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	7812      	ldrb	r2, [r2, #0]
 800aa22:	0151      	lsls	r1, r2, #5
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	440a      	add	r2, r1
 800aa28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aa30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	015a      	lsls	r2, r3, #5
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	7812      	ldrb	r2, [r2, #0]
 800aa46:	0151      	lsls	r1, r2, #5
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	440a      	add	r2, r1
 800aa4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f242 7210 	movw	r2, #10000	; 0x2710
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d902      	bls.n	800aa6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	75fb      	strb	r3, [r7, #23]
          break;
 800aa6a:	e056      	b.n	800ab1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa84:	d0e7      	beq.n	800aa56 <USB_EPStopXfer+0x82>
 800aa86:	e048      	b.n	800ab1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	015a      	lsls	r2, r3, #5
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	4413      	add	r3, r2
 800aa92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aaa0:	d13b      	bne.n	800ab1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	015a      	lsls	r2, r3, #5
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	4413      	add	r3, r2
 800aaac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	7812      	ldrb	r2, [r2, #0]
 800aab6:	0151      	lsls	r1, r2, #5
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	440a      	add	r2, r1
 800aabc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aac0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aac4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	7812      	ldrb	r2, [r2, #0]
 800aada:	0151      	lsls	r1, r2, #5
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	440a      	add	r2, r1
 800aae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aae8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3301      	adds	r3, #1
 800aaee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f242 7210 	movw	r2, #10000	; 0x2710
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d902      	bls.n	800ab00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	75fb      	strb	r3, [r7, #23]
          break;
 800aafe:	e00c      	b.n	800ab1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	015a      	lsls	r2, r3, #5
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	4413      	add	r3, r2
 800ab0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab18:	d0e7      	beq.n	800aaea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ab1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	371c      	adds	r7, #28
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b089      	sub	sp, #36	; 0x24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	4611      	mov	r1, r2
 800ab34:	461a      	mov	r2, r3
 800ab36:	460b      	mov	r3, r1
 800ab38:	71fb      	strb	r3, [r7, #7]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ab46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d123      	bne.n	800ab96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ab4e:	88bb      	ldrh	r3, [r7, #4]
 800ab50:	3303      	adds	r3, #3
 800ab52:	089b      	lsrs	r3, r3, #2
 800ab54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ab56:	2300      	movs	r3, #0
 800ab58:	61bb      	str	r3, [r7, #24]
 800ab5a:	e018      	b.n	800ab8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	031a      	lsls	r2, r3, #12
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	4413      	add	r3, r2
 800ab64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab68:	461a      	mov	r2, r3
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	3301      	adds	r3, #1
 800ab74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	3301      	adds	r3, #1
 800ab86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	61bb      	str	r3, [r7, #24]
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d3e2      	bcc.n	800ab5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3724      	adds	r7, #36	; 0x24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b08b      	sub	sp, #44	; 0x2c
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	4613      	mov	r3, r2
 800abb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800abba:	88fb      	ldrh	r3, [r7, #6]
 800abbc:	089b      	lsrs	r3, r3, #2
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800abc2:	88fb      	ldrh	r3, [r7, #6]
 800abc4:	f003 0303 	and.w	r3, r3, #3
 800abc8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800abca:	2300      	movs	r3, #0
 800abcc:	623b      	str	r3, [r7, #32]
 800abce:	e014      	b.n	800abfa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abda:	601a      	str	r2, [r3, #0]
    pDest++;
 800abdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abde:	3301      	adds	r3, #1
 800abe0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800abe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe4:	3301      	adds	r3, #1
 800abe6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	3301      	adds	r3, #1
 800abec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800abee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf0:	3301      	adds	r3, #1
 800abf2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800abf4:	6a3b      	ldr	r3, [r7, #32]
 800abf6:	3301      	adds	r3, #1
 800abf8:	623b      	str	r3, [r7, #32]
 800abfa:	6a3a      	ldr	r2, [r7, #32]
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d3e6      	bcc.n	800abd0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ac02:	8bfb      	ldrh	r3, [r7, #30]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01e      	beq.n	800ac46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac12:	461a      	mov	r2, r3
 800ac14:	f107 0310 	add.w	r3, r7, #16
 800ac18:	6812      	ldr	r2, [r2, #0]
 800ac1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	6a3b      	ldr	r3, [r7, #32]
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	00db      	lsls	r3, r3, #3
 800ac24:	fa22 f303 	lsr.w	r3, r2, r3
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	701a      	strb	r2, [r3, #0]
      i++;
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	3301      	adds	r3, #1
 800ac32:	623b      	str	r3, [r7, #32]
      pDest++;
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	3301      	adds	r3, #1
 800ac38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ac3a:	8bfb      	ldrh	r3, [r7, #30]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ac40:	8bfb      	ldrh	r3, [r7, #30]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1ea      	bne.n	800ac1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ac46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	372c      	adds	r7, #44	; 0x2c
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	785b      	ldrb	r3, [r3, #1]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d12c      	bne.n	800acca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	015a      	lsls	r2, r3, #5
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	4413      	add	r3, r2
 800ac78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	db12      	blt.n	800aca8 <USB_EPSetStall+0x54>
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00f      	beq.n	800aca8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	015a      	lsls	r2, r3, #5
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	4413      	add	r3, r2
 800ac90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68ba      	ldr	r2, [r7, #8]
 800ac98:	0151      	lsls	r1, r2, #5
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	440a      	add	r2, r1
 800ac9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aca2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aca6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	015a      	lsls	r2, r3, #5
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	4413      	add	r3, r2
 800acb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	0151      	lsls	r1, r2, #5
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	440a      	add	r2, r1
 800acbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	e02b      	b.n	800ad22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	015a      	lsls	r2, r3, #5
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	4413      	add	r3, r2
 800acd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	db12      	blt.n	800ad02 <USB_EPSetStall+0xae>
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00f      	beq.n	800ad02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	015a      	lsls	r2, r3, #5
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	4413      	add	r3, r2
 800acea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	0151      	lsls	r1, r2, #5
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	440a      	add	r2, r1
 800acf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	015a      	lsls	r2, r3, #5
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	0151      	lsls	r1, r2, #5
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	440a      	add	r2, r1
 800ad18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	785b      	ldrb	r3, [r3, #1]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d128      	bne.n	800ad9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	015a      	lsls	r2, r3, #5
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	0151      	lsls	r1, r2, #5
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	440a      	add	r2, r1
 800ad62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	791b      	ldrb	r3, [r3, #4]
 800ad70:	2b03      	cmp	r3, #3
 800ad72:	d003      	beq.n	800ad7c <USB_EPClearStall+0x4c>
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	791b      	ldrb	r3, [r3, #4]
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d138      	bne.n	800adee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	015a      	lsls	r2, r3, #5
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	0151      	lsls	r1, r2, #5
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	440a      	add	r2, r1
 800ad92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad9a:	6013      	str	r3, [r2, #0]
 800ad9c:	e027      	b.n	800adee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	0151      	lsls	r1, r2, #5
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	440a      	add	r2, r1
 800adb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800adbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	791b      	ldrb	r3, [r3, #4]
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d003      	beq.n	800adce <USB_EPClearStall+0x9e>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	791b      	ldrb	r3, [r3, #4]
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d10f      	bne.n	800adee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	4413      	add	r3, r2
 800add6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	0151      	lsls	r1, r2, #5
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	440a      	add	r2, r1
 800ade4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ade8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3714      	adds	r7, #20
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ae1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	78fb      	ldrb	r3, [r7, #3]
 800ae2a:	011b      	lsls	r3, r3, #4
 800ae2c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ae30:	68f9      	ldr	r1, [r7, #12]
 800ae32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae36:	4313      	orrs	r3, r2
 800ae38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae62:	f023 0303 	bic.w	r3, r3, #3
 800ae66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae76:	f023 0302 	bic.w	r3, r3, #2
 800ae7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b085      	sub	sp, #20
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aea4:	f023 0303 	bic.w	r3, r3, #3
 800aea8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aeb8:	f043 0302 	orr.w	r3, r3, #2
 800aebc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	4013      	ands	r3, r2
 800aee2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aee4:	68fb      	ldr	r3, [r7, #12]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b085      	sub	sp, #20
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af04:	699b      	ldr	r3, [r3, #24]
 800af06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af0e:	69db      	ldr	r3, [r3, #28]
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	4013      	ands	r3, r2
 800af14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	0c1b      	lsrs	r3, r3, #16
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3714      	adds	r7, #20
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr

0800af26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800af26:	b480      	push	{r7}
 800af28:	b085      	sub	sp, #20
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af42:	69db      	ldr	r3, [r3, #28]
 800af44:	68ba      	ldr	r2, [r7, #8]
 800af46:	4013      	ands	r3, r2
 800af48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	b29b      	uxth	r3, r3
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3714      	adds	r7, #20
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af5a:	b480      	push	{r7}
 800af5c:	b085      	sub	sp, #20
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	460b      	mov	r3, r1
 800af64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800af6a:	78fb      	ldrb	r3, [r7, #3]
 800af6c:	015a      	lsls	r2, r3, #5
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	4413      	add	r3, r2
 800af72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	4013      	ands	r3, r2
 800af86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af88:	68bb      	ldr	r3, [r7, #8]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af96:	b480      	push	{r7}
 800af98:	b087      	sub	sp, #28
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	460b      	mov	r3, r1
 800afa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afb8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800afba:	78fb      	ldrb	r3, [r7, #3]
 800afbc:	f003 030f 	and.w	r3, r3, #15
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	fa22 f303 	lsr.w	r3, r2, r3
 800afc6:	01db      	lsls	r3, r3, #7
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	693a      	ldr	r2, [r7, #16]
 800afcc:	4313      	orrs	r3, r2
 800afce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800afd0:	78fb      	ldrb	r3, [r7, #3]
 800afd2:	015a      	lsls	r2, r3, #5
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	4413      	add	r3, r2
 800afd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	4013      	ands	r3, r2
 800afe2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800afe4:	68bb      	ldr	r3, [r7, #8]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	371c      	adds	r7, #28
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aff2:	b480      	push	{r7}
 800aff4:	b083      	sub	sp, #12
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	f003 0301 	and.w	r3, r3, #1
}
 800b002:	4618      	mov	r0, r3
 800b004:	370c      	adds	r7, #12
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr

0800b00e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b00e:	b480      	push	{r7}
 800b010:	b085      	sub	sp, #20
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b028:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b02c:	f023 0307 	bic.w	r3, r3, #7
 800b030:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b044:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3714      	adds	r7, #20
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b054:	b480      	push	{r7}
 800b056:	b087      	sub	sp, #28
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	460b      	mov	r3, r1
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	333c      	adds	r3, #60	; 0x3c
 800b06a:	3304      	adds	r3, #4
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	4a26      	ldr	r2, [pc, #152]	; (800b10c <USB_EP0_OutStart+0xb8>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d90a      	bls.n	800b08e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b088:	d101      	bne.n	800b08e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	e037      	b.n	800b0fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b094:	461a      	mov	r2, r3
 800b096:	2300      	movs	r3, #0
 800b098:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	697a      	ldr	r2, [r7, #20]
 800b0a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	697a      	ldr	r2, [r7, #20]
 800b0b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0bc:	f043 0318 	orr.w	r3, r3, #24
 800b0c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b0d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b0d6:	7afb      	ldrb	r3, [r7, #11]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d10f      	bne.n	800b0fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b0fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	371c      	adds	r7, #28
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	4f54300a 	.word	0x4f54300a

0800b110 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b118:	2300      	movs	r3, #0
 800b11a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3301      	adds	r3, #1
 800b120:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	4a13      	ldr	r2, [pc, #76]	; (800b174 <USB_CoreReset+0x64>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d901      	bls.n	800b12e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b12a:	2303      	movs	r3, #3
 800b12c:	e01b      	b.n	800b166 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	2b00      	cmp	r3, #0
 800b134:	daf2      	bge.n	800b11c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b136:	2300      	movs	r3, #0
 800b138:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	f043 0201 	orr.w	r2, r3, #1
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	3301      	adds	r3, #1
 800b14a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4a09      	ldr	r2, [pc, #36]	; (800b174 <USB_CoreReset+0x64>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d901      	bls.n	800b158 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b154:	2303      	movs	r3, #3
 800b156:	e006      	b.n	800b166 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	f003 0301 	and.w	r3, r3, #1
 800b160:	2b01      	cmp	r3, #1
 800b162:	d0f0      	beq.n	800b146 <USB_CoreReset+0x36>

  return HAL_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	00030d40 	.word	0x00030d40

0800b178 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b184:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b188:	f005 fa10 	bl	80105ac <USBD_static_malloc>
 800b18c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d109      	bne.n	800b1a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	32b0      	adds	r2, #176	; 0xb0
 800b19e:	2100      	movs	r1, #0
 800b1a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b1a4:	2302      	movs	r3, #2
 800b1a6:	e0d4      	b.n	800b352 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b1a8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f00f ffb8 	bl	801b124 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	32b0      	adds	r2, #176	; 0xb0
 800b1be:	68f9      	ldr	r1, [r7, #12]
 800b1c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	32b0      	adds	r2, #176	; 0xb0
 800b1ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	7c1b      	ldrb	r3, [r3, #16]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d138      	bne.n	800b252 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b1e0:	4b5e      	ldr	r3, [pc, #376]	; (800b35c <USBD_CDC_Init+0x1e4>)
 800b1e2:	7819      	ldrb	r1, [r3, #0]
 800b1e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1e8:	2202      	movs	r2, #2
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f005 f8bb 	bl	8010366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b1f0:	4b5a      	ldr	r3, [pc, #360]	; (800b35c <USBD_CDC_Init+0x1e4>)
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	f003 020f 	and.w	r2, r3, #15
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	440b      	add	r3, r1
 800b204:	3324      	adds	r3, #36	; 0x24
 800b206:	2201      	movs	r2, #1
 800b208:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b20a:	4b55      	ldr	r3, [pc, #340]	; (800b360 <USBD_CDC_Init+0x1e8>)
 800b20c:	7819      	ldrb	r1, [r3, #0]
 800b20e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b212:	2202      	movs	r2, #2
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f005 f8a6 	bl	8010366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b21a:	4b51      	ldr	r3, [pc, #324]	; (800b360 <USBD_CDC_Init+0x1e8>)
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	f003 020f 	and.w	r2, r3, #15
 800b222:	6879      	ldr	r1, [r7, #4]
 800b224:	4613      	mov	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	440b      	add	r3, r1
 800b22e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b232:	2201      	movs	r2, #1
 800b234:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b236:	4b4b      	ldr	r3, [pc, #300]	; (800b364 <USBD_CDC_Init+0x1ec>)
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	f003 020f 	and.w	r2, r3, #15
 800b23e:	6879      	ldr	r1, [r7, #4]
 800b240:	4613      	mov	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	440b      	add	r3, r1
 800b24a:	3326      	adds	r3, #38	; 0x26
 800b24c:	2210      	movs	r2, #16
 800b24e:	801a      	strh	r2, [r3, #0]
 800b250:	e035      	b.n	800b2be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b252:	4b42      	ldr	r3, [pc, #264]	; (800b35c <USBD_CDC_Init+0x1e4>)
 800b254:	7819      	ldrb	r1, [r3, #0]
 800b256:	2340      	movs	r3, #64	; 0x40
 800b258:	2202      	movs	r2, #2
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f005 f883 	bl	8010366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b260:	4b3e      	ldr	r3, [pc, #248]	; (800b35c <USBD_CDC_Init+0x1e4>)
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	f003 020f 	and.w	r2, r3, #15
 800b268:	6879      	ldr	r1, [r7, #4]
 800b26a:	4613      	mov	r3, r2
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	4413      	add	r3, r2
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	440b      	add	r3, r1
 800b274:	3324      	adds	r3, #36	; 0x24
 800b276:	2201      	movs	r2, #1
 800b278:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b27a:	4b39      	ldr	r3, [pc, #228]	; (800b360 <USBD_CDC_Init+0x1e8>)
 800b27c:	7819      	ldrb	r1, [r3, #0]
 800b27e:	2340      	movs	r3, #64	; 0x40
 800b280:	2202      	movs	r2, #2
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f005 f86f 	bl	8010366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b288:	4b35      	ldr	r3, [pc, #212]	; (800b360 <USBD_CDC_Init+0x1e8>)
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	f003 020f 	and.w	r2, r3, #15
 800b290:	6879      	ldr	r1, [r7, #4]
 800b292:	4613      	mov	r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	4413      	add	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	440b      	add	r3, r1
 800b29c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b2a4:	4b2f      	ldr	r3, [pc, #188]	; (800b364 <USBD_CDC_Init+0x1ec>)
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	f003 020f 	and.w	r2, r3, #15
 800b2ac:	6879      	ldr	r1, [r7, #4]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	440b      	add	r3, r1
 800b2b8:	3326      	adds	r3, #38	; 0x26
 800b2ba:	2210      	movs	r2, #16
 800b2bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b2be:	4b29      	ldr	r3, [pc, #164]	; (800b364 <USBD_CDC_Init+0x1ec>)
 800b2c0:	7819      	ldrb	r1, [r3, #0]
 800b2c2:	2308      	movs	r3, #8
 800b2c4:	2203      	movs	r2, #3
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f005 f84d 	bl	8010366 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b2cc:	4b25      	ldr	r3, [pc, #148]	; (800b364 <USBD_CDC_Init+0x1ec>)
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	f003 020f 	and.w	r2, r3, #15
 800b2d4:	6879      	ldr	r1, [r7, #4]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	440b      	add	r3, r1
 800b2e0:	3324      	adds	r3, #36	; 0x24
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	33b0      	adds	r3, #176	; 0xb0
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4413      	add	r3, r2
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d101      	bne.n	800b320 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b31c:	2302      	movs	r3, #2
 800b31e:	e018      	b.n	800b352 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	7c1b      	ldrb	r3, [r3, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10a      	bne.n	800b33e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b328:	4b0d      	ldr	r3, [pc, #52]	; (800b360 <USBD_CDC_Init+0x1e8>)
 800b32a:	7819      	ldrb	r1, [r3, #0]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b332:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f005 f904 	bl	8010544 <USBD_LL_PrepareReceive>
 800b33c:	e008      	b.n	800b350 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b33e:	4b08      	ldr	r3, [pc, #32]	; (800b360 <USBD_CDC_Init+0x1e8>)
 800b340:	7819      	ldrb	r1, [r3, #0]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b348:	2340      	movs	r3, #64	; 0x40
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f005 f8fa 	bl	8010544 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	20000097 	.word	0x20000097
 800b360:	20000098 	.word	0x20000098
 800b364:	20000099 	.word	0x20000099

0800b368 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b374:	4b3a      	ldr	r3, [pc, #232]	; (800b460 <USBD_CDC_DeInit+0xf8>)
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f005 f819 	bl	80103b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b380:	4b37      	ldr	r3, [pc, #220]	; (800b460 <USBD_CDC_DeInit+0xf8>)
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	f003 020f 	and.w	r2, r3, #15
 800b388:	6879      	ldr	r1, [r7, #4]
 800b38a:	4613      	mov	r3, r2
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4413      	add	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	440b      	add	r3, r1
 800b394:	3324      	adds	r3, #36	; 0x24
 800b396:	2200      	movs	r2, #0
 800b398:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b39a:	4b32      	ldr	r3, [pc, #200]	; (800b464 <USBD_CDC_DeInit+0xfc>)
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f005 f806 	bl	80103b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b3a6:	4b2f      	ldr	r3, [pc, #188]	; (800b464 <USBD_CDC_DeInit+0xfc>)
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	f003 020f 	and.w	r2, r3, #15
 800b3ae:	6879      	ldr	r1, [r7, #4]
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	4413      	add	r3, r2
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	440b      	add	r3, r1
 800b3ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b3be:	2200      	movs	r2, #0
 800b3c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b3c2:	4b29      	ldr	r3, [pc, #164]	; (800b468 <USBD_CDC_DeInit+0x100>)
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f004 fff2 	bl	80103b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b3ce:	4b26      	ldr	r3, [pc, #152]	; (800b468 <USBD_CDC_DeInit+0x100>)
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	f003 020f 	and.w	r2, r3, #15
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	440b      	add	r3, r1
 800b3e2:	3324      	adds	r3, #36	; 0x24
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b3e8:	4b1f      	ldr	r3, [pc, #124]	; (800b468 <USBD_CDC_DeInit+0x100>)
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	f003 020f 	and.w	r2, r3, #15
 800b3f0:	6879      	ldr	r1, [r7, #4]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4413      	add	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	440b      	add	r3, r1
 800b3fc:	3326      	adds	r3, #38	; 0x26
 800b3fe:	2200      	movs	r2, #0
 800b400:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	32b0      	adds	r2, #176	; 0xb0
 800b40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d01f      	beq.n	800b454 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	33b0      	adds	r3, #176	; 0xb0
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4413      	add	r3, r2
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	32b0      	adds	r2, #176	; 0xb0
 800b432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b436:	4618      	mov	r0, r3
 800b438:	f005 f8c6 	bl	80105c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	32b0      	adds	r2, #176	; 0xb0
 800b446:	2100      	movs	r1, #0
 800b448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	20000097 	.word	0x20000097
 800b464:	20000098 	.word	0x20000098
 800b468:	20000099 	.word	0x20000099

0800b46c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	32b0      	adds	r2, #176	; 0xb0
 800b480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b484:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b486:	2300      	movs	r3, #0
 800b488:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b48a:	2300      	movs	r3, #0
 800b48c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b48e:	2300      	movs	r3, #0
 800b490:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d101      	bne.n	800b49c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b498:	2303      	movs	r3, #3
 800b49a:	e0bf      	b.n	800b61c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d050      	beq.n	800b54a <USBD_CDC_Setup+0xde>
 800b4a8:	2b20      	cmp	r3, #32
 800b4aa:	f040 80af 	bne.w	800b60c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	88db      	ldrh	r3, [r3, #6]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d03a      	beq.n	800b52c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	b25b      	sxtb	r3, r3
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	da1b      	bge.n	800b4f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	33b0      	adds	r3, #176	; 0xb0
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b4d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	88d2      	ldrh	r2, [r2, #6]
 800b4dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	88db      	ldrh	r3, [r3, #6]
 800b4e2:	2b07      	cmp	r3, #7
 800b4e4:	bf28      	it	cs
 800b4e6:	2307      	movcs	r3, #7
 800b4e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	89fa      	ldrh	r2, [r7, #14]
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f001 fd43 	bl	800cf7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b4f6:	e090      	b.n	800b61a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	785a      	ldrb	r2, [r3, #1]
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	88db      	ldrh	r3, [r3, #6]
 800b506:	2b3f      	cmp	r3, #63	; 0x3f
 800b508:	d803      	bhi.n	800b512 <USBD_CDC_Setup+0xa6>
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	88db      	ldrh	r3, [r3, #6]
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	e000      	b.n	800b514 <USBD_CDC_Setup+0xa8>
 800b512:	2240      	movs	r2, #64	; 0x40
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b51a:	6939      	ldr	r1, [r7, #16]
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b522:	461a      	mov	r2, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f001 fd55 	bl	800cfd4 <USBD_CtlPrepareRx>
      break;
 800b52a:	e076      	b.n	800b61a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	33b0      	adds	r3, #176	; 0xb0
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	4413      	add	r3, r2
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	683a      	ldr	r2, [r7, #0]
 800b540:	7850      	ldrb	r0, [r2, #1]
 800b542:	2200      	movs	r2, #0
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	4798      	blx	r3
      break;
 800b548:	e067      	b.n	800b61a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	785b      	ldrb	r3, [r3, #1]
 800b54e:	2b0b      	cmp	r3, #11
 800b550:	d851      	bhi.n	800b5f6 <USBD_CDC_Setup+0x18a>
 800b552:	a201      	add	r2, pc, #4	; (adr r2, 800b558 <USBD_CDC_Setup+0xec>)
 800b554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b558:	0800b589 	.word	0x0800b589
 800b55c:	0800b605 	.word	0x0800b605
 800b560:	0800b5f7 	.word	0x0800b5f7
 800b564:	0800b5f7 	.word	0x0800b5f7
 800b568:	0800b5f7 	.word	0x0800b5f7
 800b56c:	0800b5f7 	.word	0x0800b5f7
 800b570:	0800b5f7 	.word	0x0800b5f7
 800b574:	0800b5f7 	.word	0x0800b5f7
 800b578:	0800b5f7 	.word	0x0800b5f7
 800b57c:	0800b5f7 	.word	0x0800b5f7
 800b580:	0800b5b3 	.word	0x0800b5b3
 800b584:	0800b5dd 	.word	0x0800b5dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	2b03      	cmp	r3, #3
 800b592:	d107      	bne.n	800b5a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b594:	f107 030a 	add.w	r3, r7, #10
 800b598:	2202      	movs	r2, #2
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f001 fced 	bl	800cf7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5a2:	e032      	b.n	800b60a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f001 fc77 	bl	800ce9a <USBD_CtlError>
            ret = USBD_FAIL;
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	75fb      	strb	r3, [r7, #23]
          break;
 800b5b0:	e02b      	b.n	800b60a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b03      	cmp	r3, #3
 800b5bc:	d107      	bne.n	800b5ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b5be:	f107 030d 	add.w	r3, r7, #13
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f001 fcd8 	bl	800cf7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5cc:	e01d      	b.n	800b60a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b5ce:	6839      	ldr	r1, [r7, #0]
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f001 fc62 	bl	800ce9a <USBD_CtlError>
            ret = USBD_FAIL;
 800b5d6:	2303      	movs	r3, #3
 800b5d8:	75fb      	strb	r3, [r7, #23]
          break;
 800b5da:	e016      	b.n	800b60a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	2b03      	cmp	r3, #3
 800b5e6:	d00f      	beq.n	800b608 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 fc55 	bl	800ce9a <USBD_CtlError>
            ret = USBD_FAIL;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b5f4:	e008      	b.n	800b608 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f001 fc4e 	bl	800ce9a <USBD_CtlError>
          ret = USBD_FAIL;
 800b5fe:	2303      	movs	r3, #3
 800b600:	75fb      	strb	r3, [r7, #23]
          break;
 800b602:	e002      	b.n	800b60a <USBD_CDC_Setup+0x19e>
          break;
 800b604:	bf00      	nop
 800b606:	e008      	b.n	800b61a <USBD_CDC_Setup+0x1ae>
          break;
 800b608:	bf00      	nop
      }
      break;
 800b60a:	e006      	b.n	800b61a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f001 fc43 	bl	800ce9a <USBD_CtlError>
      ret = USBD_FAIL;
 800b614:	2303      	movs	r3, #3
 800b616:	75fb      	strb	r3, [r7, #23]
      break;
 800b618:	bf00      	nop
  }

  return (uint8_t)ret;
 800b61a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b636:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	32b0      	adds	r2, #176	; 0xb0
 800b642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d101      	bne.n	800b64e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e065      	b.n	800b71a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	32b0      	adds	r2, #176	; 0xb0
 800b658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b65c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b65e:	78fb      	ldrb	r3, [r7, #3]
 800b660:	f003 020f 	and.w	r2, r3, #15
 800b664:	6879      	ldr	r1, [r7, #4]
 800b666:	4613      	mov	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	440b      	add	r3, r1
 800b670:	3318      	adds	r3, #24
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d02f      	beq.n	800b6d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b678:	78fb      	ldrb	r3, [r7, #3]
 800b67a:	f003 020f 	and.w	r2, r3, #15
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	4613      	mov	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4413      	add	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	440b      	add	r3, r1
 800b68a:	3318      	adds	r3, #24
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	78fb      	ldrb	r3, [r7, #3]
 800b690:	f003 010f 	and.w	r1, r3, #15
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	460b      	mov	r3, r1
 800b698:	00db      	lsls	r3, r3, #3
 800b69a:	440b      	add	r3, r1
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4403      	add	r3, r0
 800b6a0:	3348      	adds	r3, #72	; 0x48
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b6a8:	fb01 f303 	mul.w	r3, r1, r3
 800b6ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d112      	bne.n	800b6d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b6b2:	78fb      	ldrb	r3, [r7, #3]
 800b6b4:	f003 020f 	and.w	r2, r3, #15
 800b6b8:	6879      	ldr	r1, [r7, #4]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	4413      	add	r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	440b      	add	r3, r1
 800b6c4:	3318      	adds	r3, #24
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b6ca:	78f9      	ldrb	r1, [r7, #3]
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f004 ff16 	bl	8010502 <USBD_LL_Transmit>
 800b6d6:	e01f      	b.n	800b718 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	33b0      	adds	r3, #176	; 0xb0
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4413      	add	r3, r2
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d010      	beq.n	800b718 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	33b0      	adds	r3, #176	; 0xb0
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	4413      	add	r3, r2
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b714:	78fa      	ldrb	r2, [r7, #3]
 800b716:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	460b      	mov	r3, r1
 800b72c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	32b0      	adds	r2, #176	; 0xb0
 800b738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b73c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	32b0      	adds	r2, #176	; 0xb0
 800b748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b750:	2303      	movs	r3, #3
 800b752:	e01a      	b.n	800b78a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b754:	78fb      	ldrb	r3, [r7, #3]
 800b756:	4619      	mov	r1, r3
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f004 ff14 	bl	8010586 <USBD_LL_GetRxDataSize>
 800b75e:	4602      	mov	r2, r0
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	33b0      	adds	r3, #176	; 0xb0
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b784:	4611      	mov	r1, r2
 800b786:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b084      	sub	sp, #16
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	32b0      	adds	r2, #176	; 0xb0
 800b7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	e025      	b.n	800b800 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	33b0      	adds	r3, #176	; 0xb0
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	4413      	add	r3, r2
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d01a      	beq.n	800b7fe <USBD_CDC_EP0_RxReady+0x6c>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b7ce:	2bff      	cmp	r3, #255	; 0xff
 800b7d0:	d015      	beq.n	800b7fe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	33b0      	adds	r3, #176	; 0xb0
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4413      	add	r3, r2
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b7ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b7f2:	b292      	uxth	r2, r2
 800b7f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	22ff      	movs	r2, #255	; 0xff
 800b7fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b810:	2182      	movs	r1, #130	; 0x82
 800b812:	4818      	ldr	r0, [pc, #96]	; (800b874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b814:	f000 fd09 	bl	800c22a <USBD_GetEpDesc>
 800b818:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b81a:	2101      	movs	r1, #1
 800b81c:	4815      	ldr	r0, [pc, #84]	; (800b874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b81e:	f000 fd04 	bl	800c22a <USBD_GetEpDesc>
 800b822:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b824:	2181      	movs	r1, #129	; 0x81
 800b826:	4813      	ldr	r0, [pc, #76]	; (800b874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b828:	f000 fcff 	bl	800c22a <USBD_GetEpDesc>
 800b82c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d002      	beq.n	800b83a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	2210      	movs	r2, #16
 800b838:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d006      	beq.n	800b84e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	2200      	movs	r2, #0
 800b844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b848:	711a      	strb	r2, [r3, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d006      	beq.n	800b862 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2200      	movs	r2, #0
 800b858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b85c:	711a      	strb	r2, [r3, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2243      	movs	r2, #67	; 0x43
 800b866:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b868:	4b02      	ldr	r3, [pc, #8]	; (800b874 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3718      	adds	r7, #24
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	20000054 	.word	0x20000054

0800b878 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b880:	2182      	movs	r1, #130	; 0x82
 800b882:	4818      	ldr	r0, [pc, #96]	; (800b8e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b884:	f000 fcd1 	bl	800c22a <USBD_GetEpDesc>
 800b888:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b88a:	2101      	movs	r1, #1
 800b88c:	4815      	ldr	r0, [pc, #84]	; (800b8e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b88e:	f000 fccc 	bl	800c22a <USBD_GetEpDesc>
 800b892:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b894:	2181      	movs	r1, #129	; 0x81
 800b896:	4813      	ldr	r0, [pc, #76]	; (800b8e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b898:	f000 fcc7 	bl	800c22a <USBD_GetEpDesc>
 800b89c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d002      	beq.n	800b8aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	2210      	movs	r2, #16
 800b8a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d006      	beq.n	800b8be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	711a      	strb	r2, [r3, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f042 0202 	orr.w	r2, r2, #2
 800b8bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d006      	beq.n	800b8d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	711a      	strb	r2, [r3, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f042 0202 	orr.w	r2, r2, #2
 800b8d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2243      	movs	r2, #67	; 0x43
 800b8d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b8d8:	4b02      	ldr	r3, [pc, #8]	; (800b8e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3718      	adds	r7, #24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	20000054 	.word	0x20000054

0800b8e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b086      	sub	sp, #24
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b8f0:	2182      	movs	r1, #130	; 0x82
 800b8f2:	4818      	ldr	r0, [pc, #96]	; (800b954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b8f4:	f000 fc99 	bl	800c22a <USBD_GetEpDesc>
 800b8f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b8fa:	2101      	movs	r1, #1
 800b8fc:	4815      	ldr	r0, [pc, #84]	; (800b954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b8fe:	f000 fc94 	bl	800c22a <USBD_GetEpDesc>
 800b902:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b904:	2181      	movs	r1, #129	; 0x81
 800b906:	4813      	ldr	r0, [pc, #76]	; (800b954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b908:	f000 fc8f 	bl	800c22a <USBD_GetEpDesc>
 800b90c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d002      	beq.n	800b91a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	2210      	movs	r2, #16
 800b918:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d006      	beq.n	800b92e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	2200      	movs	r2, #0
 800b924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b928:	711a      	strb	r2, [r3, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d006      	beq.n	800b942 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2200      	movs	r2, #0
 800b938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b93c:	711a      	strb	r2, [r3, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2243      	movs	r2, #67	; 0x43
 800b946:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b948:	4b02      	ldr	r3, [pc, #8]	; (800b954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3718      	adds	r7, #24
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	20000054 	.word	0x20000054

0800b958 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	220a      	movs	r2, #10
 800b964:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b966:	4b03      	ldr	r3, [pc, #12]	; (800b974 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b968:	4618      	mov	r0, r3
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	20000010 	.word	0x20000010

0800b978 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d101      	bne.n	800b98c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b988:	2303      	movs	r3, #3
 800b98a:	e009      	b.n	800b9a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	33b0      	adds	r3, #176	; 0xb0
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	32b0      	adds	r2, #176	; 0xb0
 800b9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	e008      	b.n	800b9e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	371c      	adds	r7, #28
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	32b0      	adds	r2, #176	; 0xb0
 800ba04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e004      	b.n	800ba1e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
	...

0800ba2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	32b0      	adds	r2, #176	; 0xb0
 800ba3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba42:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	32b0      	adds	r2, #176	; 0xb0
 800ba4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d101      	bne.n	800ba5a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ba56:	2303      	movs	r3, #3
 800ba58:	e018      	b.n	800ba8c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	7c1b      	ldrb	r3, [r3, #16]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d10a      	bne.n	800ba78 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba62:	4b0c      	ldr	r3, [pc, #48]	; (800ba94 <USBD_CDC_ReceivePacket+0x68>)
 800ba64:	7819      	ldrb	r1, [r3, #0]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f004 fd67 	bl	8010544 <USBD_LL_PrepareReceive>
 800ba76:	e008      	b.n	800ba8a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba78:	4b06      	ldr	r3, [pc, #24]	; (800ba94 <USBD_CDC_ReceivePacket+0x68>)
 800ba7a:	7819      	ldrb	r1, [r3, #0]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba82:	2340      	movs	r3, #64	; 0x40
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f004 fd5d 	bl	8010544 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	20000098 	.word	0x20000098

0800ba98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b086      	sub	sp, #24
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	4613      	mov	r3, r2
 800baa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d101      	bne.n	800bab0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800baac:	2303      	movs	r3, #3
 800baae:	e01f      	b.n	800baf0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d003      	beq.n	800bad6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2201      	movs	r2, #1
 800bada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	79fa      	ldrb	r2, [r7, #7]
 800bae2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f004 fbd7 	bl	8010298 <USBD_LL_Init>
 800baea:	4603      	mov	r3, r0
 800baec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800baee:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3718      	adds	r7, #24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb02:	2300      	movs	r3, #0
 800bb04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d101      	bne.n	800bb10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	e025      	b.n	800bb5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	32ae      	adds	r2, #174	; 0xae
 800bb22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00f      	beq.n	800bb4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	32ae      	adds	r2, #174	; 0xae
 800bb36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3c:	f107 020e 	add.w	r2, r7, #14
 800bb40:	4610      	mov	r0, r2
 800bb42:	4798      	blx	r3
 800bb44:	4602      	mov	r2, r0
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bb52:	1c5a      	adds	r2, r3, #1
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f004 fbdf 	bl	8010330 <USBD_LL_Start>
 800bb72:	4603      	mov	r3, r0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	370c      	adds	r7, #12
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr

0800bb92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b084      	sub	sp, #16
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d009      	beq.n	800bbc0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	78fa      	ldrb	r2, [r7, #3]
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	4798      	blx	r3
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b084      	sub	sp, #16
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	78fa      	ldrb	r2, [r7, #3]
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	4798      	blx	r3
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bbf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b084      	sub	sp, #16
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc0e:	6839      	ldr	r1, [r7, #0]
 800bc10:	4618      	mov	r0, r3
 800bc12:	f001 f908 	bl	800ce26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bc24:	461a      	mov	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc32:	f003 031f 	and.w	r3, r3, #31
 800bc36:	2b02      	cmp	r3, #2
 800bc38:	d01a      	beq.n	800bc70 <USBD_LL_SetupStage+0x72>
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d822      	bhi.n	800bc84 <USBD_LL_SetupStage+0x86>
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d002      	beq.n	800bc48 <USBD_LL_SetupStage+0x4a>
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d00a      	beq.n	800bc5c <USBD_LL_SetupStage+0x5e>
 800bc46:	e01d      	b.n	800bc84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc4e:	4619      	mov	r1, r3
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 fb5f 	bl	800c314 <USBD_StdDevReq>
 800bc56:	4603      	mov	r3, r0
 800bc58:	73fb      	strb	r3, [r7, #15]
      break;
 800bc5a:	e020      	b.n	800bc9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc62:	4619      	mov	r1, r3
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fbc7 	bl	800c3f8 <USBD_StdItfReq>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc6e:	e016      	b.n	800bc9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc76:	4619      	mov	r1, r3
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 fc29 	bl	800c4d0 <USBD_StdEPReq>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	73fb      	strb	r3, [r7, #15]
      break;
 800bc82:	e00c      	b.n	800bc9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	4619      	mov	r1, r3
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f004 fbac 	bl	80103f0 <USBD_LL_StallEP>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	73fb      	strb	r3, [r7, #15]
      break;
 800bc9c:	bf00      	nop
  }

  return ret;
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b086      	sub	sp, #24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bcba:	7afb      	ldrb	r3, [r7, #11]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d16e      	bne.n	800bd9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bcc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bcce:	2b03      	cmp	r3, #3
 800bcd0:	f040 8098 	bne.w	800be04 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	689a      	ldr	r2, [r3, #8]
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d913      	bls.n	800bd08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	689a      	ldr	r2, [r3, #8]
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	1ad2      	subs	r2, r2, r3
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	68da      	ldr	r2, [r3, #12]
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	bf28      	it	cs
 800bcfa:	4613      	movcs	r3, r2
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	6879      	ldr	r1, [r7, #4]
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f001 f984 	bl	800d00e <USBD_CtlContinueRx>
 800bd06:	e07d      	b.n	800be04 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bd0e:	f003 031f 	and.w	r3, r3, #31
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d014      	beq.n	800bd40 <USBD_LL_DataOutStage+0x98>
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d81d      	bhi.n	800bd56 <USBD_LL_DataOutStage+0xae>
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d002      	beq.n	800bd24 <USBD_LL_DataOutStage+0x7c>
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d003      	beq.n	800bd2a <USBD_LL_DataOutStage+0x82>
 800bd22:	e018      	b.n	800bd56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bd24:	2300      	movs	r3, #0
 800bd26:	75bb      	strb	r3, [r7, #22]
            break;
 800bd28:	e018      	b.n	800bd5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	4619      	mov	r1, r3
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f000 fa5e 	bl	800c1f6 <USBD_CoreFindIF>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	75bb      	strb	r3, [r7, #22]
            break;
 800bd3e:	e00d      	b.n	800bd5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	4619      	mov	r1, r3
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f000 fa60 	bl	800c210 <USBD_CoreFindEP>
 800bd50:	4603      	mov	r3, r0
 800bd52:	75bb      	strb	r3, [r7, #22]
            break;
 800bd54:	e002      	b.n	800bd5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bd56:	2300      	movs	r3, #0
 800bd58:	75bb      	strb	r3, [r7, #22]
            break;
 800bd5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bd5c:	7dbb      	ldrb	r3, [r7, #22]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d119      	bne.n	800bd96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b03      	cmp	r3, #3
 800bd6c:	d113      	bne.n	800bd96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bd6e:	7dba      	ldrb	r2, [r7, #22]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	32ae      	adds	r2, #174	; 0xae
 800bd74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00b      	beq.n	800bd96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bd7e:	7dba      	ldrb	r2, [r7, #22]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bd86:	7dba      	ldrb	r2, [r7, #22]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	32ae      	adds	r2, #174	; 0xae
 800bd8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f001 f94a 	bl	800d030 <USBD_CtlSendStatus>
 800bd9c:	e032      	b.n	800be04 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bd9e:	7afb      	ldrb	r3, [r7, #11]
 800bda0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	4619      	mov	r1, r3
 800bda8:	68f8      	ldr	r0, [r7, #12]
 800bdaa:	f000 fa31 	bl	800c210 <USBD_CoreFindEP>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdb2:	7dbb      	ldrb	r3, [r7, #22]
 800bdb4:	2bff      	cmp	r3, #255	; 0xff
 800bdb6:	d025      	beq.n	800be04 <USBD_LL_DataOutStage+0x15c>
 800bdb8:	7dbb      	ldrb	r3, [r7, #22]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d122      	bne.n	800be04 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	d117      	bne.n	800bdfa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bdca:	7dba      	ldrb	r2, [r7, #22]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	32ae      	adds	r2, #174	; 0xae
 800bdd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00f      	beq.n	800bdfa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bdda:	7dba      	ldrb	r2, [r7, #22]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bde2:	7dba      	ldrb	r2, [r7, #22]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	32ae      	adds	r2, #174	; 0xae
 800bde8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	7afa      	ldrb	r2, [r7, #11]
 800bdf0:	4611      	mov	r1, r2
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	4798      	blx	r3
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bdfa:	7dfb      	ldrb	r3, [r7, #23]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d001      	beq.n	800be04 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800be00:	7dfb      	ldrb	r3, [r7, #23]
 800be02:	e000      	b.n	800be06 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3718      	adds	r7, #24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b086      	sub	sp, #24
 800be12:	af00      	add	r7, sp, #0
 800be14:	60f8      	str	r0, [r7, #12]
 800be16:	460b      	mov	r3, r1
 800be18:	607a      	str	r2, [r7, #4]
 800be1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800be1c:	7afb      	ldrb	r3, [r7, #11]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d16f      	bne.n	800bf02 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	3314      	adds	r3, #20
 800be26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800be2e:	2b02      	cmp	r3, #2
 800be30:	d15a      	bne.n	800bee8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	689a      	ldr	r2, [r3, #8]
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d914      	bls.n	800be68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	689a      	ldr	r2, [r3, #8]
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	1ad2      	subs	r2, r2, r3
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	461a      	mov	r2, r3
 800be52:	6879      	ldr	r1, [r7, #4]
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	f001 f8ac 	bl	800cfb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be5a:	2300      	movs	r3, #0
 800be5c:	2200      	movs	r2, #0
 800be5e:	2100      	movs	r1, #0
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f004 fb6f 	bl	8010544 <USBD_LL_PrepareReceive>
 800be66:	e03f      	b.n	800bee8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	68da      	ldr	r2, [r3, #12]
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	429a      	cmp	r2, r3
 800be72:	d11c      	bne.n	800beae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d316      	bcc.n	800beae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	685a      	ldr	r2, [r3, #4]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d20f      	bcs.n	800beae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800be8e:	2200      	movs	r2, #0
 800be90:	2100      	movs	r1, #0
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f001 f88d 	bl	800cfb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bea0:	2300      	movs	r3, #0
 800bea2:	2200      	movs	r2, #0
 800bea4:	2100      	movs	r1, #0
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	f004 fb4c 	bl	8010544 <USBD_LL_PrepareReceive>
 800beac:	e01c      	b.n	800bee8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	d10f      	bne.n	800beda <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d009      	beq.n	800beda <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800beda:	2180      	movs	r1, #128	; 0x80
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f004 fa87 	bl	80103f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bee2:	68f8      	ldr	r0, [r7, #12]
 800bee4:	f001 f8b7 	bl	800d056 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d03a      	beq.n	800bf68 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f7ff fe42 	bl	800bb7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2200      	movs	r2, #0
 800befc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bf00:	e032      	b.n	800bf68 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bf02:	7afb      	ldrb	r3, [r7, #11]
 800bf04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f000 f97f 	bl	800c210 <USBD_CoreFindEP>
 800bf12:	4603      	mov	r3, r0
 800bf14:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf16:	7dfb      	ldrb	r3, [r7, #23]
 800bf18:	2bff      	cmp	r3, #255	; 0xff
 800bf1a:	d025      	beq.n	800bf68 <USBD_LL_DataInStage+0x15a>
 800bf1c:	7dfb      	ldrb	r3, [r7, #23]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d122      	bne.n	800bf68 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b03      	cmp	r3, #3
 800bf2c:	d11c      	bne.n	800bf68 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bf2e:	7dfa      	ldrb	r2, [r7, #23]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	32ae      	adds	r2, #174	; 0xae
 800bf34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf38:	695b      	ldr	r3, [r3, #20]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d014      	beq.n	800bf68 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bf3e:	7dfa      	ldrb	r2, [r7, #23]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bf46:	7dfa      	ldrb	r2, [r7, #23]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	32ae      	adds	r2, #174	; 0xae
 800bf4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf50:	695b      	ldr	r3, [r3, #20]
 800bf52:	7afa      	ldrb	r2, [r7, #11]
 800bf54:	4611      	mov	r1, r2
 800bf56:	68f8      	ldr	r0, [r7, #12]
 800bf58:	4798      	blx	r3
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bf5e:	7dbb      	ldrb	r3, [r7, #22]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d001      	beq.n	800bf68 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bf64:	7dbb      	ldrb	r3, [r7, #22]
 800bf66:	e000      	b.n	800bf6a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3718      	adds	r7, #24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b084      	sub	sp, #16
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d014      	beq.n	800bfd8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00e      	beq.n	800bfd8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	6852      	ldr	r2, [r2, #4]
 800bfc6:	b2d2      	uxtb	r2, r2
 800bfc8:	4611      	mov	r1, r2
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	4798      	blx	r3
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d001      	beq.n	800bfd8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bfd8:	2340      	movs	r3, #64	; 0x40
 800bfda:	2200      	movs	r2, #0
 800bfdc:	2100      	movs	r1, #0
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f004 f9c1 	bl	8010366 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2240      	movs	r2, #64	; 0x40
 800bff0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bff4:	2340      	movs	r3, #64	; 0x40
 800bff6:	2200      	movs	r2, #0
 800bff8:	2180      	movs	r1, #128	; 0x80
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f004 f9b3 	bl	8010366 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2240      	movs	r2, #64	; 0x40
 800c00a:	621a      	str	r2, [r3, #32]

  return ret;
 800c00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c016:	b480      	push	{r7}
 800c018:	b083      	sub	sp, #12
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
 800c01e:	460b      	mov	r3, r1
 800c020:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	78fa      	ldrb	r2, [r7, #3]
 800c026:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	370c      	adds	r7, #12
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr

0800c036 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c036:	b480      	push	{r7}
 800c038:	b083      	sub	sp, #12
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c044:	b2da      	uxtb	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2204      	movs	r2, #4
 800c050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	370c      	adds	r7, #12
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c062:	b480      	push	{r7}
 800c064:	b083      	sub	sp, #12
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c070:	b2db      	uxtb	r3, r3
 800c072:	2b04      	cmp	r3, #4
 800c074:	d106      	bne.n	800c084 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c07c:	b2da      	uxtb	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	370c      	adds	r7, #12
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr

0800c092 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b082      	sub	sp, #8
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	2b03      	cmp	r3, #3
 800c0a4:	d110      	bne.n	800c0c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00b      	beq.n	800c0c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0b6:	69db      	ldr	r3, [r3, #28]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d005      	beq.n	800c0c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0c2:	69db      	ldr	r3, [r3, #28]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b082      	sub	sp, #8
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
 800c0da:	460b      	mov	r3, r1
 800c0dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	32ae      	adds	r2, #174	; 0xae
 800c0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d101      	bne.n	800c0f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	e01c      	b.n	800c12e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	d115      	bne.n	800c12c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	32ae      	adds	r2, #174	; 0xae
 800c10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c10e:	6a1b      	ldr	r3, [r3, #32]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00b      	beq.n	800c12c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	32ae      	adds	r2, #174	; 0xae
 800c11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c122:	6a1b      	ldr	r3, [r3, #32]
 800c124:	78fa      	ldrb	r2, [r7, #3]
 800c126:	4611      	mov	r1, r2
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3708      	adds	r7, #8
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c136:	b580      	push	{r7, lr}
 800c138:	b082      	sub	sp, #8
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
 800c13e:	460b      	mov	r3, r1
 800c140:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	32ae      	adds	r2, #174	; 0xae
 800c14c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d101      	bne.n	800c158 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c154:	2303      	movs	r3, #3
 800c156:	e01c      	b.n	800c192 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2b03      	cmp	r3, #3
 800c162:	d115      	bne.n	800c190 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	32ae      	adds	r2, #174	; 0xae
 800c16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00b      	beq.n	800c190 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	32ae      	adds	r2, #174	; 0xae
 800c182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c188:	78fa      	ldrb	r2, [r7, #3]
 800c18a:	4611      	mov	r1, r2
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c19a:	b480      	push	{r7}
 800c19c:	b083      	sub	sp, #12
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00e      	beq.n	800c1ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	6852      	ldr	r2, [r2, #4]
 800c1da:	b2d2      	uxtb	r2, r2
 800c1dc:	4611      	mov	r1, r2
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	4798      	blx	r3
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b083      	sub	sp, #12
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	460b      	mov	r3, r1
 800c200:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c202:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c204:	4618      	mov	r0, r3
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	460b      	mov	r3, r1
 800c21a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c21c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c21e:	4618      	mov	r0, r3
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b086      	sub	sp, #24
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	460b      	mov	r3, r1
 800c234:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c23e:	2300      	movs	r3, #0
 800c240:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	885b      	ldrh	r3, [r3, #2]
 800c246:	b29a      	uxth	r2, r3
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	429a      	cmp	r2, r3
 800c250:	d920      	bls.n	800c294 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	b29b      	uxth	r3, r3
 800c258:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c25a:	e013      	b.n	800c284 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c25c:	f107 030a 	add.w	r3, r7, #10
 800c260:	4619      	mov	r1, r3
 800c262:	6978      	ldr	r0, [r7, #20]
 800c264:	f000 f81b 	bl	800c29e <USBD_GetNextDesc>
 800c268:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	785b      	ldrb	r3, [r3, #1]
 800c26e:	2b05      	cmp	r3, #5
 800c270:	d108      	bne.n	800c284 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	789b      	ldrb	r3, [r3, #2]
 800c27a:	78fa      	ldrb	r2, [r7, #3]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d008      	beq.n	800c292 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c280:	2300      	movs	r3, #0
 800c282:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	885b      	ldrh	r3, [r3, #2]
 800c288:	b29a      	uxth	r2, r3
 800c28a:	897b      	ldrh	r3, [r7, #10]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d8e5      	bhi.n	800c25c <USBD_GetEpDesc+0x32>
 800c290:	e000      	b.n	800c294 <USBD_GetEpDesc+0x6a>
          break;
 800c292:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c294:	693b      	ldr	r3, [r7, #16]
}
 800c296:	4618      	mov	r0, r3
 800c298:	3718      	adds	r7, #24
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c29e:	b480      	push	{r7}
 800c2a0:	b085      	sub	sp, #20
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	881a      	ldrh	r2, [r3, #0]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	4413      	add	r3, r2
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3714      	adds	r7, #20
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b087      	sub	sp, #28
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c2f6:	8a3b      	ldrh	r3, [r7, #16]
 800c2f8:	021b      	lsls	r3, r3, #8
 800c2fa:	b21a      	sxth	r2, r3
 800c2fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c300:	4313      	orrs	r3, r2
 800c302:	b21b      	sxth	r3, r3
 800c304:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c306:	89fb      	ldrh	r3, [r7, #14]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	371c      	adds	r7, #28
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c31e:	2300      	movs	r3, #0
 800c320:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c32a:	2b40      	cmp	r3, #64	; 0x40
 800c32c:	d005      	beq.n	800c33a <USBD_StdDevReq+0x26>
 800c32e:	2b40      	cmp	r3, #64	; 0x40
 800c330:	d857      	bhi.n	800c3e2 <USBD_StdDevReq+0xce>
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00f      	beq.n	800c356 <USBD_StdDevReq+0x42>
 800c336:	2b20      	cmp	r3, #32
 800c338:	d153      	bne.n	800c3e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	32ae      	adds	r2, #174	; 0xae
 800c344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	4798      	blx	r3
 800c350:	4603      	mov	r3, r0
 800c352:	73fb      	strb	r3, [r7, #15]
      break;
 800c354:	e04a      	b.n	800c3ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	785b      	ldrb	r3, [r3, #1]
 800c35a:	2b09      	cmp	r3, #9
 800c35c:	d83b      	bhi.n	800c3d6 <USBD_StdDevReq+0xc2>
 800c35e:	a201      	add	r2, pc, #4	; (adr r2, 800c364 <USBD_StdDevReq+0x50>)
 800c360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c364:	0800c3b9 	.word	0x0800c3b9
 800c368:	0800c3cd 	.word	0x0800c3cd
 800c36c:	0800c3d7 	.word	0x0800c3d7
 800c370:	0800c3c3 	.word	0x0800c3c3
 800c374:	0800c3d7 	.word	0x0800c3d7
 800c378:	0800c397 	.word	0x0800c397
 800c37c:	0800c38d 	.word	0x0800c38d
 800c380:	0800c3d7 	.word	0x0800c3d7
 800c384:	0800c3af 	.word	0x0800c3af
 800c388:	0800c3a1 	.word	0x0800c3a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c38c:	6839      	ldr	r1, [r7, #0]
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 fa3c 	bl	800c80c <USBD_GetDescriptor>
          break;
 800c394:	e024      	b.n	800c3e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fba1 	bl	800cae0 <USBD_SetAddress>
          break;
 800c39e:	e01f      	b.n	800c3e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fbe0 	bl	800cb68 <USBD_SetConfig>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	73fb      	strb	r3, [r7, #15]
          break;
 800c3ac:	e018      	b.n	800c3e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c3ae:	6839      	ldr	r1, [r7, #0]
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 fc83 	bl	800ccbc <USBD_GetConfig>
          break;
 800c3b6:	e013      	b.n	800c3e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c3b8:	6839      	ldr	r1, [r7, #0]
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 fcb4 	bl	800cd28 <USBD_GetStatus>
          break;
 800c3c0:	e00e      	b.n	800c3e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 fce3 	bl	800cd90 <USBD_SetFeature>
          break;
 800c3ca:	e009      	b.n	800c3e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c3cc:	6839      	ldr	r1, [r7, #0]
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 fd07 	bl	800cde2 <USBD_ClrFeature>
          break;
 800c3d4:	e004      	b.n	800c3e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c3d6:	6839      	ldr	r1, [r7, #0]
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fd5e 	bl	800ce9a <USBD_CtlError>
          break;
 800c3de:	bf00      	nop
      }
      break;
 800c3e0:	e004      	b.n	800c3ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c3e2:	6839      	ldr	r1, [r7, #0]
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 fd58 	bl	800ce9a <USBD_CtlError>
      break;
 800c3ea:	bf00      	nop
  }

  return ret;
 800c3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop

0800c3f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c402:	2300      	movs	r3, #0
 800c404:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c40e:	2b40      	cmp	r3, #64	; 0x40
 800c410:	d005      	beq.n	800c41e <USBD_StdItfReq+0x26>
 800c412:	2b40      	cmp	r3, #64	; 0x40
 800c414:	d852      	bhi.n	800c4bc <USBD_StdItfReq+0xc4>
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <USBD_StdItfReq+0x26>
 800c41a:	2b20      	cmp	r3, #32
 800c41c:	d14e      	bne.n	800c4bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c424:	b2db      	uxtb	r3, r3
 800c426:	3b01      	subs	r3, #1
 800c428:	2b02      	cmp	r3, #2
 800c42a:	d840      	bhi.n	800c4ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	889b      	ldrh	r3, [r3, #4]
 800c430:	b2db      	uxtb	r3, r3
 800c432:	2b01      	cmp	r3, #1
 800c434:	d836      	bhi.n	800c4a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	889b      	ldrh	r3, [r3, #4]
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	4619      	mov	r1, r3
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff fed9 	bl	800c1f6 <USBD_CoreFindIF>
 800c444:	4603      	mov	r3, r0
 800c446:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c448:	7bbb      	ldrb	r3, [r7, #14]
 800c44a:	2bff      	cmp	r3, #255	; 0xff
 800c44c:	d01d      	beq.n	800c48a <USBD_StdItfReq+0x92>
 800c44e:	7bbb      	ldrb	r3, [r7, #14]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d11a      	bne.n	800c48a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c454:	7bba      	ldrb	r2, [r7, #14]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	32ae      	adds	r2, #174	; 0xae
 800c45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00f      	beq.n	800c484 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c464:	7bba      	ldrb	r2, [r7, #14]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c46c:	7bba      	ldrb	r2, [r7, #14]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	32ae      	adds	r2, #174	; 0xae
 800c472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	6839      	ldr	r1, [r7, #0]
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	4798      	blx	r3
 800c47e:	4603      	mov	r3, r0
 800c480:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c482:	e004      	b.n	800c48e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c484:	2303      	movs	r3, #3
 800c486:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c488:	e001      	b.n	800c48e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c48a:	2303      	movs	r3, #3
 800c48c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	88db      	ldrh	r3, [r3, #6]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d110      	bne.n	800c4b8 <USBD_StdItfReq+0xc0>
 800c496:	7bfb      	ldrb	r3, [r7, #15]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d10d      	bne.n	800c4b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 fdc7 	bl	800d030 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c4a2:	e009      	b.n	800c4b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fcf7 	bl	800ce9a <USBD_CtlError>
          break;
 800c4ac:	e004      	b.n	800c4b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fcf2 	bl	800ce9a <USBD_CtlError>
          break;
 800c4b6:	e000      	b.n	800c4ba <USBD_StdItfReq+0xc2>
          break;
 800c4b8:	bf00      	nop
      }
      break;
 800c4ba:	e004      	b.n	800c4c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c4bc:	6839      	ldr	r1, [r7, #0]
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fceb 	bl	800ce9a <USBD_CtlError>
      break;
 800c4c4:	bf00      	nop
  }

  return ret;
 800c4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	889b      	ldrh	r3, [r3, #4]
 800c4e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4ec:	2b40      	cmp	r3, #64	; 0x40
 800c4ee:	d007      	beq.n	800c500 <USBD_StdEPReq+0x30>
 800c4f0:	2b40      	cmp	r3, #64	; 0x40
 800c4f2:	f200 817f 	bhi.w	800c7f4 <USBD_StdEPReq+0x324>
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d02a      	beq.n	800c550 <USBD_StdEPReq+0x80>
 800c4fa:	2b20      	cmp	r3, #32
 800c4fc:	f040 817a 	bne.w	800c7f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c500:	7bbb      	ldrb	r3, [r7, #14]
 800c502:	4619      	mov	r1, r3
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f7ff fe83 	bl	800c210 <USBD_CoreFindEP>
 800c50a:	4603      	mov	r3, r0
 800c50c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c50e:	7b7b      	ldrb	r3, [r7, #13]
 800c510:	2bff      	cmp	r3, #255	; 0xff
 800c512:	f000 8174 	beq.w	800c7fe <USBD_StdEPReq+0x32e>
 800c516:	7b7b      	ldrb	r3, [r7, #13]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f040 8170 	bne.w	800c7fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c51e:	7b7a      	ldrb	r2, [r7, #13]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c526:	7b7a      	ldrb	r2, [r7, #13]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	32ae      	adds	r2, #174	; 0xae
 800c52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	2b00      	cmp	r3, #0
 800c534:	f000 8163 	beq.w	800c7fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c538:	7b7a      	ldrb	r2, [r7, #13]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	32ae      	adds	r2, #174	; 0xae
 800c53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	4798      	blx	r3
 800c54a:	4603      	mov	r3, r0
 800c54c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c54e:	e156      	b.n	800c7fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	785b      	ldrb	r3, [r3, #1]
 800c554:	2b03      	cmp	r3, #3
 800c556:	d008      	beq.n	800c56a <USBD_StdEPReq+0x9a>
 800c558:	2b03      	cmp	r3, #3
 800c55a:	f300 8145 	bgt.w	800c7e8 <USBD_StdEPReq+0x318>
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f000 809b 	beq.w	800c69a <USBD_StdEPReq+0x1ca>
 800c564:	2b01      	cmp	r3, #1
 800c566:	d03c      	beq.n	800c5e2 <USBD_StdEPReq+0x112>
 800c568:	e13e      	b.n	800c7e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c570:	b2db      	uxtb	r3, r3
 800c572:	2b02      	cmp	r3, #2
 800c574:	d002      	beq.n	800c57c <USBD_StdEPReq+0xac>
 800c576:	2b03      	cmp	r3, #3
 800c578:	d016      	beq.n	800c5a8 <USBD_StdEPReq+0xd8>
 800c57a:	e02c      	b.n	800c5d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c57c:	7bbb      	ldrb	r3, [r7, #14]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00d      	beq.n	800c59e <USBD_StdEPReq+0xce>
 800c582:	7bbb      	ldrb	r3, [r7, #14]
 800c584:	2b80      	cmp	r3, #128	; 0x80
 800c586:	d00a      	beq.n	800c59e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c588:	7bbb      	ldrb	r3, [r7, #14]
 800c58a:	4619      	mov	r1, r3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f003 ff2f 	bl	80103f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c592:	2180      	movs	r1, #128	; 0x80
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f003 ff2b 	bl	80103f0 <USBD_LL_StallEP>
 800c59a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c59c:	e020      	b.n	800c5e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fc7a 	bl	800ce9a <USBD_CtlError>
              break;
 800c5a6:	e01b      	b.n	800c5e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	885b      	ldrh	r3, [r3, #2]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d10e      	bne.n	800c5ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c5b0:	7bbb      	ldrb	r3, [r7, #14]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00b      	beq.n	800c5ce <USBD_StdEPReq+0xfe>
 800c5b6:	7bbb      	ldrb	r3, [r7, #14]
 800c5b8:	2b80      	cmp	r3, #128	; 0x80
 800c5ba:	d008      	beq.n	800c5ce <USBD_StdEPReq+0xfe>
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	88db      	ldrh	r3, [r3, #6]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d104      	bne.n	800c5ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5c4:	7bbb      	ldrb	r3, [r7, #14]
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f003 ff11 	bl	80103f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fd2e 	bl	800d030 <USBD_CtlSendStatus>

              break;
 800c5d4:	e004      	b.n	800c5e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c5d6:	6839      	ldr	r1, [r7, #0]
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 fc5e 	bl	800ce9a <USBD_CtlError>
              break;
 800c5de:	bf00      	nop
          }
          break;
 800c5e0:	e107      	b.n	800c7f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	d002      	beq.n	800c5f4 <USBD_StdEPReq+0x124>
 800c5ee:	2b03      	cmp	r3, #3
 800c5f0:	d016      	beq.n	800c620 <USBD_StdEPReq+0x150>
 800c5f2:	e04b      	b.n	800c68c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5f4:	7bbb      	ldrb	r3, [r7, #14]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00d      	beq.n	800c616 <USBD_StdEPReq+0x146>
 800c5fa:	7bbb      	ldrb	r3, [r7, #14]
 800c5fc:	2b80      	cmp	r3, #128	; 0x80
 800c5fe:	d00a      	beq.n	800c616 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c600:	7bbb      	ldrb	r3, [r7, #14]
 800c602:	4619      	mov	r1, r3
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f003 fef3 	bl	80103f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c60a:	2180      	movs	r1, #128	; 0x80
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f003 feef 	bl	80103f0 <USBD_LL_StallEP>
 800c612:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c614:	e040      	b.n	800c698 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c616:	6839      	ldr	r1, [r7, #0]
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 fc3e 	bl	800ce9a <USBD_CtlError>
              break;
 800c61e:	e03b      	b.n	800c698 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	885b      	ldrh	r3, [r3, #2]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d136      	bne.n	800c696 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c628:	7bbb      	ldrb	r3, [r7, #14]
 800c62a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d004      	beq.n	800c63c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c632:	7bbb      	ldrb	r3, [r7, #14]
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f003 fef9 	bl	801042e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 fcf7 	bl	800d030 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c642:	7bbb      	ldrb	r3, [r7, #14]
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff fde2 	bl	800c210 <USBD_CoreFindEP>
 800c64c:	4603      	mov	r3, r0
 800c64e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c650:	7b7b      	ldrb	r3, [r7, #13]
 800c652:	2bff      	cmp	r3, #255	; 0xff
 800c654:	d01f      	beq.n	800c696 <USBD_StdEPReq+0x1c6>
 800c656:	7b7b      	ldrb	r3, [r7, #13]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d11c      	bne.n	800c696 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c65c:	7b7a      	ldrb	r2, [r7, #13]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c664:	7b7a      	ldrb	r2, [r7, #13]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	32ae      	adds	r2, #174	; 0xae
 800c66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66e:	689b      	ldr	r3, [r3, #8]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d010      	beq.n	800c696 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c674:	7b7a      	ldrb	r2, [r7, #13]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	32ae      	adds	r2, #174	; 0xae
 800c67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	6839      	ldr	r1, [r7, #0]
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	4798      	blx	r3
 800c686:	4603      	mov	r3, r0
 800c688:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c68a:	e004      	b.n	800c696 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c68c:	6839      	ldr	r1, [r7, #0]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fc03 	bl	800ce9a <USBD_CtlError>
              break;
 800c694:	e000      	b.n	800c698 <USBD_StdEPReq+0x1c8>
              break;
 800c696:	bf00      	nop
          }
          break;
 800c698:	e0ab      	b.n	800c7f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d002      	beq.n	800c6ac <USBD_StdEPReq+0x1dc>
 800c6a6:	2b03      	cmp	r3, #3
 800c6a8:	d032      	beq.n	800c710 <USBD_StdEPReq+0x240>
 800c6aa:	e097      	b.n	800c7dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6ac:	7bbb      	ldrb	r3, [r7, #14]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d007      	beq.n	800c6c2 <USBD_StdEPReq+0x1f2>
 800c6b2:	7bbb      	ldrb	r3, [r7, #14]
 800c6b4:	2b80      	cmp	r3, #128	; 0x80
 800c6b6:	d004      	beq.n	800c6c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c6b8:	6839      	ldr	r1, [r7, #0]
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 fbed 	bl	800ce9a <USBD_CtlError>
                break;
 800c6c0:	e091      	b.n	800c7e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	da0b      	bge.n	800c6e2 <USBD_StdEPReq+0x212>
 800c6ca:	7bbb      	ldrb	r3, [r7, #14]
 800c6cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4413      	add	r3, r2
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	3310      	adds	r3, #16
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	4413      	add	r3, r2
 800c6de:	3304      	adds	r3, #4
 800c6e0:	e00b      	b.n	800c6fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6e2:	7bbb      	ldrb	r3, [r7, #14]
 800c6e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4413      	add	r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	4413      	add	r3, r2
 800c6f8:	3304      	adds	r3, #4
 800c6fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	2200      	movs	r2, #0
 800c700:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	2202      	movs	r2, #2
 800c706:	4619      	mov	r1, r3
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f000 fc37 	bl	800cf7c <USBD_CtlSendData>
              break;
 800c70e:	e06a      	b.n	800c7e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c714:	2b00      	cmp	r3, #0
 800c716:	da11      	bge.n	800c73c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c718:	7bbb      	ldrb	r3, [r7, #14]
 800c71a:	f003 020f 	and.w	r2, r3, #15
 800c71e:	6879      	ldr	r1, [r7, #4]
 800c720:	4613      	mov	r3, r2
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	4413      	add	r3, r2
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	440b      	add	r3, r1
 800c72a:	3324      	adds	r3, #36	; 0x24
 800c72c:	881b      	ldrh	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d117      	bne.n	800c762 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c732:	6839      	ldr	r1, [r7, #0]
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 fbb0 	bl	800ce9a <USBD_CtlError>
                  break;
 800c73a:	e054      	b.n	800c7e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c73c:	7bbb      	ldrb	r3, [r7, #14]
 800c73e:	f003 020f 	and.w	r2, r3, #15
 800c742:	6879      	ldr	r1, [r7, #4]
 800c744:	4613      	mov	r3, r2
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4413      	add	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	440b      	add	r3, r1
 800c74e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c752:	881b      	ldrh	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d104      	bne.n	800c762 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c758:	6839      	ldr	r1, [r7, #0]
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 fb9d 	bl	800ce9a <USBD_CtlError>
                  break;
 800c760:	e041      	b.n	800c7e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c762:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c766:	2b00      	cmp	r3, #0
 800c768:	da0b      	bge.n	800c782 <USBD_StdEPReq+0x2b2>
 800c76a:	7bbb      	ldrb	r3, [r7, #14]
 800c76c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c770:	4613      	mov	r3, r2
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	4413      	add	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	3310      	adds	r3, #16
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	4413      	add	r3, r2
 800c77e:	3304      	adds	r3, #4
 800c780:	e00b      	b.n	800c79a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c782:	7bbb      	ldrb	r3, [r7, #14]
 800c784:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c788:	4613      	mov	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4413      	add	r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	4413      	add	r3, r2
 800c798:	3304      	adds	r3, #4
 800c79a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c79c:	7bbb      	ldrb	r3, [r7, #14]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d002      	beq.n	800c7a8 <USBD_StdEPReq+0x2d8>
 800c7a2:	7bbb      	ldrb	r3, [r7, #14]
 800c7a4:	2b80      	cmp	r3, #128	; 0x80
 800c7a6:	d103      	bne.n	800c7b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	e00e      	b.n	800c7ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c7b0:	7bbb      	ldrb	r3, [r7, #14]
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f003 fe59 	bl	801046c <USBD_LL_IsStallEP>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d003      	beq.n	800c7c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	601a      	str	r2, [r3, #0]
 800c7c6:	e002      	b.n	800c7ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	2202      	movs	r2, #2
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 fbd1 	bl	800cf7c <USBD_CtlSendData>
              break;
 800c7da:	e004      	b.n	800c7e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c7dc:	6839      	ldr	r1, [r7, #0]
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 fb5b 	bl	800ce9a <USBD_CtlError>
              break;
 800c7e4:	bf00      	nop
          }
          break;
 800c7e6:	e004      	b.n	800c7f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fb55 	bl	800ce9a <USBD_CtlError>
          break;
 800c7f0:	bf00      	nop
      }
      break;
 800c7f2:	e005      	b.n	800c800 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fb4f 	bl	800ce9a <USBD_CtlError>
      break;
 800c7fc:	e000      	b.n	800c800 <USBD_StdEPReq+0x330>
      break;
 800c7fe:	bf00      	nop
  }

  return ret;
 800c800:	7bfb      	ldrb	r3, [r7, #15]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
	...

0800c80c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c816:	2300      	movs	r3, #0
 800c818:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c81e:	2300      	movs	r3, #0
 800c820:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	885b      	ldrh	r3, [r3, #2]
 800c826:	0a1b      	lsrs	r3, r3, #8
 800c828:	b29b      	uxth	r3, r3
 800c82a:	3b01      	subs	r3, #1
 800c82c:	2b06      	cmp	r3, #6
 800c82e:	f200 8128 	bhi.w	800ca82 <USBD_GetDescriptor+0x276>
 800c832:	a201      	add	r2, pc, #4	; (adr r2, 800c838 <USBD_GetDescriptor+0x2c>)
 800c834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c838:	0800c855 	.word	0x0800c855
 800c83c:	0800c86d 	.word	0x0800c86d
 800c840:	0800c8ad 	.word	0x0800c8ad
 800c844:	0800ca83 	.word	0x0800ca83
 800c848:	0800ca83 	.word	0x0800ca83
 800c84c:	0800ca23 	.word	0x0800ca23
 800c850:	0800ca4f 	.word	0x0800ca4f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	7c12      	ldrb	r2, [r2, #16]
 800c860:	f107 0108 	add.w	r1, r7, #8
 800c864:	4610      	mov	r0, r2
 800c866:	4798      	blx	r3
 800c868:	60f8      	str	r0, [r7, #12]
      break;
 800c86a:	e112      	b.n	800ca92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	7c1b      	ldrb	r3, [r3, #16]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d10d      	bne.n	800c890 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c87c:	f107 0208 	add.w	r2, r7, #8
 800c880:	4610      	mov	r0, r2
 800c882:	4798      	blx	r3
 800c884:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	3301      	adds	r3, #1
 800c88a:	2202      	movs	r2, #2
 800c88c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c88e:	e100      	b.n	800ca92 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c898:	f107 0208 	add.w	r2, r7, #8
 800c89c:	4610      	mov	r0, r2
 800c89e:	4798      	blx	r3
 800c8a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	701a      	strb	r2, [r3, #0]
      break;
 800c8aa:	e0f2      	b.n	800ca92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	885b      	ldrh	r3, [r3, #2]
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	2b05      	cmp	r3, #5
 800c8b4:	f200 80ac 	bhi.w	800ca10 <USBD_GetDescriptor+0x204>
 800c8b8:	a201      	add	r2, pc, #4	; (adr r2, 800c8c0 <USBD_GetDescriptor+0xb4>)
 800c8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8be:	bf00      	nop
 800c8c0:	0800c8d9 	.word	0x0800c8d9
 800c8c4:	0800c90d 	.word	0x0800c90d
 800c8c8:	0800c941 	.word	0x0800c941
 800c8cc:	0800c975 	.word	0x0800c975
 800c8d0:	0800c9a9 	.word	0x0800c9a9
 800c8d4:	0800c9dd 	.word	0x0800c9dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d00b      	beq.n	800c8fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	7c12      	ldrb	r2, [r2, #16]
 800c8f0:	f107 0108 	add.w	r1, r7, #8
 800c8f4:	4610      	mov	r0, r2
 800c8f6:	4798      	blx	r3
 800c8f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8fa:	e091      	b.n	800ca20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8fc:	6839      	ldr	r1, [r7, #0]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 facb 	bl	800ce9a <USBD_CtlError>
            err++;
 800c904:	7afb      	ldrb	r3, [r7, #11]
 800c906:	3301      	adds	r3, #1
 800c908:	72fb      	strb	r3, [r7, #11]
          break;
 800c90a:	e089      	b.n	800ca20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00b      	beq.n	800c930 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	7c12      	ldrb	r2, [r2, #16]
 800c924:	f107 0108 	add.w	r1, r7, #8
 800c928:	4610      	mov	r0, r2
 800c92a:	4798      	blx	r3
 800c92c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c92e:	e077      	b.n	800ca20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c930:	6839      	ldr	r1, [r7, #0]
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 fab1 	bl	800ce9a <USBD_CtlError>
            err++;
 800c938:	7afb      	ldrb	r3, [r7, #11]
 800c93a:	3301      	adds	r3, #1
 800c93c:	72fb      	strb	r3, [r7, #11]
          break;
 800c93e:	e06f      	b.n	800ca20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00b      	beq.n	800c964 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	7c12      	ldrb	r2, [r2, #16]
 800c958:	f107 0108 	add.w	r1, r7, #8
 800c95c:	4610      	mov	r0, r2
 800c95e:	4798      	blx	r3
 800c960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c962:	e05d      	b.n	800ca20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c964:	6839      	ldr	r1, [r7, #0]
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 fa97 	bl	800ce9a <USBD_CtlError>
            err++;
 800c96c:	7afb      	ldrb	r3, [r7, #11]
 800c96e:	3301      	adds	r3, #1
 800c970:	72fb      	strb	r3, [r7, #11]
          break;
 800c972:	e055      	b.n	800ca20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00b      	beq.n	800c998 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	7c12      	ldrb	r2, [r2, #16]
 800c98c:	f107 0108 	add.w	r1, r7, #8
 800c990:	4610      	mov	r0, r2
 800c992:	4798      	blx	r3
 800c994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c996:	e043      	b.n	800ca20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c998:	6839      	ldr	r1, [r7, #0]
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fa7d 	bl	800ce9a <USBD_CtlError>
            err++;
 800c9a0:	7afb      	ldrb	r3, [r7, #11]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c9a6:	e03b      	b.n	800ca20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ae:	695b      	ldr	r3, [r3, #20]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d00b      	beq.n	800c9cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ba:	695b      	ldr	r3, [r3, #20]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	7c12      	ldrb	r2, [r2, #16]
 800c9c0:	f107 0108 	add.w	r1, r7, #8
 800c9c4:	4610      	mov	r0, r2
 800c9c6:	4798      	blx	r3
 800c9c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9ca:	e029      	b.n	800ca20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9cc:	6839      	ldr	r1, [r7, #0]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fa63 	bl	800ce9a <USBD_CtlError>
            err++;
 800c9d4:	7afb      	ldrb	r3, [r7, #11]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c9da:	e021      	b.n	800ca20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d00b      	beq.n	800ca00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	7c12      	ldrb	r2, [r2, #16]
 800c9f4:	f107 0108 	add.w	r1, r7, #8
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	4798      	blx	r3
 800c9fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9fe:	e00f      	b.n	800ca20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca00:	6839      	ldr	r1, [r7, #0]
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 fa49 	bl	800ce9a <USBD_CtlError>
            err++;
 800ca08:	7afb      	ldrb	r3, [r7, #11]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ca0e:	e007      	b.n	800ca20 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ca10:	6839      	ldr	r1, [r7, #0]
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 fa41 	bl	800ce9a <USBD_CtlError>
          err++;
 800ca18:	7afb      	ldrb	r3, [r7, #11]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ca1e:	bf00      	nop
      }
      break;
 800ca20:	e037      	b.n	800ca92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	7c1b      	ldrb	r3, [r3, #16]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d109      	bne.n	800ca3e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca32:	f107 0208 	add.w	r2, r7, #8
 800ca36:	4610      	mov	r0, r2
 800ca38:	4798      	blx	r3
 800ca3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca3c:	e029      	b.n	800ca92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ca3e:	6839      	ldr	r1, [r7, #0]
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 fa2a 	bl	800ce9a <USBD_CtlError>
        err++;
 800ca46:	7afb      	ldrb	r3, [r7, #11]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	72fb      	strb	r3, [r7, #11]
      break;
 800ca4c:	e021      	b.n	800ca92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	7c1b      	ldrb	r3, [r3, #16]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d10d      	bne.n	800ca72 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca5e:	f107 0208 	add.w	r2, r7, #8
 800ca62:	4610      	mov	r0, r2
 800ca64:	4798      	blx	r3
 800ca66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	2207      	movs	r2, #7
 800ca6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca70:	e00f      	b.n	800ca92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ca72:	6839      	ldr	r1, [r7, #0]
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 fa10 	bl	800ce9a <USBD_CtlError>
        err++;
 800ca7a:	7afb      	ldrb	r3, [r7, #11]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	72fb      	strb	r3, [r7, #11]
      break;
 800ca80:	e007      	b.n	800ca92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fa08 	bl	800ce9a <USBD_CtlError>
      err++;
 800ca8a:	7afb      	ldrb	r3, [r7, #11]
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	72fb      	strb	r3, [r7, #11]
      break;
 800ca90:	bf00      	nop
  }

  if (err != 0U)
 800ca92:	7afb      	ldrb	r3, [r7, #11]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d11e      	bne.n	800cad6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	88db      	ldrh	r3, [r3, #6]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d016      	beq.n	800cace <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800caa0:	893b      	ldrh	r3, [r7, #8]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00e      	beq.n	800cac4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	88da      	ldrh	r2, [r3, #6]
 800caaa:	893b      	ldrh	r3, [r7, #8]
 800caac:	4293      	cmp	r3, r2
 800caae:	bf28      	it	cs
 800cab0:	4613      	movcs	r3, r2
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cab6:	893b      	ldrh	r3, [r7, #8]
 800cab8:	461a      	mov	r2, r3
 800caba:	68f9      	ldr	r1, [r7, #12]
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 fa5d 	bl	800cf7c <USBD_CtlSendData>
 800cac2:	e009      	b.n	800cad8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cac4:	6839      	ldr	r1, [r7, #0]
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 f9e7 	bl	800ce9a <USBD_CtlError>
 800cacc:	e004      	b.n	800cad8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 faae 	bl	800d030 <USBD_CtlSendStatus>
 800cad4:	e000      	b.n	800cad8 <USBD_GetDescriptor+0x2cc>
    return;
 800cad6:	bf00      	nop
  }
}
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop

0800cae0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	889b      	ldrh	r3, [r3, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d131      	bne.n	800cb56 <USBD_SetAddress+0x76>
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	88db      	ldrh	r3, [r3, #6]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d12d      	bne.n	800cb56 <USBD_SetAddress+0x76>
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	885b      	ldrh	r3, [r3, #2]
 800cafe:	2b7f      	cmp	r3, #127	; 0x7f
 800cb00:	d829      	bhi.n	800cb56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	885b      	ldrh	r3, [r3, #2]
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	2b03      	cmp	r3, #3
 800cb18:	d104      	bne.n	800cb24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cb1a:	6839      	ldr	r1, [r7, #0]
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 f9bc 	bl	800ce9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb22:	e01d      	b.n	800cb60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	7bfa      	ldrb	r2, [r7, #15]
 800cb28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cb2c:	7bfb      	ldrb	r3, [r7, #15]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f003 fcc7 	bl	80104c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 fa7a 	bl	800d030 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cb3c:	7bfb      	ldrb	r3, [r7, #15]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d004      	beq.n	800cb4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2202      	movs	r2, #2
 800cb46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb4a:	e009      	b.n	800cb60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb54:	e004      	b.n	800cb60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cb56:	6839      	ldr	r1, [r7, #0]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 f99e 	bl	800ce9a <USBD_CtlError>
  }
}
 800cb5e:	bf00      	nop
 800cb60:	bf00      	nop
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	885b      	ldrh	r3, [r3, #2]
 800cb7a:	b2da      	uxtb	r2, r3
 800cb7c:	4b4e      	ldr	r3, [pc, #312]	; (800ccb8 <USBD_SetConfig+0x150>)
 800cb7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb80:	4b4d      	ldr	r3, [pc, #308]	; (800ccb8 <USBD_SetConfig+0x150>)
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d905      	bls.n	800cb94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cb88:	6839      	ldr	r1, [r7, #0]
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 f985 	bl	800ce9a <USBD_CtlError>
    return USBD_FAIL;
 800cb90:	2303      	movs	r3, #3
 800cb92:	e08c      	b.n	800ccae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d002      	beq.n	800cba6 <USBD_SetConfig+0x3e>
 800cba0:	2b03      	cmp	r3, #3
 800cba2:	d029      	beq.n	800cbf8 <USBD_SetConfig+0x90>
 800cba4:	e075      	b.n	800cc92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cba6:	4b44      	ldr	r3, [pc, #272]	; (800ccb8 <USBD_SetConfig+0x150>)
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d020      	beq.n	800cbf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cbae:	4b42      	ldr	r3, [pc, #264]	; (800ccb8 <USBD_SetConfig+0x150>)
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbb8:	4b3f      	ldr	r3, [pc, #252]	; (800ccb8 <USBD_SetConfig+0x150>)
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f7fe ffe7 	bl	800bb92 <USBD_SetClassConfig>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d008      	beq.n	800cbe0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f962 	bl	800ce9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2202      	movs	r2, #2
 800cbda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cbde:	e065      	b.n	800ccac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 fa25 	bl	800d030 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2203      	movs	r2, #3
 800cbea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cbee:	e05d      	b.n	800ccac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 fa1d 	bl	800d030 <USBD_CtlSendStatus>
      break;
 800cbf6:	e059      	b.n	800ccac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cbf8:	4b2f      	ldr	r3, [pc, #188]	; (800ccb8 <USBD_SetConfig+0x150>)
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d112      	bne.n	800cc26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2202      	movs	r2, #2
 800cc04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cc08:	4b2b      	ldr	r3, [pc, #172]	; (800ccb8 <USBD_SetConfig+0x150>)
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc12:	4b29      	ldr	r3, [pc, #164]	; (800ccb8 <USBD_SetConfig+0x150>)
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	4619      	mov	r1, r3
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7fe ffd6 	bl	800bbca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fa06 	bl	800d030 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc24:	e042      	b.n	800ccac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cc26:	4b24      	ldr	r3, [pc, #144]	; (800ccb8 <USBD_SetConfig+0x150>)
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d02a      	beq.n	800cc8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7fe ffc4 	bl	800bbca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cc42:	4b1d      	ldr	r3, [pc, #116]	; (800ccb8 <USBD_SetConfig+0x150>)
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	461a      	mov	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc4c:	4b1a      	ldr	r3, [pc, #104]	; (800ccb8 <USBD_SetConfig+0x150>)
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	4619      	mov	r1, r3
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7fe ff9d 	bl	800bb92 <USBD_SetClassConfig>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cc5c:	7bfb      	ldrb	r3, [r7, #15]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00f      	beq.n	800cc82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 f918 	bl	800ce9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	4619      	mov	r1, r3
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7fe ffa9 	bl	800bbca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2202      	movs	r2, #2
 800cc7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cc80:	e014      	b.n	800ccac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f9d4 	bl	800d030 <USBD_CtlSendStatus>
      break;
 800cc88:	e010      	b.n	800ccac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f9d0 	bl	800d030 <USBD_CtlSendStatus>
      break;
 800cc90:	e00c      	b.n	800ccac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cc92:	6839      	ldr	r1, [r7, #0]
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 f900 	bl	800ce9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc9a:	4b07      	ldr	r3, [pc, #28]	; (800ccb8 <USBD_SetConfig+0x150>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f7fe ff92 	bl	800bbca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cca6:	2303      	movs	r3, #3
 800cca8:	73fb      	strb	r3, [r7, #15]
      break;
 800ccaa:	bf00      	nop
  }

  return ret;
 800ccac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	2000b1dc 	.word	0x2000b1dc

0800ccbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	88db      	ldrh	r3, [r3, #6]
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d004      	beq.n	800ccd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ccce:	6839      	ldr	r1, [r7, #0]
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 f8e2 	bl	800ce9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ccd6:	e023      	b.n	800cd20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	dc02      	bgt.n	800ccea <USBD_GetConfig+0x2e>
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	dc03      	bgt.n	800ccf0 <USBD_GetConfig+0x34>
 800cce8:	e015      	b.n	800cd16 <USBD_GetConfig+0x5a>
 800ccea:	2b03      	cmp	r3, #3
 800ccec:	d00b      	beq.n	800cd06 <USBD_GetConfig+0x4a>
 800ccee:	e012      	b.n	800cd16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3308      	adds	r3, #8
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 f93c 	bl	800cf7c <USBD_CtlSendData>
        break;
 800cd04:	e00c      	b.n	800cd20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	3304      	adds	r3, #4
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 f934 	bl	800cf7c <USBD_CtlSendData>
        break;
 800cd14:	e004      	b.n	800cd20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cd16:	6839      	ldr	r1, [r7, #0]
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 f8be 	bl	800ce9a <USBD_CtlError>
        break;
 800cd1e:	bf00      	nop
}
 800cd20:	bf00      	nop
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	3b01      	subs	r3, #1
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	d81e      	bhi.n	800cd7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	88db      	ldrh	r3, [r3, #6]
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	d004      	beq.n	800cd52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cd48:	6839      	ldr	r1, [r7, #0]
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f8a5 	bl	800ce9a <USBD_CtlError>
        break;
 800cd50:	e01a      	b.n	800cd88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2201      	movs	r2, #1
 800cd56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d005      	beq.n	800cd6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	f043 0202 	orr.w	r2, r3, #2
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	330c      	adds	r3, #12
 800cd72:	2202      	movs	r2, #2
 800cd74:	4619      	mov	r1, r3
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 f900 	bl	800cf7c <USBD_CtlSendData>
      break;
 800cd7c:	e004      	b.n	800cd88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cd7e:	6839      	ldr	r1, [r7, #0]
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 f88a 	bl	800ce9a <USBD_CtlError>
      break;
 800cd86:	bf00      	nop
  }
}
 800cd88:	bf00      	nop
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	885b      	ldrh	r3, [r3, #2]
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d107      	bne.n	800cdb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2201      	movs	r2, #1
 800cda6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 f940 	bl	800d030 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cdb0:	e013      	b.n	800cdda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	885b      	ldrh	r3, [r3, #2]
 800cdb6:	2b02      	cmp	r3, #2
 800cdb8:	d10b      	bne.n	800cdd2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	889b      	ldrh	r3, [r3, #4]
 800cdbe:	0a1b      	lsrs	r3, r3, #8
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 f930 	bl	800d030 <USBD_CtlSendStatus>
}
 800cdd0:	e003      	b.n	800cdda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 f860 	bl	800ce9a <USBD_CtlError>
}
 800cdda:	bf00      	nop
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b082      	sub	sp, #8
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
 800cdea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d80b      	bhi.n	800ce12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	885b      	ldrh	r3, [r3, #2]
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d10c      	bne.n	800ce1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f910 	bl	800d030 <USBD_CtlSendStatus>
      }
      break;
 800ce10:	e004      	b.n	800ce1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ce12:	6839      	ldr	r1, [r7, #0]
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 f840 	bl	800ce9a <USBD_CtlError>
      break;
 800ce1a:	e000      	b.n	800ce1e <USBD_ClrFeature+0x3c>
      break;
 800ce1c:	bf00      	nop
  }
}
 800ce1e:	bf00      	nop
 800ce20:	3708      	adds	r7, #8
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b084      	sub	sp, #16
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	781a      	ldrb	r2, [r3, #0]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	781a      	ldrb	r2, [r3, #0]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ce50:	68f8      	ldr	r0, [r7, #12]
 800ce52:	f7ff fa41 	bl	800c2d8 <SWAPBYTE>
 800ce56:	4603      	mov	r3, r0
 800ce58:	461a      	mov	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	3301      	adds	r3, #1
 800ce62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	3301      	adds	r3, #1
 800ce68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f7ff fa34 	bl	800c2d8 <SWAPBYTE>
 800ce70:	4603      	mov	r3, r0
 800ce72:	461a      	mov	r2, r3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3301      	adds	r3, #1
 800ce82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff fa27 	bl	800c2d8 <SWAPBYTE>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	80da      	strh	r2, [r3, #6]
}
 800ce92:	bf00      	nop
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b082      	sub	sp, #8
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cea4:	2180      	movs	r1, #128	; 0x80
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f003 faa2 	bl	80103f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ceac:	2100      	movs	r1, #0
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f003 fa9e 	bl	80103f0 <USBD_LL_StallEP>
}
 800ceb4:	bf00      	nop
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cec8:	2300      	movs	r3, #0
 800ceca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d036      	beq.n	800cf40 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ced6:	6938      	ldr	r0, [r7, #16]
 800ced8:	f000 f836 	bl	800cf48 <USBD_GetLen>
 800cedc:	4603      	mov	r3, r0
 800cede:	3301      	adds	r3, #1
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	005b      	lsls	r3, r3, #1
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ceea:	7dfb      	ldrb	r3, [r7, #23]
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	4413      	add	r3, r2
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	7812      	ldrb	r2, [r2, #0]
 800cef4:	701a      	strb	r2, [r3, #0]
  idx++;
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
 800cef8:	3301      	adds	r3, #1
 800cefa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cefc:	7dfb      	ldrb	r3, [r7, #23]
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	4413      	add	r3, r2
 800cf02:	2203      	movs	r2, #3
 800cf04:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf06:	7dfb      	ldrb	r3, [r7, #23]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cf0c:	e013      	b.n	800cf36 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cf0e:	7dfb      	ldrb	r3, [r7, #23]
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	4413      	add	r3, r2
 800cf14:	693a      	ldr	r2, [r7, #16]
 800cf16:	7812      	ldrb	r2, [r2, #0]
 800cf18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	613b      	str	r3, [r7, #16]
    idx++;
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
 800cf22:	3301      	adds	r3, #1
 800cf24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cf26:	7dfb      	ldrb	r3, [r7, #23]
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	701a      	strb	r2, [r3, #0]
    idx++;
 800cf30:	7dfb      	ldrb	r3, [r7, #23]
 800cf32:	3301      	adds	r3, #1
 800cf34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1e7      	bne.n	800cf0e <USBD_GetString+0x52>
 800cf3e:	e000      	b.n	800cf42 <USBD_GetString+0x86>
    return;
 800cf40:	bf00      	nop
  }
}
 800cf42:	3718      	adds	r7, #24
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b085      	sub	sp, #20
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cf50:	2300      	movs	r3, #0
 800cf52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cf58:	e005      	b.n	800cf66 <USBD_GetLen+0x1e>
  {
    len++;
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	3301      	adds	r3, #1
 800cf64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d1f5      	bne.n	800cf5a <USBD_GetLen+0x12>
  }

  return len;
 800cf6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2202      	movs	r2, #2
 800cf8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	68ba      	ldr	r2, [r7, #8]
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f003 faad 	bl	8010502 <USBD_LL_Transmit>

  return USBD_OK;
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b084      	sub	sp, #16
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	60f8      	str	r0, [r7, #12]
 800cfba:	60b9      	str	r1, [r7, #8]
 800cfbc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	68ba      	ldr	r2, [r7, #8]
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f003 fa9c 	bl	8010502 <USBD_LL_Transmit>

  return USBD_OK;
 800cfca:	2300      	movs	r3, #0
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3710      	adds	r7, #16
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2203      	movs	r2, #3
 800cfe4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	2100      	movs	r1, #0
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f003 faa0 	bl	8010544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b084      	sub	sp, #16
 800d012:	af00      	add	r7, sp, #0
 800d014:	60f8      	str	r0, [r7, #12]
 800d016:	60b9      	str	r1, [r7, #8]
 800d018:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	68ba      	ldr	r2, [r7, #8]
 800d01e:	2100      	movs	r1, #0
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f003 fa8f 	bl	8010544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d026:	2300      	movs	r3, #0
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2204      	movs	r2, #4
 800d03c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d040:	2300      	movs	r3, #0
 800d042:	2200      	movs	r2, #0
 800d044:	2100      	movs	r1, #0
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f003 fa5b 	bl	8010502 <USBD_LL_Transmit>

  return USBD_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3708      	adds	r7, #8
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}

0800d056 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b082      	sub	sp, #8
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2205      	movs	r2, #5
 800d062:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d066:	2300      	movs	r3, #0
 800d068:	2200      	movs	r2, #0
 800d06a:	2100      	movs	r1, #0
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f003 fa69 	bl	8010544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	3708      	adds	r7, #8
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <__NVIC_SetPriority>:
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	4603      	mov	r3, r0
 800d084:	6039      	str	r1, [r7, #0]
 800d086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	db0a      	blt.n	800d0a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	b2da      	uxtb	r2, r3
 800d094:	490c      	ldr	r1, [pc, #48]	; (800d0c8 <__NVIC_SetPriority+0x4c>)
 800d096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d09a:	0112      	lsls	r2, r2, #4
 800d09c:	b2d2      	uxtb	r2, r2
 800d09e:	440b      	add	r3, r1
 800d0a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d0a4:	e00a      	b.n	800d0bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	b2da      	uxtb	r2, r3
 800d0aa:	4908      	ldr	r1, [pc, #32]	; (800d0cc <__NVIC_SetPriority+0x50>)
 800d0ac:	79fb      	ldrb	r3, [r7, #7]
 800d0ae:	f003 030f 	and.w	r3, r3, #15
 800d0b2:	3b04      	subs	r3, #4
 800d0b4:	0112      	lsls	r2, r2, #4
 800d0b6:	b2d2      	uxtb	r2, r2
 800d0b8:	440b      	add	r3, r1
 800d0ba:	761a      	strb	r2, [r3, #24]
}
 800d0bc:	bf00      	nop
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr
 800d0c8:	e000e100 	.word	0xe000e100
 800d0cc:	e000ed00 	.word	0xe000ed00

0800d0d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d0d4:	4b05      	ldr	r3, [pc, #20]	; (800d0ec <SysTick_Handler+0x1c>)
 800d0d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d0d8:	f001 fd4e 	bl	800eb78 <xTaskGetSchedulerState>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d001      	beq.n	800d0e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d0e2:	f002 fb39 	bl	800f758 <xPortSysTickHandler>
  }
}
 800d0e6:	bf00      	nop
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	e000e010 	.word	0xe000e010

0800d0f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	f06f 0004 	mvn.w	r0, #4
 800d0fa:	f7ff ffbf 	bl	800d07c <__NVIC_SetPriority>
#endif
}
 800d0fe:	bf00      	nop
 800d100:	bd80      	pop	{r7, pc}
	...

0800d104 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d10a:	f3ef 8305 	mrs	r3, IPSR
 800d10e:	603b      	str	r3, [r7, #0]
  return(result);
 800d110:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d112:	2b00      	cmp	r3, #0
 800d114:	d003      	beq.n	800d11e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d116:	f06f 0305 	mvn.w	r3, #5
 800d11a:	607b      	str	r3, [r7, #4]
 800d11c:	e00c      	b.n	800d138 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d11e:	4b0a      	ldr	r3, [pc, #40]	; (800d148 <osKernelInitialize+0x44>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d105      	bne.n	800d132 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d126:	4b08      	ldr	r3, [pc, #32]	; (800d148 <osKernelInitialize+0x44>)
 800d128:	2201      	movs	r2, #1
 800d12a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d12c:	2300      	movs	r3, #0
 800d12e:	607b      	str	r3, [r7, #4]
 800d130:	e002      	b.n	800d138 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d136:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d138:	687b      	ldr	r3, [r7, #4]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	370c      	adds	r7, #12
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop
 800d148:	2000b1e0 	.word	0x2000b1e0

0800d14c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d152:	f3ef 8305 	mrs	r3, IPSR
 800d156:	603b      	str	r3, [r7, #0]
  return(result);
 800d158:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d003      	beq.n	800d166 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d15e:	f06f 0305 	mvn.w	r3, #5
 800d162:	607b      	str	r3, [r7, #4]
 800d164:	e010      	b.n	800d188 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d166:	4b0b      	ldr	r3, [pc, #44]	; (800d194 <osKernelStart+0x48>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d109      	bne.n	800d182 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d16e:	f7ff ffbf 	bl	800d0f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d172:	4b08      	ldr	r3, [pc, #32]	; (800d194 <osKernelStart+0x48>)
 800d174:	2202      	movs	r2, #2
 800d176:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d178:	f001 f87c 	bl	800e274 <vTaskStartScheduler>
      stat = osOK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	607b      	str	r3, [r7, #4]
 800d180:	e002      	b.n	800d188 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d186:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d188:	687b      	ldr	r3, [r7, #4]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	2000b1e0 	.word	0x2000b1e0

0800d198 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d198:	b580      	push	{r7, lr}
 800d19a:	b08e      	sub	sp, #56	; 0x38
 800d19c:	af04      	add	r7, sp, #16
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1a8:	f3ef 8305 	mrs	r3, IPSR
 800d1ac:	617b      	str	r3, [r7, #20]
  return(result);
 800d1ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d17e      	bne.n	800d2b2 <osThreadNew+0x11a>
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d07b      	beq.n	800d2b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d1ba:	2380      	movs	r3, #128	; 0x80
 800d1bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d1be:	2318      	movs	r3, #24
 800d1c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d1c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d045      	beq.n	800d25e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d002      	beq.n	800d1e0 <osThreadNew+0x48>
        name = attr->name;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	699b      	ldr	r3, [r3, #24]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d002      	beq.n	800d1ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	699b      	ldr	r3, [r3, #24]
 800d1ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d008      	beq.n	800d206 <osThreadNew+0x6e>
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	2b38      	cmp	r3, #56	; 0x38
 800d1f8:	d805      	bhi.n	800d206 <osThreadNew+0x6e>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	f003 0301 	and.w	r3, r3, #1
 800d202:	2b00      	cmp	r3, #0
 800d204:	d001      	beq.n	800d20a <osThreadNew+0x72>
        return (NULL);
 800d206:	2300      	movs	r3, #0
 800d208:	e054      	b.n	800d2b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	695b      	ldr	r3, [r3, #20]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d003      	beq.n	800d21a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	695b      	ldr	r3, [r3, #20]
 800d216:	089b      	lsrs	r3, r3, #2
 800d218:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	689b      	ldr	r3, [r3, #8]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00e      	beq.n	800d240 <osThreadNew+0xa8>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	2bbb      	cmp	r3, #187	; 0xbb
 800d228:	d90a      	bls.n	800d240 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d006      	beq.n	800d240 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	695b      	ldr	r3, [r3, #20]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d002      	beq.n	800d240 <osThreadNew+0xa8>
        mem = 1;
 800d23a:	2301      	movs	r3, #1
 800d23c:	61bb      	str	r3, [r7, #24]
 800d23e:	e010      	b.n	800d262 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d10c      	bne.n	800d262 <osThreadNew+0xca>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d108      	bne.n	800d262 <osThreadNew+0xca>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d104      	bne.n	800d262 <osThreadNew+0xca>
          mem = 0;
 800d258:	2300      	movs	r3, #0
 800d25a:	61bb      	str	r3, [r7, #24]
 800d25c:	e001      	b.n	800d262 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d262:	69bb      	ldr	r3, [r7, #24]
 800d264:	2b01      	cmp	r3, #1
 800d266:	d110      	bne.n	800d28a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d270:	9202      	str	r2, [sp, #8]
 800d272:	9301      	str	r3, [sp, #4]
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	6a3a      	ldr	r2, [r7, #32]
 800d27c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f000 fe0c 	bl	800de9c <xTaskCreateStatic>
 800d284:	4603      	mov	r3, r0
 800d286:	613b      	str	r3, [r7, #16]
 800d288:	e013      	b.n	800d2b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d110      	bne.n	800d2b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d290:	6a3b      	ldr	r3, [r7, #32]
 800d292:	b29a      	uxth	r2, r3
 800d294:	f107 0310 	add.w	r3, r7, #16
 800d298:	9301      	str	r3, [sp, #4]
 800d29a:	69fb      	ldr	r3, [r7, #28]
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d2a2:	68f8      	ldr	r0, [r7, #12]
 800d2a4:	f000 fe57 	bl	800df56 <xTaskCreate>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d001      	beq.n	800d2b2 <osThreadNew+0x11a>
            hTask = NULL;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d2b2:	693b      	ldr	r3, [r7, #16]
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3728      	adds	r7, #40	; 0x28
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2c4:	f3ef 8305 	mrs	r3, IPSR
 800d2c8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d2ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d003      	beq.n	800d2d8 <osDelay+0x1c>
    stat = osErrorISR;
 800d2d0:	f06f 0305 	mvn.w	r3, #5
 800d2d4:	60fb      	str	r3, [r7, #12]
 800d2d6:	e007      	b.n	800d2e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d002      	beq.n	800d2e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 ff92 	bl	800e20c <vTaskDelay>
    }
  }

  return (stat);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
	...

0800d2f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d2f4:	b480      	push	{r7}
 800d2f6:	b085      	sub	sp, #20
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	4a07      	ldr	r2, [pc, #28]	; (800d320 <vApplicationGetIdleTaskMemory+0x2c>)
 800d304:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	4a06      	ldr	r2, [pc, #24]	; (800d324 <vApplicationGetIdleTaskMemory+0x30>)
 800d30a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2280      	movs	r2, #128	; 0x80
 800d310:	601a      	str	r2, [r3, #0]
}
 800d312:	bf00      	nop
 800d314:	3714      	adds	r7, #20
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	2000b1e4 	.word	0x2000b1e4
 800d324:	2000b2a0 	.word	0x2000b2a0

0800d328 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d328:	b480      	push	{r7}
 800d32a:	b085      	sub	sp, #20
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	4a07      	ldr	r2, [pc, #28]	; (800d354 <vApplicationGetTimerTaskMemory+0x2c>)
 800d338:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	4a06      	ldr	r2, [pc, #24]	; (800d358 <vApplicationGetTimerTaskMemory+0x30>)
 800d33e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d346:	601a      	str	r2, [r3, #0]
}
 800d348:	bf00      	nop
 800d34a:	3714      	adds	r7, #20
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr
 800d354:	2000b4a0 	.word	0x2000b4a0
 800d358:	2000b55c 	.word	0x2000b55c

0800d35c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f103 0208 	add.w	r2, r3, #8
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d374:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f103 0208 	add.w	r2, r3, #8
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f103 0208 	add.w	r2, r3, #8
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d3aa:	bf00      	nop
 800d3ac:	370c      	adds	r7, #12
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr

0800d3b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d3b6:	b480      	push	{r7}
 800d3b8:	b085      	sub	sp, #20
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
 800d3be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	689a      	ldr	r2, [r3, #8]
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	683a      	ldr	r2, [r7, #0]
 800d3da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	683a      	ldr	r2, [r7, #0]
 800d3e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	1c5a      	adds	r2, r3, #1
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	601a      	str	r2, [r3, #0]
}
 800d3f2:	bf00      	nop
 800d3f4:	3714      	adds	r7, #20
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr

0800d3fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d3fe:	b480      	push	{r7}
 800d400:	b085      	sub	sp, #20
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d414:	d103      	bne.n	800d41e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	60fb      	str	r3, [r7, #12]
 800d41c:	e00c      	b.n	800d438 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	3308      	adds	r3, #8
 800d422:	60fb      	str	r3, [r7, #12]
 800d424:	e002      	b.n	800d42c <vListInsert+0x2e>
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	60fb      	str	r3, [r7, #12]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	68ba      	ldr	r2, [r7, #8]
 800d434:	429a      	cmp	r2, r3
 800d436:	d2f6      	bcs.n	800d426 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	685a      	ldr	r2, [r3, #4]
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	683a      	ldr	r2, [r7, #0]
 800d446:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	683a      	ldr	r2, [r7, #0]
 800d452:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	601a      	str	r2, [r3, #0]
}
 800d464:	bf00      	nop
 800d466:	3714      	adds	r7, #20
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	6892      	ldr	r2, [r2, #8]
 800d486:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	6852      	ldr	r2, [r2, #4]
 800d490:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d103      	bne.n	800d4a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	689a      	ldr	r2, [r3, #8]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	1e5a      	subs	r2, r3, #1
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3714      	adds	r7, #20
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d10a      	bne.n	800d4ee <xQueueGenericReset+0x2a>
	__asm volatile
 800d4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4dc:	f383 8811 	msr	BASEPRI, r3
 800d4e0:	f3bf 8f6f 	isb	sy
 800d4e4:	f3bf 8f4f 	dsb	sy
 800d4e8:	60bb      	str	r3, [r7, #8]
}
 800d4ea:	bf00      	nop
 800d4ec:	e7fe      	b.n	800d4ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d4ee:	f002 f8a1 	bl	800f634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4fa:	68f9      	ldr	r1, [r7, #12]
 800d4fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d4fe:	fb01 f303 	mul.w	r3, r1, r3
 800d502:	441a      	add	r2, r3
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2200      	movs	r2, #0
 800d50c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d51e:	3b01      	subs	r3, #1
 800d520:	68f9      	ldr	r1, [r7, #12]
 800d522:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d524:	fb01 f303 	mul.w	r3, r1, r3
 800d528:	441a      	add	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	22ff      	movs	r2, #255	; 0xff
 800d532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	22ff      	movs	r2, #255	; 0xff
 800d53a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d114      	bne.n	800d56e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d01a      	beq.n	800d582 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	3310      	adds	r3, #16
 800d550:	4618      	mov	r0, r3
 800d552:	f001 f929 	bl	800e7a8 <xTaskRemoveFromEventList>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d012      	beq.n	800d582 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d55c:	4b0c      	ldr	r3, [pc, #48]	; (800d590 <xQueueGenericReset+0xcc>)
 800d55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d562:	601a      	str	r2, [r3, #0]
 800d564:	f3bf 8f4f 	dsb	sy
 800d568:	f3bf 8f6f 	isb	sy
 800d56c:	e009      	b.n	800d582 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	3310      	adds	r3, #16
 800d572:	4618      	mov	r0, r3
 800d574:	f7ff fef2 	bl	800d35c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	3324      	adds	r3, #36	; 0x24
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7ff feed 	bl	800d35c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d582:	f002 f887 	bl	800f694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d586:	2301      	movs	r3, #1
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3710      	adds	r7, #16
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	e000ed04 	.word	0xe000ed04

0800d594 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08e      	sub	sp, #56	; 0x38
 800d598:	af02      	add	r7, sp, #8
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]
 800d5a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d10a      	bne.n	800d5be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ac:	f383 8811 	msr	BASEPRI, r3
 800d5b0:	f3bf 8f6f 	isb	sy
 800d5b4:	f3bf 8f4f 	dsb	sy
 800d5b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d5ba:	bf00      	nop
 800d5bc:	e7fe      	b.n	800d5bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d10a      	bne.n	800d5da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c8:	f383 8811 	msr	BASEPRI, r3
 800d5cc:	f3bf 8f6f 	isb	sy
 800d5d0:	f3bf 8f4f 	dsb	sy
 800d5d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d5d6:	bf00      	nop
 800d5d8:	e7fe      	b.n	800d5d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d002      	beq.n	800d5e6 <xQueueGenericCreateStatic+0x52>
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d001      	beq.n	800d5ea <xQueueGenericCreateStatic+0x56>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e000      	b.n	800d5ec <xQueueGenericCreateStatic+0x58>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10a      	bne.n	800d606 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f4:	f383 8811 	msr	BASEPRI, r3
 800d5f8:	f3bf 8f6f 	isb	sy
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	623b      	str	r3, [r7, #32]
}
 800d602:	bf00      	nop
 800d604:	e7fe      	b.n	800d604 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d102      	bne.n	800d612 <xQueueGenericCreateStatic+0x7e>
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d101      	bne.n	800d616 <xQueueGenericCreateStatic+0x82>
 800d612:	2301      	movs	r3, #1
 800d614:	e000      	b.n	800d618 <xQueueGenericCreateStatic+0x84>
 800d616:	2300      	movs	r3, #0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d10a      	bne.n	800d632 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d620:	f383 8811 	msr	BASEPRI, r3
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	61fb      	str	r3, [r7, #28]
}
 800d62e:	bf00      	nop
 800d630:	e7fe      	b.n	800d630 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d632:	2350      	movs	r3, #80	; 0x50
 800d634:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	2b50      	cmp	r3, #80	; 0x50
 800d63a:	d00a      	beq.n	800d652 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d640:	f383 8811 	msr	BASEPRI, r3
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	61bb      	str	r3, [r7, #24]
}
 800d64e:	bf00      	nop
 800d650:	e7fe      	b.n	800d650 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d652:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00d      	beq.n	800d67a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d660:	2201      	movs	r2, #1
 800d662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d666:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	4613      	mov	r3, r2
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	68b9      	ldr	r1, [r7, #8]
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	f000 f805 	bl	800d684 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3730      	adds	r7, #48	; 0x30
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
 800d690:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d103      	bne.n	800d6a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	69ba      	ldr	r2, [r7, #24]
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	e002      	b.n	800d6a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6b2:	2101      	movs	r1, #1
 800d6b4:	69b8      	ldr	r0, [r7, #24]
 800d6b6:	f7ff ff05 	bl	800d4c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	78fa      	ldrb	r2, [r7, #3]
 800d6be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d6c2:	bf00      	nop
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
	...

0800d6cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b08e      	sub	sp, #56	; 0x38
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]
 800d6d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10a      	bne.n	800d6fe <xQueueGenericSend+0x32>
	__asm volatile
 800d6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d6fa:	bf00      	nop
 800d6fc:	e7fe      	b.n	800d6fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d103      	bne.n	800d70c <xQueueGenericSend+0x40>
 800d704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d101      	bne.n	800d710 <xQueueGenericSend+0x44>
 800d70c:	2301      	movs	r3, #1
 800d70e:	e000      	b.n	800d712 <xQueueGenericSend+0x46>
 800d710:	2300      	movs	r3, #0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d10a      	bne.n	800d72c <xQueueGenericSend+0x60>
	__asm volatile
 800d716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d728:	bf00      	nop
 800d72a:	e7fe      	b.n	800d72a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	2b02      	cmp	r3, #2
 800d730:	d103      	bne.n	800d73a <xQueueGenericSend+0x6e>
 800d732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d736:	2b01      	cmp	r3, #1
 800d738:	d101      	bne.n	800d73e <xQueueGenericSend+0x72>
 800d73a:	2301      	movs	r3, #1
 800d73c:	e000      	b.n	800d740 <xQueueGenericSend+0x74>
 800d73e:	2300      	movs	r3, #0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d10a      	bne.n	800d75a <xQueueGenericSend+0x8e>
	__asm volatile
 800d744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d748:	f383 8811 	msr	BASEPRI, r3
 800d74c:	f3bf 8f6f 	isb	sy
 800d750:	f3bf 8f4f 	dsb	sy
 800d754:	623b      	str	r3, [r7, #32]
}
 800d756:	bf00      	nop
 800d758:	e7fe      	b.n	800d758 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d75a:	f001 fa0d 	bl	800eb78 <xTaskGetSchedulerState>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d102      	bne.n	800d76a <xQueueGenericSend+0x9e>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d101      	bne.n	800d76e <xQueueGenericSend+0xa2>
 800d76a:	2301      	movs	r3, #1
 800d76c:	e000      	b.n	800d770 <xQueueGenericSend+0xa4>
 800d76e:	2300      	movs	r3, #0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d10a      	bne.n	800d78a <xQueueGenericSend+0xbe>
	__asm volatile
 800d774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	61fb      	str	r3, [r7, #28]
}
 800d786:	bf00      	nop
 800d788:	e7fe      	b.n	800d788 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d78a:	f001 ff53 	bl	800f634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d796:	429a      	cmp	r2, r3
 800d798:	d302      	bcc.n	800d7a0 <xQueueGenericSend+0xd4>
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d129      	bne.n	800d7f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7a0:	683a      	ldr	r2, [r7, #0]
 800d7a2:	68b9      	ldr	r1, [r7, #8]
 800d7a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7a6:	f000 fa0b 	bl	800dbc0 <prvCopyDataToQueue>
 800d7aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d010      	beq.n	800d7d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b6:	3324      	adds	r3, #36	; 0x24
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f000 fff5 	bl	800e7a8 <xTaskRemoveFromEventList>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d013      	beq.n	800d7ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d7c4:	4b3f      	ldr	r3, [pc, #252]	; (800d8c4 <xQueueGenericSend+0x1f8>)
 800d7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7ca:	601a      	str	r2, [r3, #0]
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	e00a      	b.n	800d7ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d007      	beq.n	800d7ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d7dc:	4b39      	ldr	r3, [pc, #228]	; (800d8c4 <xQueueGenericSend+0x1f8>)
 800d7de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7e2:	601a      	str	r2, [r3, #0]
 800d7e4:	f3bf 8f4f 	dsb	sy
 800d7e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d7ec:	f001 ff52 	bl	800f694 <vPortExitCritical>
				return pdPASS;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e063      	b.n	800d8bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d103      	bne.n	800d802 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7fa:	f001 ff4b 	bl	800f694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d7fe:	2300      	movs	r3, #0
 800d800:	e05c      	b.n	800d8bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d804:	2b00      	cmp	r3, #0
 800d806:	d106      	bne.n	800d816 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d808:	f107 0314 	add.w	r3, r7, #20
 800d80c:	4618      	mov	r0, r3
 800d80e:	f001 f855 	bl	800e8bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d812:	2301      	movs	r3, #1
 800d814:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d816:	f001 ff3d 	bl	800f694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d81a:	f000 fd9b 	bl	800e354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d81e:	f001 ff09 	bl	800f634 <vPortEnterCritical>
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d828:	b25b      	sxtb	r3, r3
 800d82a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d82e:	d103      	bne.n	800d838 <xQueueGenericSend+0x16c>
 800d830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d832:	2200      	movs	r2, #0
 800d834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d83e:	b25b      	sxtb	r3, r3
 800d840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d844:	d103      	bne.n	800d84e <xQueueGenericSend+0x182>
 800d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d848:	2200      	movs	r2, #0
 800d84a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d84e:	f001 ff21 	bl	800f694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d852:	1d3a      	adds	r2, r7, #4
 800d854:	f107 0314 	add.w	r3, r7, #20
 800d858:	4611      	mov	r1, r2
 800d85a:	4618      	mov	r0, r3
 800d85c:	f001 f844 	bl	800e8e8 <xTaskCheckForTimeOut>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d124      	bne.n	800d8b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d868:	f000 faa2 	bl	800ddb0 <prvIsQueueFull>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d018      	beq.n	800d8a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d874:	3310      	adds	r3, #16
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	4611      	mov	r1, r2
 800d87a:	4618      	mov	r0, r3
 800d87c:	f000 ff44 	bl	800e708 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d882:	f000 fa2d 	bl	800dce0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d886:	f000 fd73 	bl	800e370 <xTaskResumeAll>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f47f af7c 	bne.w	800d78a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d892:	4b0c      	ldr	r3, [pc, #48]	; (800d8c4 <xQueueGenericSend+0x1f8>)
 800d894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d898:	601a      	str	r2, [r3, #0]
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	f3bf 8f6f 	isb	sy
 800d8a2:	e772      	b.n	800d78a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8a6:	f000 fa1b 	bl	800dce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8aa:	f000 fd61 	bl	800e370 <xTaskResumeAll>
 800d8ae:	e76c      	b.n	800d78a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d8b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8b2:	f000 fa15 	bl	800dce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8b6:	f000 fd5b 	bl	800e370 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d8ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3738      	adds	r7, #56	; 0x38
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	e000ed04 	.word	0xe000ed04

0800d8c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b090      	sub	sp, #64	; 0x40
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	607a      	str	r2, [r7, #4]
 800d8d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d10a      	bne.n	800d8f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e4:	f383 8811 	msr	BASEPRI, r3
 800d8e8:	f3bf 8f6f 	isb	sy
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d8f2:	bf00      	nop
 800d8f4:	e7fe      	b.n	800d8f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d103      	bne.n	800d904 <xQueueGenericSendFromISR+0x3c>
 800d8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d900:	2b00      	cmp	r3, #0
 800d902:	d101      	bne.n	800d908 <xQueueGenericSendFromISR+0x40>
 800d904:	2301      	movs	r3, #1
 800d906:	e000      	b.n	800d90a <xQueueGenericSendFromISR+0x42>
 800d908:	2300      	movs	r3, #0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d10a      	bne.n	800d924 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d912:	f383 8811 	msr	BASEPRI, r3
 800d916:	f3bf 8f6f 	isb	sy
 800d91a:	f3bf 8f4f 	dsb	sy
 800d91e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d920:	bf00      	nop
 800d922:	e7fe      	b.n	800d922 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	2b02      	cmp	r3, #2
 800d928:	d103      	bne.n	800d932 <xQueueGenericSendFromISR+0x6a>
 800d92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d101      	bne.n	800d936 <xQueueGenericSendFromISR+0x6e>
 800d932:	2301      	movs	r3, #1
 800d934:	e000      	b.n	800d938 <xQueueGenericSendFromISR+0x70>
 800d936:	2300      	movs	r3, #0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d10a      	bne.n	800d952 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d940:	f383 8811 	msr	BASEPRI, r3
 800d944:	f3bf 8f6f 	isb	sy
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	623b      	str	r3, [r7, #32]
}
 800d94e:	bf00      	nop
 800d950:	e7fe      	b.n	800d950 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d952:	f001 ff51 	bl	800f7f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d956:	f3ef 8211 	mrs	r2, BASEPRI
 800d95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95e:	f383 8811 	msr	BASEPRI, r3
 800d962:	f3bf 8f6f 	isb	sy
 800d966:	f3bf 8f4f 	dsb	sy
 800d96a:	61fa      	str	r2, [r7, #28]
 800d96c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d96e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d970:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d302      	bcc.n	800d984 <xQueueGenericSendFromISR+0xbc>
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	2b02      	cmp	r3, #2
 800d982:	d12f      	bne.n	800d9e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d98a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d992:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d994:	683a      	ldr	r2, [r7, #0]
 800d996:	68b9      	ldr	r1, [r7, #8]
 800d998:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d99a:	f000 f911 	bl	800dbc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d99e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d9a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9a6:	d112      	bne.n	800d9ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d016      	beq.n	800d9de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b2:	3324      	adds	r3, #36	; 0x24
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f000 fef7 	bl	800e7a8 <xTaskRemoveFromEventList>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00e      	beq.n	800d9de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d00b      	beq.n	800d9de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	601a      	str	r2, [r3, #0]
 800d9cc:	e007      	b.n	800d9de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d9ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	b25a      	sxtb	r2, r3
 800d9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d9e2:	e001      	b.n	800d9e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d9f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3740      	adds	r7, #64	; 0x40
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
	...

0800da00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b08c      	sub	sp, #48	; 0x30
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800da0c:	2300      	movs	r3, #0
 800da0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da16:	2b00      	cmp	r3, #0
 800da18:	d10a      	bne.n	800da30 <xQueueReceive+0x30>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	623b      	str	r3, [r7, #32]
}
 800da2c:	bf00      	nop
 800da2e:	e7fe      	b.n	800da2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d103      	bne.n	800da3e <xQueueReceive+0x3e>
 800da36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d101      	bne.n	800da42 <xQueueReceive+0x42>
 800da3e:	2301      	movs	r3, #1
 800da40:	e000      	b.n	800da44 <xQueueReceive+0x44>
 800da42:	2300      	movs	r3, #0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d10a      	bne.n	800da5e <xQueueReceive+0x5e>
	__asm volatile
 800da48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4c:	f383 8811 	msr	BASEPRI, r3
 800da50:	f3bf 8f6f 	isb	sy
 800da54:	f3bf 8f4f 	dsb	sy
 800da58:	61fb      	str	r3, [r7, #28]
}
 800da5a:	bf00      	nop
 800da5c:	e7fe      	b.n	800da5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da5e:	f001 f88b 	bl	800eb78 <xTaskGetSchedulerState>
 800da62:	4603      	mov	r3, r0
 800da64:	2b00      	cmp	r3, #0
 800da66:	d102      	bne.n	800da6e <xQueueReceive+0x6e>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d101      	bne.n	800da72 <xQueueReceive+0x72>
 800da6e:	2301      	movs	r3, #1
 800da70:	e000      	b.n	800da74 <xQueueReceive+0x74>
 800da72:	2300      	movs	r3, #0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d10a      	bne.n	800da8e <xQueueReceive+0x8e>
	__asm volatile
 800da78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7c:	f383 8811 	msr	BASEPRI, r3
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	61bb      	str	r3, [r7, #24]
}
 800da8a:	bf00      	nop
 800da8c:	e7fe      	b.n	800da8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da8e:	f001 fdd1 	bl	800f634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d01f      	beq.n	800dade <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da9e:	68b9      	ldr	r1, [r7, #8]
 800daa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daa2:	f000 f8f7 	bl	800dc94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa8:	1e5a      	subs	r2, r3, #1
 800daaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800daae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00f      	beq.n	800dad6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab8:	3310      	adds	r3, #16
 800daba:	4618      	mov	r0, r3
 800dabc:	f000 fe74 	bl	800e7a8 <xTaskRemoveFromEventList>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d007      	beq.n	800dad6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dac6:	4b3d      	ldr	r3, [pc, #244]	; (800dbbc <xQueueReceive+0x1bc>)
 800dac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dacc:	601a      	str	r2, [r3, #0]
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dad6:	f001 fddd 	bl	800f694 <vPortExitCritical>
				return pdPASS;
 800dada:	2301      	movs	r3, #1
 800dadc:	e069      	b.n	800dbb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d103      	bne.n	800daec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dae4:	f001 fdd6 	bl	800f694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dae8:	2300      	movs	r3, #0
 800daea:	e062      	b.n	800dbb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800daec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d106      	bne.n	800db00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800daf2:	f107 0310 	add.w	r3, r7, #16
 800daf6:	4618      	mov	r0, r3
 800daf8:	f000 fee0 	bl	800e8bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dafc:	2301      	movs	r3, #1
 800dafe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db00:	f001 fdc8 	bl	800f694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db04:	f000 fc26 	bl	800e354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db08:	f001 fd94 	bl	800f634 <vPortEnterCritical>
 800db0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db12:	b25b      	sxtb	r3, r3
 800db14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db18:	d103      	bne.n	800db22 <xQueueReceive+0x122>
 800db1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db28:	b25b      	sxtb	r3, r3
 800db2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db2e:	d103      	bne.n	800db38 <xQueueReceive+0x138>
 800db30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db32:	2200      	movs	r2, #0
 800db34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db38:	f001 fdac 	bl	800f694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db3c:	1d3a      	adds	r2, r7, #4
 800db3e:	f107 0310 	add.w	r3, r7, #16
 800db42:	4611      	mov	r1, r2
 800db44:	4618      	mov	r0, r3
 800db46:	f000 fecf 	bl	800e8e8 <xTaskCheckForTimeOut>
 800db4a:	4603      	mov	r3, r0
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d123      	bne.n	800db98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db52:	f000 f917 	bl	800dd84 <prvIsQueueEmpty>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d017      	beq.n	800db8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5e:	3324      	adds	r3, #36	; 0x24
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	4611      	mov	r1, r2
 800db64:	4618      	mov	r0, r3
 800db66:	f000 fdcf 	bl	800e708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db6c:	f000 f8b8 	bl	800dce0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db70:	f000 fbfe 	bl	800e370 <xTaskResumeAll>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d189      	bne.n	800da8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800db7a:	4b10      	ldr	r3, [pc, #64]	; (800dbbc <xQueueReceive+0x1bc>)
 800db7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db80:	601a      	str	r2, [r3, #0]
 800db82:	f3bf 8f4f 	dsb	sy
 800db86:	f3bf 8f6f 	isb	sy
 800db8a:	e780      	b.n	800da8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800db8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db8e:	f000 f8a7 	bl	800dce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db92:	f000 fbed 	bl	800e370 <xTaskResumeAll>
 800db96:	e77a      	b.n	800da8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800db98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db9a:	f000 f8a1 	bl	800dce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db9e:	f000 fbe7 	bl	800e370 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dba4:	f000 f8ee 	bl	800dd84 <prvIsQueueEmpty>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	f43f af6f 	beq.w	800da8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dbb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3730      	adds	r7, #48	; 0x30
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	e000ed04 	.word	0xe000ed04

0800dbc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d10d      	bne.n	800dbfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d14d      	bne.n	800dc82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f000 ffe2 	bl	800ebb4 <xTaskPriorityDisinherit>
 800dbf0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	609a      	str	r2, [r3, #8]
 800dbf8:	e043      	b.n	800dc82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d119      	bne.n	800dc34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6858      	ldr	r0, [r3, #4]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc08:	461a      	mov	r2, r3
 800dc0a:	68b9      	ldr	r1, [r7, #8]
 800dc0c:	f00d fa7c 	bl	801b108 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	685a      	ldr	r2, [r3, #4]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc18:	441a      	add	r2, r3
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	685a      	ldr	r2, [r3, #4]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d32b      	bcc.n	800dc82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	605a      	str	r2, [r3, #4]
 800dc32:	e026      	b.n	800dc82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	68d8      	ldr	r0, [r3, #12]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	68b9      	ldr	r1, [r7, #8]
 800dc40:	f00d fa62 	bl	801b108 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	68da      	ldr	r2, [r3, #12]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc4c:	425b      	negs	r3, r3
 800dc4e:	441a      	add	r2, r3
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	68da      	ldr	r2, [r3, #12]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d207      	bcs.n	800dc70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	689a      	ldr	r2, [r3, #8]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc68:	425b      	negs	r3, r3
 800dc6a:	441a      	add	r2, r3
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b02      	cmp	r3, #2
 800dc74:	d105      	bne.n	800dc82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d002      	beq.n	800dc82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	3b01      	subs	r3, #1
 800dc80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	1c5a      	adds	r2, r3, #1
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dc8a:	697b      	ldr	r3, [r7, #20]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d018      	beq.n	800dcd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	68da      	ldr	r2, [r3, #12]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcae:	441a      	add	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	68da      	ldr	r2, [r3, #12]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d303      	bcc.n	800dcc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	68d9      	ldr	r1, [r3, #12]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	6838      	ldr	r0, [r7, #0]
 800dcd4:	f00d fa18 	bl	801b108 <memcpy>
	}
}
 800dcd8:	bf00      	nop
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dce8:	f001 fca4 	bl	800f634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcf2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcf4:	e011      	b.n	800dd1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d012      	beq.n	800dd24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	3324      	adds	r3, #36	; 0x24
 800dd02:	4618      	mov	r0, r3
 800dd04:	f000 fd50 	bl	800e7a8 <xTaskRemoveFromEventList>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d001      	beq.n	800dd12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd0e:	f000 fe4d 	bl	800e9ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
 800dd14:	3b01      	subs	r3, #1
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	dce9      	bgt.n	800dcf6 <prvUnlockQueue+0x16>
 800dd22:	e000      	b.n	800dd26 <prvUnlockQueue+0x46>
					break;
 800dd24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	22ff      	movs	r2, #255	; 0xff
 800dd2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dd2e:	f001 fcb1 	bl	800f694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dd32:	f001 fc7f 	bl	800f634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd3e:	e011      	b.n	800dd64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	691b      	ldr	r3, [r3, #16]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d012      	beq.n	800dd6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	3310      	adds	r3, #16
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f000 fd2b 	bl	800e7a8 <xTaskRemoveFromEventList>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d001      	beq.n	800dd5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd58:	f000 fe28 	bl	800e9ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd5c:	7bbb      	ldrb	r3, [r7, #14]
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	dce9      	bgt.n	800dd40 <prvUnlockQueue+0x60>
 800dd6c:	e000      	b.n	800dd70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	22ff      	movs	r2, #255	; 0xff
 800dd74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dd78:	f001 fc8c 	bl	800f694 <vPortExitCritical>
}
 800dd7c:	bf00      	nop
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd8c:	f001 fc52 	bl	800f634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d102      	bne.n	800dd9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dd98:	2301      	movs	r3, #1
 800dd9a:	60fb      	str	r3, [r7, #12]
 800dd9c:	e001      	b.n	800dda2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dda2:	f001 fc77 	bl	800f694 <vPortExitCritical>

	return xReturn;
 800dda6:	68fb      	ldr	r3, [r7, #12]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3710      	adds	r7, #16
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddb8:	f001 fc3c 	bl	800f634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d102      	bne.n	800ddce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	60fb      	str	r3, [r7, #12]
 800ddcc:	e001      	b.n	800ddd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddd2:	f001 fc5f 	bl	800f694 <vPortExitCritical>

	return xReturn;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dde0:	b480      	push	{r7}
 800dde2:	b085      	sub	sp, #20
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddea:	2300      	movs	r3, #0
 800ddec:	60fb      	str	r3, [r7, #12]
 800ddee:	e014      	b.n	800de1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ddf0:	4a0f      	ldr	r2, [pc, #60]	; (800de30 <vQueueAddToRegistry+0x50>)
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10b      	bne.n	800de14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ddfc:	490c      	ldr	r1, [pc, #48]	; (800de30 <vQueueAddToRegistry+0x50>)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	683a      	ldr	r2, [r7, #0]
 800de02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de06:	4a0a      	ldr	r2, [pc, #40]	; (800de30 <vQueueAddToRegistry+0x50>)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	00db      	lsls	r3, r3, #3
 800de0c:	4413      	add	r3, r2
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de12:	e006      	b.n	800de22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	3301      	adds	r3, #1
 800de18:	60fb      	str	r3, [r7, #12]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2b07      	cmp	r3, #7
 800de1e:	d9e7      	bls.n	800ddf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de20:	bf00      	nop
 800de22:	bf00      	nop
 800de24:	3714      	adds	r7, #20
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	2000b95c 	.word	0x2000b95c

0800de34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800de44:	f001 fbf6 	bl	800f634 <vPortEnterCritical>
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de4e:	b25b      	sxtb	r3, r3
 800de50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de54:	d103      	bne.n	800de5e <vQueueWaitForMessageRestricted+0x2a>
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	2200      	movs	r2, #0
 800de5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de64:	b25b      	sxtb	r3, r3
 800de66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de6a:	d103      	bne.n	800de74 <vQueueWaitForMessageRestricted+0x40>
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de74:	f001 fc0e 	bl	800f694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d106      	bne.n	800de8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	3324      	adds	r3, #36	; 0x24
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	68b9      	ldr	r1, [r7, #8]
 800de88:	4618      	mov	r0, r3
 800de8a:	f000 fc61 	bl	800e750 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800de8e:	6978      	ldr	r0, [r7, #20]
 800de90:	f7ff ff26 	bl	800dce0 <prvUnlockQueue>
	}
 800de94:	bf00      	nop
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b08e      	sub	sp, #56	; 0x38
 800dea0:	af04      	add	r7, sp, #16
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
 800dea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800deaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deac:	2b00      	cmp	r3, #0
 800deae:	d10a      	bne.n	800dec6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800deb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	623b      	str	r3, [r7, #32]
}
 800dec2:	bf00      	nop
 800dec4:	e7fe      	b.n	800dec4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10a      	bne.n	800dee2 <xTaskCreateStatic+0x46>
	__asm volatile
 800decc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded0:	f383 8811 	msr	BASEPRI, r3
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	61fb      	str	r3, [r7, #28]
}
 800dede:	bf00      	nop
 800dee0:	e7fe      	b.n	800dee0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dee2:	23bc      	movs	r3, #188	; 0xbc
 800dee4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	2bbc      	cmp	r3, #188	; 0xbc
 800deea:	d00a      	beq.n	800df02 <xTaskCreateStatic+0x66>
	__asm volatile
 800deec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	61bb      	str	r3, [r7, #24]
}
 800defe:	bf00      	nop
 800df00:	e7fe      	b.n	800df00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df06:	2b00      	cmp	r3, #0
 800df08:	d01e      	beq.n	800df48 <xTaskCreateStatic+0xac>
 800df0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d01b      	beq.n	800df48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1c:	2202      	movs	r2, #2
 800df1e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800df22:	2300      	movs	r3, #0
 800df24:	9303      	str	r3, [sp, #12]
 800df26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df28:	9302      	str	r3, [sp, #8]
 800df2a:	f107 0314 	add.w	r3, r7, #20
 800df2e:	9301      	str	r3, [sp, #4]
 800df30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	68b9      	ldr	r1, [r7, #8]
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f000 f850 	bl	800dfe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df42:	f000 f8f3 	bl	800e12c <prvAddNewTaskToReadyList>
 800df46:	e001      	b.n	800df4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800df48:	2300      	movs	r3, #0
 800df4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800df4c:	697b      	ldr	r3, [r7, #20]
	}
 800df4e:	4618      	mov	r0, r3
 800df50:	3728      	adds	r7, #40	; 0x28
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}

0800df56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800df56:	b580      	push	{r7, lr}
 800df58:	b08c      	sub	sp, #48	; 0x30
 800df5a:	af04      	add	r7, sp, #16
 800df5c:	60f8      	str	r0, [r7, #12]
 800df5e:	60b9      	str	r1, [r7, #8]
 800df60:	603b      	str	r3, [r7, #0]
 800df62:	4613      	mov	r3, r2
 800df64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df66:	88fb      	ldrh	r3, [r7, #6]
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	4618      	mov	r0, r3
 800df6c:	f001 fc84 	bl	800f878 <pvPortMalloc>
 800df70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d00e      	beq.n	800df96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df78:	20bc      	movs	r0, #188	; 0xbc
 800df7a:	f001 fc7d 	bl	800f878 <pvPortMalloc>
 800df7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d003      	beq.n	800df8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	697a      	ldr	r2, [r7, #20]
 800df8a:	631a      	str	r2, [r3, #48]	; 0x30
 800df8c:	e005      	b.n	800df9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800df8e:	6978      	ldr	r0, [r7, #20]
 800df90:	f001 fd3e 	bl	800fa10 <vPortFree>
 800df94:	e001      	b.n	800df9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800df96:	2300      	movs	r3, #0
 800df98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d017      	beq.n	800dfd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dfa8:	88fa      	ldrh	r2, [r7, #6]
 800dfaa:	2300      	movs	r3, #0
 800dfac:	9303      	str	r3, [sp, #12]
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	9302      	str	r3, [sp, #8]
 800dfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb4:	9301      	str	r3, [sp, #4]
 800dfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	68b9      	ldr	r1, [r7, #8]
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f000 f80e 	bl	800dfe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfc4:	69f8      	ldr	r0, [r7, #28]
 800dfc6:	f000 f8b1 	bl	800e12c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	61bb      	str	r3, [r7, #24]
 800dfce:	e002      	b.n	800dfd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dfd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dfd6:	69bb      	ldr	r3, [r7, #24]
	}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3720      	adds	r7, #32
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b088      	sub	sp, #32
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
 800dfec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	461a      	mov	r2, r3
 800dff8:	21a5      	movs	r1, #165	; 0xa5
 800dffa:	f00d f893 	bl	801b124 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e008:	3b01      	subs	r3, #1
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	4413      	add	r3, r2
 800e00e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	f023 0307 	bic.w	r3, r3, #7
 800e016:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	f003 0307 	and.w	r3, r3, #7
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d00a      	beq.n	800e038 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e026:	f383 8811 	msr	BASEPRI, r3
 800e02a:	f3bf 8f6f 	isb	sy
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	617b      	str	r3, [r7, #20]
}
 800e034:	bf00      	nop
 800e036:	e7fe      	b.n	800e036 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d01f      	beq.n	800e07e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e03e:	2300      	movs	r3, #0
 800e040:	61fb      	str	r3, [r7, #28]
 800e042:	e012      	b.n	800e06a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e044:	68ba      	ldr	r2, [r7, #8]
 800e046:	69fb      	ldr	r3, [r7, #28]
 800e048:	4413      	add	r3, r2
 800e04a:	7819      	ldrb	r1, [r3, #0]
 800e04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	4413      	add	r3, r2
 800e052:	3334      	adds	r3, #52	; 0x34
 800e054:	460a      	mov	r2, r1
 800e056:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e058:	68ba      	ldr	r2, [r7, #8]
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	4413      	add	r3, r2
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d006      	beq.n	800e072 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	3301      	adds	r3, #1
 800e068:	61fb      	str	r3, [r7, #28]
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	2b0f      	cmp	r3, #15
 800e06e:	d9e9      	bls.n	800e044 <prvInitialiseNewTask+0x64>
 800e070:	e000      	b.n	800e074 <prvInitialiseNewTask+0x94>
			{
				break;
 800e072:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e076:	2200      	movs	r2, #0
 800e078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e07c:	e003      	b.n	800e086 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e080:	2200      	movs	r2, #0
 800e082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e088:	2b37      	cmp	r3, #55	; 0x37
 800e08a:	d901      	bls.n	800e090 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e08c:	2337      	movs	r3, #55	; 0x37
 800e08e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e094:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e09a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09e:	2200      	movs	r2, #0
 800e0a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a4:	3304      	adds	r3, #4
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7ff f978 	bl	800d39c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ae:	3318      	adds	r3, #24
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7ff f973 	bl	800d39c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0de:	3354      	adds	r3, #84	; 0x54
 800e0e0:	2260      	movs	r2, #96	; 0x60
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f00d f81d 	bl	801b124 <memset>
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ec:	4a0c      	ldr	r2, [pc, #48]	; (800e120 <prvInitialiseNewTask+0x140>)
 800e0ee:	659a      	str	r2, [r3, #88]	; 0x58
 800e0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f2:	4a0c      	ldr	r2, [pc, #48]	; (800e124 <prvInitialiseNewTask+0x144>)
 800e0f4:	65da      	str	r2, [r3, #92]	; 0x5c
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f8:	4a0b      	ldr	r2, [pc, #44]	; (800e128 <prvInitialiseNewTask+0x148>)
 800e0fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e0fc:	683a      	ldr	r2, [r7, #0]
 800e0fe:	68f9      	ldr	r1, [r7, #12]
 800e100:	69b8      	ldr	r0, [r7, #24]
 800e102:	f001 f967 	bl	800f3d4 <pxPortInitialiseStack>
 800e106:	4602      	mov	r2, r0
 800e108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d002      	beq.n	800e118 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e116:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e118:	bf00      	nop
 800e11a:	3720      	adds	r7, #32
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	0801d9b8 	.word	0x0801d9b8
 800e124:	0801d9d8 	.word	0x0801d9d8
 800e128:	0801d998 	.word	0x0801d998

0800e12c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e134:	f001 fa7e 	bl	800f634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e138:	4b2d      	ldr	r3, [pc, #180]	; (800e1f0 <prvAddNewTaskToReadyList+0xc4>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	3301      	adds	r3, #1
 800e13e:	4a2c      	ldr	r2, [pc, #176]	; (800e1f0 <prvAddNewTaskToReadyList+0xc4>)
 800e140:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e142:	4b2c      	ldr	r3, [pc, #176]	; (800e1f4 <prvAddNewTaskToReadyList+0xc8>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d109      	bne.n	800e15e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e14a:	4a2a      	ldr	r2, [pc, #168]	; (800e1f4 <prvAddNewTaskToReadyList+0xc8>)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e150:	4b27      	ldr	r3, [pc, #156]	; (800e1f0 <prvAddNewTaskToReadyList+0xc4>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2b01      	cmp	r3, #1
 800e156:	d110      	bne.n	800e17a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e158:	f000 fc4c 	bl	800e9f4 <prvInitialiseTaskLists>
 800e15c:	e00d      	b.n	800e17a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e15e:	4b26      	ldr	r3, [pc, #152]	; (800e1f8 <prvAddNewTaskToReadyList+0xcc>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d109      	bne.n	800e17a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e166:	4b23      	ldr	r3, [pc, #140]	; (800e1f4 <prvAddNewTaskToReadyList+0xc8>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e170:	429a      	cmp	r2, r3
 800e172:	d802      	bhi.n	800e17a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e174:	4a1f      	ldr	r2, [pc, #124]	; (800e1f4 <prvAddNewTaskToReadyList+0xc8>)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e17a:	4b20      	ldr	r3, [pc, #128]	; (800e1fc <prvAddNewTaskToReadyList+0xd0>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	3301      	adds	r3, #1
 800e180:	4a1e      	ldr	r2, [pc, #120]	; (800e1fc <prvAddNewTaskToReadyList+0xd0>)
 800e182:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e184:	4b1d      	ldr	r3, [pc, #116]	; (800e1fc <prvAddNewTaskToReadyList+0xd0>)
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e190:	4b1b      	ldr	r3, [pc, #108]	; (800e200 <prvAddNewTaskToReadyList+0xd4>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	429a      	cmp	r2, r3
 800e196:	d903      	bls.n	800e1a0 <prvAddNewTaskToReadyList+0x74>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e19c:	4a18      	ldr	r2, [pc, #96]	; (800e200 <prvAddNewTaskToReadyList+0xd4>)
 800e19e:	6013      	str	r3, [r2, #0]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4413      	add	r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	4a15      	ldr	r2, [pc, #84]	; (800e204 <prvAddNewTaskToReadyList+0xd8>)
 800e1ae:	441a      	add	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	f7ff f8fd 	bl	800d3b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e1bc:	f001 fa6a 	bl	800f694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e1c0:	4b0d      	ldr	r3, [pc, #52]	; (800e1f8 <prvAddNewTaskToReadyList+0xcc>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00e      	beq.n	800e1e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e1c8:	4b0a      	ldr	r3, [pc, #40]	; (800e1f4 <prvAddNewTaskToReadyList+0xc8>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d207      	bcs.n	800e1e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e1d6:	4b0c      	ldr	r3, [pc, #48]	; (800e208 <prvAddNewTaskToReadyList+0xdc>)
 800e1d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1dc:	601a      	str	r2, [r3, #0]
 800e1de:	f3bf 8f4f 	dsb	sy
 800e1e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1e6:	bf00      	nop
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	2000be70 	.word	0x2000be70
 800e1f4:	2000b99c 	.word	0x2000b99c
 800e1f8:	2000be7c 	.word	0x2000be7c
 800e1fc:	2000be8c 	.word	0x2000be8c
 800e200:	2000be78 	.word	0x2000be78
 800e204:	2000b9a0 	.word	0x2000b9a0
 800e208:	e000ed04 	.word	0xe000ed04

0800e20c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b084      	sub	sp, #16
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e214:	2300      	movs	r3, #0
 800e216:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d017      	beq.n	800e24e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e21e:	4b13      	ldr	r3, [pc, #76]	; (800e26c <vTaskDelay+0x60>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00a      	beq.n	800e23c <vTaskDelay+0x30>
	__asm volatile
 800e226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22a:	f383 8811 	msr	BASEPRI, r3
 800e22e:	f3bf 8f6f 	isb	sy
 800e232:	f3bf 8f4f 	dsb	sy
 800e236:	60bb      	str	r3, [r7, #8]
}
 800e238:	bf00      	nop
 800e23a:	e7fe      	b.n	800e23a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e23c:	f000 f88a 	bl	800e354 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e240:	2100      	movs	r1, #0
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 fd24 	bl	800ec90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e248:	f000 f892 	bl	800e370 <xTaskResumeAll>
 800e24c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d107      	bne.n	800e264 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e254:	4b06      	ldr	r3, [pc, #24]	; (800e270 <vTaskDelay+0x64>)
 800e256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e25a:	601a      	str	r2, [r3, #0]
 800e25c:	f3bf 8f4f 	dsb	sy
 800e260:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e264:	bf00      	nop
 800e266:	3710      	adds	r7, #16
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	2000be98 	.word	0x2000be98
 800e270:	e000ed04 	.word	0xe000ed04

0800e274 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b08a      	sub	sp, #40	; 0x28
 800e278:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e27a:	2300      	movs	r3, #0
 800e27c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e27e:	2300      	movs	r3, #0
 800e280:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e282:	463a      	mov	r2, r7
 800e284:	1d39      	adds	r1, r7, #4
 800e286:	f107 0308 	add.w	r3, r7, #8
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7ff f832 	bl	800d2f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e290:	6839      	ldr	r1, [r7, #0]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	68ba      	ldr	r2, [r7, #8]
 800e296:	9202      	str	r2, [sp, #8]
 800e298:	9301      	str	r3, [sp, #4]
 800e29a:	2300      	movs	r3, #0
 800e29c:	9300      	str	r3, [sp, #0]
 800e29e:	2300      	movs	r3, #0
 800e2a0:	460a      	mov	r2, r1
 800e2a2:	4924      	ldr	r1, [pc, #144]	; (800e334 <vTaskStartScheduler+0xc0>)
 800e2a4:	4824      	ldr	r0, [pc, #144]	; (800e338 <vTaskStartScheduler+0xc4>)
 800e2a6:	f7ff fdf9 	bl	800de9c <xTaskCreateStatic>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	4a23      	ldr	r2, [pc, #140]	; (800e33c <vTaskStartScheduler+0xc8>)
 800e2ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e2b0:	4b22      	ldr	r3, [pc, #136]	; (800e33c <vTaskStartScheduler+0xc8>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d002      	beq.n	800e2be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	617b      	str	r3, [r7, #20]
 800e2bc:	e001      	b.n	800e2c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d102      	bne.n	800e2ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e2c8:	f000 fd36 	bl	800ed38 <xTimerCreateTimerTask>
 800e2cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d11b      	bne.n	800e30c <vTaskStartScheduler+0x98>
	__asm volatile
 800e2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d8:	f383 8811 	msr	BASEPRI, r3
 800e2dc:	f3bf 8f6f 	isb	sy
 800e2e0:	f3bf 8f4f 	dsb	sy
 800e2e4:	613b      	str	r3, [r7, #16]
}
 800e2e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e2e8:	4b15      	ldr	r3, [pc, #84]	; (800e340 <vTaskStartScheduler+0xcc>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	3354      	adds	r3, #84	; 0x54
 800e2ee:	4a15      	ldr	r2, [pc, #84]	; (800e344 <vTaskStartScheduler+0xd0>)
 800e2f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e2f2:	4b15      	ldr	r3, [pc, #84]	; (800e348 <vTaskStartScheduler+0xd4>)
 800e2f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e2fa:	4b14      	ldr	r3, [pc, #80]	; (800e34c <vTaskStartScheduler+0xd8>)
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e300:	4b13      	ldr	r3, [pc, #76]	; (800e350 <vTaskStartScheduler+0xdc>)
 800e302:	2200      	movs	r2, #0
 800e304:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e306:	f001 f8f3 	bl	800f4f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e30a:	e00e      	b.n	800e32a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e312:	d10a      	bne.n	800e32a <vTaskStartScheduler+0xb6>
	__asm volatile
 800e314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e318:	f383 8811 	msr	BASEPRI, r3
 800e31c:	f3bf 8f6f 	isb	sy
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	60fb      	str	r3, [r7, #12]
}
 800e326:	bf00      	nop
 800e328:	e7fe      	b.n	800e328 <vTaskStartScheduler+0xb4>
}
 800e32a:	bf00      	nop
 800e32c:	3718      	adds	r7, #24
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	0801c7bc 	.word	0x0801c7bc
 800e338:	0800e9c5 	.word	0x0800e9c5
 800e33c:	2000be94 	.word	0x2000be94
 800e340:	2000b99c 	.word	0x2000b99c
 800e344:	200009bc 	.word	0x200009bc
 800e348:	2000be90 	.word	0x2000be90
 800e34c:	2000be7c 	.word	0x2000be7c
 800e350:	2000be74 	.word	0x2000be74

0800e354 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e354:	b480      	push	{r7}
 800e356:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e358:	4b04      	ldr	r3, [pc, #16]	; (800e36c <vTaskSuspendAll+0x18>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	3301      	adds	r3, #1
 800e35e:	4a03      	ldr	r2, [pc, #12]	; (800e36c <vTaskSuspendAll+0x18>)
 800e360:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e362:	bf00      	nop
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr
 800e36c:	2000be98 	.word	0x2000be98

0800e370 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e376:	2300      	movs	r3, #0
 800e378:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e37a:	2300      	movs	r3, #0
 800e37c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e37e:	4b42      	ldr	r3, [pc, #264]	; (800e488 <xTaskResumeAll+0x118>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d10a      	bne.n	800e39c <xTaskResumeAll+0x2c>
	__asm volatile
 800e386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38a:	f383 8811 	msr	BASEPRI, r3
 800e38e:	f3bf 8f6f 	isb	sy
 800e392:	f3bf 8f4f 	dsb	sy
 800e396:	603b      	str	r3, [r7, #0]
}
 800e398:	bf00      	nop
 800e39a:	e7fe      	b.n	800e39a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e39c:	f001 f94a 	bl	800f634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e3a0:	4b39      	ldr	r3, [pc, #228]	; (800e488 <xTaskResumeAll+0x118>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	3b01      	subs	r3, #1
 800e3a6:	4a38      	ldr	r2, [pc, #224]	; (800e488 <xTaskResumeAll+0x118>)
 800e3a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3aa:	4b37      	ldr	r3, [pc, #220]	; (800e488 <xTaskResumeAll+0x118>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d162      	bne.n	800e478 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e3b2:	4b36      	ldr	r3, [pc, #216]	; (800e48c <xTaskResumeAll+0x11c>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d05e      	beq.n	800e478 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3ba:	e02f      	b.n	800e41c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3bc:	4b34      	ldr	r3, [pc, #208]	; (800e490 <xTaskResumeAll+0x120>)
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	3318      	adds	r3, #24
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7ff f851 	bl	800d470 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7ff f84c 	bl	800d470 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3dc:	4b2d      	ldr	r3, [pc, #180]	; (800e494 <xTaskResumeAll+0x124>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d903      	bls.n	800e3ec <xTaskResumeAll+0x7c>
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e8:	4a2a      	ldr	r2, [pc, #168]	; (800e494 <xTaskResumeAll+0x124>)
 800e3ea:	6013      	str	r3, [r2, #0]
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	4413      	add	r3, r2
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	4a27      	ldr	r2, [pc, #156]	; (800e498 <xTaskResumeAll+0x128>)
 800e3fa:	441a      	add	r2, r3
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	3304      	adds	r3, #4
 800e400:	4619      	mov	r1, r3
 800e402:	4610      	mov	r0, r2
 800e404:	f7fe ffd7 	bl	800d3b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e40c:	4b23      	ldr	r3, [pc, #140]	; (800e49c <xTaskResumeAll+0x12c>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e412:	429a      	cmp	r2, r3
 800e414:	d302      	bcc.n	800e41c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e416:	4b22      	ldr	r3, [pc, #136]	; (800e4a0 <xTaskResumeAll+0x130>)
 800e418:	2201      	movs	r2, #1
 800e41a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e41c:	4b1c      	ldr	r3, [pc, #112]	; (800e490 <xTaskResumeAll+0x120>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d1cb      	bne.n	800e3bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d001      	beq.n	800e42e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e42a:	f000 fb85 	bl	800eb38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e42e:	4b1d      	ldr	r3, [pc, #116]	; (800e4a4 <xTaskResumeAll+0x134>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d010      	beq.n	800e45c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e43a:	f000 f847 	bl	800e4cc <xTaskIncrementTick>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d002      	beq.n	800e44a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e444:	4b16      	ldr	r3, [pc, #88]	; (800e4a0 <xTaskResumeAll+0x130>)
 800e446:	2201      	movs	r2, #1
 800e448:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	3b01      	subs	r3, #1
 800e44e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1f1      	bne.n	800e43a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e456:	4b13      	ldr	r3, [pc, #76]	; (800e4a4 <xTaskResumeAll+0x134>)
 800e458:	2200      	movs	r2, #0
 800e45a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e45c:	4b10      	ldr	r3, [pc, #64]	; (800e4a0 <xTaskResumeAll+0x130>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d009      	beq.n	800e478 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e464:	2301      	movs	r3, #1
 800e466:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e468:	4b0f      	ldr	r3, [pc, #60]	; (800e4a8 <xTaskResumeAll+0x138>)
 800e46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e46e:	601a      	str	r2, [r3, #0]
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e478:	f001 f90c 	bl	800f694 <vPortExitCritical>

	return xAlreadyYielded;
 800e47c:	68bb      	ldr	r3, [r7, #8]
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3710      	adds	r7, #16
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	2000be98 	.word	0x2000be98
 800e48c:	2000be70 	.word	0x2000be70
 800e490:	2000be30 	.word	0x2000be30
 800e494:	2000be78 	.word	0x2000be78
 800e498:	2000b9a0 	.word	0x2000b9a0
 800e49c:	2000b99c 	.word	0x2000b99c
 800e4a0:	2000be84 	.word	0x2000be84
 800e4a4:	2000be80 	.word	0x2000be80
 800e4a8:	e000ed04 	.word	0xe000ed04

0800e4ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e4b2:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <xTaskGetTickCount+0x1c>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e4b8:	687b      	ldr	r3, [r7, #4]
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	370c      	adds	r7, #12
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr
 800e4c6:	bf00      	nop
 800e4c8:	2000be74 	.word	0x2000be74

0800e4cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b086      	sub	sp, #24
 800e4d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4d6:	4b4f      	ldr	r3, [pc, #316]	; (800e614 <xTaskIncrementTick+0x148>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	f040 808f 	bne.w	800e5fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e4e0:	4b4d      	ldr	r3, [pc, #308]	; (800e618 <xTaskIncrementTick+0x14c>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e4e8:	4a4b      	ldr	r2, [pc, #300]	; (800e618 <xTaskIncrementTick+0x14c>)
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d120      	bne.n	800e536 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e4f4:	4b49      	ldr	r3, [pc, #292]	; (800e61c <xTaskIncrementTick+0x150>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00a      	beq.n	800e514 <xTaskIncrementTick+0x48>
	__asm volatile
 800e4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e502:	f383 8811 	msr	BASEPRI, r3
 800e506:	f3bf 8f6f 	isb	sy
 800e50a:	f3bf 8f4f 	dsb	sy
 800e50e:	603b      	str	r3, [r7, #0]
}
 800e510:	bf00      	nop
 800e512:	e7fe      	b.n	800e512 <xTaskIncrementTick+0x46>
 800e514:	4b41      	ldr	r3, [pc, #260]	; (800e61c <xTaskIncrementTick+0x150>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	60fb      	str	r3, [r7, #12]
 800e51a:	4b41      	ldr	r3, [pc, #260]	; (800e620 <xTaskIncrementTick+0x154>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4a3f      	ldr	r2, [pc, #252]	; (800e61c <xTaskIncrementTick+0x150>)
 800e520:	6013      	str	r3, [r2, #0]
 800e522:	4a3f      	ldr	r2, [pc, #252]	; (800e620 <xTaskIncrementTick+0x154>)
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6013      	str	r3, [r2, #0]
 800e528:	4b3e      	ldr	r3, [pc, #248]	; (800e624 <xTaskIncrementTick+0x158>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	3301      	adds	r3, #1
 800e52e:	4a3d      	ldr	r2, [pc, #244]	; (800e624 <xTaskIncrementTick+0x158>)
 800e530:	6013      	str	r3, [r2, #0]
 800e532:	f000 fb01 	bl	800eb38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e536:	4b3c      	ldr	r3, [pc, #240]	; (800e628 <xTaskIncrementTick+0x15c>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	693a      	ldr	r2, [r7, #16]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d349      	bcc.n	800e5d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e540:	4b36      	ldr	r3, [pc, #216]	; (800e61c <xTaskIncrementTick+0x150>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d104      	bne.n	800e554 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e54a:	4b37      	ldr	r3, [pc, #220]	; (800e628 <xTaskIncrementTick+0x15c>)
 800e54c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e550:	601a      	str	r2, [r3, #0]
					break;
 800e552:	e03f      	b.n	800e5d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e554:	4b31      	ldr	r3, [pc, #196]	; (800e61c <xTaskIncrementTick+0x150>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e564:	693a      	ldr	r2, [r7, #16]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	429a      	cmp	r2, r3
 800e56a:	d203      	bcs.n	800e574 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e56c:	4a2e      	ldr	r2, [pc, #184]	; (800e628 <xTaskIncrementTick+0x15c>)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e572:	e02f      	b.n	800e5d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	3304      	adds	r3, #4
 800e578:	4618      	mov	r0, r3
 800e57a:	f7fe ff79 	bl	800d470 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e582:	2b00      	cmp	r3, #0
 800e584:	d004      	beq.n	800e590 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	3318      	adds	r3, #24
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fe ff70 	bl	800d470 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e594:	4b25      	ldr	r3, [pc, #148]	; (800e62c <xTaskIncrementTick+0x160>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d903      	bls.n	800e5a4 <xTaskIncrementTick+0xd8>
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a0:	4a22      	ldr	r2, [pc, #136]	; (800e62c <xTaskIncrementTick+0x160>)
 800e5a2:	6013      	str	r3, [r2, #0]
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	4413      	add	r3, r2
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	4a1f      	ldr	r2, [pc, #124]	; (800e630 <xTaskIncrementTick+0x164>)
 800e5b2:	441a      	add	r2, r3
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	3304      	adds	r3, #4
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	4610      	mov	r0, r2
 800e5bc:	f7fe fefb 	bl	800d3b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c4:	4b1b      	ldr	r3, [pc, #108]	; (800e634 <xTaskIncrementTick+0x168>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d3b8      	bcc.n	800e540 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5d2:	e7b5      	b.n	800e540 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e5d4:	4b17      	ldr	r3, [pc, #92]	; (800e634 <xTaskIncrementTick+0x168>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5da:	4915      	ldr	r1, [pc, #84]	; (800e630 <xTaskIncrementTick+0x164>)
 800e5dc:	4613      	mov	r3, r2
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	4413      	add	r3, r2
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	440b      	add	r3, r1
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d901      	bls.n	800e5f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e5f0:	4b11      	ldr	r3, [pc, #68]	; (800e638 <xTaskIncrementTick+0x16c>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d007      	beq.n	800e608 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	617b      	str	r3, [r7, #20]
 800e5fc:	e004      	b.n	800e608 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e5fe:	4b0f      	ldr	r3, [pc, #60]	; (800e63c <xTaskIncrementTick+0x170>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	3301      	adds	r3, #1
 800e604:	4a0d      	ldr	r2, [pc, #52]	; (800e63c <xTaskIncrementTick+0x170>)
 800e606:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e608:	697b      	ldr	r3, [r7, #20]
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3718      	adds	r7, #24
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	2000be98 	.word	0x2000be98
 800e618:	2000be74 	.word	0x2000be74
 800e61c:	2000be28 	.word	0x2000be28
 800e620:	2000be2c 	.word	0x2000be2c
 800e624:	2000be88 	.word	0x2000be88
 800e628:	2000be90 	.word	0x2000be90
 800e62c:	2000be78 	.word	0x2000be78
 800e630:	2000b9a0 	.word	0x2000b9a0
 800e634:	2000b99c 	.word	0x2000b99c
 800e638:	2000be84 	.word	0x2000be84
 800e63c:	2000be80 	.word	0x2000be80

0800e640 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e640:	b480      	push	{r7}
 800e642:	b085      	sub	sp, #20
 800e644:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e646:	4b2a      	ldr	r3, [pc, #168]	; (800e6f0 <vTaskSwitchContext+0xb0>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d003      	beq.n	800e656 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e64e:	4b29      	ldr	r3, [pc, #164]	; (800e6f4 <vTaskSwitchContext+0xb4>)
 800e650:	2201      	movs	r2, #1
 800e652:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e654:	e046      	b.n	800e6e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e656:	4b27      	ldr	r3, [pc, #156]	; (800e6f4 <vTaskSwitchContext+0xb4>)
 800e658:	2200      	movs	r2, #0
 800e65a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e65c:	4b26      	ldr	r3, [pc, #152]	; (800e6f8 <vTaskSwitchContext+0xb8>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	60fb      	str	r3, [r7, #12]
 800e662:	e010      	b.n	800e686 <vTaskSwitchContext+0x46>
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d10a      	bne.n	800e680 <vTaskSwitchContext+0x40>
	__asm volatile
 800e66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	607b      	str	r3, [r7, #4]
}
 800e67c:	bf00      	nop
 800e67e:	e7fe      	b.n	800e67e <vTaskSwitchContext+0x3e>
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	3b01      	subs	r3, #1
 800e684:	60fb      	str	r3, [r7, #12]
 800e686:	491d      	ldr	r1, [pc, #116]	; (800e6fc <vTaskSwitchContext+0xbc>)
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	4613      	mov	r3, r2
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4413      	add	r3, r2
 800e690:	009b      	lsls	r3, r3, #2
 800e692:	440b      	add	r3, r1
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d0e4      	beq.n	800e664 <vTaskSwitchContext+0x24>
 800e69a:	68fa      	ldr	r2, [r7, #12]
 800e69c:	4613      	mov	r3, r2
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	4413      	add	r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4a15      	ldr	r2, [pc, #84]	; (800e6fc <vTaskSwitchContext+0xbc>)
 800e6a6:	4413      	add	r3, r2
 800e6a8:	60bb      	str	r3, [r7, #8]
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	685a      	ldr	r2, [r3, #4]
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	605a      	str	r2, [r3, #4]
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	685a      	ldr	r2, [r3, #4]
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	3308      	adds	r3, #8
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d104      	bne.n	800e6ca <vTaskSwitchContext+0x8a>
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	685a      	ldr	r2, [r3, #4]
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	605a      	str	r2, [r3, #4]
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	68db      	ldr	r3, [r3, #12]
 800e6d0:	4a0b      	ldr	r2, [pc, #44]	; (800e700 <vTaskSwitchContext+0xc0>)
 800e6d2:	6013      	str	r3, [r2, #0]
 800e6d4:	4a08      	ldr	r2, [pc, #32]	; (800e6f8 <vTaskSwitchContext+0xb8>)
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e6da:	4b09      	ldr	r3, [pc, #36]	; (800e700 <vTaskSwitchContext+0xc0>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	3354      	adds	r3, #84	; 0x54
 800e6e0:	4a08      	ldr	r2, [pc, #32]	; (800e704 <vTaskSwitchContext+0xc4>)
 800e6e2:	6013      	str	r3, [r2, #0]
}
 800e6e4:	bf00      	nop
 800e6e6:	3714      	adds	r7, #20
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr
 800e6f0:	2000be98 	.word	0x2000be98
 800e6f4:	2000be84 	.word	0x2000be84
 800e6f8:	2000be78 	.word	0x2000be78
 800e6fc:	2000b9a0 	.word	0x2000b9a0
 800e700:	2000b99c 	.word	0x2000b99c
 800e704:	200009bc 	.word	0x200009bc

0800e708 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d10a      	bne.n	800e72e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e71c:	f383 8811 	msr	BASEPRI, r3
 800e720:	f3bf 8f6f 	isb	sy
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	60fb      	str	r3, [r7, #12]
}
 800e72a:	bf00      	nop
 800e72c:	e7fe      	b.n	800e72c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e72e:	4b07      	ldr	r3, [pc, #28]	; (800e74c <vTaskPlaceOnEventList+0x44>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	3318      	adds	r3, #24
 800e734:	4619      	mov	r1, r3
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f7fe fe61 	bl	800d3fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e73c:	2101      	movs	r1, #1
 800e73e:	6838      	ldr	r0, [r7, #0]
 800e740:	f000 faa6 	bl	800ec90 <prvAddCurrentTaskToDelayedList>
}
 800e744:	bf00      	nop
 800e746:	3710      	adds	r7, #16
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	2000b99c 	.word	0x2000b99c

0800e750 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e750:	b580      	push	{r7, lr}
 800e752:	b086      	sub	sp, #24
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d10a      	bne.n	800e778 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	617b      	str	r3, [r7, #20]
}
 800e774:	bf00      	nop
 800e776:	e7fe      	b.n	800e776 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e778:	4b0a      	ldr	r3, [pc, #40]	; (800e7a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	3318      	adds	r3, #24
 800e77e:	4619      	mov	r1, r3
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f7fe fe18 	bl	800d3b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d002      	beq.n	800e792 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e78c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e790:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e792:	6879      	ldr	r1, [r7, #4]
 800e794:	68b8      	ldr	r0, [r7, #8]
 800e796:	f000 fa7b 	bl	800ec90 <prvAddCurrentTaskToDelayedList>
	}
 800e79a:	bf00      	nop
 800e79c:	3718      	adds	r7, #24
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	2000b99c 	.word	0x2000b99c

0800e7a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b086      	sub	sp, #24
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d10a      	bne.n	800e7d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	60fb      	str	r3, [r7, #12]
}
 800e7d0:	bf00      	nop
 800e7d2:	e7fe      	b.n	800e7d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	3318      	adds	r3, #24
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7fe fe49 	bl	800d470 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7de:	4b1e      	ldr	r3, [pc, #120]	; (800e858 <xTaskRemoveFromEventList+0xb0>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d11d      	bne.n	800e822 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	3304      	adds	r3, #4
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7fe fe40 	bl	800d470 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7f4:	4b19      	ldr	r3, [pc, #100]	; (800e85c <xTaskRemoveFromEventList+0xb4>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d903      	bls.n	800e804 <xTaskRemoveFromEventList+0x5c>
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e800:	4a16      	ldr	r2, [pc, #88]	; (800e85c <xTaskRemoveFromEventList+0xb4>)
 800e802:	6013      	str	r3, [r2, #0]
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e808:	4613      	mov	r3, r2
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	4413      	add	r3, r2
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	4a13      	ldr	r2, [pc, #76]	; (800e860 <xTaskRemoveFromEventList+0xb8>)
 800e812:	441a      	add	r2, r3
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	3304      	adds	r3, #4
 800e818:	4619      	mov	r1, r3
 800e81a:	4610      	mov	r0, r2
 800e81c:	f7fe fdcb 	bl	800d3b6 <vListInsertEnd>
 800e820:	e005      	b.n	800e82e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	3318      	adds	r3, #24
 800e826:	4619      	mov	r1, r3
 800e828:	480e      	ldr	r0, [pc, #56]	; (800e864 <xTaskRemoveFromEventList+0xbc>)
 800e82a:	f7fe fdc4 	bl	800d3b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e832:	4b0d      	ldr	r3, [pc, #52]	; (800e868 <xTaskRemoveFromEventList+0xc0>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e838:	429a      	cmp	r2, r3
 800e83a:	d905      	bls.n	800e848 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e83c:	2301      	movs	r3, #1
 800e83e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e840:	4b0a      	ldr	r3, [pc, #40]	; (800e86c <xTaskRemoveFromEventList+0xc4>)
 800e842:	2201      	movs	r2, #1
 800e844:	601a      	str	r2, [r3, #0]
 800e846:	e001      	b.n	800e84c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e848:	2300      	movs	r3, #0
 800e84a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e84c:	697b      	ldr	r3, [r7, #20]
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3718      	adds	r7, #24
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	2000be98 	.word	0x2000be98
 800e85c:	2000be78 	.word	0x2000be78
 800e860:	2000b9a0 	.word	0x2000b9a0
 800e864:	2000be30 	.word	0x2000be30
 800e868:	2000b99c 	.word	0x2000b99c
 800e86c:	2000be84 	.word	0x2000be84

0800e870 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d10a      	bne.n	800e894 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800e87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	60fb      	str	r3, [r7, #12]
}
 800e890:	bf00      	nop
 800e892:	e7fe      	b.n	800e892 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800e894:	f000 fece 	bl	800f634 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e898:	4b06      	ldr	r3, [pc, #24]	; (800e8b4 <vTaskSetTimeOutState+0x44>)
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800e8a0:	4b05      	ldr	r3, [pc, #20]	; (800e8b8 <vTaskSetTimeOutState+0x48>)
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800e8a8:	f000 fef4 	bl	800f694 <vPortExitCritical>
}
 800e8ac:	bf00      	nop
 800e8ae:	3710      	adds	r7, #16
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	2000be88 	.word	0x2000be88
 800e8b8:	2000be74 	.word	0x2000be74

0800e8bc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8c4:	4b06      	ldr	r3, [pc, #24]	; (800e8e0 <vTaskInternalSetTimeOutState+0x24>)
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8cc:	4b05      	ldr	r3, [pc, #20]	; (800e8e4 <vTaskInternalSetTimeOutState+0x28>)
 800e8ce:	681a      	ldr	r2, [r3, #0]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	605a      	str	r2, [r3, #4]
}
 800e8d4:	bf00      	nop
 800e8d6:	370c      	adds	r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr
 800e8e0:	2000be88 	.word	0x2000be88
 800e8e4:	2000be74 	.word	0x2000be74

0800e8e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b088      	sub	sp, #32
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d10a      	bne.n	800e90e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fc:	f383 8811 	msr	BASEPRI, r3
 800e900:	f3bf 8f6f 	isb	sy
 800e904:	f3bf 8f4f 	dsb	sy
 800e908:	613b      	str	r3, [r7, #16]
}
 800e90a:	bf00      	nop
 800e90c:	e7fe      	b.n	800e90c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10a      	bne.n	800e92a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e918:	f383 8811 	msr	BASEPRI, r3
 800e91c:	f3bf 8f6f 	isb	sy
 800e920:	f3bf 8f4f 	dsb	sy
 800e924:	60fb      	str	r3, [r7, #12]
}
 800e926:	bf00      	nop
 800e928:	e7fe      	b.n	800e928 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e92a:	f000 fe83 	bl	800f634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e92e:	4b1d      	ldr	r3, [pc, #116]	; (800e9a4 <xTaskCheckForTimeOut+0xbc>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	69ba      	ldr	r2, [r7, #24]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e946:	d102      	bne.n	800e94e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e948:	2300      	movs	r3, #0
 800e94a:	61fb      	str	r3, [r7, #28]
 800e94c:	e023      	b.n	800e996 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	4b15      	ldr	r3, [pc, #84]	; (800e9a8 <xTaskCheckForTimeOut+0xc0>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	429a      	cmp	r2, r3
 800e958:	d007      	beq.n	800e96a <xTaskCheckForTimeOut+0x82>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	69ba      	ldr	r2, [r7, #24]
 800e960:	429a      	cmp	r2, r3
 800e962:	d302      	bcc.n	800e96a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e964:	2301      	movs	r3, #1
 800e966:	61fb      	str	r3, [r7, #28]
 800e968:	e015      	b.n	800e996 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	697a      	ldr	r2, [r7, #20]
 800e970:	429a      	cmp	r2, r3
 800e972:	d20b      	bcs.n	800e98c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	1ad2      	subs	r2, r2, r3
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f7ff ff9b 	bl	800e8bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e986:	2300      	movs	r3, #0
 800e988:	61fb      	str	r3, [r7, #28]
 800e98a:	e004      	b.n	800e996 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	2200      	movs	r2, #0
 800e990:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e992:	2301      	movs	r3, #1
 800e994:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e996:	f000 fe7d 	bl	800f694 <vPortExitCritical>

	return xReturn;
 800e99a:	69fb      	ldr	r3, [r7, #28]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3720      	adds	r7, #32
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	2000be74 	.word	0x2000be74
 800e9a8:	2000be88 	.word	0x2000be88

0800e9ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e9b0:	4b03      	ldr	r3, [pc, #12]	; (800e9c0 <vTaskMissedYield+0x14>)
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	601a      	str	r2, [r3, #0]
}
 800e9b6:	bf00      	nop
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr
 800e9c0:	2000be84 	.word	0x2000be84

0800e9c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e9cc:	f000 f852 	bl	800ea74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e9d0:	4b06      	ldr	r3, [pc, #24]	; (800e9ec <prvIdleTask+0x28>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d9f9      	bls.n	800e9cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800e9d8:	4b05      	ldr	r3, [pc, #20]	; (800e9f0 <prvIdleTask+0x2c>)
 800e9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9de:	601a      	str	r2, [r3, #0]
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e9e8:	e7f0      	b.n	800e9cc <prvIdleTask+0x8>
 800e9ea:	bf00      	nop
 800e9ec:	2000b9a0 	.word	0x2000b9a0
 800e9f0:	e000ed04 	.word	0xe000ed04

0800e9f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b082      	sub	sp, #8
 800e9f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	607b      	str	r3, [r7, #4]
 800e9fe:	e00c      	b.n	800ea1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	4613      	mov	r3, r2
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	4413      	add	r3, r2
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	4a12      	ldr	r2, [pc, #72]	; (800ea54 <prvInitialiseTaskLists+0x60>)
 800ea0c:	4413      	add	r3, r2
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7fe fca4 	bl	800d35c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	3301      	adds	r3, #1
 800ea18:	607b      	str	r3, [r7, #4]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2b37      	cmp	r3, #55	; 0x37
 800ea1e:	d9ef      	bls.n	800ea00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ea20:	480d      	ldr	r0, [pc, #52]	; (800ea58 <prvInitialiseTaskLists+0x64>)
 800ea22:	f7fe fc9b 	bl	800d35c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea26:	480d      	ldr	r0, [pc, #52]	; (800ea5c <prvInitialiseTaskLists+0x68>)
 800ea28:	f7fe fc98 	bl	800d35c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea2c:	480c      	ldr	r0, [pc, #48]	; (800ea60 <prvInitialiseTaskLists+0x6c>)
 800ea2e:	f7fe fc95 	bl	800d35c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea32:	480c      	ldr	r0, [pc, #48]	; (800ea64 <prvInitialiseTaskLists+0x70>)
 800ea34:	f7fe fc92 	bl	800d35c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ea38:	480b      	ldr	r0, [pc, #44]	; (800ea68 <prvInitialiseTaskLists+0x74>)
 800ea3a:	f7fe fc8f 	bl	800d35c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea3e:	4b0b      	ldr	r3, [pc, #44]	; (800ea6c <prvInitialiseTaskLists+0x78>)
 800ea40:	4a05      	ldr	r2, [pc, #20]	; (800ea58 <prvInitialiseTaskLists+0x64>)
 800ea42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea44:	4b0a      	ldr	r3, [pc, #40]	; (800ea70 <prvInitialiseTaskLists+0x7c>)
 800ea46:	4a05      	ldr	r2, [pc, #20]	; (800ea5c <prvInitialiseTaskLists+0x68>)
 800ea48:	601a      	str	r2, [r3, #0]
}
 800ea4a:	bf00      	nop
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	2000b9a0 	.word	0x2000b9a0
 800ea58:	2000be00 	.word	0x2000be00
 800ea5c:	2000be14 	.word	0x2000be14
 800ea60:	2000be30 	.word	0x2000be30
 800ea64:	2000be44 	.word	0x2000be44
 800ea68:	2000be5c 	.word	0x2000be5c
 800ea6c:	2000be28 	.word	0x2000be28
 800ea70:	2000be2c 	.word	0x2000be2c

0800ea74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea7a:	e019      	b.n	800eab0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea7c:	f000 fdda 	bl	800f634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea80:	4b10      	ldr	r3, [pc, #64]	; (800eac4 <prvCheckTasksWaitingTermination+0x50>)
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	68db      	ldr	r3, [r3, #12]
 800ea86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	3304      	adds	r3, #4
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7fe fcef 	bl	800d470 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea92:	4b0d      	ldr	r3, [pc, #52]	; (800eac8 <prvCheckTasksWaitingTermination+0x54>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	3b01      	subs	r3, #1
 800ea98:	4a0b      	ldr	r2, [pc, #44]	; (800eac8 <prvCheckTasksWaitingTermination+0x54>)
 800ea9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea9c:	4b0b      	ldr	r3, [pc, #44]	; (800eacc <prvCheckTasksWaitingTermination+0x58>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	3b01      	subs	r3, #1
 800eaa2:	4a0a      	ldr	r2, [pc, #40]	; (800eacc <prvCheckTasksWaitingTermination+0x58>)
 800eaa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eaa6:	f000 fdf5 	bl	800f694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 f810 	bl	800ead0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eab0:	4b06      	ldr	r3, [pc, #24]	; (800eacc <prvCheckTasksWaitingTermination+0x58>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d1e1      	bne.n	800ea7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eab8:	bf00      	nop
 800eaba:	bf00      	nop
 800eabc:	3708      	adds	r7, #8
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	2000be44 	.word	0x2000be44
 800eac8:	2000be70 	.word	0x2000be70
 800eacc:	2000be58 	.word	0x2000be58

0800ead0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	3354      	adds	r3, #84	; 0x54
 800eadc:	4618      	mov	r0, r3
 800eade:	f00c fcb9 	bl	801b454 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d108      	bne.n	800eafe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f000 ff8d 	bl	800fa10 <vPortFree>
				vPortFree( pxTCB );
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 ff8a 	bl	800fa10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eafc:	e018      	b.n	800eb30 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d103      	bne.n	800eb10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 ff81 	bl	800fa10 <vPortFree>
	}
 800eb0e:	e00f      	b.n	800eb30 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800eb16:	2b02      	cmp	r3, #2
 800eb18:	d00a      	beq.n	800eb30 <prvDeleteTCB+0x60>
	__asm volatile
 800eb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb1e:	f383 8811 	msr	BASEPRI, r3
 800eb22:	f3bf 8f6f 	isb	sy
 800eb26:	f3bf 8f4f 	dsb	sy
 800eb2a:	60fb      	str	r3, [r7, #12]
}
 800eb2c:	bf00      	nop
 800eb2e:	e7fe      	b.n	800eb2e <prvDeleteTCB+0x5e>
	}
 800eb30:	bf00      	nop
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b083      	sub	sp, #12
 800eb3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb3e:	4b0c      	ldr	r3, [pc, #48]	; (800eb70 <prvResetNextTaskUnblockTime+0x38>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d104      	bne.n	800eb52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb48:	4b0a      	ldr	r3, [pc, #40]	; (800eb74 <prvResetNextTaskUnblockTime+0x3c>)
 800eb4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eb50:	e008      	b.n	800eb64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb52:	4b07      	ldr	r3, [pc, #28]	; (800eb70 <prvResetNextTaskUnblockTime+0x38>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	68db      	ldr	r3, [r3, #12]
 800eb5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	4a04      	ldr	r2, [pc, #16]	; (800eb74 <prvResetNextTaskUnblockTime+0x3c>)
 800eb62:	6013      	str	r3, [r2, #0]
}
 800eb64:	bf00      	nop
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr
 800eb70:	2000be28 	.word	0x2000be28
 800eb74:	2000be90 	.word	0x2000be90

0800eb78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb78:	b480      	push	{r7}
 800eb7a:	b083      	sub	sp, #12
 800eb7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb7e:	4b0b      	ldr	r3, [pc, #44]	; (800ebac <xTaskGetSchedulerState+0x34>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d102      	bne.n	800eb8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb86:	2301      	movs	r3, #1
 800eb88:	607b      	str	r3, [r7, #4]
 800eb8a:	e008      	b.n	800eb9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb8c:	4b08      	ldr	r3, [pc, #32]	; (800ebb0 <xTaskGetSchedulerState+0x38>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d102      	bne.n	800eb9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb94:	2302      	movs	r3, #2
 800eb96:	607b      	str	r3, [r7, #4]
 800eb98:	e001      	b.n	800eb9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb9e:	687b      	ldr	r3, [r7, #4]
	}
 800eba0:	4618      	mov	r0, r3
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr
 800ebac:	2000be7c 	.word	0x2000be7c
 800ebb0:	2000be98 	.word	0x2000be98

0800ebb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b086      	sub	sp, #24
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d056      	beq.n	800ec78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ebca:	4b2e      	ldr	r3, [pc, #184]	; (800ec84 <xTaskPriorityDisinherit+0xd0>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	693a      	ldr	r2, [r7, #16]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d00a      	beq.n	800ebea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ebd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	60fb      	str	r3, [r7, #12]
}
 800ebe6:	bf00      	nop
 800ebe8:	e7fe      	b.n	800ebe8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d10a      	bne.n	800ec08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ebf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf6:	f383 8811 	msr	BASEPRI, r3
 800ebfa:	f3bf 8f6f 	isb	sy
 800ebfe:	f3bf 8f4f 	dsb	sy
 800ec02:	60bb      	str	r3, [r7, #8]
}
 800ec04:	bf00      	nop
 800ec06:	e7fe      	b.n	800ec06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec0c:	1e5a      	subs	r2, r3, #1
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d02c      	beq.n	800ec78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d128      	bne.n	800ec78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	3304      	adds	r3, #4
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fe fc20 	bl	800d470 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec48:	4b0f      	ldr	r3, [pc, #60]	; (800ec88 <xTaskPriorityDisinherit+0xd4>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d903      	bls.n	800ec58 <xTaskPriorityDisinherit+0xa4>
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec54:	4a0c      	ldr	r2, [pc, #48]	; (800ec88 <xTaskPriorityDisinherit+0xd4>)
 800ec56:	6013      	str	r3, [r2, #0]
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec5c:	4613      	mov	r3, r2
 800ec5e:	009b      	lsls	r3, r3, #2
 800ec60:	4413      	add	r3, r2
 800ec62:	009b      	lsls	r3, r3, #2
 800ec64:	4a09      	ldr	r2, [pc, #36]	; (800ec8c <xTaskPriorityDisinherit+0xd8>)
 800ec66:	441a      	add	r2, r3
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	3304      	adds	r3, #4
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	4610      	mov	r0, r2
 800ec70:	f7fe fba1 	bl	800d3b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec74:	2301      	movs	r3, #1
 800ec76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec78:	697b      	ldr	r3, [r7, #20]
	}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3718      	adds	r7, #24
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	2000b99c 	.word	0x2000b99c
 800ec88:	2000be78 	.word	0x2000be78
 800ec8c:	2000b9a0 	.word	0x2000b9a0

0800ec90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ec9a:	4b21      	ldr	r3, [pc, #132]	; (800ed20 <prvAddCurrentTaskToDelayedList+0x90>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eca0:	4b20      	ldr	r3, [pc, #128]	; (800ed24 <prvAddCurrentTaskToDelayedList+0x94>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	3304      	adds	r3, #4
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fe fbe2 	bl	800d470 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecb2:	d10a      	bne.n	800ecca <prvAddCurrentTaskToDelayedList+0x3a>
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d007      	beq.n	800ecca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ecba:	4b1a      	ldr	r3, [pc, #104]	; (800ed24 <prvAddCurrentTaskToDelayedList+0x94>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	4819      	ldr	r0, [pc, #100]	; (800ed28 <prvAddCurrentTaskToDelayedList+0x98>)
 800ecc4:	f7fe fb77 	bl	800d3b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ecc8:	e026      	b.n	800ed18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ecca:	68fa      	ldr	r2, [r7, #12]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	4413      	add	r3, r2
 800ecd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ecd2:	4b14      	ldr	r3, [pc, #80]	; (800ed24 <prvAddCurrentTaskToDelayedList+0x94>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	68ba      	ldr	r2, [r7, #8]
 800ecd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ecda:	68ba      	ldr	r2, [r7, #8]
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d209      	bcs.n	800ecf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ece2:	4b12      	ldr	r3, [pc, #72]	; (800ed2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	4b0f      	ldr	r3, [pc, #60]	; (800ed24 <prvAddCurrentTaskToDelayedList+0x94>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	3304      	adds	r3, #4
 800ecec:	4619      	mov	r1, r3
 800ecee:	4610      	mov	r0, r2
 800ecf0:	f7fe fb85 	bl	800d3fe <vListInsert>
}
 800ecf4:	e010      	b.n	800ed18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ecf6:	4b0e      	ldr	r3, [pc, #56]	; (800ed30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	4b0a      	ldr	r3, [pc, #40]	; (800ed24 <prvAddCurrentTaskToDelayedList+0x94>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	3304      	adds	r3, #4
 800ed00:	4619      	mov	r1, r3
 800ed02:	4610      	mov	r0, r2
 800ed04:	f7fe fb7b 	bl	800d3fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ed08:	4b0a      	ldr	r3, [pc, #40]	; (800ed34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d202      	bcs.n	800ed18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ed12:	4a08      	ldr	r2, [pc, #32]	; (800ed34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	6013      	str	r3, [r2, #0]
}
 800ed18:	bf00      	nop
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	2000be74 	.word	0x2000be74
 800ed24:	2000b99c 	.word	0x2000b99c
 800ed28:	2000be5c 	.word	0x2000be5c
 800ed2c:	2000be2c 	.word	0x2000be2c
 800ed30:	2000be28 	.word	0x2000be28
 800ed34:	2000be90 	.word	0x2000be90

0800ed38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b08a      	sub	sp, #40	; 0x28
 800ed3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ed42:	f000 fb07 	bl	800f354 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ed46:	4b1c      	ldr	r3, [pc, #112]	; (800edb8 <xTimerCreateTimerTask+0x80>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d021      	beq.n	800ed92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ed52:	2300      	movs	r3, #0
 800ed54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ed56:	1d3a      	adds	r2, r7, #4
 800ed58:	f107 0108 	add.w	r1, r7, #8
 800ed5c:	f107 030c 	add.w	r3, r7, #12
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7fe fae1 	bl	800d328 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ed66:	6879      	ldr	r1, [r7, #4]
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	68fa      	ldr	r2, [r7, #12]
 800ed6c:	9202      	str	r2, [sp, #8]
 800ed6e:	9301      	str	r3, [sp, #4]
 800ed70:	2302      	movs	r3, #2
 800ed72:	9300      	str	r3, [sp, #0]
 800ed74:	2300      	movs	r3, #0
 800ed76:	460a      	mov	r2, r1
 800ed78:	4910      	ldr	r1, [pc, #64]	; (800edbc <xTimerCreateTimerTask+0x84>)
 800ed7a:	4811      	ldr	r0, [pc, #68]	; (800edc0 <xTimerCreateTimerTask+0x88>)
 800ed7c:	f7ff f88e 	bl	800de9c <xTaskCreateStatic>
 800ed80:	4603      	mov	r3, r0
 800ed82:	4a10      	ldr	r2, [pc, #64]	; (800edc4 <xTimerCreateTimerTask+0x8c>)
 800ed84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ed86:	4b0f      	ldr	r3, [pc, #60]	; (800edc4 <xTimerCreateTimerTask+0x8c>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d10a      	bne.n	800edae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ed98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	613b      	str	r3, [r7, #16]
}
 800edaa:	bf00      	nop
 800edac:	e7fe      	b.n	800edac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800edae:	697b      	ldr	r3, [r7, #20]
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3718      	adds	r7, #24
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}
 800edb8:	2000becc 	.word	0x2000becc
 800edbc:	0801c7c4 	.word	0x0801c7c4
 800edc0:	0800eefd 	.word	0x0800eefd
 800edc4:	2000bed0 	.word	0x2000bed0

0800edc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b08a      	sub	sp, #40	; 0x28
 800edcc:	af00      	add	r7, sp, #0
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	607a      	str	r2, [r7, #4]
 800edd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800edd6:	2300      	movs	r3, #0
 800edd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d10a      	bne.n	800edf6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ede0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede4:	f383 8811 	msr	BASEPRI, r3
 800ede8:	f3bf 8f6f 	isb	sy
 800edec:	f3bf 8f4f 	dsb	sy
 800edf0:	623b      	str	r3, [r7, #32]
}
 800edf2:	bf00      	nop
 800edf4:	e7fe      	b.n	800edf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800edf6:	4b1a      	ldr	r3, [pc, #104]	; (800ee60 <xTimerGenericCommand+0x98>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d02a      	beq.n	800ee54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	2b05      	cmp	r3, #5
 800ee0e:	dc18      	bgt.n	800ee42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ee10:	f7ff feb2 	bl	800eb78 <xTaskGetSchedulerState>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b02      	cmp	r3, #2
 800ee18:	d109      	bne.n	800ee2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ee1a:	4b11      	ldr	r3, [pc, #68]	; (800ee60 <xTimerGenericCommand+0x98>)
 800ee1c:	6818      	ldr	r0, [r3, #0]
 800ee1e:	f107 0110 	add.w	r1, r7, #16
 800ee22:	2300      	movs	r3, #0
 800ee24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee26:	f7fe fc51 	bl	800d6cc <xQueueGenericSend>
 800ee2a:	6278      	str	r0, [r7, #36]	; 0x24
 800ee2c:	e012      	b.n	800ee54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ee2e:	4b0c      	ldr	r3, [pc, #48]	; (800ee60 <xTimerGenericCommand+0x98>)
 800ee30:	6818      	ldr	r0, [r3, #0]
 800ee32:	f107 0110 	add.w	r1, r7, #16
 800ee36:	2300      	movs	r3, #0
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f7fe fc47 	bl	800d6cc <xQueueGenericSend>
 800ee3e:	6278      	str	r0, [r7, #36]	; 0x24
 800ee40:	e008      	b.n	800ee54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ee42:	4b07      	ldr	r3, [pc, #28]	; (800ee60 <xTimerGenericCommand+0x98>)
 800ee44:	6818      	ldr	r0, [r3, #0]
 800ee46:	f107 0110 	add.w	r1, r7, #16
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	683a      	ldr	r2, [r7, #0]
 800ee4e:	f7fe fd3b 	bl	800d8c8 <xQueueGenericSendFromISR>
 800ee52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ee54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3728      	adds	r7, #40	; 0x28
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	2000becc 	.word	0x2000becc

0800ee64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b088      	sub	sp, #32
 800ee68:	af02      	add	r7, sp, #8
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee6e:	4b22      	ldr	r3, [pc, #136]	; (800eef8 <prvProcessExpiredTimer+0x94>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	3304      	adds	r3, #4
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fe faf7 	bl	800d470 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee88:	f003 0304 	and.w	r3, r3, #4
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d022      	beq.n	800eed6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	699a      	ldr	r2, [r3, #24]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	18d1      	adds	r1, r2, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	683a      	ldr	r2, [r7, #0]
 800ee9c:	6978      	ldr	r0, [r7, #20]
 800ee9e:	f000 f8d1 	bl	800f044 <prvInsertTimerInActiveList>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d01f      	beq.n	800eee8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eea8:	2300      	movs	r3, #0
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	2300      	movs	r3, #0
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	2100      	movs	r1, #0
 800eeb2:	6978      	ldr	r0, [r7, #20]
 800eeb4:	f7ff ff88 	bl	800edc8 <xTimerGenericCommand>
 800eeb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d113      	bne.n	800eee8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec4:	f383 8811 	msr	BASEPRI, r3
 800eec8:	f3bf 8f6f 	isb	sy
 800eecc:	f3bf 8f4f 	dsb	sy
 800eed0:	60fb      	str	r3, [r7, #12]
}
 800eed2:	bf00      	nop
 800eed4:	e7fe      	b.n	800eed4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eedc:	f023 0301 	bic.w	r3, r3, #1
 800eee0:	b2da      	uxtb	r2, r3
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	6a1b      	ldr	r3, [r3, #32]
 800eeec:	6978      	ldr	r0, [r7, #20]
 800eeee:	4798      	blx	r3
}
 800eef0:	bf00      	nop
 800eef2:	3718      	adds	r7, #24
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	2000bec4 	.word	0x2000bec4

0800eefc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ef04:	f107 0308 	add.w	r3, r7, #8
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f000 f857 	bl	800efbc <prvGetNextExpireTime>
 800ef0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	4619      	mov	r1, r3
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f000 f803 	bl	800ef20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ef1a:	f000 f8d5 	bl	800f0c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ef1e:	e7f1      	b.n	800ef04 <prvTimerTask+0x8>

0800ef20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ef2a:	f7ff fa13 	bl	800e354 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ef2e:	f107 0308 	add.w	r3, r7, #8
 800ef32:	4618      	mov	r0, r3
 800ef34:	f000 f866 	bl	800f004 <prvSampleTimeNow>
 800ef38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d130      	bne.n	800efa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d10a      	bne.n	800ef5c <prvProcessTimerOrBlockTask+0x3c>
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d806      	bhi.n	800ef5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ef4e:	f7ff fa0f 	bl	800e370 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ef52:	68f9      	ldr	r1, [r7, #12]
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7ff ff85 	bl	800ee64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ef5a:	e024      	b.n	800efa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d008      	beq.n	800ef74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ef62:	4b13      	ldr	r3, [pc, #76]	; (800efb0 <prvProcessTimerOrBlockTask+0x90>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d101      	bne.n	800ef70 <prvProcessTimerOrBlockTask+0x50>
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e000      	b.n	800ef72 <prvProcessTimerOrBlockTask+0x52>
 800ef70:	2300      	movs	r3, #0
 800ef72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ef74:	4b0f      	ldr	r3, [pc, #60]	; (800efb4 <prvProcessTimerOrBlockTask+0x94>)
 800ef76:	6818      	ldr	r0, [r3, #0]
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	1ad3      	subs	r3, r2, r3
 800ef7e:	683a      	ldr	r2, [r7, #0]
 800ef80:	4619      	mov	r1, r3
 800ef82:	f7fe ff57 	bl	800de34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ef86:	f7ff f9f3 	bl	800e370 <xTaskResumeAll>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d10a      	bne.n	800efa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ef90:	4b09      	ldr	r3, [pc, #36]	; (800efb8 <prvProcessTimerOrBlockTask+0x98>)
 800ef92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef96:	601a      	str	r2, [r3, #0]
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	f3bf 8f6f 	isb	sy
}
 800efa0:	e001      	b.n	800efa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800efa2:	f7ff f9e5 	bl	800e370 <xTaskResumeAll>
}
 800efa6:	bf00      	nop
 800efa8:	3710      	adds	r7, #16
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
 800efae:	bf00      	nop
 800efb0:	2000bec8 	.word	0x2000bec8
 800efb4:	2000becc 	.word	0x2000becc
 800efb8:	e000ed04 	.word	0xe000ed04

0800efbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800efbc:	b480      	push	{r7}
 800efbe:	b085      	sub	sp, #20
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800efc4:	4b0e      	ldr	r3, [pc, #56]	; (800f000 <prvGetNextExpireTime+0x44>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d101      	bne.n	800efd2 <prvGetNextExpireTime+0x16>
 800efce:	2201      	movs	r2, #1
 800efd0:	e000      	b.n	800efd4 <prvGetNextExpireTime+0x18>
 800efd2:	2200      	movs	r2, #0
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d105      	bne.n	800efec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efe0:	4b07      	ldr	r3, [pc, #28]	; (800f000 <prvGetNextExpireTime+0x44>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	60fb      	str	r3, [r7, #12]
 800efea:	e001      	b.n	800eff0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800efec:	2300      	movs	r3, #0
 800efee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eff0:	68fb      	ldr	r3, [r7, #12]
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3714      	adds	r7, #20
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop
 800f000:	2000bec4 	.word	0x2000bec4

0800f004 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f00c:	f7ff fa4e 	bl	800e4ac <xTaskGetTickCount>
 800f010:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f012:	4b0b      	ldr	r3, [pc, #44]	; (800f040 <prvSampleTimeNow+0x3c>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d205      	bcs.n	800f028 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f01c:	f000 f936 	bl	800f28c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	601a      	str	r2, [r3, #0]
 800f026:	e002      	b.n	800f02e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2200      	movs	r2, #0
 800f02c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f02e:	4a04      	ldr	r2, [pc, #16]	; (800f040 <prvSampleTimeNow+0x3c>)
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f034:	68fb      	ldr	r3, [r7, #12]
}
 800f036:	4618      	mov	r0, r3
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	2000bed4 	.word	0x2000bed4

0800f044 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b086      	sub	sp, #24
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
 800f050:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f052:	2300      	movs	r3, #0
 800f054:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	68ba      	ldr	r2, [r7, #8]
 800f05a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	68fa      	ldr	r2, [r7, #12]
 800f060:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	429a      	cmp	r2, r3
 800f068:	d812      	bhi.n	800f090 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	1ad2      	subs	r2, r2, r3
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	699b      	ldr	r3, [r3, #24]
 800f074:	429a      	cmp	r2, r3
 800f076:	d302      	bcc.n	800f07e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f078:	2301      	movs	r3, #1
 800f07a:	617b      	str	r3, [r7, #20]
 800f07c:	e01b      	b.n	800f0b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f07e:	4b10      	ldr	r3, [pc, #64]	; (800f0c0 <prvInsertTimerInActiveList+0x7c>)
 800f080:	681a      	ldr	r2, [r3, #0]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	3304      	adds	r3, #4
 800f086:	4619      	mov	r1, r3
 800f088:	4610      	mov	r0, r2
 800f08a:	f7fe f9b8 	bl	800d3fe <vListInsert>
 800f08e:	e012      	b.n	800f0b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f090:	687a      	ldr	r2, [r7, #4]
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	429a      	cmp	r2, r3
 800f096:	d206      	bcs.n	800f0a6 <prvInsertTimerInActiveList+0x62>
 800f098:	68ba      	ldr	r2, [r7, #8]
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d302      	bcc.n	800f0a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	617b      	str	r3, [r7, #20]
 800f0a4:	e007      	b.n	800f0b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f0a6:	4b07      	ldr	r3, [pc, #28]	; (800f0c4 <prvInsertTimerInActiveList+0x80>)
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	3304      	adds	r3, #4
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	4610      	mov	r0, r2
 800f0b2:	f7fe f9a4 	bl	800d3fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f0b6:	697b      	ldr	r3, [r7, #20]
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3718      	adds	r7, #24
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	2000bec8 	.word	0x2000bec8
 800f0c4:	2000bec4 	.word	0x2000bec4

0800f0c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b08e      	sub	sp, #56	; 0x38
 800f0cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f0ce:	e0ca      	b.n	800f266 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	da18      	bge.n	800f108 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f0d6:	1d3b      	adds	r3, r7, #4
 800f0d8:	3304      	adds	r3, #4
 800f0da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d10a      	bne.n	800f0f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e6:	f383 8811 	msr	BASEPRI, r3
 800f0ea:	f3bf 8f6f 	isb	sy
 800f0ee:	f3bf 8f4f 	dsb	sy
 800f0f2:	61fb      	str	r3, [r7, #28]
}
 800f0f4:	bf00      	nop
 800f0f6:	e7fe      	b.n	800f0f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0fe:	6850      	ldr	r0, [r2, #4]
 800f100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f102:	6892      	ldr	r2, [r2, #8]
 800f104:	4611      	mov	r1, r2
 800f106:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	f2c0 80aa 	blt.w	800f264 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f116:	695b      	ldr	r3, [r3, #20]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d004      	beq.n	800f126 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11e:	3304      	adds	r3, #4
 800f120:	4618      	mov	r0, r3
 800f122:	f7fe f9a5 	bl	800d470 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f126:	463b      	mov	r3, r7
 800f128:	4618      	mov	r0, r3
 800f12a:	f7ff ff6b 	bl	800f004 <prvSampleTimeNow>
 800f12e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2b09      	cmp	r3, #9
 800f134:	f200 8097 	bhi.w	800f266 <prvProcessReceivedCommands+0x19e>
 800f138:	a201      	add	r2, pc, #4	; (adr r2, 800f140 <prvProcessReceivedCommands+0x78>)
 800f13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f13e:	bf00      	nop
 800f140:	0800f169 	.word	0x0800f169
 800f144:	0800f169 	.word	0x0800f169
 800f148:	0800f169 	.word	0x0800f169
 800f14c:	0800f1dd 	.word	0x0800f1dd
 800f150:	0800f1f1 	.word	0x0800f1f1
 800f154:	0800f23b 	.word	0x0800f23b
 800f158:	0800f169 	.word	0x0800f169
 800f15c:	0800f169 	.word	0x0800f169
 800f160:	0800f1dd 	.word	0x0800f1dd
 800f164:	0800f1f1 	.word	0x0800f1f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f16e:	f043 0301 	orr.w	r3, r3, #1
 800f172:	b2da      	uxtb	r2, r3
 800f174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f17a:	68ba      	ldr	r2, [r7, #8]
 800f17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17e:	699b      	ldr	r3, [r3, #24]
 800f180:	18d1      	adds	r1, r2, r3
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f188:	f7ff ff5c 	bl	800f044 <prvInsertTimerInActiveList>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d069      	beq.n	800f266 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f194:	6a1b      	ldr	r3, [r3, #32]
 800f196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f198:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1a0:	f003 0304 	and.w	r3, r3, #4
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d05e      	beq.n	800f266 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f1a8:	68ba      	ldr	r2, [r7, #8]
 800f1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ac:	699b      	ldr	r3, [r3, #24]
 800f1ae:	441a      	add	r2, r3
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1ba:	f7ff fe05 	bl	800edc8 <xTimerGenericCommand>
 800f1be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f1c0:	6a3b      	ldr	r3, [r7, #32]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d14f      	bne.n	800f266 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ca:	f383 8811 	msr	BASEPRI, r3
 800f1ce:	f3bf 8f6f 	isb	sy
 800f1d2:	f3bf 8f4f 	dsb	sy
 800f1d6:	61bb      	str	r3, [r7, #24]
}
 800f1d8:	bf00      	nop
 800f1da:	e7fe      	b.n	800f1da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1e2:	f023 0301 	bic.w	r3, r3, #1
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f1ee:	e03a      	b.n	800f266 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1f6:	f043 0301 	orr.w	r3, r3, #1
 800f1fa:	b2da      	uxtb	r2, r3
 800f1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f202:	68ba      	ldr	r2, [r7, #8]
 800f204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f206:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20a:	699b      	ldr	r3, [r3, #24]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d10a      	bne.n	800f226 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f214:	f383 8811 	msr	BASEPRI, r3
 800f218:	f3bf 8f6f 	isb	sy
 800f21c:	f3bf 8f4f 	dsb	sy
 800f220:	617b      	str	r3, [r7, #20]
}
 800f222:	bf00      	nop
 800f224:	e7fe      	b.n	800f224 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f228:	699a      	ldr	r2, [r3, #24]
 800f22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22c:	18d1      	adds	r1, r2, r3
 800f22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f234:	f7ff ff06 	bl	800f044 <prvInsertTimerInActiveList>
					break;
 800f238:	e015      	b.n	800f266 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f240:	f003 0302 	and.w	r3, r3, #2
 800f244:	2b00      	cmp	r3, #0
 800f246:	d103      	bne.n	800f250 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f24a:	f000 fbe1 	bl	800fa10 <vPortFree>
 800f24e:	e00a      	b.n	800f266 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f256:	f023 0301 	bic.w	r3, r3, #1
 800f25a:	b2da      	uxtb	r2, r3
 800f25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f262:	e000      	b.n	800f266 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f264:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f266:	4b08      	ldr	r3, [pc, #32]	; (800f288 <prvProcessReceivedCommands+0x1c0>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	1d39      	adds	r1, r7, #4
 800f26c:	2200      	movs	r2, #0
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fe fbc6 	bl	800da00 <xQueueReceive>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	f47f af2a 	bne.w	800f0d0 <prvProcessReceivedCommands+0x8>
	}
}
 800f27c:	bf00      	nop
 800f27e:	bf00      	nop
 800f280:	3730      	adds	r7, #48	; 0x30
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	2000becc 	.word	0x2000becc

0800f28c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b088      	sub	sp, #32
 800f290:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f292:	e048      	b.n	800f326 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f294:	4b2d      	ldr	r3, [pc, #180]	; (800f34c <prvSwitchTimerLists+0xc0>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	68db      	ldr	r3, [r3, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f29e:	4b2b      	ldr	r3, [pc, #172]	; (800f34c <prvSwitchTimerLists+0xc0>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	3304      	adds	r3, #4
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7fe f8df 	bl	800d470 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	6a1b      	ldr	r3, [r3, #32]
 800f2b6:	68f8      	ldr	r0, [r7, #12]
 800f2b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2c0:	f003 0304 	and.w	r3, r3, #4
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d02e      	beq.n	800f326 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	699b      	ldr	r3, [r3, #24]
 800f2cc:	693a      	ldr	r2, [r7, #16]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f2d2:	68ba      	ldr	r2, [r7, #8]
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d90e      	bls.n	800f2f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	68ba      	ldr	r2, [r7, #8]
 800f2de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	68fa      	ldr	r2, [r7, #12]
 800f2e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f2e6:	4b19      	ldr	r3, [pc, #100]	; (800f34c <prvSwitchTimerLists+0xc0>)
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	3304      	adds	r3, #4
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	4610      	mov	r0, r2
 800f2f2:	f7fe f884 	bl	800d3fe <vListInsert>
 800f2f6:	e016      	b.n	800f326 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	9300      	str	r3, [sp, #0]
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	693a      	ldr	r2, [r7, #16]
 800f300:	2100      	movs	r1, #0
 800f302:	68f8      	ldr	r0, [r7, #12]
 800f304:	f7ff fd60 	bl	800edc8 <xTimerGenericCommand>
 800f308:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d10a      	bne.n	800f326 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f314:	f383 8811 	msr	BASEPRI, r3
 800f318:	f3bf 8f6f 	isb	sy
 800f31c:	f3bf 8f4f 	dsb	sy
 800f320:	603b      	str	r3, [r7, #0]
}
 800f322:	bf00      	nop
 800f324:	e7fe      	b.n	800f324 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f326:	4b09      	ldr	r3, [pc, #36]	; (800f34c <prvSwitchTimerLists+0xc0>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d1b1      	bne.n	800f294 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f330:	4b06      	ldr	r3, [pc, #24]	; (800f34c <prvSwitchTimerLists+0xc0>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f336:	4b06      	ldr	r3, [pc, #24]	; (800f350 <prvSwitchTimerLists+0xc4>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	4a04      	ldr	r2, [pc, #16]	; (800f34c <prvSwitchTimerLists+0xc0>)
 800f33c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f33e:	4a04      	ldr	r2, [pc, #16]	; (800f350 <prvSwitchTimerLists+0xc4>)
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	6013      	str	r3, [r2, #0]
}
 800f344:	bf00      	nop
 800f346:	3718      	adds	r7, #24
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	2000bec4 	.word	0x2000bec4
 800f350:	2000bec8 	.word	0x2000bec8

0800f354 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f35a:	f000 f96b 	bl	800f634 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f35e:	4b15      	ldr	r3, [pc, #84]	; (800f3b4 <prvCheckForValidListAndQueue+0x60>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d120      	bne.n	800f3a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f366:	4814      	ldr	r0, [pc, #80]	; (800f3b8 <prvCheckForValidListAndQueue+0x64>)
 800f368:	f7fd fff8 	bl	800d35c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f36c:	4813      	ldr	r0, [pc, #76]	; (800f3bc <prvCheckForValidListAndQueue+0x68>)
 800f36e:	f7fd fff5 	bl	800d35c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f372:	4b13      	ldr	r3, [pc, #76]	; (800f3c0 <prvCheckForValidListAndQueue+0x6c>)
 800f374:	4a10      	ldr	r2, [pc, #64]	; (800f3b8 <prvCheckForValidListAndQueue+0x64>)
 800f376:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f378:	4b12      	ldr	r3, [pc, #72]	; (800f3c4 <prvCheckForValidListAndQueue+0x70>)
 800f37a:	4a10      	ldr	r2, [pc, #64]	; (800f3bc <prvCheckForValidListAndQueue+0x68>)
 800f37c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f37e:	2300      	movs	r3, #0
 800f380:	9300      	str	r3, [sp, #0]
 800f382:	4b11      	ldr	r3, [pc, #68]	; (800f3c8 <prvCheckForValidListAndQueue+0x74>)
 800f384:	4a11      	ldr	r2, [pc, #68]	; (800f3cc <prvCheckForValidListAndQueue+0x78>)
 800f386:	2110      	movs	r1, #16
 800f388:	200a      	movs	r0, #10
 800f38a:	f7fe f903 	bl	800d594 <xQueueGenericCreateStatic>
 800f38e:	4603      	mov	r3, r0
 800f390:	4a08      	ldr	r2, [pc, #32]	; (800f3b4 <prvCheckForValidListAndQueue+0x60>)
 800f392:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f394:	4b07      	ldr	r3, [pc, #28]	; (800f3b4 <prvCheckForValidListAndQueue+0x60>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d005      	beq.n	800f3a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f39c:	4b05      	ldr	r3, [pc, #20]	; (800f3b4 <prvCheckForValidListAndQueue+0x60>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	490b      	ldr	r1, [pc, #44]	; (800f3d0 <prvCheckForValidListAndQueue+0x7c>)
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7fe fd1c 	bl	800dde0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f3a8:	f000 f974 	bl	800f694 <vPortExitCritical>
}
 800f3ac:	bf00      	nop
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	2000becc 	.word	0x2000becc
 800f3b8:	2000be9c 	.word	0x2000be9c
 800f3bc:	2000beb0 	.word	0x2000beb0
 800f3c0:	2000bec4 	.word	0x2000bec4
 800f3c4:	2000bec8 	.word	0x2000bec8
 800f3c8:	2000bf78 	.word	0x2000bf78
 800f3cc:	2000bed8 	.word	0x2000bed8
 800f3d0:	0801c7cc 	.word	0x0801c7cc

0800f3d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b085      	sub	sp, #20
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	60b9      	str	r1, [r7, #8]
 800f3de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	3b04      	subs	r3, #4
 800f3e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f3ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	3b04      	subs	r3, #4
 800f3f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	f023 0201 	bic.w	r2, r3, #1
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	3b04      	subs	r3, #4
 800f402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f404:	4a0c      	ldr	r2, [pc, #48]	; (800f438 <pxPortInitialiseStack+0x64>)
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	3b14      	subs	r3, #20
 800f40e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	3b04      	subs	r3, #4
 800f41a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f06f 0202 	mvn.w	r2, #2
 800f422:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	3b20      	subs	r3, #32
 800f428:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f42a:	68fb      	ldr	r3, [r7, #12]
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3714      	adds	r7, #20
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr
 800f438:	0800f43d 	.word	0x0800f43d

0800f43c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f43c:	b480      	push	{r7}
 800f43e:	b085      	sub	sp, #20
 800f440:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f442:	2300      	movs	r3, #0
 800f444:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f446:	4b12      	ldr	r3, [pc, #72]	; (800f490 <prvTaskExitError+0x54>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f44e:	d00a      	beq.n	800f466 <prvTaskExitError+0x2a>
	__asm volatile
 800f450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f454:	f383 8811 	msr	BASEPRI, r3
 800f458:	f3bf 8f6f 	isb	sy
 800f45c:	f3bf 8f4f 	dsb	sy
 800f460:	60fb      	str	r3, [r7, #12]
}
 800f462:	bf00      	nop
 800f464:	e7fe      	b.n	800f464 <prvTaskExitError+0x28>
	__asm volatile
 800f466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46a:	f383 8811 	msr	BASEPRI, r3
 800f46e:	f3bf 8f6f 	isb	sy
 800f472:	f3bf 8f4f 	dsb	sy
 800f476:	60bb      	str	r3, [r7, #8]
}
 800f478:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f47a:	bf00      	nop
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d0fc      	beq.n	800f47c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f482:	bf00      	nop
 800f484:	bf00      	nop
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr
 800f490:	2000009c 	.word	0x2000009c
	...

0800f4a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f4a0:	4b07      	ldr	r3, [pc, #28]	; (800f4c0 <pxCurrentTCBConst2>)
 800f4a2:	6819      	ldr	r1, [r3, #0]
 800f4a4:	6808      	ldr	r0, [r1, #0]
 800f4a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4aa:	f380 8809 	msr	PSP, r0
 800f4ae:	f3bf 8f6f 	isb	sy
 800f4b2:	f04f 0000 	mov.w	r0, #0
 800f4b6:	f380 8811 	msr	BASEPRI, r0
 800f4ba:	4770      	bx	lr
 800f4bc:	f3af 8000 	nop.w

0800f4c0 <pxCurrentTCBConst2>:
 800f4c0:	2000b99c 	.word	0x2000b99c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f4c4:	bf00      	nop
 800f4c6:	bf00      	nop

0800f4c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f4c8:	4808      	ldr	r0, [pc, #32]	; (800f4ec <prvPortStartFirstTask+0x24>)
 800f4ca:	6800      	ldr	r0, [r0, #0]
 800f4cc:	6800      	ldr	r0, [r0, #0]
 800f4ce:	f380 8808 	msr	MSP, r0
 800f4d2:	f04f 0000 	mov.w	r0, #0
 800f4d6:	f380 8814 	msr	CONTROL, r0
 800f4da:	b662      	cpsie	i
 800f4dc:	b661      	cpsie	f
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	f3bf 8f6f 	isb	sy
 800f4e6:	df00      	svc	0
 800f4e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f4ea:	bf00      	nop
 800f4ec:	e000ed08 	.word	0xe000ed08

0800f4f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b086      	sub	sp, #24
 800f4f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f4f6:	4b46      	ldr	r3, [pc, #280]	; (800f610 <xPortStartScheduler+0x120>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4a46      	ldr	r2, [pc, #280]	; (800f614 <xPortStartScheduler+0x124>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d10a      	bne.n	800f516 <xPortStartScheduler+0x26>
	__asm volatile
 800f500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f504:	f383 8811 	msr	BASEPRI, r3
 800f508:	f3bf 8f6f 	isb	sy
 800f50c:	f3bf 8f4f 	dsb	sy
 800f510:	613b      	str	r3, [r7, #16]
}
 800f512:	bf00      	nop
 800f514:	e7fe      	b.n	800f514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f516:	4b3e      	ldr	r3, [pc, #248]	; (800f610 <xPortStartScheduler+0x120>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	4a3f      	ldr	r2, [pc, #252]	; (800f618 <xPortStartScheduler+0x128>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d10a      	bne.n	800f536 <xPortStartScheduler+0x46>
	__asm volatile
 800f520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f524:	f383 8811 	msr	BASEPRI, r3
 800f528:	f3bf 8f6f 	isb	sy
 800f52c:	f3bf 8f4f 	dsb	sy
 800f530:	60fb      	str	r3, [r7, #12]
}
 800f532:	bf00      	nop
 800f534:	e7fe      	b.n	800f534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f536:	4b39      	ldr	r3, [pc, #228]	; (800f61c <xPortStartScheduler+0x12c>)
 800f538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	22ff      	movs	r2, #255	; 0xff
 800f546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f550:	78fb      	ldrb	r3, [r7, #3]
 800f552:	b2db      	uxtb	r3, r3
 800f554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f558:	b2da      	uxtb	r2, r3
 800f55a:	4b31      	ldr	r3, [pc, #196]	; (800f620 <xPortStartScheduler+0x130>)
 800f55c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f55e:	4b31      	ldr	r3, [pc, #196]	; (800f624 <xPortStartScheduler+0x134>)
 800f560:	2207      	movs	r2, #7
 800f562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f564:	e009      	b.n	800f57a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f566:	4b2f      	ldr	r3, [pc, #188]	; (800f624 <xPortStartScheduler+0x134>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	3b01      	subs	r3, #1
 800f56c:	4a2d      	ldr	r2, [pc, #180]	; (800f624 <xPortStartScheduler+0x134>)
 800f56e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f570:	78fb      	ldrb	r3, [r7, #3]
 800f572:	b2db      	uxtb	r3, r3
 800f574:	005b      	lsls	r3, r3, #1
 800f576:	b2db      	uxtb	r3, r3
 800f578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f57a:	78fb      	ldrb	r3, [r7, #3]
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f582:	2b80      	cmp	r3, #128	; 0x80
 800f584:	d0ef      	beq.n	800f566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f586:	4b27      	ldr	r3, [pc, #156]	; (800f624 <xPortStartScheduler+0x134>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f1c3 0307 	rsb	r3, r3, #7
 800f58e:	2b04      	cmp	r3, #4
 800f590:	d00a      	beq.n	800f5a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f596:	f383 8811 	msr	BASEPRI, r3
 800f59a:	f3bf 8f6f 	isb	sy
 800f59e:	f3bf 8f4f 	dsb	sy
 800f5a2:	60bb      	str	r3, [r7, #8]
}
 800f5a4:	bf00      	nop
 800f5a6:	e7fe      	b.n	800f5a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f5a8:	4b1e      	ldr	r3, [pc, #120]	; (800f624 <xPortStartScheduler+0x134>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	021b      	lsls	r3, r3, #8
 800f5ae:	4a1d      	ldr	r2, [pc, #116]	; (800f624 <xPortStartScheduler+0x134>)
 800f5b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f5b2:	4b1c      	ldr	r3, [pc, #112]	; (800f624 <xPortStartScheduler+0x134>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f5ba:	4a1a      	ldr	r2, [pc, #104]	; (800f624 <xPortStartScheduler+0x134>)
 800f5bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	b2da      	uxtb	r2, r3
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f5c6:	4b18      	ldr	r3, [pc, #96]	; (800f628 <xPortStartScheduler+0x138>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4a17      	ldr	r2, [pc, #92]	; (800f628 <xPortStartScheduler+0x138>)
 800f5cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f5d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f5d2:	4b15      	ldr	r3, [pc, #84]	; (800f628 <xPortStartScheduler+0x138>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4a14      	ldr	r2, [pc, #80]	; (800f628 <xPortStartScheduler+0x138>)
 800f5d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f5dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f5de:	f000 f8dd 	bl	800f79c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f5e2:	4b12      	ldr	r3, [pc, #72]	; (800f62c <xPortStartScheduler+0x13c>)
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f5e8:	f000 f8fc 	bl	800f7e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f5ec:	4b10      	ldr	r3, [pc, #64]	; (800f630 <xPortStartScheduler+0x140>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	4a0f      	ldr	r2, [pc, #60]	; (800f630 <xPortStartScheduler+0x140>)
 800f5f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f5f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f5f8:	f7ff ff66 	bl	800f4c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f5fc:	f7ff f820 	bl	800e640 <vTaskSwitchContext>
	prvTaskExitError();
 800f600:	f7ff ff1c 	bl	800f43c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f604:	2300      	movs	r3, #0
}
 800f606:	4618      	mov	r0, r3
 800f608:	3718      	adds	r7, #24
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	e000ed00 	.word	0xe000ed00
 800f614:	410fc271 	.word	0x410fc271
 800f618:	410fc270 	.word	0x410fc270
 800f61c:	e000e400 	.word	0xe000e400
 800f620:	2000bfc8 	.word	0x2000bfc8
 800f624:	2000bfcc 	.word	0x2000bfcc
 800f628:	e000ed20 	.word	0xe000ed20
 800f62c:	2000009c 	.word	0x2000009c
 800f630:	e000ef34 	.word	0xe000ef34

0800f634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
	__asm volatile
 800f63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f63e:	f383 8811 	msr	BASEPRI, r3
 800f642:	f3bf 8f6f 	isb	sy
 800f646:	f3bf 8f4f 	dsb	sy
 800f64a:	607b      	str	r3, [r7, #4]
}
 800f64c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f64e:	4b0f      	ldr	r3, [pc, #60]	; (800f68c <vPortEnterCritical+0x58>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	3301      	adds	r3, #1
 800f654:	4a0d      	ldr	r2, [pc, #52]	; (800f68c <vPortEnterCritical+0x58>)
 800f656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f658:	4b0c      	ldr	r3, [pc, #48]	; (800f68c <vPortEnterCritical+0x58>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d10f      	bne.n	800f680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f660:	4b0b      	ldr	r3, [pc, #44]	; (800f690 <vPortEnterCritical+0x5c>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	b2db      	uxtb	r3, r3
 800f666:	2b00      	cmp	r3, #0
 800f668:	d00a      	beq.n	800f680 <vPortEnterCritical+0x4c>
	__asm volatile
 800f66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66e:	f383 8811 	msr	BASEPRI, r3
 800f672:	f3bf 8f6f 	isb	sy
 800f676:	f3bf 8f4f 	dsb	sy
 800f67a:	603b      	str	r3, [r7, #0]
}
 800f67c:	bf00      	nop
 800f67e:	e7fe      	b.n	800f67e <vPortEnterCritical+0x4a>
	}
}
 800f680:	bf00      	nop
 800f682:	370c      	adds	r7, #12
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr
 800f68c:	2000009c 	.word	0x2000009c
 800f690:	e000ed04 	.word	0xe000ed04

0800f694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f69a:	4b12      	ldr	r3, [pc, #72]	; (800f6e4 <vPortExitCritical+0x50>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d10a      	bne.n	800f6b8 <vPortExitCritical+0x24>
	__asm volatile
 800f6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a6:	f383 8811 	msr	BASEPRI, r3
 800f6aa:	f3bf 8f6f 	isb	sy
 800f6ae:	f3bf 8f4f 	dsb	sy
 800f6b2:	607b      	str	r3, [r7, #4]
}
 800f6b4:	bf00      	nop
 800f6b6:	e7fe      	b.n	800f6b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f6b8:	4b0a      	ldr	r3, [pc, #40]	; (800f6e4 <vPortExitCritical+0x50>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	4a09      	ldr	r2, [pc, #36]	; (800f6e4 <vPortExitCritical+0x50>)
 800f6c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f6c2:	4b08      	ldr	r3, [pc, #32]	; (800f6e4 <vPortExitCritical+0x50>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d105      	bne.n	800f6d6 <vPortExitCritical+0x42>
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	f383 8811 	msr	BASEPRI, r3
}
 800f6d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f6d6:	bf00      	nop
 800f6d8:	370c      	adds	r7, #12
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e0:	4770      	bx	lr
 800f6e2:	bf00      	nop
 800f6e4:	2000009c 	.word	0x2000009c
	...

0800f6f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f6f0:	f3ef 8009 	mrs	r0, PSP
 800f6f4:	f3bf 8f6f 	isb	sy
 800f6f8:	4b15      	ldr	r3, [pc, #84]	; (800f750 <pxCurrentTCBConst>)
 800f6fa:	681a      	ldr	r2, [r3, #0]
 800f6fc:	f01e 0f10 	tst.w	lr, #16
 800f700:	bf08      	it	eq
 800f702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f70a:	6010      	str	r0, [r2, #0]
 800f70c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f710:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f714:	f380 8811 	msr	BASEPRI, r0
 800f718:	f3bf 8f4f 	dsb	sy
 800f71c:	f3bf 8f6f 	isb	sy
 800f720:	f7fe ff8e 	bl	800e640 <vTaskSwitchContext>
 800f724:	f04f 0000 	mov.w	r0, #0
 800f728:	f380 8811 	msr	BASEPRI, r0
 800f72c:	bc09      	pop	{r0, r3}
 800f72e:	6819      	ldr	r1, [r3, #0]
 800f730:	6808      	ldr	r0, [r1, #0]
 800f732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f736:	f01e 0f10 	tst.w	lr, #16
 800f73a:	bf08      	it	eq
 800f73c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f740:	f380 8809 	msr	PSP, r0
 800f744:	f3bf 8f6f 	isb	sy
 800f748:	4770      	bx	lr
 800f74a:	bf00      	nop
 800f74c:	f3af 8000 	nop.w

0800f750 <pxCurrentTCBConst>:
 800f750:	2000b99c 	.word	0x2000b99c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f754:	bf00      	nop
 800f756:	bf00      	nop

0800f758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
	__asm volatile
 800f75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f762:	f383 8811 	msr	BASEPRI, r3
 800f766:	f3bf 8f6f 	isb	sy
 800f76a:	f3bf 8f4f 	dsb	sy
 800f76e:	607b      	str	r3, [r7, #4]
}
 800f770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f772:	f7fe feab 	bl	800e4cc <xTaskIncrementTick>
 800f776:	4603      	mov	r3, r0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d003      	beq.n	800f784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f77c:	4b06      	ldr	r3, [pc, #24]	; (800f798 <xPortSysTickHandler+0x40>)
 800f77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f782:	601a      	str	r2, [r3, #0]
 800f784:	2300      	movs	r3, #0
 800f786:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	f383 8811 	msr	BASEPRI, r3
}
 800f78e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f790:	bf00      	nop
 800f792:	3708      	adds	r7, #8
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}
 800f798:	e000ed04 	.word	0xe000ed04

0800f79c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f79c:	b480      	push	{r7}
 800f79e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f7a0:	4b0b      	ldr	r3, [pc, #44]	; (800f7d0 <vPortSetupTimerInterrupt+0x34>)
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f7a6:	4b0b      	ldr	r3, [pc, #44]	; (800f7d4 <vPortSetupTimerInterrupt+0x38>)
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f7ac:	4b0a      	ldr	r3, [pc, #40]	; (800f7d8 <vPortSetupTimerInterrupt+0x3c>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	4a0a      	ldr	r2, [pc, #40]	; (800f7dc <vPortSetupTimerInterrupt+0x40>)
 800f7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f7b6:	099b      	lsrs	r3, r3, #6
 800f7b8:	4a09      	ldr	r2, [pc, #36]	; (800f7e0 <vPortSetupTimerInterrupt+0x44>)
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f7be:	4b04      	ldr	r3, [pc, #16]	; (800f7d0 <vPortSetupTimerInterrupt+0x34>)
 800f7c0:	2207      	movs	r2, #7
 800f7c2:	601a      	str	r2, [r3, #0]
}
 800f7c4:	bf00      	nop
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	e000e010 	.word	0xe000e010
 800f7d4:	e000e018 	.word	0xe000e018
 800f7d8:	20000004 	.word	0x20000004
 800f7dc:	10624dd3 	.word	0x10624dd3
 800f7e0:	e000e014 	.word	0xe000e014

0800f7e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f7e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f7f4 <vPortEnableVFP+0x10>
 800f7e8:	6801      	ldr	r1, [r0, #0]
 800f7ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f7ee:	6001      	str	r1, [r0, #0]
 800f7f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f7f2:	bf00      	nop
 800f7f4:	e000ed88 	.word	0xe000ed88

0800f7f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f7fe:	f3ef 8305 	mrs	r3, IPSR
 800f802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	2b0f      	cmp	r3, #15
 800f808:	d914      	bls.n	800f834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f80a:	4a17      	ldr	r2, [pc, #92]	; (800f868 <vPortValidateInterruptPriority+0x70>)
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	4413      	add	r3, r2
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f814:	4b15      	ldr	r3, [pc, #84]	; (800f86c <vPortValidateInterruptPriority+0x74>)
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	7afa      	ldrb	r2, [r7, #11]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d20a      	bcs.n	800f834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f822:	f383 8811 	msr	BASEPRI, r3
 800f826:	f3bf 8f6f 	isb	sy
 800f82a:	f3bf 8f4f 	dsb	sy
 800f82e:	607b      	str	r3, [r7, #4]
}
 800f830:	bf00      	nop
 800f832:	e7fe      	b.n	800f832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f834:	4b0e      	ldr	r3, [pc, #56]	; (800f870 <vPortValidateInterruptPriority+0x78>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f83c:	4b0d      	ldr	r3, [pc, #52]	; (800f874 <vPortValidateInterruptPriority+0x7c>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	429a      	cmp	r2, r3
 800f842:	d90a      	bls.n	800f85a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f848:	f383 8811 	msr	BASEPRI, r3
 800f84c:	f3bf 8f6f 	isb	sy
 800f850:	f3bf 8f4f 	dsb	sy
 800f854:	603b      	str	r3, [r7, #0]
}
 800f856:	bf00      	nop
 800f858:	e7fe      	b.n	800f858 <vPortValidateInterruptPriority+0x60>
	}
 800f85a:	bf00      	nop
 800f85c:	3714      	adds	r7, #20
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop
 800f868:	e000e3f0 	.word	0xe000e3f0
 800f86c:	2000bfc8 	.word	0x2000bfc8
 800f870:	e000ed0c 	.word	0xe000ed0c
 800f874:	2000bfcc 	.word	0x2000bfcc

0800f878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b08a      	sub	sp, #40	; 0x28
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f880:	2300      	movs	r3, #0
 800f882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f884:	f7fe fd66 	bl	800e354 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f888:	4b5b      	ldr	r3, [pc, #364]	; (800f9f8 <pvPortMalloc+0x180>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d101      	bne.n	800f894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f890:	f000 f920 	bl	800fad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f894:	4b59      	ldr	r3, [pc, #356]	; (800f9fc <pvPortMalloc+0x184>)
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4013      	ands	r3, r2
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	f040 8093 	bne.w	800f9c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d01d      	beq.n	800f8e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f8a8:	2208      	movs	r2, #8
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f003 0307 	and.w	r3, r3, #7
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d014      	beq.n	800f8e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f023 0307 	bic.w	r3, r3, #7
 800f8c0:	3308      	adds	r3, #8
 800f8c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f003 0307 	and.w	r3, r3, #7
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00a      	beq.n	800f8e4 <pvPortMalloc+0x6c>
	__asm volatile
 800f8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	617b      	str	r3, [r7, #20]
}
 800f8e0:	bf00      	nop
 800f8e2:	e7fe      	b.n	800f8e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d06e      	beq.n	800f9c8 <pvPortMalloc+0x150>
 800f8ea:	4b45      	ldr	r3, [pc, #276]	; (800fa00 <pvPortMalloc+0x188>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	687a      	ldr	r2, [r7, #4]
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d869      	bhi.n	800f9c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f8f4:	4b43      	ldr	r3, [pc, #268]	; (800fa04 <pvPortMalloc+0x18c>)
 800f8f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f8f8:	4b42      	ldr	r3, [pc, #264]	; (800fa04 <pvPortMalloc+0x18c>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f8fe:	e004      	b.n	800f90a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	687a      	ldr	r2, [r7, #4]
 800f910:	429a      	cmp	r2, r3
 800f912:	d903      	bls.n	800f91c <pvPortMalloc+0xa4>
 800f914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d1f1      	bne.n	800f900 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f91c:	4b36      	ldr	r3, [pc, #216]	; (800f9f8 <pvPortMalloc+0x180>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f922:	429a      	cmp	r2, r3
 800f924:	d050      	beq.n	800f9c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f926:	6a3b      	ldr	r3, [r7, #32]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	2208      	movs	r2, #8
 800f92c:	4413      	add	r3, r2
 800f92e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	6a3b      	ldr	r3, [r7, #32]
 800f936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93a:	685a      	ldr	r2, [r3, #4]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	1ad2      	subs	r2, r2, r3
 800f940:	2308      	movs	r3, #8
 800f942:	005b      	lsls	r3, r3, #1
 800f944:	429a      	cmp	r2, r3
 800f946:	d91f      	bls.n	800f988 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	4413      	add	r3, r2
 800f94e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f950:	69bb      	ldr	r3, [r7, #24]
 800f952:	f003 0307 	and.w	r3, r3, #7
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00a      	beq.n	800f970 <pvPortMalloc+0xf8>
	__asm volatile
 800f95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f95e:	f383 8811 	msr	BASEPRI, r3
 800f962:	f3bf 8f6f 	isb	sy
 800f966:	f3bf 8f4f 	dsb	sy
 800f96a:	613b      	str	r3, [r7, #16]
}
 800f96c:	bf00      	nop
 800f96e:	e7fe      	b.n	800f96e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f972:	685a      	ldr	r2, [r3, #4]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	1ad2      	subs	r2, r2, r3
 800f978:	69bb      	ldr	r3, [r7, #24]
 800f97a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f982:	69b8      	ldr	r0, [r7, #24]
 800f984:	f000 f908 	bl	800fb98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f988:	4b1d      	ldr	r3, [pc, #116]	; (800fa00 <pvPortMalloc+0x188>)
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	1ad3      	subs	r3, r2, r3
 800f992:	4a1b      	ldr	r2, [pc, #108]	; (800fa00 <pvPortMalloc+0x188>)
 800f994:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f996:	4b1a      	ldr	r3, [pc, #104]	; (800fa00 <pvPortMalloc+0x188>)
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	4b1b      	ldr	r3, [pc, #108]	; (800fa08 <pvPortMalloc+0x190>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d203      	bcs.n	800f9aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f9a2:	4b17      	ldr	r3, [pc, #92]	; (800fa00 <pvPortMalloc+0x188>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	4a18      	ldr	r2, [pc, #96]	; (800fa08 <pvPortMalloc+0x190>)
 800f9a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ac:	685a      	ldr	r2, [r3, #4]
 800f9ae:	4b13      	ldr	r3, [pc, #76]	; (800f9fc <pvPortMalloc+0x184>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	431a      	orrs	r2, r3
 800f9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f9be:	4b13      	ldr	r3, [pc, #76]	; (800fa0c <pvPortMalloc+0x194>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	4a11      	ldr	r2, [pc, #68]	; (800fa0c <pvPortMalloc+0x194>)
 800f9c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f9c8:	f7fe fcd2 	bl	800e370 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	f003 0307 	and.w	r3, r3, #7
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d00a      	beq.n	800f9ec <pvPortMalloc+0x174>
	__asm volatile
 800f9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9da:	f383 8811 	msr	BASEPRI, r3
 800f9de:	f3bf 8f6f 	isb	sy
 800f9e2:	f3bf 8f4f 	dsb	sy
 800f9e6:	60fb      	str	r3, [r7, #12]
}
 800f9e8:	bf00      	nop
 800f9ea:	e7fe      	b.n	800f9ea <pvPortMalloc+0x172>
	return pvReturn;
 800f9ec:	69fb      	ldr	r3, [r7, #28]
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3728      	adds	r7, #40	; 0x28
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
 800f9f6:	bf00      	nop
 800f9f8:	2000fbd8 	.word	0x2000fbd8
 800f9fc:	2000fbec 	.word	0x2000fbec
 800fa00:	2000fbdc 	.word	0x2000fbdc
 800fa04:	2000fbd0 	.word	0x2000fbd0
 800fa08:	2000fbe0 	.word	0x2000fbe0
 800fa0c:	2000fbe4 	.word	0x2000fbe4

0800fa10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b086      	sub	sp, #24
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d04d      	beq.n	800fabe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fa22:	2308      	movs	r3, #8
 800fa24:	425b      	negs	r3, r3
 800fa26:	697a      	ldr	r2, [r7, #20]
 800fa28:	4413      	add	r3, r2
 800fa2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	685a      	ldr	r2, [r3, #4]
 800fa34:	4b24      	ldr	r3, [pc, #144]	; (800fac8 <vPortFree+0xb8>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4013      	ands	r3, r2
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d10a      	bne.n	800fa54 <vPortFree+0x44>
	__asm volatile
 800fa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	60fb      	str	r3, [r7, #12]
}
 800fa50:	bf00      	nop
 800fa52:	e7fe      	b.n	800fa52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00a      	beq.n	800fa72 <vPortFree+0x62>
	__asm volatile
 800fa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa60:	f383 8811 	msr	BASEPRI, r3
 800fa64:	f3bf 8f6f 	isb	sy
 800fa68:	f3bf 8f4f 	dsb	sy
 800fa6c:	60bb      	str	r3, [r7, #8]
}
 800fa6e:	bf00      	nop
 800fa70:	e7fe      	b.n	800fa70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	685a      	ldr	r2, [r3, #4]
 800fa76:	4b14      	ldr	r3, [pc, #80]	; (800fac8 <vPortFree+0xb8>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	4013      	ands	r3, r2
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d01e      	beq.n	800fabe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d11a      	bne.n	800fabe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	685a      	ldr	r2, [r3, #4]
 800fa8c:	4b0e      	ldr	r3, [pc, #56]	; (800fac8 <vPortFree+0xb8>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	43db      	mvns	r3, r3
 800fa92:	401a      	ands	r2, r3
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fa98:	f7fe fc5c 	bl	800e354 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	685a      	ldr	r2, [r3, #4]
 800faa0:	4b0a      	ldr	r3, [pc, #40]	; (800facc <vPortFree+0xbc>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4413      	add	r3, r2
 800faa6:	4a09      	ldr	r2, [pc, #36]	; (800facc <vPortFree+0xbc>)
 800faa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800faaa:	6938      	ldr	r0, [r7, #16]
 800faac:	f000 f874 	bl	800fb98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fab0:	4b07      	ldr	r3, [pc, #28]	; (800fad0 <vPortFree+0xc0>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	3301      	adds	r3, #1
 800fab6:	4a06      	ldr	r2, [pc, #24]	; (800fad0 <vPortFree+0xc0>)
 800fab8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800faba:	f7fe fc59 	bl	800e370 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fabe:	bf00      	nop
 800fac0:	3718      	adds	r7, #24
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop
 800fac8:	2000fbec 	.word	0x2000fbec
 800facc:	2000fbdc 	.word	0x2000fbdc
 800fad0:	2000fbe8 	.word	0x2000fbe8

0800fad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fad4:	b480      	push	{r7}
 800fad6:	b085      	sub	sp, #20
 800fad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fada:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fae0:	4b27      	ldr	r3, [pc, #156]	; (800fb80 <prvHeapInit+0xac>)
 800fae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f003 0307 	and.w	r3, r3, #7
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00c      	beq.n	800fb08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	3307      	adds	r3, #7
 800faf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	f023 0307 	bic.w	r3, r3, #7
 800fafa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fafc:	68ba      	ldr	r2, [r7, #8]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	4a1f      	ldr	r2, [pc, #124]	; (800fb80 <prvHeapInit+0xac>)
 800fb04:	4413      	add	r3, r2
 800fb06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fb0c:	4a1d      	ldr	r2, [pc, #116]	; (800fb84 <prvHeapInit+0xb0>)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fb12:	4b1c      	ldr	r3, [pc, #112]	; (800fb84 <prvHeapInit+0xb0>)
 800fb14:	2200      	movs	r2, #0
 800fb16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	68ba      	ldr	r2, [r7, #8]
 800fb1c:	4413      	add	r3, r2
 800fb1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fb20:	2208      	movs	r2, #8
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	1a9b      	subs	r3, r3, r2
 800fb26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	f023 0307 	bic.w	r3, r3, #7
 800fb2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	4a15      	ldr	r2, [pc, #84]	; (800fb88 <prvHeapInit+0xb4>)
 800fb34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fb36:	4b14      	ldr	r3, [pc, #80]	; (800fb88 <prvHeapInit+0xb4>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fb3e:	4b12      	ldr	r3, [pc, #72]	; (800fb88 <prvHeapInit+0xb4>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2200      	movs	r2, #0
 800fb44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	68fa      	ldr	r2, [r7, #12]
 800fb4e:	1ad2      	subs	r2, r2, r3
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fb54:	4b0c      	ldr	r3, [pc, #48]	; (800fb88 <prvHeapInit+0xb4>)
 800fb56:	681a      	ldr	r2, [r3, #0]
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	4a0a      	ldr	r2, [pc, #40]	; (800fb8c <prvHeapInit+0xb8>)
 800fb62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	4a09      	ldr	r2, [pc, #36]	; (800fb90 <prvHeapInit+0xbc>)
 800fb6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fb6c:	4b09      	ldr	r3, [pc, #36]	; (800fb94 <prvHeapInit+0xc0>)
 800fb6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fb72:	601a      	str	r2, [r3, #0]
}
 800fb74:	bf00      	nop
 800fb76:	3714      	adds	r7, #20
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr
 800fb80:	2000bfd0 	.word	0x2000bfd0
 800fb84:	2000fbd0 	.word	0x2000fbd0
 800fb88:	2000fbd8 	.word	0x2000fbd8
 800fb8c:	2000fbe0 	.word	0x2000fbe0
 800fb90:	2000fbdc 	.word	0x2000fbdc
 800fb94:	2000fbec 	.word	0x2000fbec

0800fb98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b085      	sub	sp, #20
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fba0:	4b28      	ldr	r3, [pc, #160]	; (800fc44 <prvInsertBlockIntoFreeList+0xac>)
 800fba2:	60fb      	str	r3, [r7, #12]
 800fba4:	e002      	b.n	800fbac <prvInsertBlockIntoFreeList+0x14>
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	60fb      	str	r3, [r7, #12]
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d8f7      	bhi.n	800fba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	68ba      	ldr	r2, [r7, #8]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d108      	bne.n	800fbda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	685a      	ldr	r2, [r3, #4]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	441a      	add	r2, r3
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	68ba      	ldr	r2, [r7, #8]
 800fbe4:	441a      	add	r2, r3
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d118      	bne.n	800fc20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681a      	ldr	r2, [r3, #0]
 800fbf2:	4b15      	ldr	r3, [pc, #84]	; (800fc48 <prvInsertBlockIntoFreeList+0xb0>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d00d      	beq.n	800fc16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	685a      	ldr	r2, [r3, #4]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	441a      	add	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	681a      	ldr	r2, [r3, #0]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	601a      	str	r2, [r3, #0]
 800fc14:	e008      	b.n	800fc28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fc16:	4b0c      	ldr	r3, [pc, #48]	; (800fc48 <prvInsertBlockIntoFreeList+0xb0>)
 800fc18:	681a      	ldr	r2, [r3, #0]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	601a      	str	r2, [r3, #0]
 800fc1e:	e003      	b.n	800fc28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	681a      	ldr	r2, [r3, #0]
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fc28:	68fa      	ldr	r2, [r7, #12]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d002      	beq.n	800fc36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	687a      	ldr	r2, [r7, #4]
 800fc34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc36:	bf00      	nop
 800fc38:	3714      	adds	r7, #20
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop
 800fc44:	2000fbd0 	.word	0x2000fbd0
 800fc48:	2000fbd8 	.word	0x2000fbd8

0800fc4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fc50:	2200      	movs	r2, #0
 800fc52:	4912      	ldr	r1, [pc, #72]	; (800fc9c <MX_USB_DEVICE_Init+0x50>)
 800fc54:	4812      	ldr	r0, [pc, #72]	; (800fca0 <MX_USB_DEVICE_Init+0x54>)
 800fc56:	f7fb ff1f 	bl	800ba98 <USBD_Init>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d001      	beq.n	800fc64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fc60:	f7f2 f91e 	bl	8001ea0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fc64:	490f      	ldr	r1, [pc, #60]	; (800fca4 <MX_USB_DEVICE_Init+0x58>)
 800fc66:	480e      	ldr	r0, [pc, #56]	; (800fca0 <MX_USB_DEVICE_Init+0x54>)
 800fc68:	f7fb ff46 	bl	800baf8 <USBD_RegisterClass>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d001      	beq.n	800fc76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fc72:	f7f2 f915 	bl	8001ea0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fc76:	490c      	ldr	r1, [pc, #48]	; (800fca8 <MX_USB_DEVICE_Init+0x5c>)
 800fc78:	4809      	ldr	r0, [pc, #36]	; (800fca0 <MX_USB_DEVICE_Init+0x54>)
 800fc7a:	f7fb fe7d 	bl	800b978 <USBD_CDC_RegisterInterface>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d001      	beq.n	800fc88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fc84:	f7f2 f90c 	bl	8001ea0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fc88:	4805      	ldr	r0, [pc, #20]	; (800fca0 <MX_USB_DEVICE_Init+0x54>)
 800fc8a:	f7fb ff6b 	bl	800bb64 <USBD_Start>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d001      	beq.n	800fc98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fc94:	f7f2 f904 	bl	8001ea0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fc98:	bf00      	nop
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	200000b4 	.word	0x200000b4
 800fca0:	2000fbf0 	.word	0x2000fbf0
 800fca4:	2000001c 	.word	0x2000001c
 800fca8:	200000a0 	.word	0x200000a0

0800fcac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	4905      	ldr	r1, [pc, #20]	; (800fcc8 <CDC_Init_FS+0x1c>)
 800fcb4:	4805      	ldr	r0, [pc, #20]	; (800fccc <CDC_Init_FS+0x20>)
 800fcb6:	f7fb fe79 	bl	800b9ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fcba:	4905      	ldr	r1, [pc, #20]	; (800fcd0 <CDC_Init_FS+0x24>)
 800fcbc:	4803      	ldr	r0, [pc, #12]	; (800fccc <CDC_Init_FS+0x20>)
 800fcbe:	f7fb fe97 	bl	800b9f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fcc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	200106cc 	.word	0x200106cc
 800fccc:	2000fbf0 	.word	0x2000fbf0
 800fcd0:	2000fecc 	.word	0x2000fecc

0800fcd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fcd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce2:	4770      	bx	lr

0800fce4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b083      	sub	sp, #12
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	4603      	mov	r3, r0
 800fcec:	6039      	str	r1, [r7, #0]
 800fcee:	71fb      	strb	r3, [r7, #7]
 800fcf0:	4613      	mov	r3, r2
 800fcf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fcf4:	79fb      	ldrb	r3, [r7, #7]
 800fcf6:	2b23      	cmp	r3, #35	; 0x23
 800fcf8:	d84a      	bhi.n	800fd90 <CDC_Control_FS+0xac>
 800fcfa:	a201      	add	r2, pc, #4	; (adr r2, 800fd00 <CDC_Control_FS+0x1c>)
 800fcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd00:	0800fd91 	.word	0x0800fd91
 800fd04:	0800fd91 	.word	0x0800fd91
 800fd08:	0800fd91 	.word	0x0800fd91
 800fd0c:	0800fd91 	.word	0x0800fd91
 800fd10:	0800fd91 	.word	0x0800fd91
 800fd14:	0800fd91 	.word	0x0800fd91
 800fd18:	0800fd91 	.word	0x0800fd91
 800fd1c:	0800fd91 	.word	0x0800fd91
 800fd20:	0800fd91 	.word	0x0800fd91
 800fd24:	0800fd91 	.word	0x0800fd91
 800fd28:	0800fd91 	.word	0x0800fd91
 800fd2c:	0800fd91 	.word	0x0800fd91
 800fd30:	0800fd91 	.word	0x0800fd91
 800fd34:	0800fd91 	.word	0x0800fd91
 800fd38:	0800fd91 	.word	0x0800fd91
 800fd3c:	0800fd91 	.word	0x0800fd91
 800fd40:	0800fd91 	.word	0x0800fd91
 800fd44:	0800fd91 	.word	0x0800fd91
 800fd48:	0800fd91 	.word	0x0800fd91
 800fd4c:	0800fd91 	.word	0x0800fd91
 800fd50:	0800fd91 	.word	0x0800fd91
 800fd54:	0800fd91 	.word	0x0800fd91
 800fd58:	0800fd91 	.word	0x0800fd91
 800fd5c:	0800fd91 	.word	0x0800fd91
 800fd60:	0800fd91 	.word	0x0800fd91
 800fd64:	0800fd91 	.word	0x0800fd91
 800fd68:	0800fd91 	.word	0x0800fd91
 800fd6c:	0800fd91 	.word	0x0800fd91
 800fd70:	0800fd91 	.word	0x0800fd91
 800fd74:	0800fd91 	.word	0x0800fd91
 800fd78:	0800fd91 	.word	0x0800fd91
 800fd7c:	0800fd91 	.word	0x0800fd91
 800fd80:	0800fd91 	.word	0x0800fd91
 800fd84:	0800fd91 	.word	0x0800fd91
 800fd88:	0800fd91 	.word	0x0800fd91
 800fd8c:	0800fd91 	.word	0x0800fd91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fd90:	bf00      	nop
  }

  return (USBD_OK);
 800fd92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	370c      	adds	r7, #12
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr

0800fda0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fdaa:	6879      	ldr	r1, [r7, #4]
 800fdac:	4805      	ldr	r0, [pc, #20]	; (800fdc4 <CDC_Receive_FS+0x24>)
 800fdae:	f7fb fe1f 	bl	800b9f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fdb2:	4804      	ldr	r0, [pc, #16]	; (800fdc4 <CDC_Receive_FS+0x24>)
 800fdb4:	f7fb fe3a 	bl	800ba2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fdb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3708      	adds	r7, #8
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	2000fbf0 	.word	0x2000fbf0

0800fdc8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b087      	sub	sp, #28
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	60f8      	str	r0, [r7, #12]
 800fdd0:	60b9      	str	r1, [r7, #8]
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fdda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	371c      	adds	r7, #28
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr
	...

0800fdec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b083      	sub	sp, #12
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	6039      	str	r1, [r7, #0]
 800fdf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	2212      	movs	r2, #18
 800fdfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fdfe:	4b03      	ldr	r3, [pc, #12]	; (800fe0c <USBD_FS_DeviceDescriptor+0x20>)
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr
 800fe0c:	200000d0 	.word	0x200000d0

0800fe10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	4603      	mov	r3, r0
 800fe18:	6039      	str	r1, [r7, #0]
 800fe1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	2204      	movs	r2, #4
 800fe20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fe22:	4b03      	ldr	r3, [pc, #12]	; (800fe30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	370c      	adds	r7, #12
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr
 800fe30:	200000e4 	.word	0x200000e4

0800fe34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	6039      	str	r1, [r7, #0]
 800fe3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe40:	79fb      	ldrb	r3, [r7, #7]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d105      	bne.n	800fe52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fe46:	683a      	ldr	r2, [r7, #0]
 800fe48:	4907      	ldr	r1, [pc, #28]	; (800fe68 <USBD_FS_ProductStrDescriptor+0x34>)
 800fe4a:	4808      	ldr	r0, [pc, #32]	; (800fe6c <USBD_FS_ProductStrDescriptor+0x38>)
 800fe4c:	f7fd f836 	bl	800cebc <USBD_GetString>
 800fe50:	e004      	b.n	800fe5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fe52:	683a      	ldr	r2, [r7, #0]
 800fe54:	4904      	ldr	r1, [pc, #16]	; (800fe68 <USBD_FS_ProductStrDescriptor+0x34>)
 800fe56:	4805      	ldr	r0, [pc, #20]	; (800fe6c <USBD_FS_ProductStrDescriptor+0x38>)
 800fe58:	f7fd f830 	bl	800cebc <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe5c:	4b02      	ldr	r3, [pc, #8]	; (800fe68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3708      	adds	r7, #8
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	20010ecc 	.word	0x20010ecc
 800fe6c:	0801c7d4 	.word	0x0801c7d4

0800fe70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	4603      	mov	r3, r0
 800fe78:	6039      	str	r1, [r7, #0]
 800fe7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fe7c:	683a      	ldr	r2, [r7, #0]
 800fe7e:	4904      	ldr	r1, [pc, #16]	; (800fe90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fe80:	4804      	ldr	r0, [pc, #16]	; (800fe94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fe82:	f7fd f81b 	bl	800cebc <USBD_GetString>
  return USBD_StrDesc;
 800fe86:	4b02      	ldr	r3, [pc, #8]	; (800fe90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3708      	adds	r7, #8
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}
 800fe90:	20010ecc 	.word	0x20010ecc
 800fe94:	0801c7e0 	.word	0x0801c7e0

0800fe98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	4603      	mov	r3, r0
 800fea0:	6039      	str	r1, [r7, #0]
 800fea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	221a      	movs	r2, #26
 800fea8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800feaa:	f000 f843 	bl	800ff34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800feae:	4b02      	ldr	r3, [pc, #8]	; (800feb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}
 800feb8:	200000e8 	.word	0x200000e8

0800febc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	4603      	mov	r3, r0
 800fec4:	6039      	str	r1, [r7, #0]
 800fec6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fec8:	79fb      	ldrb	r3, [r7, #7]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d105      	bne.n	800feda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fece:	683a      	ldr	r2, [r7, #0]
 800fed0:	4907      	ldr	r1, [pc, #28]	; (800fef0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fed2:	4808      	ldr	r0, [pc, #32]	; (800fef4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fed4:	f7fc fff2 	bl	800cebc <USBD_GetString>
 800fed8:	e004      	b.n	800fee4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800feda:	683a      	ldr	r2, [r7, #0]
 800fedc:	4904      	ldr	r1, [pc, #16]	; (800fef0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fede:	4805      	ldr	r0, [pc, #20]	; (800fef4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fee0:	f7fc ffec 	bl	800cebc <USBD_GetString>
  }
  return USBD_StrDesc;
 800fee4:	4b02      	ldr	r3, [pc, #8]	; (800fef0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	20010ecc 	.word	0x20010ecc
 800fef4:	0801c7e8 	.word	0x0801c7e8

0800fef8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	4603      	mov	r3, r0
 800ff00:	6039      	str	r1, [r7, #0]
 800ff02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff04:	79fb      	ldrb	r3, [r7, #7]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d105      	bne.n	800ff16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ff0a:	683a      	ldr	r2, [r7, #0]
 800ff0c:	4907      	ldr	r1, [pc, #28]	; (800ff2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ff0e:	4808      	ldr	r0, [pc, #32]	; (800ff30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ff10:	f7fc ffd4 	bl	800cebc <USBD_GetString>
 800ff14:	e004      	b.n	800ff20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ff16:	683a      	ldr	r2, [r7, #0]
 800ff18:	4904      	ldr	r1, [pc, #16]	; (800ff2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ff1a:	4805      	ldr	r0, [pc, #20]	; (800ff30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ff1c:	f7fc ffce 	bl	800cebc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff20:	4b02      	ldr	r3, [pc, #8]	; (800ff2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3708      	adds	r7, #8
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	20010ecc 	.word	0x20010ecc
 800ff30:	0801c7f4 	.word	0x0801c7f4

0800ff34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ff3a:	4b0f      	ldr	r3, [pc, #60]	; (800ff78 <Get_SerialNum+0x44>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ff40:	4b0e      	ldr	r3, [pc, #56]	; (800ff7c <Get_SerialNum+0x48>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ff46:	4b0e      	ldr	r3, [pc, #56]	; (800ff80 <Get_SerialNum+0x4c>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ff4c:	68fa      	ldr	r2, [r7, #12]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	4413      	add	r3, r2
 800ff52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d009      	beq.n	800ff6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ff5a:	2208      	movs	r2, #8
 800ff5c:	4909      	ldr	r1, [pc, #36]	; (800ff84 <Get_SerialNum+0x50>)
 800ff5e:	68f8      	ldr	r0, [r7, #12]
 800ff60:	f000 f814 	bl	800ff8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ff64:	2204      	movs	r2, #4
 800ff66:	4908      	ldr	r1, [pc, #32]	; (800ff88 <Get_SerialNum+0x54>)
 800ff68:	68b8      	ldr	r0, [r7, #8]
 800ff6a:	f000 f80f 	bl	800ff8c <IntToUnicode>
  }
}
 800ff6e:	bf00      	nop
 800ff70:	3710      	adds	r7, #16
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	1fff7a10 	.word	0x1fff7a10
 800ff7c:	1fff7a14 	.word	0x1fff7a14
 800ff80:	1fff7a18 	.word	0x1fff7a18
 800ff84:	200000ea 	.word	0x200000ea
 800ff88:	200000fa 	.word	0x200000fa

0800ff8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b087      	sub	sp, #28
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	4613      	mov	r3, r2
 800ff98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	75fb      	strb	r3, [r7, #23]
 800ffa2:	e027      	b.n	800fff4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	0f1b      	lsrs	r3, r3, #28
 800ffa8:	2b09      	cmp	r3, #9
 800ffaa:	d80b      	bhi.n	800ffc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	0f1b      	lsrs	r3, r3, #28
 800ffb0:	b2da      	uxtb	r2, r3
 800ffb2:	7dfb      	ldrb	r3, [r7, #23]
 800ffb4:	005b      	lsls	r3, r3, #1
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	440b      	add	r3, r1
 800ffbc:	3230      	adds	r2, #48	; 0x30
 800ffbe:	b2d2      	uxtb	r2, r2
 800ffc0:	701a      	strb	r2, [r3, #0]
 800ffc2:	e00a      	b.n	800ffda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	0f1b      	lsrs	r3, r3, #28
 800ffc8:	b2da      	uxtb	r2, r3
 800ffca:	7dfb      	ldrb	r3, [r7, #23]
 800ffcc:	005b      	lsls	r3, r3, #1
 800ffce:	4619      	mov	r1, r3
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	440b      	add	r3, r1
 800ffd4:	3237      	adds	r2, #55	; 0x37
 800ffd6:	b2d2      	uxtb	r2, r2
 800ffd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	011b      	lsls	r3, r3, #4
 800ffde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ffe0:	7dfb      	ldrb	r3, [r7, #23]
 800ffe2:	005b      	lsls	r3, r3, #1
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	68ba      	ldr	r2, [r7, #8]
 800ffe8:	4413      	add	r3, r2
 800ffea:	2200      	movs	r2, #0
 800ffec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ffee:	7dfb      	ldrb	r3, [r7, #23]
 800fff0:	3301      	adds	r3, #1
 800fff2:	75fb      	strb	r3, [r7, #23]
 800fff4:	7dfa      	ldrb	r2, [r7, #23]
 800fff6:	79fb      	ldrb	r3, [r7, #7]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d3d3      	bcc.n	800ffa4 <IntToUnicode+0x18>
  }
}
 800fffc:	bf00      	nop
 800fffe:	bf00      	nop
 8010000:	371c      	adds	r7, #28
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
	...

0801000c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b08a      	sub	sp, #40	; 0x28
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010014:	f107 0314 	add.w	r3, r7, #20
 8010018:	2200      	movs	r2, #0
 801001a:	601a      	str	r2, [r3, #0]
 801001c:	605a      	str	r2, [r3, #4]
 801001e:	609a      	str	r2, [r3, #8]
 8010020:	60da      	str	r2, [r3, #12]
 8010022:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801002c:	d13a      	bne.n	80100a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801002e:	2300      	movs	r3, #0
 8010030:	613b      	str	r3, [r7, #16]
 8010032:	4b1e      	ldr	r3, [pc, #120]	; (80100ac <HAL_PCD_MspInit+0xa0>)
 8010034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010036:	4a1d      	ldr	r2, [pc, #116]	; (80100ac <HAL_PCD_MspInit+0xa0>)
 8010038:	f043 0301 	orr.w	r3, r3, #1
 801003c:	6313      	str	r3, [r2, #48]	; 0x30
 801003e:	4b1b      	ldr	r3, [pc, #108]	; (80100ac <HAL_PCD_MspInit+0xa0>)
 8010040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010042:	f003 0301 	and.w	r3, r3, #1
 8010046:	613b      	str	r3, [r7, #16]
 8010048:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801004a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801004e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010050:	2302      	movs	r3, #2
 8010052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010054:	2300      	movs	r3, #0
 8010056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010058:	2303      	movs	r3, #3
 801005a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801005c:	230a      	movs	r3, #10
 801005e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010060:	f107 0314 	add.w	r3, r7, #20
 8010064:	4619      	mov	r1, r3
 8010066:	4812      	ldr	r0, [pc, #72]	; (80100b0 <HAL_PCD_MspInit+0xa4>)
 8010068:	f7f4 fbce 	bl	8004808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801006c:	4b0f      	ldr	r3, [pc, #60]	; (80100ac <HAL_PCD_MspInit+0xa0>)
 801006e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010070:	4a0e      	ldr	r2, [pc, #56]	; (80100ac <HAL_PCD_MspInit+0xa0>)
 8010072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010076:	6353      	str	r3, [r2, #52]	; 0x34
 8010078:	2300      	movs	r3, #0
 801007a:	60fb      	str	r3, [r7, #12]
 801007c:	4b0b      	ldr	r3, [pc, #44]	; (80100ac <HAL_PCD_MspInit+0xa0>)
 801007e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010080:	4a0a      	ldr	r2, [pc, #40]	; (80100ac <HAL_PCD_MspInit+0xa0>)
 8010082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010086:	6453      	str	r3, [r2, #68]	; 0x44
 8010088:	4b08      	ldr	r3, [pc, #32]	; (80100ac <HAL_PCD_MspInit+0xa0>)
 801008a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801008c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010090:	60fb      	str	r3, [r7, #12]
 8010092:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010094:	2200      	movs	r2, #0
 8010096:	2105      	movs	r1, #5
 8010098:	2043      	movs	r0, #67	; 0x43
 801009a:	f7f3 ff6d 	bl	8003f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801009e:	2043      	movs	r0, #67	; 0x43
 80100a0:	f7f3 ff86 	bl	8003fb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80100a4:	bf00      	nop
 80100a6:	3728      	adds	r7, #40	; 0x28
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	40023800 	.word	0x40023800
 80100b0:	40020000 	.word	0x40020000

080100b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b082      	sub	sp, #8
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80100c8:	4619      	mov	r1, r3
 80100ca:	4610      	mov	r0, r2
 80100cc:	f7fb fd97 	bl	800bbfe <USBD_LL_SetupStage>
}
 80100d0:	bf00      	nop
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	460b      	mov	r3, r1
 80100e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80100ea:	78fa      	ldrb	r2, [r7, #3]
 80100ec:	6879      	ldr	r1, [r7, #4]
 80100ee:	4613      	mov	r3, r2
 80100f0:	00db      	lsls	r3, r3, #3
 80100f2:	4413      	add	r3, r2
 80100f4:	009b      	lsls	r3, r3, #2
 80100f6:	440b      	add	r3, r1
 80100f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80100fc:	681a      	ldr	r2, [r3, #0]
 80100fe:	78fb      	ldrb	r3, [r7, #3]
 8010100:	4619      	mov	r1, r3
 8010102:	f7fb fdd1 	bl	800bca8 <USBD_LL_DataOutStage>
}
 8010106:	bf00      	nop
 8010108:	3708      	adds	r7, #8
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801010e:	b580      	push	{r7, lr}
 8010110:	b082      	sub	sp, #8
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
 8010116:	460b      	mov	r3, r1
 8010118:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010120:	78fa      	ldrb	r2, [r7, #3]
 8010122:	6879      	ldr	r1, [r7, #4]
 8010124:	4613      	mov	r3, r2
 8010126:	00db      	lsls	r3, r3, #3
 8010128:	4413      	add	r3, r2
 801012a:	009b      	lsls	r3, r3, #2
 801012c:	440b      	add	r3, r1
 801012e:	334c      	adds	r3, #76	; 0x4c
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	78fb      	ldrb	r3, [r7, #3]
 8010134:	4619      	mov	r1, r3
 8010136:	f7fb fe6a 	bl	800be0e <USBD_LL_DataInStage>
}
 801013a:	bf00      	nop
 801013c:	3708      	adds	r7, #8
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010142:	b580      	push	{r7, lr}
 8010144:	b082      	sub	sp, #8
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010150:	4618      	mov	r0, r3
 8010152:	f7fb ff9e 	bl	800c092 <USBD_LL_SOF>
}
 8010156:	bf00      	nop
 8010158:	3708      	adds	r7, #8
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}

0801015e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801015e:	b580      	push	{r7, lr}
 8010160:	b084      	sub	sp, #16
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010166:	2301      	movs	r3, #1
 8010168:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	68db      	ldr	r3, [r3, #12]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d102      	bne.n	8010178 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010172:	2300      	movs	r3, #0
 8010174:	73fb      	strb	r3, [r7, #15]
 8010176:	e008      	b.n	801018a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	68db      	ldr	r3, [r3, #12]
 801017c:	2b02      	cmp	r3, #2
 801017e:	d102      	bne.n	8010186 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010180:	2301      	movs	r3, #1
 8010182:	73fb      	strb	r3, [r7, #15]
 8010184:	e001      	b.n	801018a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010186:	f7f1 fe8b 	bl	8001ea0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010190:	7bfa      	ldrb	r2, [r7, #15]
 8010192:	4611      	mov	r1, r2
 8010194:	4618      	mov	r0, r3
 8010196:	f7fb ff3e 	bl	800c016 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fb fee6 	bl	800bf72 <USBD_LL_Reset>
}
 80101a6:	bf00      	nop
 80101a8:	3710      	adds	r7, #16
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
	...

080101b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80101be:	4618      	mov	r0, r3
 80101c0:	f7fb ff39 	bl	800c036 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	687a      	ldr	r2, [r7, #4]
 80101d0:	6812      	ldr	r2, [r2, #0]
 80101d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80101d6:	f043 0301 	orr.w	r3, r3, #1
 80101da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6a1b      	ldr	r3, [r3, #32]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d005      	beq.n	80101f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80101e4:	4b04      	ldr	r3, [pc, #16]	; (80101f8 <HAL_PCD_SuspendCallback+0x48>)
 80101e6:	691b      	ldr	r3, [r3, #16]
 80101e8:	4a03      	ldr	r2, [pc, #12]	; (80101f8 <HAL_PCD_SuspendCallback+0x48>)
 80101ea:	f043 0306 	orr.w	r3, r3, #6
 80101ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80101f0:	bf00      	nop
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	e000ed00 	.word	0xe000ed00

080101fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801020a:	4618      	mov	r0, r3
 801020c:	f7fb ff29 	bl	800c062 <USBD_LL_Resume>
}
 8010210:	bf00      	nop
 8010212:	3708      	adds	r7, #8
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	460b      	mov	r3, r1
 8010222:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801022a:	78fa      	ldrb	r2, [r7, #3]
 801022c:	4611      	mov	r1, r2
 801022e:	4618      	mov	r0, r3
 8010230:	f7fb ff81 	bl	800c136 <USBD_LL_IsoOUTIncomplete>
}
 8010234:	bf00      	nop
 8010236:	3708      	adds	r7, #8
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}

0801023c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	460b      	mov	r3, r1
 8010246:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801024e:	78fa      	ldrb	r2, [r7, #3]
 8010250:	4611      	mov	r1, r2
 8010252:	4618      	mov	r0, r3
 8010254:	f7fb ff3d 	bl	800c0d2 <USBD_LL_IsoINIncomplete>
}
 8010258:	bf00      	nop
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b082      	sub	sp, #8
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801026e:	4618      	mov	r0, r3
 8010270:	f7fb ff93 	bl	800c19a <USBD_LL_DevConnected>
}
 8010274:	bf00      	nop
 8010276:	3708      	adds	r7, #8
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b082      	sub	sp, #8
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801028a:	4618      	mov	r0, r3
 801028c:	f7fb ff90 	bl	800c1b0 <USBD_LL_DevDisconnected>
}
 8010290:	bf00      	nop
 8010292:	3708      	adds	r7, #8
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}

08010298 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d13c      	bne.n	8010322 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80102a8:	4a20      	ldr	r2, [pc, #128]	; (801032c <USBD_LL_Init+0x94>)
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	4a1e      	ldr	r2, [pc, #120]	; (801032c <USBD_LL_Init+0x94>)
 80102b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80102b8:	4b1c      	ldr	r3, [pc, #112]	; (801032c <USBD_LL_Init+0x94>)
 80102ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80102be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80102c0:	4b1a      	ldr	r3, [pc, #104]	; (801032c <USBD_LL_Init+0x94>)
 80102c2:	2204      	movs	r2, #4
 80102c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80102c6:	4b19      	ldr	r3, [pc, #100]	; (801032c <USBD_LL_Init+0x94>)
 80102c8:	2202      	movs	r2, #2
 80102ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80102cc:	4b17      	ldr	r3, [pc, #92]	; (801032c <USBD_LL_Init+0x94>)
 80102ce:	2200      	movs	r2, #0
 80102d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80102d2:	4b16      	ldr	r3, [pc, #88]	; (801032c <USBD_LL_Init+0x94>)
 80102d4:	2202      	movs	r2, #2
 80102d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80102d8:	4b14      	ldr	r3, [pc, #80]	; (801032c <USBD_LL_Init+0x94>)
 80102da:	2200      	movs	r2, #0
 80102dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80102de:	4b13      	ldr	r3, [pc, #76]	; (801032c <USBD_LL_Init+0x94>)
 80102e0:	2200      	movs	r2, #0
 80102e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80102e4:	4b11      	ldr	r3, [pc, #68]	; (801032c <USBD_LL_Init+0x94>)
 80102e6:	2200      	movs	r2, #0
 80102e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80102ea:	4b10      	ldr	r3, [pc, #64]	; (801032c <USBD_LL_Init+0x94>)
 80102ec:	2200      	movs	r2, #0
 80102ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80102f0:	4b0e      	ldr	r3, [pc, #56]	; (801032c <USBD_LL_Init+0x94>)
 80102f2:	2200      	movs	r2, #0
 80102f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80102f6:	480d      	ldr	r0, [pc, #52]	; (801032c <USBD_LL_Init+0x94>)
 80102f8:	f7f4 fd80 	bl	8004dfc <HAL_PCD_Init>
 80102fc:	4603      	mov	r3, r0
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d001      	beq.n	8010306 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010302:	f7f1 fdcd 	bl	8001ea0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010306:	2180      	movs	r1, #128	; 0x80
 8010308:	4808      	ldr	r0, [pc, #32]	; (801032c <USBD_LL_Init+0x94>)
 801030a:	f7f5 ffd8 	bl	80062be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801030e:	2240      	movs	r2, #64	; 0x40
 8010310:	2100      	movs	r1, #0
 8010312:	4806      	ldr	r0, [pc, #24]	; (801032c <USBD_LL_Init+0x94>)
 8010314:	f7f5 ff8c 	bl	8006230 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010318:	2280      	movs	r2, #128	; 0x80
 801031a:	2101      	movs	r1, #1
 801031c:	4803      	ldr	r0, [pc, #12]	; (801032c <USBD_LL_Init+0x94>)
 801031e:	f7f5 ff87 	bl	8006230 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010322:	2300      	movs	r3, #0
}
 8010324:	4618      	mov	r0, r3
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}
 801032c:	200110cc 	.word	0x200110cc

08010330 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010338:	2300      	movs	r3, #0
 801033a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801033c:	2300      	movs	r3, #0
 801033e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010346:	4618      	mov	r0, r3
 8010348:	f7f4 fe75 	bl	8005036 <HAL_PCD_Start>
 801034c:	4603      	mov	r3, r0
 801034e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010350:	7bfb      	ldrb	r3, [r7, #15]
 8010352:	4618      	mov	r0, r3
 8010354:	f000 f942 	bl	80105dc <USBD_Get_USB_Status>
 8010358:	4603      	mov	r3, r0
 801035a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801035c:	7bbb      	ldrb	r3, [r7, #14]
}
 801035e:	4618      	mov	r0, r3
 8010360:	3710      	adds	r7, #16
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}

08010366 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010366:	b580      	push	{r7, lr}
 8010368:	b084      	sub	sp, #16
 801036a:	af00      	add	r7, sp, #0
 801036c:	6078      	str	r0, [r7, #4]
 801036e:	4608      	mov	r0, r1
 8010370:	4611      	mov	r1, r2
 8010372:	461a      	mov	r2, r3
 8010374:	4603      	mov	r3, r0
 8010376:	70fb      	strb	r3, [r7, #3]
 8010378:	460b      	mov	r3, r1
 801037a:	70bb      	strb	r3, [r7, #2]
 801037c:	4613      	mov	r3, r2
 801037e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010380:	2300      	movs	r3, #0
 8010382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010384:	2300      	movs	r3, #0
 8010386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801038e:	78bb      	ldrb	r3, [r7, #2]
 8010390:	883a      	ldrh	r2, [r7, #0]
 8010392:	78f9      	ldrb	r1, [r7, #3]
 8010394:	f7f5 fb46 	bl	8005a24 <HAL_PCD_EP_Open>
 8010398:	4603      	mov	r3, r0
 801039a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801039c:	7bfb      	ldrb	r3, [r7, #15]
 801039e:	4618      	mov	r0, r3
 80103a0:	f000 f91c 	bl	80105dc <USBD_Get_USB_Status>
 80103a4:	4603      	mov	r3, r0
 80103a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3710      	adds	r7, #16
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}

080103b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103b2:	b580      	push	{r7, lr}
 80103b4:	b084      	sub	sp, #16
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
 80103ba:	460b      	mov	r3, r1
 80103bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103be:	2300      	movs	r3, #0
 80103c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103c2:	2300      	movs	r3, #0
 80103c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80103cc:	78fa      	ldrb	r2, [r7, #3]
 80103ce:	4611      	mov	r1, r2
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7f5 fb8f 	bl	8005af4 <HAL_PCD_EP_Close>
 80103d6:	4603      	mov	r3, r0
 80103d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103da:	7bfb      	ldrb	r3, [r7, #15]
 80103dc:	4618      	mov	r0, r3
 80103de:	f000 f8fd 	bl	80105dc <USBD_Get_USB_Status>
 80103e2:	4603      	mov	r3, r0
 80103e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3710      	adds	r7, #16
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	460b      	mov	r3, r1
 80103fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103fc:	2300      	movs	r3, #0
 80103fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010400:	2300      	movs	r3, #0
 8010402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801040a:	78fa      	ldrb	r2, [r7, #3]
 801040c:	4611      	mov	r1, r2
 801040e:	4618      	mov	r0, r3
 8010410:	f7f5 fc67 	bl	8005ce2 <HAL_PCD_EP_SetStall>
 8010414:	4603      	mov	r3, r0
 8010416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010418:	7bfb      	ldrb	r3, [r7, #15]
 801041a:	4618      	mov	r0, r3
 801041c:	f000 f8de 	bl	80105dc <USBD_Get_USB_Status>
 8010420:	4603      	mov	r3, r0
 8010422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010424:	7bbb      	ldrb	r3, [r7, #14]
}
 8010426:	4618      	mov	r0, r3
 8010428:	3710      	adds	r7, #16
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}

0801042e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801042e:	b580      	push	{r7, lr}
 8010430:	b084      	sub	sp, #16
 8010432:	af00      	add	r7, sp, #0
 8010434:	6078      	str	r0, [r7, #4]
 8010436:	460b      	mov	r3, r1
 8010438:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801043a:	2300      	movs	r3, #0
 801043c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801043e:	2300      	movs	r3, #0
 8010440:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010448:	78fa      	ldrb	r2, [r7, #3]
 801044a:	4611      	mov	r1, r2
 801044c:	4618      	mov	r0, r3
 801044e:	f7f5 fcac 	bl	8005daa <HAL_PCD_EP_ClrStall>
 8010452:	4603      	mov	r3, r0
 8010454:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010456:	7bfb      	ldrb	r3, [r7, #15]
 8010458:	4618      	mov	r0, r3
 801045a:	f000 f8bf 	bl	80105dc <USBD_Get_USB_Status>
 801045e:	4603      	mov	r3, r0
 8010460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010462:	7bbb      	ldrb	r3, [r7, #14]
}
 8010464:	4618      	mov	r0, r3
 8010466:	3710      	adds	r7, #16
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801046c:	b480      	push	{r7}
 801046e:	b085      	sub	sp, #20
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	460b      	mov	r3, r1
 8010476:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801047e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010484:	2b00      	cmp	r3, #0
 8010486:	da0b      	bge.n	80104a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010488:	78fb      	ldrb	r3, [r7, #3]
 801048a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801048e:	68f9      	ldr	r1, [r7, #12]
 8010490:	4613      	mov	r3, r2
 8010492:	00db      	lsls	r3, r3, #3
 8010494:	4413      	add	r3, r2
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	440b      	add	r3, r1
 801049a:	333e      	adds	r3, #62	; 0x3e
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	e00b      	b.n	80104b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80104a0:	78fb      	ldrb	r3, [r7, #3]
 80104a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80104a6:	68f9      	ldr	r1, [r7, #12]
 80104a8:	4613      	mov	r3, r2
 80104aa:	00db      	lsls	r3, r3, #3
 80104ac:	4413      	add	r3, r2
 80104ae:	009b      	lsls	r3, r3, #2
 80104b0:	440b      	add	r3, r1
 80104b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80104b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3714      	adds	r7, #20
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr

080104c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b084      	sub	sp, #16
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	460b      	mov	r3, r1
 80104ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104d0:	2300      	movs	r3, #0
 80104d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104d4:	2300      	movs	r3, #0
 80104d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80104de:	78fa      	ldrb	r2, [r7, #3]
 80104e0:	4611      	mov	r1, r2
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7f5 fa79 	bl	80059da <HAL_PCD_SetAddress>
 80104e8:	4603      	mov	r3, r0
 80104ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104ec:	7bfb      	ldrb	r3, [r7, #15]
 80104ee:	4618      	mov	r0, r3
 80104f0:	f000 f874 	bl	80105dc <USBD_Get_USB_Status>
 80104f4:	4603      	mov	r3, r0
 80104f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3710      	adds	r7, #16
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}

08010502 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010502:	b580      	push	{r7, lr}
 8010504:	b086      	sub	sp, #24
 8010506:	af00      	add	r7, sp, #0
 8010508:	60f8      	str	r0, [r7, #12]
 801050a:	607a      	str	r2, [r7, #4]
 801050c:	603b      	str	r3, [r7, #0]
 801050e:	460b      	mov	r3, r1
 8010510:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010512:	2300      	movs	r3, #0
 8010514:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010516:	2300      	movs	r3, #0
 8010518:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010520:	7af9      	ldrb	r1, [r7, #11]
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	f7f5 fb92 	bl	8005c4e <HAL_PCD_EP_Transmit>
 801052a:	4603      	mov	r3, r0
 801052c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801052e:	7dfb      	ldrb	r3, [r7, #23]
 8010530:	4618      	mov	r0, r3
 8010532:	f000 f853 	bl	80105dc <USBD_Get_USB_Status>
 8010536:	4603      	mov	r3, r0
 8010538:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801053a:	7dbb      	ldrb	r3, [r7, #22]
}
 801053c:	4618      	mov	r0, r3
 801053e:	3718      	adds	r7, #24
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b086      	sub	sp, #24
 8010548:	af00      	add	r7, sp, #0
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	607a      	str	r2, [r7, #4]
 801054e:	603b      	str	r3, [r7, #0]
 8010550:	460b      	mov	r3, r1
 8010552:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010554:	2300      	movs	r3, #0
 8010556:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010558:	2300      	movs	r3, #0
 801055a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010562:	7af9      	ldrb	r1, [r7, #11]
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	687a      	ldr	r2, [r7, #4]
 8010568:	f7f5 fb0e 	bl	8005b88 <HAL_PCD_EP_Receive>
 801056c:	4603      	mov	r3, r0
 801056e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010570:	7dfb      	ldrb	r3, [r7, #23]
 8010572:	4618      	mov	r0, r3
 8010574:	f000 f832 	bl	80105dc <USBD_Get_USB_Status>
 8010578:	4603      	mov	r3, r0
 801057a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801057c:	7dbb      	ldrb	r3, [r7, #22]
}
 801057e:	4618      	mov	r0, r3
 8010580:	3718      	adds	r7, #24
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}

08010586 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010586:	b580      	push	{r7, lr}
 8010588:	b082      	sub	sp, #8
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]
 801058e:	460b      	mov	r3, r1
 8010590:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010598:	78fa      	ldrb	r2, [r7, #3]
 801059a:	4611      	mov	r1, r2
 801059c:	4618      	mov	r0, r3
 801059e:	f7f5 fb3e 	bl	8005c1e <HAL_PCD_EP_GetRxCount>
 80105a2:	4603      	mov	r3, r0
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3708      	adds	r7, #8
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b083      	sub	sp, #12
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80105b4:	4b03      	ldr	r3, [pc, #12]	; (80105c4 <USBD_static_malloc+0x18>)
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	370c      	adds	r7, #12
 80105ba:	46bd      	mov	sp, r7
 80105bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c0:	4770      	bx	lr
 80105c2:	bf00      	nop
 80105c4:	200115d8 	.word	0x200115d8

080105c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]

}
 80105d0:	bf00      	nop
 80105d2:	370c      	adds	r7, #12
 80105d4:	46bd      	mov	sp, r7
 80105d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105da:	4770      	bx	lr

080105dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80105dc:	b480      	push	{r7}
 80105de:	b085      	sub	sp, #20
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	4603      	mov	r3, r0
 80105e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105e6:	2300      	movs	r3, #0
 80105e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80105ea:	79fb      	ldrb	r3, [r7, #7]
 80105ec:	2b03      	cmp	r3, #3
 80105ee:	d817      	bhi.n	8010620 <USBD_Get_USB_Status+0x44>
 80105f0:	a201      	add	r2, pc, #4	; (adr r2, 80105f8 <USBD_Get_USB_Status+0x1c>)
 80105f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105f6:	bf00      	nop
 80105f8:	08010609 	.word	0x08010609
 80105fc:	0801060f 	.word	0x0801060f
 8010600:	08010615 	.word	0x08010615
 8010604:	0801061b 	.word	0x0801061b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010608:	2300      	movs	r3, #0
 801060a:	73fb      	strb	r3, [r7, #15]
    break;
 801060c:	e00b      	b.n	8010626 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801060e:	2303      	movs	r3, #3
 8010610:	73fb      	strb	r3, [r7, #15]
    break;
 8010612:	e008      	b.n	8010626 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010614:	2301      	movs	r3, #1
 8010616:	73fb      	strb	r3, [r7, #15]
    break;
 8010618:	e005      	b.n	8010626 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801061a:	2303      	movs	r3, #3
 801061c:	73fb      	strb	r3, [r7, #15]
    break;
 801061e:	e002      	b.n	8010626 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010620:	2303      	movs	r3, #3
 8010622:	73fb      	strb	r3, [r7, #15]
    break;
 8010624:	bf00      	nop
  }
  return usb_status;
 8010626:	7bfb      	ldrb	r3, [r7, #15]
}
 8010628:	4618      	mov	r0, r3
 801062a:	3714      	adds	r7, #20
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <rcl_get_zero_initialized_publisher>:
 8010634:	4b01      	ldr	r3, [pc, #4]	; (801063c <rcl_get_zero_initialized_publisher+0x8>)
 8010636:	6818      	ldr	r0, [r3, #0]
 8010638:	4770      	bx	lr
 801063a:	bf00      	nop
 801063c:	0801c89c 	.word	0x0801c89c

08010640 <rcl_publisher_init>:
 8010640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010644:	b088      	sub	sp, #32
 8010646:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010648:	2d00      	cmp	r5, #0
 801064a:	d069      	beq.n	8010720 <rcl_publisher_init+0xe0>
 801064c:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8010650:	4604      	mov	r4, r0
 8010652:	4648      	mov	r0, r9
 8010654:	460e      	mov	r6, r1
 8010656:	4690      	mov	r8, r2
 8010658:	461f      	mov	r7, r3
 801065a:	f000 f9d5 	bl	8010a08 <rcutils_allocator_is_valid>
 801065e:	2800      	cmp	r0, #0
 8010660:	d05e      	beq.n	8010720 <rcl_publisher_init+0xe0>
 8010662:	2c00      	cmp	r4, #0
 8010664:	d05c      	beq.n	8010720 <rcl_publisher_init+0xe0>
 8010666:	f8d4 a000 	ldr.w	sl, [r4]
 801066a:	f1ba 0f00 	cmp.w	sl, #0
 801066e:	d004      	beq.n	801067a <rcl_publisher_init+0x3a>
 8010670:	2764      	movs	r7, #100	; 0x64
 8010672:	4638      	mov	r0, r7
 8010674:	b008      	add	sp, #32
 8010676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801067a:	4630      	mov	r0, r6
 801067c:	f006 fb34 	bl	8016ce8 <rcl_node_is_valid>
 8010680:	2800      	cmp	r0, #0
 8010682:	d052      	beq.n	801072a <rcl_publisher_init+0xea>
 8010684:	f1b8 0f00 	cmp.w	r8, #0
 8010688:	d04a      	beq.n	8010720 <rcl_publisher_init+0xe0>
 801068a:	2f00      	cmp	r7, #0
 801068c:	d048      	beq.n	8010720 <rcl_publisher_init+0xe0>
 801068e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8010692:	aa07      	add	r2, sp, #28
 8010694:	9205      	str	r2, [sp, #20]
 8010696:	f105 0358 	add.w	r3, r5, #88	; 0x58
 801069a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801069e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80106a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80106a6:	4639      	mov	r1, r7
 80106a8:	e899 000c 	ldmia.w	r9, {r2, r3}
 80106ac:	4630      	mov	r0, r6
 80106ae:	f006 fb6f 	bl	8016d90 <rcl_node_resolve_name>
 80106b2:	4607      	mov	r7, r0
 80106b4:	2800      	cmp	r0, #0
 80106b6:	d14f      	bne.n	8010758 <rcl_publisher_init+0x118>
 80106b8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80106ba:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80106bc:	20c8      	movs	r0, #200	; 0xc8
 80106be:	4798      	blx	r3
 80106c0:	6020      	str	r0, [r4, #0]
 80106c2:	2800      	cmp	r0, #0
 80106c4:	d04e      	beq.n	8010764 <rcl_publisher_init+0x124>
 80106c6:	4630      	mov	r0, r6
 80106c8:	f006 fb30 	bl	8016d2c <rcl_node_get_rmw_handle>
 80106cc:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80106d0:	9300      	str	r3, [sp, #0]
 80106d2:	9a07      	ldr	r2, [sp, #28]
 80106d4:	6827      	ldr	r7, [r4, #0]
 80106d6:	462b      	mov	r3, r5
 80106d8:	4641      	mov	r1, r8
 80106da:	f000 fa53 	bl	8010b84 <rmw_create_publisher>
 80106de:	6823      	ldr	r3, [r4, #0]
 80106e0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80106e4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80106e8:	b370      	cbz	r0, 8010748 <rcl_publisher_init+0x108>
 80106ea:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80106ee:	f000 fb29 	bl	8010d44 <rmw_publisher_get_actual_qos>
 80106f2:	6823      	ldr	r3, [r4, #0]
 80106f4:	4607      	mov	r7, r0
 80106f6:	b9d0      	cbnz	r0, 801072e <rcl_publisher_init+0xee>
 80106f8:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 80106fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8010700:	4629      	mov	r1, r5
 8010702:	2270      	movs	r2, #112	; 0x70
 8010704:	4618      	mov	r0, r3
 8010706:	f00a fcff 	bl	801b108 <memcpy>
 801070a:	6832      	ldr	r2, [r6, #0]
 801070c:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8010710:	9807      	ldr	r0, [sp, #28]
 8010712:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8010714:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8010716:	4798      	blx	r3
 8010718:	4638      	mov	r0, r7
 801071a:	b008      	add	sp, #32
 801071c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010720:	270b      	movs	r7, #11
 8010722:	4638      	mov	r0, r7
 8010724:	b008      	add	sp, #32
 8010726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801072a:	27c8      	movs	r7, #200	; 0xc8
 801072c:	e7a1      	b.n	8010672 <rcl_publisher_init+0x32>
 801072e:	b18b      	cbz	r3, 8010754 <rcl_publisher_init+0x114>
 8010730:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8010734:	b142      	cbz	r2, 8010748 <rcl_publisher_init+0x108>
 8010736:	4630      	mov	r0, r6
 8010738:	f006 faf8 	bl	8016d2c <rcl_node_get_rmw_handle>
 801073c:	6823      	ldr	r3, [r4, #0]
 801073e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8010742:	f000 fb01 	bl	8010d48 <rmw_destroy_publisher>
 8010746:	6823      	ldr	r3, [r4, #0]
 8010748:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 801074a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 801074c:	4618      	mov	r0, r3
 801074e:	4790      	blx	r2
 8010750:	2300      	movs	r3, #0
 8010752:	6023      	str	r3, [r4, #0]
 8010754:	2701      	movs	r7, #1
 8010756:	e7db      	b.n	8010710 <rcl_publisher_init+0xd0>
 8010758:	2867      	cmp	r0, #103	; 0x67
 801075a:	d0d9      	beq.n	8010710 <rcl_publisher_init+0xd0>
 801075c:	2869      	cmp	r0, #105	; 0x69
 801075e:	d003      	beq.n	8010768 <rcl_publisher_init+0x128>
 8010760:	280a      	cmp	r0, #10
 8010762:	d1f7      	bne.n	8010754 <rcl_publisher_init+0x114>
 8010764:	270a      	movs	r7, #10
 8010766:	e7d3      	b.n	8010710 <rcl_publisher_init+0xd0>
 8010768:	2767      	movs	r7, #103	; 0x67
 801076a:	e7d1      	b.n	8010710 <rcl_publisher_init+0xd0>

0801076c <rcl_publisher_get_default_options>:
 801076c:	b570      	push	{r4, r5, r6, lr}
 801076e:	4d14      	ldr	r5, [pc, #80]	; (80107c0 <rcl_publisher_get_default_options+0x54>)
 8010770:	4914      	ldr	r1, [pc, #80]	; (80107c4 <rcl_publisher_get_default_options+0x58>)
 8010772:	b088      	sub	sp, #32
 8010774:	4604      	mov	r4, r0
 8010776:	2250      	movs	r2, #80	; 0x50
 8010778:	4628      	mov	r0, r5
 801077a:	f00a fcc5 	bl	801b108 <memcpy>
 801077e:	a802      	add	r0, sp, #8
 8010780:	f000 f934 	bl	80109ec <rcutils_get_default_allocator>
 8010784:	f10d 0c08 	add.w	ip, sp, #8
 8010788:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801078c:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8010790:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010794:	466e      	mov	r6, sp
 8010796:	f8dc 3000 	ldr.w	r3, [ip]
 801079a:	f8ce 3000 	str.w	r3, [lr]
 801079e:	4630      	mov	r0, r6
 80107a0:	f000 f972 	bl	8010a88 <rmw_get_default_publisher_options>
 80107a4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80107a8:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80107ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80107b0:	2270      	movs	r2, #112	; 0x70
 80107b2:	4629      	mov	r1, r5
 80107b4:	4620      	mov	r0, r4
 80107b6:	f00a fca7 	bl	801b108 <memcpy>
 80107ba:	4620      	mov	r0, r4
 80107bc:	b008      	add	sp, #32
 80107be:	bd70      	pop	{r4, r5, r6, pc}
 80107c0:	200117f8 	.word	0x200117f8
 80107c4:	0801c8a0 	.word	0x0801c8a0

080107c8 <rcl_publish>:
 80107c8:	b1f8      	cbz	r0, 801080a <rcl_publish+0x42>
 80107ca:	6803      	ldr	r3, [r0, #0]
 80107cc:	b570      	push	{r4, r5, r6, lr}
 80107ce:	4604      	mov	r4, r0
 80107d0:	b1b3      	cbz	r3, 8010800 <rcl_publish+0x38>
 80107d2:	4616      	mov	r6, r2
 80107d4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80107d8:	b192      	cbz	r2, 8010800 <rcl_publish+0x38>
 80107da:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80107de:	460d      	mov	r5, r1
 80107e0:	f005 fea8 	bl	8016534 <rcl_context_is_valid>
 80107e4:	b160      	cbz	r0, 8010800 <rcl_publish+0x38>
 80107e6:	6823      	ldr	r3, [r4, #0]
 80107e8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80107ec:	b140      	cbz	r0, 8010800 <rcl_publish+0x38>
 80107ee:	b155      	cbz	r5, 8010806 <rcl_publish+0x3e>
 80107f0:	4632      	mov	r2, r6
 80107f2:	4629      	mov	r1, r5
 80107f4:	f000 f966 	bl	8010ac4 <rmw_publish>
 80107f8:	3800      	subs	r0, #0
 80107fa:	bf18      	it	ne
 80107fc:	2001      	movne	r0, #1
 80107fe:	bd70      	pop	{r4, r5, r6, pc}
 8010800:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8010804:	bd70      	pop	{r4, r5, r6, pc}
 8010806:	200b      	movs	r0, #11
 8010808:	bd70      	pop	{r4, r5, r6, pc}
 801080a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801080e:	4770      	bx	lr

08010810 <rclc_support_init>:
 8010810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010814:	b086      	sub	sp, #24
 8010816:	b3b8      	cbz	r0, 8010888 <rclc_support_init+0x78>
 8010818:	461c      	mov	r4, r3
 801081a:	b3ab      	cbz	r3, 8010888 <rclc_support_init+0x78>
 801081c:	460f      	mov	r7, r1
 801081e:	4690      	mov	r8, r2
 8010820:	4606      	mov	r6, r0
 8010822:	f005 fff1 	bl	8016808 <rcl_get_zero_initialized_init_options>
 8010826:	f104 030c 	add.w	r3, r4, #12
 801082a:	9005      	str	r0, [sp, #20]
 801082c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010830:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010834:	a805      	add	r0, sp, #20
 8010836:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801083a:	f005 ffe7 	bl	801680c <rcl_init_options_init>
 801083e:	4605      	mov	r5, r0
 8010840:	b9e0      	cbnz	r0, 801087c <rclc_support_init+0x6c>
 8010842:	ad02      	add	r5, sp, #8
 8010844:	4628      	mov	r0, r5
 8010846:	f005 fe6b 	bl	8016520 <rcl_get_zero_initialized_context>
 801084a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801084e:	4633      	mov	r3, r6
 8010850:	e886 0003 	stmia.w	r6, {r0, r1}
 8010854:	aa05      	add	r2, sp, #20
 8010856:	4641      	mov	r1, r8
 8010858:	4638      	mov	r0, r7
 801085a:	f005 fed1 	bl	8016600 <rcl_init>
 801085e:	4605      	mov	r5, r0
 8010860:	b9b8      	cbnz	r0, 8010892 <rclc_support_init+0x82>
 8010862:	60b4      	str	r4, [r6, #8]
 8010864:	4622      	mov	r2, r4
 8010866:	f106 010c 	add.w	r1, r6, #12
 801086a:	2003      	movs	r0, #3
 801086c:	f006 fc4c 	bl	8017108 <rcl_clock_init>
 8010870:	4605      	mov	r5, r0
 8010872:	b970      	cbnz	r0, 8010892 <rclc_support_init+0x82>
 8010874:	a805      	add	r0, sp, #20
 8010876:	f006 f82f 	bl	80168d8 <rcl_init_options_fini>
 801087a:	b108      	cbz	r0, 8010880 <rclc_support_init+0x70>
 801087c:	f000 f8e8 	bl	8010a50 <rcutils_reset_error>
 8010880:	4628      	mov	r0, r5
 8010882:	b006      	add	sp, #24
 8010884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010888:	250b      	movs	r5, #11
 801088a:	4628      	mov	r0, r5
 801088c:	b006      	add	sp, #24
 801088e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010892:	f000 f8dd 	bl	8010a50 <rcutils_reset_error>
 8010896:	a805      	add	r0, sp, #20
 8010898:	f006 f81e 	bl	80168d8 <rcl_init_options_fini>
 801089c:	2800      	cmp	r0, #0
 801089e:	d0ef      	beq.n	8010880 <rclc_support_init+0x70>
 80108a0:	e7ec      	b.n	801087c <rclc_support_init+0x6c>
 80108a2:	bf00      	nop

080108a4 <rclc_node_init_default>:
 80108a4:	b3b8      	cbz	r0, 8010916 <rclc_node_init_default+0x72>
 80108a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108aa:	460d      	mov	r5, r1
 80108ac:	b0a1      	sub	sp, #132	; 0x84
 80108ae:	b329      	cbz	r1, 80108fc <rclc_node_init_default+0x58>
 80108b0:	4616      	mov	r6, r2
 80108b2:	b31a      	cbz	r2, 80108fc <rclc_node_init_default+0x58>
 80108b4:	461f      	mov	r7, r3
 80108b6:	b30b      	cbz	r3, 80108fc <rclc_node_init_default+0x58>
 80108b8:	f10d 0810 	add.w	r8, sp, #16
 80108bc:	4604      	mov	r4, r0
 80108be:	4640      	mov	r0, r8
 80108c0:	f006 f8c2 	bl	8016a48 <rcl_get_zero_initialized_node>
 80108c4:	e898 0003 	ldmia.w	r8, {r0, r1}
 80108c8:	f10d 0918 	add.w	r9, sp, #24
 80108cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80108d0:	4648      	mov	r0, r9
 80108d2:	f006 fa31 	bl	8016d38 <rcl_node_get_default_options>
 80108d6:	4640      	mov	r0, r8
 80108d8:	f006 f8b6 	bl	8016a48 <rcl_get_zero_initialized_node>
 80108dc:	f8cd 9000 	str.w	r9, [sp]
 80108e0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80108e4:	463b      	mov	r3, r7
 80108e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80108ea:	4632      	mov	r2, r6
 80108ec:	4629      	mov	r1, r5
 80108ee:	4620      	mov	r0, r4
 80108f0:	f006 f8b4 	bl	8016a5c <rcl_node_init>
 80108f4:	b930      	cbnz	r0, 8010904 <rclc_node_init_default+0x60>
 80108f6:	b021      	add	sp, #132	; 0x84
 80108f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108fc:	200b      	movs	r0, #11
 80108fe:	b021      	add	sp, #132	; 0x84
 8010900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010904:	9003      	str	r0, [sp, #12]
 8010906:	f000 f8a3 	bl	8010a50 <rcutils_reset_error>
 801090a:	f000 f8a1 	bl	8010a50 <rcutils_reset_error>
 801090e:	9803      	ldr	r0, [sp, #12]
 8010910:	b021      	add	sp, #132	; 0x84
 8010912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010916:	200b      	movs	r0, #11
 8010918:	4770      	bx	lr
 801091a:	bf00      	nop

0801091c <rclc_publisher_init_default>:
 801091c:	b368      	cbz	r0, 801097a <rclc_publisher_init_default+0x5e>
 801091e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010922:	460d      	mov	r5, r1
 8010924:	b0a0      	sub	sp, #128	; 0x80
 8010926:	b321      	cbz	r1, 8010972 <rclc_publisher_init_default+0x56>
 8010928:	4616      	mov	r6, r2
 801092a:	b312      	cbz	r2, 8010972 <rclc_publisher_init_default+0x56>
 801092c:	461f      	mov	r7, r3
 801092e:	b303      	cbz	r3, 8010972 <rclc_publisher_init_default+0x56>
 8010930:	4604      	mov	r4, r0
 8010932:	f7ff fe7f 	bl	8010634 <rcl_get_zero_initialized_publisher>
 8010936:	f10d 0810 	add.w	r8, sp, #16
 801093a:	6020      	str	r0, [r4, #0]
 801093c:	4640      	mov	r0, r8
 801093e:	f7ff ff15 	bl	801076c <rcl_publisher_get_default_options>
 8010942:	490f      	ldr	r1, [pc, #60]	; (8010980 <rclc_publisher_init_default+0x64>)
 8010944:	2250      	movs	r2, #80	; 0x50
 8010946:	4640      	mov	r0, r8
 8010948:	f00a fbde 	bl	801b108 <memcpy>
 801094c:	f8cd 8000 	str.w	r8, [sp]
 8010950:	463b      	mov	r3, r7
 8010952:	4632      	mov	r2, r6
 8010954:	4629      	mov	r1, r5
 8010956:	4620      	mov	r0, r4
 8010958:	f7ff fe72 	bl	8010640 <rcl_publisher_init>
 801095c:	b910      	cbnz	r0, 8010964 <rclc_publisher_init_default+0x48>
 801095e:	b020      	add	sp, #128	; 0x80
 8010960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010964:	9003      	str	r0, [sp, #12]
 8010966:	f000 f873 	bl	8010a50 <rcutils_reset_error>
 801096a:	9803      	ldr	r0, [sp, #12]
 801096c:	b020      	add	sp, #128	; 0x80
 801096e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010972:	200b      	movs	r0, #11
 8010974:	b020      	add	sp, #128	; 0x80
 8010976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801097a:	200b      	movs	r0, #11
 801097c:	4770      	bx	lr
 801097e:	bf00      	nop
 8010980:	0801c8f0 	.word	0x0801c8f0

08010984 <__default_zero_allocate>:
 8010984:	f00a b9ba 	b.w	801acfc <calloc>

08010988 <__default_reallocate>:
 8010988:	f00a bd4e 	b.w	801b428 <realloc>

0801098c <__default_deallocate>:
 801098c:	f00a bbb4 	b.w	801b0f8 <free>

08010990 <__default_allocate>:
 8010990:	f00a bbaa 	b.w	801b0e8 <malloc>

08010994 <rcutils_get_zero_initialized_allocator>:
 8010994:	b510      	push	{r4, lr}
 8010996:	4c05      	ldr	r4, [pc, #20]	; (80109ac <rcutils_get_zero_initialized_allocator+0x18>)
 8010998:	4686      	mov	lr, r0
 801099a:	4684      	mov	ip, r0
 801099c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801099e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80109a2:	6823      	ldr	r3, [r4, #0]
 80109a4:	f8cc 3000 	str.w	r3, [ip]
 80109a8:	4670      	mov	r0, lr
 80109aa:	bd10      	pop	{r4, pc}
 80109ac:	0801c940 	.word	0x0801c940

080109b0 <rcutils_set_default_allocator>:
 80109b0:	b1a8      	cbz	r0, 80109de <rcutils_set_default_allocator+0x2e>
 80109b2:	6802      	ldr	r2, [r0, #0]
 80109b4:	b1a2      	cbz	r2, 80109e0 <rcutils_set_default_allocator+0x30>
 80109b6:	6841      	ldr	r1, [r0, #4]
 80109b8:	b1a1      	cbz	r1, 80109e4 <rcutils_set_default_allocator+0x34>
 80109ba:	b410      	push	{r4}
 80109bc:	68c4      	ldr	r4, [r0, #12]
 80109be:	b164      	cbz	r4, 80109da <rcutils_set_default_allocator+0x2a>
 80109c0:	6880      	ldr	r0, [r0, #8]
 80109c2:	b138      	cbz	r0, 80109d4 <rcutils_set_default_allocator+0x24>
 80109c4:	4b08      	ldr	r3, [pc, #32]	; (80109e8 <rcutils_set_default_allocator+0x38>)
 80109c6:	601a      	str	r2, [r3, #0]
 80109c8:	2200      	movs	r2, #0
 80109ca:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80109ce:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80109d2:	2001      	movs	r0, #1
 80109d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109d8:	4770      	bx	lr
 80109da:	4620      	mov	r0, r4
 80109dc:	e7fa      	b.n	80109d4 <rcutils_set_default_allocator+0x24>
 80109de:	4770      	bx	lr
 80109e0:	4610      	mov	r0, r2
 80109e2:	4770      	bx	lr
 80109e4:	4608      	mov	r0, r1
 80109e6:	4770      	bx	lr
 80109e8:	20000104 	.word	0x20000104

080109ec <rcutils_get_default_allocator>:
 80109ec:	b510      	push	{r4, lr}
 80109ee:	4c05      	ldr	r4, [pc, #20]	; (8010a04 <rcutils_get_default_allocator+0x18>)
 80109f0:	4686      	mov	lr, r0
 80109f2:	4684      	mov	ip, r0
 80109f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80109fa:	6823      	ldr	r3, [r4, #0]
 80109fc:	f8cc 3000 	str.w	r3, [ip]
 8010a00:	4670      	mov	r0, lr
 8010a02:	bd10      	pop	{r4, pc}
 8010a04:	20000104 	.word	0x20000104

08010a08 <rcutils_allocator_is_valid>:
 8010a08:	b158      	cbz	r0, 8010a22 <rcutils_allocator_is_valid+0x1a>
 8010a0a:	6803      	ldr	r3, [r0, #0]
 8010a0c:	b143      	cbz	r3, 8010a20 <rcutils_allocator_is_valid+0x18>
 8010a0e:	6843      	ldr	r3, [r0, #4]
 8010a10:	b133      	cbz	r3, 8010a20 <rcutils_allocator_is_valid+0x18>
 8010a12:	68c3      	ldr	r3, [r0, #12]
 8010a14:	b123      	cbz	r3, 8010a20 <rcutils_allocator_is_valid+0x18>
 8010a16:	6880      	ldr	r0, [r0, #8]
 8010a18:	3800      	subs	r0, #0
 8010a1a:	bf18      	it	ne
 8010a1c:	2001      	movne	r0, #1
 8010a1e:	4770      	bx	lr
 8010a20:	4618      	mov	r0, r3
 8010a22:	4770      	bx	lr

08010a24 <rcutils_get_error_string>:
 8010a24:	4b06      	ldr	r3, [pc, #24]	; (8010a40 <rcutils_get_error_string+0x1c>)
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	b13b      	cbz	r3, 8010a3a <rcutils_get_error_string+0x16>
 8010a2a:	4b06      	ldr	r3, [pc, #24]	; (8010a44 <rcutils_get_error_string+0x20>)
 8010a2c:	781a      	ldrb	r2, [r3, #0]
 8010a2e:	b90a      	cbnz	r2, 8010a34 <rcutils_get_error_string+0x10>
 8010a30:	2201      	movs	r2, #1
 8010a32:	701a      	strb	r2, [r3, #0]
 8010a34:	4b04      	ldr	r3, [pc, #16]	; (8010a48 <rcutils_get_error_string+0x24>)
 8010a36:	7818      	ldrb	r0, [r3, #0]
 8010a38:	4770      	bx	lr
 8010a3a:	4b04      	ldr	r3, [pc, #16]	; (8010a4c <rcutils_get_error_string+0x28>)
 8010a3c:	7818      	ldrb	r0, [r3, #0]
 8010a3e:	4770      	bx	lr
 8010a40:	20011868 	.word	0x20011868
 8010a44:	20011881 	.word	0x20011881
 8010a48:	20011880 	.word	0x20011880
 8010a4c:	0801cb80 	.word	0x0801cb80

08010a50 <rcutils_reset_error>:
 8010a50:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8010a70 <rcutils_reset_error+0x20>
 8010a54:	4a08      	ldr	r2, [pc, #32]	; (8010a78 <rcutils_reset_error+0x28>)
 8010a56:	4809      	ldr	r0, [pc, #36]	; (8010a7c <rcutils_reset_error+0x2c>)
 8010a58:	4909      	ldr	r1, [pc, #36]	; (8010a80 <rcutils_reset_error+0x30>)
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	8013      	strh	r3, [r2, #0]
 8010a5e:	ed82 7b02 	vstr	d7, [r2, #8]
 8010a62:	4a08      	ldr	r2, [pc, #32]	; (8010a84 <rcutils_reset_error+0x34>)
 8010a64:	7003      	strb	r3, [r0, #0]
 8010a66:	700b      	strb	r3, [r1, #0]
 8010a68:	7013      	strb	r3, [r2, #0]
 8010a6a:	4770      	bx	lr
 8010a6c:	f3af 8000 	nop.w
	...
 8010a78:	20011870 	.word	0x20011870
 8010a7c:	20011881 	.word	0x20011881
 8010a80:	20011880 	.word	0x20011880
 8010a84:	20011868 	.word	0x20011868

08010a88 <rmw_get_default_publisher_options>:
 8010a88:	2200      	movs	r2, #0
 8010a8a:	6002      	str	r2, [r0, #0]
 8010a8c:	7102      	strb	r2, [r0, #4]
 8010a8e:	4770      	bx	lr

08010a90 <rmw_uros_set_custom_transport>:
 8010a90:	b470      	push	{r4, r5, r6}
 8010a92:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8010a96:	b162      	cbz	r2, 8010ab2 <rmw_uros_set_custom_transport+0x22>
 8010a98:	b15b      	cbz	r3, 8010ab2 <rmw_uros_set_custom_transport+0x22>
 8010a9a:	b155      	cbz	r5, 8010ab2 <rmw_uros_set_custom_transport+0x22>
 8010a9c:	b14e      	cbz	r6, 8010ab2 <rmw_uros_set_custom_transport+0x22>
 8010a9e:	4c06      	ldr	r4, [pc, #24]	; (8010ab8 <rmw_uros_set_custom_transport+0x28>)
 8010aa0:	7020      	strb	r0, [r4, #0]
 8010aa2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010aa6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010aaa:	6166      	str	r6, [r4, #20]
 8010aac:	2000      	movs	r0, #0
 8010aae:	bc70      	pop	{r4, r5, r6}
 8010ab0:	4770      	bx	lr
 8010ab2:	200b      	movs	r0, #11
 8010ab4:	bc70      	pop	{r4, r5, r6}
 8010ab6:	4770      	bx	lr
 8010ab8:	20011884 	.word	0x20011884

08010abc <flush_session>:
 8010abc:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8010abe:	f003 beb9 	b.w	8014834 <uxr_run_session_until_confirm_delivery>
 8010ac2:	bf00      	nop

08010ac4 <rmw_publish>:
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	d053      	beq.n	8010b70 <rmw_publish+0xac>
 8010ac8:	b570      	push	{r4, r5, r6, lr}
 8010aca:	460d      	mov	r5, r1
 8010acc:	b08e      	sub	sp, #56	; 0x38
 8010ace:	2900      	cmp	r1, #0
 8010ad0:	d04b      	beq.n	8010b6a <rmw_publish+0xa6>
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	6800      	ldr	r0, [r0, #0]
 8010ad6:	f000 fc3b 	bl	8011350 <is_uxrce_rmw_identifier_valid>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d045      	beq.n	8010b6a <rmw_publish+0xa6>
 8010ade:	6866      	ldr	r6, [r4, #4]
 8010ae0:	2e00      	cmp	r6, #0
 8010ae2:	d042      	beq.n	8010b6a <rmw_publish+0xa6>
 8010ae4:	69b4      	ldr	r4, [r6, #24]
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	6923      	ldr	r3, [r4, #16]
 8010aea:	4798      	blx	r3
 8010aec:	69f3      	ldr	r3, [r6, #28]
 8010aee:	9005      	str	r0, [sp, #20]
 8010af0:	b113      	cbz	r3, 8010af8 <rmw_publish+0x34>
 8010af2:	a805      	add	r0, sp, #20
 8010af4:	4798      	blx	r3
 8010af6:	9805      	ldr	r0, [sp, #20]
 8010af8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8010afc:	691b      	ldr	r3, [r3, #16]
 8010afe:	9000      	str	r0, [sp, #0]
 8010b00:	6972      	ldr	r2, [r6, #20]
 8010b02:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8010b04:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010b08:	ab06      	add	r3, sp, #24
 8010b0a:	f004 fc7f 	bl	801540c <uxr_prepare_output_stream>
 8010b0e:	b1d8      	cbz	r0, 8010b48 <rmw_publish+0x84>
 8010b10:	68a3      	ldr	r3, [r4, #8]
 8010b12:	a906      	add	r1, sp, #24
 8010b14:	4628      	mov	r0, r5
 8010b16:	4798      	blx	r3
 8010b18:	6a33      	ldr	r3, [r6, #32]
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	b10b      	cbz	r3, 8010b22 <rmw_publish+0x5e>
 8010b1e:	a806      	add	r0, sp, #24
 8010b20:	4798      	blx	r3
 8010b22:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8010b2c:	d022      	beq.n	8010b74 <rmw_publish+0xb0>
 8010b2e:	6918      	ldr	r0, [r3, #16]
 8010b30:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8010b32:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010b36:	f003 fe7d 	bl	8014834 <uxr_run_session_until_confirm_delivery>
 8010b3a:	4020      	ands	r0, r4
 8010b3c:	b2c4      	uxtb	r4, r0
 8010b3e:	f084 0001 	eor.w	r0, r4, #1
 8010b42:	b2c0      	uxtb	r0, r0
 8010b44:	b00e      	add	sp, #56	; 0x38
 8010b46:	bd70      	pop	{r4, r5, r6, pc}
 8010b48:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8010b4c:	6918      	ldr	r0, [r3, #16]
 8010b4e:	9b05      	ldr	r3, [sp, #20]
 8010b50:	9300      	str	r3, [sp, #0]
 8010b52:	4b0b      	ldr	r3, [pc, #44]	; (8010b80 <rmw_publish+0xbc>)
 8010b54:	9301      	str	r3, [sp, #4]
 8010b56:	9602      	str	r6, [sp, #8]
 8010b58:	6972      	ldr	r2, [r6, #20]
 8010b5a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8010b5c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010b60:	ab06      	add	r3, sp, #24
 8010b62:	f004 fc83 	bl	801546c <uxr_prepare_output_stream_fragmented>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	d1d2      	bne.n	8010b10 <rmw_publish+0x4c>
 8010b6a:	2001      	movs	r0, #1
 8010b6c:	b00e      	add	sp, #56	; 0x38
 8010b6e:	bd70      	pop	{r4, r5, r6, pc}
 8010b70:	2001      	movs	r0, #1
 8010b72:	4770      	bx	lr
 8010b74:	6918      	ldr	r0, [r3, #16]
 8010b76:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010b7a:	f003 fad5 	bl	8014128 <uxr_flash_output_streams>
 8010b7e:	e7de      	b.n	8010b3e <rmw_publish+0x7a>
 8010b80:	08010abd 	.word	0x08010abd

08010b84 <rmw_create_publisher>:
 8010b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b88:	b087      	sub	sp, #28
 8010b8a:	2800      	cmp	r0, #0
 8010b8c:	f000 80cf 	beq.w	8010d2e <rmw_create_publisher+0x1aa>
 8010b90:	460e      	mov	r6, r1
 8010b92:	2900      	cmp	r1, #0
 8010b94:	f000 80cb 	beq.w	8010d2e <rmw_create_publisher+0x1aa>
 8010b98:	4604      	mov	r4, r0
 8010b9a:	6800      	ldr	r0, [r0, #0]
 8010b9c:	4615      	mov	r5, r2
 8010b9e:	4698      	mov	r8, r3
 8010ba0:	f000 fbd6 	bl	8011350 <is_uxrce_rmw_identifier_valid>
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	f000 80c2 	beq.w	8010d2e <rmw_create_publisher+0x1aa>
 8010baa:	2d00      	cmp	r5, #0
 8010bac:	f000 80bf 	beq.w	8010d2e <rmw_create_publisher+0x1aa>
 8010bb0:	782b      	ldrb	r3, [r5, #0]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	f000 80bb 	beq.w	8010d2e <rmw_create_publisher+0x1aa>
 8010bb8:	f1b8 0f00 	cmp.w	r8, #0
 8010bbc:	f000 80b7 	beq.w	8010d2e <rmw_create_publisher+0x1aa>
 8010bc0:	485d      	ldr	r0, [pc, #372]	; (8010d38 <rmw_create_publisher+0x1b4>)
 8010bc2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010bc6:	f007 f817 	bl	8017bf8 <get_memory>
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	f000 80af 	beq.w	8010d2e <rmw_create_publisher+0x1aa>
 8010bd0:	6884      	ldr	r4, [r0, #8]
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8010bd8:	f007 f832 	bl	8017c40 <rmw_get_implementation_identifier>
 8010bdc:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8010be0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8010be4:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8010be8:	4628      	mov	r0, r5
 8010bea:	f7ef fafb 	bl	80001e4 <strlen>
 8010bee:	3001      	adds	r0, #1
 8010bf0:	283c      	cmp	r0, #60	; 0x3c
 8010bf2:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8010bf6:	f200 8097 	bhi.w	8010d28 <rmw_create_publisher+0x1a4>
 8010bfa:	4a50      	ldr	r2, [pc, #320]	; (8010d3c <rmw_create_publisher+0x1b8>)
 8010bfc:	462b      	mov	r3, r5
 8010bfe:	213c      	movs	r1, #60	; 0x3c
 8010c00:	4650      	mov	r0, sl
 8010c02:	f00a fc93 	bl	801b52c <sniprintf>
 8010c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010c0a:	67e3      	str	r3, [r4, #124]	; 0x7c
 8010c0c:	4641      	mov	r1, r8
 8010c0e:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8010c12:	2250      	movs	r2, #80	; 0x50
 8010c14:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8010c18:	f00a fa76 	bl	801b108 <memcpy>
 8010c1c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8010c20:	4947      	ldr	r1, [pc, #284]	; (8010d40 <rmw_create_publisher+0x1bc>)
 8010c22:	2b02      	cmp	r3, #2
 8010c24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c28:	bf0c      	ite	eq
 8010c2a:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8010c2e:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8010c32:	67a3      	str	r3, [r4, #120]	; 0x78
 8010c34:	2300      	movs	r3, #0
 8010c36:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010c3a:	4630      	mov	r0, r6
 8010c3c:	f000 fb96 	bl	801136c <get_message_typesupport_handle>
 8010c40:	2800      	cmp	r0, #0
 8010c42:	d071      	beq.n	8010d28 <rmw_create_publisher+0x1a4>
 8010c44:	6842      	ldr	r2, [r0, #4]
 8010c46:	61a2      	str	r2, [r4, #24]
 8010c48:	2a00      	cmp	r2, #0
 8010c4a:	d06d      	beq.n	8010d28 <rmw_create_publisher+0x1a4>
 8010c4c:	4629      	mov	r1, r5
 8010c4e:	4643      	mov	r3, r8
 8010c50:	4648      	mov	r0, r9
 8010c52:	f007 fa5b 	bl	801810c <create_topic>
 8010c56:	6260      	str	r0, [r4, #36]	; 0x24
 8010c58:	2800      	cmp	r0, #0
 8010c5a:	d065      	beq.n	8010d28 <rmw_create_publisher+0x1a4>
 8010c5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c64:	2103      	movs	r1, #3
 8010c66:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8010c6a:	1c42      	adds	r2, r0, #1
 8010c6c:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8010c70:	f003 f90c 	bl	8013e8c <uxr_object_id>
 8010c74:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8010c78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c7c:	6120      	str	r0, [r4, #16]
 8010c7e:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8010c82:	6910      	ldr	r0, [r2, #16]
 8010c84:	2506      	movs	r5, #6
 8010c86:	9500      	str	r5, [sp, #0]
 8010c88:	6819      	ldr	r1, [r3, #0]
 8010c8a:	6922      	ldr	r2, [r4, #16]
 8010c8c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010c90:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010c94:	f003 f854 	bl	8013d40 <uxr_buffer_create_publisher_bin>
 8010c98:	4602      	mov	r2, r0
 8010c9a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010c9e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010ca2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010ca6:	f000 fad3 	bl	8011250 <run_xrce_session>
 8010caa:	b3c8      	cbz	r0, 8010d20 <rmw_create_publisher+0x19c>
 8010cac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010cb0:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8010cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cb8:	2105      	movs	r1, #5
 8010cba:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8010cbe:	1c42      	adds	r2, r0, #1
 8010cc0:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8010cc4:	f003 f8e2 	bl	8013e8c <uxr_object_id>
 8010cc8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010ccc:	6160      	str	r0, [r4, #20]
 8010cce:	691e      	ldr	r6, [r3, #16]
 8010cd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010cd4:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8010cd8:	f10d 0a10 	add.w	sl, sp, #16
 8010cdc:	4641      	mov	r1, r8
 8010cde:	4650      	mov	r0, sl
 8010ce0:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 8010ce4:	f000 fad0 	bl	8011288 <convert_qos_profile>
 8010ce8:	9503      	str	r5, [sp, #12]
 8010cea:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8010cee:	9001      	str	r0, [sp, #4]
 8010cf0:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010cf4:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010cf8:	9300      	str	r3, [sp, #0]
 8010cfa:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8010cfe:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010d02:	f8d8 1000 	ldr.w	r1, [r8]
 8010d06:	4630      	mov	r0, r6
 8010d08:	f003 f84a 	bl	8013da0 <uxr_buffer_create_datawriter_bin>
 8010d0c:	4602      	mov	r2, r0
 8010d0e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010d12:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010d16:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010d1a:	f000 fa99 	bl	8011250 <run_xrce_session>
 8010d1e:	b938      	cbnz	r0, 8010d30 <rmw_create_publisher+0x1ac>
 8010d20:	4805      	ldr	r0, [pc, #20]	; (8010d38 <rmw_create_publisher+0x1b4>)
 8010d22:	4621      	mov	r1, r4
 8010d24:	f006 ff78 	bl	8017c18 <put_memory>
 8010d28:	4638      	mov	r0, r7
 8010d2a:	f000 f9dd 	bl	80110e8 <rmw_uxrce_fini_publisher_memory>
 8010d2e:	2700      	movs	r7, #0
 8010d30:	4638      	mov	r0, r7
 8010d32:	b007      	add	sp, #28
 8010d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d38:	2001617c 	.word	0x2001617c
 8010d3c:	0801c988 	.word	0x0801c988
 8010d40:	0801c954 	.word	0x0801c954

08010d44 <rmw_publisher_get_actual_qos>:
 8010d44:	2000      	movs	r0, #0
 8010d46:	4770      	bx	lr

08010d48 <rmw_destroy_publisher>:
 8010d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d4a:	b128      	cbz	r0, 8010d58 <rmw_destroy_publisher+0x10>
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	6800      	ldr	r0, [r0, #0]
 8010d50:	460d      	mov	r5, r1
 8010d52:	f000 fafd 	bl	8011350 <is_uxrce_rmw_identifier_valid>
 8010d56:	b910      	cbnz	r0, 8010d5e <rmw_destroy_publisher+0x16>
 8010d58:	2401      	movs	r4, #1
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d5e:	6863      	ldr	r3, [r4, #4]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d0f9      	beq.n	8010d58 <rmw_destroy_publisher+0x10>
 8010d64:	2d00      	cmp	r5, #0
 8010d66:	d0f7      	beq.n	8010d58 <rmw_destroy_publisher+0x10>
 8010d68:	6828      	ldr	r0, [r5, #0]
 8010d6a:	f000 faf1 	bl	8011350 <is_uxrce_rmw_identifier_valid>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	d0f2      	beq.n	8010d58 <rmw_destroy_publisher+0x10>
 8010d72:	686c      	ldr	r4, [r5, #4]
 8010d74:	2c00      	cmp	r4, #0
 8010d76:	d0ef      	beq.n	8010d58 <rmw_destroy_publisher+0x10>
 8010d78:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010d7a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 8010d7e:	f007 fa29 	bl	80181d4 <destroy_topic>
 8010d82:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010d86:	6962      	ldr	r2, [r4, #20]
 8010d88:	6918      	ldr	r0, [r3, #16]
 8010d8a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010d8e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010d92:	6819      	ldr	r1, [r3, #0]
 8010d94:	f002 ff20 	bl	8013bd8 <uxr_buffer_delete_entity>
 8010d98:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010d9c:	6922      	ldr	r2, [r4, #16]
 8010d9e:	691b      	ldr	r3, [r3, #16]
 8010da0:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8010da4:	4604      	mov	r4, r0
 8010da6:	6809      	ldr	r1, [r1, #0]
 8010da8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010dac:	f002 ff14 	bl	8013bd8 <uxr_buffer_delete_entity>
 8010db0:	693e      	ldr	r6, [r7, #16]
 8010db2:	4622      	mov	r2, r4
 8010db4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8010db8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	4630      	mov	r0, r6
 8010dc0:	f000 fa46 	bl	8011250 <run_xrce_session>
 8010dc4:	693e      	ldr	r6, [r7, #16]
 8010dc6:	4622      	mov	r2, r4
 8010dc8:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8010dcc:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8010dd0:	4604      	mov	r4, r0
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	f000 fa3c 	bl	8011250 <run_xrce_session>
 8010dd8:	b12c      	cbz	r4, 8010de6 <rmw_destroy_publisher+0x9e>
 8010dda:	b120      	cbz	r0, 8010de6 <rmw_destroy_publisher+0x9e>
 8010ddc:	2400      	movs	r4, #0
 8010dde:	4628      	mov	r0, r5
 8010de0:	f000 f982 	bl	80110e8 <rmw_uxrce_fini_publisher_memory>
 8010de4:	e7b9      	b.n	8010d5a <rmw_destroy_publisher+0x12>
 8010de6:	2402      	movs	r4, #2
 8010de8:	e7f9      	b.n	8010dde <rmw_destroy_publisher+0x96>
 8010dea:	bf00      	nop

08010dec <rmw_uxrce_init_service_memory>:
 8010dec:	b1e2      	cbz	r2, 8010e28 <rmw_uxrce_init_service_memory+0x3c>
 8010dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010df2:	7b05      	ldrb	r5, [r0, #12]
 8010df4:	4606      	mov	r6, r0
 8010df6:	b9ad      	cbnz	r5, 8010e24 <rmw_uxrce_init_service_memory+0x38>
 8010df8:	23c8      	movs	r3, #200	; 0xc8
 8010dfa:	e9c0 5500 	strd	r5, r5, [r0]
 8010dfe:	6083      	str	r3, [r0, #8]
 8010e00:	f240 1301 	movw	r3, #257	; 0x101
 8010e04:	4617      	mov	r7, r2
 8010e06:	8183      	strh	r3, [r0, #12]
 8010e08:	460c      	mov	r4, r1
 8010e0a:	46a8      	mov	r8, r5
 8010e0c:	4621      	mov	r1, r4
 8010e0e:	4630      	mov	r0, r6
 8010e10:	3501      	adds	r5, #1
 8010e12:	f006 ff01 	bl	8017c18 <put_memory>
 8010e16:	42af      	cmp	r7, r5
 8010e18:	60a4      	str	r4, [r4, #8]
 8010e1a:	f884 800c 	strb.w	r8, [r4, #12]
 8010e1e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8010e22:	d1f3      	bne.n	8010e0c <rmw_uxrce_init_service_memory+0x20>
 8010e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e28:	4770      	bx	lr
 8010e2a:	bf00      	nop

08010e2c <rmw_uxrce_init_client_memory>:
 8010e2c:	b1e2      	cbz	r2, 8010e68 <rmw_uxrce_init_client_memory+0x3c>
 8010e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e32:	7b05      	ldrb	r5, [r0, #12]
 8010e34:	4606      	mov	r6, r0
 8010e36:	b9ad      	cbnz	r5, 8010e64 <rmw_uxrce_init_client_memory+0x38>
 8010e38:	23c8      	movs	r3, #200	; 0xc8
 8010e3a:	e9c0 5500 	strd	r5, r5, [r0]
 8010e3e:	6083      	str	r3, [r0, #8]
 8010e40:	f240 1301 	movw	r3, #257	; 0x101
 8010e44:	4617      	mov	r7, r2
 8010e46:	8183      	strh	r3, [r0, #12]
 8010e48:	460c      	mov	r4, r1
 8010e4a:	46a8      	mov	r8, r5
 8010e4c:	4621      	mov	r1, r4
 8010e4e:	4630      	mov	r0, r6
 8010e50:	3501      	adds	r5, #1
 8010e52:	f006 fee1 	bl	8017c18 <put_memory>
 8010e56:	42af      	cmp	r7, r5
 8010e58:	60a4      	str	r4, [r4, #8]
 8010e5a:	f884 800c 	strb.w	r8, [r4, #12]
 8010e5e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8010e62:	d1f3      	bne.n	8010e4c <rmw_uxrce_init_client_memory+0x20>
 8010e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e68:	4770      	bx	lr
 8010e6a:	bf00      	nop

08010e6c <rmw_uxrce_init_publisher_memory>:
 8010e6c:	b1e2      	cbz	r2, 8010ea8 <rmw_uxrce_init_publisher_memory+0x3c>
 8010e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e72:	7b05      	ldrb	r5, [r0, #12]
 8010e74:	4606      	mov	r6, r0
 8010e76:	b9ad      	cbnz	r5, 8010ea4 <rmw_uxrce_init_publisher_memory+0x38>
 8010e78:	23d8      	movs	r3, #216	; 0xd8
 8010e7a:	e9c0 5500 	strd	r5, r5, [r0]
 8010e7e:	6083      	str	r3, [r0, #8]
 8010e80:	f240 1301 	movw	r3, #257	; 0x101
 8010e84:	4617      	mov	r7, r2
 8010e86:	8183      	strh	r3, [r0, #12]
 8010e88:	460c      	mov	r4, r1
 8010e8a:	46a8      	mov	r8, r5
 8010e8c:	4621      	mov	r1, r4
 8010e8e:	4630      	mov	r0, r6
 8010e90:	3501      	adds	r5, #1
 8010e92:	f006 fec1 	bl	8017c18 <put_memory>
 8010e96:	42af      	cmp	r7, r5
 8010e98:	60a4      	str	r4, [r4, #8]
 8010e9a:	f884 800c 	strb.w	r8, [r4, #12]
 8010e9e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8010ea2:	d1f3      	bne.n	8010e8c <rmw_uxrce_init_publisher_memory+0x20>
 8010ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ea8:	4770      	bx	lr
 8010eaa:	bf00      	nop

08010eac <rmw_uxrce_init_subscription_memory>:
 8010eac:	b1e2      	cbz	r2, 8010ee8 <rmw_uxrce_init_subscription_memory+0x3c>
 8010eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb2:	7b05      	ldrb	r5, [r0, #12]
 8010eb4:	4606      	mov	r6, r0
 8010eb6:	b9ad      	cbnz	r5, 8010ee4 <rmw_uxrce_init_subscription_memory+0x38>
 8010eb8:	23d8      	movs	r3, #216	; 0xd8
 8010eba:	e9c0 5500 	strd	r5, r5, [r0]
 8010ebe:	6083      	str	r3, [r0, #8]
 8010ec0:	f240 1301 	movw	r3, #257	; 0x101
 8010ec4:	4617      	mov	r7, r2
 8010ec6:	8183      	strh	r3, [r0, #12]
 8010ec8:	460c      	mov	r4, r1
 8010eca:	46a8      	mov	r8, r5
 8010ecc:	4621      	mov	r1, r4
 8010ece:	4630      	mov	r0, r6
 8010ed0:	3501      	adds	r5, #1
 8010ed2:	f006 fea1 	bl	8017c18 <put_memory>
 8010ed6:	42af      	cmp	r7, r5
 8010ed8:	60a4      	str	r4, [r4, #8]
 8010eda:	f884 800c 	strb.w	r8, [r4, #12]
 8010ede:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8010ee2:	d1f3      	bne.n	8010ecc <rmw_uxrce_init_subscription_memory+0x20>
 8010ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ee8:	4770      	bx	lr
 8010eea:	bf00      	nop

08010eec <rmw_uxrce_init_node_memory>:
 8010eec:	b1e2      	cbz	r2, 8010f28 <rmw_uxrce_init_node_memory+0x3c>
 8010eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ef2:	7b05      	ldrb	r5, [r0, #12]
 8010ef4:	4606      	mov	r6, r0
 8010ef6:	b9ad      	cbnz	r5, 8010f24 <rmw_uxrce_init_node_memory+0x38>
 8010ef8:	23a4      	movs	r3, #164	; 0xa4
 8010efa:	e9c0 5500 	strd	r5, r5, [r0]
 8010efe:	6083      	str	r3, [r0, #8]
 8010f00:	f240 1301 	movw	r3, #257	; 0x101
 8010f04:	4617      	mov	r7, r2
 8010f06:	8183      	strh	r3, [r0, #12]
 8010f08:	460c      	mov	r4, r1
 8010f0a:	46a8      	mov	r8, r5
 8010f0c:	4621      	mov	r1, r4
 8010f0e:	4630      	mov	r0, r6
 8010f10:	3501      	adds	r5, #1
 8010f12:	f006 fe81 	bl	8017c18 <put_memory>
 8010f16:	42af      	cmp	r7, r5
 8010f18:	60a4      	str	r4, [r4, #8]
 8010f1a:	f884 800c 	strb.w	r8, [r4, #12]
 8010f1e:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8010f22:	d1f3      	bne.n	8010f0c <rmw_uxrce_init_node_memory+0x20>
 8010f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop

08010f2c <rmw_uxrce_init_session_memory>:
 8010f2c:	b1ea      	cbz	r2, 8010f6a <rmw_uxrce_init_session_memory+0x3e>
 8010f2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f32:	7b05      	ldrb	r5, [r0, #12]
 8010f34:	4606      	mov	r6, r0
 8010f36:	b9b5      	cbnz	r5, 8010f66 <rmw_uxrce_init_session_memory+0x3a>
 8010f38:	e9c0 5500 	strd	r5, r5, [r0]
 8010f3c:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8010f40:	f240 1301 	movw	r3, #257	; 0x101
 8010f44:	4617      	mov	r7, r2
 8010f46:	f8c0 8008 	str.w	r8, [r0, #8]
 8010f4a:	460c      	mov	r4, r1
 8010f4c:	8183      	strh	r3, [r0, #12]
 8010f4e:	46a9      	mov	r9, r5
 8010f50:	4621      	mov	r1, r4
 8010f52:	4630      	mov	r0, r6
 8010f54:	3501      	adds	r5, #1
 8010f56:	f006 fe5f 	bl	8017c18 <put_memory>
 8010f5a:	42af      	cmp	r7, r5
 8010f5c:	60a4      	str	r4, [r4, #8]
 8010f5e:	f884 900c 	strb.w	r9, [r4, #12]
 8010f62:	4444      	add	r4, r8
 8010f64:	d1f4      	bne.n	8010f50 <rmw_uxrce_init_session_memory+0x24>
 8010f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f6a:	4770      	bx	lr

08010f6c <rmw_uxrce_init_topic_memory>:
 8010f6c:	b1e2      	cbz	r2, 8010fa8 <rmw_uxrce_init_topic_memory+0x3c>
 8010f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f72:	7b05      	ldrb	r5, [r0, #12]
 8010f74:	4606      	mov	r6, r0
 8010f76:	b9ad      	cbnz	r5, 8010fa4 <rmw_uxrce_init_topic_memory+0x38>
 8010f78:	231c      	movs	r3, #28
 8010f7a:	e9c0 5500 	strd	r5, r5, [r0]
 8010f7e:	6083      	str	r3, [r0, #8]
 8010f80:	f240 1301 	movw	r3, #257	; 0x101
 8010f84:	4617      	mov	r7, r2
 8010f86:	8183      	strh	r3, [r0, #12]
 8010f88:	460c      	mov	r4, r1
 8010f8a:	46a8      	mov	r8, r5
 8010f8c:	4621      	mov	r1, r4
 8010f8e:	4630      	mov	r0, r6
 8010f90:	3501      	adds	r5, #1
 8010f92:	f006 fe41 	bl	8017c18 <put_memory>
 8010f96:	42af      	cmp	r7, r5
 8010f98:	60a4      	str	r4, [r4, #8]
 8010f9a:	f884 800c 	strb.w	r8, [r4, #12]
 8010f9e:	f104 041c 	add.w	r4, r4, #28
 8010fa2:	d1f3      	bne.n	8010f8c <rmw_uxrce_init_topic_memory+0x20>
 8010fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fa8:	4770      	bx	lr
 8010faa:	bf00      	nop

08010fac <rmw_uxrce_init_static_input_buffer_memory>:
 8010fac:	b1ea      	cbz	r2, 8010fea <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8010fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fb2:	7b05      	ldrb	r5, [r0, #12]
 8010fb4:	4606      	mov	r6, r0
 8010fb6:	b9b5      	cbnz	r5, 8010fe6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8010fb8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8010fbc:	e9c0 5500 	strd	r5, r5, [r0]
 8010fc0:	6083      	str	r3, [r0, #8]
 8010fc2:	f240 1301 	movw	r3, #257	; 0x101
 8010fc6:	4617      	mov	r7, r2
 8010fc8:	8183      	strh	r3, [r0, #12]
 8010fca:	460c      	mov	r4, r1
 8010fcc:	46a8      	mov	r8, r5
 8010fce:	4621      	mov	r1, r4
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	3501      	adds	r5, #1
 8010fd4:	f006 fe20 	bl	8017c18 <put_memory>
 8010fd8:	42af      	cmp	r7, r5
 8010fda:	60a4      	str	r4, [r4, #8]
 8010fdc:	f884 800c 	strb.w	r8, [r4, #12]
 8010fe0:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8010fe4:	d1f3      	bne.n	8010fce <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fea:	4770      	bx	lr

08010fec <rmw_uxrce_init_init_options_impl_memory>:
 8010fec:	b1e2      	cbz	r2, 8011028 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8010fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ff2:	7b05      	ldrb	r5, [r0, #12]
 8010ff4:	4606      	mov	r6, r0
 8010ff6:	b9ad      	cbnz	r5, 8011024 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010ff8:	232c      	movs	r3, #44	; 0x2c
 8010ffa:	e9c0 5500 	strd	r5, r5, [r0]
 8010ffe:	6083      	str	r3, [r0, #8]
 8011000:	f240 1301 	movw	r3, #257	; 0x101
 8011004:	4617      	mov	r7, r2
 8011006:	8183      	strh	r3, [r0, #12]
 8011008:	460c      	mov	r4, r1
 801100a:	46a8      	mov	r8, r5
 801100c:	4621      	mov	r1, r4
 801100e:	4630      	mov	r0, r6
 8011010:	3501      	adds	r5, #1
 8011012:	f006 fe01 	bl	8017c18 <put_memory>
 8011016:	42af      	cmp	r7, r5
 8011018:	60a4      	str	r4, [r4, #8]
 801101a:	f884 800c 	strb.w	r8, [r4, #12]
 801101e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8011022:	d1f3      	bne.n	801100c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8011024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011028:	4770      	bx	lr
 801102a:	bf00      	nop

0801102c <rmw_uxrce_init_wait_set_memory>:
 801102c:	b1e2      	cbz	r2, 8011068 <rmw_uxrce_init_wait_set_memory+0x3c>
 801102e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011032:	7b05      	ldrb	r5, [r0, #12]
 8011034:	4606      	mov	r6, r0
 8011036:	b9ad      	cbnz	r5, 8011064 <rmw_uxrce_init_wait_set_memory+0x38>
 8011038:	231c      	movs	r3, #28
 801103a:	e9c0 5500 	strd	r5, r5, [r0]
 801103e:	6083      	str	r3, [r0, #8]
 8011040:	f240 1301 	movw	r3, #257	; 0x101
 8011044:	4617      	mov	r7, r2
 8011046:	8183      	strh	r3, [r0, #12]
 8011048:	460c      	mov	r4, r1
 801104a:	46a8      	mov	r8, r5
 801104c:	4621      	mov	r1, r4
 801104e:	4630      	mov	r0, r6
 8011050:	3501      	adds	r5, #1
 8011052:	f006 fde1 	bl	8017c18 <put_memory>
 8011056:	42af      	cmp	r7, r5
 8011058:	60a4      	str	r4, [r4, #8]
 801105a:	f884 800c 	strb.w	r8, [r4, #12]
 801105e:	f104 041c 	add.w	r4, r4, #28
 8011062:	d1f3      	bne.n	801104c <rmw_uxrce_init_wait_set_memory+0x20>
 8011064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011068:	4770      	bx	lr
 801106a:	bf00      	nop

0801106c <rmw_uxrce_init_guard_condition_memory>:
 801106c:	b1e2      	cbz	r2, 80110a8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801106e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011072:	7b05      	ldrb	r5, [r0, #12]
 8011074:	4606      	mov	r6, r0
 8011076:	b9ad      	cbnz	r5, 80110a4 <rmw_uxrce_init_guard_condition_memory+0x38>
 8011078:	2320      	movs	r3, #32
 801107a:	e9c0 5500 	strd	r5, r5, [r0]
 801107e:	6083      	str	r3, [r0, #8]
 8011080:	f240 1301 	movw	r3, #257	; 0x101
 8011084:	4617      	mov	r7, r2
 8011086:	8183      	strh	r3, [r0, #12]
 8011088:	460c      	mov	r4, r1
 801108a:	46a8      	mov	r8, r5
 801108c:	4621      	mov	r1, r4
 801108e:	4630      	mov	r0, r6
 8011090:	3501      	adds	r5, #1
 8011092:	f006 fdc1 	bl	8017c18 <put_memory>
 8011096:	42af      	cmp	r7, r5
 8011098:	60a4      	str	r4, [r4, #8]
 801109a:	f884 800c 	strb.w	r8, [r4, #12]
 801109e:	f104 0420 	add.w	r4, r4, #32
 80110a2:	d1f3      	bne.n	801108c <rmw_uxrce_init_guard_condition_memory+0x20>
 80110a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110a8:	4770      	bx	lr
 80110aa:	bf00      	nop

080110ac <rmw_uxrce_fini_session_memory>:
 80110ac:	4601      	mov	r1, r0
 80110ae:	4801      	ldr	r0, [pc, #4]	; (80110b4 <rmw_uxrce_fini_session_memory+0x8>)
 80110b0:	f006 bdb2 	b.w	8017c18 <put_memory>
 80110b4:	2001619c 	.word	0x2001619c

080110b8 <rmw_uxrce_fini_node_memory>:
 80110b8:	b538      	push	{r3, r4, r5, lr}
 80110ba:	4604      	mov	r4, r0
 80110bc:	6800      	ldr	r0, [r0, #0]
 80110be:	b128      	cbz	r0, 80110cc <rmw_uxrce_fini_node_memory+0x14>
 80110c0:	4b07      	ldr	r3, [pc, #28]	; (80110e0 <rmw_uxrce_fini_node_memory+0x28>)
 80110c2:	6819      	ldr	r1, [r3, #0]
 80110c4:	f7ef f884 	bl	80001d0 <strcmp>
 80110c8:	b940      	cbnz	r0, 80110dc <rmw_uxrce_fini_node_memory+0x24>
 80110ca:	6020      	str	r0, [r4, #0]
 80110cc:	6861      	ldr	r1, [r4, #4]
 80110ce:	b129      	cbz	r1, 80110dc <rmw_uxrce_fini_node_memory+0x24>
 80110d0:	2500      	movs	r5, #0
 80110d2:	4804      	ldr	r0, [pc, #16]	; (80110e4 <rmw_uxrce_fini_node_memory+0x2c>)
 80110d4:	610d      	str	r5, [r1, #16]
 80110d6:	f006 fd9f 	bl	8017c18 <put_memory>
 80110da:	6065      	str	r5, [r4, #4]
 80110dc:	bd38      	pop	{r3, r4, r5, pc}
 80110de:	bf00      	nop
 80110e0:	0801d54c 	.word	0x0801d54c
 80110e4:	2001616c 	.word	0x2001616c

080110e8 <rmw_uxrce_fini_publisher_memory>:
 80110e8:	b510      	push	{r4, lr}
 80110ea:	4604      	mov	r4, r0
 80110ec:	6800      	ldr	r0, [r0, #0]
 80110ee:	b128      	cbz	r0, 80110fc <rmw_uxrce_fini_publisher_memory+0x14>
 80110f0:	4b06      	ldr	r3, [pc, #24]	; (801110c <rmw_uxrce_fini_publisher_memory+0x24>)
 80110f2:	6819      	ldr	r1, [r3, #0]
 80110f4:	f7ef f86c 	bl	80001d0 <strcmp>
 80110f8:	b938      	cbnz	r0, 801110a <rmw_uxrce_fini_publisher_memory+0x22>
 80110fa:	6020      	str	r0, [r4, #0]
 80110fc:	6861      	ldr	r1, [r4, #4]
 80110fe:	b121      	cbz	r1, 801110a <rmw_uxrce_fini_publisher_memory+0x22>
 8011100:	4803      	ldr	r0, [pc, #12]	; (8011110 <rmw_uxrce_fini_publisher_memory+0x28>)
 8011102:	f006 fd89 	bl	8017c18 <put_memory>
 8011106:	2300      	movs	r3, #0
 8011108:	6063      	str	r3, [r4, #4]
 801110a:	bd10      	pop	{r4, pc}
 801110c:	0801d54c 	.word	0x0801d54c
 8011110:	2001617c 	.word	0x2001617c

08011114 <rmw_uxrce_fini_subscription_memory>:
 8011114:	b510      	push	{r4, lr}
 8011116:	4604      	mov	r4, r0
 8011118:	6800      	ldr	r0, [r0, #0]
 801111a:	b128      	cbz	r0, 8011128 <rmw_uxrce_fini_subscription_memory+0x14>
 801111c:	4b06      	ldr	r3, [pc, #24]	; (8011138 <rmw_uxrce_fini_subscription_memory+0x24>)
 801111e:	6819      	ldr	r1, [r3, #0]
 8011120:	f7ef f856 	bl	80001d0 <strcmp>
 8011124:	b938      	cbnz	r0, 8011136 <rmw_uxrce_fini_subscription_memory+0x22>
 8011126:	6020      	str	r0, [r4, #0]
 8011128:	6861      	ldr	r1, [r4, #4]
 801112a:	b121      	cbz	r1, 8011136 <rmw_uxrce_fini_subscription_memory+0x22>
 801112c:	4803      	ldr	r0, [pc, #12]	; (801113c <rmw_uxrce_fini_subscription_memory+0x28>)
 801112e:	f006 fd73 	bl	8017c18 <put_memory>
 8011132:	2300      	movs	r3, #0
 8011134:	6063      	str	r3, [r4, #4]
 8011136:	bd10      	pop	{r4, pc}
 8011138:	0801d54c 	.word	0x0801d54c
 801113c:	200161bc 	.word	0x200161bc

08011140 <rmw_uxrce_fini_service_memory>:
 8011140:	b510      	push	{r4, lr}
 8011142:	4604      	mov	r4, r0
 8011144:	6800      	ldr	r0, [r0, #0]
 8011146:	b128      	cbz	r0, 8011154 <rmw_uxrce_fini_service_memory+0x14>
 8011148:	4b06      	ldr	r3, [pc, #24]	; (8011164 <rmw_uxrce_fini_service_memory+0x24>)
 801114a:	6819      	ldr	r1, [r3, #0]
 801114c:	f7ef f840 	bl	80001d0 <strcmp>
 8011150:	b938      	cbnz	r0, 8011162 <rmw_uxrce_fini_service_memory+0x22>
 8011152:	6020      	str	r0, [r4, #0]
 8011154:	6861      	ldr	r1, [r4, #4]
 8011156:	b121      	cbz	r1, 8011162 <rmw_uxrce_fini_service_memory+0x22>
 8011158:	4803      	ldr	r0, [pc, #12]	; (8011168 <rmw_uxrce_fini_service_memory+0x28>)
 801115a:	f006 fd5d 	bl	8017c18 <put_memory>
 801115e:	2300      	movs	r3, #0
 8011160:	6063      	str	r3, [r4, #4]
 8011162:	bd10      	pop	{r4, pc}
 8011164:	0801d54c 	.word	0x0801d54c
 8011168:	2001618c 	.word	0x2001618c

0801116c <rmw_uxrce_fini_client_memory>:
 801116c:	b510      	push	{r4, lr}
 801116e:	4604      	mov	r4, r0
 8011170:	6800      	ldr	r0, [r0, #0]
 8011172:	b128      	cbz	r0, 8011180 <rmw_uxrce_fini_client_memory+0x14>
 8011174:	4b06      	ldr	r3, [pc, #24]	; (8011190 <rmw_uxrce_fini_client_memory+0x24>)
 8011176:	6819      	ldr	r1, [r3, #0]
 8011178:	f7ef f82a 	bl	80001d0 <strcmp>
 801117c:	b938      	cbnz	r0, 801118e <rmw_uxrce_fini_client_memory+0x22>
 801117e:	6020      	str	r0, [r4, #0]
 8011180:	6861      	ldr	r1, [r4, #4]
 8011182:	b121      	cbz	r1, 801118e <rmw_uxrce_fini_client_memory+0x22>
 8011184:	4803      	ldr	r0, [pc, #12]	; (8011194 <rmw_uxrce_fini_client_memory+0x28>)
 8011186:	f006 fd47 	bl	8017c18 <put_memory>
 801118a:	2300      	movs	r3, #0
 801118c:	6063      	str	r3, [r4, #4]
 801118e:	bd10      	pop	{r4, pc}
 8011190:	0801d54c 	.word	0x0801d54c
 8011194:	200118a0 	.word	0x200118a0

08011198 <rmw_uxrce_fini_topic_memory>:
 8011198:	b510      	push	{r4, lr}
 801119a:	4604      	mov	r4, r0
 801119c:	4621      	mov	r1, r4
 801119e:	4803      	ldr	r0, [pc, #12]	; (80111ac <rmw_uxrce_fini_topic_memory+0x14>)
 80111a0:	f006 fd3a 	bl	8017c18 <put_memory>
 80111a4:	2300      	movs	r3, #0
 80111a6:	61a3      	str	r3, [r4, #24]
 80111a8:	bd10      	pop	{r4, pc}
 80111aa:	bf00      	nop
 80111ac:	200161cc 	.word	0x200161cc

080111b0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80111b0:	b082      	sub	sp, #8
 80111b2:	b530      	push	{r4, r5, lr}
 80111b4:	4925      	ldr	r1, [pc, #148]	; (801124c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80111b6:	680d      	ldr	r5, [r1, #0]
 80111b8:	ac03      	add	r4, sp, #12
 80111ba:	e884 000c 	stmia.w	r4, {r2, r3}
 80111be:	461c      	mov	r4, r3
 80111c0:	2d00      	cmp	r5, #0
 80111c2:	d041      	beq.n	8011248 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 80111c4:	462b      	mov	r3, r5
 80111c6:	2100      	movs	r1, #0
 80111c8:	689a      	ldr	r2, [r3, #8]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 80111d0:	4290      	cmp	r0, r2
 80111d2:	bf08      	it	eq
 80111d4:	3101      	addeq	r1, #1
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d1f6      	bne.n	80111c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80111da:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80111de:	2b02      	cmp	r3, #2
 80111e0:	d029      	beq.n	8011236 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80111e2:	d907      	bls.n	80111f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80111e4:	2b03      	cmp	r3, #3
 80111e6:	d005      	beq.n	80111f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80111e8:	2100      	movs	r1, #0
 80111ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111ee:	4608      	mov	r0, r1
 80111f0:	b002      	add	sp, #8
 80111f2:	4770      	bx	lr
 80111f4:	b314      	cbz	r4, 801123c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80111f6:	428c      	cmp	r4, r1
 80111f8:	d820      	bhi.n	801123c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80111fa:	2d00      	cmp	r5, #0
 80111fc:	d0f4      	beq.n	80111e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80111fe:	2100      	movs	r1, #0
 8011200:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011204:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8011208:	e002      	b.n	8011210 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 801120a:	686d      	ldr	r5, [r5, #4]
 801120c:	2d00      	cmp	r5, #0
 801120e:	d0ec      	beq.n	80111ea <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8011210:	68ab      	ldr	r3, [r5, #8]
 8011212:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8011216:	4290      	cmp	r0, r2
 8011218:	d1f7      	bne.n	801120a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801121a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 801121e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8011222:	4562      	cmp	r2, ip
 8011224:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011228:	eb73 0e04 	sbcs.w	lr, r3, r4
 801122c:	daed      	bge.n	801120a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801122e:	4694      	mov	ip, r2
 8011230:	461c      	mov	r4, r3
 8011232:	4629      	mov	r1, r5
 8011234:	e7e9      	b.n	801120a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011236:	b10c      	cbz	r4, 801123c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011238:	428c      	cmp	r4, r1
 801123a:	d9d5      	bls.n	80111e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 801123c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011240:	4802      	ldr	r0, [pc, #8]	; (801124c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011242:	b002      	add	sp, #8
 8011244:	f006 bcd8 	b.w	8017bf8 <get_memory>
 8011248:	4629      	mov	r1, r5
 801124a:	e7c6      	b.n	80111da <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 801124c:	200161ac 	.word	0x200161ac

08011250 <run_xrce_session>:
 8011250:	b510      	push	{r4, lr}
 8011252:	788c      	ldrb	r4, [r1, #2]
 8011254:	b086      	sub	sp, #24
 8011256:	2c01      	cmp	r4, #1
 8011258:	f8ad 200e 	strh.w	r2, [sp, #14]
 801125c:	d00c      	beq.n	8011278 <run_xrce_session+0x28>
 801125e:	4619      	mov	r1, r3
 8011260:	2301      	movs	r3, #1
 8011262:	9300      	str	r3, [sp, #0]
 8011264:	f10d 020e 	add.w	r2, sp, #14
 8011268:	f10d 0317 	add.w	r3, sp, #23
 801126c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011270:	f003 fb06 	bl	8014880 <uxr_run_session_until_all_status>
 8011274:	b006      	add	sp, #24
 8011276:	bd10      	pop	{r4, pc}
 8011278:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801127c:	f002 ff54 	bl	8014128 <uxr_flash_output_streams>
 8011280:	4620      	mov	r0, r4
 8011282:	b006      	add	sp, #24
 8011284:	bd10      	pop	{r4, pc}
 8011286:	bf00      	nop

08011288 <convert_qos_profile>:
 8011288:	7a4a      	ldrb	r2, [r1, #9]
 801128a:	f891 c008 	ldrb.w	ip, [r1, #8]
 801128e:	2a02      	cmp	r2, #2
 8011290:	bf18      	it	ne
 8011292:	2200      	movne	r2, #0
 8011294:	7002      	strb	r2, [r0, #0]
 8011296:	780a      	ldrb	r2, [r1, #0]
 8011298:	8889      	ldrh	r1, [r1, #4]
 801129a:	8081      	strh	r1, [r0, #4]
 801129c:	f1ac 0c02 	sub.w	ip, ip, #2
 80112a0:	f1a2 0202 	sub.w	r2, r2, #2
 80112a4:	fabc fc8c 	clz	ip, ip
 80112a8:	fab2 f282 	clz	r2, r2
 80112ac:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80112b0:	0952      	lsrs	r2, r2, #5
 80112b2:	f880 c001 	strb.w	ip, [r0, #1]
 80112b6:	7082      	strb	r2, [r0, #2]
 80112b8:	4770      	bx	lr
 80112ba:	bf00      	nop

080112bc <generate_type_name>:
 80112bc:	b530      	push	{r4, r5, lr}
 80112be:	2300      	movs	r3, #0
 80112c0:	700b      	strb	r3, [r1, #0]
 80112c2:	6803      	ldr	r3, [r0, #0]
 80112c4:	b087      	sub	sp, #28
 80112c6:	4614      	mov	r4, r2
 80112c8:	b1d3      	cbz	r3, 8011300 <generate_type_name+0x44>
 80112ca:	4a0f      	ldr	r2, [pc, #60]	; (8011308 <generate_type_name+0x4c>)
 80112cc:	4615      	mov	r5, r2
 80112ce:	9203      	str	r2, [sp, #12]
 80112d0:	9500      	str	r5, [sp, #0]
 80112d2:	6842      	ldr	r2, [r0, #4]
 80112d4:	480d      	ldr	r0, [pc, #52]	; (801130c <generate_type_name+0x50>)
 80112d6:	9001      	str	r0, [sp, #4]
 80112d8:	4608      	mov	r0, r1
 80112da:	490d      	ldr	r1, [pc, #52]	; (8011310 <generate_type_name+0x54>)
 80112dc:	9204      	str	r2, [sp, #16]
 80112de:	9105      	str	r1, [sp, #20]
 80112e0:	9102      	str	r1, [sp, #8]
 80112e2:	4a0c      	ldr	r2, [pc, #48]	; (8011314 <generate_type_name+0x58>)
 80112e4:	4621      	mov	r1, r4
 80112e6:	f00a f921 	bl	801b52c <sniprintf>
 80112ea:	2800      	cmp	r0, #0
 80112ec:	db05      	blt.n	80112fa <generate_type_name+0x3e>
 80112ee:	4284      	cmp	r4, r0
 80112f0:	bfd4      	ite	le
 80112f2:	2000      	movle	r0, #0
 80112f4:	2001      	movgt	r0, #1
 80112f6:	b007      	add	sp, #28
 80112f8:	bd30      	pop	{r4, r5, pc}
 80112fa:	2000      	movs	r0, #0
 80112fc:	b007      	add	sp, #28
 80112fe:	bd30      	pop	{r4, r5, pc}
 8011300:	4b05      	ldr	r3, [pc, #20]	; (8011318 <generate_type_name+0x5c>)
 8011302:	4a01      	ldr	r2, [pc, #4]	; (8011308 <generate_type_name+0x4c>)
 8011304:	461d      	mov	r5, r3
 8011306:	e7e2      	b.n	80112ce <generate_type_name+0x12>
 8011308:	0801c978 	.word	0x0801c978
 801130c:	0801c990 	.word	0x0801c990
 8011310:	0801c98c 	.word	0x0801c98c
 8011314:	0801c97c 	.word	0x0801c97c
 8011318:	0801d7f0 	.word	0x0801d7f0

0801131c <generate_topic_name>:
 801131c:	b510      	push	{r4, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	4614      	mov	r4, r2
 8011322:	9000      	str	r0, [sp, #0]
 8011324:	4b08      	ldr	r3, [pc, #32]	; (8011348 <generate_topic_name+0x2c>)
 8011326:	4a09      	ldr	r2, [pc, #36]	; (801134c <generate_topic_name+0x30>)
 8011328:	4608      	mov	r0, r1
 801132a:	4621      	mov	r1, r4
 801132c:	f00a f8fe 	bl	801b52c <sniprintf>
 8011330:	2800      	cmp	r0, #0
 8011332:	db05      	blt.n	8011340 <generate_topic_name+0x24>
 8011334:	4284      	cmp	r4, r0
 8011336:	bfd4      	ite	le
 8011338:	2000      	movle	r0, #0
 801133a:	2001      	movgt	r0, #1
 801133c:	b002      	add	sp, #8
 801133e:	bd10      	pop	{r4, pc}
 8011340:	2000      	movs	r0, #0
 8011342:	b002      	add	sp, #8
 8011344:	bd10      	pop	{r4, pc}
 8011346:	bf00      	nop
 8011348:	0801c99c 	.word	0x0801c99c
 801134c:	0801c994 	.word	0x0801c994

08011350 <is_uxrce_rmw_identifier_valid>:
 8011350:	b510      	push	{r4, lr}
 8011352:	4604      	mov	r4, r0
 8011354:	b140      	cbz	r0, 8011368 <is_uxrce_rmw_identifier_valid+0x18>
 8011356:	f006 fc73 	bl	8017c40 <rmw_get_implementation_identifier>
 801135a:	4601      	mov	r1, r0
 801135c:	4620      	mov	r0, r4
 801135e:	f7ee ff37 	bl	80001d0 <strcmp>
 8011362:	fab0 f080 	clz	r0, r0
 8011366:	0940      	lsrs	r0, r0, #5
 8011368:	bd10      	pop	{r4, pc}
 801136a:	bf00      	nop

0801136c <get_message_typesupport_handle>:
 801136c:	6883      	ldr	r3, [r0, #8]
 801136e:	4718      	bx	r3

08011370 <get_message_typesupport_handle_function>:
 8011370:	b510      	push	{r4, lr}
 8011372:	4604      	mov	r4, r0
 8011374:	6800      	ldr	r0, [r0, #0]
 8011376:	f7ee ff2b 	bl	80001d0 <strcmp>
 801137a:	2800      	cmp	r0, #0
 801137c:	bf0c      	ite	eq
 801137e:	4620      	moveq	r0, r4
 8011380:	2000      	movne	r0, #0
 8011382:	bd10      	pop	{r4, pc}

08011384 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8011384:	4b04      	ldr	r3, [pc, #16]	; (8011398 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	b10a      	cbz	r2, 801138e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0xa>
 801138a:	4803      	ldr	r0, [pc, #12]	; (8011398 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 801138c:	4770      	bx	lr
 801138e:	4a03      	ldr	r2, [pc, #12]	; (801139c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x18>)
 8011390:	4801      	ldr	r0, [pc, #4]	; (8011398 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 8011392:	6812      	ldr	r2, [r2, #0]
 8011394:	601a      	str	r2, [r3, #0]
 8011396:	4770      	bx	lr
 8011398:	20000120 	.word	0x20000120
 801139c:	200009b4 	.word	0x200009b4

080113a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 80113a0:	4a02      	ldr	r2, [pc, #8]	; (80113ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0xc>)
 80113a2:	4b03      	ldr	r3, [pc, #12]	; (80113b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x10>)
 80113a4:	6812      	ldr	r2, [r2, #0]
 80113a6:	601a      	str	r2, [r3, #0]
 80113a8:	4770      	bx	lr
 80113aa:	bf00      	nop
 80113ac:	200009b4 	.word	0x200009b4
 80113b0:	20000120 	.word	0x20000120

080113b4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 80113b4:	4b04      	ldr	r3, [pc, #16]	; (80113c8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 80113b6:	681a      	ldr	r2, [r3, #0]
 80113b8:	b10a      	cbz	r2, 80113be <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xa>
 80113ba:	4803      	ldr	r0, [pc, #12]	; (80113c8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 80113bc:	4770      	bx	lr
 80113be:	4a03      	ldr	r2, [pc, #12]	; (80113cc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x18>)
 80113c0:	4801      	ldr	r0, [pc, #4]	; (80113c8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 80113c2:	6812      	ldr	r2, [r2, #0]
 80113c4:	601a      	str	r2, [r3, #0]
 80113c6:	4770      	bx	lr
 80113c8:	20000134 	.word	0x20000134
 80113cc:	200009b4 	.word	0x200009b4

080113d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 80113d0:	4a02      	ldr	r2, [pc, #8]	; (80113dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xc>)
 80113d2:	4b03      	ldr	r3, [pc, #12]	; (80113e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x10>)
 80113d4:	6812      	ldr	r2, [r2, #0]
 80113d6:	601a      	str	r2, [r3, #0]
 80113d8:	4770      	bx	lr
 80113da:	bf00      	nop
 80113dc:	200009b4 	.word	0x200009b4
 80113e0:	20000134 	.word	0x20000134

080113e4 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__size_function__BatteryState__cell_voltage>:
 80113e4:	6840      	ldr	r0, [r0, #4]
 80113e6:	4770      	bx	lr

080113e8 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_const_function__BatteryState__cell_voltage>:
 80113e8:	6800      	ldr	r0, [r0, #0]
 80113ea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80113ee:	4770      	bx	lr

080113f0 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__fetch_function__BatteryState__cell_voltage>:
 80113f0:	6803      	ldr	r3, [r0, #0]
 80113f2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80113f6:	680b      	ldr	r3, [r1, #0]
 80113f8:	6013      	str	r3, [r2, #0]
 80113fa:	4770      	bx	lr

080113fc <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__assign_function__BatteryState__cell_voltage>:
 80113fc:	6803      	ldr	r3, [r0, #0]
 80113fe:	6812      	ldr	r2, [r2, #0]
 8011400:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8011404:	600a      	str	r2, [r1, #0]
 8011406:	4770      	bx	lr

08011408 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__BatteryState_init_function>:
 8011408:	f007 b93c 	b.w	8018684 <sensor_msgs__msg__BatteryState__init>

0801140c <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__BatteryState_fini_function>:
 801140c:	f007 b9aa 	b.w	8018764 <sensor_msgs__msg__BatteryState__fini>

08011410 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__resize_function__BatteryState__cell_voltage>:
 8011410:	b510      	push	{r4, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	4604      	mov	r4, r0
 8011416:	9101      	str	r1, [sp, #4]
 8011418:	f007 f8f2 	bl	8018600 <rosidl_runtime_c__float__Sequence__fini>
 801141c:	9901      	ldr	r1, [sp, #4]
 801141e:	4620      	mov	r0, r4
 8011420:	b002      	add	sp, #8
 8011422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011426:	f007 b8d3 	b.w	80185d0 <rosidl_runtime_c__float__Sequence__init>
 801142a:	bf00      	nop

0801142c <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__size_function__BatteryState__cell_temperature>:
 801142c:	6840      	ldr	r0, [r0, #4]
 801142e:	4770      	bx	lr

08011430 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_const_function__BatteryState__cell_temperature>:
 8011430:	6800      	ldr	r0, [r0, #0]
 8011432:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8011436:	4770      	bx	lr

08011438 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_function__BatteryState__cell_temperature>:
 8011438:	6800      	ldr	r0, [r0, #0]
 801143a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801143e:	4770      	bx	lr

08011440 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_function__BatteryState__cell_voltage>:
 8011440:	6800      	ldr	r0, [r0, #0]
 8011442:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8011446:	4770      	bx	lr

08011448 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__fetch_function__BatteryState__cell_temperature>:
 8011448:	6803      	ldr	r3, [r0, #0]
 801144a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801144e:	680b      	ldr	r3, [r1, #0]
 8011450:	6013      	str	r3, [r2, #0]
 8011452:	4770      	bx	lr

08011454 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__assign_function__BatteryState__cell_temperature>:
 8011454:	6803      	ldr	r3, [r0, #0]
 8011456:	6812      	ldr	r2, [r2, #0]
 8011458:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801145c:	600a      	str	r2, [r1, #0]
 801145e:	4770      	bx	lr

08011460 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__resize_function__BatteryState__cell_temperature>:
 8011460:	b510      	push	{r4, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	4604      	mov	r4, r0
 8011466:	9101      	str	r1, [sp, #4]
 8011468:	f007 f8ca 	bl	8018600 <rosidl_runtime_c__float__Sequence__fini>
 801146c:	9901      	ldr	r1, [sp, #4]
 801146e:	4620      	mov	r0, r4
 8011470:	b002      	add	sp, #8
 8011472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011476:	f007 b8ab 	b.w	80185d0 <rosidl_runtime_c__float__Sequence__init>
 801147a:	bf00      	nop

0801147c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 801147c:	b508      	push	{r3, lr}
 801147e:	f000 fb27 	bl	8011ad0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011482:	4b06      	ldr	r3, [pc, #24]	; (801149c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 8011484:	4906      	ldr	r1, [pc, #24]	; (80114a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x24>)
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	60c8      	str	r0, [r1, #12]
 801148a:	b10a      	cbz	r2, 8011490 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>
 801148c:	4803      	ldr	r0, [pc, #12]	; (801149c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 801148e:	bd08      	pop	{r3, pc}
 8011490:	4a04      	ldr	r2, [pc, #16]	; (80114a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x28>)
 8011492:	4802      	ldr	r0, [pc, #8]	; (801149c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 8011494:	6812      	ldr	r2, [r2, #0]
 8011496:	601a      	str	r2, [r3, #0]
 8011498:	bd08      	pop	{r3, pc}
 801149a:	bf00      	nop
 801149c:	20000500 	.word	0x20000500
 80114a0:	20000140 	.word	0x20000140
 80114a4:	200009b8 	.word	0x200009b8

080114a8 <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_init_function>:
 80114a8:	f007 b974 	b.w	8018794 <sensor_msgs__msg__Temperature__init>

080114ac <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_fini_function>:
 80114ac:	f007 b984 	b.w	80187b8 <sensor_msgs__msg__Temperature__fini>

080114b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 80114b0:	b508      	push	{r3, lr}
 80114b2:	f000 fb0d 	bl	8011ad0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80114b6:	4b06      	ldr	r3, [pc, #24]	; (80114d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 80114b8:	4906      	ldr	r1, [pc, #24]	; (80114d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x24>)
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	60c8      	str	r0, [r1, #12]
 80114be:	b10a      	cbz	r2, 80114c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>
 80114c0:	4803      	ldr	r0, [pc, #12]	; (80114d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 80114c2:	bd08      	pop	{r3, pc}
 80114c4:	4a04      	ldr	r2, [pc, #16]	; (80114d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x28>)
 80114c6:	4802      	ldr	r0, [pc, #8]	; (80114d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 80114c8:	6812      	ldr	r2, [r2, #0]
 80114ca:	601a      	str	r2, [r3, #0]
 80114cc:	bd08      	pop	{r3, pc}
 80114ce:	bf00      	nop
 80114d0:	200005c0 	.word	0x200005c0
 80114d4:	2000050c 	.word	0x2000050c
 80114d8:	200009b8 	.word	0x200009b8

080114dc <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>:
 80114dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114e0:	460e      	mov	r6, r1
 80114e2:	4607      	mov	r7, r0
 80114e4:	f000 fbca 	bl	8011c7c <get_serialized_size_std_msgs__msg__Header>
 80114e8:	1835      	adds	r5, r6, r0
 80114ea:	2104      	movs	r1, #4
 80114ec:	4628      	mov	r0, r5
 80114ee:	f002 fa83 	bl	80139f8 <ucdr_alignment>
 80114f2:	1d04      	adds	r4, r0, #4
 80114f4:	442c      	add	r4, r5
 80114f6:	2104      	movs	r1, #4
 80114f8:	4620      	mov	r0, r4
 80114fa:	f002 fa7d 	bl	80139f8 <ucdr_alignment>
 80114fe:	1d05      	adds	r5, r0, #4
 8011500:	442c      	add	r4, r5
 8011502:	2104      	movs	r1, #4
 8011504:	4620      	mov	r0, r4
 8011506:	f002 fa77 	bl	80139f8 <ucdr_alignment>
 801150a:	1d05      	adds	r5, r0, #4
 801150c:	4425      	add	r5, r4
 801150e:	2104      	movs	r1, #4
 8011510:	4628      	mov	r0, r5
 8011512:	f002 fa71 	bl	80139f8 <ucdr_alignment>
 8011516:	3004      	adds	r0, #4
 8011518:	4405      	add	r5, r0
 801151a:	2104      	movs	r1, #4
 801151c:	4628      	mov	r0, r5
 801151e:	f002 fa6b 	bl	80139f8 <ucdr_alignment>
 8011522:	3004      	adds	r0, #4
 8011524:	1944      	adds	r4, r0, r5
 8011526:	2104      	movs	r1, #4
 8011528:	4620      	mov	r0, r4
 801152a:	f002 fa65 	bl	80139f8 <ucdr_alignment>
 801152e:	1d05      	adds	r5, r0, #4
 8011530:	4425      	add	r5, r4
 8011532:	2104      	movs	r1, #4
 8011534:	4628      	mov	r0, r5
 8011536:	f002 fa5f 	bl	80139f8 <ucdr_alignment>
 801153a:	3004      	adds	r0, #4
 801153c:	4405      	add	r5, r0
 801153e:	2101      	movs	r1, #1
 8011540:	4628      	mov	r0, r5
 8011542:	f002 fa59 	bl	80139f8 <ucdr_alignment>
 8011546:	3001      	adds	r0, #1
 8011548:	1944      	adds	r4, r0, r5
 801154a:	2101      	movs	r1, #1
 801154c:	4620      	mov	r0, r4
 801154e:	f002 fa53 	bl	80139f8 <ucdr_alignment>
 8011552:	1c45      	adds	r5, r0, #1
 8011554:	4425      	add	r5, r4
 8011556:	2101      	movs	r1, #1
 8011558:	4628      	mov	r0, r5
 801155a:	f002 fa4d 	bl	80139f8 <ucdr_alignment>
 801155e:	3001      	adds	r0, #1
 8011560:	4405      	add	r5, r0
 8011562:	2101      	movs	r1, #1
 8011564:	4628      	mov	r0, r5
 8011566:	f002 fa47 	bl	80139f8 <ucdr_alignment>
 801156a:	3001      	adds	r0, #1
 801156c:	1944      	adds	r4, r0, r5
 801156e:	4620      	mov	r0, r4
 8011570:	2104      	movs	r1, #4
 8011572:	f8d7 8038 	ldr.w	r8, [r7, #56]	; 0x38
 8011576:	f002 fa3f 	bl	80139f8 <ucdr_alignment>
 801157a:	1d05      	adds	r5, r0, #4
 801157c:	442c      	add	r4, r5
 801157e:	f1b8 0f00 	cmp.w	r8, #0
 8011582:	d11e      	bne.n	80115c2 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xe6>
 8011584:	4620      	mov	r0, r4
 8011586:	2104      	movs	r1, #4
 8011588:	f8d7 8044 	ldr.w	r8, [r7, #68]	; 0x44
 801158c:	f002 fa34 	bl	80139f8 <ucdr_alignment>
 8011590:	4404      	add	r4, r0
 8011592:	3404      	adds	r4, #4
 8011594:	f1b8 0f00 	cmp.w	r8, #0
 8011598:	d11b      	bne.n	80115d2 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xf6>
 801159a:	2104      	movs	r1, #4
 801159c:	4620      	mov	r0, r4
 801159e:	f002 fa2b 	bl	80139f8 <ucdr_alignment>
 80115a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115a4:	3305      	adds	r3, #5
 80115a6:	441c      	add	r4, r3
 80115a8:	4404      	add	r4, r0
 80115aa:	2104      	movs	r1, #4
 80115ac:	4620      	mov	r0, r4
 80115ae:	f002 fa23 	bl	80139f8 <ucdr_alignment>
 80115b2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80115b4:	f1c6 0605 	rsb	r6, r6, #5
 80115b8:	440e      	add	r6, r1
 80115ba:	4430      	add	r0, r6
 80115bc:	4420      	add	r0, r4
 80115be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115c2:	4620      	mov	r0, r4
 80115c4:	2104      	movs	r1, #4
 80115c6:	f002 fa17 	bl	80139f8 <ucdr_alignment>
 80115ca:	eb04 0588 	add.w	r5, r4, r8, lsl #2
 80115ce:	1944      	adds	r4, r0, r5
 80115d0:	e7d8      	b.n	8011584 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xa8>
 80115d2:	4620      	mov	r0, r4
 80115d4:	2104      	movs	r1, #4
 80115d6:	f002 fa0f 	bl	80139f8 <ucdr_alignment>
 80115da:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 80115de:	4404      	add	r4, r0
 80115e0:	e7db      	b.n	801159a <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xbe>
 80115e2:	bf00      	nop

080115e4 <get_serialized_size_sensor_msgs__msg__BatteryState>:
 80115e4:	b108      	cbz	r0, 80115ea <get_serialized_size_sensor_msgs__msg__BatteryState+0x6>
 80115e6:	f7ff bf79 	b.w	80114dc <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>
 80115ea:	4770      	bx	lr

080115ec <_BatteryState__get_serialized_size>:
 80115ec:	b110      	cbz	r0, 80115f4 <_BatteryState__get_serialized_size+0x8>
 80115ee:	2100      	movs	r1, #0
 80115f0:	f7ff bf74 	b.w	80114dc <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop

080115f8 <_BatteryState__cdr_deserialize>:
 80115f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115fa:	460c      	mov	r4, r1
 80115fc:	b083      	sub	sp, #12
 80115fe:	2900      	cmp	r1, #0
 8011600:	f000 80a1 	beq.w	8011746 <_BatteryState__cdr_deserialize+0x14e>
 8011604:	4605      	mov	r5, r0
 8011606:	f000 fbbb 	bl	8011d80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801160a:	6843      	ldr	r3, [r0, #4]
 801160c:	4621      	mov	r1, r4
 801160e:	68db      	ldr	r3, [r3, #12]
 8011610:	4628      	mov	r0, r5
 8011612:	4798      	blx	r3
 8011614:	f104 0114 	add.w	r1, r4, #20
 8011618:	4628      	mov	r0, r5
 801161a:	f001 fed9 	bl	80133d0 <ucdr_deserialize_float>
 801161e:	f104 0118 	add.w	r1, r4, #24
 8011622:	4628      	mov	r0, r5
 8011624:	f001 fed4 	bl	80133d0 <ucdr_deserialize_float>
 8011628:	f104 011c 	add.w	r1, r4, #28
 801162c:	4628      	mov	r0, r5
 801162e:	f001 fecf 	bl	80133d0 <ucdr_deserialize_float>
 8011632:	f104 0120 	add.w	r1, r4, #32
 8011636:	4628      	mov	r0, r5
 8011638:	f001 feca 	bl	80133d0 <ucdr_deserialize_float>
 801163c:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8011640:	4628      	mov	r0, r5
 8011642:	f001 fec5 	bl	80133d0 <ucdr_deserialize_float>
 8011646:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801164a:	4628      	mov	r0, r5
 801164c:	f001 fec0 	bl	80133d0 <ucdr_deserialize_float>
 8011650:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8011654:	4628      	mov	r0, r5
 8011656:	f001 febb 	bl	80133d0 <ucdr_deserialize_float>
 801165a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801165e:	4628      	mov	r0, r5
 8011660:	f000 fcac 	bl	8011fbc <ucdr_deserialize_uint8_t>
 8011664:	f104 0131 	add.w	r1, r4, #49	; 0x31
 8011668:	4628      	mov	r0, r5
 801166a:	f000 fca7 	bl	8011fbc <ucdr_deserialize_uint8_t>
 801166e:	f104 0132 	add.w	r1, r4, #50	; 0x32
 8011672:	4628      	mov	r0, r5
 8011674:	f000 fca2 	bl	8011fbc <ucdr_deserialize_uint8_t>
 8011678:	f104 0133 	add.w	r1, r4, #51	; 0x33
 801167c:	4628      	mov	r0, r5
 801167e:	f000 fc6f 	bl	8011f60 <ucdr_deserialize_bool>
 8011682:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8011684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011686:	ab01      	add	r3, sp, #4
 8011688:	4632      	mov	r2, r6
 801168a:	4628      	mov	r0, r5
 801168c:	f002 fa8a 	bl	8013ba4 <ucdr_deserialize_sequence_float>
 8011690:	9b01      	ldr	r3, [sp, #4]
 8011692:	bb40      	cbnz	r0, 80116e6 <_BatteryState__cdr_deserialize+0xee>
 8011694:	429e      	cmp	r6, r3
 8011696:	d35e      	bcc.n	8011756 <_BatteryState__cdr_deserialize+0x15e>
 8011698:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 801169a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801169c:	ab01      	add	r3, sp, #4
 801169e:	4632      	mov	r2, r6
 80116a0:	4628      	mov	r0, r5
 80116a2:	f002 fa7f 	bl	8013ba4 <ucdr_deserialize_sequence_float>
 80116a6:	9b01      	ldr	r3, [sp, #4]
 80116a8:	2800      	cmp	r0, #0
 80116aa:	d03c      	beq.n	8011726 <_BatteryState__cdr_deserialize+0x12e>
 80116ac:	6463      	str	r3, [r4, #68]	; 0x44
 80116ae:	6d66      	ldr	r6, [r4, #84]	; 0x54
 80116b0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80116b2:	ab01      	add	r3, sp, #4
 80116b4:	4632      	mov	r2, r6
 80116b6:	4628      	mov	r0, r5
 80116b8:	f002 fa1c 	bl	8013af4 <ucdr_deserialize_sequence_char>
 80116bc:	9b01      	ldr	r3, [sp, #4]
 80116be:	b320      	cbz	r0, 801170a <_BatteryState__cdr_deserialize+0x112>
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d146      	bne.n	8011752 <_BatteryState__cdr_deserialize+0x15a>
 80116c4:	6523      	str	r3, [r4, #80]	; 0x50
 80116c6:	6e27      	ldr	r7, [r4, #96]	; 0x60
 80116c8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80116ca:	ab01      	add	r3, sp, #4
 80116cc:	463a      	mov	r2, r7
 80116ce:	4628      	mov	r0, r5
 80116d0:	f002 fa10 	bl	8013af4 <ucdr_deserialize_sequence_char>
 80116d4:	9b01      	ldr	r3, [sp, #4]
 80116d6:	4606      	mov	r6, r0
 80116d8:	b138      	cbz	r0, 80116ea <_BatteryState__cdr_deserialize+0xf2>
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d137      	bne.n	801174e <_BatteryState__cdr_deserialize+0x156>
 80116de:	65e3      	str	r3, [r4, #92]	; 0x5c
 80116e0:	4630      	mov	r0, r6
 80116e2:	b003      	add	sp, #12
 80116e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80116e8:	e7d6      	b.n	8011698 <_BatteryState__cdr_deserialize+0xa0>
 80116ea:	429f      	cmp	r7, r3
 80116ec:	d2f8      	bcs.n	80116e0 <_BatteryState__cdr_deserialize+0xe8>
 80116ee:	2101      	movs	r1, #1
 80116f0:	75a8      	strb	r0, [r5, #22]
 80116f2:	7569      	strb	r1, [r5, #21]
 80116f4:	4628      	mov	r0, r5
 80116f6:	65e6      	str	r6, [r4, #92]	; 0x5c
 80116f8:	f002 f994 	bl	8013a24 <ucdr_align_to>
 80116fc:	4628      	mov	r0, r5
 80116fe:	9901      	ldr	r1, [sp, #4]
 8011700:	f002 f9c6 	bl	8013a90 <ucdr_advance_buffer>
 8011704:	4630      	mov	r0, r6
 8011706:	b003      	add	sp, #12
 8011708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801170a:	429e      	cmp	r6, r3
 801170c:	d2db      	bcs.n	80116c6 <_BatteryState__cdr_deserialize+0xce>
 801170e:	2101      	movs	r1, #1
 8011710:	75a8      	strb	r0, [r5, #22]
 8011712:	7569      	strb	r1, [r5, #21]
 8011714:	6520      	str	r0, [r4, #80]	; 0x50
 8011716:	4628      	mov	r0, r5
 8011718:	f002 f984 	bl	8013a24 <ucdr_align_to>
 801171c:	9901      	ldr	r1, [sp, #4]
 801171e:	4628      	mov	r0, r5
 8011720:	f002 f9b6 	bl	8013a90 <ucdr_advance_buffer>
 8011724:	e7cf      	b.n	80116c6 <_BatteryState__cdr_deserialize+0xce>
 8011726:	429e      	cmp	r6, r3
 8011728:	d2c1      	bcs.n	80116ae <_BatteryState__cdr_deserialize+0xb6>
 801172a:	2301      	movs	r3, #1
 801172c:	75a8      	strb	r0, [r5, #22]
 801172e:	756b      	strb	r3, [r5, #21]
 8011730:	2104      	movs	r1, #4
 8011732:	6460      	str	r0, [r4, #68]	; 0x44
 8011734:	4628      	mov	r0, r5
 8011736:	f002 f975 	bl	8013a24 <ucdr_align_to>
 801173a:	9901      	ldr	r1, [sp, #4]
 801173c:	4628      	mov	r0, r5
 801173e:	0089      	lsls	r1, r1, #2
 8011740:	f002 f9a6 	bl	8013a90 <ucdr_advance_buffer>
 8011744:	e7b3      	b.n	80116ae <_BatteryState__cdr_deserialize+0xb6>
 8011746:	460e      	mov	r6, r1
 8011748:	4630      	mov	r0, r6
 801174a:	b003      	add	sp, #12
 801174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801174e:	3b01      	subs	r3, #1
 8011750:	e7c5      	b.n	80116de <_BatteryState__cdr_deserialize+0xe6>
 8011752:	3b01      	subs	r3, #1
 8011754:	e7b6      	b.n	80116c4 <_BatteryState__cdr_deserialize+0xcc>
 8011756:	2301      	movs	r3, #1
 8011758:	75a8      	strb	r0, [r5, #22]
 801175a:	756b      	strb	r3, [r5, #21]
 801175c:	2104      	movs	r1, #4
 801175e:	63a0      	str	r0, [r4, #56]	; 0x38
 8011760:	4628      	mov	r0, r5
 8011762:	f002 f95f 	bl	8013a24 <ucdr_align_to>
 8011766:	9901      	ldr	r1, [sp, #4]
 8011768:	4628      	mov	r0, r5
 801176a:	0089      	lsls	r1, r1, #2
 801176c:	f002 f990 	bl	8013a90 <ucdr_advance_buffer>
 8011770:	e792      	b.n	8011698 <_BatteryState__cdr_deserialize+0xa0>
 8011772:	bf00      	nop

08011774 <_BatteryState__cdr_serialize>:
 8011774:	2800      	cmp	r0, #0
 8011776:	d065      	beq.n	8011844 <_BatteryState__cdr_serialize+0xd0>
 8011778:	b570      	push	{r4, r5, r6, lr}
 801177a:	4604      	mov	r4, r0
 801177c:	460d      	mov	r5, r1
 801177e:	f000 faff 	bl	8011d80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011782:	6843      	ldr	r3, [r0, #4]
 8011784:	4629      	mov	r1, r5
 8011786:	689b      	ldr	r3, [r3, #8]
 8011788:	4620      	mov	r0, r4
 801178a:	4798      	blx	r3
 801178c:	ed94 0a05 	vldr	s0, [r4, #20]
 8011790:	4628      	mov	r0, r5
 8011792:	f001 fceb 	bl	801316c <ucdr_serialize_float>
 8011796:	ed94 0a06 	vldr	s0, [r4, #24]
 801179a:	4628      	mov	r0, r5
 801179c:	f001 fce6 	bl	801316c <ucdr_serialize_float>
 80117a0:	ed94 0a07 	vldr	s0, [r4, #28]
 80117a4:	4628      	mov	r0, r5
 80117a6:	f001 fce1 	bl	801316c <ucdr_serialize_float>
 80117aa:	ed94 0a08 	vldr	s0, [r4, #32]
 80117ae:	4628      	mov	r0, r5
 80117b0:	f001 fcdc 	bl	801316c <ucdr_serialize_float>
 80117b4:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 80117b8:	4628      	mov	r0, r5
 80117ba:	f001 fcd7 	bl	801316c <ucdr_serialize_float>
 80117be:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 80117c2:	4628      	mov	r0, r5
 80117c4:	f001 fcd2 	bl	801316c <ucdr_serialize_float>
 80117c8:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80117cc:	4628      	mov	r0, r5
 80117ce:	f001 fccd 	bl	801316c <ucdr_serialize_float>
 80117d2:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80117d6:	4628      	mov	r0, r5
 80117d8:	f000 fbda 	bl	8011f90 <ucdr_serialize_uint8_t>
 80117dc:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 80117e0:	4628      	mov	r0, r5
 80117e2:	f000 fbd5 	bl	8011f90 <ucdr_serialize_uint8_t>
 80117e6:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 80117ea:	4628      	mov	r0, r5
 80117ec:	f000 fbd0 	bl	8011f90 <ucdr_serialize_uint8_t>
 80117f0:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 80117f4:	4628      	mov	r0, r5
 80117f6:	f000 fb9d 	bl	8011f34 <ucdr_serialize_bool>
 80117fa:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 80117fe:	4628      	mov	r0, r5
 8011800:	f002 f9be 	bl	8013b80 <ucdr_serialize_sequence_float>
 8011804:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
 8011808:	4628      	mov	r0, r5
 801180a:	f002 f9b9 	bl	8013b80 <ucdr_serialize_sequence_float>
 801180e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8011810:	b1ae      	cbz	r6, 801183e <_BatteryState__cdr_serialize+0xca>
 8011812:	4630      	mov	r0, r6
 8011814:	f7ee fce6 	bl	80001e4 <strlen>
 8011818:	1c42      	adds	r2, r0, #1
 801181a:	6520      	str	r0, [r4, #80]	; 0x50
 801181c:	4631      	mov	r1, r6
 801181e:	4628      	mov	r0, r5
 8011820:	f002 f956 	bl	8013ad0 <ucdr_serialize_sequence_char>
 8011824:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8011826:	b176      	cbz	r6, 8011846 <_BatteryState__cdr_serialize+0xd2>
 8011828:	4630      	mov	r0, r6
 801182a:	f7ee fcdb 	bl	80001e4 <strlen>
 801182e:	4631      	mov	r1, r6
 8011830:	65e0      	str	r0, [r4, #92]	; 0x5c
 8011832:	1c42      	adds	r2, r0, #1
 8011834:	4628      	mov	r0, r5
 8011836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801183a:	f002 b949 	b.w	8013ad0 <ucdr_serialize_sequence_char>
 801183e:	4632      	mov	r2, r6
 8011840:	4630      	mov	r0, r6
 8011842:	e7ea      	b.n	801181a <_BatteryState__cdr_serialize+0xa6>
 8011844:	4770      	bx	lr
 8011846:	4630      	mov	r0, r6
 8011848:	65e0      	str	r0, [r4, #92]	; 0x5c
 801184a:	4632      	mov	r2, r6
 801184c:	4631      	mov	r1, r6
 801184e:	4628      	mov	r0, r5
 8011850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011854:	f002 b93c 	b.w	8013ad0 <ucdr_serialize_sequence_char>

08011858 <max_serialized_size_sensor_msgs__msg__BatteryState>:
 8011858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801185c:	f04f 0801 	mov.w	r8, #1
 8011860:	f880 8000 	strb.w	r8, [r0]
 8011864:	460c      	mov	r4, r1
 8011866:	4607      	mov	r7, r0
 8011868:	f000 fa80 	bl	8011d6c <max_serialized_size_std_msgs__msg__Header>
 801186c:	1825      	adds	r5, r4, r0
 801186e:	2104      	movs	r1, #4
 8011870:	4628      	mov	r0, r5
 8011872:	f002 f8c1 	bl	80139f8 <ucdr_alignment>
 8011876:	1d06      	adds	r6, r0, #4
 8011878:	4435      	add	r5, r6
 801187a:	2104      	movs	r1, #4
 801187c:	4628      	mov	r0, r5
 801187e:	f002 f8bb 	bl	80139f8 <ucdr_alignment>
 8011882:	1d06      	adds	r6, r0, #4
 8011884:	442e      	add	r6, r5
 8011886:	2104      	movs	r1, #4
 8011888:	4630      	mov	r0, r6
 801188a:	f002 f8b5 	bl	80139f8 <ucdr_alignment>
 801188e:	3004      	adds	r0, #4
 8011890:	4406      	add	r6, r0
 8011892:	2104      	movs	r1, #4
 8011894:	4630      	mov	r0, r6
 8011896:	f002 f8af 	bl	80139f8 <ucdr_alignment>
 801189a:	3004      	adds	r0, #4
 801189c:	1985      	adds	r5, r0, r6
 801189e:	2104      	movs	r1, #4
 80118a0:	4628      	mov	r0, r5
 80118a2:	f002 f8a9 	bl	80139f8 <ucdr_alignment>
 80118a6:	1d06      	adds	r6, r0, #4
 80118a8:	442e      	add	r6, r5
 80118aa:	2104      	movs	r1, #4
 80118ac:	4630      	mov	r0, r6
 80118ae:	f002 f8a3 	bl	80139f8 <ucdr_alignment>
 80118b2:	3004      	adds	r0, #4
 80118b4:	4406      	add	r6, r0
 80118b6:	2104      	movs	r1, #4
 80118b8:	4630      	mov	r0, r6
 80118ba:	f002 f89d 	bl	80139f8 <ucdr_alignment>
 80118be:	3004      	adds	r0, #4
 80118c0:	1985      	adds	r5, r0, r6
 80118c2:	4641      	mov	r1, r8
 80118c4:	4628      	mov	r0, r5
 80118c6:	f002 f897 	bl	80139f8 <ucdr_alignment>
 80118ca:	eb00 0608 	add.w	r6, r0, r8
 80118ce:	442e      	add	r6, r5
 80118d0:	4641      	mov	r1, r8
 80118d2:	4630      	mov	r0, r6
 80118d4:	f002 f890 	bl	80139f8 <ucdr_alignment>
 80118d8:	eb00 0508 	add.w	r5, r0, r8
 80118dc:	442e      	add	r6, r5
 80118de:	4641      	mov	r1, r8
 80118e0:	4630      	mov	r0, r6
 80118e2:	f002 f889 	bl	80139f8 <ucdr_alignment>
 80118e6:	eb00 0508 	add.w	r5, r0, r8
 80118ea:	4435      	add	r5, r6
 80118ec:	4641      	mov	r1, r8
 80118ee:	4628      	mov	r0, r5
 80118f0:	f002 f882 	bl	80139f8 <ucdr_alignment>
 80118f4:	eba8 0404 	sub.w	r4, r8, r4
 80118f8:	2300      	movs	r3, #0
 80118fa:	4420      	add	r0, r4
 80118fc:	703b      	strb	r3, [r7, #0]
 80118fe:	4428      	add	r0, r5
 8011900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011904 <_BatteryState__max_serialized_size>:
 8011904:	b500      	push	{lr}
 8011906:	b083      	sub	sp, #12
 8011908:	2100      	movs	r1, #0
 801190a:	f10d 0007 	add.w	r0, sp, #7
 801190e:	f7ff ffa3 	bl	8011858 <max_serialized_size_sensor_msgs__msg__BatteryState>
 8011912:	b003      	add	sp, #12
 8011914:	f85d fb04 	ldr.w	pc, [sp], #4

08011918 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8011918:	4800      	ldr	r0, [pc, #0]	; (801191c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x4>)
 801191a:	4770      	bx	lr
 801191c:	200005cc 	.word	0x200005cc

08011920 <get_serialized_size_sensor_msgs__msg__Temperature>:
 8011920:	b538      	push	{r3, r4, r5, lr}
 8011922:	b188      	cbz	r0, 8011948 <get_serialized_size_sensor_msgs__msg__Temperature+0x28>
 8011924:	460d      	mov	r5, r1
 8011926:	f000 f9a9 	bl	8011c7c <get_serialized_size_std_msgs__msg__Header>
 801192a:	182c      	adds	r4, r5, r0
 801192c:	2108      	movs	r1, #8
 801192e:	4620      	mov	r0, r4
 8011930:	f002 f862 	bl	80139f8 <ucdr_alignment>
 8011934:	3008      	adds	r0, #8
 8011936:	4404      	add	r4, r0
 8011938:	2108      	movs	r1, #8
 801193a:	4620      	mov	r0, r4
 801193c:	f002 f85c 	bl	80139f8 <ucdr_alignment>
 8011940:	f1c5 0508 	rsb	r5, r5, #8
 8011944:	4428      	add	r0, r5
 8011946:	4420      	add	r0, r4
 8011948:	bd38      	pop	{r3, r4, r5, pc}
 801194a:	bf00      	nop

0801194c <_Temperature__cdr_deserialize>:
 801194c:	b538      	push	{r3, r4, r5, lr}
 801194e:	460c      	mov	r4, r1
 8011950:	b199      	cbz	r1, 801197a <_Temperature__cdr_deserialize+0x2e>
 8011952:	4605      	mov	r5, r0
 8011954:	f000 fa14 	bl	8011d80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011958:	6843      	ldr	r3, [r0, #4]
 801195a:	4621      	mov	r1, r4
 801195c:	68db      	ldr	r3, [r3, #12]
 801195e:	4628      	mov	r0, r5
 8011960:	4798      	blx	r3
 8011962:	f104 0118 	add.w	r1, r4, #24
 8011966:	4628      	mov	r0, r5
 8011968:	f001 ff28 	bl	80137bc <ucdr_deserialize_double>
 801196c:	f104 0120 	add.w	r1, r4, #32
 8011970:	4628      	mov	r0, r5
 8011972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011976:	f001 bf21 	b.w	80137bc <ucdr_deserialize_double>
 801197a:	4608      	mov	r0, r1
 801197c:	bd38      	pop	{r3, r4, r5, pc}
 801197e:	bf00      	nop

08011980 <_Temperature__cdr_serialize>:
 8011980:	b1a8      	cbz	r0, 80119ae <_Temperature__cdr_serialize+0x2e>
 8011982:	b538      	push	{r3, r4, r5, lr}
 8011984:	460d      	mov	r5, r1
 8011986:	4604      	mov	r4, r0
 8011988:	f000 f9fa 	bl	8011d80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801198c:	6843      	ldr	r3, [r0, #4]
 801198e:	4629      	mov	r1, r5
 8011990:	689b      	ldr	r3, [r3, #8]
 8011992:	4620      	mov	r0, r4
 8011994:	4798      	blx	r3
 8011996:	ed94 0b06 	vldr	d0, [r4, #24]
 801199a:	4628      	mov	r0, r5
 801199c:	f001 fe3e 	bl	801361c <ucdr_serialize_double>
 80119a0:	ed94 0b08 	vldr	d0, [r4, #32]
 80119a4:	4628      	mov	r0, r5
 80119a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119aa:	f001 be37 	b.w	801361c <ucdr_serialize_double>
 80119ae:	4770      	bx	lr

080119b0 <_Temperature__get_serialized_size>:
 80119b0:	b188      	cbz	r0, 80119d6 <_Temperature__get_serialized_size+0x26>
 80119b2:	b510      	push	{r4, lr}
 80119b4:	2100      	movs	r1, #0
 80119b6:	f000 f961 	bl	8011c7c <get_serialized_size_std_msgs__msg__Header>
 80119ba:	2108      	movs	r1, #8
 80119bc:	4604      	mov	r4, r0
 80119be:	f002 f81b 	bl	80139f8 <ucdr_alignment>
 80119c2:	4420      	add	r0, r4
 80119c4:	f100 0408 	add.w	r4, r0, #8
 80119c8:	2108      	movs	r1, #8
 80119ca:	4620      	mov	r0, r4
 80119cc:	f002 f814 	bl	80139f8 <ucdr_alignment>
 80119d0:	3008      	adds	r0, #8
 80119d2:	4420      	add	r0, r4
 80119d4:	bd10      	pop	{r4, pc}
 80119d6:	4770      	bx	lr

080119d8 <_Temperature__max_serialized_size>:
 80119d8:	b510      	push	{r4, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	2301      	movs	r3, #1
 80119de:	2100      	movs	r1, #0
 80119e0:	f10d 0007 	add.w	r0, sp, #7
 80119e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80119e8:	f000 f9c0 	bl	8011d6c <max_serialized_size_std_msgs__msg__Header>
 80119ec:	2108      	movs	r1, #8
 80119ee:	4604      	mov	r4, r0
 80119f0:	f002 f802 	bl	80139f8 <ucdr_alignment>
 80119f4:	4420      	add	r0, r4
 80119f6:	f100 0408 	add.w	r4, r0, #8
 80119fa:	2108      	movs	r1, #8
 80119fc:	4620      	mov	r0, r4
 80119fe:	f001 fffb 	bl	80139f8 <ucdr_alignment>
 8011a02:	3008      	adds	r0, #8
 8011a04:	4420      	add	r0, r4
 8011a06:	b002      	add	sp, #8
 8011a08:	bd10      	pop	{r4, pc}
 8011a0a:	bf00      	nop

08011a0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8011a0c:	4800      	ldr	r0, [pc, #0]	; (8011a10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x4>)
 8011a0e:	4770      	bx	lr
 8011a10:	200005f4 	.word	0x200005f4

08011a14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 8011a14:	4b04      	ldr	r3, [pc, #16]	; (8011a28 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8011a16:	681a      	ldr	r2, [r3, #0]
 8011a18:	b10a      	cbz	r2, 8011a1e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xa>
 8011a1a:	4803      	ldr	r0, [pc, #12]	; (8011a28 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8011a1c:	4770      	bx	lr
 8011a1e:	4a03      	ldr	r2, [pc, #12]	; (8011a2c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x18>)
 8011a20:	4801      	ldr	r0, [pc, #4]	; (8011a28 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8011a22:	6812      	ldr	r2, [r2, #0]
 8011a24:	601a      	str	r2, [r3, #0]
 8011a26:	4770      	bx	lr
 8011a28:	20000624 	.word	0x20000624
 8011a2c:	200009b4 	.word	0x200009b4

08011a30 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 8011a30:	4a02      	ldr	r2, [pc, #8]	; (8011a3c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xc>)
 8011a32:	4b03      	ldr	r3, [pc, #12]	; (8011a40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x10>)
 8011a34:	6812      	ldr	r2, [r2, #0]
 8011a36:	601a      	str	r2, [r3, #0]
 8011a38:	4770      	bx	lr
 8011a3a:	bf00      	nop
 8011a3c:	200009b4 	.word	0x200009b4
 8011a40:	20000624 	.word	0x20000624

08011a44 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8011a44:	4b04      	ldr	r3, [pc, #16]	; (8011a58 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011a46:	681a      	ldr	r2, [r3, #0]
 8011a48:	b10a      	cbz	r2, 8011a4e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8011a4a:	4803      	ldr	r0, [pc, #12]	; (8011a58 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011a4c:	4770      	bx	lr
 8011a4e:	4a03      	ldr	r2, [pc, #12]	; (8011a5c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8011a50:	4801      	ldr	r0, [pc, #4]	; (8011a58 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011a52:	6812      	ldr	r2, [r2, #0]
 8011a54:	601a      	str	r2, [r3, #0]
 8011a56:	4770      	bx	lr
 8011a58:	20000638 	.word	0x20000638
 8011a5c:	200009b4 	.word	0x200009b4

08011a60 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8011a60:	4a02      	ldr	r2, [pc, #8]	; (8011a6c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8011a62:	4b03      	ldr	r3, [pc, #12]	; (8011a70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8011a64:	6812      	ldr	r2, [r2, #0]
 8011a66:	601a      	str	r2, [r3, #0]
 8011a68:	4770      	bx	lr
 8011a6a:	bf00      	nop
 8011a6c:	200009b4 	.word	0x200009b4
 8011a70:	20000638 	.word	0x20000638

08011a74 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8011a74:	4b04      	ldr	r3, [pc, #16]	; (8011a88 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011a76:	681a      	ldr	r2, [r3, #0]
 8011a78:	b10a      	cbz	r2, 8011a7e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0xa>
 8011a7a:	4803      	ldr	r0, [pc, #12]	; (8011a88 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011a7c:	4770      	bx	lr
 8011a7e:	4a03      	ldr	r2, [pc, #12]	; (8011a8c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x18>)
 8011a80:	4801      	ldr	r0, [pc, #4]	; (8011a88 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011a82:	6812      	ldr	r2, [r2, #0]
 8011a84:	601a      	str	r2, [r3, #0]
 8011a86:	4770      	bx	lr
 8011a88:	2000064c 	.word	0x2000064c
 8011a8c:	200009b4 	.word	0x200009b4

08011a90 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8011a90:	4a02      	ldr	r2, [pc, #8]	; (8011a9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0xc>)
 8011a92:	4b03      	ldr	r3, [pc, #12]	; (8011aa0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x10>)
 8011a94:	6812      	ldr	r2, [r2, #0]
 8011a96:	601a      	str	r2, [r3, #0]
 8011a98:	4770      	bx	lr
 8011a9a:	bf00      	nop
 8011a9c:	200009b4 	.word	0x200009b4
 8011aa0:	2000064c 	.word	0x2000064c

08011aa4 <std_msgs__msg__ColorRGBA__rosidl_typesupport_introspection_c__ColorRGBA_init_function>:
 8011aa4:	f006 be8c 	b.w	80187c0 <std_msgs__msg__ColorRGBA__init>

08011aa8 <std_msgs__msg__ColorRGBA__rosidl_typesupport_introspection_c__ColorRGBA_fini_function>:
 8011aa8:	f006 be8e 	b.w	80187c8 <std_msgs__msg__ColorRGBA__fini>

08011aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 8011aac:	4b04      	ldr	r3, [pc, #16]	; (8011ac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8011aae:	681a      	ldr	r2, [r3, #0]
 8011ab0:	b10a      	cbz	r2, 8011ab6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xa>
 8011ab2:	4803      	ldr	r0, [pc, #12]	; (8011ac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8011ab4:	4770      	bx	lr
 8011ab6:	4a03      	ldr	r2, [pc, #12]	; (8011ac4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x18>)
 8011ab8:	4801      	ldr	r0, [pc, #4]	; (8011ac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8011aba:	6812      	ldr	r2, [r2, #0]
 8011abc:	601a      	str	r2, [r3, #0]
 8011abe:	4770      	bx	lr
 8011ac0:	20000748 	.word	0x20000748
 8011ac4:	200009b8 	.word	0x200009b8

08011ac8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8011ac8:	f006 be80 	b.w	80187cc <std_msgs__msg__Header__init>

08011acc <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8011acc:	f006 bea2 	b.w	8018814 <std_msgs__msg__Header__fini>

08011ad0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011ad0:	b508      	push	{r3, lr}
 8011ad2:	f000 f9b9 	bl	8011e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011ad6:	4b06      	ldr	r3, [pc, #24]	; (8011af0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011ad8:	4906      	ldr	r1, [pc, #24]	; (8011af4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	60c8      	str	r0, [r1, #12]
 8011ade:	b10a      	cbz	r2, 8011ae4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8011ae0:	4803      	ldr	r0, [pc, #12]	; (8011af0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011ae2:	bd08      	pop	{r3, pc}
 8011ae4:	4a04      	ldr	r2, [pc, #16]	; (8011af8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8011ae6:	4802      	ldr	r0, [pc, #8]	; (8011af0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011ae8:	6812      	ldr	r2, [r2, #0]
 8011aea:	601a      	str	r2, [r3, #0]
 8011aec:	bd08      	pop	{r3, pc}
 8011aee:	bf00      	nop
 8011af0:	200007cc 	.word	0x200007cc
 8011af4:	20000754 	.word	0x20000754
 8011af8:	200009b8 	.word	0x200009b8

08011afc <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8011afc:	f006 be96 	b.w	801882c <std_msgs__msg__Int32__init>

08011b00 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8011b00:	f006 be98 	b.w	8018834 <std_msgs__msg__Int32__fini>

08011b04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8011b04:	4b04      	ldr	r3, [pc, #16]	; (8011b18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011b06:	681a      	ldr	r2, [r3, #0]
 8011b08:	b10a      	cbz	r2, 8011b0e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8011b0a:	4803      	ldr	r0, [pc, #12]	; (8011b18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011b0c:	4770      	bx	lr
 8011b0e:	4a03      	ldr	r2, [pc, #12]	; (8011b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8011b10:	4801      	ldr	r0, [pc, #4]	; (8011b18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8011b12:	6812      	ldr	r2, [r2, #0]
 8011b14:	601a      	str	r2, [r3, #0]
 8011b16:	4770      	bx	lr
 8011b18:	20000814 	.word	0x20000814
 8011b1c:	200009b8 	.word	0x200009b8

08011b20 <std_msgs__msg__Int64__rosidl_typesupport_introspection_c__Int64_init_function>:
 8011b20:	f006 be8a 	b.w	8018838 <std_msgs__msg__Int64__init>

08011b24 <std_msgs__msg__Int64__rosidl_typesupport_introspection_c__Int64_fini_function>:
 8011b24:	f006 be8c 	b.w	8018840 <std_msgs__msg__Int64__fini>

08011b28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8011b28:	4b04      	ldr	r3, [pc, #16]	; (8011b3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011b2a:	681a      	ldr	r2, [r3, #0]
 8011b2c:	b10a      	cbz	r2, 8011b32 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0xa>
 8011b2e:	4803      	ldr	r0, [pc, #12]	; (8011b3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011b30:	4770      	bx	lr
 8011b32:	4a03      	ldr	r2, [pc, #12]	; (8011b40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x18>)
 8011b34:	4801      	ldr	r0, [pc, #4]	; (8011b3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011b36:	6812      	ldr	r2, [r2, #0]
 8011b38:	601a      	str	r2, [r3, #0]
 8011b3a:	4770      	bx	lr
 8011b3c:	2000085c 	.word	0x2000085c
 8011b40:	200009b8 	.word	0x200009b8

08011b44 <get_serialized_size_std_msgs__msg__ColorRGBA>:
 8011b44:	b1e0      	cbz	r0, 8011b80 <get_serialized_size_std_msgs__msg__ColorRGBA+0x3c>
 8011b46:	b570      	push	{r4, r5, r6, lr}
 8011b48:	460d      	mov	r5, r1
 8011b4a:	4628      	mov	r0, r5
 8011b4c:	2104      	movs	r1, #4
 8011b4e:	f001 ff53 	bl	80139f8 <ucdr_alignment>
 8011b52:	1d2b      	adds	r3, r5, #4
 8011b54:	181e      	adds	r6, r3, r0
 8011b56:	2104      	movs	r1, #4
 8011b58:	4630      	mov	r0, r6
 8011b5a:	f001 ff4d 	bl	80139f8 <ucdr_alignment>
 8011b5e:	1d04      	adds	r4, r0, #4
 8011b60:	4434      	add	r4, r6
 8011b62:	2104      	movs	r1, #4
 8011b64:	4620      	mov	r0, r4
 8011b66:	f001 ff47 	bl	80139f8 <ucdr_alignment>
 8011b6a:	3004      	adds	r0, #4
 8011b6c:	4404      	add	r4, r0
 8011b6e:	2104      	movs	r1, #4
 8011b70:	4620      	mov	r0, r4
 8011b72:	f001 ff41 	bl	80139f8 <ucdr_alignment>
 8011b76:	f1c5 0504 	rsb	r5, r5, #4
 8011b7a:	4428      	add	r0, r5
 8011b7c:	4420      	add	r0, r4
 8011b7e:	bd70      	pop	{r4, r5, r6, pc}
 8011b80:	4770      	bx	lr
 8011b82:	bf00      	nop

08011b84 <_ColorRGBA__cdr_deserialize>:
 8011b84:	b538      	push	{r3, r4, r5, lr}
 8011b86:	460c      	mov	r4, r1
 8011b88:	b191      	cbz	r1, 8011bb0 <_ColorRGBA__cdr_deserialize+0x2c>
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	f001 fc20 	bl	80133d0 <ucdr_deserialize_float>
 8011b90:	1d21      	adds	r1, r4, #4
 8011b92:	4628      	mov	r0, r5
 8011b94:	f001 fc1c 	bl	80133d0 <ucdr_deserialize_float>
 8011b98:	f104 0108 	add.w	r1, r4, #8
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	f001 fc17 	bl	80133d0 <ucdr_deserialize_float>
 8011ba2:	f104 010c 	add.w	r1, r4, #12
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bac:	f001 bc10 	b.w	80133d0 <ucdr_deserialize_float>
 8011bb0:	4608      	mov	r0, r1
 8011bb2:	bd38      	pop	{r3, r4, r5, pc}

08011bb4 <_ColorRGBA__cdr_serialize>:
 8011bb4:	b1c0      	cbz	r0, 8011be8 <_ColorRGBA__cdr_serialize+0x34>
 8011bb6:	b538      	push	{r3, r4, r5, lr}
 8011bb8:	ed90 0a00 	vldr	s0, [r0]
 8011bbc:	460d      	mov	r5, r1
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	4608      	mov	r0, r1
 8011bc2:	f001 fad3 	bl	801316c <ucdr_serialize_float>
 8011bc6:	ed94 0a01 	vldr	s0, [r4, #4]
 8011bca:	4628      	mov	r0, r5
 8011bcc:	f001 face 	bl	801316c <ucdr_serialize_float>
 8011bd0:	ed94 0a02 	vldr	s0, [r4, #8]
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	f001 fac9 	bl	801316c <ucdr_serialize_float>
 8011bda:	ed94 0a03 	vldr	s0, [r4, #12]
 8011bde:	4628      	mov	r0, r5
 8011be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011be4:	f001 bac2 	b.w	801316c <ucdr_serialize_float>
 8011be8:	4770      	bx	lr
 8011bea:	bf00      	nop

08011bec <_ColorRGBA__get_serialized_size>:
 8011bec:	b1c0      	cbz	r0, 8011c20 <_ColorRGBA__get_serialized_size+0x34>
 8011bee:	b538      	push	{r3, r4, r5, lr}
 8011bf0:	2104      	movs	r1, #4
 8011bf2:	2000      	movs	r0, #0
 8011bf4:	f001 ff00 	bl	80139f8 <ucdr_alignment>
 8011bf8:	1d05      	adds	r5, r0, #4
 8011bfa:	2104      	movs	r1, #4
 8011bfc:	4628      	mov	r0, r5
 8011bfe:	f001 fefb 	bl	80139f8 <ucdr_alignment>
 8011c02:	1d04      	adds	r4, r0, #4
 8011c04:	442c      	add	r4, r5
 8011c06:	2104      	movs	r1, #4
 8011c08:	4620      	mov	r0, r4
 8011c0a:	f001 fef5 	bl	80139f8 <ucdr_alignment>
 8011c0e:	3004      	adds	r0, #4
 8011c10:	4404      	add	r4, r0
 8011c12:	2104      	movs	r1, #4
 8011c14:	4620      	mov	r0, r4
 8011c16:	f001 feef 	bl	80139f8 <ucdr_alignment>
 8011c1a:	3004      	adds	r0, #4
 8011c1c:	4420      	add	r0, r4
 8011c1e:	bd38      	pop	{r3, r4, r5, pc}
 8011c20:	4770      	bx	lr
 8011c22:	bf00      	nop

08011c24 <_ColorRGBA__max_serialized_size>:
 8011c24:	b538      	push	{r3, r4, r5, lr}
 8011c26:	2104      	movs	r1, #4
 8011c28:	2000      	movs	r0, #0
 8011c2a:	f001 fee5 	bl	80139f8 <ucdr_alignment>
 8011c2e:	1d05      	adds	r5, r0, #4
 8011c30:	2104      	movs	r1, #4
 8011c32:	4628      	mov	r0, r5
 8011c34:	f001 fee0 	bl	80139f8 <ucdr_alignment>
 8011c38:	1d04      	adds	r4, r0, #4
 8011c3a:	442c      	add	r4, r5
 8011c3c:	2104      	movs	r1, #4
 8011c3e:	4620      	mov	r0, r4
 8011c40:	f001 feda 	bl	80139f8 <ucdr_alignment>
 8011c44:	3004      	adds	r0, #4
 8011c46:	4404      	add	r4, r0
 8011c48:	2104      	movs	r1, #4
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f001 fed4 	bl	80139f8 <ucdr_alignment>
 8011c50:	3004      	adds	r0, #4
 8011c52:	4420      	add	r0, r4
 8011c54:	bd38      	pop	{r3, r4, r5, pc}
 8011c56:	bf00      	nop

08011c58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 8011c58:	4800      	ldr	r0, [pc, #0]	; (8011c5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x4>)
 8011c5a:	4770      	bx	lr
 8011c5c:	20000868 	.word	0x20000868

08011c60 <_Header__max_serialized_size>:
 8011c60:	b500      	push	{lr}
 8011c62:	b083      	sub	sp, #12
 8011c64:	2301      	movs	r3, #1
 8011c66:	2100      	movs	r1, #0
 8011c68:	f10d 0007 	add.w	r0, sp, #7
 8011c6c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011c70:	f000 f948 	bl	8011f04 <max_serialized_size_builtin_interfaces__msg__Time>
 8011c74:	b003      	add	sp, #12
 8011c76:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c7a:	bf00      	nop

08011c7c <get_serialized_size_std_msgs__msg__Header>:
 8011c7c:	b570      	push	{r4, r5, r6, lr}
 8011c7e:	4605      	mov	r5, r0
 8011c80:	b168      	cbz	r0, 8011c9e <get_serialized_size_std_msgs__msg__Header+0x22>
 8011c82:	460c      	mov	r4, r1
 8011c84:	f000 f8ee 	bl	8011e64 <get_serialized_size_builtin_interfaces__msg__Time>
 8011c88:	1826      	adds	r6, r4, r0
 8011c8a:	2104      	movs	r1, #4
 8011c8c:	4630      	mov	r0, r6
 8011c8e:	f001 feb3 	bl	80139f8 <ucdr_alignment>
 8011c92:	68e9      	ldr	r1, [r5, #12]
 8011c94:	f1c4 0405 	rsb	r4, r4, #5
 8011c98:	440c      	add	r4, r1
 8011c9a:	4404      	add	r4, r0
 8011c9c:	19a0      	adds	r0, r4, r6
 8011c9e:	bd70      	pop	{r4, r5, r6, pc}

08011ca0 <_Header__cdr_deserialize>:
 8011ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ca2:	460c      	mov	r4, r1
 8011ca4:	b083      	sub	sp, #12
 8011ca6:	b1e1      	cbz	r1, 8011ce2 <_Header__cdr_deserialize+0x42>
 8011ca8:	4606      	mov	r6, r0
 8011caa:	f000 f93f 	bl	8011f2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011cae:	6843      	ldr	r3, [r0, #4]
 8011cb0:	4621      	mov	r1, r4
 8011cb2:	68db      	ldr	r3, [r3, #12]
 8011cb4:	4630      	mov	r0, r6
 8011cb6:	4798      	blx	r3
 8011cb8:	6927      	ldr	r7, [r4, #16]
 8011cba:	68a1      	ldr	r1, [r4, #8]
 8011cbc:	ab01      	add	r3, sp, #4
 8011cbe:	463a      	mov	r2, r7
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	f001 ff17 	bl	8013af4 <ucdr_deserialize_sequence_char>
 8011cc6:	9b01      	ldr	r3, [sp, #4]
 8011cc8:	4605      	mov	r5, r0
 8011cca:	b920      	cbnz	r0, 8011cd6 <_Header__cdr_deserialize+0x36>
 8011ccc:	429f      	cmp	r7, r3
 8011cce:	d30c      	bcc.n	8011cea <_Header__cdr_deserialize+0x4a>
 8011cd0:	4628      	mov	r0, r5
 8011cd2:	b003      	add	sp, #12
 8011cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cd6:	b103      	cbz	r3, 8011cda <_Header__cdr_deserialize+0x3a>
 8011cd8:	3b01      	subs	r3, #1
 8011cda:	4628      	mov	r0, r5
 8011cdc:	60e3      	str	r3, [r4, #12]
 8011cde:	b003      	add	sp, #12
 8011ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ce2:	460d      	mov	r5, r1
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	b003      	add	sp, #12
 8011ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cea:	2101      	movs	r1, #1
 8011cec:	75b0      	strb	r0, [r6, #22]
 8011cee:	7571      	strb	r1, [r6, #21]
 8011cf0:	4630      	mov	r0, r6
 8011cf2:	60e5      	str	r5, [r4, #12]
 8011cf4:	f001 fe96 	bl	8013a24 <ucdr_align_to>
 8011cf8:	4630      	mov	r0, r6
 8011cfa:	9901      	ldr	r1, [sp, #4]
 8011cfc:	f001 fec8 	bl	8013a90 <ucdr_advance_buffer>
 8011d00:	4628      	mov	r0, r5
 8011d02:	b003      	add	sp, #12
 8011d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d06:	bf00      	nop

08011d08 <_Header__cdr_serialize>:
 8011d08:	b1f8      	cbz	r0, 8011d4a <_Header__cdr_serialize+0x42>
 8011d0a:	b570      	push	{r4, r5, r6, lr}
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	460d      	mov	r5, r1
 8011d10:	f000 f90c 	bl	8011f2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011d14:	6843      	ldr	r3, [r0, #4]
 8011d16:	4629      	mov	r1, r5
 8011d18:	689b      	ldr	r3, [r3, #8]
 8011d1a:	4620      	mov	r0, r4
 8011d1c:	4798      	blx	r3
 8011d1e:	68a6      	ldr	r6, [r4, #8]
 8011d20:	b156      	cbz	r6, 8011d38 <_Header__cdr_serialize+0x30>
 8011d22:	4630      	mov	r0, r6
 8011d24:	f7ee fa5e 	bl	80001e4 <strlen>
 8011d28:	4631      	mov	r1, r6
 8011d2a:	60e0      	str	r0, [r4, #12]
 8011d2c:	1c42      	adds	r2, r0, #1
 8011d2e:	4628      	mov	r0, r5
 8011d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d34:	f001 becc 	b.w	8013ad0 <ucdr_serialize_sequence_char>
 8011d38:	4630      	mov	r0, r6
 8011d3a:	60e0      	str	r0, [r4, #12]
 8011d3c:	4632      	mov	r2, r6
 8011d3e:	4631      	mov	r1, r6
 8011d40:	4628      	mov	r0, r5
 8011d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d46:	f001 bec3 	b.w	8013ad0 <ucdr_serialize_sequence_char>
 8011d4a:	4770      	bx	lr

08011d4c <_Header__get_serialized_size>:
 8011d4c:	b538      	push	{r3, r4, r5, lr}
 8011d4e:	4604      	mov	r4, r0
 8011d50:	b150      	cbz	r0, 8011d68 <_Header__get_serialized_size+0x1c>
 8011d52:	2100      	movs	r1, #0
 8011d54:	f000 f886 	bl	8011e64 <get_serialized_size_builtin_interfaces__msg__Time>
 8011d58:	2104      	movs	r1, #4
 8011d5a:	4605      	mov	r5, r0
 8011d5c:	f001 fe4c 	bl	80139f8 <ucdr_alignment>
 8011d60:	68e2      	ldr	r2, [r4, #12]
 8011d62:	3205      	adds	r2, #5
 8011d64:	1953      	adds	r3, r2, r5
 8011d66:	4418      	add	r0, r3
 8011d68:	bd38      	pop	{r3, r4, r5, pc}
 8011d6a:	bf00      	nop

08011d6c <max_serialized_size_std_msgs__msg__Header>:
 8011d6c:	b510      	push	{r4, lr}
 8011d6e:	2301      	movs	r3, #1
 8011d70:	4604      	mov	r4, r0
 8011d72:	7003      	strb	r3, [r0, #0]
 8011d74:	f000 f8c6 	bl	8011f04 <max_serialized_size_builtin_interfaces__msg__Time>
 8011d78:	2300      	movs	r3, #0
 8011d7a:	7023      	strb	r3, [r4, #0]
 8011d7c:	bd10      	pop	{r4, pc}
 8011d7e:	bf00      	nop

08011d80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011d80:	4800      	ldr	r0, [pc, #0]	; (8011d84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8011d82:	4770      	bx	lr
 8011d84:	20000890 	.word	0x20000890

08011d88 <_Int32__max_serialized_size>:
 8011d88:	b508      	push	{r3, lr}
 8011d8a:	2104      	movs	r1, #4
 8011d8c:	2000      	movs	r0, #0
 8011d8e:	f001 fe33 	bl	80139f8 <ucdr_alignment>
 8011d92:	3004      	adds	r0, #4
 8011d94:	bd08      	pop	{r3, pc}
 8011d96:	bf00      	nop

08011d98 <_Int32__cdr_deserialize>:
 8011d98:	b109      	cbz	r1, 8011d9e <_Int32__cdr_deserialize+0x6>
 8011d9a:	f000 bfc1 	b.w	8012d20 <ucdr_deserialize_int32_t>
 8011d9e:	4608      	mov	r0, r1
 8011da0:	4770      	bx	lr
 8011da2:	bf00      	nop

08011da4 <get_serialized_size_std_msgs__msg__Int32>:
 8011da4:	b138      	cbz	r0, 8011db6 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8011da6:	b508      	push	{r3, lr}
 8011da8:	460b      	mov	r3, r1
 8011daa:	4618      	mov	r0, r3
 8011dac:	2104      	movs	r1, #4
 8011dae:	f001 fe23 	bl	80139f8 <ucdr_alignment>
 8011db2:	3004      	adds	r0, #4
 8011db4:	bd08      	pop	{r3, pc}
 8011db6:	4770      	bx	lr

08011db8 <_Int32__cdr_serialize>:
 8011db8:	460a      	mov	r2, r1
 8011dba:	b118      	cbz	r0, 8011dc4 <_Int32__cdr_serialize+0xc>
 8011dbc:	6801      	ldr	r1, [r0, #0]
 8011dbe:	4610      	mov	r0, r2
 8011dc0:	f000 bf16 	b.w	8012bf0 <ucdr_serialize_int32_t>
 8011dc4:	4770      	bx	lr
 8011dc6:	bf00      	nop

08011dc8 <_Int32__get_serialized_size>:
 8011dc8:	b130      	cbz	r0, 8011dd8 <_Int32__get_serialized_size+0x10>
 8011dca:	b508      	push	{r3, lr}
 8011dcc:	2104      	movs	r1, #4
 8011dce:	2000      	movs	r0, #0
 8011dd0:	f001 fe12 	bl	80139f8 <ucdr_alignment>
 8011dd4:	3004      	adds	r0, #4
 8011dd6:	bd08      	pop	{r3, pc}
 8011dd8:	4770      	bx	lr
 8011dda:	bf00      	nop

08011ddc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8011ddc:	4800      	ldr	r0, [pc, #0]	; (8011de0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8011dde:	4770      	bx	lr
 8011de0:	200008b8 	.word	0x200008b8

08011de4 <_Int64__max_serialized_size>:
 8011de4:	b508      	push	{r3, lr}
 8011de6:	2108      	movs	r1, #8
 8011de8:	2000      	movs	r0, #0
 8011dea:	f001 fe05 	bl	80139f8 <ucdr_alignment>
 8011dee:	3008      	adds	r0, #8
 8011df0:	bd08      	pop	{r3, pc}
 8011df2:	bf00      	nop

08011df4 <_Int64__cdr_deserialize>:
 8011df4:	b109      	cbz	r1, 8011dfa <_Int64__cdr_deserialize+0x6>
 8011df6:	f001 b8f3 	b.w	8012fe0 <ucdr_deserialize_int64_t>
 8011dfa:	4608      	mov	r0, r1
 8011dfc:	4770      	bx	lr
 8011dfe:	bf00      	nop

08011e00 <_Int64__get_serialized_size>:
 8011e00:	b130      	cbz	r0, 8011e10 <_Int64__get_serialized_size+0x10>
 8011e02:	b508      	push	{r3, lr}
 8011e04:	2108      	movs	r1, #8
 8011e06:	2000      	movs	r0, #0
 8011e08:	f001 fdf6 	bl	80139f8 <ucdr_alignment>
 8011e0c:	3008      	adds	r0, #8
 8011e0e:	bd08      	pop	{r3, pc}
 8011e10:	4770      	bx	lr
 8011e12:	bf00      	nop

08011e14 <_Int64__cdr_serialize>:
 8011e14:	b120      	cbz	r0, 8011e20 <_Int64__cdr_serialize+0xc>
 8011e16:	e9d0 2300 	ldrd	r2, r3, [r0]
 8011e1a:	4608      	mov	r0, r1
 8011e1c:	f001 b810 	b.w	8012e40 <ucdr_serialize_int64_t>
 8011e20:	4770      	bx	lr
 8011e22:	bf00      	nop

08011e24 <get_serialized_size_std_msgs__msg__Int64>:
 8011e24:	b138      	cbz	r0, 8011e36 <get_serialized_size_std_msgs__msg__Int64+0x12>
 8011e26:	b508      	push	{r3, lr}
 8011e28:	460b      	mov	r3, r1
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	2108      	movs	r1, #8
 8011e2e:	f001 fde3 	bl	80139f8 <ucdr_alignment>
 8011e32:	3008      	adds	r0, #8
 8011e34:	bd08      	pop	{r3, pc}
 8011e36:	4770      	bx	lr

08011e38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8011e38:	4800      	ldr	r0, [pc, #0]	; (8011e3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int64+0x4>)
 8011e3a:	4770      	bx	lr
 8011e3c:	200008e0 	.word	0x200008e0

08011e40 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8011e40:	f006 bd00 	b.w	8018844 <builtin_interfaces__msg__Time__init>

08011e44 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8011e44:	f006 bd02 	b.w	801884c <builtin_interfaces__msg__Time__fini>

08011e48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011e48:	4b04      	ldr	r3, [pc, #16]	; (8011e5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011e4a:	681a      	ldr	r2, [r3, #0]
 8011e4c:	b10a      	cbz	r2, 8011e52 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8011e4e:	4803      	ldr	r0, [pc, #12]	; (8011e5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011e50:	4770      	bx	lr
 8011e52:	4a03      	ldr	r2, [pc, #12]	; (8011e60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8011e54:	4801      	ldr	r0, [pc, #4]	; (8011e5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011e56:	6812      	ldr	r2, [r2, #0]
 8011e58:	601a      	str	r2, [r3, #0]
 8011e5a:	4770      	bx	lr
 8011e5c:	20000980 	.word	0x20000980
 8011e60:	200009b8 	.word	0x200009b8

08011e64 <get_serialized_size_builtin_interfaces__msg__Time>:
 8011e64:	b180      	cbz	r0, 8011e88 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8011e66:	b538      	push	{r3, r4, r5, lr}
 8011e68:	460d      	mov	r5, r1
 8011e6a:	4628      	mov	r0, r5
 8011e6c:	2104      	movs	r1, #4
 8011e6e:	f001 fdc3 	bl	80139f8 <ucdr_alignment>
 8011e72:	1d2b      	adds	r3, r5, #4
 8011e74:	181c      	adds	r4, r3, r0
 8011e76:	2104      	movs	r1, #4
 8011e78:	4620      	mov	r0, r4
 8011e7a:	f001 fdbd 	bl	80139f8 <ucdr_alignment>
 8011e7e:	f1c5 0504 	rsb	r5, r5, #4
 8011e82:	4428      	add	r0, r5
 8011e84:	4420      	add	r0, r4
 8011e86:	bd38      	pop	{r3, r4, r5, pc}
 8011e88:	4770      	bx	lr
 8011e8a:	bf00      	nop

08011e8c <_Time__cdr_deserialize>:
 8011e8c:	b538      	push	{r3, r4, r5, lr}
 8011e8e:	460c      	mov	r4, r1
 8011e90:	b141      	cbz	r1, 8011ea4 <_Time__cdr_deserialize+0x18>
 8011e92:	4605      	mov	r5, r0
 8011e94:	f000 ff44 	bl	8012d20 <ucdr_deserialize_int32_t>
 8011e98:	1d21      	adds	r1, r4, #4
 8011e9a:	4628      	mov	r0, r5
 8011e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ea0:	f000 bbbc 	b.w	801261c <ucdr_deserialize_uint32_t>
 8011ea4:	4608      	mov	r0, r1
 8011ea6:	bd38      	pop	{r3, r4, r5, pc}

08011ea8 <_Time__cdr_serialize>:
 8011ea8:	b160      	cbz	r0, 8011ec4 <_Time__cdr_serialize+0x1c>
 8011eaa:	b538      	push	{r3, r4, r5, lr}
 8011eac:	460d      	mov	r5, r1
 8011eae:	4604      	mov	r4, r0
 8011eb0:	6801      	ldr	r1, [r0, #0]
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	f000 fe9c 	bl	8012bf0 <ucdr_serialize_int32_t>
 8011eb8:	6861      	ldr	r1, [r4, #4]
 8011eba:	4628      	mov	r0, r5
 8011ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ec0:	f000 ba7c 	b.w	80123bc <ucdr_serialize_uint32_t>
 8011ec4:	4770      	bx	lr
 8011ec6:	bf00      	nop

08011ec8 <_Time__get_serialized_size>:
 8011ec8:	b160      	cbz	r0, 8011ee4 <_Time__get_serialized_size+0x1c>
 8011eca:	b510      	push	{r4, lr}
 8011ecc:	2104      	movs	r1, #4
 8011ece:	2000      	movs	r0, #0
 8011ed0:	f001 fd92 	bl	80139f8 <ucdr_alignment>
 8011ed4:	1d04      	adds	r4, r0, #4
 8011ed6:	2104      	movs	r1, #4
 8011ed8:	4620      	mov	r0, r4
 8011eda:	f001 fd8d 	bl	80139f8 <ucdr_alignment>
 8011ede:	3004      	adds	r0, #4
 8011ee0:	4420      	add	r0, r4
 8011ee2:	bd10      	pop	{r4, pc}
 8011ee4:	4770      	bx	lr
 8011ee6:	bf00      	nop

08011ee8 <_Time__max_serialized_size>:
 8011ee8:	b510      	push	{r4, lr}
 8011eea:	2104      	movs	r1, #4
 8011eec:	2000      	movs	r0, #0
 8011eee:	f001 fd83 	bl	80139f8 <ucdr_alignment>
 8011ef2:	1d04      	adds	r4, r0, #4
 8011ef4:	2104      	movs	r1, #4
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f001 fd7e 	bl	80139f8 <ucdr_alignment>
 8011efc:	3004      	adds	r0, #4
 8011efe:	4420      	add	r0, r4
 8011f00:	bd10      	pop	{r4, pc}
 8011f02:	bf00      	nop

08011f04 <max_serialized_size_builtin_interfaces__msg__Time>:
 8011f04:	b538      	push	{r3, r4, r5, lr}
 8011f06:	460c      	mov	r4, r1
 8011f08:	2301      	movs	r3, #1
 8011f0a:	7003      	strb	r3, [r0, #0]
 8011f0c:	2104      	movs	r1, #4
 8011f0e:	4620      	mov	r0, r4
 8011f10:	f001 fd72 	bl	80139f8 <ucdr_alignment>
 8011f14:	1d25      	adds	r5, r4, #4
 8011f16:	4405      	add	r5, r0
 8011f18:	2104      	movs	r1, #4
 8011f1a:	4628      	mov	r0, r5
 8011f1c:	f001 fd6c 	bl	80139f8 <ucdr_alignment>
 8011f20:	f1c4 0404 	rsb	r4, r4, #4
 8011f24:	4420      	add	r0, r4
 8011f26:	4428      	add	r0, r5
 8011f28:	bd38      	pop	{r3, r4, r5, pc}
 8011f2a:	bf00      	nop

08011f2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011f2c:	4800      	ldr	r0, [pc, #0]	; (8011f30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8011f2e:	4770      	bx	lr
 8011f30:	2000098c 	.word	0x2000098c

08011f34 <ucdr_serialize_bool>:
 8011f34:	b538      	push	{r3, r4, r5, lr}
 8011f36:	460d      	mov	r5, r1
 8011f38:	2101      	movs	r1, #1
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	f001 fd10 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8011f40:	b148      	cbz	r0, 8011f56 <ucdr_serialize_bool+0x22>
 8011f42:	68a3      	ldr	r3, [r4, #8]
 8011f44:	701d      	strb	r5, [r3, #0]
 8011f46:	68a2      	ldr	r2, [r4, #8]
 8011f48:	6923      	ldr	r3, [r4, #16]
 8011f4a:	2101      	movs	r1, #1
 8011f4c:	440a      	add	r2, r1
 8011f4e:	440b      	add	r3, r1
 8011f50:	60a2      	str	r2, [r4, #8]
 8011f52:	6123      	str	r3, [r4, #16]
 8011f54:	7561      	strb	r1, [r4, #21]
 8011f56:	7da0      	ldrb	r0, [r4, #22]
 8011f58:	f080 0001 	eor.w	r0, r0, #1
 8011f5c:	bd38      	pop	{r3, r4, r5, pc}
 8011f5e:	bf00      	nop

08011f60 <ucdr_deserialize_bool>:
 8011f60:	b538      	push	{r3, r4, r5, lr}
 8011f62:	460d      	mov	r5, r1
 8011f64:	2101      	movs	r1, #1
 8011f66:	4604      	mov	r4, r0
 8011f68:	f001 fcfa 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8011f6c:	b160      	cbz	r0, 8011f88 <ucdr_deserialize_bool+0x28>
 8011f6e:	68a2      	ldr	r2, [r4, #8]
 8011f70:	6923      	ldr	r3, [r4, #16]
 8011f72:	f812 1b01 	ldrb.w	r1, [r2], #1
 8011f76:	3900      	subs	r1, #0
 8011f78:	bf18      	it	ne
 8011f7a:	2101      	movne	r1, #1
 8011f7c:	7029      	strb	r1, [r5, #0]
 8011f7e:	3301      	adds	r3, #1
 8011f80:	2101      	movs	r1, #1
 8011f82:	60a2      	str	r2, [r4, #8]
 8011f84:	6123      	str	r3, [r4, #16]
 8011f86:	7561      	strb	r1, [r4, #21]
 8011f88:	7da0      	ldrb	r0, [r4, #22]
 8011f8a:	f080 0001 	eor.w	r0, r0, #1
 8011f8e:	bd38      	pop	{r3, r4, r5, pc}

08011f90 <ucdr_serialize_uint8_t>:
 8011f90:	b538      	push	{r3, r4, r5, lr}
 8011f92:	460d      	mov	r5, r1
 8011f94:	2101      	movs	r1, #1
 8011f96:	4604      	mov	r4, r0
 8011f98:	f001 fce2 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8011f9c:	b148      	cbz	r0, 8011fb2 <ucdr_serialize_uint8_t+0x22>
 8011f9e:	68a3      	ldr	r3, [r4, #8]
 8011fa0:	701d      	strb	r5, [r3, #0]
 8011fa2:	68a2      	ldr	r2, [r4, #8]
 8011fa4:	6923      	ldr	r3, [r4, #16]
 8011fa6:	2101      	movs	r1, #1
 8011fa8:	440a      	add	r2, r1
 8011faa:	440b      	add	r3, r1
 8011fac:	60a2      	str	r2, [r4, #8]
 8011fae:	6123      	str	r3, [r4, #16]
 8011fb0:	7561      	strb	r1, [r4, #21]
 8011fb2:	7da0      	ldrb	r0, [r4, #22]
 8011fb4:	f080 0001 	eor.w	r0, r0, #1
 8011fb8:	bd38      	pop	{r3, r4, r5, pc}
 8011fba:	bf00      	nop

08011fbc <ucdr_deserialize_uint8_t>:
 8011fbc:	b538      	push	{r3, r4, r5, lr}
 8011fbe:	460d      	mov	r5, r1
 8011fc0:	2101      	movs	r1, #1
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	f001 fccc 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8011fc8:	b150      	cbz	r0, 8011fe0 <ucdr_deserialize_uint8_t+0x24>
 8011fca:	68a3      	ldr	r3, [r4, #8]
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	702b      	strb	r3, [r5, #0]
 8011fd0:	68a2      	ldr	r2, [r4, #8]
 8011fd2:	6923      	ldr	r3, [r4, #16]
 8011fd4:	2101      	movs	r1, #1
 8011fd6:	440a      	add	r2, r1
 8011fd8:	440b      	add	r3, r1
 8011fda:	60a2      	str	r2, [r4, #8]
 8011fdc:	6123      	str	r3, [r4, #16]
 8011fde:	7561      	strb	r1, [r4, #21]
 8011fe0:	7da0      	ldrb	r0, [r4, #22]
 8011fe2:	f080 0001 	eor.w	r0, r0, #1
 8011fe6:	bd38      	pop	{r3, r4, r5, pc}

08011fe8 <ucdr_serialize_uint16_t>:
 8011fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fec:	b082      	sub	sp, #8
 8011fee:	460b      	mov	r3, r1
 8011ff0:	2102      	movs	r1, #2
 8011ff2:	4604      	mov	r4, r0
 8011ff4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011ff8:	f001 fd06 	bl	8013a08 <ucdr_buffer_alignment>
 8011ffc:	4601      	mov	r1, r0
 8011ffe:	4620      	mov	r0, r4
 8012000:	7d67      	ldrb	r7, [r4, #21]
 8012002:	f001 fd45 	bl	8013a90 <ucdr_advance_buffer>
 8012006:	2102      	movs	r1, #2
 8012008:	4620      	mov	r0, r4
 801200a:	f001 fc9d 	bl	8013948 <ucdr_check_buffer_available_for>
 801200e:	bb78      	cbnz	r0, 8012070 <ucdr_serialize_uint16_t+0x88>
 8012010:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012014:	42ab      	cmp	r3, r5
 8012016:	d926      	bls.n	8012066 <ucdr_serialize_uint16_t+0x7e>
 8012018:	1b5e      	subs	r6, r3, r5
 801201a:	60a3      	str	r3, [r4, #8]
 801201c:	6923      	ldr	r3, [r4, #16]
 801201e:	f1c6 0802 	rsb	r8, r6, #2
 8012022:	4433      	add	r3, r6
 8012024:	6123      	str	r3, [r4, #16]
 8012026:	4641      	mov	r1, r8
 8012028:	4620      	mov	r0, r4
 801202a:	f001 fc99 	bl	8013960 <ucdr_check_final_buffer_behavior>
 801202e:	2800      	cmp	r0, #0
 8012030:	d03b      	beq.n	80120aa <ucdr_serialize_uint16_t+0xc2>
 8012032:	7d23      	ldrb	r3, [r4, #20]
 8012034:	2b01      	cmp	r3, #1
 8012036:	d04a      	beq.n	80120ce <ucdr_serialize_uint16_t+0xe6>
 8012038:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801203c:	702b      	strb	r3, [r5, #0]
 801203e:	2e00      	cmp	r6, #0
 8012040:	d040      	beq.n	80120c4 <ucdr_serialize_uint16_t+0xdc>
 8012042:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012046:	706b      	strb	r3, [r5, #1]
 8012048:	6923      	ldr	r3, [r4, #16]
 801204a:	68a2      	ldr	r2, [r4, #8]
 801204c:	7da0      	ldrb	r0, [r4, #22]
 801204e:	3302      	adds	r3, #2
 8012050:	1b9e      	subs	r6, r3, r6
 8012052:	4442      	add	r2, r8
 8012054:	2302      	movs	r3, #2
 8012056:	f080 0001 	eor.w	r0, r0, #1
 801205a:	60a2      	str	r2, [r4, #8]
 801205c:	6126      	str	r6, [r4, #16]
 801205e:	7563      	strb	r3, [r4, #21]
 8012060:	b002      	add	sp, #8
 8012062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012066:	2102      	movs	r1, #2
 8012068:	4620      	mov	r0, r4
 801206a:	f001 fc79 	bl	8013960 <ucdr_check_final_buffer_behavior>
 801206e:	b190      	cbz	r0, 8012096 <ucdr_serialize_uint16_t+0xae>
 8012070:	7d23      	ldrb	r3, [r4, #20]
 8012072:	2b01      	cmp	r3, #1
 8012074:	68a3      	ldr	r3, [r4, #8]
 8012076:	d014      	beq.n	80120a2 <ucdr_serialize_uint16_t+0xba>
 8012078:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801207c:	701a      	strb	r2, [r3, #0]
 801207e:	68a3      	ldr	r3, [r4, #8]
 8012080:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012084:	705a      	strb	r2, [r3, #1]
 8012086:	68a2      	ldr	r2, [r4, #8]
 8012088:	6923      	ldr	r3, [r4, #16]
 801208a:	3202      	adds	r2, #2
 801208c:	3302      	adds	r3, #2
 801208e:	2102      	movs	r1, #2
 8012090:	60a2      	str	r2, [r4, #8]
 8012092:	6123      	str	r3, [r4, #16]
 8012094:	7561      	strb	r1, [r4, #21]
 8012096:	7da0      	ldrb	r0, [r4, #22]
 8012098:	f080 0001 	eor.w	r0, r0, #1
 801209c:	b002      	add	sp, #8
 801209e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80120a6:	801a      	strh	r2, [r3, #0]
 80120a8:	e7ed      	b.n	8012086 <ucdr_serialize_uint16_t+0x9e>
 80120aa:	68a2      	ldr	r2, [r4, #8]
 80120ac:	6923      	ldr	r3, [r4, #16]
 80120ae:	7da0      	ldrb	r0, [r4, #22]
 80120b0:	7567      	strb	r7, [r4, #21]
 80120b2:	1b92      	subs	r2, r2, r6
 80120b4:	1b9b      	subs	r3, r3, r6
 80120b6:	f080 0001 	eor.w	r0, r0, #1
 80120ba:	60a2      	str	r2, [r4, #8]
 80120bc:	6123      	str	r3, [r4, #16]
 80120be:	b002      	add	sp, #8
 80120c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120c4:	68a3      	ldr	r3, [r4, #8]
 80120c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80120ca:	701a      	strb	r2, [r3, #0]
 80120cc:	e7bc      	b.n	8012048 <ucdr_serialize_uint16_t+0x60>
 80120ce:	4628      	mov	r0, r5
 80120d0:	f10d 0506 	add.w	r5, sp, #6
 80120d4:	4629      	mov	r1, r5
 80120d6:	4632      	mov	r2, r6
 80120d8:	f009 f816 	bl	801b108 <memcpy>
 80120dc:	68a0      	ldr	r0, [r4, #8]
 80120de:	4642      	mov	r2, r8
 80120e0:	19a9      	adds	r1, r5, r6
 80120e2:	f009 f811 	bl	801b108 <memcpy>
 80120e6:	e7af      	b.n	8012048 <ucdr_serialize_uint16_t+0x60>

080120e8 <ucdr_serialize_endian_uint16_t>:
 80120e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80120ec:	b083      	sub	sp, #12
 80120ee:	460d      	mov	r5, r1
 80120f0:	2102      	movs	r1, #2
 80120f2:	4604      	mov	r4, r0
 80120f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80120f8:	f001 fc86 	bl	8013a08 <ucdr_buffer_alignment>
 80120fc:	4601      	mov	r1, r0
 80120fe:	4620      	mov	r0, r4
 8012100:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012104:	f001 fcc4 	bl	8013a90 <ucdr_advance_buffer>
 8012108:	2102      	movs	r1, #2
 801210a:	4620      	mov	r0, r4
 801210c:	f001 fc1c 	bl	8013948 <ucdr_check_buffer_available_for>
 8012110:	bb70      	cbnz	r0, 8012170 <ucdr_serialize_endian_uint16_t+0x88>
 8012112:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012116:	42be      	cmp	r6, r7
 8012118:	d925      	bls.n	8012166 <ucdr_serialize_endian_uint16_t+0x7e>
 801211a:	6923      	ldr	r3, [r4, #16]
 801211c:	60a6      	str	r6, [r4, #8]
 801211e:	1bf6      	subs	r6, r6, r7
 8012120:	4433      	add	r3, r6
 8012122:	f1c6 0902 	rsb	r9, r6, #2
 8012126:	6123      	str	r3, [r4, #16]
 8012128:	4649      	mov	r1, r9
 801212a:	4620      	mov	r0, r4
 801212c:	f001 fc18 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012130:	2800      	cmp	r0, #0
 8012132:	d039      	beq.n	80121a8 <ucdr_serialize_endian_uint16_t+0xc0>
 8012134:	2d01      	cmp	r5, #1
 8012136:	d04a      	beq.n	80121ce <ucdr_serialize_endian_uint16_t+0xe6>
 8012138:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801213c:	703b      	strb	r3, [r7, #0]
 801213e:	2e00      	cmp	r6, #0
 8012140:	d040      	beq.n	80121c4 <ucdr_serialize_endian_uint16_t+0xdc>
 8012142:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012146:	707b      	strb	r3, [r7, #1]
 8012148:	6923      	ldr	r3, [r4, #16]
 801214a:	68a2      	ldr	r2, [r4, #8]
 801214c:	7da0      	ldrb	r0, [r4, #22]
 801214e:	3302      	adds	r3, #2
 8012150:	444a      	add	r2, r9
 8012152:	1b9b      	subs	r3, r3, r6
 8012154:	2102      	movs	r1, #2
 8012156:	f080 0001 	eor.w	r0, r0, #1
 801215a:	60a2      	str	r2, [r4, #8]
 801215c:	6123      	str	r3, [r4, #16]
 801215e:	7561      	strb	r1, [r4, #21]
 8012160:	b003      	add	sp, #12
 8012162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012166:	2102      	movs	r1, #2
 8012168:	4620      	mov	r0, r4
 801216a:	f001 fbf9 	bl	8013960 <ucdr_check_final_buffer_behavior>
 801216e:	b188      	cbz	r0, 8012194 <ucdr_serialize_endian_uint16_t+0xac>
 8012170:	2d01      	cmp	r5, #1
 8012172:	68a3      	ldr	r3, [r4, #8]
 8012174:	d014      	beq.n	80121a0 <ucdr_serialize_endian_uint16_t+0xb8>
 8012176:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801217a:	701a      	strb	r2, [r3, #0]
 801217c:	68a3      	ldr	r3, [r4, #8]
 801217e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012182:	705a      	strb	r2, [r3, #1]
 8012184:	68a2      	ldr	r2, [r4, #8]
 8012186:	6923      	ldr	r3, [r4, #16]
 8012188:	3202      	adds	r2, #2
 801218a:	3302      	adds	r3, #2
 801218c:	2102      	movs	r1, #2
 801218e:	60a2      	str	r2, [r4, #8]
 8012190:	6123      	str	r3, [r4, #16]
 8012192:	7561      	strb	r1, [r4, #21]
 8012194:	7da0      	ldrb	r0, [r4, #22]
 8012196:	f080 0001 	eor.w	r0, r0, #1
 801219a:	b003      	add	sp, #12
 801219c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80121a4:	801a      	strh	r2, [r3, #0]
 80121a6:	e7ed      	b.n	8012184 <ucdr_serialize_endian_uint16_t+0x9c>
 80121a8:	68a2      	ldr	r2, [r4, #8]
 80121aa:	6923      	ldr	r3, [r4, #16]
 80121ac:	7da0      	ldrb	r0, [r4, #22]
 80121ae:	f884 8015 	strb.w	r8, [r4, #21]
 80121b2:	1b92      	subs	r2, r2, r6
 80121b4:	1b9b      	subs	r3, r3, r6
 80121b6:	f080 0001 	eor.w	r0, r0, #1
 80121ba:	60a2      	str	r2, [r4, #8]
 80121bc:	6123      	str	r3, [r4, #16]
 80121be:	b003      	add	sp, #12
 80121c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121c4:	68a3      	ldr	r3, [r4, #8]
 80121c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121ca:	701a      	strb	r2, [r3, #0]
 80121cc:	e7bc      	b.n	8012148 <ucdr_serialize_endian_uint16_t+0x60>
 80121ce:	f10d 0506 	add.w	r5, sp, #6
 80121d2:	4629      	mov	r1, r5
 80121d4:	4632      	mov	r2, r6
 80121d6:	4638      	mov	r0, r7
 80121d8:	f008 ff96 	bl	801b108 <memcpy>
 80121dc:	68a0      	ldr	r0, [r4, #8]
 80121de:	464a      	mov	r2, r9
 80121e0:	19a9      	adds	r1, r5, r6
 80121e2:	f008 ff91 	bl	801b108 <memcpy>
 80121e6:	e7af      	b.n	8012148 <ucdr_serialize_endian_uint16_t+0x60>

080121e8 <ucdr_deserialize_uint16_t>:
 80121e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121ec:	460d      	mov	r5, r1
 80121ee:	2102      	movs	r1, #2
 80121f0:	4604      	mov	r4, r0
 80121f2:	f001 fc09 	bl	8013a08 <ucdr_buffer_alignment>
 80121f6:	4601      	mov	r1, r0
 80121f8:	4620      	mov	r0, r4
 80121fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80121fe:	f001 fc47 	bl	8013a90 <ucdr_advance_buffer>
 8012202:	2102      	movs	r1, #2
 8012204:	4620      	mov	r0, r4
 8012206:	f001 fb9f 	bl	8013948 <ucdr_check_buffer_available_for>
 801220a:	bb60      	cbnz	r0, 8012266 <ucdr_deserialize_uint16_t+0x7e>
 801220c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012210:	42be      	cmp	r6, r7
 8012212:	d923      	bls.n	801225c <ucdr_deserialize_uint16_t+0x74>
 8012214:	6923      	ldr	r3, [r4, #16]
 8012216:	60a6      	str	r6, [r4, #8]
 8012218:	1bf6      	subs	r6, r6, r7
 801221a:	4433      	add	r3, r6
 801221c:	f1c6 0902 	rsb	r9, r6, #2
 8012220:	6123      	str	r3, [r4, #16]
 8012222:	4649      	mov	r1, r9
 8012224:	4620      	mov	r0, r4
 8012226:	f001 fb9b 	bl	8013960 <ucdr_check_final_buffer_behavior>
 801222a:	2800      	cmp	r0, #0
 801222c:	d034      	beq.n	8012298 <ucdr_deserialize_uint16_t+0xb0>
 801222e:	7d23      	ldrb	r3, [r4, #20]
 8012230:	2b01      	cmp	r3, #1
 8012232:	d042      	beq.n	80122ba <ucdr_deserialize_uint16_t+0xd2>
 8012234:	787b      	ldrb	r3, [r7, #1]
 8012236:	702b      	strb	r3, [r5, #0]
 8012238:	2e00      	cmp	r6, #0
 801223a:	d03a      	beq.n	80122b2 <ucdr_deserialize_uint16_t+0xca>
 801223c:	783b      	ldrb	r3, [r7, #0]
 801223e:	706b      	strb	r3, [r5, #1]
 8012240:	6923      	ldr	r3, [r4, #16]
 8012242:	68a2      	ldr	r2, [r4, #8]
 8012244:	7da0      	ldrb	r0, [r4, #22]
 8012246:	2102      	movs	r1, #2
 8012248:	3302      	adds	r3, #2
 801224a:	444a      	add	r2, r9
 801224c:	1b9b      	subs	r3, r3, r6
 801224e:	7561      	strb	r1, [r4, #21]
 8012250:	60a2      	str	r2, [r4, #8]
 8012252:	6123      	str	r3, [r4, #16]
 8012254:	f080 0001 	eor.w	r0, r0, #1
 8012258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801225c:	2102      	movs	r1, #2
 801225e:	4620      	mov	r0, r4
 8012260:	f001 fb7e 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012264:	b180      	cbz	r0, 8012288 <ucdr_deserialize_uint16_t+0xa0>
 8012266:	7d23      	ldrb	r3, [r4, #20]
 8012268:	2b01      	cmp	r3, #1
 801226a:	68a3      	ldr	r3, [r4, #8]
 801226c:	d011      	beq.n	8012292 <ucdr_deserialize_uint16_t+0xaa>
 801226e:	785b      	ldrb	r3, [r3, #1]
 8012270:	702b      	strb	r3, [r5, #0]
 8012272:	68a3      	ldr	r3, [r4, #8]
 8012274:	781b      	ldrb	r3, [r3, #0]
 8012276:	706b      	strb	r3, [r5, #1]
 8012278:	68a2      	ldr	r2, [r4, #8]
 801227a:	6923      	ldr	r3, [r4, #16]
 801227c:	3202      	adds	r2, #2
 801227e:	3302      	adds	r3, #2
 8012280:	2102      	movs	r1, #2
 8012282:	60a2      	str	r2, [r4, #8]
 8012284:	6123      	str	r3, [r4, #16]
 8012286:	7561      	strb	r1, [r4, #21]
 8012288:	7da0      	ldrb	r0, [r4, #22]
 801228a:	f080 0001 	eor.w	r0, r0, #1
 801228e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012292:	881b      	ldrh	r3, [r3, #0]
 8012294:	802b      	strh	r3, [r5, #0]
 8012296:	e7ef      	b.n	8012278 <ucdr_deserialize_uint16_t+0x90>
 8012298:	68a2      	ldr	r2, [r4, #8]
 801229a:	6923      	ldr	r3, [r4, #16]
 801229c:	7da0      	ldrb	r0, [r4, #22]
 801229e:	f884 8015 	strb.w	r8, [r4, #21]
 80122a2:	1b92      	subs	r2, r2, r6
 80122a4:	1b9b      	subs	r3, r3, r6
 80122a6:	60a2      	str	r2, [r4, #8]
 80122a8:	6123      	str	r3, [r4, #16]
 80122aa:	f080 0001 	eor.w	r0, r0, #1
 80122ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122b2:	68a3      	ldr	r3, [r4, #8]
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	706b      	strb	r3, [r5, #1]
 80122b8:	e7c2      	b.n	8012240 <ucdr_deserialize_uint16_t+0x58>
 80122ba:	4639      	mov	r1, r7
 80122bc:	4632      	mov	r2, r6
 80122be:	4628      	mov	r0, r5
 80122c0:	f008 ff22 	bl	801b108 <memcpy>
 80122c4:	68a1      	ldr	r1, [r4, #8]
 80122c6:	464a      	mov	r2, r9
 80122c8:	19a8      	adds	r0, r5, r6
 80122ca:	f008 ff1d 	bl	801b108 <memcpy>
 80122ce:	e7b7      	b.n	8012240 <ucdr_deserialize_uint16_t+0x58>

080122d0 <ucdr_deserialize_endian_uint16_t>:
 80122d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122d4:	460e      	mov	r6, r1
 80122d6:	2102      	movs	r1, #2
 80122d8:	4604      	mov	r4, r0
 80122da:	4615      	mov	r5, r2
 80122dc:	f001 fb94 	bl	8013a08 <ucdr_buffer_alignment>
 80122e0:	4601      	mov	r1, r0
 80122e2:	4620      	mov	r0, r4
 80122e4:	f894 9015 	ldrb.w	r9, [r4, #21]
 80122e8:	f001 fbd2 	bl	8013a90 <ucdr_advance_buffer>
 80122ec:	2102      	movs	r1, #2
 80122ee:	4620      	mov	r0, r4
 80122f0:	f001 fb2a 	bl	8013948 <ucdr_check_buffer_available_for>
 80122f4:	bb70      	cbnz	r0, 8012354 <ucdr_deserialize_endian_uint16_t+0x84>
 80122f6:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 80122fa:	4547      	cmp	r7, r8
 80122fc:	d925      	bls.n	801234a <ucdr_deserialize_endian_uint16_t+0x7a>
 80122fe:	6923      	ldr	r3, [r4, #16]
 8012300:	60a7      	str	r7, [r4, #8]
 8012302:	eba7 0708 	sub.w	r7, r7, r8
 8012306:	443b      	add	r3, r7
 8012308:	f1c7 0a02 	rsb	sl, r7, #2
 801230c:	6123      	str	r3, [r4, #16]
 801230e:	4651      	mov	r1, sl
 8012310:	4620      	mov	r0, r4
 8012312:	f001 fb25 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012316:	2800      	cmp	r0, #0
 8012318:	d034      	beq.n	8012384 <ucdr_deserialize_endian_uint16_t+0xb4>
 801231a:	2e01      	cmp	r6, #1
 801231c:	d043      	beq.n	80123a6 <ucdr_deserialize_endian_uint16_t+0xd6>
 801231e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012322:	702b      	strb	r3, [r5, #0]
 8012324:	2f00      	cmp	r7, #0
 8012326:	d03a      	beq.n	801239e <ucdr_deserialize_endian_uint16_t+0xce>
 8012328:	f898 3000 	ldrb.w	r3, [r8]
 801232c:	706b      	strb	r3, [r5, #1]
 801232e:	6923      	ldr	r3, [r4, #16]
 8012330:	68a2      	ldr	r2, [r4, #8]
 8012332:	7da0      	ldrb	r0, [r4, #22]
 8012334:	2102      	movs	r1, #2
 8012336:	3302      	adds	r3, #2
 8012338:	4452      	add	r2, sl
 801233a:	1bdb      	subs	r3, r3, r7
 801233c:	7561      	strb	r1, [r4, #21]
 801233e:	60a2      	str	r2, [r4, #8]
 8012340:	6123      	str	r3, [r4, #16]
 8012342:	f080 0001 	eor.w	r0, r0, #1
 8012346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801234a:	2102      	movs	r1, #2
 801234c:	4620      	mov	r0, r4
 801234e:	f001 fb07 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012352:	b178      	cbz	r0, 8012374 <ucdr_deserialize_endian_uint16_t+0xa4>
 8012354:	2e01      	cmp	r6, #1
 8012356:	68a3      	ldr	r3, [r4, #8]
 8012358:	d011      	beq.n	801237e <ucdr_deserialize_endian_uint16_t+0xae>
 801235a:	785b      	ldrb	r3, [r3, #1]
 801235c:	702b      	strb	r3, [r5, #0]
 801235e:	68a3      	ldr	r3, [r4, #8]
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	706b      	strb	r3, [r5, #1]
 8012364:	68a2      	ldr	r2, [r4, #8]
 8012366:	6923      	ldr	r3, [r4, #16]
 8012368:	3202      	adds	r2, #2
 801236a:	3302      	adds	r3, #2
 801236c:	2102      	movs	r1, #2
 801236e:	60a2      	str	r2, [r4, #8]
 8012370:	6123      	str	r3, [r4, #16]
 8012372:	7561      	strb	r1, [r4, #21]
 8012374:	7da0      	ldrb	r0, [r4, #22]
 8012376:	f080 0001 	eor.w	r0, r0, #1
 801237a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801237e:	881b      	ldrh	r3, [r3, #0]
 8012380:	802b      	strh	r3, [r5, #0]
 8012382:	e7ef      	b.n	8012364 <ucdr_deserialize_endian_uint16_t+0x94>
 8012384:	68a2      	ldr	r2, [r4, #8]
 8012386:	6923      	ldr	r3, [r4, #16]
 8012388:	7da0      	ldrb	r0, [r4, #22]
 801238a:	f884 9015 	strb.w	r9, [r4, #21]
 801238e:	1bd2      	subs	r2, r2, r7
 8012390:	1bdb      	subs	r3, r3, r7
 8012392:	60a2      	str	r2, [r4, #8]
 8012394:	6123      	str	r3, [r4, #16]
 8012396:	f080 0001 	eor.w	r0, r0, #1
 801239a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801239e:	68a3      	ldr	r3, [r4, #8]
 80123a0:	781b      	ldrb	r3, [r3, #0]
 80123a2:	706b      	strb	r3, [r5, #1]
 80123a4:	e7c3      	b.n	801232e <ucdr_deserialize_endian_uint16_t+0x5e>
 80123a6:	4641      	mov	r1, r8
 80123a8:	463a      	mov	r2, r7
 80123aa:	4628      	mov	r0, r5
 80123ac:	f008 feac 	bl	801b108 <memcpy>
 80123b0:	68a1      	ldr	r1, [r4, #8]
 80123b2:	4652      	mov	r2, sl
 80123b4:	19e8      	adds	r0, r5, r7
 80123b6:	f008 fea7 	bl	801b108 <memcpy>
 80123ba:	e7b8      	b.n	801232e <ucdr_deserialize_endian_uint16_t+0x5e>

080123bc <ucdr_serialize_uint32_t>:
 80123bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123c0:	b082      	sub	sp, #8
 80123c2:	4604      	mov	r4, r0
 80123c4:	9101      	str	r1, [sp, #4]
 80123c6:	2104      	movs	r1, #4
 80123c8:	f001 fb1e 	bl	8013a08 <ucdr_buffer_alignment>
 80123cc:	4601      	mov	r1, r0
 80123ce:	4620      	mov	r0, r4
 80123d0:	7d67      	ldrb	r7, [r4, #21]
 80123d2:	f001 fb5d 	bl	8013a90 <ucdr_advance_buffer>
 80123d6:	2104      	movs	r1, #4
 80123d8:	4620      	mov	r0, r4
 80123da:	f001 fab5 	bl	8013948 <ucdr_check_buffer_available_for>
 80123de:	2800      	cmp	r0, #0
 80123e0:	d139      	bne.n	8012456 <ucdr_serialize_uint32_t+0x9a>
 80123e2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80123e6:	42ab      	cmp	r3, r5
 80123e8:	d930      	bls.n	801244c <ucdr_serialize_uint32_t+0x90>
 80123ea:	1b5e      	subs	r6, r3, r5
 80123ec:	60a3      	str	r3, [r4, #8]
 80123ee:	6923      	ldr	r3, [r4, #16]
 80123f0:	f1c6 0804 	rsb	r8, r6, #4
 80123f4:	4433      	add	r3, r6
 80123f6:	6123      	str	r3, [r4, #16]
 80123f8:	4641      	mov	r1, r8
 80123fa:	4620      	mov	r0, r4
 80123fc:	f001 fab0 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012400:	2800      	cmp	r0, #0
 8012402:	d04c      	beq.n	801249e <ucdr_serialize_uint32_t+0xe2>
 8012404:	7d23      	ldrb	r3, [r4, #20]
 8012406:	2b01      	cmp	r3, #1
 8012408:	d063      	beq.n	80124d2 <ucdr_serialize_uint32_t+0x116>
 801240a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801240e:	702b      	strb	r3, [r5, #0]
 8012410:	2e00      	cmp	r6, #0
 8012412:	d051      	beq.n	80124b8 <ucdr_serialize_uint32_t+0xfc>
 8012414:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012418:	706b      	strb	r3, [r5, #1]
 801241a:	2e01      	cmp	r6, #1
 801241c:	d050      	beq.n	80124c0 <ucdr_serialize_uint32_t+0x104>
 801241e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012422:	70ab      	strb	r3, [r5, #2]
 8012424:	2e02      	cmp	r6, #2
 8012426:	d04f      	beq.n	80124c8 <ucdr_serialize_uint32_t+0x10c>
 8012428:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801242c:	70eb      	strb	r3, [r5, #3]
 801242e:	6923      	ldr	r3, [r4, #16]
 8012430:	68a2      	ldr	r2, [r4, #8]
 8012432:	7da0      	ldrb	r0, [r4, #22]
 8012434:	3304      	adds	r3, #4
 8012436:	1b9e      	subs	r6, r3, r6
 8012438:	4442      	add	r2, r8
 801243a:	2304      	movs	r3, #4
 801243c:	f080 0001 	eor.w	r0, r0, #1
 8012440:	60a2      	str	r2, [r4, #8]
 8012442:	6126      	str	r6, [r4, #16]
 8012444:	7563      	strb	r3, [r4, #21]
 8012446:	b002      	add	sp, #8
 8012448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801244c:	2104      	movs	r1, #4
 801244e:	4620      	mov	r0, r4
 8012450:	f001 fa86 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012454:	b1d0      	cbz	r0, 801248c <ucdr_serialize_uint32_t+0xd0>
 8012456:	7d23      	ldrb	r3, [r4, #20]
 8012458:	2b01      	cmp	r3, #1
 801245a:	68a3      	ldr	r3, [r4, #8]
 801245c:	d01c      	beq.n	8012498 <ucdr_serialize_uint32_t+0xdc>
 801245e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012462:	701a      	strb	r2, [r3, #0]
 8012464:	68a3      	ldr	r3, [r4, #8]
 8012466:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801246a:	705a      	strb	r2, [r3, #1]
 801246c:	68a3      	ldr	r3, [r4, #8]
 801246e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012472:	709a      	strb	r2, [r3, #2]
 8012474:	68a3      	ldr	r3, [r4, #8]
 8012476:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801247a:	70da      	strb	r2, [r3, #3]
 801247c:	68a2      	ldr	r2, [r4, #8]
 801247e:	6923      	ldr	r3, [r4, #16]
 8012480:	3204      	adds	r2, #4
 8012482:	3304      	adds	r3, #4
 8012484:	2104      	movs	r1, #4
 8012486:	60a2      	str	r2, [r4, #8]
 8012488:	6123      	str	r3, [r4, #16]
 801248a:	7561      	strb	r1, [r4, #21]
 801248c:	7da0      	ldrb	r0, [r4, #22]
 801248e:	f080 0001 	eor.w	r0, r0, #1
 8012492:	b002      	add	sp, #8
 8012494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012498:	9a01      	ldr	r2, [sp, #4]
 801249a:	601a      	str	r2, [r3, #0]
 801249c:	e7ee      	b.n	801247c <ucdr_serialize_uint32_t+0xc0>
 801249e:	68a2      	ldr	r2, [r4, #8]
 80124a0:	6923      	ldr	r3, [r4, #16]
 80124a2:	7da0      	ldrb	r0, [r4, #22]
 80124a4:	7567      	strb	r7, [r4, #21]
 80124a6:	1b92      	subs	r2, r2, r6
 80124a8:	1b9b      	subs	r3, r3, r6
 80124aa:	f080 0001 	eor.w	r0, r0, #1
 80124ae:	60a2      	str	r2, [r4, #8]
 80124b0:	6123      	str	r3, [r4, #16]
 80124b2:	b002      	add	sp, #8
 80124b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124b8:	68a3      	ldr	r3, [r4, #8]
 80124ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80124be:	701a      	strb	r2, [r3, #0]
 80124c0:	68a3      	ldr	r3, [r4, #8]
 80124c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80124c6:	701a      	strb	r2, [r3, #0]
 80124c8:	68a3      	ldr	r3, [r4, #8]
 80124ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80124ce:	701a      	strb	r2, [r3, #0]
 80124d0:	e7ad      	b.n	801242e <ucdr_serialize_uint32_t+0x72>
 80124d2:	4628      	mov	r0, r5
 80124d4:	ad01      	add	r5, sp, #4
 80124d6:	4629      	mov	r1, r5
 80124d8:	4632      	mov	r2, r6
 80124da:	f008 fe15 	bl	801b108 <memcpy>
 80124de:	68a0      	ldr	r0, [r4, #8]
 80124e0:	4642      	mov	r2, r8
 80124e2:	19a9      	adds	r1, r5, r6
 80124e4:	f008 fe10 	bl	801b108 <memcpy>
 80124e8:	e7a1      	b.n	801242e <ucdr_serialize_uint32_t+0x72>
 80124ea:	bf00      	nop

080124ec <ucdr_serialize_endian_uint32_t>:
 80124ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124f0:	b083      	sub	sp, #12
 80124f2:	460d      	mov	r5, r1
 80124f4:	2104      	movs	r1, #4
 80124f6:	4604      	mov	r4, r0
 80124f8:	9201      	str	r2, [sp, #4]
 80124fa:	f001 fa85 	bl	8013a08 <ucdr_buffer_alignment>
 80124fe:	4601      	mov	r1, r0
 8012500:	4620      	mov	r0, r4
 8012502:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012506:	f001 fac3 	bl	8013a90 <ucdr_advance_buffer>
 801250a:	2104      	movs	r1, #4
 801250c:	4620      	mov	r0, r4
 801250e:	f001 fa1b 	bl	8013948 <ucdr_check_buffer_available_for>
 8012512:	2800      	cmp	r0, #0
 8012514:	d138      	bne.n	8012588 <ucdr_serialize_endian_uint32_t+0x9c>
 8012516:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801251a:	42b7      	cmp	r7, r6
 801251c:	d92f      	bls.n	801257e <ucdr_serialize_endian_uint32_t+0x92>
 801251e:	6923      	ldr	r3, [r4, #16]
 8012520:	60a7      	str	r7, [r4, #8]
 8012522:	1bbf      	subs	r7, r7, r6
 8012524:	443b      	add	r3, r7
 8012526:	f1c7 0904 	rsb	r9, r7, #4
 801252a:	6123      	str	r3, [r4, #16]
 801252c:	4649      	mov	r1, r9
 801252e:	4620      	mov	r0, r4
 8012530:	f001 fa16 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012534:	2800      	cmp	r0, #0
 8012536:	d04a      	beq.n	80125ce <ucdr_serialize_endian_uint32_t+0xe2>
 8012538:	2d01      	cmp	r5, #1
 801253a:	d063      	beq.n	8012604 <ucdr_serialize_endian_uint32_t+0x118>
 801253c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012540:	7033      	strb	r3, [r6, #0]
 8012542:	2f00      	cmp	r7, #0
 8012544:	d051      	beq.n	80125ea <ucdr_serialize_endian_uint32_t+0xfe>
 8012546:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801254a:	7073      	strb	r3, [r6, #1]
 801254c:	2f01      	cmp	r7, #1
 801254e:	d050      	beq.n	80125f2 <ucdr_serialize_endian_uint32_t+0x106>
 8012550:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012554:	70b3      	strb	r3, [r6, #2]
 8012556:	2f02      	cmp	r7, #2
 8012558:	d04f      	beq.n	80125fa <ucdr_serialize_endian_uint32_t+0x10e>
 801255a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801255e:	70f3      	strb	r3, [r6, #3]
 8012560:	6923      	ldr	r3, [r4, #16]
 8012562:	68a2      	ldr	r2, [r4, #8]
 8012564:	7da0      	ldrb	r0, [r4, #22]
 8012566:	3304      	adds	r3, #4
 8012568:	444a      	add	r2, r9
 801256a:	1bdb      	subs	r3, r3, r7
 801256c:	2104      	movs	r1, #4
 801256e:	f080 0001 	eor.w	r0, r0, #1
 8012572:	60a2      	str	r2, [r4, #8]
 8012574:	6123      	str	r3, [r4, #16]
 8012576:	7561      	strb	r1, [r4, #21]
 8012578:	b003      	add	sp, #12
 801257a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801257e:	2104      	movs	r1, #4
 8012580:	4620      	mov	r0, r4
 8012582:	f001 f9ed 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012586:	b1c8      	cbz	r0, 80125bc <ucdr_serialize_endian_uint32_t+0xd0>
 8012588:	2d01      	cmp	r5, #1
 801258a:	68a3      	ldr	r3, [r4, #8]
 801258c:	d01c      	beq.n	80125c8 <ucdr_serialize_endian_uint32_t+0xdc>
 801258e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012592:	701a      	strb	r2, [r3, #0]
 8012594:	68a3      	ldr	r3, [r4, #8]
 8012596:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801259a:	705a      	strb	r2, [r3, #1]
 801259c:	68a3      	ldr	r3, [r4, #8]
 801259e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125a2:	709a      	strb	r2, [r3, #2]
 80125a4:	68a3      	ldr	r3, [r4, #8]
 80125a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125aa:	70da      	strb	r2, [r3, #3]
 80125ac:	68a2      	ldr	r2, [r4, #8]
 80125ae:	6923      	ldr	r3, [r4, #16]
 80125b0:	3204      	adds	r2, #4
 80125b2:	3304      	adds	r3, #4
 80125b4:	2104      	movs	r1, #4
 80125b6:	60a2      	str	r2, [r4, #8]
 80125b8:	6123      	str	r3, [r4, #16]
 80125ba:	7561      	strb	r1, [r4, #21]
 80125bc:	7da0      	ldrb	r0, [r4, #22]
 80125be:	f080 0001 	eor.w	r0, r0, #1
 80125c2:	b003      	add	sp, #12
 80125c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125c8:	9a01      	ldr	r2, [sp, #4]
 80125ca:	601a      	str	r2, [r3, #0]
 80125cc:	e7ee      	b.n	80125ac <ucdr_serialize_endian_uint32_t+0xc0>
 80125ce:	68a2      	ldr	r2, [r4, #8]
 80125d0:	6923      	ldr	r3, [r4, #16]
 80125d2:	7da0      	ldrb	r0, [r4, #22]
 80125d4:	f884 8015 	strb.w	r8, [r4, #21]
 80125d8:	1bd2      	subs	r2, r2, r7
 80125da:	1bdb      	subs	r3, r3, r7
 80125dc:	f080 0001 	eor.w	r0, r0, #1
 80125e0:	60a2      	str	r2, [r4, #8]
 80125e2:	6123      	str	r3, [r4, #16]
 80125e4:	b003      	add	sp, #12
 80125e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125ea:	68a3      	ldr	r3, [r4, #8]
 80125ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125f0:	701a      	strb	r2, [r3, #0]
 80125f2:	68a3      	ldr	r3, [r4, #8]
 80125f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125f8:	701a      	strb	r2, [r3, #0]
 80125fa:	68a3      	ldr	r3, [r4, #8]
 80125fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012600:	701a      	strb	r2, [r3, #0]
 8012602:	e7ad      	b.n	8012560 <ucdr_serialize_endian_uint32_t+0x74>
 8012604:	ad01      	add	r5, sp, #4
 8012606:	4629      	mov	r1, r5
 8012608:	463a      	mov	r2, r7
 801260a:	4630      	mov	r0, r6
 801260c:	f008 fd7c 	bl	801b108 <memcpy>
 8012610:	68a0      	ldr	r0, [r4, #8]
 8012612:	464a      	mov	r2, r9
 8012614:	19e9      	adds	r1, r5, r7
 8012616:	f008 fd77 	bl	801b108 <memcpy>
 801261a:	e7a1      	b.n	8012560 <ucdr_serialize_endian_uint32_t+0x74>

0801261c <ucdr_deserialize_uint32_t>:
 801261c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012620:	460d      	mov	r5, r1
 8012622:	2104      	movs	r1, #4
 8012624:	4604      	mov	r4, r0
 8012626:	f001 f9ef 	bl	8013a08 <ucdr_buffer_alignment>
 801262a:	4601      	mov	r1, r0
 801262c:	4620      	mov	r0, r4
 801262e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012632:	f001 fa2d 	bl	8013a90 <ucdr_advance_buffer>
 8012636:	2104      	movs	r1, #4
 8012638:	4620      	mov	r0, r4
 801263a:	f001 f985 	bl	8013948 <ucdr_check_buffer_available_for>
 801263e:	2800      	cmp	r0, #0
 8012640:	d138      	bne.n	80126b4 <ucdr_deserialize_uint32_t+0x98>
 8012642:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012646:	42b7      	cmp	r7, r6
 8012648:	d92f      	bls.n	80126aa <ucdr_deserialize_uint32_t+0x8e>
 801264a:	6923      	ldr	r3, [r4, #16]
 801264c:	60a7      	str	r7, [r4, #8]
 801264e:	1bbf      	subs	r7, r7, r6
 8012650:	443b      	add	r3, r7
 8012652:	f1c7 0904 	rsb	r9, r7, #4
 8012656:	6123      	str	r3, [r4, #16]
 8012658:	4649      	mov	r1, r9
 801265a:	4620      	mov	r0, r4
 801265c:	f001 f980 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012660:	2800      	cmp	r0, #0
 8012662:	d046      	beq.n	80126f2 <ucdr_deserialize_uint32_t+0xd6>
 8012664:	7d23      	ldrb	r3, [r4, #20]
 8012666:	2b01      	cmp	r3, #1
 8012668:	d05c      	beq.n	8012724 <ucdr_deserialize_uint32_t+0x108>
 801266a:	78f3      	ldrb	r3, [r6, #3]
 801266c:	702b      	strb	r3, [r5, #0]
 801266e:	2f00      	cmp	r7, #0
 8012670:	d04c      	beq.n	801270c <ucdr_deserialize_uint32_t+0xf0>
 8012672:	78b3      	ldrb	r3, [r6, #2]
 8012674:	706b      	strb	r3, [r5, #1]
 8012676:	2f01      	cmp	r7, #1
 8012678:	f105 0302 	add.w	r3, r5, #2
 801267c:	d04a      	beq.n	8012714 <ucdr_deserialize_uint32_t+0xf8>
 801267e:	7873      	ldrb	r3, [r6, #1]
 8012680:	70ab      	strb	r3, [r5, #2]
 8012682:	2f02      	cmp	r7, #2
 8012684:	f105 0303 	add.w	r3, r5, #3
 8012688:	d048      	beq.n	801271c <ucdr_deserialize_uint32_t+0x100>
 801268a:	7833      	ldrb	r3, [r6, #0]
 801268c:	70eb      	strb	r3, [r5, #3]
 801268e:	6923      	ldr	r3, [r4, #16]
 8012690:	68a2      	ldr	r2, [r4, #8]
 8012692:	7da0      	ldrb	r0, [r4, #22]
 8012694:	2104      	movs	r1, #4
 8012696:	3304      	adds	r3, #4
 8012698:	444a      	add	r2, r9
 801269a:	1bdb      	subs	r3, r3, r7
 801269c:	7561      	strb	r1, [r4, #21]
 801269e:	60a2      	str	r2, [r4, #8]
 80126a0:	6123      	str	r3, [r4, #16]
 80126a2:	f080 0001 	eor.w	r0, r0, #1
 80126a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126aa:	2104      	movs	r1, #4
 80126ac:	4620      	mov	r0, r4
 80126ae:	f001 f957 	bl	8013960 <ucdr_check_final_buffer_behavior>
 80126b2:	b1b0      	cbz	r0, 80126e2 <ucdr_deserialize_uint32_t+0xc6>
 80126b4:	7d23      	ldrb	r3, [r4, #20]
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	68a3      	ldr	r3, [r4, #8]
 80126ba:	d017      	beq.n	80126ec <ucdr_deserialize_uint32_t+0xd0>
 80126bc:	78db      	ldrb	r3, [r3, #3]
 80126be:	702b      	strb	r3, [r5, #0]
 80126c0:	68a3      	ldr	r3, [r4, #8]
 80126c2:	789b      	ldrb	r3, [r3, #2]
 80126c4:	706b      	strb	r3, [r5, #1]
 80126c6:	68a3      	ldr	r3, [r4, #8]
 80126c8:	785b      	ldrb	r3, [r3, #1]
 80126ca:	70ab      	strb	r3, [r5, #2]
 80126cc:	68a3      	ldr	r3, [r4, #8]
 80126ce:	781b      	ldrb	r3, [r3, #0]
 80126d0:	70eb      	strb	r3, [r5, #3]
 80126d2:	68a2      	ldr	r2, [r4, #8]
 80126d4:	6923      	ldr	r3, [r4, #16]
 80126d6:	3204      	adds	r2, #4
 80126d8:	3304      	adds	r3, #4
 80126da:	2104      	movs	r1, #4
 80126dc:	60a2      	str	r2, [r4, #8]
 80126de:	6123      	str	r3, [r4, #16]
 80126e0:	7561      	strb	r1, [r4, #21]
 80126e2:	7da0      	ldrb	r0, [r4, #22]
 80126e4:	f080 0001 	eor.w	r0, r0, #1
 80126e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	602b      	str	r3, [r5, #0]
 80126f0:	e7ef      	b.n	80126d2 <ucdr_deserialize_uint32_t+0xb6>
 80126f2:	68a2      	ldr	r2, [r4, #8]
 80126f4:	6923      	ldr	r3, [r4, #16]
 80126f6:	7da0      	ldrb	r0, [r4, #22]
 80126f8:	f884 8015 	strb.w	r8, [r4, #21]
 80126fc:	1bd2      	subs	r2, r2, r7
 80126fe:	1bdb      	subs	r3, r3, r7
 8012700:	60a2      	str	r2, [r4, #8]
 8012702:	6123      	str	r3, [r4, #16]
 8012704:	f080 0001 	eor.w	r0, r0, #1
 8012708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801270c:	68a3      	ldr	r3, [r4, #8]
 801270e:	789b      	ldrb	r3, [r3, #2]
 8012710:	706b      	strb	r3, [r5, #1]
 8012712:	1cab      	adds	r3, r5, #2
 8012714:	68a2      	ldr	r2, [r4, #8]
 8012716:	7852      	ldrb	r2, [r2, #1]
 8012718:	f803 2b01 	strb.w	r2, [r3], #1
 801271c:	68a2      	ldr	r2, [r4, #8]
 801271e:	7812      	ldrb	r2, [r2, #0]
 8012720:	701a      	strb	r2, [r3, #0]
 8012722:	e7b4      	b.n	801268e <ucdr_deserialize_uint32_t+0x72>
 8012724:	4631      	mov	r1, r6
 8012726:	463a      	mov	r2, r7
 8012728:	4628      	mov	r0, r5
 801272a:	f008 fced 	bl	801b108 <memcpy>
 801272e:	68a1      	ldr	r1, [r4, #8]
 8012730:	464a      	mov	r2, r9
 8012732:	19e8      	adds	r0, r5, r7
 8012734:	f008 fce8 	bl	801b108 <memcpy>
 8012738:	e7a9      	b.n	801268e <ucdr_deserialize_uint32_t+0x72>
 801273a:	bf00      	nop

0801273c <ucdr_deserialize_endian_uint32_t>:
 801273c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012740:	460e      	mov	r6, r1
 8012742:	2104      	movs	r1, #4
 8012744:	4604      	mov	r4, r0
 8012746:	4615      	mov	r5, r2
 8012748:	f001 f95e 	bl	8013a08 <ucdr_buffer_alignment>
 801274c:	4601      	mov	r1, r0
 801274e:	4620      	mov	r0, r4
 8012750:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012754:	f001 f99c 	bl	8013a90 <ucdr_advance_buffer>
 8012758:	2104      	movs	r1, #4
 801275a:	4620      	mov	r0, r4
 801275c:	f001 f8f4 	bl	8013948 <ucdr_check_buffer_available_for>
 8012760:	2800      	cmp	r0, #0
 8012762:	d13c      	bne.n	80127de <ucdr_deserialize_endian_uint32_t+0xa2>
 8012764:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012768:	42bb      	cmp	r3, r7
 801276a:	d933      	bls.n	80127d4 <ucdr_deserialize_endian_uint32_t+0x98>
 801276c:	eba3 0807 	sub.w	r8, r3, r7
 8012770:	60a3      	str	r3, [r4, #8]
 8012772:	6923      	ldr	r3, [r4, #16]
 8012774:	f1c8 0a04 	rsb	sl, r8, #4
 8012778:	4443      	add	r3, r8
 801277a:	6123      	str	r3, [r4, #16]
 801277c:	4651      	mov	r1, sl
 801277e:	4620      	mov	r0, r4
 8012780:	f001 f8ee 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012784:	2800      	cmp	r0, #0
 8012786:	d048      	beq.n	801281a <ucdr_deserialize_endian_uint32_t+0xde>
 8012788:	2e01      	cmp	r6, #1
 801278a:	d061      	beq.n	8012850 <ucdr_deserialize_endian_uint32_t+0x114>
 801278c:	78fb      	ldrb	r3, [r7, #3]
 801278e:	702b      	strb	r3, [r5, #0]
 8012790:	f1b8 0f00 	cmp.w	r8, #0
 8012794:	d050      	beq.n	8012838 <ucdr_deserialize_endian_uint32_t+0xfc>
 8012796:	78bb      	ldrb	r3, [r7, #2]
 8012798:	706b      	strb	r3, [r5, #1]
 801279a:	f1b8 0f01 	cmp.w	r8, #1
 801279e:	f105 0302 	add.w	r3, r5, #2
 80127a2:	d04d      	beq.n	8012840 <ucdr_deserialize_endian_uint32_t+0x104>
 80127a4:	787b      	ldrb	r3, [r7, #1]
 80127a6:	70ab      	strb	r3, [r5, #2]
 80127a8:	f1b8 0f02 	cmp.w	r8, #2
 80127ac:	f105 0303 	add.w	r3, r5, #3
 80127b0:	d04a      	beq.n	8012848 <ucdr_deserialize_endian_uint32_t+0x10c>
 80127b2:	783b      	ldrb	r3, [r7, #0]
 80127b4:	70eb      	strb	r3, [r5, #3]
 80127b6:	6923      	ldr	r3, [r4, #16]
 80127b8:	68a2      	ldr	r2, [r4, #8]
 80127ba:	7da0      	ldrb	r0, [r4, #22]
 80127bc:	2104      	movs	r1, #4
 80127be:	3304      	adds	r3, #4
 80127c0:	4452      	add	r2, sl
 80127c2:	eba3 0308 	sub.w	r3, r3, r8
 80127c6:	7561      	strb	r1, [r4, #21]
 80127c8:	60a2      	str	r2, [r4, #8]
 80127ca:	6123      	str	r3, [r4, #16]
 80127cc:	f080 0001 	eor.w	r0, r0, #1
 80127d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127d4:	2104      	movs	r1, #4
 80127d6:	4620      	mov	r0, r4
 80127d8:	f001 f8c2 	bl	8013960 <ucdr_check_final_buffer_behavior>
 80127dc:	b1a8      	cbz	r0, 801280a <ucdr_deserialize_endian_uint32_t+0xce>
 80127de:	2e01      	cmp	r6, #1
 80127e0:	68a3      	ldr	r3, [r4, #8]
 80127e2:	d017      	beq.n	8012814 <ucdr_deserialize_endian_uint32_t+0xd8>
 80127e4:	78db      	ldrb	r3, [r3, #3]
 80127e6:	702b      	strb	r3, [r5, #0]
 80127e8:	68a3      	ldr	r3, [r4, #8]
 80127ea:	789b      	ldrb	r3, [r3, #2]
 80127ec:	706b      	strb	r3, [r5, #1]
 80127ee:	68a3      	ldr	r3, [r4, #8]
 80127f0:	785b      	ldrb	r3, [r3, #1]
 80127f2:	70ab      	strb	r3, [r5, #2]
 80127f4:	68a3      	ldr	r3, [r4, #8]
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	70eb      	strb	r3, [r5, #3]
 80127fa:	68a2      	ldr	r2, [r4, #8]
 80127fc:	6923      	ldr	r3, [r4, #16]
 80127fe:	3204      	adds	r2, #4
 8012800:	3304      	adds	r3, #4
 8012802:	2104      	movs	r1, #4
 8012804:	60a2      	str	r2, [r4, #8]
 8012806:	6123      	str	r3, [r4, #16]
 8012808:	7561      	strb	r1, [r4, #21]
 801280a:	7da0      	ldrb	r0, [r4, #22]
 801280c:	f080 0001 	eor.w	r0, r0, #1
 8012810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	602b      	str	r3, [r5, #0]
 8012818:	e7ef      	b.n	80127fa <ucdr_deserialize_endian_uint32_t+0xbe>
 801281a:	68a2      	ldr	r2, [r4, #8]
 801281c:	6923      	ldr	r3, [r4, #16]
 801281e:	7da0      	ldrb	r0, [r4, #22]
 8012820:	f884 9015 	strb.w	r9, [r4, #21]
 8012824:	eba2 0208 	sub.w	r2, r2, r8
 8012828:	eba3 0308 	sub.w	r3, r3, r8
 801282c:	60a2      	str	r2, [r4, #8]
 801282e:	6123      	str	r3, [r4, #16]
 8012830:	f080 0001 	eor.w	r0, r0, #1
 8012834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012838:	68a3      	ldr	r3, [r4, #8]
 801283a:	789b      	ldrb	r3, [r3, #2]
 801283c:	706b      	strb	r3, [r5, #1]
 801283e:	1cab      	adds	r3, r5, #2
 8012840:	68a2      	ldr	r2, [r4, #8]
 8012842:	7852      	ldrb	r2, [r2, #1]
 8012844:	f803 2b01 	strb.w	r2, [r3], #1
 8012848:	68a2      	ldr	r2, [r4, #8]
 801284a:	7812      	ldrb	r2, [r2, #0]
 801284c:	701a      	strb	r2, [r3, #0]
 801284e:	e7b2      	b.n	80127b6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8012850:	4639      	mov	r1, r7
 8012852:	4642      	mov	r2, r8
 8012854:	4628      	mov	r0, r5
 8012856:	f008 fc57 	bl	801b108 <memcpy>
 801285a:	68a1      	ldr	r1, [r4, #8]
 801285c:	4652      	mov	r2, sl
 801285e:	eb05 0008 	add.w	r0, r5, r8
 8012862:	f008 fc51 	bl	801b108 <memcpy>
 8012866:	e7a6      	b.n	80127b6 <ucdr_deserialize_endian_uint32_t+0x7a>

08012868 <ucdr_serialize_uint64_t>:
 8012868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801286c:	2108      	movs	r1, #8
 801286e:	b082      	sub	sp, #8
 8012870:	4604      	mov	r4, r0
 8012872:	e9cd 2300 	strd	r2, r3, [sp]
 8012876:	f001 f8c7 	bl	8013a08 <ucdr_buffer_alignment>
 801287a:	4601      	mov	r1, r0
 801287c:	4620      	mov	r0, r4
 801287e:	7d67      	ldrb	r7, [r4, #21]
 8012880:	f001 f906 	bl	8013a90 <ucdr_advance_buffer>
 8012884:	2108      	movs	r1, #8
 8012886:	4620      	mov	r0, r4
 8012888:	f001 f85e 	bl	8013948 <ucdr_check_buffer_available_for>
 801288c:	2800      	cmp	r0, #0
 801288e:	d14e      	bne.n	801292e <ucdr_serialize_uint64_t+0xc6>
 8012890:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012894:	42ab      	cmp	r3, r5
 8012896:	d945      	bls.n	8012924 <ucdr_serialize_uint64_t+0xbc>
 8012898:	1b5e      	subs	r6, r3, r5
 801289a:	60a3      	str	r3, [r4, #8]
 801289c:	6923      	ldr	r3, [r4, #16]
 801289e:	f1c6 0808 	rsb	r8, r6, #8
 80128a2:	4433      	add	r3, r6
 80128a4:	6123      	str	r3, [r4, #16]
 80128a6:	4641      	mov	r1, r8
 80128a8:	4620      	mov	r0, r4
 80128aa:	f001 f859 	bl	8013960 <ucdr_check_final_buffer_behavior>
 80128ae:	2800      	cmp	r0, #0
 80128b0:	d074      	beq.n	801299c <ucdr_serialize_uint64_t+0x134>
 80128b2:	7d23      	ldrb	r3, [r4, #20]
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	f000 809b 	beq.w	80129f0 <ucdr_serialize_uint64_t+0x188>
 80128ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80128be:	702b      	strb	r3, [r5, #0]
 80128c0:	2e00      	cmp	r6, #0
 80128c2:	d078      	beq.n	80129b6 <ucdr_serialize_uint64_t+0x14e>
 80128c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80128c8:	706b      	strb	r3, [r5, #1]
 80128ca:	2e01      	cmp	r6, #1
 80128cc:	d077      	beq.n	80129be <ucdr_serialize_uint64_t+0x156>
 80128ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80128d2:	70ab      	strb	r3, [r5, #2]
 80128d4:	2e02      	cmp	r6, #2
 80128d6:	d076      	beq.n	80129c6 <ucdr_serialize_uint64_t+0x15e>
 80128d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80128dc:	70eb      	strb	r3, [r5, #3]
 80128de:	2e03      	cmp	r6, #3
 80128e0:	d075      	beq.n	80129ce <ucdr_serialize_uint64_t+0x166>
 80128e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80128e6:	712b      	strb	r3, [r5, #4]
 80128e8:	2e04      	cmp	r6, #4
 80128ea:	d074      	beq.n	80129d6 <ucdr_serialize_uint64_t+0x16e>
 80128ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80128f0:	716b      	strb	r3, [r5, #5]
 80128f2:	2e05      	cmp	r6, #5
 80128f4:	d073      	beq.n	80129de <ucdr_serialize_uint64_t+0x176>
 80128f6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80128fa:	71ab      	strb	r3, [r5, #6]
 80128fc:	2e06      	cmp	r6, #6
 80128fe:	d072      	beq.n	80129e6 <ucdr_serialize_uint64_t+0x17e>
 8012900:	f89d 3000 	ldrb.w	r3, [sp]
 8012904:	71eb      	strb	r3, [r5, #7]
 8012906:	6923      	ldr	r3, [r4, #16]
 8012908:	68a2      	ldr	r2, [r4, #8]
 801290a:	7da0      	ldrb	r0, [r4, #22]
 801290c:	3308      	adds	r3, #8
 801290e:	1b9e      	subs	r6, r3, r6
 8012910:	4442      	add	r2, r8
 8012912:	2308      	movs	r3, #8
 8012914:	f080 0001 	eor.w	r0, r0, #1
 8012918:	60a2      	str	r2, [r4, #8]
 801291a:	6126      	str	r6, [r4, #16]
 801291c:	7563      	strb	r3, [r4, #21]
 801291e:	b002      	add	sp, #8
 8012920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012924:	2108      	movs	r1, #8
 8012926:	4620      	mov	r0, r4
 8012928:	f001 f81a 	bl	8013960 <ucdr_check_final_buffer_behavior>
 801292c:	b350      	cbz	r0, 8012984 <ucdr_serialize_uint64_t+0x11c>
 801292e:	7d23      	ldrb	r3, [r4, #20]
 8012930:	2b01      	cmp	r3, #1
 8012932:	d02d      	beq.n	8012990 <ucdr_serialize_uint64_t+0x128>
 8012934:	68a3      	ldr	r3, [r4, #8]
 8012936:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801293a:	701a      	strb	r2, [r3, #0]
 801293c:	68a3      	ldr	r3, [r4, #8]
 801293e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012942:	705a      	strb	r2, [r3, #1]
 8012944:	68a3      	ldr	r3, [r4, #8]
 8012946:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801294a:	709a      	strb	r2, [r3, #2]
 801294c:	68a3      	ldr	r3, [r4, #8]
 801294e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012952:	70da      	strb	r2, [r3, #3]
 8012954:	68a3      	ldr	r3, [r4, #8]
 8012956:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801295a:	711a      	strb	r2, [r3, #4]
 801295c:	68a3      	ldr	r3, [r4, #8]
 801295e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012962:	715a      	strb	r2, [r3, #5]
 8012964:	68a3      	ldr	r3, [r4, #8]
 8012966:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801296a:	719a      	strb	r2, [r3, #6]
 801296c:	68a3      	ldr	r3, [r4, #8]
 801296e:	f89d 2000 	ldrb.w	r2, [sp]
 8012972:	71da      	strb	r2, [r3, #7]
 8012974:	68a2      	ldr	r2, [r4, #8]
 8012976:	6923      	ldr	r3, [r4, #16]
 8012978:	3208      	adds	r2, #8
 801297a:	3308      	adds	r3, #8
 801297c:	2108      	movs	r1, #8
 801297e:	60a2      	str	r2, [r4, #8]
 8012980:	6123      	str	r3, [r4, #16]
 8012982:	7561      	strb	r1, [r4, #21]
 8012984:	7da0      	ldrb	r0, [r4, #22]
 8012986:	f080 0001 	eor.w	r0, r0, #1
 801298a:	b002      	add	sp, #8
 801298c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012990:	466b      	mov	r3, sp
 8012992:	cb03      	ldmia	r3!, {r0, r1}
 8012994:	68a3      	ldr	r3, [r4, #8]
 8012996:	6018      	str	r0, [r3, #0]
 8012998:	6059      	str	r1, [r3, #4]
 801299a:	e7eb      	b.n	8012974 <ucdr_serialize_uint64_t+0x10c>
 801299c:	68a2      	ldr	r2, [r4, #8]
 801299e:	6923      	ldr	r3, [r4, #16]
 80129a0:	7da0      	ldrb	r0, [r4, #22]
 80129a2:	7567      	strb	r7, [r4, #21]
 80129a4:	1b92      	subs	r2, r2, r6
 80129a6:	1b9b      	subs	r3, r3, r6
 80129a8:	f080 0001 	eor.w	r0, r0, #1
 80129ac:	60a2      	str	r2, [r4, #8]
 80129ae:	6123      	str	r3, [r4, #16]
 80129b0:	b002      	add	sp, #8
 80129b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129b6:	68a3      	ldr	r3, [r4, #8]
 80129b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80129bc:	701a      	strb	r2, [r3, #0]
 80129be:	68a3      	ldr	r3, [r4, #8]
 80129c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80129c4:	701a      	strb	r2, [r3, #0]
 80129c6:	68a3      	ldr	r3, [r4, #8]
 80129c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80129cc:	701a      	strb	r2, [r3, #0]
 80129ce:	68a3      	ldr	r3, [r4, #8]
 80129d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80129d4:	701a      	strb	r2, [r3, #0]
 80129d6:	68a3      	ldr	r3, [r4, #8]
 80129d8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80129dc:	701a      	strb	r2, [r3, #0]
 80129de:	68a3      	ldr	r3, [r4, #8]
 80129e0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80129e4:	701a      	strb	r2, [r3, #0]
 80129e6:	68a3      	ldr	r3, [r4, #8]
 80129e8:	f89d 2000 	ldrb.w	r2, [sp]
 80129ec:	701a      	strb	r2, [r3, #0]
 80129ee:	e78a      	b.n	8012906 <ucdr_serialize_uint64_t+0x9e>
 80129f0:	4628      	mov	r0, r5
 80129f2:	466d      	mov	r5, sp
 80129f4:	4629      	mov	r1, r5
 80129f6:	4632      	mov	r2, r6
 80129f8:	f008 fb86 	bl	801b108 <memcpy>
 80129fc:	68a0      	ldr	r0, [r4, #8]
 80129fe:	4642      	mov	r2, r8
 8012a00:	19a9      	adds	r1, r5, r6
 8012a02:	f008 fb81 	bl	801b108 <memcpy>
 8012a06:	e77e      	b.n	8012906 <ucdr_serialize_uint64_t+0x9e>

08012a08 <ucdr_serialize_int16_t>:
 8012a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a0c:	b082      	sub	sp, #8
 8012a0e:	460b      	mov	r3, r1
 8012a10:	2102      	movs	r1, #2
 8012a12:	4604      	mov	r4, r0
 8012a14:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012a18:	f000 fff6 	bl	8013a08 <ucdr_buffer_alignment>
 8012a1c:	4601      	mov	r1, r0
 8012a1e:	4620      	mov	r0, r4
 8012a20:	7d67      	ldrb	r7, [r4, #21]
 8012a22:	f001 f835 	bl	8013a90 <ucdr_advance_buffer>
 8012a26:	2102      	movs	r1, #2
 8012a28:	4620      	mov	r0, r4
 8012a2a:	f000 ff8d 	bl	8013948 <ucdr_check_buffer_available_for>
 8012a2e:	bb78      	cbnz	r0, 8012a90 <ucdr_serialize_int16_t+0x88>
 8012a30:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012a34:	42ab      	cmp	r3, r5
 8012a36:	d926      	bls.n	8012a86 <ucdr_serialize_int16_t+0x7e>
 8012a38:	1b5e      	subs	r6, r3, r5
 8012a3a:	60a3      	str	r3, [r4, #8]
 8012a3c:	6923      	ldr	r3, [r4, #16]
 8012a3e:	f1c6 0802 	rsb	r8, r6, #2
 8012a42:	4433      	add	r3, r6
 8012a44:	6123      	str	r3, [r4, #16]
 8012a46:	4641      	mov	r1, r8
 8012a48:	4620      	mov	r0, r4
 8012a4a:	f000 ff89 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012a4e:	2800      	cmp	r0, #0
 8012a50:	d03b      	beq.n	8012aca <ucdr_serialize_int16_t+0xc2>
 8012a52:	7d23      	ldrb	r3, [r4, #20]
 8012a54:	2b01      	cmp	r3, #1
 8012a56:	d04a      	beq.n	8012aee <ucdr_serialize_int16_t+0xe6>
 8012a58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012a5c:	702b      	strb	r3, [r5, #0]
 8012a5e:	2e00      	cmp	r6, #0
 8012a60:	d040      	beq.n	8012ae4 <ucdr_serialize_int16_t+0xdc>
 8012a62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012a66:	706b      	strb	r3, [r5, #1]
 8012a68:	6923      	ldr	r3, [r4, #16]
 8012a6a:	68a2      	ldr	r2, [r4, #8]
 8012a6c:	7da0      	ldrb	r0, [r4, #22]
 8012a6e:	3302      	adds	r3, #2
 8012a70:	1b9e      	subs	r6, r3, r6
 8012a72:	4442      	add	r2, r8
 8012a74:	2302      	movs	r3, #2
 8012a76:	f080 0001 	eor.w	r0, r0, #1
 8012a7a:	60a2      	str	r2, [r4, #8]
 8012a7c:	6126      	str	r6, [r4, #16]
 8012a7e:	7563      	strb	r3, [r4, #21]
 8012a80:	b002      	add	sp, #8
 8012a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a86:	2102      	movs	r1, #2
 8012a88:	4620      	mov	r0, r4
 8012a8a:	f000 ff69 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012a8e:	b190      	cbz	r0, 8012ab6 <ucdr_serialize_int16_t+0xae>
 8012a90:	7d23      	ldrb	r3, [r4, #20]
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	68a3      	ldr	r3, [r4, #8]
 8012a96:	d014      	beq.n	8012ac2 <ucdr_serialize_int16_t+0xba>
 8012a98:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012a9c:	701a      	strb	r2, [r3, #0]
 8012a9e:	68a3      	ldr	r3, [r4, #8]
 8012aa0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012aa4:	705a      	strb	r2, [r3, #1]
 8012aa6:	68a2      	ldr	r2, [r4, #8]
 8012aa8:	6923      	ldr	r3, [r4, #16]
 8012aaa:	3202      	adds	r2, #2
 8012aac:	3302      	adds	r3, #2
 8012aae:	2102      	movs	r1, #2
 8012ab0:	60a2      	str	r2, [r4, #8]
 8012ab2:	6123      	str	r3, [r4, #16]
 8012ab4:	7561      	strb	r1, [r4, #21]
 8012ab6:	7da0      	ldrb	r0, [r4, #22]
 8012ab8:	f080 0001 	eor.w	r0, r0, #1
 8012abc:	b002      	add	sp, #8
 8012abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ac2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012ac6:	801a      	strh	r2, [r3, #0]
 8012ac8:	e7ed      	b.n	8012aa6 <ucdr_serialize_int16_t+0x9e>
 8012aca:	68a2      	ldr	r2, [r4, #8]
 8012acc:	6923      	ldr	r3, [r4, #16]
 8012ace:	7da0      	ldrb	r0, [r4, #22]
 8012ad0:	7567      	strb	r7, [r4, #21]
 8012ad2:	1b92      	subs	r2, r2, r6
 8012ad4:	1b9b      	subs	r3, r3, r6
 8012ad6:	f080 0001 	eor.w	r0, r0, #1
 8012ada:	60a2      	str	r2, [r4, #8]
 8012adc:	6123      	str	r3, [r4, #16]
 8012ade:	b002      	add	sp, #8
 8012ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ae4:	68a3      	ldr	r3, [r4, #8]
 8012ae6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012aea:	701a      	strb	r2, [r3, #0]
 8012aec:	e7bc      	b.n	8012a68 <ucdr_serialize_int16_t+0x60>
 8012aee:	4628      	mov	r0, r5
 8012af0:	f10d 0506 	add.w	r5, sp, #6
 8012af4:	4629      	mov	r1, r5
 8012af6:	4632      	mov	r2, r6
 8012af8:	f008 fb06 	bl	801b108 <memcpy>
 8012afc:	68a0      	ldr	r0, [r4, #8]
 8012afe:	4642      	mov	r2, r8
 8012b00:	19a9      	adds	r1, r5, r6
 8012b02:	f008 fb01 	bl	801b108 <memcpy>
 8012b06:	e7af      	b.n	8012a68 <ucdr_serialize_int16_t+0x60>

08012b08 <ucdr_deserialize_int16_t>:
 8012b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b0c:	460d      	mov	r5, r1
 8012b0e:	2102      	movs	r1, #2
 8012b10:	4604      	mov	r4, r0
 8012b12:	f000 ff79 	bl	8013a08 <ucdr_buffer_alignment>
 8012b16:	4601      	mov	r1, r0
 8012b18:	4620      	mov	r0, r4
 8012b1a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012b1e:	f000 ffb7 	bl	8013a90 <ucdr_advance_buffer>
 8012b22:	2102      	movs	r1, #2
 8012b24:	4620      	mov	r0, r4
 8012b26:	f000 ff0f 	bl	8013948 <ucdr_check_buffer_available_for>
 8012b2a:	bb60      	cbnz	r0, 8012b86 <ucdr_deserialize_int16_t+0x7e>
 8012b2c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012b30:	42be      	cmp	r6, r7
 8012b32:	d923      	bls.n	8012b7c <ucdr_deserialize_int16_t+0x74>
 8012b34:	6923      	ldr	r3, [r4, #16]
 8012b36:	60a6      	str	r6, [r4, #8]
 8012b38:	1bf6      	subs	r6, r6, r7
 8012b3a:	4433      	add	r3, r6
 8012b3c:	f1c6 0902 	rsb	r9, r6, #2
 8012b40:	6123      	str	r3, [r4, #16]
 8012b42:	4649      	mov	r1, r9
 8012b44:	4620      	mov	r0, r4
 8012b46:	f000 ff0b 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012b4a:	2800      	cmp	r0, #0
 8012b4c:	d034      	beq.n	8012bb8 <ucdr_deserialize_int16_t+0xb0>
 8012b4e:	7d23      	ldrb	r3, [r4, #20]
 8012b50:	2b01      	cmp	r3, #1
 8012b52:	d042      	beq.n	8012bda <ucdr_deserialize_int16_t+0xd2>
 8012b54:	787b      	ldrb	r3, [r7, #1]
 8012b56:	702b      	strb	r3, [r5, #0]
 8012b58:	2e00      	cmp	r6, #0
 8012b5a:	d03a      	beq.n	8012bd2 <ucdr_deserialize_int16_t+0xca>
 8012b5c:	783b      	ldrb	r3, [r7, #0]
 8012b5e:	706b      	strb	r3, [r5, #1]
 8012b60:	6923      	ldr	r3, [r4, #16]
 8012b62:	68a2      	ldr	r2, [r4, #8]
 8012b64:	7da0      	ldrb	r0, [r4, #22]
 8012b66:	2102      	movs	r1, #2
 8012b68:	3302      	adds	r3, #2
 8012b6a:	444a      	add	r2, r9
 8012b6c:	1b9b      	subs	r3, r3, r6
 8012b6e:	7561      	strb	r1, [r4, #21]
 8012b70:	60a2      	str	r2, [r4, #8]
 8012b72:	6123      	str	r3, [r4, #16]
 8012b74:	f080 0001 	eor.w	r0, r0, #1
 8012b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b7c:	2102      	movs	r1, #2
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f000 feee 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012b84:	b180      	cbz	r0, 8012ba8 <ucdr_deserialize_int16_t+0xa0>
 8012b86:	7d23      	ldrb	r3, [r4, #20]
 8012b88:	2b01      	cmp	r3, #1
 8012b8a:	68a3      	ldr	r3, [r4, #8]
 8012b8c:	d011      	beq.n	8012bb2 <ucdr_deserialize_int16_t+0xaa>
 8012b8e:	785b      	ldrb	r3, [r3, #1]
 8012b90:	702b      	strb	r3, [r5, #0]
 8012b92:	68a3      	ldr	r3, [r4, #8]
 8012b94:	781b      	ldrb	r3, [r3, #0]
 8012b96:	706b      	strb	r3, [r5, #1]
 8012b98:	68a2      	ldr	r2, [r4, #8]
 8012b9a:	6923      	ldr	r3, [r4, #16]
 8012b9c:	3202      	adds	r2, #2
 8012b9e:	3302      	adds	r3, #2
 8012ba0:	2102      	movs	r1, #2
 8012ba2:	60a2      	str	r2, [r4, #8]
 8012ba4:	6123      	str	r3, [r4, #16]
 8012ba6:	7561      	strb	r1, [r4, #21]
 8012ba8:	7da0      	ldrb	r0, [r4, #22]
 8012baa:	f080 0001 	eor.w	r0, r0, #1
 8012bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bb2:	881b      	ldrh	r3, [r3, #0]
 8012bb4:	802b      	strh	r3, [r5, #0]
 8012bb6:	e7ef      	b.n	8012b98 <ucdr_deserialize_int16_t+0x90>
 8012bb8:	68a2      	ldr	r2, [r4, #8]
 8012bba:	6923      	ldr	r3, [r4, #16]
 8012bbc:	7da0      	ldrb	r0, [r4, #22]
 8012bbe:	f884 8015 	strb.w	r8, [r4, #21]
 8012bc2:	1b92      	subs	r2, r2, r6
 8012bc4:	1b9b      	subs	r3, r3, r6
 8012bc6:	60a2      	str	r2, [r4, #8]
 8012bc8:	6123      	str	r3, [r4, #16]
 8012bca:	f080 0001 	eor.w	r0, r0, #1
 8012bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bd2:	68a3      	ldr	r3, [r4, #8]
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	706b      	strb	r3, [r5, #1]
 8012bd8:	e7c2      	b.n	8012b60 <ucdr_deserialize_int16_t+0x58>
 8012bda:	4639      	mov	r1, r7
 8012bdc:	4632      	mov	r2, r6
 8012bde:	4628      	mov	r0, r5
 8012be0:	f008 fa92 	bl	801b108 <memcpy>
 8012be4:	68a1      	ldr	r1, [r4, #8]
 8012be6:	464a      	mov	r2, r9
 8012be8:	19a8      	adds	r0, r5, r6
 8012bea:	f008 fa8d 	bl	801b108 <memcpy>
 8012bee:	e7b7      	b.n	8012b60 <ucdr_deserialize_int16_t+0x58>

08012bf0 <ucdr_serialize_int32_t>:
 8012bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf4:	b082      	sub	sp, #8
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	9101      	str	r1, [sp, #4]
 8012bfa:	2104      	movs	r1, #4
 8012bfc:	f000 ff04 	bl	8013a08 <ucdr_buffer_alignment>
 8012c00:	4601      	mov	r1, r0
 8012c02:	4620      	mov	r0, r4
 8012c04:	7d67      	ldrb	r7, [r4, #21]
 8012c06:	f000 ff43 	bl	8013a90 <ucdr_advance_buffer>
 8012c0a:	2104      	movs	r1, #4
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	f000 fe9b 	bl	8013948 <ucdr_check_buffer_available_for>
 8012c12:	2800      	cmp	r0, #0
 8012c14:	d139      	bne.n	8012c8a <ucdr_serialize_int32_t+0x9a>
 8012c16:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012c1a:	42ab      	cmp	r3, r5
 8012c1c:	d930      	bls.n	8012c80 <ucdr_serialize_int32_t+0x90>
 8012c1e:	1b5e      	subs	r6, r3, r5
 8012c20:	60a3      	str	r3, [r4, #8]
 8012c22:	6923      	ldr	r3, [r4, #16]
 8012c24:	f1c6 0804 	rsb	r8, r6, #4
 8012c28:	4433      	add	r3, r6
 8012c2a:	6123      	str	r3, [r4, #16]
 8012c2c:	4641      	mov	r1, r8
 8012c2e:	4620      	mov	r0, r4
 8012c30:	f000 fe96 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012c34:	2800      	cmp	r0, #0
 8012c36:	d04c      	beq.n	8012cd2 <ucdr_serialize_int32_t+0xe2>
 8012c38:	7d23      	ldrb	r3, [r4, #20]
 8012c3a:	2b01      	cmp	r3, #1
 8012c3c:	d063      	beq.n	8012d06 <ucdr_serialize_int32_t+0x116>
 8012c3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c42:	702b      	strb	r3, [r5, #0]
 8012c44:	2e00      	cmp	r6, #0
 8012c46:	d051      	beq.n	8012cec <ucdr_serialize_int32_t+0xfc>
 8012c48:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012c4c:	706b      	strb	r3, [r5, #1]
 8012c4e:	2e01      	cmp	r6, #1
 8012c50:	d050      	beq.n	8012cf4 <ucdr_serialize_int32_t+0x104>
 8012c52:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012c56:	70ab      	strb	r3, [r5, #2]
 8012c58:	2e02      	cmp	r6, #2
 8012c5a:	d04f      	beq.n	8012cfc <ucdr_serialize_int32_t+0x10c>
 8012c5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012c60:	70eb      	strb	r3, [r5, #3]
 8012c62:	6923      	ldr	r3, [r4, #16]
 8012c64:	68a2      	ldr	r2, [r4, #8]
 8012c66:	7da0      	ldrb	r0, [r4, #22]
 8012c68:	3304      	adds	r3, #4
 8012c6a:	1b9e      	subs	r6, r3, r6
 8012c6c:	4442      	add	r2, r8
 8012c6e:	2304      	movs	r3, #4
 8012c70:	f080 0001 	eor.w	r0, r0, #1
 8012c74:	60a2      	str	r2, [r4, #8]
 8012c76:	6126      	str	r6, [r4, #16]
 8012c78:	7563      	strb	r3, [r4, #21]
 8012c7a:	b002      	add	sp, #8
 8012c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c80:	2104      	movs	r1, #4
 8012c82:	4620      	mov	r0, r4
 8012c84:	f000 fe6c 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012c88:	b1d0      	cbz	r0, 8012cc0 <ucdr_serialize_int32_t+0xd0>
 8012c8a:	7d23      	ldrb	r3, [r4, #20]
 8012c8c:	2b01      	cmp	r3, #1
 8012c8e:	68a3      	ldr	r3, [r4, #8]
 8012c90:	d01c      	beq.n	8012ccc <ucdr_serialize_int32_t+0xdc>
 8012c92:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012c96:	701a      	strb	r2, [r3, #0]
 8012c98:	68a3      	ldr	r3, [r4, #8]
 8012c9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012c9e:	705a      	strb	r2, [r3, #1]
 8012ca0:	68a3      	ldr	r3, [r4, #8]
 8012ca2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012ca6:	709a      	strb	r2, [r3, #2]
 8012ca8:	68a3      	ldr	r3, [r4, #8]
 8012caa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012cae:	70da      	strb	r2, [r3, #3]
 8012cb0:	68a2      	ldr	r2, [r4, #8]
 8012cb2:	6923      	ldr	r3, [r4, #16]
 8012cb4:	3204      	adds	r2, #4
 8012cb6:	3304      	adds	r3, #4
 8012cb8:	2104      	movs	r1, #4
 8012cba:	60a2      	str	r2, [r4, #8]
 8012cbc:	6123      	str	r3, [r4, #16]
 8012cbe:	7561      	strb	r1, [r4, #21]
 8012cc0:	7da0      	ldrb	r0, [r4, #22]
 8012cc2:	f080 0001 	eor.w	r0, r0, #1
 8012cc6:	b002      	add	sp, #8
 8012cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ccc:	9a01      	ldr	r2, [sp, #4]
 8012cce:	601a      	str	r2, [r3, #0]
 8012cd0:	e7ee      	b.n	8012cb0 <ucdr_serialize_int32_t+0xc0>
 8012cd2:	68a2      	ldr	r2, [r4, #8]
 8012cd4:	6923      	ldr	r3, [r4, #16]
 8012cd6:	7da0      	ldrb	r0, [r4, #22]
 8012cd8:	7567      	strb	r7, [r4, #21]
 8012cda:	1b92      	subs	r2, r2, r6
 8012cdc:	1b9b      	subs	r3, r3, r6
 8012cde:	f080 0001 	eor.w	r0, r0, #1
 8012ce2:	60a2      	str	r2, [r4, #8]
 8012ce4:	6123      	str	r3, [r4, #16]
 8012ce6:	b002      	add	sp, #8
 8012ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cec:	68a3      	ldr	r3, [r4, #8]
 8012cee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012cf2:	701a      	strb	r2, [r3, #0]
 8012cf4:	68a3      	ldr	r3, [r4, #8]
 8012cf6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012cfa:	701a      	strb	r2, [r3, #0]
 8012cfc:	68a3      	ldr	r3, [r4, #8]
 8012cfe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012d02:	701a      	strb	r2, [r3, #0]
 8012d04:	e7ad      	b.n	8012c62 <ucdr_serialize_int32_t+0x72>
 8012d06:	4628      	mov	r0, r5
 8012d08:	ad01      	add	r5, sp, #4
 8012d0a:	4629      	mov	r1, r5
 8012d0c:	4632      	mov	r2, r6
 8012d0e:	f008 f9fb 	bl	801b108 <memcpy>
 8012d12:	68a0      	ldr	r0, [r4, #8]
 8012d14:	4642      	mov	r2, r8
 8012d16:	19a9      	adds	r1, r5, r6
 8012d18:	f008 f9f6 	bl	801b108 <memcpy>
 8012d1c:	e7a1      	b.n	8012c62 <ucdr_serialize_int32_t+0x72>
 8012d1e:	bf00      	nop

08012d20 <ucdr_deserialize_int32_t>:
 8012d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d24:	460d      	mov	r5, r1
 8012d26:	2104      	movs	r1, #4
 8012d28:	4604      	mov	r4, r0
 8012d2a:	f000 fe6d 	bl	8013a08 <ucdr_buffer_alignment>
 8012d2e:	4601      	mov	r1, r0
 8012d30:	4620      	mov	r0, r4
 8012d32:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012d36:	f000 feab 	bl	8013a90 <ucdr_advance_buffer>
 8012d3a:	2104      	movs	r1, #4
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	f000 fe03 	bl	8013948 <ucdr_check_buffer_available_for>
 8012d42:	2800      	cmp	r0, #0
 8012d44:	d138      	bne.n	8012db8 <ucdr_deserialize_int32_t+0x98>
 8012d46:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012d4a:	42b7      	cmp	r7, r6
 8012d4c:	d92f      	bls.n	8012dae <ucdr_deserialize_int32_t+0x8e>
 8012d4e:	6923      	ldr	r3, [r4, #16]
 8012d50:	60a7      	str	r7, [r4, #8]
 8012d52:	1bbf      	subs	r7, r7, r6
 8012d54:	443b      	add	r3, r7
 8012d56:	f1c7 0904 	rsb	r9, r7, #4
 8012d5a:	6123      	str	r3, [r4, #16]
 8012d5c:	4649      	mov	r1, r9
 8012d5e:	4620      	mov	r0, r4
 8012d60:	f000 fdfe 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	d046      	beq.n	8012df6 <ucdr_deserialize_int32_t+0xd6>
 8012d68:	7d23      	ldrb	r3, [r4, #20]
 8012d6a:	2b01      	cmp	r3, #1
 8012d6c:	d05c      	beq.n	8012e28 <ucdr_deserialize_int32_t+0x108>
 8012d6e:	78f3      	ldrb	r3, [r6, #3]
 8012d70:	702b      	strb	r3, [r5, #0]
 8012d72:	2f00      	cmp	r7, #0
 8012d74:	d04c      	beq.n	8012e10 <ucdr_deserialize_int32_t+0xf0>
 8012d76:	78b3      	ldrb	r3, [r6, #2]
 8012d78:	706b      	strb	r3, [r5, #1]
 8012d7a:	2f01      	cmp	r7, #1
 8012d7c:	f105 0302 	add.w	r3, r5, #2
 8012d80:	d04a      	beq.n	8012e18 <ucdr_deserialize_int32_t+0xf8>
 8012d82:	7873      	ldrb	r3, [r6, #1]
 8012d84:	70ab      	strb	r3, [r5, #2]
 8012d86:	2f02      	cmp	r7, #2
 8012d88:	f105 0303 	add.w	r3, r5, #3
 8012d8c:	d048      	beq.n	8012e20 <ucdr_deserialize_int32_t+0x100>
 8012d8e:	7833      	ldrb	r3, [r6, #0]
 8012d90:	70eb      	strb	r3, [r5, #3]
 8012d92:	6923      	ldr	r3, [r4, #16]
 8012d94:	68a2      	ldr	r2, [r4, #8]
 8012d96:	7da0      	ldrb	r0, [r4, #22]
 8012d98:	2104      	movs	r1, #4
 8012d9a:	3304      	adds	r3, #4
 8012d9c:	444a      	add	r2, r9
 8012d9e:	1bdb      	subs	r3, r3, r7
 8012da0:	7561      	strb	r1, [r4, #21]
 8012da2:	60a2      	str	r2, [r4, #8]
 8012da4:	6123      	str	r3, [r4, #16]
 8012da6:	f080 0001 	eor.w	r0, r0, #1
 8012daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dae:	2104      	movs	r1, #4
 8012db0:	4620      	mov	r0, r4
 8012db2:	f000 fdd5 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012db6:	b1b0      	cbz	r0, 8012de6 <ucdr_deserialize_int32_t+0xc6>
 8012db8:	7d23      	ldrb	r3, [r4, #20]
 8012dba:	2b01      	cmp	r3, #1
 8012dbc:	68a3      	ldr	r3, [r4, #8]
 8012dbe:	d017      	beq.n	8012df0 <ucdr_deserialize_int32_t+0xd0>
 8012dc0:	78db      	ldrb	r3, [r3, #3]
 8012dc2:	702b      	strb	r3, [r5, #0]
 8012dc4:	68a3      	ldr	r3, [r4, #8]
 8012dc6:	789b      	ldrb	r3, [r3, #2]
 8012dc8:	706b      	strb	r3, [r5, #1]
 8012dca:	68a3      	ldr	r3, [r4, #8]
 8012dcc:	785b      	ldrb	r3, [r3, #1]
 8012dce:	70ab      	strb	r3, [r5, #2]
 8012dd0:	68a3      	ldr	r3, [r4, #8]
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	70eb      	strb	r3, [r5, #3]
 8012dd6:	68a2      	ldr	r2, [r4, #8]
 8012dd8:	6923      	ldr	r3, [r4, #16]
 8012dda:	3204      	adds	r2, #4
 8012ddc:	3304      	adds	r3, #4
 8012dde:	2104      	movs	r1, #4
 8012de0:	60a2      	str	r2, [r4, #8]
 8012de2:	6123      	str	r3, [r4, #16]
 8012de4:	7561      	strb	r1, [r4, #21]
 8012de6:	7da0      	ldrb	r0, [r4, #22]
 8012de8:	f080 0001 	eor.w	r0, r0, #1
 8012dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	602b      	str	r3, [r5, #0]
 8012df4:	e7ef      	b.n	8012dd6 <ucdr_deserialize_int32_t+0xb6>
 8012df6:	68a2      	ldr	r2, [r4, #8]
 8012df8:	6923      	ldr	r3, [r4, #16]
 8012dfa:	7da0      	ldrb	r0, [r4, #22]
 8012dfc:	f884 8015 	strb.w	r8, [r4, #21]
 8012e00:	1bd2      	subs	r2, r2, r7
 8012e02:	1bdb      	subs	r3, r3, r7
 8012e04:	60a2      	str	r2, [r4, #8]
 8012e06:	6123      	str	r3, [r4, #16]
 8012e08:	f080 0001 	eor.w	r0, r0, #1
 8012e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e10:	68a3      	ldr	r3, [r4, #8]
 8012e12:	789b      	ldrb	r3, [r3, #2]
 8012e14:	706b      	strb	r3, [r5, #1]
 8012e16:	1cab      	adds	r3, r5, #2
 8012e18:	68a2      	ldr	r2, [r4, #8]
 8012e1a:	7852      	ldrb	r2, [r2, #1]
 8012e1c:	f803 2b01 	strb.w	r2, [r3], #1
 8012e20:	68a2      	ldr	r2, [r4, #8]
 8012e22:	7812      	ldrb	r2, [r2, #0]
 8012e24:	701a      	strb	r2, [r3, #0]
 8012e26:	e7b4      	b.n	8012d92 <ucdr_deserialize_int32_t+0x72>
 8012e28:	4631      	mov	r1, r6
 8012e2a:	463a      	mov	r2, r7
 8012e2c:	4628      	mov	r0, r5
 8012e2e:	f008 f96b 	bl	801b108 <memcpy>
 8012e32:	68a1      	ldr	r1, [r4, #8]
 8012e34:	464a      	mov	r2, r9
 8012e36:	19e8      	adds	r0, r5, r7
 8012e38:	f008 f966 	bl	801b108 <memcpy>
 8012e3c:	e7a9      	b.n	8012d92 <ucdr_deserialize_int32_t+0x72>
 8012e3e:	bf00      	nop

08012e40 <ucdr_serialize_int64_t>:
 8012e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e44:	2108      	movs	r1, #8
 8012e46:	b082      	sub	sp, #8
 8012e48:	4604      	mov	r4, r0
 8012e4a:	e9cd 2300 	strd	r2, r3, [sp]
 8012e4e:	f000 fddb 	bl	8013a08 <ucdr_buffer_alignment>
 8012e52:	4601      	mov	r1, r0
 8012e54:	4620      	mov	r0, r4
 8012e56:	7d67      	ldrb	r7, [r4, #21]
 8012e58:	f000 fe1a 	bl	8013a90 <ucdr_advance_buffer>
 8012e5c:	2108      	movs	r1, #8
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f000 fd72 	bl	8013948 <ucdr_check_buffer_available_for>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	d14e      	bne.n	8012f06 <ucdr_serialize_int64_t+0xc6>
 8012e68:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012e6c:	42ab      	cmp	r3, r5
 8012e6e:	d945      	bls.n	8012efc <ucdr_serialize_int64_t+0xbc>
 8012e70:	1b5e      	subs	r6, r3, r5
 8012e72:	60a3      	str	r3, [r4, #8]
 8012e74:	6923      	ldr	r3, [r4, #16]
 8012e76:	f1c6 0808 	rsb	r8, r6, #8
 8012e7a:	4433      	add	r3, r6
 8012e7c:	6123      	str	r3, [r4, #16]
 8012e7e:	4641      	mov	r1, r8
 8012e80:	4620      	mov	r0, r4
 8012e82:	f000 fd6d 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012e86:	2800      	cmp	r0, #0
 8012e88:	d074      	beq.n	8012f74 <ucdr_serialize_int64_t+0x134>
 8012e8a:	7d23      	ldrb	r3, [r4, #20]
 8012e8c:	2b01      	cmp	r3, #1
 8012e8e:	f000 809b 	beq.w	8012fc8 <ucdr_serialize_int64_t+0x188>
 8012e92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012e96:	702b      	strb	r3, [r5, #0]
 8012e98:	2e00      	cmp	r6, #0
 8012e9a:	d078      	beq.n	8012f8e <ucdr_serialize_int64_t+0x14e>
 8012e9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012ea0:	706b      	strb	r3, [r5, #1]
 8012ea2:	2e01      	cmp	r6, #1
 8012ea4:	d077      	beq.n	8012f96 <ucdr_serialize_int64_t+0x156>
 8012ea6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012eaa:	70ab      	strb	r3, [r5, #2]
 8012eac:	2e02      	cmp	r6, #2
 8012eae:	d076      	beq.n	8012f9e <ucdr_serialize_int64_t+0x15e>
 8012eb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012eb4:	70eb      	strb	r3, [r5, #3]
 8012eb6:	2e03      	cmp	r6, #3
 8012eb8:	d075      	beq.n	8012fa6 <ucdr_serialize_int64_t+0x166>
 8012eba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012ebe:	712b      	strb	r3, [r5, #4]
 8012ec0:	2e04      	cmp	r6, #4
 8012ec2:	d074      	beq.n	8012fae <ucdr_serialize_int64_t+0x16e>
 8012ec4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012ec8:	716b      	strb	r3, [r5, #5]
 8012eca:	2e05      	cmp	r6, #5
 8012ecc:	d073      	beq.n	8012fb6 <ucdr_serialize_int64_t+0x176>
 8012ece:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012ed2:	71ab      	strb	r3, [r5, #6]
 8012ed4:	2e06      	cmp	r6, #6
 8012ed6:	d072      	beq.n	8012fbe <ucdr_serialize_int64_t+0x17e>
 8012ed8:	f89d 3000 	ldrb.w	r3, [sp]
 8012edc:	71eb      	strb	r3, [r5, #7]
 8012ede:	6923      	ldr	r3, [r4, #16]
 8012ee0:	68a2      	ldr	r2, [r4, #8]
 8012ee2:	7da0      	ldrb	r0, [r4, #22]
 8012ee4:	3308      	adds	r3, #8
 8012ee6:	1b9e      	subs	r6, r3, r6
 8012ee8:	4442      	add	r2, r8
 8012eea:	2308      	movs	r3, #8
 8012eec:	f080 0001 	eor.w	r0, r0, #1
 8012ef0:	60a2      	str	r2, [r4, #8]
 8012ef2:	6126      	str	r6, [r4, #16]
 8012ef4:	7563      	strb	r3, [r4, #21]
 8012ef6:	b002      	add	sp, #8
 8012ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012efc:	2108      	movs	r1, #8
 8012efe:	4620      	mov	r0, r4
 8012f00:	f000 fd2e 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8012f04:	b350      	cbz	r0, 8012f5c <ucdr_serialize_int64_t+0x11c>
 8012f06:	7d23      	ldrb	r3, [r4, #20]
 8012f08:	2b01      	cmp	r3, #1
 8012f0a:	d02d      	beq.n	8012f68 <ucdr_serialize_int64_t+0x128>
 8012f0c:	68a3      	ldr	r3, [r4, #8]
 8012f0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012f12:	701a      	strb	r2, [r3, #0]
 8012f14:	68a3      	ldr	r3, [r4, #8]
 8012f16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012f1a:	705a      	strb	r2, [r3, #1]
 8012f1c:	68a3      	ldr	r3, [r4, #8]
 8012f1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012f22:	709a      	strb	r2, [r3, #2]
 8012f24:	68a3      	ldr	r3, [r4, #8]
 8012f26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012f2a:	70da      	strb	r2, [r3, #3]
 8012f2c:	68a3      	ldr	r3, [r4, #8]
 8012f2e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012f32:	711a      	strb	r2, [r3, #4]
 8012f34:	68a3      	ldr	r3, [r4, #8]
 8012f36:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012f3a:	715a      	strb	r2, [r3, #5]
 8012f3c:	68a3      	ldr	r3, [r4, #8]
 8012f3e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012f42:	719a      	strb	r2, [r3, #6]
 8012f44:	68a3      	ldr	r3, [r4, #8]
 8012f46:	f89d 2000 	ldrb.w	r2, [sp]
 8012f4a:	71da      	strb	r2, [r3, #7]
 8012f4c:	68a2      	ldr	r2, [r4, #8]
 8012f4e:	6923      	ldr	r3, [r4, #16]
 8012f50:	3208      	adds	r2, #8
 8012f52:	3308      	adds	r3, #8
 8012f54:	2108      	movs	r1, #8
 8012f56:	60a2      	str	r2, [r4, #8]
 8012f58:	6123      	str	r3, [r4, #16]
 8012f5a:	7561      	strb	r1, [r4, #21]
 8012f5c:	7da0      	ldrb	r0, [r4, #22]
 8012f5e:	f080 0001 	eor.w	r0, r0, #1
 8012f62:	b002      	add	sp, #8
 8012f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f68:	466b      	mov	r3, sp
 8012f6a:	cb03      	ldmia	r3!, {r0, r1}
 8012f6c:	68a3      	ldr	r3, [r4, #8]
 8012f6e:	6018      	str	r0, [r3, #0]
 8012f70:	6059      	str	r1, [r3, #4]
 8012f72:	e7eb      	b.n	8012f4c <ucdr_serialize_int64_t+0x10c>
 8012f74:	68a2      	ldr	r2, [r4, #8]
 8012f76:	6923      	ldr	r3, [r4, #16]
 8012f78:	7da0      	ldrb	r0, [r4, #22]
 8012f7a:	7567      	strb	r7, [r4, #21]
 8012f7c:	1b92      	subs	r2, r2, r6
 8012f7e:	1b9b      	subs	r3, r3, r6
 8012f80:	f080 0001 	eor.w	r0, r0, #1
 8012f84:	60a2      	str	r2, [r4, #8]
 8012f86:	6123      	str	r3, [r4, #16]
 8012f88:	b002      	add	sp, #8
 8012f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f8e:	68a3      	ldr	r3, [r4, #8]
 8012f90:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012f94:	701a      	strb	r2, [r3, #0]
 8012f96:	68a3      	ldr	r3, [r4, #8]
 8012f98:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012f9c:	701a      	strb	r2, [r3, #0]
 8012f9e:	68a3      	ldr	r3, [r4, #8]
 8012fa0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012fa4:	701a      	strb	r2, [r3, #0]
 8012fa6:	68a3      	ldr	r3, [r4, #8]
 8012fa8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012fac:	701a      	strb	r2, [r3, #0]
 8012fae:	68a3      	ldr	r3, [r4, #8]
 8012fb0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012fb4:	701a      	strb	r2, [r3, #0]
 8012fb6:	68a3      	ldr	r3, [r4, #8]
 8012fb8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012fbc:	701a      	strb	r2, [r3, #0]
 8012fbe:	68a3      	ldr	r3, [r4, #8]
 8012fc0:	f89d 2000 	ldrb.w	r2, [sp]
 8012fc4:	701a      	strb	r2, [r3, #0]
 8012fc6:	e78a      	b.n	8012ede <ucdr_serialize_int64_t+0x9e>
 8012fc8:	4628      	mov	r0, r5
 8012fca:	466d      	mov	r5, sp
 8012fcc:	4629      	mov	r1, r5
 8012fce:	4632      	mov	r2, r6
 8012fd0:	f008 f89a 	bl	801b108 <memcpy>
 8012fd4:	68a0      	ldr	r0, [r4, #8]
 8012fd6:	4642      	mov	r2, r8
 8012fd8:	19a9      	adds	r1, r5, r6
 8012fda:	f008 f895 	bl	801b108 <memcpy>
 8012fde:	e77e      	b.n	8012ede <ucdr_serialize_int64_t+0x9e>

08012fe0 <ucdr_deserialize_int64_t>:
 8012fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fe4:	460d      	mov	r5, r1
 8012fe6:	2108      	movs	r1, #8
 8012fe8:	4604      	mov	r4, r0
 8012fea:	f000 fd0d 	bl	8013a08 <ucdr_buffer_alignment>
 8012fee:	4601      	mov	r1, r0
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012ff6:	f000 fd4b 	bl	8013a90 <ucdr_advance_buffer>
 8012ffa:	2108      	movs	r1, #8
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	f000 fca3 	bl	8013948 <ucdr_check_buffer_available_for>
 8013002:	2800      	cmp	r0, #0
 8013004:	d151      	bne.n	80130aa <ucdr_deserialize_int64_t+0xca>
 8013006:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801300a:	42be      	cmp	r6, r7
 801300c:	d948      	bls.n	80130a0 <ucdr_deserialize_int64_t+0xc0>
 801300e:	6923      	ldr	r3, [r4, #16]
 8013010:	60a6      	str	r6, [r4, #8]
 8013012:	1bf6      	subs	r6, r6, r7
 8013014:	4433      	add	r3, r6
 8013016:	f1c6 0808 	rsb	r8, r6, #8
 801301a:	6123      	str	r3, [r4, #16]
 801301c:	4641      	mov	r1, r8
 801301e:	4620      	mov	r0, r4
 8013020:	f000 fc9e 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8013024:	2800      	cmp	r0, #0
 8013026:	d06d      	beq.n	8013104 <ucdr_deserialize_int64_t+0x124>
 8013028:	7d23      	ldrb	r3, [r4, #20]
 801302a:	2b01      	cmp	r3, #1
 801302c:	f000 8093 	beq.w	8013156 <ucdr_deserialize_int64_t+0x176>
 8013030:	79fb      	ldrb	r3, [r7, #7]
 8013032:	702b      	strb	r3, [r5, #0]
 8013034:	2e00      	cmp	r6, #0
 8013036:	d072      	beq.n	801311e <ucdr_deserialize_int64_t+0x13e>
 8013038:	79bb      	ldrb	r3, [r7, #6]
 801303a:	706b      	strb	r3, [r5, #1]
 801303c:	2e01      	cmp	r6, #1
 801303e:	f105 0302 	add.w	r3, r5, #2
 8013042:	d070      	beq.n	8013126 <ucdr_deserialize_int64_t+0x146>
 8013044:	797b      	ldrb	r3, [r7, #5]
 8013046:	70ab      	strb	r3, [r5, #2]
 8013048:	2e02      	cmp	r6, #2
 801304a:	f105 0303 	add.w	r3, r5, #3
 801304e:	d06e      	beq.n	801312e <ucdr_deserialize_int64_t+0x14e>
 8013050:	793b      	ldrb	r3, [r7, #4]
 8013052:	70eb      	strb	r3, [r5, #3]
 8013054:	2e03      	cmp	r6, #3
 8013056:	f105 0304 	add.w	r3, r5, #4
 801305a:	d06c      	beq.n	8013136 <ucdr_deserialize_int64_t+0x156>
 801305c:	78fb      	ldrb	r3, [r7, #3]
 801305e:	712b      	strb	r3, [r5, #4]
 8013060:	2e04      	cmp	r6, #4
 8013062:	f105 0305 	add.w	r3, r5, #5
 8013066:	d06a      	beq.n	801313e <ucdr_deserialize_int64_t+0x15e>
 8013068:	78bb      	ldrb	r3, [r7, #2]
 801306a:	716b      	strb	r3, [r5, #5]
 801306c:	2e05      	cmp	r6, #5
 801306e:	f105 0306 	add.w	r3, r5, #6
 8013072:	d068      	beq.n	8013146 <ucdr_deserialize_int64_t+0x166>
 8013074:	787b      	ldrb	r3, [r7, #1]
 8013076:	71ab      	strb	r3, [r5, #6]
 8013078:	2e06      	cmp	r6, #6
 801307a:	f105 0307 	add.w	r3, r5, #7
 801307e:	d066      	beq.n	801314e <ucdr_deserialize_int64_t+0x16e>
 8013080:	783b      	ldrb	r3, [r7, #0]
 8013082:	71eb      	strb	r3, [r5, #7]
 8013084:	6923      	ldr	r3, [r4, #16]
 8013086:	68a2      	ldr	r2, [r4, #8]
 8013088:	7da0      	ldrb	r0, [r4, #22]
 801308a:	3308      	adds	r3, #8
 801308c:	1b9e      	subs	r6, r3, r6
 801308e:	2308      	movs	r3, #8
 8013090:	4442      	add	r2, r8
 8013092:	7563      	strb	r3, [r4, #21]
 8013094:	60a2      	str	r2, [r4, #8]
 8013096:	6126      	str	r6, [r4, #16]
 8013098:	f080 0001 	eor.w	r0, r0, #1
 801309c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130a0:	2108      	movs	r1, #8
 80130a2:	4620      	mov	r0, r4
 80130a4:	f000 fc5c 	bl	8013960 <ucdr_check_final_buffer_behavior>
 80130a8:	b310      	cbz	r0, 80130f0 <ucdr_deserialize_int64_t+0x110>
 80130aa:	7d23      	ldrb	r3, [r4, #20]
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	68a3      	ldr	r3, [r4, #8]
 80130b0:	d023      	beq.n	80130fa <ucdr_deserialize_int64_t+0x11a>
 80130b2:	79db      	ldrb	r3, [r3, #7]
 80130b4:	702b      	strb	r3, [r5, #0]
 80130b6:	68a3      	ldr	r3, [r4, #8]
 80130b8:	799b      	ldrb	r3, [r3, #6]
 80130ba:	706b      	strb	r3, [r5, #1]
 80130bc:	68a3      	ldr	r3, [r4, #8]
 80130be:	795b      	ldrb	r3, [r3, #5]
 80130c0:	70ab      	strb	r3, [r5, #2]
 80130c2:	68a3      	ldr	r3, [r4, #8]
 80130c4:	791b      	ldrb	r3, [r3, #4]
 80130c6:	70eb      	strb	r3, [r5, #3]
 80130c8:	68a3      	ldr	r3, [r4, #8]
 80130ca:	78db      	ldrb	r3, [r3, #3]
 80130cc:	712b      	strb	r3, [r5, #4]
 80130ce:	68a3      	ldr	r3, [r4, #8]
 80130d0:	789b      	ldrb	r3, [r3, #2]
 80130d2:	716b      	strb	r3, [r5, #5]
 80130d4:	68a3      	ldr	r3, [r4, #8]
 80130d6:	785b      	ldrb	r3, [r3, #1]
 80130d8:	71ab      	strb	r3, [r5, #6]
 80130da:	68a3      	ldr	r3, [r4, #8]
 80130dc:	781b      	ldrb	r3, [r3, #0]
 80130de:	71eb      	strb	r3, [r5, #7]
 80130e0:	68a2      	ldr	r2, [r4, #8]
 80130e2:	6923      	ldr	r3, [r4, #16]
 80130e4:	3208      	adds	r2, #8
 80130e6:	3308      	adds	r3, #8
 80130e8:	2108      	movs	r1, #8
 80130ea:	60a2      	str	r2, [r4, #8]
 80130ec:	6123      	str	r3, [r4, #16]
 80130ee:	7561      	strb	r1, [r4, #21]
 80130f0:	7da0      	ldrb	r0, [r4, #22]
 80130f2:	f080 0001 	eor.w	r0, r0, #1
 80130f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130fa:	681a      	ldr	r2, [r3, #0]
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	606b      	str	r3, [r5, #4]
 8013100:	602a      	str	r2, [r5, #0]
 8013102:	e7ed      	b.n	80130e0 <ucdr_deserialize_int64_t+0x100>
 8013104:	68a2      	ldr	r2, [r4, #8]
 8013106:	6923      	ldr	r3, [r4, #16]
 8013108:	7da0      	ldrb	r0, [r4, #22]
 801310a:	f884 9015 	strb.w	r9, [r4, #21]
 801310e:	1b92      	subs	r2, r2, r6
 8013110:	1b9b      	subs	r3, r3, r6
 8013112:	60a2      	str	r2, [r4, #8]
 8013114:	6123      	str	r3, [r4, #16]
 8013116:	f080 0001 	eor.w	r0, r0, #1
 801311a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801311e:	68a3      	ldr	r3, [r4, #8]
 8013120:	799b      	ldrb	r3, [r3, #6]
 8013122:	706b      	strb	r3, [r5, #1]
 8013124:	1cab      	adds	r3, r5, #2
 8013126:	68a2      	ldr	r2, [r4, #8]
 8013128:	7952      	ldrb	r2, [r2, #5]
 801312a:	f803 2b01 	strb.w	r2, [r3], #1
 801312e:	68a2      	ldr	r2, [r4, #8]
 8013130:	7912      	ldrb	r2, [r2, #4]
 8013132:	f803 2b01 	strb.w	r2, [r3], #1
 8013136:	68a2      	ldr	r2, [r4, #8]
 8013138:	78d2      	ldrb	r2, [r2, #3]
 801313a:	f803 2b01 	strb.w	r2, [r3], #1
 801313e:	68a2      	ldr	r2, [r4, #8]
 8013140:	7892      	ldrb	r2, [r2, #2]
 8013142:	f803 2b01 	strb.w	r2, [r3], #1
 8013146:	68a2      	ldr	r2, [r4, #8]
 8013148:	7852      	ldrb	r2, [r2, #1]
 801314a:	f803 2b01 	strb.w	r2, [r3], #1
 801314e:	68a2      	ldr	r2, [r4, #8]
 8013150:	7812      	ldrb	r2, [r2, #0]
 8013152:	701a      	strb	r2, [r3, #0]
 8013154:	e796      	b.n	8013084 <ucdr_deserialize_int64_t+0xa4>
 8013156:	4639      	mov	r1, r7
 8013158:	4632      	mov	r2, r6
 801315a:	4628      	mov	r0, r5
 801315c:	f007 ffd4 	bl	801b108 <memcpy>
 8013160:	68a1      	ldr	r1, [r4, #8]
 8013162:	4642      	mov	r2, r8
 8013164:	19a8      	adds	r0, r5, r6
 8013166:	f007 ffcf 	bl	801b108 <memcpy>
 801316a:	e78b      	b.n	8013084 <ucdr_deserialize_int64_t+0xa4>

0801316c <ucdr_serialize_float>:
 801316c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013170:	2104      	movs	r1, #4
 8013172:	b082      	sub	sp, #8
 8013174:	4604      	mov	r4, r0
 8013176:	ed8d 0a01 	vstr	s0, [sp, #4]
 801317a:	f000 fc45 	bl	8013a08 <ucdr_buffer_alignment>
 801317e:	4601      	mov	r1, r0
 8013180:	4620      	mov	r0, r4
 8013182:	7d67      	ldrb	r7, [r4, #21]
 8013184:	f000 fc84 	bl	8013a90 <ucdr_advance_buffer>
 8013188:	2104      	movs	r1, #4
 801318a:	4620      	mov	r0, r4
 801318c:	f000 fbdc 	bl	8013948 <ucdr_check_buffer_available_for>
 8013190:	2800      	cmp	r0, #0
 8013192:	d139      	bne.n	8013208 <ucdr_serialize_float+0x9c>
 8013194:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013198:	42ab      	cmp	r3, r5
 801319a:	d930      	bls.n	80131fe <ucdr_serialize_float+0x92>
 801319c:	1b5e      	subs	r6, r3, r5
 801319e:	60a3      	str	r3, [r4, #8]
 80131a0:	6923      	ldr	r3, [r4, #16]
 80131a2:	f1c6 0804 	rsb	r8, r6, #4
 80131a6:	4433      	add	r3, r6
 80131a8:	6123      	str	r3, [r4, #16]
 80131aa:	4641      	mov	r1, r8
 80131ac:	4620      	mov	r0, r4
 80131ae:	f000 fbd7 	bl	8013960 <ucdr_check_final_buffer_behavior>
 80131b2:	2800      	cmp	r0, #0
 80131b4:	d04c      	beq.n	8013250 <ucdr_serialize_float+0xe4>
 80131b6:	7d23      	ldrb	r3, [r4, #20]
 80131b8:	2b01      	cmp	r3, #1
 80131ba:	d063      	beq.n	8013284 <ucdr_serialize_float+0x118>
 80131bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80131c0:	702b      	strb	r3, [r5, #0]
 80131c2:	2e00      	cmp	r6, #0
 80131c4:	d051      	beq.n	801326a <ucdr_serialize_float+0xfe>
 80131c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80131ca:	706b      	strb	r3, [r5, #1]
 80131cc:	2e01      	cmp	r6, #1
 80131ce:	d050      	beq.n	8013272 <ucdr_serialize_float+0x106>
 80131d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80131d4:	70ab      	strb	r3, [r5, #2]
 80131d6:	2e02      	cmp	r6, #2
 80131d8:	d04f      	beq.n	801327a <ucdr_serialize_float+0x10e>
 80131da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80131de:	70eb      	strb	r3, [r5, #3]
 80131e0:	6923      	ldr	r3, [r4, #16]
 80131e2:	68a2      	ldr	r2, [r4, #8]
 80131e4:	7da0      	ldrb	r0, [r4, #22]
 80131e6:	3304      	adds	r3, #4
 80131e8:	1b9e      	subs	r6, r3, r6
 80131ea:	4442      	add	r2, r8
 80131ec:	2304      	movs	r3, #4
 80131ee:	f080 0001 	eor.w	r0, r0, #1
 80131f2:	60a2      	str	r2, [r4, #8]
 80131f4:	6126      	str	r6, [r4, #16]
 80131f6:	7563      	strb	r3, [r4, #21]
 80131f8:	b002      	add	sp, #8
 80131fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131fe:	2104      	movs	r1, #4
 8013200:	4620      	mov	r0, r4
 8013202:	f000 fbad 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8013206:	b1d0      	cbz	r0, 801323e <ucdr_serialize_float+0xd2>
 8013208:	7d23      	ldrb	r3, [r4, #20]
 801320a:	2b01      	cmp	r3, #1
 801320c:	68a3      	ldr	r3, [r4, #8]
 801320e:	d01c      	beq.n	801324a <ucdr_serialize_float+0xde>
 8013210:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013214:	701a      	strb	r2, [r3, #0]
 8013216:	68a3      	ldr	r3, [r4, #8]
 8013218:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801321c:	705a      	strb	r2, [r3, #1]
 801321e:	68a3      	ldr	r3, [r4, #8]
 8013220:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013224:	709a      	strb	r2, [r3, #2]
 8013226:	68a3      	ldr	r3, [r4, #8]
 8013228:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801322c:	70da      	strb	r2, [r3, #3]
 801322e:	68a2      	ldr	r2, [r4, #8]
 8013230:	6923      	ldr	r3, [r4, #16]
 8013232:	3204      	adds	r2, #4
 8013234:	3304      	adds	r3, #4
 8013236:	2104      	movs	r1, #4
 8013238:	60a2      	str	r2, [r4, #8]
 801323a:	6123      	str	r3, [r4, #16]
 801323c:	7561      	strb	r1, [r4, #21]
 801323e:	7da0      	ldrb	r0, [r4, #22]
 8013240:	f080 0001 	eor.w	r0, r0, #1
 8013244:	b002      	add	sp, #8
 8013246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801324a:	9a01      	ldr	r2, [sp, #4]
 801324c:	601a      	str	r2, [r3, #0]
 801324e:	e7ee      	b.n	801322e <ucdr_serialize_float+0xc2>
 8013250:	68a2      	ldr	r2, [r4, #8]
 8013252:	6923      	ldr	r3, [r4, #16]
 8013254:	7da0      	ldrb	r0, [r4, #22]
 8013256:	7567      	strb	r7, [r4, #21]
 8013258:	1b92      	subs	r2, r2, r6
 801325a:	1b9b      	subs	r3, r3, r6
 801325c:	f080 0001 	eor.w	r0, r0, #1
 8013260:	60a2      	str	r2, [r4, #8]
 8013262:	6123      	str	r3, [r4, #16]
 8013264:	b002      	add	sp, #8
 8013266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801326a:	68a3      	ldr	r3, [r4, #8]
 801326c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013270:	701a      	strb	r2, [r3, #0]
 8013272:	68a3      	ldr	r3, [r4, #8]
 8013274:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013278:	701a      	strb	r2, [r3, #0]
 801327a:	68a3      	ldr	r3, [r4, #8]
 801327c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013280:	701a      	strb	r2, [r3, #0]
 8013282:	e7ad      	b.n	80131e0 <ucdr_serialize_float+0x74>
 8013284:	4628      	mov	r0, r5
 8013286:	ad01      	add	r5, sp, #4
 8013288:	4629      	mov	r1, r5
 801328a:	4632      	mov	r2, r6
 801328c:	f007 ff3c 	bl	801b108 <memcpy>
 8013290:	68a0      	ldr	r0, [r4, #8]
 8013292:	4642      	mov	r2, r8
 8013294:	19a9      	adds	r1, r5, r6
 8013296:	f007 ff37 	bl	801b108 <memcpy>
 801329a:	e7a1      	b.n	80131e0 <ucdr_serialize_float+0x74>

0801329c <ucdr_serialize_endian_float>:
 801329c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132a0:	460d      	mov	r5, r1
 80132a2:	b083      	sub	sp, #12
 80132a4:	2104      	movs	r1, #4
 80132a6:	4604      	mov	r4, r0
 80132a8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80132ac:	f000 fbac 	bl	8013a08 <ucdr_buffer_alignment>
 80132b0:	4601      	mov	r1, r0
 80132b2:	4620      	mov	r0, r4
 80132b4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80132b8:	f000 fbea 	bl	8013a90 <ucdr_advance_buffer>
 80132bc:	2104      	movs	r1, #4
 80132be:	4620      	mov	r0, r4
 80132c0:	f000 fb42 	bl	8013948 <ucdr_check_buffer_available_for>
 80132c4:	2800      	cmp	r0, #0
 80132c6:	d138      	bne.n	801333a <ucdr_serialize_endian_float+0x9e>
 80132c8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80132cc:	42b7      	cmp	r7, r6
 80132ce:	d92f      	bls.n	8013330 <ucdr_serialize_endian_float+0x94>
 80132d0:	6923      	ldr	r3, [r4, #16]
 80132d2:	60a7      	str	r7, [r4, #8]
 80132d4:	1bbf      	subs	r7, r7, r6
 80132d6:	443b      	add	r3, r7
 80132d8:	f1c7 0904 	rsb	r9, r7, #4
 80132dc:	6123      	str	r3, [r4, #16]
 80132de:	4649      	mov	r1, r9
 80132e0:	4620      	mov	r0, r4
 80132e2:	f000 fb3d 	bl	8013960 <ucdr_check_final_buffer_behavior>
 80132e6:	2800      	cmp	r0, #0
 80132e8:	d04a      	beq.n	8013380 <ucdr_serialize_endian_float+0xe4>
 80132ea:	2d01      	cmp	r5, #1
 80132ec:	d063      	beq.n	80133b6 <ucdr_serialize_endian_float+0x11a>
 80132ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80132f2:	7033      	strb	r3, [r6, #0]
 80132f4:	2f00      	cmp	r7, #0
 80132f6:	d051      	beq.n	801339c <ucdr_serialize_endian_float+0x100>
 80132f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80132fc:	7073      	strb	r3, [r6, #1]
 80132fe:	2f01      	cmp	r7, #1
 8013300:	d050      	beq.n	80133a4 <ucdr_serialize_endian_float+0x108>
 8013302:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013306:	70b3      	strb	r3, [r6, #2]
 8013308:	2f02      	cmp	r7, #2
 801330a:	d04f      	beq.n	80133ac <ucdr_serialize_endian_float+0x110>
 801330c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013310:	70f3      	strb	r3, [r6, #3]
 8013312:	6923      	ldr	r3, [r4, #16]
 8013314:	68a2      	ldr	r2, [r4, #8]
 8013316:	7da0      	ldrb	r0, [r4, #22]
 8013318:	3304      	adds	r3, #4
 801331a:	444a      	add	r2, r9
 801331c:	1bdb      	subs	r3, r3, r7
 801331e:	2104      	movs	r1, #4
 8013320:	f080 0001 	eor.w	r0, r0, #1
 8013324:	60a2      	str	r2, [r4, #8]
 8013326:	6123      	str	r3, [r4, #16]
 8013328:	7561      	strb	r1, [r4, #21]
 801332a:	b003      	add	sp, #12
 801332c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013330:	2104      	movs	r1, #4
 8013332:	4620      	mov	r0, r4
 8013334:	f000 fb14 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8013338:	b1c8      	cbz	r0, 801336e <ucdr_serialize_endian_float+0xd2>
 801333a:	2d01      	cmp	r5, #1
 801333c:	68a3      	ldr	r3, [r4, #8]
 801333e:	d01c      	beq.n	801337a <ucdr_serialize_endian_float+0xde>
 8013340:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013344:	701a      	strb	r2, [r3, #0]
 8013346:	68a3      	ldr	r3, [r4, #8]
 8013348:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801334c:	705a      	strb	r2, [r3, #1]
 801334e:	68a3      	ldr	r3, [r4, #8]
 8013350:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013354:	709a      	strb	r2, [r3, #2]
 8013356:	68a3      	ldr	r3, [r4, #8]
 8013358:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801335c:	70da      	strb	r2, [r3, #3]
 801335e:	68a2      	ldr	r2, [r4, #8]
 8013360:	6923      	ldr	r3, [r4, #16]
 8013362:	3204      	adds	r2, #4
 8013364:	3304      	adds	r3, #4
 8013366:	2104      	movs	r1, #4
 8013368:	60a2      	str	r2, [r4, #8]
 801336a:	6123      	str	r3, [r4, #16]
 801336c:	7561      	strb	r1, [r4, #21]
 801336e:	7da0      	ldrb	r0, [r4, #22]
 8013370:	f080 0001 	eor.w	r0, r0, #1
 8013374:	b003      	add	sp, #12
 8013376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801337a:	9a01      	ldr	r2, [sp, #4]
 801337c:	601a      	str	r2, [r3, #0]
 801337e:	e7ee      	b.n	801335e <ucdr_serialize_endian_float+0xc2>
 8013380:	68a2      	ldr	r2, [r4, #8]
 8013382:	6923      	ldr	r3, [r4, #16]
 8013384:	7da0      	ldrb	r0, [r4, #22]
 8013386:	f884 8015 	strb.w	r8, [r4, #21]
 801338a:	1bd2      	subs	r2, r2, r7
 801338c:	1bdb      	subs	r3, r3, r7
 801338e:	f080 0001 	eor.w	r0, r0, #1
 8013392:	60a2      	str	r2, [r4, #8]
 8013394:	6123      	str	r3, [r4, #16]
 8013396:	b003      	add	sp, #12
 8013398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801339c:	68a3      	ldr	r3, [r4, #8]
 801339e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80133a2:	701a      	strb	r2, [r3, #0]
 80133a4:	68a3      	ldr	r3, [r4, #8]
 80133a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80133aa:	701a      	strb	r2, [r3, #0]
 80133ac:	68a3      	ldr	r3, [r4, #8]
 80133ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80133b2:	701a      	strb	r2, [r3, #0]
 80133b4:	e7ad      	b.n	8013312 <ucdr_serialize_endian_float+0x76>
 80133b6:	ad01      	add	r5, sp, #4
 80133b8:	4629      	mov	r1, r5
 80133ba:	463a      	mov	r2, r7
 80133bc:	4630      	mov	r0, r6
 80133be:	f007 fea3 	bl	801b108 <memcpy>
 80133c2:	68a0      	ldr	r0, [r4, #8]
 80133c4:	464a      	mov	r2, r9
 80133c6:	19e9      	adds	r1, r5, r7
 80133c8:	f007 fe9e 	bl	801b108 <memcpy>
 80133cc:	e7a1      	b.n	8013312 <ucdr_serialize_endian_float+0x76>
 80133ce:	bf00      	nop

080133d0 <ucdr_deserialize_float>:
 80133d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133d4:	460d      	mov	r5, r1
 80133d6:	2104      	movs	r1, #4
 80133d8:	4604      	mov	r4, r0
 80133da:	f000 fb15 	bl	8013a08 <ucdr_buffer_alignment>
 80133de:	4601      	mov	r1, r0
 80133e0:	4620      	mov	r0, r4
 80133e2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80133e6:	f000 fb53 	bl	8013a90 <ucdr_advance_buffer>
 80133ea:	2104      	movs	r1, #4
 80133ec:	4620      	mov	r0, r4
 80133ee:	f000 faab 	bl	8013948 <ucdr_check_buffer_available_for>
 80133f2:	2800      	cmp	r0, #0
 80133f4:	d138      	bne.n	8013468 <ucdr_deserialize_float+0x98>
 80133f6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80133fa:	42b7      	cmp	r7, r6
 80133fc:	d92f      	bls.n	801345e <ucdr_deserialize_float+0x8e>
 80133fe:	6923      	ldr	r3, [r4, #16]
 8013400:	60a7      	str	r7, [r4, #8]
 8013402:	1bbf      	subs	r7, r7, r6
 8013404:	443b      	add	r3, r7
 8013406:	f1c7 0904 	rsb	r9, r7, #4
 801340a:	6123      	str	r3, [r4, #16]
 801340c:	4649      	mov	r1, r9
 801340e:	4620      	mov	r0, r4
 8013410:	f000 faa6 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8013414:	2800      	cmp	r0, #0
 8013416:	d046      	beq.n	80134a6 <ucdr_deserialize_float+0xd6>
 8013418:	7d23      	ldrb	r3, [r4, #20]
 801341a:	2b01      	cmp	r3, #1
 801341c:	d05c      	beq.n	80134d8 <ucdr_deserialize_float+0x108>
 801341e:	78f3      	ldrb	r3, [r6, #3]
 8013420:	702b      	strb	r3, [r5, #0]
 8013422:	2f00      	cmp	r7, #0
 8013424:	d04c      	beq.n	80134c0 <ucdr_deserialize_float+0xf0>
 8013426:	78b3      	ldrb	r3, [r6, #2]
 8013428:	706b      	strb	r3, [r5, #1]
 801342a:	2f01      	cmp	r7, #1
 801342c:	f105 0302 	add.w	r3, r5, #2
 8013430:	d04a      	beq.n	80134c8 <ucdr_deserialize_float+0xf8>
 8013432:	7873      	ldrb	r3, [r6, #1]
 8013434:	70ab      	strb	r3, [r5, #2]
 8013436:	2f02      	cmp	r7, #2
 8013438:	f105 0303 	add.w	r3, r5, #3
 801343c:	d048      	beq.n	80134d0 <ucdr_deserialize_float+0x100>
 801343e:	7833      	ldrb	r3, [r6, #0]
 8013440:	70eb      	strb	r3, [r5, #3]
 8013442:	6923      	ldr	r3, [r4, #16]
 8013444:	68a2      	ldr	r2, [r4, #8]
 8013446:	7da0      	ldrb	r0, [r4, #22]
 8013448:	2104      	movs	r1, #4
 801344a:	3304      	adds	r3, #4
 801344c:	444a      	add	r2, r9
 801344e:	1bdb      	subs	r3, r3, r7
 8013450:	7561      	strb	r1, [r4, #21]
 8013452:	60a2      	str	r2, [r4, #8]
 8013454:	6123      	str	r3, [r4, #16]
 8013456:	f080 0001 	eor.w	r0, r0, #1
 801345a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801345e:	2104      	movs	r1, #4
 8013460:	4620      	mov	r0, r4
 8013462:	f000 fa7d 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8013466:	b1b0      	cbz	r0, 8013496 <ucdr_deserialize_float+0xc6>
 8013468:	7d23      	ldrb	r3, [r4, #20]
 801346a:	2b01      	cmp	r3, #1
 801346c:	68a3      	ldr	r3, [r4, #8]
 801346e:	d017      	beq.n	80134a0 <ucdr_deserialize_float+0xd0>
 8013470:	78db      	ldrb	r3, [r3, #3]
 8013472:	702b      	strb	r3, [r5, #0]
 8013474:	68a3      	ldr	r3, [r4, #8]
 8013476:	789b      	ldrb	r3, [r3, #2]
 8013478:	706b      	strb	r3, [r5, #1]
 801347a:	68a3      	ldr	r3, [r4, #8]
 801347c:	785b      	ldrb	r3, [r3, #1]
 801347e:	70ab      	strb	r3, [r5, #2]
 8013480:	68a3      	ldr	r3, [r4, #8]
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	70eb      	strb	r3, [r5, #3]
 8013486:	68a2      	ldr	r2, [r4, #8]
 8013488:	6923      	ldr	r3, [r4, #16]
 801348a:	3204      	adds	r2, #4
 801348c:	3304      	adds	r3, #4
 801348e:	2104      	movs	r1, #4
 8013490:	60a2      	str	r2, [r4, #8]
 8013492:	6123      	str	r3, [r4, #16]
 8013494:	7561      	strb	r1, [r4, #21]
 8013496:	7da0      	ldrb	r0, [r4, #22]
 8013498:	f080 0001 	eor.w	r0, r0, #1
 801349c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	602b      	str	r3, [r5, #0]
 80134a4:	e7ef      	b.n	8013486 <ucdr_deserialize_float+0xb6>
 80134a6:	68a2      	ldr	r2, [r4, #8]
 80134a8:	6923      	ldr	r3, [r4, #16]
 80134aa:	7da0      	ldrb	r0, [r4, #22]
 80134ac:	f884 8015 	strb.w	r8, [r4, #21]
 80134b0:	1bd2      	subs	r2, r2, r7
 80134b2:	1bdb      	subs	r3, r3, r7
 80134b4:	60a2      	str	r2, [r4, #8]
 80134b6:	6123      	str	r3, [r4, #16]
 80134b8:	f080 0001 	eor.w	r0, r0, #1
 80134bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134c0:	68a3      	ldr	r3, [r4, #8]
 80134c2:	789b      	ldrb	r3, [r3, #2]
 80134c4:	706b      	strb	r3, [r5, #1]
 80134c6:	1cab      	adds	r3, r5, #2
 80134c8:	68a2      	ldr	r2, [r4, #8]
 80134ca:	7852      	ldrb	r2, [r2, #1]
 80134cc:	f803 2b01 	strb.w	r2, [r3], #1
 80134d0:	68a2      	ldr	r2, [r4, #8]
 80134d2:	7812      	ldrb	r2, [r2, #0]
 80134d4:	701a      	strb	r2, [r3, #0]
 80134d6:	e7b4      	b.n	8013442 <ucdr_deserialize_float+0x72>
 80134d8:	4631      	mov	r1, r6
 80134da:	463a      	mov	r2, r7
 80134dc:	4628      	mov	r0, r5
 80134de:	f007 fe13 	bl	801b108 <memcpy>
 80134e2:	68a1      	ldr	r1, [r4, #8]
 80134e4:	464a      	mov	r2, r9
 80134e6:	19e8      	adds	r0, r5, r7
 80134e8:	f007 fe0e 	bl	801b108 <memcpy>
 80134ec:	e7a9      	b.n	8013442 <ucdr_deserialize_float+0x72>
 80134ee:	bf00      	nop

080134f0 <ucdr_deserialize_endian_float>:
 80134f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134f4:	460e      	mov	r6, r1
 80134f6:	2104      	movs	r1, #4
 80134f8:	4604      	mov	r4, r0
 80134fa:	4615      	mov	r5, r2
 80134fc:	f000 fa84 	bl	8013a08 <ucdr_buffer_alignment>
 8013500:	4601      	mov	r1, r0
 8013502:	4620      	mov	r0, r4
 8013504:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013508:	f000 fac2 	bl	8013a90 <ucdr_advance_buffer>
 801350c:	2104      	movs	r1, #4
 801350e:	4620      	mov	r0, r4
 8013510:	f000 fa1a 	bl	8013948 <ucdr_check_buffer_available_for>
 8013514:	2800      	cmp	r0, #0
 8013516:	d13c      	bne.n	8013592 <ucdr_deserialize_endian_float+0xa2>
 8013518:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801351c:	42bb      	cmp	r3, r7
 801351e:	d933      	bls.n	8013588 <ucdr_deserialize_endian_float+0x98>
 8013520:	eba3 0807 	sub.w	r8, r3, r7
 8013524:	60a3      	str	r3, [r4, #8]
 8013526:	6923      	ldr	r3, [r4, #16]
 8013528:	f1c8 0a04 	rsb	sl, r8, #4
 801352c:	4443      	add	r3, r8
 801352e:	6123      	str	r3, [r4, #16]
 8013530:	4651      	mov	r1, sl
 8013532:	4620      	mov	r0, r4
 8013534:	f000 fa14 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8013538:	2800      	cmp	r0, #0
 801353a:	d048      	beq.n	80135ce <ucdr_deserialize_endian_float+0xde>
 801353c:	2e01      	cmp	r6, #1
 801353e:	d061      	beq.n	8013604 <ucdr_deserialize_endian_float+0x114>
 8013540:	78fb      	ldrb	r3, [r7, #3]
 8013542:	702b      	strb	r3, [r5, #0]
 8013544:	f1b8 0f00 	cmp.w	r8, #0
 8013548:	d050      	beq.n	80135ec <ucdr_deserialize_endian_float+0xfc>
 801354a:	78bb      	ldrb	r3, [r7, #2]
 801354c:	706b      	strb	r3, [r5, #1]
 801354e:	f1b8 0f01 	cmp.w	r8, #1
 8013552:	f105 0302 	add.w	r3, r5, #2
 8013556:	d04d      	beq.n	80135f4 <ucdr_deserialize_endian_float+0x104>
 8013558:	787b      	ldrb	r3, [r7, #1]
 801355a:	70ab      	strb	r3, [r5, #2]
 801355c:	f1b8 0f02 	cmp.w	r8, #2
 8013560:	f105 0303 	add.w	r3, r5, #3
 8013564:	d04a      	beq.n	80135fc <ucdr_deserialize_endian_float+0x10c>
 8013566:	783b      	ldrb	r3, [r7, #0]
 8013568:	70eb      	strb	r3, [r5, #3]
 801356a:	6923      	ldr	r3, [r4, #16]
 801356c:	68a2      	ldr	r2, [r4, #8]
 801356e:	7da0      	ldrb	r0, [r4, #22]
 8013570:	2104      	movs	r1, #4
 8013572:	3304      	adds	r3, #4
 8013574:	4452      	add	r2, sl
 8013576:	eba3 0308 	sub.w	r3, r3, r8
 801357a:	7561      	strb	r1, [r4, #21]
 801357c:	60a2      	str	r2, [r4, #8]
 801357e:	6123      	str	r3, [r4, #16]
 8013580:	f080 0001 	eor.w	r0, r0, #1
 8013584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013588:	2104      	movs	r1, #4
 801358a:	4620      	mov	r0, r4
 801358c:	f000 f9e8 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8013590:	b1a8      	cbz	r0, 80135be <ucdr_deserialize_endian_float+0xce>
 8013592:	2e01      	cmp	r6, #1
 8013594:	68a3      	ldr	r3, [r4, #8]
 8013596:	d017      	beq.n	80135c8 <ucdr_deserialize_endian_float+0xd8>
 8013598:	78db      	ldrb	r3, [r3, #3]
 801359a:	702b      	strb	r3, [r5, #0]
 801359c:	68a3      	ldr	r3, [r4, #8]
 801359e:	789b      	ldrb	r3, [r3, #2]
 80135a0:	706b      	strb	r3, [r5, #1]
 80135a2:	68a3      	ldr	r3, [r4, #8]
 80135a4:	785b      	ldrb	r3, [r3, #1]
 80135a6:	70ab      	strb	r3, [r5, #2]
 80135a8:	68a3      	ldr	r3, [r4, #8]
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	70eb      	strb	r3, [r5, #3]
 80135ae:	68a2      	ldr	r2, [r4, #8]
 80135b0:	6923      	ldr	r3, [r4, #16]
 80135b2:	3204      	adds	r2, #4
 80135b4:	3304      	adds	r3, #4
 80135b6:	2104      	movs	r1, #4
 80135b8:	60a2      	str	r2, [r4, #8]
 80135ba:	6123      	str	r3, [r4, #16]
 80135bc:	7561      	strb	r1, [r4, #21]
 80135be:	7da0      	ldrb	r0, [r4, #22]
 80135c0:	f080 0001 	eor.w	r0, r0, #1
 80135c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	602b      	str	r3, [r5, #0]
 80135cc:	e7ef      	b.n	80135ae <ucdr_deserialize_endian_float+0xbe>
 80135ce:	68a2      	ldr	r2, [r4, #8]
 80135d0:	6923      	ldr	r3, [r4, #16]
 80135d2:	7da0      	ldrb	r0, [r4, #22]
 80135d4:	f884 9015 	strb.w	r9, [r4, #21]
 80135d8:	eba2 0208 	sub.w	r2, r2, r8
 80135dc:	eba3 0308 	sub.w	r3, r3, r8
 80135e0:	60a2      	str	r2, [r4, #8]
 80135e2:	6123      	str	r3, [r4, #16]
 80135e4:	f080 0001 	eor.w	r0, r0, #1
 80135e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135ec:	68a3      	ldr	r3, [r4, #8]
 80135ee:	789b      	ldrb	r3, [r3, #2]
 80135f0:	706b      	strb	r3, [r5, #1]
 80135f2:	1cab      	adds	r3, r5, #2
 80135f4:	68a2      	ldr	r2, [r4, #8]
 80135f6:	7852      	ldrb	r2, [r2, #1]
 80135f8:	f803 2b01 	strb.w	r2, [r3], #1
 80135fc:	68a2      	ldr	r2, [r4, #8]
 80135fe:	7812      	ldrb	r2, [r2, #0]
 8013600:	701a      	strb	r2, [r3, #0]
 8013602:	e7b2      	b.n	801356a <ucdr_deserialize_endian_float+0x7a>
 8013604:	4639      	mov	r1, r7
 8013606:	4642      	mov	r2, r8
 8013608:	4628      	mov	r0, r5
 801360a:	f007 fd7d 	bl	801b108 <memcpy>
 801360e:	68a1      	ldr	r1, [r4, #8]
 8013610:	4652      	mov	r2, sl
 8013612:	eb05 0008 	add.w	r0, r5, r8
 8013616:	f007 fd77 	bl	801b108 <memcpy>
 801361a:	e7a6      	b.n	801356a <ucdr_deserialize_endian_float+0x7a>

0801361c <ucdr_serialize_double>:
 801361c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013620:	2108      	movs	r1, #8
 8013622:	b082      	sub	sp, #8
 8013624:	4604      	mov	r4, r0
 8013626:	ed8d 0b00 	vstr	d0, [sp]
 801362a:	f000 f9ed 	bl	8013a08 <ucdr_buffer_alignment>
 801362e:	4601      	mov	r1, r0
 8013630:	4620      	mov	r0, r4
 8013632:	7d67      	ldrb	r7, [r4, #21]
 8013634:	f000 fa2c 	bl	8013a90 <ucdr_advance_buffer>
 8013638:	2108      	movs	r1, #8
 801363a:	4620      	mov	r0, r4
 801363c:	f000 f984 	bl	8013948 <ucdr_check_buffer_available_for>
 8013640:	2800      	cmp	r0, #0
 8013642:	d14e      	bne.n	80136e2 <ucdr_serialize_double+0xc6>
 8013644:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013648:	42ab      	cmp	r3, r5
 801364a:	d945      	bls.n	80136d8 <ucdr_serialize_double+0xbc>
 801364c:	1b5e      	subs	r6, r3, r5
 801364e:	60a3      	str	r3, [r4, #8]
 8013650:	6923      	ldr	r3, [r4, #16]
 8013652:	f1c6 0808 	rsb	r8, r6, #8
 8013656:	4433      	add	r3, r6
 8013658:	6123      	str	r3, [r4, #16]
 801365a:	4641      	mov	r1, r8
 801365c:	4620      	mov	r0, r4
 801365e:	f000 f97f 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8013662:	2800      	cmp	r0, #0
 8013664:	d074      	beq.n	8013750 <ucdr_serialize_double+0x134>
 8013666:	7d23      	ldrb	r3, [r4, #20]
 8013668:	2b01      	cmp	r3, #1
 801366a:	f000 809b 	beq.w	80137a4 <ucdr_serialize_double+0x188>
 801366e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013672:	702b      	strb	r3, [r5, #0]
 8013674:	2e00      	cmp	r6, #0
 8013676:	d078      	beq.n	801376a <ucdr_serialize_double+0x14e>
 8013678:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801367c:	706b      	strb	r3, [r5, #1]
 801367e:	2e01      	cmp	r6, #1
 8013680:	d077      	beq.n	8013772 <ucdr_serialize_double+0x156>
 8013682:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013686:	70ab      	strb	r3, [r5, #2]
 8013688:	2e02      	cmp	r6, #2
 801368a:	d076      	beq.n	801377a <ucdr_serialize_double+0x15e>
 801368c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013690:	70eb      	strb	r3, [r5, #3]
 8013692:	2e03      	cmp	r6, #3
 8013694:	d075      	beq.n	8013782 <ucdr_serialize_double+0x166>
 8013696:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801369a:	712b      	strb	r3, [r5, #4]
 801369c:	2e04      	cmp	r6, #4
 801369e:	d074      	beq.n	801378a <ucdr_serialize_double+0x16e>
 80136a0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80136a4:	716b      	strb	r3, [r5, #5]
 80136a6:	2e05      	cmp	r6, #5
 80136a8:	d073      	beq.n	8013792 <ucdr_serialize_double+0x176>
 80136aa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80136ae:	71ab      	strb	r3, [r5, #6]
 80136b0:	2e06      	cmp	r6, #6
 80136b2:	d072      	beq.n	801379a <ucdr_serialize_double+0x17e>
 80136b4:	f89d 3000 	ldrb.w	r3, [sp]
 80136b8:	71eb      	strb	r3, [r5, #7]
 80136ba:	6923      	ldr	r3, [r4, #16]
 80136bc:	68a2      	ldr	r2, [r4, #8]
 80136be:	7da0      	ldrb	r0, [r4, #22]
 80136c0:	3308      	adds	r3, #8
 80136c2:	1b9e      	subs	r6, r3, r6
 80136c4:	4442      	add	r2, r8
 80136c6:	2308      	movs	r3, #8
 80136c8:	f080 0001 	eor.w	r0, r0, #1
 80136cc:	60a2      	str	r2, [r4, #8]
 80136ce:	6126      	str	r6, [r4, #16]
 80136d0:	7563      	strb	r3, [r4, #21]
 80136d2:	b002      	add	sp, #8
 80136d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136d8:	2108      	movs	r1, #8
 80136da:	4620      	mov	r0, r4
 80136dc:	f000 f940 	bl	8013960 <ucdr_check_final_buffer_behavior>
 80136e0:	b350      	cbz	r0, 8013738 <ucdr_serialize_double+0x11c>
 80136e2:	7d23      	ldrb	r3, [r4, #20]
 80136e4:	2b01      	cmp	r3, #1
 80136e6:	d02d      	beq.n	8013744 <ucdr_serialize_double+0x128>
 80136e8:	68a3      	ldr	r3, [r4, #8]
 80136ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80136ee:	701a      	strb	r2, [r3, #0]
 80136f0:	68a3      	ldr	r3, [r4, #8]
 80136f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80136f6:	705a      	strb	r2, [r3, #1]
 80136f8:	68a3      	ldr	r3, [r4, #8]
 80136fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80136fe:	709a      	strb	r2, [r3, #2]
 8013700:	68a3      	ldr	r3, [r4, #8]
 8013702:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013706:	70da      	strb	r2, [r3, #3]
 8013708:	68a3      	ldr	r3, [r4, #8]
 801370a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801370e:	711a      	strb	r2, [r3, #4]
 8013710:	68a3      	ldr	r3, [r4, #8]
 8013712:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013716:	715a      	strb	r2, [r3, #5]
 8013718:	68a3      	ldr	r3, [r4, #8]
 801371a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801371e:	719a      	strb	r2, [r3, #6]
 8013720:	68a3      	ldr	r3, [r4, #8]
 8013722:	f89d 2000 	ldrb.w	r2, [sp]
 8013726:	71da      	strb	r2, [r3, #7]
 8013728:	68a2      	ldr	r2, [r4, #8]
 801372a:	6923      	ldr	r3, [r4, #16]
 801372c:	3208      	adds	r2, #8
 801372e:	3308      	adds	r3, #8
 8013730:	2108      	movs	r1, #8
 8013732:	60a2      	str	r2, [r4, #8]
 8013734:	6123      	str	r3, [r4, #16]
 8013736:	7561      	strb	r1, [r4, #21]
 8013738:	7da0      	ldrb	r0, [r4, #22]
 801373a:	f080 0001 	eor.w	r0, r0, #1
 801373e:	b002      	add	sp, #8
 8013740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013744:	466b      	mov	r3, sp
 8013746:	cb03      	ldmia	r3!, {r0, r1}
 8013748:	68a3      	ldr	r3, [r4, #8]
 801374a:	6018      	str	r0, [r3, #0]
 801374c:	6059      	str	r1, [r3, #4]
 801374e:	e7eb      	b.n	8013728 <ucdr_serialize_double+0x10c>
 8013750:	68a2      	ldr	r2, [r4, #8]
 8013752:	6923      	ldr	r3, [r4, #16]
 8013754:	7da0      	ldrb	r0, [r4, #22]
 8013756:	7567      	strb	r7, [r4, #21]
 8013758:	1b92      	subs	r2, r2, r6
 801375a:	1b9b      	subs	r3, r3, r6
 801375c:	f080 0001 	eor.w	r0, r0, #1
 8013760:	60a2      	str	r2, [r4, #8]
 8013762:	6123      	str	r3, [r4, #16]
 8013764:	b002      	add	sp, #8
 8013766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801376a:	68a3      	ldr	r3, [r4, #8]
 801376c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013770:	701a      	strb	r2, [r3, #0]
 8013772:	68a3      	ldr	r3, [r4, #8]
 8013774:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013778:	701a      	strb	r2, [r3, #0]
 801377a:	68a3      	ldr	r3, [r4, #8]
 801377c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013780:	701a      	strb	r2, [r3, #0]
 8013782:	68a3      	ldr	r3, [r4, #8]
 8013784:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013788:	701a      	strb	r2, [r3, #0]
 801378a:	68a3      	ldr	r3, [r4, #8]
 801378c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013790:	701a      	strb	r2, [r3, #0]
 8013792:	68a3      	ldr	r3, [r4, #8]
 8013794:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013798:	701a      	strb	r2, [r3, #0]
 801379a:	68a3      	ldr	r3, [r4, #8]
 801379c:	f89d 2000 	ldrb.w	r2, [sp]
 80137a0:	701a      	strb	r2, [r3, #0]
 80137a2:	e78a      	b.n	80136ba <ucdr_serialize_double+0x9e>
 80137a4:	4628      	mov	r0, r5
 80137a6:	466d      	mov	r5, sp
 80137a8:	4629      	mov	r1, r5
 80137aa:	4632      	mov	r2, r6
 80137ac:	f007 fcac 	bl	801b108 <memcpy>
 80137b0:	68a0      	ldr	r0, [r4, #8]
 80137b2:	4642      	mov	r2, r8
 80137b4:	19a9      	adds	r1, r5, r6
 80137b6:	f007 fca7 	bl	801b108 <memcpy>
 80137ba:	e77e      	b.n	80136ba <ucdr_serialize_double+0x9e>

080137bc <ucdr_deserialize_double>:
 80137bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137c0:	460d      	mov	r5, r1
 80137c2:	2108      	movs	r1, #8
 80137c4:	4604      	mov	r4, r0
 80137c6:	f000 f91f 	bl	8013a08 <ucdr_buffer_alignment>
 80137ca:	4601      	mov	r1, r0
 80137cc:	4620      	mov	r0, r4
 80137ce:	f894 9015 	ldrb.w	r9, [r4, #21]
 80137d2:	f000 f95d 	bl	8013a90 <ucdr_advance_buffer>
 80137d6:	2108      	movs	r1, #8
 80137d8:	4620      	mov	r0, r4
 80137da:	f000 f8b5 	bl	8013948 <ucdr_check_buffer_available_for>
 80137de:	2800      	cmp	r0, #0
 80137e0:	d151      	bne.n	8013886 <ucdr_deserialize_double+0xca>
 80137e2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80137e6:	42be      	cmp	r6, r7
 80137e8:	d948      	bls.n	801387c <ucdr_deserialize_double+0xc0>
 80137ea:	6923      	ldr	r3, [r4, #16]
 80137ec:	60a6      	str	r6, [r4, #8]
 80137ee:	1bf6      	subs	r6, r6, r7
 80137f0:	4433      	add	r3, r6
 80137f2:	f1c6 0808 	rsb	r8, r6, #8
 80137f6:	6123      	str	r3, [r4, #16]
 80137f8:	4641      	mov	r1, r8
 80137fa:	4620      	mov	r0, r4
 80137fc:	f000 f8b0 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8013800:	2800      	cmp	r0, #0
 8013802:	d06d      	beq.n	80138e0 <ucdr_deserialize_double+0x124>
 8013804:	7d23      	ldrb	r3, [r4, #20]
 8013806:	2b01      	cmp	r3, #1
 8013808:	f000 8093 	beq.w	8013932 <ucdr_deserialize_double+0x176>
 801380c:	79fb      	ldrb	r3, [r7, #7]
 801380e:	702b      	strb	r3, [r5, #0]
 8013810:	2e00      	cmp	r6, #0
 8013812:	d072      	beq.n	80138fa <ucdr_deserialize_double+0x13e>
 8013814:	79bb      	ldrb	r3, [r7, #6]
 8013816:	706b      	strb	r3, [r5, #1]
 8013818:	2e01      	cmp	r6, #1
 801381a:	f105 0302 	add.w	r3, r5, #2
 801381e:	d070      	beq.n	8013902 <ucdr_deserialize_double+0x146>
 8013820:	797b      	ldrb	r3, [r7, #5]
 8013822:	70ab      	strb	r3, [r5, #2]
 8013824:	2e02      	cmp	r6, #2
 8013826:	f105 0303 	add.w	r3, r5, #3
 801382a:	d06e      	beq.n	801390a <ucdr_deserialize_double+0x14e>
 801382c:	793b      	ldrb	r3, [r7, #4]
 801382e:	70eb      	strb	r3, [r5, #3]
 8013830:	2e03      	cmp	r6, #3
 8013832:	f105 0304 	add.w	r3, r5, #4
 8013836:	d06c      	beq.n	8013912 <ucdr_deserialize_double+0x156>
 8013838:	78fb      	ldrb	r3, [r7, #3]
 801383a:	712b      	strb	r3, [r5, #4]
 801383c:	2e04      	cmp	r6, #4
 801383e:	f105 0305 	add.w	r3, r5, #5
 8013842:	d06a      	beq.n	801391a <ucdr_deserialize_double+0x15e>
 8013844:	78bb      	ldrb	r3, [r7, #2]
 8013846:	716b      	strb	r3, [r5, #5]
 8013848:	2e05      	cmp	r6, #5
 801384a:	f105 0306 	add.w	r3, r5, #6
 801384e:	d068      	beq.n	8013922 <ucdr_deserialize_double+0x166>
 8013850:	787b      	ldrb	r3, [r7, #1]
 8013852:	71ab      	strb	r3, [r5, #6]
 8013854:	2e06      	cmp	r6, #6
 8013856:	f105 0307 	add.w	r3, r5, #7
 801385a:	d066      	beq.n	801392a <ucdr_deserialize_double+0x16e>
 801385c:	783b      	ldrb	r3, [r7, #0]
 801385e:	71eb      	strb	r3, [r5, #7]
 8013860:	6923      	ldr	r3, [r4, #16]
 8013862:	68a2      	ldr	r2, [r4, #8]
 8013864:	7da0      	ldrb	r0, [r4, #22]
 8013866:	3308      	adds	r3, #8
 8013868:	1b9e      	subs	r6, r3, r6
 801386a:	2308      	movs	r3, #8
 801386c:	4442      	add	r2, r8
 801386e:	7563      	strb	r3, [r4, #21]
 8013870:	60a2      	str	r2, [r4, #8]
 8013872:	6126      	str	r6, [r4, #16]
 8013874:	f080 0001 	eor.w	r0, r0, #1
 8013878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801387c:	2108      	movs	r1, #8
 801387e:	4620      	mov	r0, r4
 8013880:	f000 f86e 	bl	8013960 <ucdr_check_final_buffer_behavior>
 8013884:	b310      	cbz	r0, 80138cc <ucdr_deserialize_double+0x110>
 8013886:	7d23      	ldrb	r3, [r4, #20]
 8013888:	2b01      	cmp	r3, #1
 801388a:	68a3      	ldr	r3, [r4, #8]
 801388c:	d023      	beq.n	80138d6 <ucdr_deserialize_double+0x11a>
 801388e:	79db      	ldrb	r3, [r3, #7]
 8013890:	702b      	strb	r3, [r5, #0]
 8013892:	68a3      	ldr	r3, [r4, #8]
 8013894:	799b      	ldrb	r3, [r3, #6]
 8013896:	706b      	strb	r3, [r5, #1]
 8013898:	68a3      	ldr	r3, [r4, #8]
 801389a:	795b      	ldrb	r3, [r3, #5]
 801389c:	70ab      	strb	r3, [r5, #2]
 801389e:	68a3      	ldr	r3, [r4, #8]
 80138a0:	791b      	ldrb	r3, [r3, #4]
 80138a2:	70eb      	strb	r3, [r5, #3]
 80138a4:	68a3      	ldr	r3, [r4, #8]
 80138a6:	78db      	ldrb	r3, [r3, #3]
 80138a8:	712b      	strb	r3, [r5, #4]
 80138aa:	68a3      	ldr	r3, [r4, #8]
 80138ac:	789b      	ldrb	r3, [r3, #2]
 80138ae:	716b      	strb	r3, [r5, #5]
 80138b0:	68a3      	ldr	r3, [r4, #8]
 80138b2:	785b      	ldrb	r3, [r3, #1]
 80138b4:	71ab      	strb	r3, [r5, #6]
 80138b6:	68a3      	ldr	r3, [r4, #8]
 80138b8:	781b      	ldrb	r3, [r3, #0]
 80138ba:	71eb      	strb	r3, [r5, #7]
 80138bc:	68a2      	ldr	r2, [r4, #8]
 80138be:	6923      	ldr	r3, [r4, #16]
 80138c0:	3208      	adds	r2, #8
 80138c2:	3308      	adds	r3, #8
 80138c4:	2108      	movs	r1, #8
 80138c6:	60a2      	str	r2, [r4, #8]
 80138c8:	6123      	str	r3, [r4, #16]
 80138ca:	7561      	strb	r1, [r4, #21]
 80138cc:	7da0      	ldrb	r0, [r4, #22]
 80138ce:	f080 0001 	eor.w	r0, r0, #1
 80138d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138d6:	681a      	ldr	r2, [r3, #0]
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	606b      	str	r3, [r5, #4]
 80138dc:	602a      	str	r2, [r5, #0]
 80138de:	e7ed      	b.n	80138bc <ucdr_deserialize_double+0x100>
 80138e0:	68a2      	ldr	r2, [r4, #8]
 80138e2:	6923      	ldr	r3, [r4, #16]
 80138e4:	7da0      	ldrb	r0, [r4, #22]
 80138e6:	f884 9015 	strb.w	r9, [r4, #21]
 80138ea:	1b92      	subs	r2, r2, r6
 80138ec:	1b9b      	subs	r3, r3, r6
 80138ee:	60a2      	str	r2, [r4, #8]
 80138f0:	6123      	str	r3, [r4, #16]
 80138f2:	f080 0001 	eor.w	r0, r0, #1
 80138f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138fa:	68a3      	ldr	r3, [r4, #8]
 80138fc:	799b      	ldrb	r3, [r3, #6]
 80138fe:	706b      	strb	r3, [r5, #1]
 8013900:	1cab      	adds	r3, r5, #2
 8013902:	68a2      	ldr	r2, [r4, #8]
 8013904:	7952      	ldrb	r2, [r2, #5]
 8013906:	f803 2b01 	strb.w	r2, [r3], #1
 801390a:	68a2      	ldr	r2, [r4, #8]
 801390c:	7912      	ldrb	r2, [r2, #4]
 801390e:	f803 2b01 	strb.w	r2, [r3], #1
 8013912:	68a2      	ldr	r2, [r4, #8]
 8013914:	78d2      	ldrb	r2, [r2, #3]
 8013916:	f803 2b01 	strb.w	r2, [r3], #1
 801391a:	68a2      	ldr	r2, [r4, #8]
 801391c:	7892      	ldrb	r2, [r2, #2]
 801391e:	f803 2b01 	strb.w	r2, [r3], #1
 8013922:	68a2      	ldr	r2, [r4, #8]
 8013924:	7852      	ldrb	r2, [r2, #1]
 8013926:	f803 2b01 	strb.w	r2, [r3], #1
 801392a:	68a2      	ldr	r2, [r4, #8]
 801392c:	7812      	ldrb	r2, [r2, #0]
 801392e:	701a      	strb	r2, [r3, #0]
 8013930:	e796      	b.n	8013860 <ucdr_deserialize_double+0xa4>
 8013932:	4639      	mov	r1, r7
 8013934:	4632      	mov	r2, r6
 8013936:	4628      	mov	r0, r5
 8013938:	f007 fbe6 	bl	801b108 <memcpy>
 801393c:	68a1      	ldr	r1, [r4, #8]
 801393e:	4642      	mov	r2, r8
 8013940:	19a8      	adds	r0, r5, r6
 8013942:	f007 fbe1 	bl	801b108 <memcpy>
 8013946:	e78b      	b.n	8013860 <ucdr_deserialize_double+0xa4>

08013948 <ucdr_check_buffer_available_for>:
 8013948:	7d83      	ldrb	r3, [r0, #22]
 801394a:	b93b      	cbnz	r3, 801395c <ucdr_check_buffer_available_for+0x14>
 801394c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8013950:	4419      	add	r1, r3
 8013952:	4288      	cmp	r0, r1
 8013954:	bf34      	ite	cc
 8013956:	2000      	movcc	r0, #0
 8013958:	2001      	movcs	r0, #1
 801395a:	4770      	bx	lr
 801395c:	2000      	movs	r0, #0
 801395e:	4770      	bx	lr

08013960 <ucdr_check_final_buffer_behavior>:
 8013960:	7d83      	ldrb	r3, [r0, #22]
 8013962:	b943      	cbnz	r3, 8013976 <ucdr_check_final_buffer_behavior+0x16>
 8013964:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8013968:	4291      	cmp	r1, r2
 801396a:	b510      	push	{r4, lr}
 801396c:	4604      	mov	r4, r0
 801396e:	d205      	bcs.n	801397c <ucdr_check_final_buffer_behavior+0x1c>
 8013970:	2301      	movs	r3, #1
 8013972:	4618      	mov	r0, r3
 8013974:	bd10      	pop	{r4, pc}
 8013976:	2300      	movs	r3, #0
 8013978:	4618      	mov	r0, r3
 801397a:	4770      	bx	lr
 801397c:	6982      	ldr	r2, [r0, #24]
 801397e:	b13a      	cbz	r2, 8013990 <ucdr_check_final_buffer_behavior+0x30>
 8013980:	69c1      	ldr	r1, [r0, #28]
 8013982:	4790      	blx	r2
 8013984:	f080 0301 	eor.w	r3, r0, #1
 8013988:	b2db      	uxtb	r3, r3
 801398a:	75a0      	strb	r0, [r4, #22]
 801398c:	4618      	mov	r0, r3
 801398e:	bd10      	pop	{r4, pc}
 8013990:	2001      	movs	r0, #1
 8013992:	75a0      	strb	r0, [r4, #22]
 8013994:	e7fa      	b.n	801398c <ucdr_check_final_buffer_behavior+0x2c>
 8013996:	bf00      	nop

08013998 <ucdr_set_on_full_buffer_callback>:
 8013998:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801399c:	4770      	bx	lr
 801399e:	bf00      	nop

080139a0 <ucdr_init_buffer_origin_offset_endian>:
 80139a0:	b410      	push	{r4}
 80139a2:	9c01      	ldr	r4, [sp, #4]
 80139a4:	6001      	str	r1, [r0, #0]
 80139a6:	440a      	add	r2, r1
 80139a8:	6042      	str	r2, [r0, #4]
 80139aa:	190a      	adds	r2, r1, r4
 80139ac:	441c      	add	r4, r3
 80139ae:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80139b2:	6082      	str	r2, [r0, #8]
 80139b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80139b8:	7503      	strb	r3, [r0, #20]
 80139ba:	2200      	movs	r2, #0
 80139bc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80139c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139c4:	7542      	strb	r2, [r0, #21]
 80139c6:	7582      	strb	r2, [r0, #22]
 80139c8:	4770      	bx	lr
 80139ca:	bf00      	nop

080139cc <ucdr_init_buffer_origin_offset>:
 80139cc:	b510      	push	{r4, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	9c04      	ldr	r4, [sp, #16]
 80139d2:	9400      	str	r4, [sp, #0]
 80139d4:	2401      	movs	r4, #1
 80139d6:	9401      	str	r4, [sp, #4]
 80139d8:	f7ff ffe2 	bl	80139a0 <ucdr_init_buffer_origin_offset_endian>
 80139dc:	b002      	add	sp, #8
 80139de:	bd10      	pop	{r4, pc}

080139e0 <ucdr_init_buffer_origin>:
 80139e0:	b510      	push	{r4, lr}
 80139e2:	b082      	sub	sp, #8
 80139e4:	2400      	movs	r4, #0
 80139e6:	9400      	str	r4, [sp, #0]
 80139e8:	f7ff fff0 	bl	80139cc <ucdr_init_buffer_origin_offset>
 80139ec:	b002      	add	sp, #8
 80139ee:	bd10      	pop	{r4, pc}

080139f0 <ucdr_init_buffer>:
 80139f0:	2300      	movs	r3, #0
 80139f2:	f7ff bff5 	b.w	80139e0 <ucdr_init_buffer_origin>
 80139f6:	bf00      	nop

080139f8 <ucdr_alignment>:
 80139f8:	fbb0 f3f1 	udiv	r3, r0, r1
 80139fc:	fb03 0011 	mls	r0, r3, r1, r0
 8013a00:	1a08      	subs	r0, r1, r0
 8013a02:	3901      	subs	r1, #1
 8013a04:	4008      	ands	r0, r1
 8013a06:	4770      	bx	lr

08013a08 <ucdr_buffer_alignment>:
 8013a08:	7d43      	ldrb	r3, [r0, #21]
 8013a0a:	428b      	cmp	r3, r1
 8013a0c:	d208      	bcs.n	8013a20 <ucdr_buffer_alignment+0x18>
 8013a0e:	6900      	ldr	r0, [r0, #16]
 8013a10:	fbb0 f3f1 	udiv	r3, r0, r1
 8013a14:	fb01 0013 	mls	r0, r1, r3, r0
 8013a18:	1a08      	subs	r0, r1, r0
 8013a1a:	3901      	subs	r1, #1
 8013a1c:	4008      	ands	r0, r1
 8013a1e:	4770      	bx	lr
 8013a20:	2000      	movs	r0, #0
 8013a22:	4770      	bx	lr

08013a24 <ucdr_align_to>:
 8013a24:	b538      	push	{r3, r4, r5, lr}
 8013a26:	4604      	mov	r4, r0
 8013a28:	460d      	mov	r5, r1
 8013a2a:	f7ff ffed 	bl	8013a08 <ucdr_buffer_alignment>
 8013a2e:	68a3      	ldr	r3, [r4, #8]
 8013a30:	6921      	ldr	r1, [r4, #16]
 8013a32:	7565      	strb	r5, [r4, #21]
 8013a34:	181a      	adds	r2, r3, r0
 8013a36:	6863      	ldr	r3, [r4, #4]
 8013a38:	4293      	cmp	r3, r2
 8013a3a:	4408      	add	r0, r1
 8013a3c:	bf28      	it	cs
 8013a3e:	4613      	movcs	r3, r2
 8013a40:	6120      	str	r0, [r4, #16]
 8013a42:	60a3      	str	r3, [r4, #8]
 8013a44:	bd38      	pop	{r3, r4, r5, pc}
 8013a46:	bf00      	nop

08013a48 <ucdr_buffer_length>:
 8013a48:	6882      	ldr	r2, [r0, #8]
 8013a4a:	6800      	ldr	r0, [r0, #0]
 8013a4c:	1a10      	subs	r0, r2, r0
 8013a4e:	4770      	bx	lr

08013a50 <ucdr_buffer_remaining>:
 8013a50:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8013a54:	1a10      	subs	r0, r2, r0
 8013a56:	4770      	bx	lr

08013a58 <ucdr_check_final_buffer_behavior_array>:
 8013a58:	b538      	push	{r3, r4, r5, lr}
 8013a5a:	7d83      	ldrb	r3, [r0, #22]
 8013a5c:	b963      	cbnz	r3, 8013a78 <ucdr_check_final_buffer_behavior_array+0x20>
 8013a5e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013a62:	429a      	cmp	r2, r3
 8013a64:	4604      	mov	r4, r0
 8013a66:	460d      	mov	r5, r1
 8013a68:	d308      	bcc.n	8013a7c <ucdr_check_final_buffer_behavior_array+0x24>
 8013a6a:	b139      	cbz	r1, 8013a7c <ucdr_check_final_buffer_behavior_array+0x24>
 8013a6c:	6983      	ldr	r3, [r0, #24]
 8013a6e:	b163      	cbz	r3, 8013a8a <ucdr_check_final_buffer_behavior_array+0x32>
 8013a70:	69c1      	ldr	r1, [r0, #28]
 8013a72:	4798      	blx	r3
 8013a74:	75a0      	strb	r0, [r4, #22]
 8013a76:	b108      	cbz	r0, 8013a7c <ucdr_check_final_buffer_behavior_array+0x24>
 8013a78:	2000      	movs	r0, #0
 8013a7a:	bd38      	pop	{r3, r4, r5, pc}
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	f7ff ffe7 	bl	8013a50 <ucdr_buffer_remaining>
 8013a82:	42a8      	cmp	r0, r5
 8013a84:	bf28      	it	cs
 8013a86:	4628      	movcs	r0, r5
 8013a88:	bd38      	pop	{r3, r4, r5, pc}
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	7583      	strb	r3, [r0, #22]
 8013a8e:	e7f3      	b.n	8013a78 <ucdr_check_final_buffer_behavior_array+0x20>

08013a90 <ucdr_advance_buffer>:
 8013a90:	b538      	push	{r3, r4, r5, lr}
 8013a92:	4604      	mov	r4, r0
 8013a94:	460d      	mov	r5, r1
 8013a96:	f7ff ff57 	bl	8013948 <ucdr_check_buffer_available_for>
 8013a9a:	b178      	cbz	r0, 8013abc <ucdr_advance_buffer+0x2c>
 8013a9c:	6923      	ldr	r3, [r4, #16]
 8013a9e:	68a2      	ldr	r2, [r4, #8]
 8013aa0:	442b      	add	r3, r5
 8013aa2:	6123      	str	r3, [r4, #16]
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	442a      	add	r2, r5
 8013aa8:	7563      	strb	r3, [r4, #21]
 8013aaa:	60a2      	str	r2, [r4, #8]
 8013aac:	bd38      	pop	{r3, r4, r5, pc}
 8013aae:	68a2      	ldr	r2, [r4, #8]
 8013ab0:	6923      	ldr	r3, [r4, #16]
 8013ab2:	4402      	add	r2, r0
 8013ab4:	4403      	add	r3, r0
 8013ab6:	1a2d      	subs	r5, r5, r0
 8013ab8:	60a2      	str	r2, [r4, #8]
 8013aba:	6123      	str	r3, [r4, #16]
 8013abc:	4629      	mov	r1, r5
 8013abe:	2201      	movs	r2, #1
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	f7ff ffc9 	bl	8013a58 <ucdr_check_final_buffer_behavior_array>
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	d1f1      	bne.n	8013aae <ucdr_advance_buffer+0x1e>
 8013aca:	2301      	movs	r3, #1
 8013acc:	7563      	strb	r3, [r4, #21]
 8013ace:	bd38      	pop	{r3, r4, r5, pc}

08013ad0 <ucdr_serialize_sequence_char>:
 8013ad0:	b570      	push	{r4, r5, r6, lr}
 8013ad2:	4615      	mov	r5, r2
 8013ad4:	460e      	mov	r6, r1
 8013ad6:	7d01      	ldrb	r1, [r0, #20]
 8013ad8:	4604      	mov	r4, r0
 8013ada:	f7fe fd07 	bl	80124ec <ucdr_serialize_endian_uint32_t>
 8013ade:	b90d      	cbnz	r5, 8013ae4 <ucdr_serialize_sequence_char+0x14>
 8013ae0:	2001      	movs	r0, #1
 8013ae2:	bd70      	pop	{r4, r5, r6, pc}
 8013ae4:	7d21      	ldrb	r1, [r4, #20]
 8013ae6:	462b      	mov	r3, r5
 8013ae8:	4632      	mov	r2, r6
 8013aea:	4620      	mov	r0, r4
 8013aec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013af0:	f004 beae 	b.w	8018850 <ucdr_serialize_endian_array_char>

08013af4 <ucdr_deserialize_sequence_char>:
 8013af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013af8:	461d      	mov	r5, r3
 8013afa:	4616      	mov	r6, r2
 8013afc:	460f      	mov	r7, r1
 8013afe:	461a      	mov	r2, r3
 8013b00:	7d01      	ldrb	r1, [r0, #20]
 8013b02:	4604      	mov	r4, r0
 8013b04:	f7fe fe1a 	bl	801273c <ucdr_deserialize_endian_uint32_t>
 8013b08:	682b      	ldr	r3, [r5, #0]
 8013b0a:	429e      	cmp	r6, r3
 8013b0c:	bf3c      	itt	cc
 8013b0e:	2201      	movcc	r2, #1
 8013b10:	75a2      	strbcc	r2, [r4, #22]
 8013b12:	b913      	cbnz	r3, 8013b1a <ucdr_deserialize_sequence_char+0x26>
 8013b14:	2001      	movs	r0, #1
 8013b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b1a:	7d21      	ldrb	r1, [r4, #20]
 8013b1c:	463a      	mov	r2, r7
 8013b1e:	4620      	mov	r0, r4
 8013b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b24:	f004 bec6 	b.w	80188b4 <ucdr_deserialize_endian_array_char>

08013b28 <ucdr_serialize_sequence_uint8_t>:
 8013b28:	b570      	push	{r4, r5, r6, lr}
 8013b2a:	4615      	mov	r5, r2
 8013b2c:	460e      	mov	r6, r1
 8013b2e:	7d01      	ldrb	r1, [r0, #20]
 8013b30:	4604      	mov	r4, r0
 8013b32:	f7fe fcdb 	bl	80124ec <ucdr_serialize_endian_uint32_t>
 8013b36:	b90d      	cbnz	r5, 8013b3c <ucdr_serialize_sequence_uint8_t+0x14>
 8013b38:	2001      	movs	r0, #1
 8013b3a:	bd70      	pop	{r4, r5, r6, pc}
 8013b3c:	7d21      	ldrb	r1, [r4, #20]
 8013b3e:	462b      	mov	r3, r5
 8013b40:	4632      	mov	r2, r6
 8013b42:	4620      	mov	r0, r4
 8013b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b48:	f004 bf18 	b.w	801897c <ucdr_serialize_endian_array_uint8_t>

08013b4c <ucdr_deserialize_sequence_uint8_t>:
 8013b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b50:	461d      	mov	r5, r3
 8013b52:	4616      	mov	r6, r2
 8013b54:	460f      	mov	r7, r1
 8013b56:	461a      	mov	r2, r3
 8013b58:	7d01      	ldrb	r1, [r0, #20]
 8013b5a:	4604      	mov	r4, r0
 8013b5c:	f7fe fdee 	bl	801273c <ucdr_deserialize_endian_uint32_t>
 8013b60:	682b      	ldr	r3, [r5, #0]
 8013b62:	429e      	cmp	r6, r3
 8013b64:	bf3c      	itt	cc
 8013b66:	2201      	movcc	r2, #1
 8013b68:	75a2      	strbcc	r2, [r4, #22]
 8013b6a:	b913      	cbnz	r3, 8013b72 <ucdr_deserialize_sequence_uint8_t+0x26>
 8013b6c:	2001      	movs	r0, #1
 8013b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b72:	7d21      	ldrb	r1, [r4, #20]
 8013b74:	463a      	mov	r2, r7
 8013b76:	4620      	mov	r0, r4
 8013b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b7c:	f004 bf62 	b.w	8018a44 <ucdr_deserialize_endian_array_uint8_t>

08013b80 <ucdr_serialize_sequence_float>:
 8013b80:	b570      	push	{r4, r5, r6, lr}
 8013b82:	4615      	mov	r5, r2
 8013b84:	460e      	mov	r6, r1
 8013b86:	7d01      	ldrb	r1, [r0, #20]
 8013b88:	4604      	mov	r4, r0
 8013b8a:	f7fe fcaf 	bl	80124ec <ucdr_serialize_endian_uint32_t>
 8013b8e:	b90d      	cbnz	r5, 8013b94 <ucdr_serialize_sequence_float+0x14>
 8013b90:	2001      	movs	r0, #1
 8013b92:	bd70      	pop	{r4, r5, r6, pc}
 8013b94:	7d21      	ldrb	r1, [r4, #20]
 8013b96:	462b      	mov	r3, r5
 8013b98:	4632      	mov	r2, r6
 8013b9a:	4620      	mov	r0, r4
 8013b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ba0:	f004 bf82 	b.w	8018aa8 <ucdr_serialize_endian_array_float>

08013ba4 <ucdr_deserialize_sequence_float>:
 8013ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ba8:	461d      	mov	r5, r3
 8013baa:	4616      	mov	r6, r2
 8013bac:	460f      	mov	r7, r1
 8013bae:	461a      	mov	r2, r3
 8013bb0:	7d01      	ldrb	r1, [r0, #20]
 8013bb2:	4604      	mov	r4, r0
 8013bb4:	f7fe fdc2 	bl	801273c <ucdr_deserialize_endian_uint32_t>
 8013bb8:	682b      	ldr	r3, [r5, #0]
 8013bba:	429e      	cmp	r6, r3
 8013bbc:	bf3c      	itt	cc
 8013bbe:	2201      	movcc	r2, #1
 8013bc0:	75a2      	strbcc	r2, [r4, #22]
 8013bc2:	b913      	cbnz	r3, 8013bca <ucdr_deserialize_sequence_float+0x26>
 8013bc4:	2001      	movs	r0, #1
 8013bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bca:	7d21      	ldrb	r1, [r4, #20]
 8013bcc:	463a      	mov	r2, r7
 8013bce:	4620      	mov	r0, r4
 8013bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bd4:	f004 bfbc 	b.w	8018b50 <ucdr_deserialize_endian_array_float>

08013bd8 <uxr_buffer_delete_entity>:
 8013bd8:	b510      	push	{r4, lr}
 8013bda:	2300      	movs	r3, #0
 8013bdc:	b08e      	sub	sp, #56	; 0x38
 8013bde:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8013be2:	2303      	movs	r3, #3
 8013be4:	9300      	str	r3, [sp, #0]
 8013be6:	2204      	movs	r2, #4
 8013be8:	ab06      	add	r3, sp, #24
 8013bea:	4604      	mov	r4, r0
 8013bec:	9103      	str	r1, [sp, #12]
 8013bee:	f001 f86f 	bl	8014cd0 <uxr_prepare_stream_to_write_submessage>
 8013bf2:	b918      	cbnz	r0, 8013bfc <uxr_buffer_delete_entity+0x24>
 8013bf4:	4604      	mov	r4, r0
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	b00e      	add	sp, #56	; 0x38
 8013bfa:	bd10      	pop	{r4, pc}
 8013bfc:	9902      	ldr	r1, [sp, #8]
 8013bfe:	aa05      	add	r2, sp, #20
 8013c00:	4620      	mov	r0, r4
 8013c02:	f001 f99b 	bl	8014f3c <uxr_init_base_object_request>
 8013c06:	a905      	add	r1, sp, #20
 8013c08:	4604      	mov	r4, r0
 8013c0a:	a806      	add	r0, sp, #24
 8013c0c:	f002 fb00 	bl	8016210 <uxr_serialize_DELETE_Payload>
 8013c10:	4620      	mov	r0, r4
 8013c12:	b00e      	add	sp, #56	; 0x38
 8013c14:	bd10      	pop	{r4, pc}
 8013c16:	bf00      	nop

08013c18 <uxr_common_create_entity>:
 8013c18:	b510      	push	{r4, lr}
 8013c1a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013c1e:	b08c      	sub	sp, #48	; 0x30
 8013c20:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013c24:	f1bc 0f01 	cmp.w	ip, #1
 8013c28:	bf0c      	ite	eq
 8013c2a:	f003 0201 	andeq.w	r2, r3, #1
 8013c2e:	2200      	movne	r2, #0
 8013c30:	330e      	adds	r3, #14
 8013c32:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8013c36:	9101      	str	r1, [sp, #4]
 8013c38:	441a      	add	r2, r3
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	9300      	str	r3, [sp, #0]
 8013c3e:	9903      	ldr	r1, [sp, #12]
 8013c40:	ab04      	add	r3, sp, #16
 8013c42:	b292      	uxth	r2, r2
 8013c44:	4604      	mov	r4, r0
 8013c46:	f001 f843 	bl	8014cd0 <uxr_prepare_stream_to_write_submessage>
 8013c4a:	b918      	cbnz	r0, 8013c54 <uxr_common_create_entity+0x3c>
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	4620      	mov	r0, r4
 8013c50:	b00c      	add	sp, #48	; 0x30
 8013c52:	bd10      	pop	{r4, pc}
 8013c54:	9902      	ldr	r1, [sp, #8]
 8013c56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c58:	4620      	mov	r0, r4
 8013c5a:	f001 f96f 	bl	8014f3c <uxr_init_base_object_request>
 8013c5e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013c60:	4604      	mov	r4, r0
 8013c62:	a804      	add	r0, sp, #16
 8013c64:	f002 fa30 	bl	80160c8 <uxr_serialize_CREATE_Payload>
 8013c68:	4620      	mov	r0, r4
 8013c6a:	b00c      	add	sp, #48	; 0x30
 8013c6c:	bd10      	pop	{r4, pc}
 8013c6e:	bf00      	nop

08013c70 <uxr_buffer_create_participant_bin>:
 8013c70:	b570      	push	{r4, r5, r6, lr}
 8013c72:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8013c76:	ac11      	add	r4, sp, #68	; 0x44
 8013c78:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8013c7c:	2303      	movs	r3, #3
 8013c7e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013c82:	7223      	strb	r3, [r4, #8]
 8013c84:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8013c86:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8013c8a:	2201      	movs	r2, #1
 8013c8c:	2100      	movs	r1, #0
 8013c8e:	4605      	mov	r5, r0
 8013c90:	7122      	strb	r2, [r4, #4]
 8013c92:	f88d 1014 	strb.w	r1, [sp, #20]
 8013c96:	b1cb      	cbz	r3, 8013ccc <uxr_buffer_create_participant_bin+0x5c>
 8013c98:	f88d 201c 	strb.w	r2, [sp, #28]
 8013c9c:	9308      	str	r3, [sp, #32]
 8013c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013ca2:	a915      	add	r1, sp, #84	; 0x54
 8013ca4:	a809      	add	r0, sp, #36	; 0x24
 8013ca6:	f7ff fea3 	bl	80139f0 <ucdr_init_buffer>
 8013caa:	a905      	add	r1, sp, #20
 8013cac:	a809      	add	r0, sp, #36	; 0x24
 8013cae:	f001 fed9 	bl	8015a64 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8013cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013cb4:	9600      	str	r6, [sp, #0]
 8013cb6:	9401      	str	r4, [sp, #4]
 8013cb8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013cbc:	60e3      	str	r3, [r4, #12]
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	b29b      	uxth	r3, r3
 8013cc2:	f7ff ffa9 	bl	8013c18 <uxr_common_create_entity>
 8013cc6:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8013cca:	bd70      	pop	{r4, r5, r6, pc}
 8013ccc:	f88d 301c 	strb.w	r3, [sp, #28]
 8013cd0:	e7e5      	b.n	8013c9e <uxr_buffer_create_participant_bin+0x2e>
 8013cd2:	bf00      	nop

08013cd4 <uxr_buffer_create_topic_bin>:
 8013cd4:	b570      	push	{r4, r5, r6, lr}
 8013cd6:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8013cda:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013cde:	9105      	str	r1, [sp, #20]
 8013ce0:	4605      	mov	r5, r0
 8013ce2:	a997      	add	r1, sp, #604	; 0x25c
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	2302      	movs	r3, #2
 8013ce8:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8013cec:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8013cf0:	f000 f8ee 	bl	8013ed0 <uxr_object_id_to_raw>
 8013cf4:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8013cf6:	9306      	str	r3, [sp, #24]
 8013cf8:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8013cfa:	930a      	str	r3, [sp, #40]	; 0x28
 8013cfc:	2303      	movs	r3, #3
 8013cfe:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8013d02:	2301      	movs	r3, #1
 8013d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013d08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013d0c:	a917      	add	r1, sp, #92	; 0x5c
 8013d0e:	2300      	movs	r3, #0
 8013d10:	a80b      	add	r0, sp, #44	; 0x2c
 8013d12:	f88d 301c 	strb.w	r3, [sp, #28]
 8013d16:	f7ff fe6b 	bl	80139f0 <ucdr_init_buffer>
 8013d1a:	a906      	add	r1, sp, #24
 8013d1c:	a80b      	add	r0, sp, #44	; 0x2c
 8013d1e:	f001 fec3 	bl	8015aa8 <uxr_serialize_OBJK_Topic_Binary>
 8013d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d24:	9316      	str	r3, [sp, #88]	; 0x58
 8013d26:	ac13      	add	r4, sp, #76	; 0x4c
 8013d28:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013d2c:	9600      	str	r6, [sp, #0]
 8013d2e:	9401      	str	r4, [sp, #4]
 8013d30:	b29b      	uxth	r3, r3
 8013d32:	4628      	mov	r0, r5
 8013d34:	f7ff ff70 	bl	8013c18 <uxr_common_create_entity>
 8013d38:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8013d3c:	bd70      	pop	{r4, r5, r6, pc}
 8013d3e:	bf00      	nop

08013d40 <uxr_buffer_create_publisher_bin>:
 8013d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d42:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8013d46:	4605      	mov	r5, r0
 8013d48:	9105      	str	r1, [sp, #20]
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	2603      	movs	r6, #3
 8013d4e:	a992      	add	r1, sp, #584	; 0x248
 8013d50:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013d54:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8013d58:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8013d5c:	f000 f8b8 	bl	8013ed0 <uxr_object_id_to_raw>
 8013d60:	2300      	movs	r3, #0
 8013d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013d66:	a912      	add	r1, sp, #72	; 0x48
 8013d68:	a806      	add	r0, sp, #24
 8013d6a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8013d6e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8013d72:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8013d76:	f7ff fe3b 	bl	80139f0 <ucdr_init_buffer>
 8013d7a:	a993      	add	r1, sp, #588	; 0x24c
 8013d7c:	a806      	add	r0, sp, #24
 8013d7e:	f001 ff47 	bl	8015c10 <uxr_serialize_OBJK_Publisher_Binary>
 8013d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d84:	9311      	str	r3, [sp, #68]	; 0x44
 8013d86:	ac0e      	add	r4, sp, #56	; 0x38
 8013d88:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013d8c:	9700      	str	r7, [sp, #0]
 8013d8e:	9401      	str	r4, [sp, #4]
 8013d90:	b29b      	uxth	r3, r3
 8013d92:	4628      	mov	r0, r5
 8013d94:	f7ff ff40 	bl	8013c18 <uxr_common_create_entity>
 8013d98:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8013d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d9e:	bf00      	nop

08013da0 <uxr_buffer_create_datawriter_bin>:
 8013da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013da4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013da8:	ac1d      	add	r4, sp, #116	; 0x74
 8013daa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013dae:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8013db2:	9105      	str	r1, [sp, #20]
 8013db4:	4606      	mov	r6, r0
 8013db6:	a9a1      	add	r1, sp, #644	; 0x284
 8013db8:	4618      	mov	r0, r3
 8013dba:	2305      	movs	r3, #5
 8013dbc:	7123      	strb	r3, [r4, #4]
 8013dbe:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8013dc2:	2703      	movs	r7, #3
 8013dc4:	f000 f884 	bl	8013ed0 <uxr_object_id_to_raw>
 8013dc8:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8013dca:	7227      	strb	r7, [r4, #8]
 8013dcc:	a90e      	add	r1, sp, #56	; 0x38
 8013dce:	f000 f87f 	bl	8013ed0 <uxr_object_id_to_raw>
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8013dd8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8013ddc:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8013de0:	3d00      	subs	r5, #0
 8013de2:	bf18      	it	ne
 8013de4:	2501      	movne	r5, #1
 8013de6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8013dea:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8013dee:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8013df2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013df6:	2301      	movs	r3, #1
 8013df8:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8013dfc:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013e00:	bb8a      	cbnz	r2, 8013e66 <uxr_buffer_create_datawriter_bin+0xc6>
 8013e02:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013e06:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8013e0a:	f04f 0c13 	mov.w	ip, #19
 8013e0e:	250b      	movs	r5, #11
 8013e10:	2221      	movs	r2, #33	; 0x21
 8013e12:	2111      	movs	r1, #17
 8013e14:	2009      	movs	r0, #9
 8013e16:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8013e1a:	b923      	cbnz	r3, 8013e26 <uxr_buffer_create_datawriter_bin+0x86>
 8013e1c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8013e20:	4672      	mov	r2, lr
 8013e22:	4661      	mov	r1, ip
 8013e24:	4628      	mov	r0, r5
 8013e26:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8013e2a:	2b01      	cmp	r3, #1
 8013e2c:	d025      	beq.n	8013e7a <uxr_buffer_create_datawriter_bin+0xda>
 8013e2e:	2b03      	cmp	r3, #3
 8013e30:	d029      	beq.n	8013e86 <uxr_buffer_create_datawriter_bin+0xe6>
 8013e32:	b32b      	cbz	r3, 8013e80 <uxr_buffer_create_datawriter_bin+0xe0>
 8013e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e38:	a921      	add	r1, sp, #132	; 0x84
 8013e3a:	a806      	add	r0, sp, #24
 8013e3c:	f7ff fdd8 	bl	80139f0 <ucdr_init_buffer>
 8013e40:	a90e      	add	r1, sp, #56	; 0x38
 8013e42:	a806      	add	r0, sp, #24
 8013e44:	f001 ff5a 	bl	8015cfc <uxr_serialize_OBJK_DataWriter_Binary>
 8013e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e4a:	f8cd 8000 	str.w	r8, [sp]
 8013e4e:	9401      	str	r4, [sp, #4]
 8013e50:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013e54:	60e3      	str	r3, [r4, #12]
 8013e56:	4630      	mov	r0, r6
 8013e58:	b29b      	uxth	r3, r3
 8013e5a:	f7ff fedd 	bl	8013c18 <uxr_common_create_entity>
 8013e5e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e66:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8013e6a:	f04f 0c12 	mov.w	ip, #18
 8013e6e:	250a      	movs	r5, #10
 8013e70:	2220      	movs	r2, #32
 8013e72:	2110      	movs	r1, #16
 8013e74:	2008      	movs	r0, #8
 8013e76:	2702      	movs	r7, #2
 8013e78:	e7cd      	b.n	8013e16 <uxr_buffer_create_datawriter_bin+0x76>
 8013e7a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8013e7e:	e7d9      	b.n	8013e34 <uxr_buffer_create_datawriter_bin+0x94>
 8013e80:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8013e84:	e7d6      	b.n	8013e34 <uxr_buffer_create_datawriter_bin+0x94>
 8013e86:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8013e8a:	e7d3      	b.n	8013e34 <uxr_buffer_create_datawriter_bin+0x94>

08013e8c <uxr_object_id>:
 8013e8c:	b082      	sub	sp, #8
 8013e8e:	2300      	movs	r3, #0
 8013e90:	f88d 1006 	strb.w	r1, [sp, #6]
 8013e94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013e98:	f360 030f 	bfi	r3, r0, #0, #16
 8013e9c:	f362 431f 	bfi	r3, r2, #16, #16
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	b002      	add	sp, #8
 8013ea4:	4770      	bx	lr
 8013ea6:	bf00      	nop

08013ea8 <uxr_object_id_from_raw>:
 8013ea8:	7843      	ldrb	r3, [r0, #1]
 8013eaa:	7801      	ldrb	r1, [r0, #0]
 8013eac:	b082      	sub	sp, #8
 8013eae:	f003 020f 	and.w	r2, r3, #15
 8013eb2:	f88d 2006 	strb.w	r2, [sp, #6]
 8013eb6:	091b      	lsrs	r3, r3, #4
 8013eb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013ebc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	f363 000f 	bfi	r0, r3, #0, #16
 8013ec6:	f362 401f 	bfi	r0, r2, #16, #16
 8013eca:	b002      	add	sp, #8
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop

08013ed0 <uxr_object_id_to_raw>:
 8013ed0:	4602      	mov	r2, r0
 8013ed2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8013edc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8013ee0:	f881 c000 	strb.w	ip, [r1]
 8013ee4:	7048      	strb	r0, [r1, #1]
 8013ee6:	b002      	add	sp, #8
 8013ee8:	4770      	bx	lr
 8013eea:	bf00      	nop

08013eec <on_get_fragmentation_info>:
 8013eec:	b500      	push	{lr}
 8013eee:	b08b      	sub	sp, #44	; 0x2c
 8013ef0:	4601      	mov	r1, r0
 8013ef2:	2204      	movs	r2, #4
 8013ef4:	a802      	add	r0, sp, #8
 8013ef6:	f7ff fd7b 	bl	80139f0 <ucdr_init_buffer>
 8013efa:	f10d 0305 	add.w	r3, sp, #5
 8013efe:	f10d 0206 	add.w	r2, sp, #6
 8013f02:	a901      	add	r1, sp, #4
 8013f04:	a802      	add	r0, sp, #8
 8013f06:	f001 f99b 	bl	8015240 <uxr_read_submessage_header>
 8013f0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013f0e:	2b0d      	cmp	r3, #13
 8013f10:	d003      	beq.n	8013f1a <on_get_fragmentation_info+0x2e>
 8013f12:	2000      	movs	r0, #0
 8013f14:	b00b      	add	sp, #44	; 0x2c
 8013f16:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013f1e:	f013 0f02 	tst.w	r3, #2
 8013f22:	bf14      	ite	ne
 8013f24:	2002      	movne	r0, #2
 8013f26:	2001      	moveq	r0, #1
 8013f28:	b00b      	add	sp, #44	; 0x2c
 8013f2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f2e:	bf00      	nop

08013f30 <read_submessage_get_info>:
 8013f30:	b570      	push	{r4, r5, r6, lr}
 8013f32:	2500      	movs	r5, #0
 8013f34:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8013f38:	4604      	mov	r4, r0
 8013f3a:	f44f 7224 	mov.w	r2, #656	; 0x290
 8013f3e:	460e      	mov	r6, r1
 8013f40:	a810      	add	r0, sp, #64	; 0x40
 8013f42:	4629      	mov	r1, r5
 8013f44:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8013f48:	f007 f8ec 	bl	801b124 <memset>
 8013f4c:	a903      	add	r1, sp, #12
 8013f4e:	4630      	mov	r0, r6
 8013f50:	f002 f94a 	bl	80161e8 <uxr_deserialize_GET_INFO_Payload>
 8013f54:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013f58:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	f000 ffe5 	bl	8014f2c <uxr_session_header_offset>
 8013f62:	462b      	mov	r3, r5
 8013f64:	9000      	str	r0, [sp, #0]
 8013f66:	220c      	movs	r2, #12
 8013f68:	a905      	add	r1, sp, #20
 8013f6a:	a808      	add	r0, sp, #32
 8013f6c:	f7ff fd2e 	bl	80139cc <ucdr_init_buffer_origin_offset>
 8013f70:	a910      	add	r1, sp, #64	; 0x40
 8013f72:	a808      	add	r0, sp, #32
 8013f74:	f002 f9aa 	bl	80162cc <uxr_serialize_INFO_Payload>
 8013f78:	9b08      	ldr	r3, [sp, #32]
 8013f7a:	462a      	mov	r2, r5
 8013f7c:	4629      	mov	r1, r5
 8013f7e:	4620      	mov	r0, r4
 8013f80:	f000 ff7e 	bl	8014e80 <uxr_stamp_session_header>
 8013f84:	a808      	add	r0, sp, #32
 8013f86:	f7ff fd5f 	bl	8013a48 <ucdr_buffer_length>
 8013f8a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013f8c:	4602      	mov	r2, r0
 8013f8e:	a905      	add	r1, sp, #20
 8013f90:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013f94:	47a0      	blx	r4
 8013f96:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8013f9a:	bd70      	pop	{r4, r5, r6, pc}

08013f9c <write_submessage_acknack.isra.0>:
 8013f9c:	b570      	push	{r4, r5, r6, lr}
 8013f9e:	b092      	sub	sp, #72	; 0x48
 8013fa0:	4605      	mov	r5, r0
 8013fa2:	460e      	mov	r6, r1
 8013fa4:	4614      	mov	r4, r2
 8013fa6:	f000 ffc1 	bl	8014f2c <uxr_session_header_offset>
 8013faa:	a905      	add	r1, sp, #20
 8013fac:	9000      	str	r0, [sp, #0]
 8013fae:	2300      	movs	r3, #0
 8013fb0:	a80a      	add	r0, sp, #40	; 0x28
 8013fb2:	2211      	movs	r2, #17
 8013fb4:	f7ff fd0a 	bl	80139cc <ucdr_init_buffer_origin_offset>
 8013fb8:	2218      	movs	r2, #24
 8013fba:	fb02 5404 	mla	r4, r2, r4, r5
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	2205      	movs	r2, #5
 8013fc2:	3450      	adds	r4, #80	; 0x50
 8013fc4:	210a      	movs	r1, #10
 8013fc6:	a80a      	add	r0, sp, #40	; 0x28
 8013fc8:	f001 f920 	bl	801520c <uxr_buffer_submessage_header>
 8013fcc:	a903      	add	r1, sp, #12
 8013fce:	4620      	mov	r0, r4
 8013fd0:	f005 f890 	bl	80190f4 <uxr_compute_acknack>
 8013fd4:	ba40      	rev16	r0, r0
 8013fd6:	f8ad 000e 	strh.w	r0, [sp, #14]
 8013fda:	a903      	add	r1, sp, #12
 8013fdc:	a80a      	add	r0, sp, #40	; 0x28
 8013fde:	f88d 6010 	strb.w	r6, [sp, #16]
 8013fe2:	f002 f9e3 	bl	80163ac <uxr_serialize_ACKNACK_Payload>
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fea:	4611      	mov	r1, r2
 8013fec:	4628      	mov	r0, r5
 8013fee:	f000 ff47 	bl	8014e80 <uxr_stamp_session_header>
 8013ff2:	a80a      	add	r0, sp, #40	; 0x28
 8013ff4:	f7ff fd28 	bl	8013a48 <ucdr_buffer_length>
 8013ff8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8013ffa:	4602      	mov	r2, r0
 8013ffc:	a905      	add	r1, sp, #20
 8013ffe:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014002:	47a0      	blx	r4
 8014004:	b012      	add	sp, #72	; 0x48
 8014006:	bd70      	pop	{r4, r5, r6, pc}

08014008 <uxr_init_session>:
 8014008:	b510      	push	{r4, lr}
 801400a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8014040 <uxr_init_session+0x38>
 801400e:	2300      	movs	r3, #0
 8014010:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8014014:	4604      	mov	r4, r0
 8014016:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 801401a:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 801401e:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8014022:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8014026:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 801402a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801402e:	2181      	movs	r1, #129	; 0x81
 8014030:	f000 fe92 	bl	8014d58 <uxr_init_session_info>
 8014034:	f104 0008 	add.w	r0, r4, #8
 8014038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801403c:	f001 b802 	b.w	8015044 <uxr_init_stream_storage>
	...

08014048 <uxr_set_status_callback>:
 8014048:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 801404c:	4770      	bx	lr
 801404e:	bf00      	nop

08014050 <uxr_set_topic_callback>:
 8014050:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8014054:	4770      	bx	lr
 8014056:	bf00      	nop

08014058 <uxr_set_request_callback>:
 8014058:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 801405c:	4770      	bx	lr
 801405e:	bf00      	nop

08014060 <uxr_set_reply_callback>:
 8014060:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8014064:	4770      	bx	lr
 8014066:	bf00      	nop

08014068 <uxr_create_output_best_effort_stream>:
 8014068:	b510      	push	{r4, lr}
 801406a:	b084      	sub	sp, #16
 801406c:	e9cd 2100 	strd	r2, r1, [sp]
 8014070:	4604      	mov	r4, r0
 8014072:	f000 ff5b 	bl	8014f2c <uxr_session_header_offset>
 8014076:	e9dd 2100 	ldrd	r2, r1, [sp]
 801407a:	4603      	mov	r3, r0
 801407c:	f104 0008 	add.w	r0, r4, #8
 8014080:	b004      	add	sp, #16
 8014082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014086:	f001 b827 	b.w	80150d8 <uxr_add_output_best_effort_buffer>
 801408a:	bf00      	nop

0801408c <uxr_create_output_reliable_stream>:
 801408c:	b510      	push	{r4, lr}
 801408e:	b088      	sub	sp, #32
 8014090:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8014094:	4604      	mov	r4, r0
 8014096:	9303      	str	r3, [sp, #12]
 8014098:	f000 ff48 	bl	8014f2c <uxr_session_header_offset>
 801409c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80140a0:	9000      	str	r0, [sp, #0]
 80140a2:	9905      	ldr	r1, [sp, #20]
 80140a4:	f104 0008 	add.w	r0, r4, #8
 80140a8:	f001 f82a 	bl	8015100 <uxr_add_output_reliable_buffer>
 80140ac:	2200      	movs	r2, #0
 80140ae:	b2c3      	uxtb	r3, r0
 80140b0:	f363 0207 	bfi	r2, r3, #0, #8
 80140b4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80140b8:	f363 220f 	bfi	r2, r3, #8, #8
 80140bc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80140c0:	f363 4217 	bfi	r2, r3, #16, #8
 80140c4:	0e03      	lsrs	r3, r0, #24
 80140c6:	f363 621f 	bfi	r2, r3, #24, #8
 80140ca:	4610      	mov	r0, r2
 80140cc:	b008      	add	sp, #32
 80140ce:	bd10      	pop	{r4, pc}

080140d0 <uxr_create_input_best_effort_stream>:
 80140d0:	b082      	sub	sp, #8
 80140d2:	3008      	adds	r0, #8
 80140d4:	b002      	add	sp, #8
 80140d6:	f001 b82d 	b.w	8015134 <uxr_add_input_best_effort_buffer>
 80140da:	bf00      	nop

080140dc <uxr_create_input_reliable_stream>:
 80140dc:	b510      	push	{r4, lr}
 80140de:	b084      	sub	sp, #16
 80140e0:	4c0b      	ldr	r4, [pc, #44]	; (8014110 <uxr_create_input_reliable_stream+0x34>)
 80140e2:	9400      	str	r4, [sp, #0]
 80140e4:	3008      	adds	r0, #8
 80140e6:	f001 f83b 	bl	8015160 <uxr_add_input_reliable_buffer>
 80140ea:	2200      	movs	r2, #0
 80140ec:	b2c3      	uxtb	r3, r0
 80140ee:	f363 0207 	bfi	r2, r3, #0, #8
 80140f2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80140f6:	f363 220f 	bfi	r2, r3, #8, #8
 80140fa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80140fe:	f363 4217 	bfi	r2, r3, #16, #8
 8014102:	0e03      	lsrs	r3, r0, #24
 8014104:	f363 621f 	bfi	r2, r3, #24, #8
 8014108:	4610      	mov	r0, r2
 801410a:	b004      	add	sp, #16
 801410c:	bd10      	pop	{r4, pc}
 801410e:	bf00      	nop
 8014110:	08013eed 	.word	0x08013eed

08014114 <uxr_epoch_nanos>:
 8014114:	b510      	push	{r4, lr}
 8014116:	4604      	mov	r4, r0
 8014118:	f001 f8d8 	bl	80152cc <uxr_nanos>
 801411c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8014120:	1ac0      	subs	r0, r0, r3
 8014122:	eb61 0102 	sbc.w	r1, r1, r2
 8014126:	bd10      	pop	{r4, pc}

08014128 <uxr_flash_output_streams>:
 8014128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801412c:	7e03      	ldrb	r3, [r0, #24]
 801412e:	b084      	sub	sp, #16
 8014130:	4604      	mov	r4, r0
 8014132:	2b00      	cmp	r3, #0
 8014134:	d035      	beq.n	80141a2 <uxr_flash_output_streams+0x7a>
 8014136:	f04f 0900 	mov.w	r9, #0
 801413a:	4648      	mov	r0, r9
 801413c:	f10d 0802 	add.w	r8, sp, #2
 8014140:	af03      	add	r7, sp, #12
 8014142:	ae02      	add	r6, sp, #8
 8014144:	e006      	b.n	8014154 <uxr_flash_output_streams+0x2c>
 8014146:	7e23      	ldrb	r3, [r4, #24]
 8014148:	f109 0901 	add.w	r9, r9, #1
 801414c:	fa5f f089 	uxtb.w	r0, r9
 8014150:	4283      	cmp	r3, r0
 8014152:	d926      	bls.n	80141a2 <uxr_flash_output_streams+0x7a>
 8014154:	2201      	movs	r2, #1
 8014156:	4611      	mov	r1, r2
 8014158:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801415c:	f000 ff1e 	bl	8014f9c <uxr_stream_id>
 8014160:	3508      	adds	r5, #8
 8014162:	4684      	mov	ip, r0
 8014164:	4643      	mov	r3, r8
 8014166:	463a      	mov	r2, r7
 8014168:	4631      	mov	r1, r6
 801416a:	4628      	mov	r0, r5
 801416c:	f8cd c004 	str.w	ip, [sp, #4]
 8014170:	f005 f846 	bl	8019200 <uxr_prepare_best_effort_buffer_to_send>
 8014174:	2800      	cmp	r0, #0
 8014176:	d0e6      	beq.n	8014146 <uxr_flash_output_streams+0x1e>
 8014178:	9b02      	ldr	r3, [sp, #8]
 801417a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801417e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014182:	4620      	mov	r0, r4
 8014184:	f000 fe7c 	bl	8014e80 <uxr_stamp_session_header>
 8014188:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801418a:	9a03      	ldr	r2, [sp, #12]
 801418c:	685d      	ldr	r5, [r3, #4]
 801418e:	6818      	ldr	r0, [r3, #0]
 8014190:	9902      	ldr	r1, [sp, #8]
 8014192:	47a8      	blx	r5
 8014194:	f109 0901 	add.w	r9, r9, #1
 8014198:	7e23      	ldrb	r3, [r4, #24]
 801419a:	fa5f f089 	uxtb.w	r0, r9
 801419e:	4283      	cmp	r3, r0
 80141a0:	d8d8      	bhi.n	8014154 <uxr_flash_output_streams+0x2c>
 80141a2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80141a6:	b38b      	cbz	r3, 801420c <uxr_flash_output_streams+0xe4>
 80141a8:	f04f 0900 	mov.w	r9, #0
 80141ac:	f10d 0802 	add.w	r8, sp, #2
 80141b0:	af03      	add	r7, sp, #12
 80141b2:	ae02      	add	r6, sp, #8
 80141b4:	4648      	mov	r0, r9
 80141b6:	2201      	movs	r2, #1
 80141b8:	2102      	movs	r1, #2
 80141ba:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80141be:	f000 feed 	bl	8014f9c <uxr_stream_id>
 80141c2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80141c6:	3520      	adds	r5, #32
 80141c8:	9001      	str	r0, [sp, #4]
 80141ca:	e00d      	b.n	80141e8 <uxr_flash_output_streams+0xc0>
 80141cc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80141d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80141d4:	9b02      	ldr	r3, [sp, #8]
 80141d6:	f000 fe53 	bl	8014e80 <uxr_stamp_session_header>
 80141da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80141dc:	9a03      	ldr	r2, [sp, #12]
 80141de:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80141e2:	9902      	ldr	r1, [sp, #8]
 80141e4:	6818      	ldr	r0, [r3, #0]
 80141e6:	47d0      	blx	sl
 80141e8:	4643      	mov	r3, r8
 80141ea:	463a      	mov	r2, r7
 80141ec:	4631      	mov	r1, r6
 80141ee:	4628      	mov	r0, r5
 80141f0:	f005 fa12 	bl	8019618 <uxr_prepare_next_reliable_buffer_to_send>
 80141f4:	4603      	mov	r3, r0
 80141f6:	4620      	mov	r0, r4
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d1e7      	bne.n	80141cc <uxr_flash_output_streams+0xa4>
 80141fc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014200:	f109 0901 	add.w	r9, r9, #1
 8014204:	fa5f f089 	uxtb.w	r0, r9
 8014208:	4283      	cmp	r3, r0
 801420a:	d8d4      	bhi.n	80141b6 <uxr_flash_output_streams+0x8e>
 801420c:	b004      	add	sp, #16
 801420e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014212:	bf00      	nop

08014214 <read_submessage_info>:
 8014214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014218:	460d      	mov	r5, r1
 801421a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801421e:	4669      	mov	r1, sp
 8014220:	4607      	mov	r7, r0
 8014222:	4628      	mov	r0, r5
 8014224:	f001 feee 	bl	8016004 <uxr_deserialize_BaseObjectReply>
 8014228:	a902      	add	r1, sp, #8
 801422a:	4604      	mov	r4, r0
 801422c:	4628      	mov	r0, r5
 801422e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8014232:	f7fd fe95 	bl	8011f60 <ucdr_deserialize_bool>
 8014236:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801423a:	4004      	ands	r4, r0
 801423c:	b2e4      	uxtb	r4, r4
 801423e:	b95b      	cbnz	r3, 8014258 <read_submessage_info+0x44>
 8014240:	a987      	add	r1, sp, #540	; 0x21c
 8014242:	4628      	mov	r0, r5
 8014244:	f7fd fe8c 	bl	8011f60 <ucdr_deserialize_bool>
 8014248:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 801424c:	4606      	mov	r6, r0
 801424e:	b94b      	cbnz	r3, 8014264 <read_submessage_info+0x50>
 8014250:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8014254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014258:	a903      	add	r1, sp, #12
 801425a:	4628      	mov	r0, r5
 801425c:	f001 fd7a 	bl	8015d54 <uxr_deserialize_ObjectVariant>
 8014260:	4004      	ands	r4, r0
 8014262:	e7ed      	b.n	8014240 <read_submessage_info+0x2c>
 8014264:	a988      	add	r1, sp, #544	; 0x220
 8014266:	4628      	mov	r0, r5
 8014268:	f7fd fea8 	bl	8011fbc <ucdr_deserialize_uint8_t>
 801426c:	4234      	tst	r4, r6
 801426e:	d0ef      	beq.n	8014250 <read_submessage_info+0x3c>
 8014270:	2800      	cmp	r0, #0
 8014272:	d0ed      	beq.n	8014250 <read_submessage_info+0x3c>
 8014274:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8014278:	2b0d      	cmp	r3, #13
 801427a:	d1e9      	bne.n	8014250 <read_submessage_info+0x3c>
 801427c:	a98a      	add	r1, sp, #552	; 0x228
 801427e:	4628      	mov	r0, r5
 8014280:	f7fe fc42 	bl	8012b08 <ucdr_deserialize_int16_t>
 8014284:	b140      	cbz	r0, 8014298 <read_submessage_info+0x84>
 8014286:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801428a:	2b00      	cmp	r3, #0
 801428c:	dd07      	ble.n	801429e <read_submessage_info+0x8a>
 801428e:	f1b8 0f00 	cmp.w	r8, #0
 8014292:	bf14      	ite	ne
 8014294:	2001      	movne	r0, #1
 8014296:	2002      	moveq	r0, #2
 8014298:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 801429c:	e7d8      	b.n	8014250 <read_submessage_info+0x3c>
 801429e:	2000      	movs	r0, #0
 80142a0:	e7fa      	b.n	8014298 <read_submessage_info+0x84>
 80142a2:	bf00      	nop

080142a4 <read_submessage_list>:
 80142a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142a8:	b097      	sub	sp, #92	; 0x5c
 80142aa:	4ec1      	ldr	r6, [pc, #772]	; (80145b0 <read_submessage_list+0x30c>)
 80142ac:	9209      	str	r2, [sp, #36]	; 0x24
 80142ae:	4604      	mov	r4, r0
 80142b0:	460d      	mov	r5, r1
 80142b2:	f04f 0801 	mov.w	r8, #1
 80142b6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80142ba:	aa0c      	add	r2, sp, #48	; 0x30
 80142bc:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80142c0:	4628      	mov	r0, r5
 80142c2:	f000 ffbd 	bl	8015240 <uxr_read_submessage_header>
 80142c6:	2800      	cmp	r0, #0
 80142c8:	f000 813e 	beq.w	8014548 <read_submessage_list+0x2a4>
 80142cc:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80142d0:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 80142d4:	3b02      	subs	r3, #2
 80142d6:	2b0d      	cmp	r3, #13
 80142d8:	d8ed      	bhi.n	80142b6 <read_submessage_list+0x12>
 80142da:	a101      	add	r1, pc, #4	; (adr r1, 80142e0 <read_submessage_list+0x3c>)
 80142dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80142e0:	0801453f 	.word	0x0801453f
 80142e4:	080142b7 	.word	0x080142b7
 80142e8:	0801452f 	.word	0x0801452f
 80142ec:	080144cd 	.word	0x080144cd
 80142f0:	080144c3 	.word	0x080144c3
 80142f4:	080142b7 	.word	0x080142b7
 80142f8:	080142b7 	.word	0x080142b7
 80142fc:	08014423 	.word	0x08014423
 8014300:	080143b3 	.word	0x080143b3
 8014304:	08014373 	.word	0x08014373
 8014308:	080142b7 	.word	0x080142b7
 801430c:	080142b7 	.word	0x080142b7
 8014310:	080142b7 	.word	0x080142b7
 8014314:	08014319 	.word	0x08014319
 8014318:	a910      	add	r1, sp, #64	; 0x40
 801431a:	4628      	mov	r0, r5
 801431c:	f002 f896 	bl	801644c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8014320:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 8014324:	f1b9 0f00 	cmp.w	r9, #0
 8014328:	f000 8116 	beq.w	8014558 <read_submessage_list+0x2b4>
 801432c:	f000 ffce 	bl	80152cc <uxr_nanos>
 8014330:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8014332:	4602      	mov	r2, r0
 8014334:	460b      	mov	r3, r1
 8014336:	9814      	ldr	r0, [sp, #80]	; 0x50
 8014338:	2100      	movs	r1, #0
 801433a:	468c      	mov	ip, r1
 801433c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8014340:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8014344:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014346:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014348:	468c      	mov	ip, r1
 801434a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801434e:	46e2      	mov	sl, ip
 8014350:	46bc      	mov	ip, r7
 8014352:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 8014356:	fbc0 7106 	smlal	r7, r1, r0, r6
 801435a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 801435e:	e9cd 7100 	strd	r7, r1, [sp]
 8014362:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8014366:	9106      	str	r1, [sp, #24]
 8014368:	4620      	mov	r0, r4
 801436a:	47c8      	blx	r9
 801436c:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 8014370:	e7a1      	b.n	80142b6 <read_submessage_list+0x12>
 8014372:	a910      	add	r1, sp, #64	; 0x40
 8014374:	4628      	mov	r0, r5
 8014376:	f002 f857 	bl	8016428 <uxr_deserialize_HEARTBEAT_Payload>
 801437a:	2100      	movs	r1, #0
 801437c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8014380:	f000 fe36 	bl	8014ff0 <uxr_stream_id_from_raw>
 8014384:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8014388:	900f      	str	r0, [sp, #60]	; 0x3c
 801438a:	4639      	mov	r1, r7
 801438c:	f104 0008 	add.w	r0, r4, #8
 8014390:	f000 ff1c 	bl	80151cc <uxr_get_input_reliable_stream>
 8014394:	2800      	cmp	r0, #0
 8014396:	d08e      	beq.n	80142b6 <read_submessage_list+0x12>
 8014398:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 801439c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80143a0:	f004 fe9c 	bl	80190dc <uxr_process_heartbeat>
 80143a4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80143a8:	463a      	mov	r2, r7
 80143aa:	4620      	mov	r0, r4
 80143ac:	f7ff fdf6 	bl	8013f9c <write_submessage_acknack.isra.0>
 80143b0:	e781      	b.n	80142b6 <read_submessage_list+0x12>
 80143b2:	a910      	add	r1, sp, #64	; 0x40
 80143b4:	4628      	mov	r0, r5
 80143b6:	f002 f80f 	bl	80163d8 <uxr_deserialize_ACKNACK_Payload>
 80143ba:	2100      	movs	r1, #0
 80143bc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80143c0:	f000 fe16 	bl	8014ff0 <uxr_stream_id_from_raw>
 80143c4:	900d      	str	r0, [sp, #52]	; 0x34
 80143c6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80143ca:	f104 0008 	add.w	r0, r4, #8
 80143ce:	f000 fee9 	bl	80151a4 <uxr_get_output_reliable_stream>
 80143d2:	4607      	mov	r7, r0
 80143d4:	2800      	cmp	r0, #0
 80143d6:	f43f af6e 	beq.w	80142b6 <read_submessage_list+0x12>
 80143da:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80143de:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 80143e2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80143e6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80143ea:	b289      	uxth	r1, r1
 80143ec:	f005 f9be 	bl	801976c <uxr_process_acknack>
 80143f0:	4638      	mov	r0, r7
 80143f2:	f005 f97b 	bl	80196ec <uxr_begin_output_nack_buffer_it>
 80143f6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80143fa:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 80143fe:	e006      	b.n	801440e <read_submessage_list+0x16a>
 8014400:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014402:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014404:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8014408:	990e      	ldr	r1, [sp, #56]	; 0x38
 801440a:	6818      	ldr	r0, [r3, #0]
 801440c:	47c8      	blx	r9
 801440e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8014412:	aa0f      	add	r2, sp, #60	; 0x3c
 8014414:	4651      	mov	r1, sl
 8014416:	4638      	mov	r0, r7
 8014418:	f005 f96a 	bl	80196f0 <uxr_next_reliable_nack_buffer_to_send>
 801441c:	2800      	cmp	r0, #0
 801441e:	d1ef      	bne.n	8014400 <read_submessage_list+0x15c>
 8014420:	e749      	b.n	80142b6 <read_submessage_list+0x12>
 8014422:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8014426:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801442a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801442e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8014432:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8014436:	4651      	mov	r1, sl
 8014438:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801443c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8014440:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8014444:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8014448:	4628      	mov	r0, r5
 801444a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801444e:	f001 fd23 	bl	8015e98 <uxr_deserialize_BaseObjectRequest>
 8014452:	4650      	mov	r0, sl
 8014454:	a90f      	add	r1, sp, #60	; 0x3c
 8014456:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801445a:	f000 fd8d 	bl	8014f78 <uxr_parse_base_object_request>
 801445e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8014462:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014464:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8014468:	9110      	str	r1, [sp, #64]	; 0x40
 801446a:	3f04      	subs	r7, #4
 801446c:	f009 090e 	and.w	r9, r9, #14
 8014470:	b2bf      	uxth	r7, r7
 8014472:	f1bb 0f00 	cmp.w	fp, #0
 8014476:	d006      	beq.n	8014486 <read_submessage_list+0x1e2>
 8014478:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801447c:	9300      	str	r3, [sp, #0]
 801447e:	4652      	mov	r2, sl
 8014480:	2300      	movs	r3, #0
 8014482:	4620      	mov	r0, r4
 8014484:	47d8      	blx	fp
 8014486:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8014488:	b16a      	cbz	r2, 80144a6 <read_submessage_list+0x202>
 801448a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801448c:	2100      	movs	r1, #0
 801448e:	3802      	subs	r0, #2
 8014490:	e002      	b.n	8014498 <read_submessage_list+0x1f4>
 8014492:	3101      	adds	r1, #1
 8014494:	4291      	cmp	r1, r2
 8014496:	d006      	beq.n	80144a6 <read_submessage_list+0x202>
 8014498:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801449c:	4553      	cmp	r3, sl
 801449e:	d1f8      	bne.n	8014492 <read_submessage_list+0x1ee>
 80144a0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80144a2:	2200      	movs	r2, #0
 80144a4:	545a      	strb	r2, [r3, r1]
 80144a6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80144aa:	9102      	str	r1, [sp, #8]
 80144ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80144ae:	9101      	str	r1, [sp, #4]
 80144b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80144b2:	9100      	str	r1, [sp, #0]
 80144b4:	464b      	mov	r3, r9
 80144b6:	463a      	mov	r2, r7
 80144b8:	4629      	mov	r1, r5
 80144ba:	4620      	mov	r0, r4
 80144bc:	f005 f9da 	bl	8019874 <read_submessage_format>
 80144c0:	e6f9      	b.n	80142b6 <read_submessage_list+0x12>
 80144c2:	4629      	mov	r1, r5
 80144c4:	4620      	mov	r0, r4
 80144c6:	f7ff fea5 	bl	8014214 <read_submessage_info>
 80144ca:	e6f4      	b.n	80142b6 <read_submessage_list+0x12>
 80144cc:	2a00      	cmp	r2, #0
 80144ce:	d03e      	beq.n	801454e <read_submessage_list+0x2aa>
 80144d0:	a910      	add	r1, sp, #64	; 0x40
 80144d2:	4628      	mov	r0, r5
 80144d4:	f001 fedc 	bl	8016290 <uxr_deserialize_STATUS_Payload>
 80144d8:	a90e      	add	r1, sp, #56	; 0x38
 80144da:	aa0d      	add	r2, sp, #52	; 0x34
 80144dc:	a810      	add	r0, sp, #64	; 0x40
 80144de:	f000 fd4b 	bl	8014f78 <uxr_parse_base_object_request>
 80144e2:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 80144e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80144e8:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 80144ec:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 80144f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80144f2:	f1ba 0f00 	cmp.w	sl, #0
 80144f6:	d006      	beq.n	8014506 <read_submessage_list+0x262>
 80144f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80144fc:	9300      	str	r3, [sp, #0]
 80144fe:	463a      	mov	r2, r7
 8014500:	464b      	mov	r3, r9
 8014502:	4620      	mov	r0, r4
 8014504:	47d0      	blx	sl
 8014506:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8014508:	2a00      	cmp	r2, #0
 801450a:	f43f aed4 	beq.w	80142b6 <read_submessage_list+0x12>
 801450e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8014510:	2100      	movs	r1, #0
 8014512:	3802      	subs	r0, #2
 8014514:	e003      	b.n	801451e <read_submessage_list+0x27a>
 8014516:	3101      	adds	r1, #1
 8014518:	4291      	cmp	r1, r2
 801451a:	f43f aecc 	beq.w	80142b6 <read_submessage_list+0x12>
 801451e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8014522:	42bb      	cmp	r3, r7
 8014524:	d1f7      	bne.n	8014516 <read_submessage_list+0x272>
 8014526:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014528:	f803 9001 	strb.w	r9, [r3, r1]
 801452c:	e6c3      	b.n	80142b6 <read_submessage_list+0x12>
 801452e:	2a00      	cmp	r2, #0
 8014530:	f47f aec1 	bne.w	80142b6 <read_submessage_list+0x12>
 8014534:	4629      	mov	r1, r5
 8014536:	4620      	mov	r0, r4
 8014538:	f000 fc64 	bl	8014e04 <uxr_read_create_session_status>
 801453c:	e6bb      	b.n	80142b6 <read_submessage_list+0x12>
 801453e:	4629      	mov	r1, r5
 8014540:	4620      	mov	r0, r4
 8014542:	f7ff fcf5 	bl	8013f30 <read_submessage_get_info>
 8014546:	e6b6      	b.n	80142b6 <read_submessage_list+0x12>
 8014548:	b017      	add	sp, #92	; 0x5c
 801454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801454e:	4629      	mov	r1, r5
 8014550:	4620      	mov	r0, r4
 8014552:	f000 fc63 	bl	8014e1c <uxr_read_delete_session_status>
 8014556:	e6ae      	b.n	80142b6 <read_submessage_list+0x12>
 8014558:	f000 feb8 	bl	80152cc <uxr_nanos>
 801455c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801455e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014560:	464f      	mov	r7, r9
 8014562:	fbc3 2706 	smlal	r2, r7, r3, r6
 8014566:	1812      	adds	r2, r2, r0
 8014568:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801456a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801456c:	eb47 0101 	adc.w	r1, r7, r1
 8014570:	464f      	mov	r7, r9
 8014572:	fbc3 0706 	smlal	r0, r7, r3, r6
 8014576:	463b      	mov	r3, r7
 8014578:	4684      	mov	ip, r0
 801457a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801457e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8014582:	eb1c 0c00 	adds.w	ip, ip, r0
 8014586:	464f      	mov	r7, r9
 8014588:	eb43 0307 	adc.w	r3, r3, r7
 801458c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8014590:	eb61 0303 	sbc.w	r3, r1, r3
 8014594:	0fda      	lsrs	r2, r3, #31
 8014596:	eb12 020c 	adds.w	r2, r2, ip
 801459a:	f143 0300 	adc.w	r3, r3, #0
 801459e:	0852      	lsrs	r2, r2, #1
 80145a0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80145a4:	105b      	asrs	r3, r3, #1
 80145a6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 80145aa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 80145ae:	e6dd      	b.n	801436c <read_submessage_list+0xc8>
 80145b0:	3b9aca00 	.word	0x3b9aca00

080145b4 <listen_message_reliably>:
 80145b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145b8:	1e0b      	subs	r3, r1, #0
 80145ba:	b09d      	sub	sp, #116	; 0x74
 80145bc:	bfb8      	it	lt
 80145be:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80145c2:	4680      	mov	r8, r0
 80145c4:	9305      	str	r3, [sp, #20]
 80145c6:	f000 fe67 	bl	8015298 <uxr_millis>
 80145ca:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 80145ce:	4681      	mov	r9, r0
 80145d0:	2a00      	cmp	r2, #0
 80145d2:	f000 80a1 	beq.w	8014718 <listen_message_reliably+0x164>
 80145d6:	2600      	movs	r6, #0
 80145d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80145dc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80145e0:	9303      	str	r3, [sp, #12]
 80145e2:	4630      	mov	r0, r6
 80145e4:	460f      	mov	r7, r1
 80145e6:	e00f      	b.n	8014608 <listen_message_reliably+0x54>
 80145e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80145ec:	9903      	ldr	r1, [sp, #12]
 80145ee:	455a      	cmp	r2, fp
 80145f0:	f106 0601 	add.w	r6, r6, #1
 80145f4:	eb73 0101 	sbcs.w	r1, r3, r1
 80145f8:	b2f0      	uxtb	r0, r6
 80145fa:	da01      	bge.n	8014600 <listen_message_reliably+0x4c>
 80145fc:	4693      	mov	fp, r2
 80145fe:	9303      	str	r3, [sp, #12]
 8014600:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8014604:	4283      	cmp	r3, r0
 8014606:	d960      	bls.n	80146ca <listen_message_reliably+0x116>
 8014608:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801460c:	2102      	movs	r1, #2
 801460e:	2201      	movs	r2, #1
 8014610:	f000 fcc4 	bl	8014f9c <uxr_stream_id>
 8014614:	00e4      	lsls	r4, r4, #3
 8014616:	f104 0520 	add.w	r5, r4, #32
 801461a:	4445      	add	r5, r8
 801461c:	4601      	mov	r1, r0
 801461e:	463b      	mov	r3, r7
 8014620:	464a      	mov	r2, r9
 8014622:	4628      	mov	r0, r5
 8014624:	9109      	str	r1, [sp, #36]	; 0x24
 8014626:	f005 f837 	bl	8019698 <uxr_update_output_stream_heartbeat_timestamp>
 801462a:	eb08 0304 	add.w	r3, r8, r4
 801462e:	2800      	cmp	r0, #0
 8014630:	d0da      	beq.n	80145e8 <listen_message_reliably+0x34>
 8014632:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014636:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 801463a:	9304      	str	r3, [sp, #16]
 801463c:	4640      	mov	r0, r8
 801463e:	f000 fc75 	bl	8014f2c <uxr_session_header_offset>
 8014642:	3501      	adds	r5, #1
 8014644:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8014648:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801464c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8014650:	2300      	movs	r3, #0
 8014652:	2211      	movs	r2, #17
 8014654:	9000      	str	r0, [sp, #0]
 8014656:	a90c      	add	r1, sp, #48	; 0x30
 8014658:	4650      	mov	r0, sl
 801465a:	f7ff f9b7 	bl	80139cc <ucdr_init_buffer_origin_offset>
 801465e:	2300      	movs	r3, #0
 8014660:	2205      	movs	r2, #5
 8014662:	210b      	movs	r1, #11
 8014664:	4650      	mov	r0, sl
 8014666:	f000 fdd1 	bl	801520c <uxr_buffer_submessage_header>
 801466a:	8968      	ldrh	r0, [r5, #10]
 801466c:	2101      	movs	r1, #1
 801466e:	f005 f9cb 	bl	8019a08 <uxr_seq_num_add>
 8014672:	892b      	ldrh	r3, [r5, #8]
 8014674:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8014678:	4602      	mov	r2, r0
 801467a:	9b04      	ldr	r3, [sp, #16]
 801467c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8014680:	a90a      	add	r1, sp, #40	; 0x28
 8014682:	4650      	mov	r0, sl
 8014684:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8014688:	f001 feba 	bl	8016400 <uxr_serialize_HEARTBEAT_Payload>
 801468c:	2200      	movs	r2, #0
 801468e:	4611      	mov	r1, r2
 8014690:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014692:	4640      	mov	r0, r8
 8014694:	f000 fbf4 	bl	8014e80 <uxr_stamp_session_header>
 8014698:	4650      	mov	r0, sl
 801469a:	f7ff f9d5 	bl	8013a48 <ucdr_buffer_length>
 801469e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80146a2:	4602      	mov	r2, r0
 80146a4:	a90c      	add	r1, sp, #48	; 0x30
 80146a6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80146aa:	4444      	add	r4, r8
 80146ac:	47a8      	blx	r5
 80146ae:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80146b2:	9903      	ldr	r1, [sp, #12]
 80146b4:	455a      	cmp	r2, fp
 80146b6:	f106 0601 	add.w	r6, r6, #1
 80146ba:	eb73 0101 	sbcs.w	r1, r3, r1
 80146be:	b2f0      	uxtb	r0, r6
 80146c0:	db9c      	blt.n	80145fc <listen_message_reliably+0x48>
 80146c2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80146c6:	4283      	cmp	r3, r0
 80146c8:	d89e      	bhi.n	8014608 <listen_message_reliably+0x54>
 80146ca:	9a03      	ldr	r2, [sp, #12]
 80146cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80146d0:	429a      	cmp	r2, r3
 80146d2:	bf08      	it	eq
 80146d4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 80146d8:	d01e      	beq.n	8014718 <listen_message_reliably+0x164>
 80146da:	ebab 0309 	sub.w	r3, fp, r9
 80146de:	9905      	ldr	r1, [sp, #20]
 80146e0:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	bf08      	it	eq
 80146e8:	2301      	moveq	r3, #1
 80146ea:	4299      	cmp	r1, r3
 80146ec:	bfa8      	it	ge
 80146ee:	4619      	movge	r1, r3
 80146f0:	6894      	ldr	r4, [r2, #8]
 80146f2:	6810      	ldr	r0, [r2, #0]
 80146f4:	4689      	mov	r9, r1
 80146f6:	460b      	mov	r3, r1
 80146f8:	aa08      	add	r2, sp, #32
 80146fa:	a907      	add	r1, sp, #28
 80146fc:	47a0      	blx	r4
 80146fe:	b968      	cbnz	r0, 801471c <listen_message_reliably+0x168>
 8014700:	9b05      	ldr	r3, [sp, #20]
 8014702:	eba3 0309 	sub.w	r3, r3, r9
 8014706:	2b00      	cmp	r3, #0
 8014708:	9305      	str	r3, [sp, #20]
 801470a:	f73f af5c 	bgt.w	80145c6 <listen_message_reliably+0x12>
 801470e:	4604      	mov	r4, r0
 8014710:	4620      	mov	r0, r4
 8014712:	b01d      	add	sp, #116	; 0x74
 8014714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014718:	9b05      	ldr	r3, [sp, #20]
 801471a:	e7e0      	b.n	80146de <listen_message_reliably+0x12a>
 801471c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014720:	4604      	mov	r4, r0
 8014722:	a80c      	add	r0, sp, #48	; 0x30
 8014724:	f7ff f964 	bl	80139f0 <ucdr_init_buffer>
 8014728:	2500      	movs	r5, #0
 801472a:	f10d 031a 	add.w	r3, sp, #26
 801472e:	aa06      	add	r2, sp, #24
 8014730:	a90c      	add	r1, sp, #48	; 0x30
 8014732:	4640      	mov	r0, r8
 8014734:	f88d 5018 	strb.w	r5, [sp, #24]
 8014738:	f000 fbb6 	bl	8014ea8 <uxr_read_session_header>
 801473c:	b918      	cbnz	r0, 8014746 <listen_message_reliably+0x192>
 801473e:	4620      	mov	r0, r4
 8014740:	b01d      	add	sp, #116	; 0x74
 8014742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014746:	4629      	mov	r1, r5
 8014748:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801474c:	f000 fc50 	bl	8014ff0 <uxr_stream_id_from_raw>
 8014750:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8014754:	2d01      	cmp	r5, #1
 8014756:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 801475a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801475e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8014762:	d04b      	beq.n	80147fc <listen_message_reliably+0x248>
 8014764:	2d02      	cmp	r5, #2
 8014766:	d00f      	beq.n	8014788 <listen_message_reliably+0x1d4>
 8014768:	2d00      	cmp	r5, #0
 801476a:	d1e8      	bne.n	801473e <listen_message_reliably+0x18a>
 801476c:	4629      	mov	r1, r5
 801476e:	4628      	mov	r0, r5
 8014770:	f000 fc3e 	bl	8014ff0 <uxr_stream_id_from_raw>
 8014774:	a90c      	add	r1, sp, #48	; 0x30
 8014776:	4602      	mov	r2, r0
 8014778:	4640      	mov	r0, r8
 801477a:	920a      	str	r2, [sp, #40]	; 0x28
 801477c:	f7ff fd92 	bl	80142a4 <read_submessage_list>
 8014780:	4620      	mov	r0, r4
 8014782:	b01d      	add	sp, #116	; 0x74
 8014784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014788:	4631      	mov	r1, r6
 801478a:	f108 0008 	add.w	r0, r8, #8
 801478e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8014792:	f000 fd1b 	bl	80151cc <uxr_get_input_reliable_stream>
 8014796:	4607      	mov	r7, r0
 8014798:	b338      	cbz	r0, 80147ea <listen_message_reliably+0x236>
 801479a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801479c:	9203      	str	r2, [sp, #12]
 801479e:	a80c      	add	r0, sp, #48	; 0x30
 80147a0:	f7ff f956 	bl	8013a50 <ucdr_buffer_remaining>
 80147a4:	4603      	mov	r3, r0
 80147a6:	f10d 0019 	add.w	r0, sp, #25
 80147aa:	9000      	str	r0, [sp, #0]
 80147ac:	9a03      	ldr	r2, [sp, #12]
 80147ae:	4651      	mov	r1, sl
 80147b0:	4638      	mov	r0, r7
 80147b2:	f004 fb99 	bl	8018ee8 <uxr_receive_reliable_message>
 80147b6:	b1c0      	cbz	r0, 80147ea <listen_message_reliably+0x236>
 80147b8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80147bc:	b393      	cbz	r3, 8014824 <listen_message_reliably+0x270>
 80147be:	ad14      	add	r5, sp, #80	; 0x50
 80147c0:	f04f 0a02 	mov.w	sl, #2
 80147c4:	e00a      	b.n	80147dc <listen_message_reliably+0x228>
 80147c6:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 80147ca:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 80147ce:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80147d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147d4:	4629      	mov	r1, r5
 80147d6:	4640      	mov	r0, r8
 80147d8:	f7ff fd64 	bl	80142a4 <read_submessage_list>
 80147dc:	2204      	movs	r2, #4
 80147de:	4629      	mov	r1, r5
 80147e0:	4638      	mov	r0, r7
 80147e2:	f004 fc01 	bl	8018fe8 <uxr_next_input_reliable_buffer_available>
 80147e6:	2800      	cmp	r0, #0
 80147e8:	d1ed      	bne.n	80147c6 <listen_message_reliably+0x212>
 80147ea:	4640      	mov	r0, r8
 80147ec:	4632      	mov	r2, r6
 80147ee:	4649      	mov	r1, r9
 80147f0:	f7ff fbd4 	bl	8013f9c <write_submessage_acknack.isra.0>
 80147f4:	4620      	mov	r0, r4
 80147f6:	b01d      	add	sp, #116	; 0x74
 80147f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147fc:	4631      	mov	r1, r6
 80147fe:	f108 0008 	add.w	r0, r8, #8
 8014802:	f000 fcd9 	bl	80151b8 <uxr_get_input_best_effort_stream>
 8014806:	2800      	cmp	r0, #0
 8014808:	d099      	beq.n	801473e <listen_message_reliably+0x18a>
 801480a:	4651      	mov	r1, sl
 801480c:	f004 fad8 	bl	8018dc0 <uxr_receive_best_effort_message>
 8014810:	2800      	cmp	r0, #0
 8014812:	d094      	beq.n	801473e <listen_message_reliably+0x18a>
 8014814:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8014818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801481a:	a90c      	add	r1, sp, #48	; 0x30
 801481c:	4640      	mov	r0, r8
 801481e:	f7ff fd41 	bl	80142a4 <read_submessage_list>
 8014822:	e78c      	b.n	801473e <listen_message_reliably+0x18a>
 8014824:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8014828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801482a:	a90c      	add	r1, sp, #48	; 0x30
 801482c:	4640      	mov	r0, r8
 801482e:	f7ff fd39 	bl	80142a4 <read_submessage_list>
 8014832:	e7c4      	b.n	80147be <listen_message_reliably+0x20a>

08014834 <uxr_run_session_until_confirm_delivery>:
 8014834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014838:	4606      	mov	r6, r0
 801483a:	460d      	mov	r5, r1
 801483c:	f000 fd2c 	bl	8015298 <uxr_millis>
 8014840:	4607      	mov	r7, r0
 8014842:	4630      	mov	r0, r6
 8014844:	f7ff fc70 	bl	8014128 <uxr_flash_output_streams>
 8014848:	2d00      	cmp	r5, #0
 801484a:	f106 0808 	add.w	r8, r6, #8
 801484e:	bfa8      	it	ge
 8014850:	462c      	movge	r4, r5
 8014852:	da07      	bge.n	8014864 <uxr_run_session_until_confirm_delivery+0x30>
 8014854:	e00e      	b.n	8014874 <uxr_run_session_until_confirm_delivery+0x40>
 8014856:	f7ff fead 	bl	80145b4 <listen_message_reliably>
 801485a:	f000 fd1d 	bl	8015298 <uxr_millis>
 801485e:	1bc3      	subs	r3, r0, r7
 8014860:	1aec      	subs	r4, r5, r3
 8014862:	d407      	bmi.n	8014874 <uxr_run_session_until_confirm_delivery+0x40>
 8014864:	4640      	mov	r0, r8
 8014866:	f000 fcbb 	bl	80151e0 <uxr_output_streams_confirmed>
 801486a:	4603      	mov	r3, r0
 801486c:	4621      	mov	r1, r4
 801486e:	4630      	mov	r0, r6
 8014870:	2b00      	cmp	r3, #0
 8014872:	d0f0      	beq.n	8014856 <uxr_run_session_until_confirm_delivery+0x22>
 8014874:	4640      	mov	r0, r8
 8014876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801487a:	f000 bcb1 	b.w	80151e0 <uxr_output_streams_confirmed>
 801487e:	bf00      	nop

08014880 <uxr_run_session_until_all_status>:
 8014880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014884:	9c08      	ldr	r4, [sp, #32]
 8014886:	4606      	mov	r6, r0
 8014888:	460f      	mov	r7, r1
 801488a:	4691      	mov	r9, r2
 801488c:	461d      	mov	r5, r3
 801488e:	f7ff fc4b 	bl	8014128 <uxr_flash_output_streams>
 8014892:	b124      	cbz	r4, 801489e <uxr_run_session_until_all_status+0x1e>
 8014894:	4622      	mov	r2, r4
 8014896:	21ff      	movs	r1, #255	; 0xff
 8014898:	4628      	mov	r0, r5
 801489a:	f006 fc43 	bl	801b124 <memset>
 801489e:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 80148a2:	67f4      	str	r4, [r6, #124]	; 0x7c
 80148a4:	f000 fcf8 	bl	8015298 <uxr_millis>
 80148a8:	3d01      	subs	r5, #1
 80148aa:	f1a9 0902 	sub.w	r9, r9, #2
 80148ae:	4680      	mov	r8, r0
 80148b0:	4639      	mov	r1, r7
 80148b2:	4630      	mov	r0, r6
 80148b4:	f7ff fe7e 	bl	80145b4 <listen_message_reliably>
 80148b8:	f000 fcee 	bl	8015298 <uxr_millis>
 80148bc:	eba0 0008 	sub.w	r0, r0, r8
 80148c0:	1a39      	subs	r1, r7, r0
 80148c2:	b344      	cbz	r4, 8014916 <uxr_run_session_until_all_status+0x96>
 80148c4:	4628      	mov	r0, r5
 80148c6:	46ac      	mov	ip, r5
 80148c8:	2301      	movs	r3, #1
 80148ca:	e002      	b.n	80148d2 <uxr_run_session_until_all_status+0x52>
 80148cc:	42a3      	cmp	r3, r4
 80148ce:	d20d      	bcs.n	80148ec <uxr_run_session_until_all_status+0x6c>
 80148d0:	3301      	adds	r3, #1
 80148d2:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80148d6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80148da:	d1f7      	bne.n	80148cc <uxr_run_session_until_all_status+0x4c>
 80148dc:	42a3      	cmp	r3, r4
 80148de:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80148e2:	d213      	bcs.n	801490c <uxr_run_session_until_all_status+0x8c>
 80148e4:	2a00      	cmp	r2, #0
 80148e6:	d0f3      	beq.n	80148d0 <uxr_run_session_until_all_status+0x50>
 80148e8:	2900      	cmp	r1, #0
 80148ea:	dce2      	bgt.n	80148b2 <uxr_run_session_until_all_status+0x32>
 80148ec:	2300      	movs	r3, #0
 80148ee:	67f3      	str	r3, [r6, #124]	; 0x7c
 80148f0:	442c      	add	r4, r5
 80148f2:	e001      	b.n	80148f8 <uxr_run_session_until_all_status+0x78>
 80148f4:	2b01      	cmp	r3, #1
 80148f6:	d812      	bhi.n	801491e <uxr_run_session_until_all_status+0x9e>
 80148f8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80148fc:	4284      	cmp	r4, r0
 80148fe:	d1f9      	bne.n	80148f4 <uxr_run_session_until_all_status+0x74>
 8014900:	2b01      	cmp	r3, #1
 8014902:	bf8c      	ite	hi
 8014904:	2000      	movhi	r0, #0
 8014906:	2001      	movls	r0, #1
 8014908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801490c:	2900      	cmp	r1, #0
 801490e:	dded      	ble.n	80148ec <uxr_run_session_until_all_status+0x6c>
 8014910:	2a00      	cmp	r2, #0
 8014912:	d1ce      	bne.n	80148b2 <uxr_run_session_until_all_status+0x32>
 8014914:	e7ea      	b.n	80148ec <uxr_run_session_until_all_status+0x6c>
 8014916:	67f4      	str	r4, [r6, #124]	; 0x7c
 8014918:	2001      	movs	r0, #1
 801491a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801491e:	2000      	movs	r0, #0
 8014920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014924 <wait_session_status>:
 8014924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014928:	4604      	mov	r4, r0
 801492a:	b09d      	sub	sp, #116	; 0x74
 801492c:	20ff      	movs	r0, #255	; 0xff
 801492e:	7160      	strb	r0, [r4, #5]
 8014930:	9303      	str	r3, [sp, #12]
 8014932:	2b00      	cmp	r3, #0
 8014934:	f000 80b6 	beq.w	8014aa4 <wait_session_status+0x180>
 8014938:	468a      	mov	sl, r1
 801493a:	4691      	mov	r9, r2
 801493c:	f04f 0b00 	mov.w	fp, #0
 8014940:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014942:	464a      	mov	r2, r9
 8014944:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014948:	4651      	mov	r1, sl
 801494a:	47a8      	blx	r5
 801494c:	f000 fca4 	bl	8015298 <uxr_millis>
 8014950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014954:	4605      	mov	r5, r0
 8014956:	e009      	b.n	801496c <wait_session_status+0x48>
 8014958:	f000 fc9e 	bl	8015298 <uxr_millis>
 801495c:	1b40      	subs	r0, r0, r5
 801495e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8014962:	2b00      	cmp	r3, #0
 8014964:	dd40      	ble.n	80149e8 <wait_session_status+0xc4>
 8014966:	7960      	ldrb	r0, [r4, #5]
 8014968:	28ff      	cmp	r0, #255	; 0xff
 801496a:	d145      	bne.n	80149f8 <wait_session_status+0xd4>
 801496c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801496e:	a908      	add	r1, sp, #32
 8014970:	6896      	ldr	r6, [r2, #8]
 8014972:	6810      	ldr	r0, [r2, #0]
 8014974:	aa09      	add	r2, sp, #36	; 0x24
 8014976:	47b0      	blx	r6
 8014978:	2800      	cmp	r0, #0
 801497a:	d0ed      	beq.n	8014958 <wait_session_status+0x34>
 801497c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8014980:	a80c      	add	r0, sp, #48	; 0x30
 8014982:	f7ff f835 	bl	80139f0 <ucdr_init_buffer>
 8014986:	2600      	movs	r6, #0
 8014988:	f10d 031e 	add.w	r3, sp, #30
 801498c:	aa07      	add	r2, sp, #28
 801498e:	a90c      	add	r1, sp, #48	; 0x30
 8014990:	4620      	mov	r0, r4
 8014992:	f88d 601c 	strb.w	r6, [sp, #28]
 8014996:	f000 fa87 	bl	8014ea8 <uxr_read_session_header>
 801499a:	2800      	cmp	r0, #0
 801499c:	d0dc      	beq.n	8014958 <wait_session_status+0x34>
 801499e:	4631      	mov	r1, r6
 80149a0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80149a4:	f000 fb24 	bl	8014ff0 <uxr_stream_id_from_raw>
 80149a8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80149ac:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80149b0:	9302      	str	r3, [sp, #8]
 80149b2:	2f01      	cmp	r7, #1
 80149b4:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80149b8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80149bc:	d05c      	beq.n	8014a78 <wait_session_status+0x154>
 80149be:	2f02      	cmp	r7, #2
 80149c0:	d020      	beq.n	8014a04 <wait_session_status+0xe0>
 80149c2:	2f00      	cmp	r7, #0
 80149c4:	d1c8      	bne.n	8014958 <wait_session_status+0x34>
 80149c6:	4639      	mov	r1, r7
 80149c8:	4638      	mov	r0, r7
 80149ca:	f000 fb11 	bl	8014ff0 <uxr_stream_id_from_raw>
 80149ce:	a90c      	add	r1, sp, #48	; 0x30
 80149d0:	4602      	mov	r2, r0
 80149d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80149d4:	4620      	mov	r0, r4
 80149d6:	f7ff fc65 	bl	80142a4 <read_submessage_list>
 80149da:	f000 fc5d 	bl	8015298 <uxr_millis>
 80149de:	1b40      	subs	r0, r0, r5
 80149e0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	dcbe      	bgt.n	8014966 <wait_session_status+0x42>
 80149e8:	9b03      	ldr	r3, [sp, #12]
 80149ea:	7960      	ldrb	r0, [r4, #5]
 80149ec:	f10b 0b01 	add.w	fp, fp, #1
 80149f0:	455b      	cmp	r3, fp
 80149f2:	d001      	beq.n	80149f8 <wait_session_status+0xd4>
 80149f4:	28ff      	cmp	r0, #255	; 0xff
 80149f6:	d0a3      	beq.n	8014940 <wait_session_status+0x1c>
 80149f8:	38ff      	subs	r0, #255	; 0xff
 80149fa:	bf18      	it	ne
 80149fc:	2001      	movne	r0, #1
 80149fe:	b01d      	add	sp, #116	; 0x74
 8014a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a04:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8014a08:	9304      	str	r3, [sp, #16]
 8014a0a:	4631      	mov	r1, r6
 8014a0c:	f104 0008 	add.w	r0, r4, #8
 8014a10:	f000 fbdc 	bl	80151cc <uxr_get_input_reliable_stream>
 8014a14:	4680      	mov	r8, r0
 8014a16:	b348      	cbz	r0, 8014a6c <wait_session_status+0x148>
 8014a18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a1a:	9205      	str	r2, [sp, #20]
 8014a1c:	a80c      	add	r0, sp, #48	; 0x30
 8014a1e:	f7ff f817 	bl	8013a50 <ucdr_buffer_remaining>
 8014a22:	4603      	mov	r3, r0
 8014a24:	f10d 001d 	add.w	r0, sp, #29
 8014a28:	9000      	str	r0, [sp, #0]
 8014a2a:	9a05      	ldr	r2, [sp, #20]
 8014a2c:	9902      	ldr	r1, [sp, #8]
 8014a2e:	4640      	mov	r0, r8
 8014a30:	f004 fa5a 	bl	8018ee8 <uxr_receive_reliable_message>
 8014a34:	b1d0      	cbz	r0, 8014a6c <wait_session_status+0x148>
 8014a36:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d03a      	beq.n	8014ab4 <wait_session_status+0x190>
 8014a3e:	9f04      	ldr	r7, [sp, #16]
 8014a40:	e00a      	b.n	8014a58 <wait_session_status+0x134>
 8014a42:	f04f 0302 	mov.w	r3, #2
 8014a46:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8014a4a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8014a4e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8014a52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a54:	f7ff fc26 	bl	80142a4 <read_submessage_list>
 8014a58:	a914      	add	r1, sp, #80	; 0x50
 8014a5a:	2204      	movs	r2, #4
 8014a5c:	4640      	mov	r0, r8
 8014a5e:	f004 fac3 	bl	8018fe8 <uxr_next_input_reliable_buffer_available>
 8014a62:	4603      	mov	r3, r0
 8014a64:	a914      	add	r1, sp, #80	; 0x50
 8014a66:	4620      	mov	r0, r4
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d1ea      	bne.n	8014a42 <wait_session_status+0x11e>
 8014a6c:	9904      	ldr	r1, [sp, #16]
 8014a6e:	4632      	mov	r2, r6
 8014a70:	4620      	mov	r0, r4
 8014a72:	f7ff fa93 	bl	8013f9c <write_submessage_acknack.isra.0>
 8014a76:	e76f      	b.n	8014958 <wait_session_status+0x34>
 8014a78:	4631      	mov	r1, r6
 8014a7a:	f104 0008 	add.w	r0, r4, #8
 8014a7e:	f000 fb9b 	bl	80151b8 <uxr_get_input_best_effort_stream>
 8014a82:	2800      	cmp	r0, #0
 8014a84:	f43f af68 	beq.w	8014958 <wait_session_status+0x34>
 8014a88:	9902      	ldr	r1, [sp, #8]
 8014a8a:	f004 f999 	bl	8018dc0 <uxr_receive_best_effort_message>
 8014a8e:	2800      	cmp	r0, #0
 8014a90:	f43f af62 	beq.w	8014958 <wait_session_status+0x34>
 8014a94:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8014a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a9a:	a90c      	add	r1, sp, #48	; 0x30
 8014a9c:	4620      	mov	r0, r4
 8014a9e:	f7ff fc01 	bl	80142a4 <read_submessage_list>
 8014aa2:	e759      	b.n	8014958 <wait_session_status+0x34>
 8014aa4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014aa6:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014aaa:	47a0      	blx	r4
 8014aac:	2001      	movs	r0, #1
 8014aae:	b01d      	add	sp, #116	; 0x74
 8014ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ab4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8014ab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014aba:	a90c      	add	r1, sp, #48	; 0x30
 8014abc:	4620      	mov	r0, r4
 8014abe:	f7ff fbf1 	bl	80142a4 <read_submessage_list>
 8014ac2:	e7bc      	b.n	8014a3e <wait_session_status+0x11a>

08014ac4 <uxr_delete_session_retries>:
 8014ac4:	b530      	push	{r4, r5, lr}
 8014ac6:	b08f      	sub	sp, #60	; 0x3c
 8014ac8:	4604      	mov	r4, r0
 8014aca:	460d      	mov	r5, r1
 8014acc:	f000 fa2e 	bl	8014f2c <uxr_session_header_offset>
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	2210      	movs	r2, #16
 8014ad4:	9000      	str	r0, [sp, #0]
 8014ad6:	a902      	add	r1, sp, #8
 8014ad8:	a806      	add	r0, sp, #24
 8014ada:	f7fe ff77 	bl	80139cc <ucdr_init_buffer_origin_offset>
 8014ade:	a906      	add	r1, sp, #24
 8014ae0:	4620      	mov	r0, r4
 8014ae2:	f000 f973 	bl	8014dcc <uxr_buffer_delete_session>
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	4611      	mov	r1, r2
 8014aea:	9b06      	ldr	r3, [sp, #24]
 8014aec:	4620      	mov	r0, r4
 8014aee:	f000 f9c7 	bl	8014e80 <uxr_stamp_session_header>
 8014af2:	a806      	add	r0, sp, #24
 8014af4:	f7fe ffa8 	bl	8013a48 <ucdr_buffer_length>
 8014af8:	462b      	mov	r3, r5
 8014afa:	4602      	mov	r2, r0
 8014afc:	a902      	add	r1, sp, #8
 8014afe:	4620      	mov	r0, r4
 8014b00:	f7ff ff10 	bl	8014924 <wait_session_status>
 8014b04:	b118      	cbz	r0, 8014b0e <uxr_delete_session_retries+0x4a>
 8014b06:	7960      	ldrb	r0, [r4, #5]
 8014b08:	fab0 f080 	clz	r0, r0
 8014b0c:	0940      	lsrs	r0, r0, #5
 8014b0e:	b00f      	add	sp, #60	; 0x3c
 8014b10:	bd30      	pop	{r4, r5, pc}
 8014b12:	bf00      	nop

08014b14 <uxr_create_session>:
 8014b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b18:	f100 0b08 	add.w	fp, r0, #8
 8014b1c:	b0ab      	sub	sp, #172	; 0xac
 8014b1e:	4604      	mov	r4, r0
 8014b20:	4658      	mov	r0, fp
 8014b22:	f000 fa99 	bl	8015058 <uxr_reset_stream_storage>
 8014b26:	4620      	mov	r0, r4
 8014b28:	f000 fa00 	bl	8014f2c <uxr_session_header_offset>
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	9000      	str	r0, [sp, #0]
 8014b30:	221c      	movs	r2, #28
 8014b32:	a90b      	add	r1, sp, #44	; 0x2c
 8014b34:	a812      	add	r0, sp, #72	; 0x48
 8014b36:	f7fe ff49 	bl	80139cc <ucdr_init_buffer_origin_offset>
 8014b3a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014b3c:	8a1a      	ldrh	r2, [r3, #16]
 8014b3e:	3a04      	subs	r2, #4
 8014b40:	b292      	uxth	r2, r2
 8014b42:	a912      	add	r1, sp, #72	; 0x48
 8014b44:	4620      	mov	r0, r4
 8014b46:	f000 f917 	bl	8014d78 <uxr_buffer_create_session>
 8014b4a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014b4c:	4620      	mov	r0, r4
 8014b4e:	f000 f983 	bl	8014e58 <uxr_stamp_create_session_header>
 8014b52:	a812      	add	r0, sp, #72	; 0x48
 8014b54:	f7fe ff78 	bl	8013a48 <ucdr_buffer_length>
 8014b58:	23ff      	movs	r3, #255	; 0xff
 8014b5a:	7163      	strb	r3, [r4, #5]
 8014b5c:	230a      	movs	r3, #10
 8014b5e:	46da      	mov	sl, fp
 8014b60:	9303      	str	r3, [sp, #12]
 8014b62:	4683      	mov	fp, r0
 8014b64:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014b66:	465a      	mov	r2, fp
 8014b68:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014b6c:	a90b      	add	r1, sp, #44	; 0x2c
 8014b6e:	47a8      	blx	r5
 8014b70:	f000 fb92 	bl	8015298 <uxr_millis>
 8014b74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014b78:	4605      	mov	r5, r0
 8014b7a:	e009      	b.n	8014b90 <uxr_create_session+0x7c>
 8014b7c:	f000 fb8c 	bl	8015298 <uxr_millis>
 8014b80:	1b40      	subs	r0, r0, r5
 8014b82:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	7962      	ldrb	r2, [r4, #5]
 8014b8a:	dd38      	ble.n	8014bfe <uxr_create_session+0xea>
 8014b8c:	2aff      	cmp	r2, #255	; 0xff
 8014b8e:	d13c      	bne.n	8014c0a <uxr_create_session+0xf6>
 8014b90:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8014b92:	a907      	add	r1, sp, #28
 8014b94:	6896      	ldr	r6, [r2, #8]
 8014b96:	6810      	ldr	r0, [r2, #0]
 8014b98:	aa08      	add	r2, sp, #32
 8014b9a:	47b0      	blx	r6
 8014b9c:	2800      	cmp	r0, #0
 8014b9e:	d0ed      	beq.n	8014b7c <uxr_create_session+0x68>
 8014ba0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014ba4:	a81a      	add	r0, sp, #104	; 0x68
 8014ba6:	f7fe ff23 	bl	80139f0 <ucdr_init_buffer>
 8014baa:	2600      	movs	r6, #0
 8014bac:	f10d 031a 	add.w	r3, sp, #26
 8014bb0:	aa06      	add	r2, sp, #24
 8014bb2:	a91a      	add	r1, sp, #104	; 0x68
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	f88d 6018 	strb.w	r6, [sp, #24]
 8014bba:	f000 f975 	bl	8014ea8 <uxr_read_session_header>
 8014bbe:	2800      	cmp	r0, #0
 8014bc0:	d0dc      	beq.n	8014b7c <uxr_create_session+0x68>
 8014bc2:	4631      	mov	r1, r6
 8014bc4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014bc8:	f000 fa12 	bl	8014ff0 <uxr_stream_id_from_raw>
 8014bcc:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8014bd0:	2e01      	cmp	r6, #1
 8014bd2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8014bd6:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8014bda:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8014bde:	d053      	beq.n	8014c88 <uxr_create_session+0x174>
 8014be0:	2e02      	cmp	r6, #2
 8014be2:	d018      	beq.n	8014c16 <uxr_create_session+0x102>
 8014be4:	2e00      	cmp	r6, #0
 8014be6:	d1c9      	bne.n	8014b7c <uxr_create_session+0x68>
 8014be8:	4631      	mov	r1, r6
 8014bea:	4630      	mov	r0, r6
 8014bec:	f000 fa00 	bl	8014ff0 <uxr_stream_id_from_raw>
 8014bf0:	a91a      	add	r1, sp, #104	; 0x68
 8014bf2:	4602      	mov	r2, r0
 8014bf4:	900a      	str	r0, [sp, #40]	; 0x28
 8014bf6:	4620      	mov	r0, r4
 8014bf8:	f7ff fb54 	bl	80142a4 <read_submessage_list>
 8014bfc:	e7be      	b.n	8014b7c <uxr_create_session+0x68>
 8014bfe:	9b03      	ldr	r3, [sp, #12]
 8014c00:	3b01      	subs	r3, #1
 8014c02:	9303      	str	r3, [sp, #12]
 8014c04:	d001      	beq.n	8014c0a <uxr_create_session+0xf6>
 8014c06:	2aff      	cmp	r2, #255	; 0xff
 8014c08:	d0ac      	beq.n	8014b64 <uxr_create_session+0x50>
 8014c0a:	2a00      	cmp	r2, #0
 8014c0c:	d051      	beq.n	8014cb2 <uxr_create_session+0x19e>
 8014c0e:	2000      	movs	r0, #0
 8014c10:	b02b      	add	sp, #172	; 0xac
 8014c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c16:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014c1a:	9304      	str	r3, [sp, #16]
 8014c1c:	4639      	mov	r1, r7
 8014c1e:	4650      	mov	r0, sl
 8014c20:	f000 fad4 	bl	80151cc <uxr_get_input_reliable_stream>
 8014c24:	4680      	mov	r8, r0
 8014c26:	b348      	cbz	r0, 8014c7c <uxr_create_session+0x168>
 8014c28:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014c2a:	9205      	str	r2, [sp, #20]
 8014c2c:	a81a      	add	r0, sp, #104	; 0x68
 8014c2e:	f7fe ff0f 	bl	8013a50 <ucdr_buffer_remaining>
 8014c32:	4603      	mov	r3, r0
 8014c34:	f10d 0019 	add.w	r0, sp, #25
 8014c38:	9000      	str	r0, [sp, #0]
 8014c3a:	9a05      	ldr	r2, [sp, #20]
 8014c3c:	4649      	mov	r1, r9
 8014c3e:	4640      	mov	r0, r8
 8014c40:	f004 f952 	bl	8018ee8 <uxr_receive_reliable_message>
 8014c44:	b1d0      	cbz	r0, 8014c7c <uxr_create_session+0x168>
 8014c46:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d038      	beq.n	8014cc0 <uxr_create_session+0x1ac>
 8014c4e:	9e04      	ldr	r6, [sp, #16]
 8014c50:	e00a      	b.n	8014c68 <uxr_create_session+0x154>
 8014c52:	f04f 0302 	mov.w	r3, #2
 8014c56:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 8014c5a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 8014c5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c64:	f7ff fb1e 	bl	80142a4 <read_submessage_list>
 8014c68:	a922      	add	r1, sp, #136	; 0x88
 8014c6a:	2204      	movs	r2, #4
 8014c6c:	4640      	mov	r0, r8
 8014c6e:	f004 f9bb 	bl	8018fe8 <uxr_next_input_reliable_buffer_available>
 8014c72:	4603      	mov	r3, r0
 8014c74:	a922      	add	r1, sp, #136	; 0x88
 8014c76:	4620      	mov	r0, r4
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d1ea      	bne.n	8014c52 <uxr_create_session+0x13e>
 8014c7c:	9904      	ldr	r1, [sp, #16]
 8014c7e:	463a      	mov	r2, r7
 8014c80:	4620      	mov	r0, r4
 8014c82:	f7ff f98b 	bl	8013f9c <write_submessage_acknack.isra.0>
 8014c86:	e779      	b.n	8014b7c <uxr_create_session+0x68>
 8014c88:	4639      	mov	r1, r7
 8014c8a:	4650      	mov	r0, sl
 8014c8c:	f000 fa94 	bl	80151b8 <uxr_get_input_best_effort_stream>
 8014c90:	2800      	cmp	r0, #0
 8014c92:	f43f af73 	beq.w	8014b7c <uxr_create_session+0x68>
 8014c96:	4649      	mov	r1, r9
 8014c98:	f004 f892 	bl	8018dc0 <uxr_receive_best_effort_message>
 8014c9c:	2800      	cmp	r0, #0
 8014c9e:	f43f af6d 	beq.w	8014b7c <uxr_create_session+0x68>
 8014ca2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014ca6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ca8:	a91a      	add	r1, sp, #104	; 0x68
 8014caa:	4620      	mov	r0, r4
 8014cac:	f7ff fafa 	bl	80142a4 <read_submessage_list>
 8014cb0:	e764      	b.n	8014b7c <uxr_create_session+0x68>
 8014cb2:	4650      	mov	r0, sl
 8014cb4:	f000 f9d0 	bl	8015058 <uxr_reset_stream_storage>
 8014cb8:	2001      	movs	r0, #1
 8014cba:	b02b      	add	sp, #172	; 0xac
 8014cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cc0:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014cc6:	a91a      	add	r1, sp, #104	; 0x68
 8014cc8:	4620      	mov	r0, r4
 8014cca:	f7ff faeb 	bl	80142a4 <read_submessage_list>
 8014cce:	e7be      	b.n	8014c4e <uxr_create_session+0x13a>

08014cd0 <uxr_prepare_stream_to_write_submessage>:
 8014cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cd4:	b082      	sub	sp, #8
 8014cd6:	4682      	mov	sl, r0
 8014cd8:	4610      	mov	r0, r2
 8014cda:	4615      	mov	r5, r2
 8014cdc:	461e      	mov	r6, r3
 8014cde:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8014ce2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8014ce6:	9101      	str	r1, [sp, #4]
 8014ce8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8014cec:	f000 face 	bl	801528c <uxr_submessage_padding>
 8014cf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014cf4:	f105 0904 	add.w	r9, r5, #4
 8014cf8:	2b01      	cmp	r3, #1
 8014cfa:	4481      	add	r9, r0
 8014cfc:	d01d      	beq.n	8014d3a <uxr_prepare_stream_to_write_submessage+0x6a>
 8014cfe:	2b02      	cmp	r3, #2
 8014d00:	d116      	bne.n	8014d30 <uxr_prepare_stream_to_write_submessage+0x60>
 8014d02:	4621      	mov	r1, r4
 8014d04:	f10a 0008 	add.w	r0, sl, #8
 8014d08:	f000 fa4c 	bl	80151a4 <uxr_get_output_reliable_stream>
 8014d0c:	4604      	mov	r4, r0
 8014d0e:	b158      	cbz	r0, 8014d28 <uxr_prepare_stream_to_write_submessage+0x58>
 8014d10:	4649      	mov	r1, r9
 8014d12:	4632      	mov	r2, r6
 8014d14:	f004 fb24 	bl	8019360 <uxr_prepare_reliable_buffer_to_write>
 8014d18:	4604      	mov	r4, r0
 8014d1a:	b12c      	cbz	r4, 8014d28 <uxr_prepare_stream_to_write_submessage+0x58>
 8014d1c:	4643      	mov	r3, r8
 8014d1e:	b2aa      	uxth	r2, r5
 8014d20:	4639      	mov	r1, r7
 8014d22:	4630      	mov	r0, r6
 8014d24:	f000 fa72 	bl	801520c <uxr_buffer_submessage_header>
 8014d28:	4620      	mov	r0, r4
 8014d2a:	b002      	add	sp, #8
 8014d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d30:	2400      	movs	r4, #0
 8014d32:	4620      	mov	r0, r4
 8014d34:	b002      	add	sp, #8
 8014d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d3a:	4621      	mov	r1, r4
 8014d3c:	f10a 0008 	add.w	r0, sl, #8
 8014d40:	f000 fa28 	bl	8015194 <uxr_get_output_best_effort_stream>
 8014d44:	4604      	mov	r4, r0
 8014d46:	2800      	cmp	r0, #0
 8014d48:	d0ee      	beq.n	8014d28 <uxr_prepare_stream_to_write_submessage+0x58>
 8014d4a:	4649      	mov	r1, r9
 8014d4c:	4632      	mov	r2, r6
 8014d4e:	f004 fa37 	bl	80191c0 <uxr_prepare_best_effort_buffer_to_write>
 8014d52:	4604      	mov	r4, r0
 8014d54:	e7e1      	b.n	8014d1a <uxr_prepare_stream_to_write_submessage+0x4a>
 8014d56:	bf00      	nop

08014d58 <uxr_init_session_info>:
 8014d58:	0e13      	lsrs	r3, r2, #24
 8014d5a:	7043      	strb	r3, [r0, #1]
 8014d5c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8014d60:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014d64:	7001      	strb	r1, [r0, #0]
 8014d66:	70c3      	strb	r3, [r0, #3]
 8014d68:	2109      	movs	r1, #9
 8014d6a:	23ff      	movs	r3, #255	; 0xff
 8014d6c:	f880 c002 	strb.w	ip, [r0, #2]
 8014d70:	7102      	strb	r2, [r0, #4]
 8014d72:	80c1      	strh	r1, [r0, #6]
 8014d74:	7143      	strb	r3, [r0, #5]
 8014d76:	4770      	bx	lr

08014d78 <uxr_buffer_create_session>:
 8014d78:	b530      	push	{r4, r5, lr}
 8014d7a:	b089      	sub	sp, #36	; 0x24
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	4d12      	ldr	r5, [pc, #72]	; (8014dc8 <uxr_buffer_create_session+0x50>)
 8014d80:	9307      	str	r3, [sp, #28]
 8014d82:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014d86:	2201      	movs	r2, #1
 8014d88:	9301      	str	r3, [sp, #4]
 8014d8a:	80c2      	strh	r2, [r0, #6]
 8014d8c:	f88d 2004 	strb.w	r2, [sp, #4]
 8014d90:	682a      	ldr	r2, [r5, #0]
 8014d92:	9200      	str	r2, [sp, #0]
 8014d94:	88aa      	ldrh	r2, [r5, #4]
 8014d96:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014d9a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8014d9e:	9202      	str	r2, [sp, #8]
 8014da0:	460c      	mov	r4, r1
 8014da2:	7802      	ldrb	r2, [r0, #0]
 8014da4:	9303      	str	r3, [sp, #12]
 8014da6:	4619      	mov	r1, r3
 8014da8:	f88d 200c 	strb.w	r2, [sp, #12]
 8014dac:	4620      	mov	r0, r4
 8014dae:	2210      	movs	r2, #16
 8014db0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014db4:	9306      	str	r3, [sp, #24]
 8014db6:	f000 fa29 	bl	801520c <uxr_buffer_submessage_header>
 8014dba:	4669      	mov	r1, sp
 8014dbc:	4620      	mov	r0, r4
 8014dbe:	f001 f981 	bl	80160c4 <uxr_serialize_CREATE_CLIENT_Payload>
 8014dc2:	b009      	add	sp, #36	; 0x24
 8014dc4:	bd30      	pop	{r4, r5, pc}
 8014dc6:	bf00      	nop
 8014dc8:	0801c804 	.word	0x0801c804

08014dcc <uxr_buffer_delete_session>:
 8014dcc:	b510      	push	{r4, lr}
 8014dce:	4b0c      	ldr	r3, [pc, #48]	; (8014e00 <uxr_buffer_delete_session+0x34>)
 8014dd0:	b082      	sub	sp, #8
 8014dd2:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8014dd6:	f8ad c006 	strh.w	ip, [sp, #6]
 8014dda:	460c      	mov	r4, r1
 8014ddc:	2202      	movs	r2, #2
 8014dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014de2:	80c2      	strh	r2, [r0, #6]
 8014de4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014de8:	2204      	movs	r2, #4
 8014dea:	2300      	movs	r3, #0
 8014dec:	2103      	movs	r1, #3
 8014dee:	4620      	mov	r0, r4
 8014df0:	f000 fa0c 	bl	801520c <uxr_buffer_submessage_header>
 8014df4:	a901      	add	r1, sp, #4
 8014df6:	4620      	mov	r0, r4
 8014df8:	f001 fa0a 	bl	8016210 <uxr_serialize_DELETE_Payload>
 8014dfc:	b002      	add	sp, #8
 8014dfe:	bd10      	pop	{r4, pc}
 8014e00:	0801c804 	.word	0x0801c804

08014e04 <uxr_read_create_session_status>:
 8014e04:	b510      	push	{r4, lr}
 8014e06:	b088      	sub	sp, #32
 8014e08:	4604      	mov	r4, r0
 8014e0a:	4608      	mov	r0, r1
 8014e0c:	a901      	add	r1, sp, #4
 8014e0e:	f001 fa0f 	bl	8016230 <uxr_deserialize_STATUS_AGENT_Payload>
 8014e12:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014e16:	7163      	strb	r3, [r4, #5]
 8014e18:	b008      	add	sp, #32
 8014e1a:	bd10      	pop	{r4, pc}

08014e1c <uxr_read_delete_session_status>:
 8014e1c:	b510      	push	{r4, lr}
 8014e1e:	4604      	mov	r4, r0
 8014e20:	b084      	sub	sp, #16
 8014e22:	4608      	mov	r0, r1
 8014e24:	a902      	add	r1, sp, #8
 8014e26:	f001 fa33 	bl	8016290 <uxr_deserialize_STATUS_Payload>
 8014e2a:	88e3      	ldrh	r3, [r4, #6]
 8014e2c:	2b02      	cmp	r3, #2
 8014e2e:	d001      	beq.n	8014e34 <uxr_read_delete_session_status+0x18>
 8014e30:	b004      	add	sp, #16
 8014e32:	bd10      	pop	{r4, pc}
 8014e34:	f10d 000a 	add.w	r0, sp, #10
 8014e38:	f7ff f836 	bl	8013ea8 <uxr_object_id_from_raw>
 8014e3c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8014e40:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8014e44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014e48:	b29b      	uxth	r3, r3
 8014e4a:	2b02      	cmp	r3, #2
 8014e4c:	bf04      	itt	eq
 8014e4e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8014e52:	7163      	strbeq	r3, [r4, #5]
 8014e54:	b004      	add	sp, #16
 8014e56:	bd10      	pop	{r4, pc}

08014e58 <uxr_stamp_create_session_header>:
 8014e58:	b510      	push	{r4, lr}
 8014e5a:	2208      	movs	r2, #8
 8014e5c:	b08a      	sub	sp, #40	; 0x28
 8014e5e:	4604      	mov	r4, r0
 8014e60:	eb0d 0002 	add.w	r0, sp, r2
 8014e64:	f7fe fdc4 	bl	80139f0 <ucdr_init_buffer>
 8014e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e6c:	9400      	str	r4, [sp, #0]
 8014e6e:	2300      	movs	r3, #0
 8014e70:	461a      	mov	r2, r3
 8014e72:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8014e76:	a802      	add	r0, sp, #8
 8014e78:	f000 fbc2 	bl	8015600 <uxr_serialize_message_header>
 8014e7c:	b00a      	add	sp, #40	; 0x28
 8014e7e:	bd10      	pop	{r4, pc}

08014e80 <uxr_stamp_session_header>:
 8014e80:	b530      	push	{r4, r5, lr}
 8014e82:	b08d      	sub	sp, #52	; 0x34
 8014e84:	4604      	mov	r4, r0
 8014e86:	460d      	mov	r5, r1
 8014e88:	9203      	str	r2, [sp, #12]
 8014e8a:	4619      	mov	r1, r3
 8014e8c:	a804      	add	r0, sp, #16
 8014e8e:	2208      	movs	r2, #8
 8014e90:	f7fe fdae 	bl	80139f0 <ucdr_init_buffer>
 8014e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e98:	9b03      	ldr	r3, [sp, #12]
 8014e9a:	9400      	str	r4, [sp, #0]
 8014e9c:	462a      	mov	r2, r5
 8014e9e:	a804      	add	r0, sp, #16
 8014ea0:	f000 fbae 	bl	8015600 <uxr_serialize_message_header>
 8014ea4:	b00d      	add	sp, #52	; 0x34
 8014ea6:	bd30      	pop	{r4, r5, pc}

08014ea8 <uxr_read_session_header>:
 8014ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eac:	4607      	mov	r7, r0
 8014eae:	b084      	sub	sp, #16
 8014eb0:	4608      	mov	r0, r1
 8014eb2:	460c      	mov	r4, r1
 8014eb4:	4615      	mov	r5, r2
 8014eb6:	461e      	mov	r6, r3
 8014eb8:	f7fe fdca 	bl	8013a50 <ucdr_buffer_remaining>
 8014ebc:	2808      	cmp	r0, #8
 8014ebe:	d803      	bhi.n	8014ec8 <uxr_read_session_header+0x20>
 8014ec0:	2000      	movs	r0, #0
 8014ec2:	b004      	add	sp, #16
 8014ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ec8:	f10d 080c 	add.w	r8, sp, #12
 8014ecc:	4633      	mov	r3, r6
 8014ece:	462a      	mov	r2, r5
 8014ed0:	f8cd 8000 	str.w	r8, [sp]
 8014ed4:	4620      	mov	r0, r4
 8014ed6:	f10d 010b 	add.w	r1, sp, #11
 8014eda:	f000 fbaf 	bl	801563c <uxr_deserialize_message_header>
 8014ede:	783a      	ldrb	r2, [r7, #0]
 8014ee0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8014ee4:	4293      	cmp	r3, r2
 8014ee6:	d1eb      	bne.n	8014ec0 <uxr_read_session_header+0x18>
 8014ee8:	061b      	lsls	r3, r3, #24
 8014eea:	d41c      	bmi.n	8014f26 <uxr_read_session_header+0x7e>
 8014eec:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014ef0:	787b      	ldrb	r3, [r7, #1]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d003      	beq.n	8014efe <uxr_read_session_header+0x56>
 8014ef6:	2001      	movs	r0, #1
 8014ef8:	f080 0001 	eor.w	r0, r0, #1
 8014efc:	e7e1      	b.n	8014ec2 <uxr_read_session_header+0x1a>
 8014efe:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8014f02:	78bb      	ldrb	r3, [r7, #2]
 8014f04:	429a      	cmp	r2, r3
 8014f06:	f107 0102 	add.w	r1, r7, #2
 8014f0a:	d1f4      	bne.n	8014ef6 <uxr_read_session_header+0x4e>
 8014f0c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8014f10:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d1ee      	bne.n	8014ef6 <uxr_read_session_header+0x4e>
 8014f18:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8014f1c:	784b      	ldrb	r3, [r1, #1]
 8014f1e:	429a      	cmp	r2, r3
 8014f20:	d1e9      	bne.n	8014ef6 <uxr_read_session_header+0x4e>
 8014f22:	2000      	movs	r0, #0
 8014f24:	e7e8      	b.n	8014ef8 <uxr_read_session_header+0x50>
 8014f26:	2001      	movs	r0, #1
 8014f28:	e7cb      	b.n	8014ec2 <uxr_read_session_header+0x1a>
 8014f2a:	bf00      	nop

08014f2c <uxr_session_header_offset>:
 8014f2c:	f990 3000 	ldrsb.w	r3, [r0]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	bfac      	ite	ge
 8014f34:	2008      	movge	r0, #8
 8014f36:	2004      	movlt	r0, #4
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop

08014f3c <uxr_init_base_object_request>:
 8014f3c:	b510      	push	{r4, lr}
 8014f3e:	88c3      	ldrh	r3, [r0, #6]
 8014f40:	b082      	sub	sp, #8
 8014f42:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8014f46:	9101      	str	r1, [sp, #4]
 8014f48:	f1a3 010a 	sub.w	r1, r3, #10
 8014f4c:	b289      	uxth	r1, r1
 8014f4e:	42a1      	cmp	r1, r4
 8014f50:	d80e      	bhi.n	8014f70 <uxr_init_base_object_request+0x34>
 8014f52:	3301      	adds	r3, #1
 8014f54:	b29c      	uxth	r4, r3
 8014f56:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014f5a:	b2db      	uxtb	r3, r3
 8014f5c:	80c4      	strh	r4, [r0, #6]
 8014f5e:	9801      	ldr	r0, [sp, #4]
 8014f60:	7011      	strb	r1, [r2, #0]
 8014f62:	7053      	strb	r3, [r2, #1]
 8014f64:	1c91      	adds	r1, r2, #2
 8014f66:	f7fe ffb3 	bl	8013ed0 <uxr_object_id_to_raw>
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	b002      	add	sp, #8
 8014f6e:	bd10      	pop	{r4, pc}
 8014f70:	230a      	movs	r3, #10
 8014f72:	2100      	movs	r1, #0
 8014f74:	461c      	mov	r4, r3
 8014f76:	e7f1      	b.n	8014f5c <uxr_init_base_object_request+0x20>

08014f78 <uxr_parse_base_object_request>:
 8014f78:	b570      	push	{r4, r5, r6, lr}
 8014f7a:	4604      	mov	r4, r0
 8014f7c:	3002      	adds	r0, #2
 8014f7e:	460d      	mov	r5, r1
 8014f80:	4616      	mov	r6, r2
 8014f82:	f7fe ff91 	bl	8013ea8 <uxr_object_id_from_raw>
 8014f86:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8014f8a:	8028      	strh	r0, [r5, #0]
 8014f8c:	806b      	strh	r3, [r5, #2]
 8014f8e:	7822      	ldrb	r2, [r4, #0]
 8014f90:	7863      	ldrb	r3, [r4, #1]
 8014f92:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014f96:	8033      	strh	r3, [r6, #0]
 8014f98:	bd70      	pop	{r4, r5, r6, pc}
 8014f9a:	bf00      	nop

08014f9c <uxr_stream_id>:
 8014f9c:	2901      	cmp	r1, #1
 8014f9e:	b082      	sub	sp, #8
 8014fa0:	d01d      	beq.n	8014fde <uxr_stream_id+0x42>
 8014fa2:	2902      	cmp	r1, #2
 8014fa4:	f04f 0c00 	mov.w	ip, #0
 8014fa8:	d01e      	beq.n	8014fe8 <uxr_stream_id+0x4c>
 8014faa:	2300      	movs	r3, #0
 8014fac:	f36c 0307 	bfi	r3, ip, #0, #8
 8014fb0:	f360 230f 	bfi	r3, r0, #8, #8
 8014fb4:	f361 4317 	bfi	r3, r1, #16, #8
 8014fb8:	f362 631f 	bfi	r3, r2, #24, #8
 8014fbc:	b2da      	uxtb	r2, r3
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	f362 0007 	bfi	r0, r2, #0, #8
 8014fc4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014fc8:	f362 200f 	bfi	r0, r2, #8, #8
 8014fcc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014fd0:	f362 4017 	bfi	r0, r2, #16, #8
 8014fd4:	0e1b      	lsrs	r3, r3, #24
 8014fd6:	f363 601f 	bfi	r0, r3, #24, #8
 8014fda:	b002      	add	sp, #8
 8014fdc:	4770      	bx	lr
 8014fde:	f100 0c01 	add.w	ip, r0, #1
 8014fe2:	fa5f fc8c 	uxtb.w	ip, ip
 8014fe6:	e7e0      	b.n	8014faa <uxr_stream_id+0xe>
 8014fe8:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 8014fec:	e7dd      	b.n	8014faa <uxr_stream_id+0xe>
 8014fee:	bf00      	nop

08014ff0 <uxr_stream_id_from_raw>:
 8014ff0:	b082      	sub	sp, #8
 8014ff2:	b130      	cbz	r0, 8015002 <uxr_stream_id_from_raw+0x12>
 8014ff4:	0603      	lsls	r3, r0, #24
 8014ff6:	d420      	bmi.n	801503a <uxr_stream_id_from_raw+0x4a>
 8014ff8:	1e42      	subs	r2, r0, #1
 8014ffa:	b2d2      	uxtb	r2, r2
 8014ffc:	f04f 0c01 	mov.w	ip, #1
 8015000:	e001      	b.n	8015006 <uxr_stream_id_from_raw+0x16>
 8015002:	4684      	mov	ip, r0
 8015004:	4602      	mov	r2, r0
 8015006:	2300      	movs	r3, #0
 8015008:	f360 0307 	bfi	r3, r0, #0, #8
 801500c:	f362 230f 	bfi	r3, r2, #8, #8
 8015010:	f36c 4317 	bfi	r3, ip, #16, #8
 8015014:	f361 631f 	bfi	r3, r1, #24, #8
 8015018:	b2da      	uxtb	r2, r3
 801501a:	2000      	movs	r0, #0
 801501c:	f362 0007 	bfi	r0, r2, #0, #8
 8015020:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015024:	f362 200f 	bfi	r0, r2, #8, #8
 8015028:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801502c:	f362 4017 	bfi	r0, r2, #16, #8
 8015030:	0e1b      	lsrs	r3, r3, #24
 8015032:	f363 601f 	bfi	r0, r3, #24, #8
 8015036:	b002      	add	sp, #8
 8015038:	4770      	bx	lr
 801503a:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 801503e:	f04f 0c02 	mov.w	ip, #2
 8015042:	e7e0      	b.n	8015006 <uxr_stream_id_from_raw+0x16>

08015044 <uxr_init_stream_storage>:
 8015044:	2300      	movs	r3, #0
 8015046:	7403      	strb	r3, [r0, #16]
 8015048:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 801504c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8015050:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8015054:	4770      	bx	lr
 8015056:	bf00      	nop

08015058 <uxr_reset_stream_storage>:
 8015058:	b570      	push	{r4, r5, r6, lr}
 801505a:	7c03      	ldrb	r3, [r0, #16]
 801505c:	4604      	mov	r4, r0
 801505e:	b153      	cbz	r3, 8015076 <uxr_reset_stream_storage+0x1e>
 8015060:	4606      	mov	r6, r0
 8015062:	2500      	movs	r5, #0
 8015064:	4630      	mov	r0, r6
 8015066:	f004 f8a5 	bl	80191b4 <uxr_reset_output_best_effort_stream>
 801506a:	7c23      	ldrb	r3, [r4, #16]
 801506c:	3501      	adds	r5, #1
 801506e:	42ab      	cmp	r3, r5
 8015070:	f106 0610 	add.w	r6, r6, #16
 8015074:	d8f6      	bhi.n	8015064 <uxr_reset_stream_storage+0xc>
 8015076:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801507a:	b163      	cbz	r3, 8015096 <uxr_reset_stream_storage+0x3e>
 801507c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015080:	2500      	movs	r5, #0
 8015082:	4630      	mov	r0, r6
 8015084:	f003 fe98 	bl	8018db8 <uxr_reset_input_best_effort_stream>
 8015088:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801508c:	3501      	adds	r5, #1
 801508e:	42ab      	cmp	r3, r5
 8015090:	f106 0602 	add.w	r6, r6, #2
 8015094:	d8f5      	bhi.n	8015082 <uxr_reset_stream_storage+0x2a>
 8015096:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801509a:	b163      	cbz	r3, 80150b6 <uxr_reset_stream_storage+0x5e>
 801509c:	f104 0618 	add.w	r6, r4, #24
 80150a0:	2500      	movs	r5, #0
 80150a2:	4630      	mov	r0, r6
 80150a4:	f004 f932 	bl	801930c <uxr_reset_output_reliable_stream>
 80150a8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80150ac:	3501      	adds	r5, #1
 80150ae:	42ab      	cmp	r3, r5
 80150b0:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80150b4:	d8f5      	bhi.n	80150a2 <uxr_reset_stream_storage+0x4a>
 80150b6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80150ba:	b163      	cbz	r3, 80150d6 <uxr_reset_stream_storage+0x7e>
 80150bc:	f104 0648 	add.w	r6, r4, #72	; 0x48
 80150c0:	2500      	movs	r5, #0
 80150c2:	4630      	mov	r0, r6
 80150c4:	f003 feec 	bl	8018ea0 <uxr_reset_input_reliable_stream>
 80150c8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80150cc:	3501      	adds	r5, #1
 80150ce:	42ab      	cmp	r3, r5
 80150d0:	f106 0618 	add.w	r6, r6, #24
 80150d4:	d8f5      	bhi.n	80150c2 <uxr_reset_stream_storage+0x6a>
 80150d6:	bd70      	pop	{r4, r5, r6, pc}

080150d8 <uxr_add_output_best_effort_buffer>:
 80150d8:	b510      	push	{r4, lr}
 80150da:	7c04      	ldrb	r4, [r0, #16]
 80150dc:	f104 0c01 	add.w	ip, r4, #1
 80150e0:	b082      	sub	sp, #8
 80150e2:	f880 c010 	strb.w	ip, [r0, #16]
 80150e6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80150ea:	f004 f859 	bl	80191a0 <uxr_init_output_best_effort_stream>
 80150ee:	2201      	movs	r2, #1
 80150f0:	4611      	mov	r1, r2
 80150f2:	4620      	mov	r0, r4
 80150f4:	b002      	add	sp, #8
 80150f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150fa:	f7ff bf4f 	b.w	8014f9c <uxr_stream_id>
 80150fe:	bf00      	nop

08015100 <uxr_add_output_reliable_buffer>:
 8015100:	b510      	push	{r4, lr}
 8015102:	b084      	sub	sp, #16
 8015104:	4684      	mov	ip, r0
 8015106:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801510a:	9000      	str	r0, [sp, #0]
 801510c:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8015110:	2028      	movs	r0, #40	; 0x28
 8015112:	fb00 c004 	mla	r0, r0, r4, ip
 8015116:	f104 0e01 	add.w	lr, r4, #1
 801511a:	3018      	adds	r0, #24
 801511c:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8015120:	f004 f8bc 	bl	801929c <uxr_init_output_reliable_stream>
 8015124:	2201      	movs	r2, #1
 8015126:	2102      	movs	r1, #2
 8015128:	4620      	mov	r0, r4
 801512a:	b004      	add	sp, #16
 801512c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015130:	f7ff bf34 	b.w	8014f9c <uxr_stream_id>

08015134 <uxr_add_input_best_effort_buffer>:
 8015134:	b510      	push	{r4, lr}
 8015136:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 801513a:	4603      	mov	r3, r0
 801513c:	1c62      	adds	r2, r4, #1
 801513e:	f104 0021 	add.w	r0, r4, #33	; 0x21
 8015142:	b082      	sub	sp, #8
 8015144:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8015148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801514c:	f003 fe30 	bl	8018db0 <uxr_init_input_best_effort_stream>
 8015150:	2200      	movs	r2, #0
 8015152:	2101      	movs	r1, #1
 8015154:	4620      	mov	r0, r4
 8015156:	b002      	add	sp, #8
 8015158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801515c:	f7ff bf1e 	b.w	8014f9c <uxr_stream_id>

08015160 <uxr_add_input_reliable_buffer>:
 8015160:	b510      	push	{r4, lr}
 8015162:	b084      	sub	sp, #16
 8015164:	4684      	mov	ip, r0
 8015166:	9806      	ldr	r0, [sp, #24]
 8015168:	9000      	str	r0, [sp, #0]
 801516a:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 801516e:	2018      	movs	r0, #24
 8015170:	fb00 c004 	mla	r0, r0, r4, ip
 8015174:	f104 0e01 	add.w	lr, r4, #1
 8015178:	3048      	adds	r0, #72	; 0x48
 801517a:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 801517e:	f003 fe63 	bl	8018e48 <uxr_init_input_reliable_stream>
 8015182:	2200      	movs	r2, #0
 8015184:	2102      	movs	r1, #2
 8015186:	4620      	mov	r0, r4
 8015188:	b004      	add	sp, #16
 801518a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801518e:	f7ff bf05 	b.w	8014f9c <uxr_stream_id>
 8015192:	bf00      	nop

08015194 <uxr_get_output_best_effort_stream>:
 8015194:	7c03      	ldrb	r3, [r0, #16]
 8015196:	428b      	cmp	r3, r1
 8015198:	bf8c      	ite	hi
 801519a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801519e:	2000      	movls	r0, #0
 80151a0:	4770      	bx	lr
 80151a2:	bf00      	nop

080151a4 <uxr_get_output_reliable_stream>:
 80151a4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80151a8:	428b      	cmp	r3, r1
 80151aa:	bf83      	ittte	hi
 80151ac:	2328      	movhi	r3, #40	; 0x28
 80151ae:	fb03 0001 	mlahi	r0, r3, r1, r0
 80151b2:	3018      	addhi	r0, #24
 80151b4:	2000      	movls	r0, #0
 80151b6:	4770      	bx	lr

080151b8 <uxr_get_input_best_effort_stream>:
 80151b8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80151bc:	428b      	cmp	r3, r1
 80151be:	bf86      	itte	hi
 80151c0:	3121      	addhi	r1, #33	; 0x21
 80151c2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80151c6:	2000      	movls	r0, #0
 80151c8:	4770      	bx	lr
 80151ca:	bf00      	nop

080151cc <uxr_get_input_reliable_stream>:
 80151cc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80151d0:	428b      	cmp	r3, r1
 80151d2:	bf83      	ittte	hi
 80151d4:	2318      	movhi	r3, #24
 80151d6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80151da:	3048      	addhi	r0, #72	; 0x48
 80151dc:	2000      	movls	r0, #0
 80151de:	4770      	bx	lr

080151e0 <uxr_output_streams_confirmed>:
 80151e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80151e4:	b183      	cbz	r3, 8015208 <uxr_output_streams_confirmed+0x28>
 80151e6:	b570      	push	{r4, r5, r6, lr}
 80151e8:	4606      	mov	r6, r0
 80151ea:	f100 0518 	add.w	r5, r0, #24
 80151ee:	2400      	movs	r4, #0
 80151f0:	e001      	b.n	80151f6 <uxr_output_streams_confirmed+0x16>
 80151f2:	3528      	adds	r5, #40	; 0x28
 80151f4:	b138      	cbz	r0, 8015206 <uxr_output_streams_confirmed+0x26>
 80151f6:	4628      	mov	r0, r5
 80151f8:	f004 fae6 	bl	80197c8 <uxr_is_output_up_to_date>
 80151fc:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8015200:	3401      	adds	r4, #1
 8015202:	42a3      	cmp	r3, r4
 8015204:	d8f5      	bhi.n	80151f2 <uxr_output_streams_confirmed+0x12>
 8015206:	bd70      	pop	{r4, r5, r6, pc}
 8015208:	2001      	movs	r0, #1
 801520a:	4770      	bx	lr

0801520c <uxr_buffer_submessage_header>:
 801520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801520e:	4604      	mov	r4, r0
 8015210:	460e      	mov	r6, r1
 8015212:	2104      	movs	r1, #4
 8015214:	4615      	mov	r5, r2
 8015216:	461f      	mov	r7, r3
 8015218:	f7fe fc04 	bl	8013a24 <ucdr_align_to>
 801521c:	2301      	movs	r3, #1
 801521e:	ea47 0203 	orr.w	r2, r7, r3
 8015222:	4631      	mov	r1, r6
 8015224:	7523      	strb	r3, [r4, #20]
 8015226:	4620      	mov	r0, r4
 8015228:	462b      	mov	r3, r5
 801522a:	f000 fa27 	bl	801567c <uxr_serialize_submessage_header>
 801522e:	4620      	mov	r0, r4
 8015230:	f7fe fc0e 	bl	8013a50 <ucdr_buffer_remaining>
 8015234:	42a8      	cmp	r0, r5
 8015236:	bf34      	ite	cc
 8015238:	2000      	movcc	r0, #0
 801523a:	2001      	movcs	r0, #1
 801523c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801523e:	bf00      	nop

08015240 <uxr_read_submessage_header>:
 8015240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015244:	4604      	mov	r4, r0
 8015246:	460d      	mov	r5, r1
 8015248:	2104      	movs	r1, #4
 801524a:	4616      	mov	r6, r2
 801524c:	4698      	mov	r8, r3
 801524e:	f7fe fbe9 	bl	8013a24 <ucdr_align_to>
 8015252:	4620      	mov	r0, r4
 8015254:	f7fe fbfc 	bl	8013a50 <ucdr_buffer_remaining>
 8015258:	2803      	cmp	r0, #3
 801525a:	bf8c      	ite	hi
 801525c:	2701      	movhi	r7, #1
 801525e:	2700      	movls	r7, #0
 8015260:	d802      	bhi.n	8015268 <uxr_read_submessage_header+0x28>
 8015262:	4638      	mov	r0, r7
 8015264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015268:	4633      	mov	r3, r6
 801526a:	4642      	mov	r2, r8
 801526c:	4620      	mov	r0, r4
 801526e:	4629      	mov	r1, r5
 8015270:	f000 fa18 	bl	80156a4 <uxr_deserialize_submessage_header>
 8015274:	f898 3000 	ldrb.w	r3, [r8]
 8015278:	f003 0201 	and.w	r2, r3, #1
 801527c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8015280:	f888 3000 	strb.w	r3, [r8]
 8015284:	7522      	strb	r2, [r4, #20]
 8015286:	4638      	mov	r0, r7
 8015288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801528c <uxr_submessage_padding>:
 801528c:	f010 0003 	ands.w	r0, r0, #3
 8015290:	bf18      	it	ne
 8015292:	f1c0 0004 	rsbne	r0, r0, #4
 8015296:	4770      	bx	lr

08015298 <uxr_millis>:
 8015298:	b510      	push	{r4, lr}
 801529a:	b084      	sub	sp, #16
 801529c:	4669      	mov	r1, sp
 801529e:	2001      	movs	r0, #1
 80152a0:	f7ec fef2 	bl	8002088 <clock_gettime>
 80152a4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80152a8:	4906      	ldr	r1, [pc, #24]	; (80152c4 <uxr_millis+0x2c>)
 80152aa:	fba0 0301 	umull	r0, r3, r0, r1
 80152ae:	1900      	adds	r0, r0, r4
 80152b0:	fb01 3102 	mla	r1, r1, r2, r3
 80152b4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80152b8:	4a03      	ldr	r2, [pc, #12]	; (80152c8 <uxr_millis+0x30>)
 80152ba:	2300      	movs	r3, #0
 80152bc:	f7eb f9fc 	bl	80006b8 <__aeabi_ldivmod>
 80152c0:	b004      	add	sp, #16
 80152c2:	bd10      	pop	{r4, pc}
 80152c4:	3b9aca00 	.word	0x3b9aca00
 80152c8:	000f4240 	.word	0x000f4240

080152cc <uxr_nanos>:
 80152cc:	b510      	push	{r4, lr}
 80152ce:	b084      	sub	sp, #16
 80152d0:	4669      	mov	r1, sp
 80152d2:	2001      	movs	r0, #1
 80152d4:	f7ec fed8 	bl	8002088 <clock_gettime>
 80152d8:	4a06      	ldr	r2, [pc, #24]	; (80152f4 <uxr_nanos+0x28>)
 80152da:	9800      	ldr	r0, [sp, #0]
 80152dc:	9902      	ldr	r1, [sp, #8]
 80152de:	9c01      	ldr	r4, [sp, #4]
 80152e0:	fba0 0302 	umull	r0, r3, r0, r2
 80152e4:	1840      	adds	r0, r0, r1
 80152e6:	fb02 3304 	mla	r3, r2, r4, r3
 80152ea:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80152ee:	b004      	add	sp, #16
 80152f0:	bd10      	pop	{r4, pc}
 80152f2:	bf00      	nop
 80152f4:	3b9aca00 	.word	0x3b9aca00

080152f8 <on_full_output_buffer_fragmented>:
 80152f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152fc:	460c      	mov	r4, r1
 80152fe:	b08a      	sub	sp, #40	; 0x28
 8015300:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8015304:	4606      	mov	r6, r0
 8015306:	f104 0008 	add.w	r0, r4, #8
 801530a:	f7ff ff4b 	bl	80151a4 <uxr_get_output_reliable_stream>
 801530e:	4605      	mov	r5, r0
 8015310:	f004 fa64 	bl	80197dc <get_available_free_slots>
 8015314:	b968      	cbnz	r0, 8015332 <on_full_output_buffer_fragmented+0x3a>
 8015316:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801531a:	4620      	mov	r0, r4
 801531c:	4798      	blx	r3
 801531e:	b918      	cbnz	r0, 8015328 <on_full_output_buffer_fragmented+0x30>
 8015320:	2001      	movs	r0, #1
 8015322:	b00a      	add	sp, #40	; 0x28
 8015324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015328:	4628      	mov	r0, r5
 801532a:	f004 fa57 	bl	80197dc <get_available_free_slots>
 801532e:	2800      	cmp	r0, #0
 8015330:	d0f6      	beq.n	8015320 <on_full_output_buffer_fragmented+0x28>
 8015332:	8929      	ldrh	r1, [r5, #8]
 8015334:	89eb      	ldrh	r3, [r5, #14]
 8015336:	7b28      	ldrb	r0, [r5, #12]
 8015338:	686a      	ldr	r2, [r5, #4]
 801533a:	fbb2 f8f1 	udiv	r8, r2, r1
 801533e:	fbb3 f2f1 	udiv	r2, r3, r1
 8015342:	fb01 3112 	mls	r1, r1, r2, r3
 8015346:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 801534a:	b289      	uxth	r1, r1
 801534c:	fb08 f101 	mul.w	r1, r8, r1
 8015350:	30fc      	adds	r0, #252	; 0xfc
 8015352:	f1a8 0804 	sub.w	r8, r8, #4
 8015356:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 801535a:	4440      	add	r0, r8
 801535c:	b287      	uxth	r7, r0
 801535e:	1bdb      	subs	r3, r3, r7
 8015360:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8015364:	682b      	ldr	r3, [r5, #0]
 8015366:	3104      	adds	r1, #4
 8015368:	4419      	add	r1, r3
 801536a:	4642      	mov	r2, r8
 801536c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015370:	9300      	str	r3, [sp, #0]
 8015372:	a802      	add	r0, sp, #8
 8015374:	2300      	movs	r3, #0
 8015376:	f7fe fb29 	bl	80139cc <ucdr_init_buffer_origin_offset>
 801537a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801537e:	f102 0308 	add.w	r3, r2, #8
 8015382:	4543      	cmp	r3, r8
 8015384:	d928      	bls.n	80153d8 <on_full_output_buffer_fragmented+0xe0>
 8015386:	463a      	mov	r2, r7
 8015388:	2300      	movs	r3, #0
 801538a:	210d      	movs	r1, #13
 801538c:	a802      	add	r0, sp, #8
 801538e:	f7ff ff3d 	bl	801520c <uxr_buffer_submessage_header>
 8015392:	8929      	ldrh	r1, [r5, #8]
 8015394:	89eb      	ldrh	r3, [r5, #14]
 8015396:	fbb3 f2f1 	udiv	r2, r3, r1
 801539a:	fb01 3312 	mls	r3, r1, r2, r3
 801539e:	b29b      	uxth	r3, r3
 80153a0:	686a      	ldr	r2, [r5, #4]
 80153a2:	fbb2 f2f1 	udiv	r2, r2, r1
 80153a6:	fb02 f303 	mul.w	r3, r2, r3
 80153aa:	682a      	ldr	r2, [r5, #0]
 80153ac:	f842 8003 	str.w	r8, [r2, r3]
 80153b0:	89e8      	ldrh	r0, [r5, #14]
 80153b2:	2101      	movs	r1, #1
 80153b4:	f004 fb28 	bl	8019a08 <uxr_seq_num_add>
 80153b8:	9904      	ldr	r1, [sp, #16]
 80153ba:	9a03      	ldr	r2, [sp, #12]
 80153bc:	81e8      	strh	r0, [r5, #14]
 80153be:	1a52      	subs	r2, r2, r1
 80153c0:	4630      	mov	r0, r6
 80153c2:	f7fe fb15 	bl	80139f0 <ucdr_init_buffer>
 80153c6:	4630      	mov	r0, r6
 80153c8:	490f      	ldr	r1, [pc, #60]	; (8015408 <on_full_output_buffer_fragmented+0x110>)
 80153ca:	4622      	mov	r2, r4
 80153cc:	f7fe fae4 	bl	8013998 <ucdr_set_on_full_buffer_callback>
 80153d0:	2000      	movs	r0, #0
 80153d2:	b00a      	add	sp, #40	; 0x28
 80153d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153d8:	b292      	uxth	r2, r2
 80153da:	2302      	movs	r3, #2
 80153dc:	210d      	movs	r1, #13
 80153de:	a802      	add	r0, sp, #8
 80153e0:	f7ff ff14 	bl	801520c <uxr_buffer_submessage_header>
 80153e4:	8928      	ldrh	r0, [r5, #8]
 80153e6:	89eb      	ldrh	r3, [r5, #14]
 80153e8:	fbb3 f1f0 	udiv	r1, r3, r0
 80153ec:	fb00 3311 	mls	r3, r0, r1, r3
 80153f0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80153f4:	6869      	ldr	r1, [r5, #4]
 80153f6:	fbb1 f1f0 	udiv	r1, r1, r0
 80153fa:	b29b      	uxth	r3, r3
 80153fc:	fb01 f303 	mul.w	r3, r1, r3
 8015400:	6829      	ldr	r1, [r5, #0]
 8015402:	3208      	adds	r2, #8
 8015404:	50ca      	str	r2, [r1, r3]
 8015406:	e7d3      	b.n	80153b0 <on_full_output_buffer_fragmented+0xb8>
 8015408:	080152f9 	.word	0x080152f9

0801540c <uxr_prepare_output_stream>:
 801540c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801540e:	b087      	sub	sp, #28
 8015410:	2707      	movs	r7, #7
 8015412:	9202      	str	r2, [sp, #8]
 8015414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015416:	9103      	str	r1, [sp, #12]
 8015418:	2500      	movs	r5, #0
 801541a:	3204      	adds	r2, #4
 801541c:	e9cd 7500 	strd	r7, r5, [sp]
 8015420:	461c      	mov	r4, r3
 8015422:	4606      	mov	r6, r0
 8015424:	f7ff fc54 	bl	8014cd0 <uxr_prepare_stream_to_write_submessage>
 8015428:	f080 0201 	eor.w	r2, r0, #1
 801542c:	b2d2      	uxtb	r2, r2
 801542e:	75a2      	strb	r2, [r4, #22]
 8015430:	b112      	cbz	r2, 8015438 <uxr_prepare_output_stream+0x2c>
 8015432:	4628      	mov	r0, r5
 8015434:	b007      	add	sp, #28
 8015436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015438:	aa05      	add	r2, sp, #20
 801543a:	9902      	ldr	r1, [sp, #8]
 801543c:	4630      	mov	r0, r6
 801543e:	f7ff fd7d 	bl	8014f3c <uxr_init_base_object_request>
 8015442:	a905      	add	r1, sp, #20
 8015444:	4605      	mov	r5, r0
 8015446:	4620      	mov	r0, r4
 8015448:	f000 ffa0 	bl	801638c <uxr_serialize_WRITE_DATA_Payload_Data>
 801544c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8015450:	69a6      	ldr	r6, [r4, #24]
 8015452:	69e7      	ldr	r7, [r4, #28]
 8015454:	1a52      	subs	r2, r2, r1
 8015456:	4620      	mov	r0, r4
 8015458:	f7fe faca 	bl	80139f0 <ucdr_init_buffer>
 801545c:	4620      	mov	r0, r4
 801545e:	463a      	mov	r2, r7
 8015460:	4631      	mov	r1, r6
 8015462:	f7fe fa99 	bl	8013998 <ucdr_set_on_full_buffer_callback>
 8015466:	4628      	mov	r0, r5
 8015468:	b007      	add	sp, #28
 801546a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801546c <uxr_prepare_output_stream_fragmented>:
 801546c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015470:	b091      	sub	sp, #68	; 0x44
 8015472:	4605      	mov	r5, r0
 8015474:	9105      	str	r1, [sp, #20]
 8015476:	3008      	adds	r0, #8
 8015478:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801547c:	461e      	mov	r6, r3
 801547e:	9204      	str	r2, [sp, #16]
 8015480:	f7ff fe90 	bl	80151a4 <uxr_get_output_reliable_stream>
 8015484:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8015488:	2b01      	cmp	r3, #1
 801548a:	f000 8091 	beq.w	80155b0 <uxr_prepare_output_stream_fragmented+0x144>
 801548e:	4604      	mov	r4, r0
 8015490:	2800      	cmp	r0, #0
 8015492:	f000 808d 	beq.w	80155b0 <uxr_prepare_output_stream_fragmented+0x144>
 8015496:	f004 f9a1 	bl	80197dc <get_available_free_slots>
 801549a:	2800      	cmp	r0, #0
 801549c:	f000 8083 	beq.w	80155a6 <uxr_prepare_output_stream_fragmented+0x13a>
 80154a0:	8922      	ldrh	r2, [r4, #8]
 80154a2:	89e7      	ldrh	r7, [r4, #14]
 80154a4:	fbb7 f9f2 	udiv	r9, r7, r2
 80154a8:	fb02 7919 	mls	r9, r2, r9, r7
 80154ac:	fa1f f989 	uxth.w	r9, r9
 80154b0:	6863      	ldr	r3, [r4, #4]
 80154b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80154b6:	6823      	ldr	r3, [r4, #0]
 80154b8:	9203      	str	r2, [sp, #12]
 80154ba:	fb02 f909 	mul.w	r9, r2, r9
 80154be:	f109 0904 	add.w	r9, r9, #4
 80154c2:	4499      	add	r9, r3
 80154c4:	7b23      	ldrb	r3, [r4, #12]
 80154c6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80154ca:	4543      	cmp	r3, r8
 80154cc:	f1a2 0b04 	sub.w	fp, r2, #4
 80154d0:	d37a      	bcc.n	80155c8 <uxr_prepare_output_stream_fragmented+0x15c>
 80154d2:	f1ab 0a04 	sub.w	sl, fp, #4
 80154d6:	ebaa 0a03 	sub.w	sl, sl, r3
 80154da:	465a      	mov	r2, fp
 80154dc:	2300      	movs	r3, #0
 80154de:	4649      	mov	r1, r9
 80154e0:	a808      	add	r0, sp, #32
 80154e2:	f8cd 8000 	str.w	r8, [sp]
 80154e6:	f7fe fa71 	bl	80139cc <ucdr_init_buffer_origin_offset>
 80154ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80154ec:	fa1f fa8a 	uxth.w	sl, sl
 80154f0:	4652      	mov	r2, sl
 80154f2:	f103 0a08 	add.w	sl, r3, #8
 80154f6:	45da      	cmp	sl, fp
 80154f8:	bf34      	ite	cc
 80154fa:	2302      	movcc	r3, #2
 80154fc:	2300      	movcs	r3, #0
 80154fe:	210d      	movs	r1, #13
 8015500:	a808      	add	r0, sp, #32
 8015502:	f7ff fe83 	bl	801520c <uxr_buffer_submessage_header>
 8015506:	8921      	ldrh	r1, [r4, #8]
 8015508:	fbb7 f2f1 	udiv	r2, r7, r1
 801550c:	fb01 7212 	mls	r2, r1, r2, r7
 8015510:	b292      	uxth	r2, r2
 8015512:	6863      	ldr	r3, [r4, #4]
 8015514:	fbb3 f3f1 	udiv	r3, r3, r1
 8015518:	fb02 f303 	mul.w	r3, r2, r3
 801551c:	6822      	ldr	r2, [r4, #0]
 801551e:	4638      	mov	r0, r7
 8015520:	f842 b003 	str.w	fp, [r2, r3]
 8015524:	2101      	movs	r1, #1
 8015526:	f004 fa6f 	bl	8019a08 <uxr_seq_num_add>
 801552a:	9b03      	ldr	r3, [sp, #12]
 801552c:	f108 0104 	add.w	r1, r8, #4
 8015530:	f1a3 0208 	sub.w	r2, r3, #8
 8015534:	eba2 0208 	sub.w	r2, r2, r8
 8015538:	4449      	add	r1, r9
 801553a:	4607      	mov	r7, r0
 801553c:	4630      	mov	r0, r6
 801553e:	f7fe fa57 	bl	80139f0 <ucdr_init_buffer>
 8015542:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015544:	81e7      	strh	r7, [r4, #14]
 8015546:	1d1a      	adds	r2, r3, #4
 8015548:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801554c:	bf28      	it	cs
 801554e:	2200      	movcs	r2, #0
 8015550:	2300      	movs	r3, #0
 8015552:	b292      	uxth	r2, r2
 8015554:	2107      	movs	r1, #7
 8015556:	4630      	mov	r0, r6
 8015558:	f7ff fe58 	bl	801520c <uxr_buffer_submessage_header>
 801555c:	9904      	ldr	r1, [sp, #16]
 801555e:	aa07      	add	r2, sp, #28
 8015560:	4628      	mov	r0, r5
 8015562:	f7ff fceb 	bl	8014f3c <uxr_init_base_object_request>
 8015566:	4604      	mov	r4, r0
 8015568:	b318      	cbz	r0, 80155b2 <uxr_prepare_output_stream_fragmented+0x146>
 801556a:	a907      	add	r1, sp, #28
 801556c:	4630      	mov	r0, r6
 801556e:	f000 ff0d 	bl	801638c <uxr_serialize_WRITE_DATA_Payload_Data>
 8015572:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8015576:	4630      	mov	r0, r6
 8015578:	1a52      	subs	r2, r2, r1
 801557a:	f7fe fa39 	bl	80139f0 <ucdr_init_buffer>
 801557e:	9b05      	ldr	r3, [sp, #20]
 8015580:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8015584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015586:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 801558a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801558c:	491b      	ldr	r1, [pc, #108]	; (80155fc <uxr_prepare_output_stream_fragmented+0x190>)
 801558e:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 8015592:	4630      	mov	r0, r6
 8015594:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8015598:	462a      	mov	r2, r5
 801559a:	f7fe f9fd 	bl	8013998 <ucdr_set_on_full_buffer_callback>
 801559e:	4620      	mov	r0, r4
 80155a0:	b011      	add	sp, #68	; 0x44
 80155a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80155a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80155aa:	4628      	mov	r0, r5
 80155ac:	4798      	blx	r3
 80155ae:	b920      	cbnz	r0, 80155ba <uxr_prepare_output_stream_fragmented+0x14e>
 80155b0:	2400      	movs	r4, #0
 80155b2:	4620      	mov	r0, r4
 80155b4:	b011      	add	sp, #68	; 0x44
 80155b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ba:	4620      	mov	r0, r4
 80155bc:	f004 f90e 	bl	80197dc <get_available_free_slots>
 80155c0:	2800      	cmp	r0, #0
 80155c2:	f47f af6d 	bne.w	80154a0 <uxr_prepare_output_stream_fragmented+0x34>
 80155c6:	e7f3      	b.n	80155b0 <uxr_prepare_output_stream_fragmented+0x144>
 80155c8:	4638      	mov	r0, r7
 80155ca:	2101      	movs	r1, #1
 80155cc:	f004 fa1c 	bl	8019a08 <uxr_seq_num_add>
 80155d0:	8921      	ldrh	r1, [r4, #8]
 80155d2:	fbb0 f2f1 	udiv	r2, r0, r1
 80155d6:	fb01 0912 	mls	r9, r1, r2, r0
 80155da:	fa1f f289 	uxth.w	r2, r9
 80155de:	6863      	ldr	r3, [r4, #4]
 80155e0:	fbb3 f9f1 	udiv	r9, r3, r1
 80155e4:	6823      	ldr	r3, [r4, #0]
 80155e6:	fb02 f909 	mul.w	r9, r2, r9
 80155ea:	f109 0904 	add.w	r9, r9, #4
 80155ee:	4499      	add	r9, r3
 80155f0:	4607      	mov	r7, r0
 80155f2:	7b23      	ldrb	r3, [r4, #12]
 80155f4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80155f8:	e76b      	b.n	80154d2 <uxr_prepare_output_stream_fragmented+0x66>
 80155fa:	bf00      	nop
 80155fc:	080152f9 	.word	0x080152f9

08015600 <uxr_serialize_message_header>:
 8015600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015602:	b083      	sub	sp, #12
 8015604:	4616      	mov	r6, r2
 8015606:	4604      	mov	r4, r0
 8015608:	9301      	str	r3, [sp, #4]
 801560a:	460d      	mov	r5, r1
 801560c:	9f08      	ldr	r7, [sp, #32]
 801560e:	f7fc fcbf 	bl	8011f90 <ucdr_serialize_uint8_t>
 8015612:	4631      	mov	r1, r6
 8015614:	4620      	mov	r0, r4
 8015616:	f7fc fcbb 	bl	8011f90 <ucdr_serialize_uint8_t>
 801561a:	9a01      	ldr	r2, [sp, #4]
 801561c:	2101      	movs	r1, #1
 801561e:	4620      	mov	r0, r4
 8015620:	f7fc fd62 	bl	80120e8 <ucdr_serialize_endian_uint16_t>
 8015624:	062b      	lsls	r3, r5, #24
 8015626:	d501      	bpl.n	801562c <uxr_serialize_message_header+0x2c>
 8015628:	b003      	add	sp, #12
 801562a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801562c:	2204      	movs	r2, #4
 801562e:	4639      	mov	r1, r7
 8015630:	4620      	mov	r0, r4
 8015632:	b003      	add	sp, #12
 8015634:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015638:	f003 b96e 	b.w	8018918 <ucdr_serialize_array_uint8_t>

0801563c <uxr_deserialize_message_header>:
 801563c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801563e:	b083      	sub	sp, #12
 8015640:	4616      	mov	r6, r2
 8015642:	4604      	mov	r4, r0
 8015644:	9301      	str	r3, [sp, #4]
 8015646:	460d      	mov	r5, r1
 8015648:	9f08      	ldr	r7, [sp, #32]
 801564a:	f7fc fcb7 	bl	8011fbc <ucdr_deserialize_uint8_t>
 801564e:	4631      	mov	r1, r6
 8015650:	4620      	mov	r0, r4
 8015652:	f7fc fcb3 	bl	8011fbc <ucdr_deserialize_uint8_t>
 8015656:	9a01      	ldr	r2, [sp, #4]
 8015658:	2101      	movs	r1, #1
 801565a:	4620      	mov	r0, r4
 801565c:	f7fc fe38 	bl	80122d0 <ucdr_deserialize_endian_uint16_t>
 8015660:	f995 3000 	ldrsb.w	r3, [r5]
 8015664:	2b00      	cmp	r3, #0
 8015666:	da01      	bge.n	801566c <uxr_deserialize_message_header+0x30>
 8015668:	b003      	add	sp, #12
 801566a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801566c:	2204      	movs	r2, #4
 801566e:	4639      	mov	r1, r7
 8015670:	4620      	mov	r0, r4
 8015672:	b003      	add	sp, #12
 8015674:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015678:	f003 b9b2 	b.w	80189e0 <ucdr_deserialize_array_uint8_t>

0801567c <uxr_serialize_submessage_header>:
 801567c:	b530      	push	{r4, r5, lr}
 801567e:	b083      	sub	sp, #12
 8015680:	4615      	mov	r5, r2
 8015682:	4604      	mov	r4, r0
 8015684:	9301      	str	r3, [sp, #4]
 8015686:	f7fc fc83 	bl	8011f90 <ucdr_serialize_uint8_t>
 801568a:	4629      	mov	r1, r5
 801568c:	4620      	mov	r0, r4
 801568e:	f7fc fc7f 	bl	8011f90 <ucdr_serialize_uint8_t>
 8015692:	9a01      	ldr	r2, [sp, #4]
 8015694:	2101      	movs	r1, #1
 8015696:	4620      	mov	r0, r4
 8015698:	b003      	add	sp, #12
 801569a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801569e:	f7fc bd23 	b.w	80120e8 <ucdr_serialize_endian_uint16_t>
 80156a2:	bf00      	nop

080156a4 <uxr_deserialize_submessage_header>:
 80156a4:	b530      	push	{r4, r5, lr}
 80156a6:	b083      	sub	sp, #12
 80156a8:	4615      	mov	r5, r2
 80156aa:	4604      	mov	r4, r0
 80156ac:	9301      	str	r3, [sp, #4]
 80156ae:	f7fc fc85 	bl	8011fbc <ucdr_deserialize_uint8_t>
 80156b2:	4629      	mov	r1, r5
 80156b4:	4620      	mov	r0, r4
 80156b6:	f7fc fc81 	bl	8011fbc <ucdr_deserialize_uint8_t>
 80156ba:	9a01      	ldr	r2, [sp, #4]
 80156bc:	2101      	movs	r1, #1
 80156be:	4620      	mov	r0, r4
 80156c0:	b003      	add	sp, #12
 80156c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80156c6:	f7fc be03 	b.w	80122d0 <ucdr_deserialize_endian_uint16_t>
 80156ca:	bf00      	nop

080156cc <uxr_serialize_CLIENT_Representation>:
 80156cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156d0:	2204      	movs	r2, #4
 80156d2:	460e      	mov	r6, r1
 80156d4:	4605      	mov	r5, r0
 80156d6:	f003 f91f 	bl	8018918 <ucdr_serialize_array_uint8_t>
 80156da:	2202      	movs	r2, #2
 80156dc:	4607      	mov	r7, r0
 80156de:	1d31      	adds	r1, r6, #4
 80156e0:	4628      	mov	r0, r5
 80156e2:	f003 f919 	bl	8018918 <ucdr_serialize_array_uint8_t>
 80156e6:	4038      	ands	r0, r7
 80156e8:	2202      	movs	r2, #2
 80156ea:	1db1      	adds	r1, r6, #6
 80156ec:	b2c7      	uxtb	r7, r0
 80156ee:	4628      	mov	r0, r5
 80156f0:	f003 f912 	bl	8018918 <ucdr_serialize_array_uint8_t>
 80156f4:	2204      	movs	r2, #4
 80156f6:	4007      	ands	r7, r0
 80156f8:	f106 0108 	add.w	r1, r6, #8
 80156fc:	4628      	mov	r0, r5
 80156fe:	f003 f90b 	bl	8018918 <ucdr_serialize_array_uint8_t>
 8015702:	7b31      	ldrb	r1, [r6, #12]
 8015704:	4007      	ands	r7, r0
 8015706:	4628      	mov	r0, r5
 8015708:	f7fc fc42 	bl	8011f90 <ucdr_serialize_uint8_t>
 801570c:	7b71      	ldrb	r1, [r6, #13]
 801570e:	4007      	ands	r7, r0
 8015710:	4628      	mov	r0, r5
 8015712:	f7fc fc0f 	bl	8011f34 <ucdr_serialize_bool>
 8015716:	7b73      	ldrb	r3, [r6, #13]
 8015718:	ea07 0800 	and.w	r8, r7, r0
 801571c:	b93b      	cbnz	r3, 801572e <uxr_serialize_CLIENT_Representation+0x62>
 801571e:	8bb1      	ldrh	r1, [r6, #28]
 8015720:	4628      	mov	r0, r5
 8015722:	f7fc fc61 	bl	8011fe8 <ucdr_serialize_uint16_t>
 8015726:	ea08 0000 	and.w	r0, r8, r0
 801572a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801572e:	6931      	ldr	r1, [r6, #16]
 8015730:	4628      	mov	r0, r5
 8015732:	f7fc fe43 	bl	80123bc <ucdr_serialize_uint32_t>
 8015736:	6933      	ldr	r3, [r6, #16]
 8015738:	b1e3      	cbz	r3, 8015774 <uxr_serialize_CLIENT_Representation+0xa8>
 801573a:	b1c0      	cbz	r0, 801576e <uxr_serialize_CLIENT_Representation+0xa2>
 801573c:	4637      	mov	r7, r6
 801573e:	f04f 0900 	mov.w	r9, #0
 8015742:	e001      	b.n	8015748 <uxr_serialize_CLIENT_Representation+0x7c>
 8015744:	3708      	adds	r7, #8
 8015746:	b194      	cbz	r4, 801576e <uxr_serialize_CLIENT_Representation+0xa2>
 8015748:	6979      	ldr	r1, [r7, #20]
 801574a:	4628      	mov	r0, r5
 801574c:	f003 fa56 	bl	8018bfc <ucdr_serialize_string>
 8015750:	69b9      	ldr	r1, [r7, #24]
 8015752:	4604      	mov	r4, r0
 8015754:	4628      	mov	r0, r5
 8015756:	f003 fa51 	bl	8018bfc <ucdr_serialize_string>
 801575a:	6933      	ldr	r3, [r6, #16]
 801575c:	f109 0901 	add.w	r9, r9, #1
 8015760:	4004      	ands	r4, r0
 8015762:	4599      	cmp	r9, r3
 8015764:	b2e4      	uxtb	r4, r4
 8015766:	d3ed      	bcc.n	8015744 <uxr_serialize_CLIENT_Representation+0x78>
 8015768:	ea08 0804 	and.w	r8, r8, r4
 801576c:	e7d7      	b.n	801571e <uxr_serialize_CLIENT_Representation+0x52>
 801576e:	f04f 0800 	mov.w	r8, #0
 8015772:	e7d4      	b.n	801571e <uxr_serialize_CLIENT_Representation+0x52>
 8015774:	ea08 0800 	and.w	r8, r8, r0
 8015778:	e7d1      	b.n	801571e <uxr_serialize_CLIENT_Representation+0x52>
 801577a:	bf00      	nop

0801577c <uxr_deserialize_CLIENT_Representation>:
 801577c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015780:	2204      	movs	r2, #4
 8015782:	460c      	mov	r4, r1
 8015784:	4605      	mov	r5, r0
 8015786:	f003 f92b 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 801578a:	2202      	movs	r2, #2
 801578c:	4607      	mov	r7, r0
 801578e:	1d21      	adds	r1, r4, #4
 8015790:	4628      	mov	r0, r5
 8015792:	f003 f925 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 8015796:	4038      	ands	r0, r7
 8015798:	2202      	movs	r2, #2
 801579a:	1da1      	adds	r1, r4, #6
 801579c:	b2c6      	uxtb	r6, r0
 801579e:	4628      	mov	r0, r5
 80157a0:	f003 f91e 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 80157a4:	2204      	movs	r2, #4
 80157a6:	4006      	ands	r6, r0
 80157a8:	f104 0108 	add.w	r1, r4, #8
 80157ac:	4628      	mov	r0, r5
 80157ae:	f003 f917 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 80157b2:	f104 010c 	add.w	r1, r4, #12
 80157b6:	4006      	ands	r6, r0
 80157b8:	4628      	mov	r0, r5
 80157ba:	f7fc fbff 	bl	8011fbc <ucdr_deserialize_uint8_t>
 80157be:	f104 010d 	add.w	r1, r4, #13
 80157c2:	ea06 0700 	and.w	r7, r6, r0
 80157c6:	4628      	mov	r0, r5
 80157c8:	f7fc fbca 	bl	8011f60 <ucdr_deserialize_bool>
 80157cc:	7b63      	ldrb	r3, [r4, #13]
 80157ce:	4007      	ands	r7, r0
 80157d0:	b93b      	cbnz	r3, 80157e2 <uxr_deserialize_CLIENT_Representation+0x66>
 80157d2:	f104 011c 	add.w	r1, r4, #28
 80157d6:	4628      	mov	r0, r5
 80157d8:	f7fc fd06 	bl	80121e8 <ucdr_deserialize_uint16_t>
 80157dc:	4038      	ands	r0, r7
 80157de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157e2:	f104 0110 	add.w	r1, r4, #16
 80157e6:	4628      	mov	r0, r5
 80157e8:	f7fc ff18 	bl	801261c <ucdr_deserialize_uint32_t>
 80157ec:	6923      	ldr	r3, [r4, #16]
 80157ee:	2b01      	cmp	r3, #1
 80157f0:	d903      	bls.n	80157fa <uxr_deserialize_CLIENT_Representation+0x7e>
 80157f2:	2301      	movs	r3, #1
 80157f4:	75ab      	strb	r3, [r5, #22]
 80157f6:	2700      	movs	r7, #0
 80157f8:	e7eb      	b.n	80157d2 <uxr_deserialize_CLIENT_Representation+0x56>
 80157fa:	b30b      	cbz	r3, 8015840 <uxr_deserialize_CLIENT_Representation+0xc4>
 80157fc:	2800      	cmp	r0, #0
 80157fe:	d0fa      	beq.n	80157f6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8015800:	46a0      	mov	r8, r4
 8015802:	f04f 0900 	mov.w	r9, #0
 8015806:	e001      	b.n	801580c <uxr_deserialize_CLIENT_Representation+0x90>
 8015808:	2e00      	cmp	r6, #0
 801580a:	d0f4      	beq.n	80157f6 <uxr_deserialize_CLIENT_Representation+0x7a>
 801580c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015814:	4628      	mov	r0, r5
 8015816:	f003 fa01 	bl	8018c1c <ucdr_deserialize_string>
 801581a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801581e:	4606      	mov	r6, r0
 8015820:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8015824:	4628      	mov	r0, r5
 8015826:	f003 f9f9 	bl	8018c1c <ucdr_deserialize_string>
 801582a:	6923      	ldr	r3, [r4, #16]
 801582c:	f109 0901 	add.w	r9, r9, #1
 8015830:	4006      	ands	r6, r0
 8015832:	4599      	cmp	r9, r3
 8015834:	f108 0808 	add.w	r8, r8, #8
 8015838:	b2f6      	uxtb	r6, r6
 801583a:	d3e5      	bcc.n	8015808 <uxr_deserialize_CLIENT_Representation+0x8c>
 801583c:	4037      	ands	r7, r6
 801583e:	e7c8      	b.n	80157d2 <uxr_deserialize_CLIENT_Representation+0x56>
 8015840:	4007      	ands	r7, r0
 8015842:	e7c6      	b.n	80157d2 <uxr_deserialize_CLIENT_Representation+0x56>

08015844 <uxr_serialize_AGENT_Representation>:
 8015844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015848:	2204      	movs	r2, #4
 801584a:	460f      	mov	r7, r1
 801584c:	4605      	mov	r5, r0
 801584e:	f003 f863 	bl	8018918 <ucdr_serialize_array_uint8_t>
 8015852:	2202      	movs	r2, #2
 8015854:	4604      	mov	r4, r0
 8015856:	1d39      	adds	r1, r7, #4
 8015858:	4628      	mov	r0, r5
 801585a:	f003 f85d 	bl	8018918 <ucdr_serialize_array_uint8_t>
 801585e:	4020      	ands	r0, r4
 8015860:	2202      	movs	r2, #2
 8015862:	1db9      	adds	r1, r7, #6
 8015864:	b2c4      	uxtb	r4, r0
 8015866:	4628      	mov	r0, r5
 8015868:	f003 f856 	bl	8018918 <ucdr_serialize_array_uint8_t>
 801586c:	7a39      	ldrb	r1, [r7, #8]
 801586e:	4004      	ands	r4, r0
 8015870:	4628      	mov	r0, r5
 8015872:	f7fc fb5f 	bl	8011f34 <ucdr_serialize_bool>
 8015876:	7a3b      	ldrb	r3, [r7, #8]
 8015878:	ea00 0804 	and.w	r8, r0, r4
 801587c:	b913      	cbnz	r3, 8015884 <uxr_serialize_AGENT_Representation+0x40>
 801587e:	4640      	mov	r0, r8
 8015880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015884:	68f9      	ldr	r1, [r7, #12]
 8015886:	4628      	mov	r0, r5
 8015888:	f7fc fd98 	bl	80123bc <ucdr_serialize_uint32_t>
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	b303      	cbz	r3, 80158d2 <uxr_serialize_AGENT_Representation+0x8e>
 8015890:	b1d0      	cbz	r0, 80158c8 <uxr_serialize_AGENT_Representation+0x84>
 8015892:	463e      	mov	r6, r7
 8015894:	f04f 0900 	mov.w	r9, #0
 8015898:	e001      	b.n	801589e <uxr_serialize_AGENT_Representation+0x5a>
 801589a:	3608      	adds	r6, #8
 801589c:	b1a4      	cbz	r4, 80158c8 <uxr_serialize_AGENT_Representation+0x84>
 801589e:	6931      	ldr	r1, [r6, #16]
 80158a0:	4628      	mov	r0, r5
 80158a2:	f003 f9ab 	bl	8018bfc <ucdr_serialize_string>
 80158a6:	6971      	ldr	r1, [r6, #20]
 80158a8:	4604      	mov	r4, r0
 80158aa:	4628      	mov	r0, r5
 80158ac:	f003 f9a6 	bl	8018bfc <ucdr_serialize_string>
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	f109 0901 	add.w	r9, r9, #1
 80158b6:	4004      	ands	r4, r0
 80158b8:	4599      	cmp	r9, r3
 80158ba:	b2e4      	uxtb	r4, r4
 80158bc:	d3ed      	bcc.n	801589a <uxr_serialize_AGENT_Representation+0x56>
 80158be:	ea08 0804 	and.w	r8, r8, r4
 80158c2:	4640      	mov	r0, r8
 80158c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158c8:	f04f 0800 	mov.w	r8, #0
 80158cc:	4640      	mov	r0, r8
 80158ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158d2:	ea08 0800 	and.w	r8, r8, r0
 80158d6:	e7d2      	b.n	801587e <uxr_serialize_AGENT_Representation+0x3a>

080158d8 <uxr_serialize_DATAWRITER_Representation>:
 80158d8:	b570      	push	{r4, r5, r6, lr}
 80158da:	460d      	mov	r5, r1
 80158dc:	7809      	ldrb	r1, [r1, #0]
 80158de:	4606      	mov	r6, r0
 80158e0:	f7fc fb56 	bl	8011f90 <ucdr_serialize_uint8_t>
 80158e4:	4604      	mov	r4, r0
 80158e6:	b130      	cbz	r0, 80158f6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80158e8:	782b      	ldrb	r3, [r5, #0]
 80158ea:	2b02      	cmp	r3, #2
 80158ec:	d00c      	beq.n	8015908 <uxr_serialize_DATAWRITER_Representation+0x30>
 80158ee:	2b03      	cmp	r3, #3
 80158f0:	d010      	beq.n	8015914 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80158f2:	2b01      	cmp	r3, #1
 80158f4:	d008      	beq.n	8015908 <uxr_serialize_DATAWRITER_Representation+0x30>
 80158f6:	2202      	movs	r2, #2
 80158f8:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80158fc:	4630      	mov	r0, r6
 80158fe:	f003 f80b 	bl	8018918 <ucdr_serialize_array_uint8_t>
 8015902:	4020      	ands	r0, r4
 8015904:	b2c0      	uxtb	r0, r0
 8015906:	bd70      	pop	{r4, r5, r6, pc}
 8015908:	6869      	ldr	r1, [r5, #4]
 801590a:	4630      	mov	r0, r6
 801590c:	f003 f976 	bl	8018bfc <ucdr_serialize_string>
 8015910:	4604      	mov	r4, r0
 8015912:	e7f0      	b.n	80158f6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015914:	4629      	mov	r1, r5
 8015916:	4630      	mov	r0, r6
 8015918:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801591c:	3104      	adds	r1, #4
 801591e:	f7fe f903 	bl	8013b28 <ucdr_serialize_sequence_uint8_t>
 8015922:	4604      	mov	r4, r0
 8015924:	e7e7      	b.n	80158f6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015926:	bf00      	nop

08015928 <uxr_serialize_ObjectVariant.part.0>:
 8015928:	b570      	push	{r4, r5, r6, lr}
 801592a:	780b      	ldrb	r3, [r1, #0]
 801592c:	3b01      	subs	r3, #1
 801592e:	460c      	mov	r4, r1
 8015930:	4605      	mov	r5, r0
 8015932:	2b0d      	cmp	r3, #13
 8015934:	d854      	bhi.n	80159e0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015936:	e8df f003 	tbb	[pc, r3]
 801593a:	0730      	.short	0x0730
 801593c:	07071b1b 	.word	0x07071b1b
 8015940:	0c530707 	.word	0x0c530707
 8015944:	494e0c0c 	.word	0x494e0c0c
 8015948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801594c:	3104      	adds	r1, #4
 801594e:	f7ff bfc3 	b.w	80158d8 <uxr_serialize_DATAWRITER_Representation>
 8015952:	7909      	ldrb	r1, [r1, #4]
 8015954:	f7fc fb1c 	bl	8011f90 <ucdr_serialize_uint8_t>
 8015958:	b1e8      	cbz	r0, 8015996 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801595a:	7923      	ldrb	r3, [r4, #4]
 801595c:	2b01      	cmp	r3, #1
 801595e:	d001      	beq.n	8015964 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8015960:	2b02      	cmp	r3, #2
 8015962:	d13d      	bne.n	80159e0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015964:	68a1      	ldr	r1, [r4, #8]
 8015966:	4628      	mov	r0, r5
 8015968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801596c:	f003 b946 	b.w	8018bfc <ucdr_serialize_string>
 8015970:	7909      	ldrb	r1, [r1, #4]
 8015972:	f7fc fb0d 	bl	8011f90 <ucdr_serialize_uint8_t>
 8015976:	4606      	mov	r6, r0
 8015978:	b120      	cbz	r0, 8015984 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801597a:	7923      	ldrb	r3, [r4, #4]
 801597c:	2b02      	cmp	r3, #2
 801597e:	d039      	beq.n	80159f4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8015980:	2b03      	cmp	r3, #3
 8015982:	d02f      	beq.n	80159e4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8015984:	2202      	movs	r2, #2
 8015986:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801598a:	4628      	mov	r0, r5
 801598c:	f002 ffc4 	bl	8018918 <ucdr_serialize_array_uint8_t>
 8015990:	4030      	ands	r0, r6
 8015992:	b2c0      	uxtb	r0, r0
 8015994:	bd70      	pop	{r4, r5, r6, pc}
 8015996:	2000      	movs	r0, #0
 8015998:	bd70      	pop	{r4, r5, r6, pc}
 801599a:	7909      	ldrb	r1, [r1, #4]
 801599c:	f7fc faf8 	bl	8011f90 <ucdr_serialize_uint8_t>
 80159a0:	4606      	mov	r6, r0
 80159a2:	b158      	cbz	r0, 80159bc <uxr_serialize_ObjectVariant.part.0+0x94>
 80159a4:	7923      	ldrb	r3, [r4, #4]
 80159a6:	2b02      	cmp	r3, #2
 80159a8:	d003      	beq.n	80159b2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80159aa:	2b03      	cmp	r3, #3
 80159ac:	d028      	beq.n	8015a00 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80159ae:	2b01      	cmp	r3, #1
 80159b0:	d104      	bne.n	80159bc <uxr_serialize_ObjectVariant.part.0+0x94>
 80159b2:	68a1      	ldr	r1, [r4, #8]
 80159b4:	4628      	mov	r0, r5
 80159b6:	f003 f921 	bl	8018bfc <ucdr_serialize_string>
 80159ba:	4606      	mov	r6, r0
 80159bc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 80159c0:	4628      	mov	r0, r5
 80159c2:	f7fd f821 	bl	8012a08 <ucdr_serialize_int16_t>
 80159c6:	4030      	ands	r0, r6
 80159c8:	b2c0      	uxtb	r0, r0
 80159ca:	bd70      	pop	{r4, r5, r6, pc}
 80159cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159d0:	3104      	adds	r1, #4
 80159d2:	f7ff be7b 	b.w	80156cc <uxr_serialize_CLIENT_Representation>
 80159d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159da:	3104      	adds	r1, #4
 80159dc:	f7ff bf32 	b.w	8015844 <uxr_serialize_AGENT_Representation>
 80159e0:	2001      	movs	r0, #1
 80159e2:	bd70      	pop	{r4, r5, r6, pc}
 80159e4:	68a2      	ldr	r2, [r4, #8]
 80159e6:	f104 010c 	add.w	r1, r4, #12
 80159ea:	4628      	mov	r0, r5
 80159ec:	f7fe f89c 	bl	8013b28 <ucdr_serialize_sequence_uint8_t>
 80159f0:	4606      	mov	r6, r0
 80159f2:	e7c7      	b.n	8015984 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80159f4:	68a1      	ldr	r1, [r4, #8]
 80159f6:	4628      	mov	r0, r5
 80159f8:	f003 f900 	bl	8018bfc <ucdr_serialize_string>
 80159fc:	4606      	mov	r6, r0
 80159fe:	e7c1      	b.n	8015984 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015a00:	68a2      	ldr	r2, [r4, #8]
 8015a02:	f104 010c 	add.w	r1, r4, #12
 8015a06:	4628      	mov	r0, r5
 8015a08:	f7fe f88e 	bl	8013b28 <ucdr_serialize_sequence_uint8_t>
 8015a0c:	4606      	mov	r6, r0
 8015a0e:	e7d5      	b.n	80159bc <uxr_serialize_ObjectVariant.part.0+0x94>

08015a10 <uxr_deserialize_DATAWRITER_Representation>:
 8015a10:	b570      	push	{r4, r5, r6, lr}
 8015a12:	4606      	mov	r6, r0
 8015a14:	460d      	mov	r5, r1
 8015a16:	f7fc fad1 	bl	8011fbc <ucdr_deserialize_uint8_t>
 8015a1a:	4604      	mov	r4, r0
 8015a1c:	b130      	cbz	r0, 8015a2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015a1e:	782b      	ldrb	r3, [r5, #0]
 8015a20:	2b02      	cmp	r3, #2
 8015a22:	d00c      	beq.n	8015a3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015a24:	2b03      	cmp	r3, #3
 8015a26:	d012      	beq.n	8015a4e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8015a28:	2b01      	cmp	r3, #1
 8015a2a:	d008      	beq.n	8015a3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015a2c:	2202      	movs	r2, #2
 8015a2e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8015a32:	4630      	mov	r0, r6
 8015a34:	f002 ffd4 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 8015a38:	4020      	ands	r0, r4
 8015a3a:	b2c0      	uxtb	r0, r0
 8015a3c:	bd70      	pop	{r4, r5, r6, pc}
 8015a3e:	6869      	ldr	r1, [r5, #4]
 8015a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015a44:	4630      	mov	r0, r6
 8015a46:	f003 f8e9 	bl	8018c1c <ucdr_deserialize_string>
 8015a4a:	4604      	mov	r4, r0
 8015a4c:	e7ee      	b.n	8015a2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015a4e:	1d2b      	adds	r3, r5, #4
 8015a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015a54:	f105 0108 	add.w	r1, r5, #8
 8015a58:	4630      	mov	r0, r6
 8015a5a:	f7fe f877 	bl	8013b4c <ucdr_deserialize_sequence_uint8_t>
 8015a5e:	4604      	mov	r4, r0
 8015a60:	e7e4      	b.n	8015a2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015a62:	bf00      	nop

08015a64 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8015a64:	b570      	push	{r4, r5, r6, lr}
 8015a66:	460d      	mov	r5, r1
 8015a68:	7809      	ldrb	r1, [r1, #0]
 8015a6a:	4606      	mov	r6, r0
 8015a6c:	f7fc fa62 	bl	8011f34 <ucdr_serialize_bool>
 8015a70:	782b      	ldrb	r3, [r5, #0]
 8015a72:	4604      	mov	r4, r0
 8015a74:	b94b      	cbnz	r3, 8015a8a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8015a76:	7a29      	ldrb	r1, [r5, #8]
 8015a78:	4630      	mov	r0, r6
 8015a7a:	f7fc fa5b 	bl	8011f34 <ucdr_serialize_bool>
 8015a7e:	7a2b      	ldrb	r3, [r5, #8]
 8015a80:	4004      	ands	r4, r0
 8015a82:	b2e4      	uxtb	r4, r4
 8015a84:	b943      	cbnz	r3, 8015a98 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8015a86:	4620      	mov	r0, r4
 8015a88:	bd70      	pop	{r4, r5, r6, pc}
 8015a8a:	6869      	ldr	r1, [r5, #4]
 8015a8c:	4630      	mov	r0, r6
 8015a8e:	f003 f8b5 	bl	8018bfc <ucdr_serialize_string>
 8015a92:	4004      	ands	r4, r0
 8015a94:	b2e4      	uxtb	r4, r4
 8015a96:	e7ee      	b.n	8015a76 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8015a98:	68e9      	ldr	r1, [r5, #12]
 8015a9a:	4630      	mov	r0, r6
 8015a9c:	f003 f8ae 	bl	8018bfc <ucdr_serialize_string>
 8015aa0:	4004      	ands	r4, r0
 8015aa2:	4620      	mov	r0, r4
 8015aa4:	bd70      	pop	{r4, r5, r6, pc}
 8015aa6:	bf00      	nop

08015aa8 <uxr_serialize_OBJK_Topic_Binary>:
 8015aa8:	b570      	push	{r4, r5, r6, lr}
 8015aaa:	460d      	mov	r5, r1
 8015aac:	6809      	ldr	r1, [r1, #0]
 8015aae:	4606      	mov	r6, r0
 8015ab0:	f003 f8a4 	bl	8018bfc <ucdr_serialize_string>
 8015ab4:	7929      	ldrb	r1, [r5, #4]
 8015ab6:	4604      	mov	r4, r0
 8015ab8:	4630      	mov	r0, r6
 8015aba:	f7fc fa3b 	bl	8011f34 <ucdr_serialize_bool>
 8015abe:	792b      	ldrb	r3, [r5, #4]
 8015ac0:	4004      	ands	r4, r0
 8015ac2:	b2e4      	uxtb	r4, r4
 8015ac4:	b943      	cbnz	r3, 8015ad8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8015ac6:	7b29      	ldrb	r1, [r5, #12]
 8015ac8:	4630      	mov	r0, r6
 8015aca:	f7fc fa33 	bl	8011f34 <ucdr_serialize_bool>
 8015ace:	7b2b      	ldrb	r3, [r5, #12]
 8015ad0:	4004      	ands	r4, r0
 8015ad2:	b93b      	cbnz	r3, 8015ae4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8015ad4:	4620      	mov	r0, r4
 8015ad6:	bd70      	pop	{r4, r5, r6, pc}
 8015ad8:	68a9      	ldr	r1, [r5, #8]
 8015ada:	4630      	mov	r0, r6
 8015adc:	f003 f88e 	bl	8018bfc <ucdr_serialize_string>
 8015ae0:	4004      	ands	r4, r0
 8015ae2:	e7f0      	b.n	8015ac6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8015ae4:	6929      	ldr	r1, [r5, #16]
 8015ae6:	4630      	mov	r0, r6
 8015ae8:	f003 f888 	bl	8018bfc <ucdr_serialize_string>
 8015aec:	4004      	ands	r4, r0
 8015aee:	b2e4      	uxtb	r4, r4
 8015af0:	4620      	mov	r0, r4
 8015af2:	bd70      	pop	{r4, r5, r6, pc}

08015af4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8015af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015af8:	460c      	mov	r4, r1
 8015afa:	7809      	ldrb	r1, [r1, #0]
 8015afc:	4606      	mov	r6, r0
 8015afe:	f7fc fa19 	bl	8011f34 <ucdr_serialize_bool>
 8015b02:	7823      	ldrb	r3, [r4, #0]
 8015b04:	4605      	mov	r5, r0
 8015b06:	b96b      	cbnz	r3, 8015b24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8015b08:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8015b0c:	4630      	mov	r0, r6
 8015b0e:	f7fc fa11 	bl	8011f34 <ucdr_serialize_bool>
 8015b12:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015b16:	4005      	ands	r5, r0
 8015b18:	b2ed      	uxtb	r5, r5
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d169      	bne.n	8015bf2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8015b1e:	4628      	mov	r0, r5
 8015b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b24:	6861      	ldr	r1, [r4, #4]
 8015b26:	4630      	mov	r0, r6
 8015b28:	f7fc fc48 	bl	80123bc <ucdr_serialize_uint32_t>
 8015b2c:	6863      	ldr	r3, [r4, #4]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d06b      	beq.n	8015c0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8015b32:	2800      	cmp	r0, #0
 8015b34:	d067      	beq.n	8015c06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b36:	68a1      	ldr	r1, [r4, #8]
 8015b38:	4630      	mov	r0, r6
 8015b3a:	f003 f85f 	bl	8018bfc <ucdr_serialize_string>
 8015b3e:	6863      	ldr	r3, [r4, #4]
 8015b40:	2b01      	cmp	r3, #1
 8015b42:	d953      	bls.n	8015bec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b44:	2800      	cmp	r0, #0
 8015b46:	d05e      	beq.n	8015c06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b48:	68e1      	ldr	r1, [r4, #12]
 8015b4a:	4630      	mov	r0, r6
 8015b4c:	f003 f856 	bl	8018bfc <ucdr_serialize_string>
 8015b50:	6863      	ldr	r3, [r4, #4]
 8015b52:	2b02      	cmp	r3, #2
 8015b54:	d94a      	bls.n	8015bec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b56:	2800      	cmp	r0, #0
 8015b58:	d055      	beq.n	8015c06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b5a:	6921      	ldr	r1, [r4, #16]
 8015b5c:	4630      	mov	r0, r6
 8015b5e:	f003 f84d 	bl	8018bfc <ucdr_serialize_string>
 8015b62:	6863      	ldr	r3, [r4, #4]
 8015b64:	2b03      	cmp	r3, #3
 8015b66:	d941      	bls.n	8015bec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b68:	2800      	cmp	r0, #0
 8015b6a:	d04c      	beq.n	8015c06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b6c:	6961      	ldr	r1, [r4, #20]
 8015b6e:	4630      	mov	r0, r6
 8015b70:	f003 f844 	bl	8018bfc <ucdr_serialize_string>
 8015b74:	6863      	ldr	r3, [r4, #4]
 8015b76:	2b04      	cmp	r3, #4
 8015b78:	d938      	bls.n	8015bec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b7a:	2800      	cmp	r0, #0
 8015b7c:	d043      	beq.n	8015c06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b7e:	69a1      	ldr	r1, [r4, #24]
 8015b80:	4630      	mov	r0, r6
 8015b82:	f003 f83b 	bl	8018bfc <ucdr_serialize_string>
 8015b86:	6863      	ldr	r3, [r4, #4]
 8015b88:	2b05      	cmp	r3, #5
 8015b8a:	d92f      	bls.n	8015bec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b8c:	2800      	cmp	r0, #0
 8015b8e:	d03a      	beq.n	8015c06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015b90:	69e1      	ldr	r1, [r4, #28]
 8015b92:	4630      	mov	r0, r6
 8015b94:	f003 f832 	bl	8018bfc <ucdr_serialize_string>
 8015b98:	6863      	ldr	r3, [r4, #4]
 8015b9a:	2b06      	cmp	r3, #6
 8015b9c:	d926      	bls.n	8015bec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015b9e:	b390      	cbz	r0, 8015c06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015ba0:	6a21      	ldr	r1, [r4, #32]
 8015ba2:	4630      	mov	r0, r6
 8015ba4:	f003 f82a 	bl	8018bfc <ucdr_serialize_string>
 8015ba8:	6863      	ldr	r3, [r4, #4]
 8015baa:	2b07      	cmp	r3, #7
 8015bac:	d91e      	bls.n	8015bec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015bae:	b350      	cbz	r0, 8015c06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015bb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015bb2:	4630      	mov	r0, r6
 8015bb4:	f003 f822 	bl	8018bfc <ucdr_serialize_string>
 8015bb8:	6863      	ldr	r3, [r4, #4]
 8015bba:	2b08      	cmp	r3, #8
 8015bbc:	d916      	bls.n	8015bec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015bbe:	b310      	cbz	r0, 8015c06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015bc0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015bc2:	4630      	mov	r0, r6
 8015bc4:	f003 f81a 	bl	8018bfc <ucdr_serialize_string>
 8015bc8:	6863      	ldr	r3, [r4, #4]
 8015bca:	2b09      	cmp	r3, #9
 8015bcc:	d90e      	bls.n	8015bec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015bce:	b1d0      	cbz	r0, 8015c06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015bd0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8015bd4:	2709      	movs	r7, #9
 8015bd6:	e000      	b.n	8015bda <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8015bd8:	b1a8      	cbz	r0, 8015c06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015bda:	f858 1b04 	ldr.w	r1, [r8], #4
 8015bde:	4630      	mov	r0, r6
 8015be0:	f003 f80c 	bl	8018bfc <ucdr_serialize_string>
 8015be4:	6862      	ldr	r2, [r4, #4]
 8015be6:	3701      	adds	r7, #1
 8015be8:	4297      	cmp	r7, r2
 8015bea:	d3f5      	bcc.n	8015bd8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8015bec:	4005      	ands	r5, r0
 8015bee:	b2ed      	uxtb	r5, r5
 8015bf0:	e78a      	b.n	8015b08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015bf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015bf4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015bf8:	4630      	mov	r0, r6
 8015bfa:	f7fd ff95 	bl	8013b28 <ucdr_serialize_sequence_uint8_t>
 8015bfe:	4005      	ands	r5, r0
 8015c00:	4628      	mov	r0, r5
 8015c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c06:	2500      	movs	r5, #0
 8015c08:	e77e      	b.n	8015b08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015c0a:	4028      	ands	r0, r5
 8015c0c:	b2c5      	uxtb	r5, r0
 8015c0e:	e77b      	b.n	8015b08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08015c10 <uxr_serialize_OBJK_Publisher_Binary>:
 8015c10:	b570      	push	{r4, r5, r6, lr}
 8015c12:	460d      	mov	r5, r1
 8015c14:	7809      	ldrb	r1, [r1, #0]
 8015c16:	4606      	mov	r6, r0
 8015c18:	f7fc f98c 	bl	8011f34 <ucdr_serialize_bool>
 8015c1c:	782b      	ldrb	r3, [r5, #0]
 8015c1e:	4604      	mov	r4, r0
 8015c20:	b94b      	cbnz	r3, 8015c36 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8015c22:	7a29      	ldrb	r1, [r5, #8]
 8015c24:	4630      	mov	r0, r6
 8015c26:	f7fc f985 	bl	8011f34 <ucdr_serialize_bool>
 8015c2a:	7a2b      	ldrb	r3, [r5, #8]
 8015c2c:	4004      	ands	r4, r0
 8015c2e:	b2e4      	uxtb	r4, r4
 8015c30:	b943      	cbnz	r3, 8015c44 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8015c32:	4620      	mov	r0, r4
 8015c34:	bd70      	pop	{r4, r5, r6, pc}
 8015c36:	6869      	ldr	r1, [r5, #4]
 8015c38:	4630      	mov	r0, r6
 8015c3a:	f002 ffdf 	bl	8018bfc <ucdr_serialize_string>
 8015c3e:	4004      	ands	r4, r0
 8015c40:	b2e4      	uxtb	r4, r4
 8015c42:	e7ee      	b.n	8015c22 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8015c44:	f105 010c 	add.w	r1, r5, #12
 8015c48:	4630      	mov	r0, r6
 8015c4a:	f7ff ff53 	bl	8015af4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8015c4e:	4004      	ands	r4, r0
 8015c50:	4620      	mov	r0, r4
 8015c52:	bd70      	pop	{r4, r5, r6, pc}

08015c54 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8015c54:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8015c58:	4688      	mov	r8, r1
 8015c5a:	8809      	ldrh	r1, [r1, #0]
 8015c5c:	4681      	mov	r9, r0
 8015c5e:	f7fc f9c3 	bl	8011fe8 <ucdr_serialize_uint16_t>
 8015c62:	f898 1002 	ldrb.w	r1, [r8, #2]
 8015c66:	4606      	mov	r6, r0
 8015c68:	4648      	mov	r0, r9
 8015c6a:	f7fc f963 	bl	8011f34 <ucdr_serialize_bool>
 8015c6e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8015c72:	4006      	ands	r6, r0
 8015c74:	b2f5      	uxtb	r5, r6
 8015c76:	b9eb      	cbnz	r3, 8015cb4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8015c78:	f898 1006 	ldrb.w	r1, [r8, #6]
 8015c7c:	4648      	mov	r0, r9
 8015c7e:	f7fc f959 	bl	8011f34 <ucdr_serialize_bool>
 8015c82:	f898 3006 	ldrb.w	r3, [r8, #6]
 8015c86:	4005      	ands	r5, r0
 8015c88:	bb7b      	cbnz	r3, 8015cea <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8015c8a:	f898 100c 	ldrb.w	r1, [r8, #12]
 8015c8e:	4648      	mov	r0, r9
 8015c90:	f7fc f950 	bl	8011f34 <ucdr_serialize_bool>
 8015c94:	f898 300c 	ldrb.w	r3, [r8, #12]
 8015c98:	4005      	ands	r5, r0
 8015c9a:	b9f3      	cbnz	r3, 8015cda <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8015c9c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8015ca0:	4648      	mov	r0, r9
 8015ca2:	f7fc f947 	bl	8011f34 <ucdr_serialize_bool>
 8015ca6:	f898 3014 	ldrb.w	r3, [r8, #20]
 8015caa:	4005      	ands	r5, r0
 8015cac:	b94b      	cbnz	r3, 8015cc2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8015cae:	4628      	mov	r0, r5
 8015cb0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015cb4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8015cb8:	4648      	mov	r0, r9
 8015cba:	f7fc f995 	bl	8011fe8 <ucdr_serialize_uint16_t>
 8015cbe:	4005      	ands	r5, r0
 8015cc0:	e7da      	b.n	8015c78 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8015cc2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8015cc6:	f108 011c 	add.w	r1, r8, #28
 8015cca:	4648      	mov	r0, r9
 8015ccc:	f7fd ff2c 	bl	8013b28 <ucdr_serialize_sequence_uint8_t>
 8015cd0:	4028      	ands	r0, r5
 8015cd2:	b2c5      	uxtb	r5, r0
 8015cd4:	4628      	mov	r0, r5
 8015cd6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015cda:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015cde:	4648      	mov	r0, r9
 8015ce0:	f7fc fb6c 	bl	80123bc <ucdr_serialize_uint32_t>
 8015ce4:	4028      	ands	r0, r5
 8015ce6:	b2c5      	uxtb	r5, r0
 8015ce8:	e7d8      	b.n	8015c9c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8015cea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8015cee:	4648      	mov	r0, r9
 8015cf0:	f7fc fb64 	bl	80123bc <ucdr_serialize_uint32_t>
 8015cf4:	4028      	ands	r0, r5
 8015cf6:	b2c5      	uxtb	r5, r0
 8015cf8:	e7c7      	b.n	8015c8a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8015cfa:	bf00      	nop

08015cfc <uxr_serialize_OBJK_DataWriter_Binary>:
 8015cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cfe:	2202      	movs	r2, #2
 8015d00:	460d      	mov	r5, r1
 8015d02:	4606      	mov	r6, r0
 8015d04:	f002 fe08 	bl	8018918 <ucdr_serialize_array_uint8_t>
 8015d08:	78a9      	ldrb	r1, [r5, #2]
 8015d0a:	4604      	mov	r4, r0
 8015d0c:	4630      	mov	r0, r6
 8015d0e:	f7fc f911 	bl	8011f34 <ucdr_serialize_bool>
 8015d12:	78ab      	ldrb	r3, [r5, #2]
 8015d14:	4004      	ands	r4, r0
 8015d16:	b2e4      	uxtb	r4, r4
 8015d18:	b90b      	cbnz	r3, 8015d1e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8015d1a:	4620      	mov	r0, r4
 8015d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d1e:	f105 0108 	add.w	r1, r5, #8
 8015d22:	4630      	mov	r0, r6
 8015d24:	f7ff ff96 	bl	8015c54 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015d28:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8015d2c:	4607      	mov	r7, r0
 8015d2e:	4630      	mov	r0, r6
 8015d30:	f7fc f900 	bl	8011f34 <ucdr_serialize_bool>
 8015d34:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8015d38:	4038      	ands	r0, r7
 8015d3a:	b2c7      	uxtb	r7, r0
 8015d3c:	b913      	cbnz	r3, 8015d44 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8015d3e:	403c      	ands	r4, r7
 8015d40:	4620      	mov	r0, r4
 8015d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d44:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8015d48:	4630      	mov	r0, r6
 8015d4a:	f7fc fd8d 	bl	8012868 <ucdr_serialize_uint64_t>
 8015d4e:	4007      	ands	r7, r0
 8015d50:	e7f5      	b.n	8015d3e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8015d52:	bf00      	nop

08015d54 <uxr_deserialize_ObjectVariant>:
 8015d54:	b570      	push	{r4, r5, r6, lr}
 8015d56:	4605      	mov	r5, r0
 8015d58:	460e      	mov	r6, r1
 8015d5a:	f7fc f92f 	bl	8011fbc <ucdr_deserialize_uint8_t>
 8015d5e:	b168      	cbz	r0, 8015d7c <uxr_deserialize_ObjectVariant+0x28>
 8015d60:	7833      	ldrb	r3, [r6, #0]
 8015d62:	3b01      	subs	r3, #1
 8015d64:	4604      	mov	r4, r0
 8015d66:	2b0d      	cmp	r3, #13
 8015d68:	d809      	bhi.n	8015d7e <uxr_deserialize_ObjectVariant+0x2a>
 8015d6a:	e8df f003 	tbb	[pc, r3]
 8015d6e:	0a41      	.short	0x0a41
 8015d70:	0a0a2323 	.word	0x0a0a2323
 8015d74:	10080a0a 	.word	0x10080a0a
 8015d78:	565c1010 	.word	0x565c1010
 8015d7c:	2400      	movs	r4, #0
 8015d7e:	4620      	mov	r0, r4
 8015d80:	bd70      	pop	{r4, r5, r6, pc}
 8015d82:	1d31      	adds	r1, r6, #4
 8015d84:	4628      	mov	r0, r5
 8015d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d8a:	f7ff be41 	b.w	8015a10 <uxr_deserialize_DATAWRITER_Representation>
 8015d8e:	1d31      	adds	r1, r6, #4
 8015d90:	4628      	mov	r0, r5
 8015d92:	f7fc f913 	bl	8011fbc <ucdr_deserialize_uint8_t>
 8015d96:	2800      	cmp	r0, #0
 8015d98:	d0f0      	beq.n	8015d7c <uxr_deserialize_ObjectVariant+0x28>
 8015d9a:	7933      	ldrb	r3, [r6, #4]
 8015d9c:	2b01      	cmp	r3, #1
 8015d9e:	d001      	beq.n	8015da4 <uxr_deserialize_ObjectVariant+0x50>
 8015da0:	2b02      	cmp	r3, #2
 8015da2:	d1ec      	bne.n	8015d7e <uxr_deserialize_ObjectVariant+0x2a>
 8015da4:	68b1      	ldr	r1, [r6, #8]
 8015da6:	4628      	mov	r0, r5
 8015da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015dac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015db0:	f002 bf34 	b.w	8018c1c <ucdr_deserialize_string>
 8015db4:	1d31      	adds	r1, r6, #4
 8015db6:	4628      	mov	r0, r5
 8015db8:	f7fc f900 	bl	8011fbc <ucdr_deserialize_uint8_t>
 8015dbc:	4604      	mov	r4, r0
 8015dbe:	b170      	cbz	r0, 8015dde <uxr_deserialize_ObjectVariant+0x8a>
 8015dc0:	7933      	ldrb	r3, [r6, #4]
 8015dc2:	2b02      	cmp	r3, #2
 8015dc4:	d04c      	beq.n	8015e60 <uxr_deserialize_ObjectVariant+0x10c>
 8015dc6:	2b03      	cmp	r3, #3
 8015dc8:	d109      	bne.n	8015dde <uxr_deserialize_ObjectVariant+0x8a>
 8015dca:	f106 0308 	add.w	r3, r6, #8
 8015dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015dd2:	f106 010c 	add.w	r1, r6, #12
 8015dd6:	4628      	mov	r0, r5
 8015dd8:	f7fd feb8 	bl	8013b4c <ucdr_deserialize_sequence_uint8_t>
 8015ddc:	4604      	mov	r4, r0
 8015dde:	2202      	movs	r2, #2
 8015de0:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8015de4:	4628      	mov	r0, r5
 8015de6:	f002 fdfb 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 8015dea:	4020      	ands	r0, r4
 8015dec:	b2c4      	uxtb	r4, r0
 8015dee:	e7c6      	b.n	8015d7e <uxr_deserialize_ObjectVariant+0x2a>
 8015df0:	1d31      	adds	r1, r6, #4
 8015df2:	4628      	mov	r0, r5
 8015df4:	f7fc f8e2 	bl	8011fbc <ucdr_deserialize_uint8_t>
 8015df8:	4604      	mov	r4, r0
 8015dfa:	b130      	cbz	r0, 8015e0a <uxr_deserialize_ObjectVariant+0xb6>
 8015dfc:	7933      	ldrb	r3, [r6, #4]
 8015dfe:	2b02      	cmp	r3, #2
 8015e00:	d036      	beq.n	8015e70 <uxr_deserialize_ObjectVariant+0x11c>
 8015e02:	2b03      	cmp	r3, #3
 8015e04:	d03c      	beq.n	8015e80 <uxr_deserialize_ObjectVariant+0x12c>
 8015e06:	2b01      	cmp	r3, #1
 8015e08:	d032      	beq.n	8015e70 <uxr_deserialize_ObjectVariant+0x11c>
 8015e0a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8015e0e:	4628      	mov	r0, r5
 8015e10:	f7fc fe7a 	bl	8012b08 <ucdr_deserialize_int16_t>
 8015e14:	4020      	ands	r0, r4
 8015e16:	b2c4      	uxtb	r4, r0
 8015e18:	e7b1      	b.n	8015d7e <uxr_deserialize_ObjectVariant+0x2a>
 8015e1a:	1d31      	adds	r1, r6, #4
 8015e1c:	4628      	mov	r0, r5
 8015e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e22:	f7ff bcab 	b.w	801577c <uxr_deserialize_CLIENT_Representation>
 8015e26:	2204      	movs	r2, #4
 8015e28:	18b1      	adds	r1, r6, r2
 8015e2a:	4628      	mov	r0, r5
 8015e2c:	f002 fdd8 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 8015e30:	2202      	movs	r2, #2
 8015e32:	f106 0108 	add.w	r1, r6, #8
 8015e36:	4604      	mov	r4, r0
 8015e38:	4628      	mov	r0, r5
 8015e3a:	f002 fdd1 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 8015e3e:	2202      	movs	r2, #2
 8015e40:	4004      	ands	r4, r0
 8015e42:	f106 010a 	add.w	r1, r6, #10
 8015e46:	4628      	mov	r0, r5
 8015e48:	f002 fdca 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 8015e4c:	b2e4      	uxtb	r4, r4
 8015e4e:	4603      	mov	r3, r0
 8015e50:	f106 010c 	add.w	r1, r6, #12
 8015e54:	4628      	mov	r0, r5
 8015e56:	401c      	ands	r4, r3
 8015e58:	f7fc f882 	bl	8011f60 <ucdr_deserialize_bool>
 8015e5c:	4004      	ands	r4, r0
 8015e5e:	e78e      	b.n	8015d7e <uxr_deserialize_ObjectVariant+0x2a>
 8015e60:	68b1      	ldr	r1, [r6, #8]
 8015e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015e66:	4628      	mov	r0, r5
 8015e68:	f002 fed8 	bl	8018c1c <ucdr_deserialize_string>
 8015e6c:	4604      	mov	r4, r0
 8015e6e:	e7b6      	b.n	8015dde <uxr_deserialize_ObjectVariant+0x8a>
 8015e70:	68b1      	ldr	r1, [r6, #8]
 8015e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015e76:	4628      	mov	r0, r5
 8015e78:	f002 fed0 	bl	8018c1c <ucdr_deserialize_string>
 8015e7c:	4604      	mov	r4, r0
 8015e7e:	e7c4      	b.n	8015e0a <uxr_deserialize_ObjectVariant+0xb6>
 8015e80:	f106 0308 	add.w	r3, r6, #8
 8015e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015e88:	f106 010c 	add.w	r1, r6, #12
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	f7fd fe5d 	bl	8013b4c <ucdr_deserialize_sequence_uint8_t>
 8015e92:	4604      	mov	r4, r0
 8015e94:	e7b9      	b.n	8015e0a <uxr_deserialize_ObjectVariant+0xb6>
 8015e96:	bf00      	nop

08015e98 <uxr_deserialize_BaseObjectRequest>:
 8015e98:	b570      	push	{r4, r5, r6, lr}
 8015e9a:	2202      	movs	r2, #2
 8015e9c:	4605      	mov	r5, r0
 8015e9e:	460e      	mov	r6, r1
 8015ea0:	f002 fd9e 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 8015ea4:	2202      	movs	r2, #2
 8015ea6:	4604      	mov	r4, r0
 8015ea8:	18b1      	adds	r1, r6, r2
 8015eaa:	4628      	mov	r0, r5
 8015eac:	f002 fd98 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 8015eb0:	4020      	ands	r0, r4
 8015eb2:	b2c0      	uxtb	r0, r0
 8015eb4:	bd70      	pop	{r4, r5, r6, pc}
 8015eb6:	bf00      	nop

08015eb8 <uxr_serialize_ActivityInfoVariant>:
 8015eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ebc:	460d      	mov	r5, r1
 8015ebe:	7809      	ldrb	r1, [r1, #0]
 8015ec0:	4607      	mov	r7, r0
 8015ec2:	f7fc f865 	bl	8011f90 <ucdr_serialize_uint8_t>
 8015ec6:	4681      	mov	r9, r0
 8015ec8:	b138      	cbz	r0, 8015eda <uxr_serialize_ActivityInfoVariant+0x22>
 8015eca:	782b      	ldrb	r3, [r5, #0]
 8015ecc:	2b06      	cmp	r3, #6
 8015ece:	f000 8082 	beq.w	8015fd6 <uxr_serialize_ActivityInfoVariant+0x11e>
 8015ed2:	2b0d      	cmp	r3, #13
 8015ed4:	d016      	beq.n	8015f04 <uxr_serialize_ActivityInfoVariant+0x4c>
 8015ed6:	2b05      	cmp	r3, #5
 8015ed8:	d002      	beq.n	8015ee0 <uxr_serialize_ActivityInfoVariant+0x28>
 8015eda:	4648      	mov	r0, r9
 8015edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ee0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015ee4:	4638      	mov	r0, r7
 8015ee6:	f7fc fd8f 	bl	8012a08 <ucdr_serialize_int16_t>
 8015eea:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8015eee:	4681      	mov	r9, r0
 8015ef0:	4638      	mov	r0, r7
 8015ef2:	f7fc fcb9 	bl	8012868 <ucdr_serialize_uint64_t>
 8015ef6:	ea09 0000 	and.w	r0, r9, r0
 8015efa:	fa5f f980 	uxtb.w	r9, r0
 8015efe:	4648      	mov	r0, r9
 8015f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f04:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015f08:	4638      	mov	r0, r7
 8015f0a:	f7fc fd7d 	bl	8012a08 <ucdr_serialize_int16_t>
 8015f0e:	68e9      	ldr	r1, [r5, #12]
 8015f10:	4681      	mov	r9, r0
 8015f12:	4638      	mov	r0, r7
 8015f14:	f7fc fa52 	bl	80123bc <ucdr_serialize_uint32_t>
 8015f18:	68eb      	ldr	r3, [r5, #12]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d0eb      	beq.n	8015ef6 <uxr_serialize_ActivityInfoVariant+0x3e>
 8015f1e:	b320      	cbz	r0, 8015f6a <uxr_serialize_ActivityInfoVariant+0xb2>
 8015f20:	f105 080c 	add.w	r8, r5, #12
 8015f24:	2600      	movs	r6, #0
 8015f26:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8015f2a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8015f2e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8015f32:	4638      	mov	r0, r7
 8015f34:	f7fc f82c 	bl	8011f90 <ucdr_serialize_uint8_t>
 8015f38:	2800      	cmp	r0, #0
 8015f3a:	d053      	beq.n	8015fe4 <uxr_serialize_ActivityInfoVariant+0x12c>
 8015f3c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8015f40:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015f44:	0074      	lsls	r4, r6, #1
 8015f46:	00c9      	lsls	r1, r1, #3
 8015f48:	2b03      	cmp	r3, #3
 8015f4a:	d854      	bhi.n	8015ff6 <uxr_serialize_ActivityInfoVariant+0x13e>
 8015f4c:	e8df f003 	tbb	[pc, r3]
 8015f50:	02102132 	.word	0x02102132
 8015f54:	4441      	add	r1, r8
 8015f56:	4638      	mov	r0, r7
 8015f58:	6889      	ldr	r1, [r1, #8]
 8015f5a:	f002 fe4f 	bl	8018bfc <ucdr_serialize_string>
 8015f5e:	68ea      	ldr	r2, [r5, #12]
 8015f60:	3601      	adds	r6, #1
 8015f62:	4296      	cmp	r6, r2
 8015f64:	d242      	bcs.n	8015fec <uxr_serialize_ActivityInfoVariant+0x134>
 8015f66:	2800      	cmp	r0, #0
 8015f68:	d1dd      	bne.n	8015f26 <uxr_serialize_ActivityInfoVariant+0x6e>
 8015f6a:	f04f 0900 	mov.w	r9, #0
 8015f6e:	e7b4      	b.n	8015eda <uxr_serialize_ActivityInfoVariant+0x22>
 8015f70:	3108      	adds	r1, #8
 8015f72:	4441      	add	r1, r8
 8015f74:	2210      	movs	r2, #16
 8015f76:	4638      	mov	r0, r7
 8015f78:	f002 fcce 	bl	8018918 <ucdr_serialize_array_uint8_t>
 8015f7c:	4434      	add	r4, r6
 8015f7e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015f82:	4604      	mov	r4, r0
 8015f84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015f86:	4638      	mov	r0, r7
 8015f88:	f7fc fa18 	bl	80123bc <ucdr_serialize_uint32_t>
 8015f8c:	4020      	ands	r0, r4
 8015f8e:	b2c0      	uxtb	r0, r0
 8015f90:	e7e5      	b.n	8015f5e <uxr_serialize_ActivityInfoVariant+0xa6>
 8015f92:	3108      	adds	r1, #8
 8015f94:	4441      	add	r1, r8
 8015f96:	2204      	movs	r2, #4
 8015f98:	4638      	mov	r0, r7
 8015f9a:	f002 fcbd 	bl	8018918 <ucdr_serialize_array_uint8_t>
 8015f9e:	4434      	add	r4, r6
 8015fa0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015fa4:	4604      	mov	r4, r0
 8015fa6:	8b19      	ldrh	r1, [r3, #24]
 8015fa8:	4638      	mov	r0, r7
 8015faa:	f7fc f81d 	bl	8011fe8 <ucdr_serialize_uint16_t>
 8015fae:	4020      	ands	r0, r4
 8015fb0:	b2c0      	uxtb	r0, r0
 8015fb2:	e7d4      	b.n	8015f5e <uxr_serialize_ActivityInfoVariant+0xa6>
 8015fb4:	3108      	adds	r1, #8
 8015fb6:	4441      	add	r1, r8
 8015fb8:	2202      	movs	r2, #2
 8015fba:	4638      	mov	r0, r7
 8015fbc:	f002 fcac 	bl	8018918 <ucdr_serialize_array_uint8_t>
 8015fc0:	4434      	add	r4, r6
 8015fc2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015fc6:	4604      	mov	r4, r0
 8015fc8:	7d99      	ldrb	r1, [r3, #22]
 8015fca:	4638      	mov	r0, r7
 8015fcc:	f7fb ffe0 	bl	8011f90 <ucdr_serialize_uint8_t>
 8015fd0:	4020      	ands	r0, r4
 8015fd2:	b2c0      	uxtb	r0, r0
 8015fd4:	e7c3      	b.n	8015f5e <uxr_serialize_ActivityInfoVariant+0xa6>
 8015fd6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015fda:	4638      	mov	r0, r7
 8015fdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fe0:	f7fc bd12 	b.w	8012a08 <ucdr_serialize_int16_t>
 8015fe4:	68ea      	ldr	r2, [r5, #12]
 8015fe6:	3601      	adds	r6, #1
 8015fe8:	42b2      	cmp	r2, r6
 8015fea:	d8be      	bhi.n	8015f6a <uxr_serialize_ActivityInfoVariant+0xb2>
 8015fec:	ea09 0900 	and.w	r9, r9, r0
 8015ff0:	fa5f f989 	uxtb.w	r9, r9
 8015ff4:	e771      	b.n	8015eda <uxr_serialize_ActivityInfoVariant+0x22>
 8015ff6:	68eb      	ldr	r3, [r5, #12]
 8015ff8:	3601      	adds	r6, #1
 8015ffa:	429e      	cmp	r6, r3
 8015ffc:	f10a 0a18 	add.w	sl, sl, #24
 8016000:	d395      	bcc.n	8015f2e <uxr_serialize_ActivityInfoVariant+0x76>
 8016002:	e76a      	b.n	8015eda <uxr_serialize_ActivityInfoVariant+0x22>

08016004 <uxr_deserialize_BaseObjectReply>:
 8016004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016008:	2202      	movs	r2, #2
 801600a:	4606      	mov	r6, r0
 801600c:	460f      	mov	r7, r1
 801600e:	f002 fce7 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 8016012:	2202      	movs	r2, #2
 8016014:	18b9      	adds	r1, r7, r2
 8016016:	4605      	mov	r5, r0
 8016018:	4630      	mov	r0, r6
 801601a:	f002 fce1 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 801601e:	1d39      	adds	r1, r7, #4
 8016020:	4680      	mov	r8, r0
 8016022:	4630      	mov	r0, r6
 8016024:	f7fb ffca 	bl	8011fbc <ucdr_deserialize_uint8_t>
 8016028:	1d79      	adds	r1, r7, #5
 801602a:	4604      	mov	r4, r0
 801602c:	4630      	mov	r0, r6
 801602e:	f7fb ffc5 	bl	8011fbc <ucdr_deserialize_uint8_t>
 8016032:	ea05 0508 	and.w	r5, r5, r8
 8016036:	402c      	ands	r4, r5
 8016038:	4020      	ands	r0, r4
 801603a:	b2c0      	uxtb	r0, r0
 801603c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016040 <uxr_serialize_ReadSpecification>:
 8016040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016044:	460e      	mov	r6, r1
 8016046:	7809      	ldrb	r1, [r1, #0]
 8016048:	4607      	mov	r7, r0
 801604a:	f7fb ffa1 	bl	8011f90 <ucdr_serialize_uint8_t>
 801604e:	7871      	ldrb	r1, [r6, #1]
 8016050:	4604      	mov	r4, r0
 8016052:	4638      	mov	r0, r7
 8016054:	f7fb ff9c 	bl	8011f90 <ucdr_serialize_uint8_t>
 8016058:	78b1      	ldrb	r1, [r6, #2]
 801605a:	4004      	ands	r4, r0
 801605c:	4638      	mov	r0, r7
 801605e:	f7fb ff69 	bl	8011f34 <ucdr_serialize_bool>
 8016062:	78b3      	ldrb	r3, [r6, #2]
 8016064:	b2e4      	uxtb	r4, r4
 8016066:	4004      	ands	r4, r0
 8016068:	b94b      	cbnz	r3, 801607e <uxr_serialize_ReadSpecification+0x3e>
 801606a:	7a31      	ldrb	r1, [r6, #8]
 801606c:	4638      	mov	r0, r7
 801606e:	f7fb ff61 	bl	8011f34 <ucdr_serialize_bool>
 8016072:	7a33      	ldrb	r3, [r6, #8]
 8016074:	4004      	ands	r4, r0
 8016076:	b943      	cbnz	r3, 801608a <uxr_serialize_ReadSpecification+0x4a>
 8016078:	4620      	mov	r0, r4
 801607a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801607e:	6871      	ldr	r1, [r6, #4]
 8016080:	4638      	mov	r0, r7
 8016082:	f002 fdbb 	bl	8018bfc <ucdr_serialize_string>
 8016086:	4004      	ands	r4, r0
 8016088:	e7ef      	b.n	801606a <uxr_serialize_ReadSpecification+0x2a>
 801608a:	8971      	ldrh	r1, [r6, #10]
 801608c:	4638      	mov	r0, r7
 801608e:	f7fb ffab 	bl	8011fe8 <ucdr_serialize_uint16_t>
 8016092:	89b1      	ldrh	r1, [r6, #12]
 8016094:	4605      	mov	r5, r0
 8016096:	4638      	mov	r0, r7
 8016098:	f7fb ffa6 	bl	8011fe8 <ucdr_serialize_uint16_t>
 801609c:	89f1      	ldrh	r1, [r6, #14]
 801609e:	4005      	ands	r5, r0
 80160a0:	4638      	mov	r0, r7
 80160a2:	f7fb ffa1 	bl	8011fe8 <ucdr_serialize_uint16_t>
 80160a6:	8a31      	ldrh	r1, [r6, #16]
 80160a8:	4680      	mov	r8, r0
 80160aa:	4638      	mov	r0, r7
 80160ac:	f7fb ff9c 	bl	8011fe8 <ucdr_serialize_uint16_t>
 80160b0:	b2ed      	uxtb	r5, r5
 80160b2:	4025      	ands	r5, r4
 80160b4:	ea08 0505 	and.w	r5, r8, r5
 80160b8:	ea00 0405 	and.w	r4, r0, r5
 80160bc:	4620      	mov	r0, r4
 80160be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160c2:	bf00      	nop

080160c4 <uxr_serialize_CREATE_CLIENT_Payload>:
 80160c4:	f7ff bb02 	b.w	80156cc <uxr_serialize_CLIENT_Representation>

080160c8 <uxr_serialize_CREATE_Payload>:
 80160c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160ca:	2202      	movs	r2, #2
 80160cc:	4607      	mov	r7, r0
 80160ce:	460e      	mov	r6, r1
 80160d0:	f002 fc22 	bl	8018918 <ucdr_serialize_array_uint8_t>
 80160d4:	2202      	movs	r2, #2
 80160d6:	18b1      	adds	r1, r6, r2
 80160d8:	4605      	mov	r5, r0
 80160da:	4638      	mov	r0, r7
 80160dc:	f002 fc1c 	bl	8018918 <ucdr_serialize_array_uint8_t>
 80160e0:	7931      	ldrb	r1, [r6, #4]
 80160e2:	4604      	mov	r4, r0
 80160e4:	4638      	mov	r0, r7
 80160e6:	f7fb ff53 	bl	8011f90 <ucdr_serialize_uint8_t>
 80160ea:	b170      	cbz	r0, 801610a <uxr_serialize_CREATE_Payload+0x42>
 80160ec:	7933      	ldrb	r3, [r6, #4]
 80160ee:	402c      	ands	r4, r5
 80160f0:	3b01      	subs	r3, #1
 80160f2:	b2e4      	uxtb	r4, r4
 80160f4:	2b0d      	cmp	r3, #13
 80160f6:	d809      	bhi.n	801610c <uxr_serialize_CREATE_Payload+0x44>
 80160f8:	e8df f003 	tbb	[pc, r3]
 80160fc:	23230a4c 	.word	0x23230a4c
 8016100:	0a0a0a0a 	.word	0x0a0a0a0a
 8016104:	12121208 	.word	0x12121208
 8016108:	3e45      	.short	0x3e45
 801610a:	2400      	movs	r4, #0
 801610c:	4620      	mov	r0, r4
 801610e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016110:	f106 0108 	add.w	r1, r6, #8
 8016114:	4638      	mov	r0, r7
 8016116:	f7ff fbdf 	bl	80158d8 <uxr_serialize_DATAWRITER_Representation>
 801611a:	4004      	ands	r4, r0
 801611c:	4620      	mov	r0, r4
 801611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016120:	7a31      	ldrb	r1, [r6, #8]
 8016122:	4638      	mov	r0, r7
 8016124:	f7fb ff34 	bl	8011f90 <ucdr_serialize_uint8_t>
 8016128:	2800      	cmp	r0, #0
 801612a:	d0ee      	beq.n	801610a <uxr_serialize_CREATE_Payload+0x42>
 801612c:	7a33      	ldrb	r3, [r6, #8]
 801612e:	2b01      	cmp	r3, #1
 8016130:	d001      	beq.n	8016136 <uxr_serialize_CREATE_Payload+0x6e>
 8016132:	2b02      	cmp	r3, #2
 8016134:	d1ea      	bne.n	801610c <uxr_serialize_CREATE_Payload+0x44>
 8016136:	68f1      	ldr	r1, [r6, #12]
 8016138:	4638      	mov	r0, r7
 801613a:	f002 fd5f 	bl	8018bfc <ucdr_serialize_string>
 801613e:	4004      	ands	r4, r0
 8016140:	e7e4      	b.n	801610c <uxr_serialize_CREATE_Payload+0x44>
 8016142:	7a31      	ldrb	r1, [r6, #8]
 8016144:	4638      	mov	r0, r7
 8016146:	f7fb ff23 	bl	8011f90 <ucdr_serialize_uint8_t>
 801614a:	4605      	mov	r5, r0
 801614c:	b158      	cbz	r0, 8016166 <uxr_serialize_CREATE_Payload+0x9e>
 801614e:	7a33      	ldrb	r3, [r6, #8]
 8016150:	2b02      	cmp	r3, #2
 8016152:	d034      	beq.n	80161be <uxr_serialize_CREATE_Payload+0xf6>
 8016154:	2b03      	cmp	r3, #3
 8016156:	d106      	bne.n	8016166 <uxr_serialize_CREATE_Payload+0x9e>
 8016158:	68f2      	ldr	r2, [r6, #12]
 801615a:	f106 0110 	add.w	r1, r6, #16
 801615e:	4638      	mov	r0, r7
 8016160:	f7fd fce2 	bl	8013b28 <ucdr_serialize_sequence_uint8_t>
 8016164:	4605      	mov	r5, r0
 8016166:	2202      	movs	r2, #2
 8016168:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801616c:	4638      	mov	r0, r7
 801616e:	f002 fbd3 	bl	8018918 <ucdr_serialize_array_uint8_t>
 8016172:	4028      	ands	r0, r5
 8016174:	4004      	ands	r4, r0
 8016176:	e7c9      	b.n	801610c <uxr_serialize_CREATE_Payload+0x44>
 8016178:	f106 0108 	add.w	r1, r6, #8
 801617c:	4638      	mov	r0, r7
 801617e:	f7ff faa5 	bl	80156cc <uxr_serialize_CLIENT_Representation>
 8016182:	4004      	ands	r4, r0
 8016184:	e7c2      	b.n	801610c <uxr_serialize_CREATE_Payload+0x44>
 8016186:	f106 0108 	add.w	r1, r6, #8
 801618a:	4638      	mov	r0, r7
 801618c:	f7ff fb5a 	bl	8015844 <uxr_serialize_AGENT_Representation>
 8016190:	4004      	ands	r4, r0
 8016192:	e7bb      	b.n	801610c <uxr_serialize_CREATE_Payload+0x44>
 8016194:	7a31      	ldrb	r1, [r6, #8]
 8016196:	4638      	mov	r0, r7
 8016198:	f7fb fefa 	bl	8011f90 <ucdr_serialize_uint8_t>
 801619c:	4605      	mov	r5, r0
 801619e:	b130      	cbz	r0, 80161ae <uxr_serialize_CREATE_Payload+0xe6>
 80161a0:	7a33      	ldrb	r3, [r6, #8]
 80161a2:	2b02      	cmp	r3, #2
 80161a4:	d011      	beq.n	80161ca <uxr_serialize_CREATE_Payload+0x102>
 80161a6:	2b03      	cmp	r3, #3
 80161a8:	d015      	beq.n	80161d6 <uxr_serialize_CREATE_Payload+0x10e>
 80161aa:	2b01      	cmp	r3, #1
 80161ac:	d00d      	beq.n	80161ca <uxr_serialize_CREATE_Payload+0x102>
 80161ae:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 80161b2:	4638      	mov	r0, r7
 80161b4:	f7fc fc28 	bl	8012a08 <ucdr_serialize_int16_t>
 80161b8:	4028      	ands	r0, r5
 80161ba:	4004      	ands	r4, r0
 80161bc:	e7a6      	b.n	801610c <uxr_serialize_CREATE_Payload+0x44>
 80161be:	68f1      	ldr	r1, [r6, #12]
 80161c0:	4638      	mov	r0, r7
 80161c2:	f002 fd1b 	bl	8018bfc <ucdr_serialize_string>
 80161c6:	4605      	mov	r5, r0
 80161c8:	e7cd      	b.n	8016166 <uxr_serialize_CREATE_Payload+0x9e>
 80161ca:	68f1      	ldr	r1, [r6, #12]
 80161cc:	4638      	mov	r0, r7
 80161ce:	f002 fd15 	bl	8018bfc <ucdr_serialize_string>
 80161d2:	4605      	mov	r5, r0
 80161d4:	e7eb      	b.n	80161ae <uxr_serialize_CREATE_Payload+0xe6>
 80161d6:	68f2      	ldr	r2, [r6, #12]
 80161d8:	f106 0110 	add.w	r1, r6, #16
 80161dc:	4638      	mov	r0, r7
 80161de:	f7fd fca3 	bl	8013b28 <ucdr_serialize_sequence_uint8_t>
 80161e2:	4605      	mov	r5, r0
 80161e4:	e7e3      	b.n	80161ae <uxr_serialize_CREATE_Payload+0xe6>
 80161e6:	bf00      	nop

080161e8 <uxr_deserialize_GET_INFO_Payload>:
 80161e8:	b570      	push	{r4, r5, r6, lr}
 80161ea:	2202      	movs	r2, #2
 80161ec:	4605      	mov	r5, r0
 80161ee:	460e      	mov	r6, r1
 80161f0:	f002 fbf6 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 80161f4:	2202      	movs	r2, #2
 80161f6:	18b1      	adds	r1, r6, r2
 80161f8:	4604      	mov	r4, r0
 80161fa:	4628      	mov	r0, r5
 80161fc:	f002 fbf0 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 8016200:	1d31      	adds	r1, r6, #4
 8016202:	4004      	ands	r4, r0
 8016204:	4628      	mov	r0, r5
 8016206:	f7fc fa09 	bl	801261c <ucdr_deserialize_uint32_t>
 801620a:	b2e4      	uxtb	r4, r4
 801620c:	4020      	ands	r0, r4
 801620e:	bd70      	pop	{r4, r5, r6, pc}

08016210 <uxr_serialize_DELETE_Payload>:
 8016210:	b570      	push	{r4, r5, r6, lr}
 8016212:	2202      	movs	r2, #2
 8016214:	4605      	mov	r5, r0
 8016216:	460e      	mov	r6, r1
 8016218:	f002 fb7e 	bl	8018918 <ucdr_serialize_array_uint8_t>
 801621c:	2202      	movs	r2, #2
 801621e:	4604      	mov	r4, r0
 8016220:	18b1      	adds	r1, r6, r2
 8016222:	4628      	mov	r0, r5
 8016224:	f002 fb78 	bl	8018918 <ucdr_serialize_array_uint8_t>
 8016228:	4020      	ands	r0, r4
 801622a:	b2c0      	uxtb	r0, r0
 801622c:	bd70      	pop	{r4, r5, r6, pc}
 801622e:	bf00      	nop

08016230 <uxr_deserialize_STATUS_AGENT_Payload>:
 8016230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016234:	4605      	mov	r5, r0
 8016236:	460e      	mov	r6, r1
 8016238:	f7fb fec0 	bl	8011fbc <ucdr_deserialize_uint8_t>
 801623c:	1c71      	adds	r1, r6, #1
 801623e:	4604      	mov	r4, r0
 8016240:	4628      	mov	r0, r5
 8016242:	f7fb febb 	bl	8011fbc <ucdr_deserialize_uint8_t>
 8016246:	2204      	movs	r2, #4
 8016248:	18b1      	adds	r1, r6, r2
 801624a:	4680      	mov	r8, r0
 801624c:	4628      	mov	r0, r5
 801624e:	f002 fbc7 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 8016252:	f106 0108 	add.w	r1, r6, #8
 8016256:	4607      	mov	r7, r0
 8016258:	2202      	movs	r2, #2
 801625a:	4628      	mov	r0, r5
 801625c:	f002 fbc0 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 8016260:	ea04 0308 	and.w	r3, r4, r8
 8016264:	b2db      	uxtb	r3, r3
 8016266:	ea03 0407 	and.w	r4, r3, r7
 801626a:	2202      	movs	r2, #2
 801626c:	4607      	mov	r7, r0
 801626e:	f106 010a 	add.w	r1, r6, #10
 8016272:	4628      	mov	r0, r5
 8016274:	f002 fbb4 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 8016278:	f106 010c 	add.w	r1, r6, #12
 801627c:	4603      	mov	r3, r0
 801627e:	4628      	mov	r0, r5
 8016280:	461d      	mov	r5, r3
 8016282:	f7fb fe6d 	bl	8011f60 <ucdr_deserialize_bool>
 8016286:	403c      	ands	r4, r7
 8016288:	4025      	ands	r5, r4
 801628a:	4028      	ands	r0, r5
 801628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016290 <uxr_deserialize_STATUS_Payload>:
 8016290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016294:	2202      	movs	r2, #2
 8016296:	4606      	mov	r6, r0
 8016298:	460f      	mov	r7, r1
 801629a:	f002 fba1 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 801629e:	2202      	movs	r2, #2
 80162a0:	18b9      	adds	r1, r7, r2
 80162a2:	4605      	mov	r5, r0
 80162a4:	4630      	mov	r0, r6
 80162a6:	f002 fb9b 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 80162aa:	1d39      	adds	r1, r7, #4
 80162ac:	4680      	mov	r8, r0
 80162ae:	4630      	mov	r0, r6
 80162b0:	f7fb fe84 	bl	8011fbc <ucdr_deserialize_uint8_t>
 80162b4:	1d79      	adds	r1, r7, #5
 80162b6:	4604      	mov	r4, r0
 80162b8:	4630      	mov	r0, r6
 80162ba:	f7fb fe7f 	bl	8011fbc <ucdr_deserialize_uint8_t>
 80162be:	ea05 0508 	and.w	r5, r5, r8
 80162c2:	402c      	ands	r4, r5
 80162c4:	4020      	ands	r0, r4
 80162c6:	b2c0      	uxtb	r0, r0
 80162c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162cc <uxr_serialize_INFO_Payload>:
 80162cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162d0:	2202      	movs	r2, #2
 80162d2:	460c      	mov	r4, r1
 80162d4:	4605      	mov	r5, r0
 80162d6:	f002 fb1f 	bl	8018918 <ucdr_serialize_array_uint8_t>
 80162da:	2202      	movs	r2, #2
 80162dc:	18a1      	adds	r1, r4, r2
 80162de:	4680      	mov	r8, r0
 80162e0:	4628      	mov	r0, r5
 80162e2:	f002 fb19 	bl	8018918 <ucdr_serialize_array_uint8_t>
 80162e6:	7921      	ldrb	r1, [r4, #4]
 80162e8:	4607      	mov	r7, r0
 80162ea:	4628      	mov	r0, r5
 80162ec:	f7fb fe50 	bl	8011f90 <ucdr_serialize_uint8_t>
 80162f0:	7961      	ldrb	r1, [r4, #5]
 80162f2:	4606      	mov	r6, r0
 80162f4:	4628      	mov	r0, r5
 80162f6:	f7fb fe4b 	bl	8011f90 <ucdr_serialize_uint8_t>
 80162fa:	ea08 0807 	and.w	r8, r8, r7
 80162fe:	ea06 0608 	and.w	r6, r6, r8
 8016302:	4006      	ands	r6, r0
 8016304:	7a21      	ldrb	r1, [r4, #8]
 8016306:	4628      	mov	r0, r5
 8016308:	f7fb fe14 	bl	8011f34 <ucdr_serialize_bool>
 801630c:	7a23      	ldrb	r3, [r4, #8]
 801630e:	b2f7      	uxtb	r7, r6
 8016310:	4606      	mov	r6, r0
 8016312:	b96b      	cbnz	r3, 8016330 <uxr_serialize_INFO_Payload+0x64>
 8016314:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8016318:	4628      	mov	r0, r5
 801631a:	f7fb fe0b 	bl	8011f34 <ucdr_serialize_bool>
 801631e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8016322:	4030      	ands	r0, r6
 8016324:	b2c6      	uxtb	r6, r0
 8016326:	b983      	cbnz	r3, 801634a <uxr_serialize_INFO_Payload+0x7e>
 8016328:	ea06 0007 	and.w	r0, r6, r7
 801632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016330:	7b21      	ldrb	r1, [r4, #12]
 8016332:	4628      	mov	r0, r5
 8016334:	f7fb fe2c 	bl	8011f90 <ucdr_serialize_uint8_t>
 8016338:	b188      	cbz	r0, 801635e <uxr_serialize_INFO_Payload+0x92>
 801633a:	f104 010c 	add.w	r1, r4, #12
 801633e:	4628      	mov	r0, r5
 8016340:	f7ff faf2 	bl	8015928 <uxr_serialize_ObjectVariant.part.0>
 8016344:	4030      	ands	r0, r6
 8016346:	b2c6      	uxtb	r6, r0
 8016348:	e7e4      	b.n	8016314 <uxr_serialize_INFO_Payload+0x48>
 801634a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801634e:	4628      	mov	r0, r5
 8016350:	f7ff fdb2 	bl	8015eb8 <uxr_serialize_ActivityInfoVariant>
 8016354:	4006      	ands	r6, r0
 8016356:	ea06 0007 	and.w	r0, r6, r7
 801635a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801635e:	4606      	mov	r6, r0
 8016360:	e7d8      	b.n	8016314 <uxr_serialize_INFO_Payload+0x48>
 8016362:	bf00      	nop

08016364 <uxr_serialize_READ_DATA_Payload>:
 8016364:	b570      	push	{r4, r5, r6, lr}
 8016366:	2202      	movs	r2, #2
 8016368:	4605      	mov	r5, r0
 801636a:	460e      	mov	r6, r1
 801636c:	f002 fad4 	bl	8018918 <ucdr_serialize_array_uint8_t>
 8016370:	2202      	movs	r2, #2
 8016372:	18b1      	adds	r1, r6, r2
 8016374:	4604      	mov	r4, r0
 8016376:	4628      	mov	r0, r5
 8016378:	f002 face 	bl	8018918 <ucdr_serialize_array_uint8_t>
 801637c:	1d31      	adds	r1, r6, #4
 801637e:	4004      	ands	r4, r0
 8016380:	4628      	mov	r0, r5
 8016382:	f7ff fe5d 	bl	8016040 <uxr_serialize_ReadSpecification>
 8016386:	b2e4      	uxtb	r4, r4
 8016388:	4020      	ands	r0, r4
 801638a:	bd70      	pop	{r4, r5, r6, pc}

0801638c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801638c:	b570      	push	{r4, r5, r6, lr}
 801638e:	2202      	movs	r2, #2
 8016390:	4605      	mov	r5, r0
 8016392:	460e      	mov	r6, r1
 8016394:	f002 fac0 	bl	8018918 <ucdr_serialize_array_uint8_t>
 8016398:	2202      	movs	r2, #2
 801639a:	4604      	mov	r4, r0
 801639c:	18b1      	adds	r1, r6, r2
 801639e:	4628      	mov	r0, r5
 80163a0:	f002 faba 	bl	8018918 <ucdr_serialize_array_uint8_t>
 80163a4:	4020      	ands	r0, r4
 80163a6:	b2c0      	uxtb	r0, r0
 80163a8:	bd70      	pop	{r4, r5, r6, pc}
 80163aa:	bf00      	nop

080163ac <uxr_serialize_ACKNACK_Payload>:
 80163ac:	b570      	push	{r4, r5, r6, lr}
 80163ae:	460c      	mov	r4, r1
 80163b0:	460e      	mov	r6, r1
 80163b2:	f834 1b02 	ldrh.w	r1, [r4], #2
 80163b6:	4605      	mov	r5, r0
 80163b8:	f7fb fe16 	bl	8011fe8 <ucdr_serialize_uint16_t>
 80163bc:	2202      	movs	r2, #2
 80163be:	4621      	mov	r1, r4
 80163c0:	4604      	mov	r4, r0
 80163c2:	4628      	mov	r0, r5
 80163c4:	f002 faa8 	bl	8018918 <ucdr_serialize_array_uint8_t>
 80163c8:	7931      	ldrb	r1, [r6, #4]
 80163ca:	4004      	ands	r4, r0
 80163cc:	4628      	mov	r0, r5
 80163ce:	f7fb fddf 	bl	8011f90 <ucdr_serialize_uint8_t>
 80163d2:	b2e4      	uxtb	r4, r4
 80163d4:	4020      	ands	r0, r4
 80163d6:	bd70      	pop	{r4, r5, r6, pc}

080163d8 <uxr_deserialize_ACKNACK_Payload>:
 80163d8:	b570      	push	{r4, r5, r6, lr}
 80163da:	4605      	mov	r5, r0
 80163dc:	460e      	mov	r6, r1
 80163de:	f7fb ff03 	bl	80121e8 <ucdr_deserialize_uint16_t>
 80163e2:	2202      	movs	r2, #2
 80163e4:	18b1      	adds	r1, r6, r2
 80163e6:	4604      	mov	r4, r0
 80163e8:	4628      	mov	r0, r5
 80163ea:	f002 faf9 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 80163ee:	1d31      	adds	r1, r6, #4
 80163f0:	4004      	ands	r4, r0
 80163f2:	4628      	mov	r0, r5
 80163f4:	f7fb fde2 	bl	8011fbc <ucdr_deserialize_uint8_t>
 80163f8:	b2e4      	uxtb	r4, r4
 80163fa:	4020      	ands	r0, r4
 80163fc:	bd70      	pop	{r4, r5, r6, pc}
 80163fe:	bf00      	nop

08016400 <uxr_serialize_HEARTBEAT_Payload>:
 8016400:	b570      	push	{r4, r5, r6, lr}
 8016402:	460d      	mov	r5, r1
 8016404:	8809      	ldrh	r1, [r1, #0]
 8016406:	4606      	mov	r6, r0
 8016408:	f7fb fdee 	bl	8011fe8 <ucdr_serialize_uint16_t>
 801640c:	8869      	ldrh	r1, [r5, #2]
 801640e:	4604      	mov	r4, r0
 8016410:	4630      	mov	r0, r6
 8016412:	f7fb fde9 	bl	8011fe8 <ucdr_serialize_uint16_t>
 8016416:	7929      	ldrb	r1, [r5, #4]
 8016418:	4004      	ands	r4, r0
 801641a:	4630      	mov	r0, r6
 801641c:	f7fb fdb8 	bl	8011f90 <ucdr_serialize_uint8_t>
 8016420:	b2e4      	uxtb	r4, r4
 8016422:	4020      	ands	r0, r4
 8016424:	bd70      	pop	{r4, r5, r6, pc}
 8016426:	bf00      	nop

08016428 <uxr_deserialize_HEARTBEAT_Payload>:
 8016428:	b570      	push	{r4, r5, r6, lr}
 801642a:	4605      	mov	r5, r0
 801642c:	460e      	mov	r6, r1
 801642e:	f7fb fedb 	bl	80121e8 <ucdr_deserialize_uint16_t>
 8016432:	1cb1      	adds	r1, r6, #2
 8016434:	4604      	mov	r4, r0
 8016436:	4628      	mov	r0, r5
 8016438:	f7fb fed6 	bl	80121e8 <ucdr_deserialize_uint16_t>
 801643c:	1d31      	adds	r1, r6, #4
 801643e:	4004      	ands	r4, r0
 8016440:	4628      	mov	r0, r5
 8016442:	f7fb fdbb 	bl	8011fbc <ucdr_deserialize_uint8_t>
 8016446:	b2e4      	uxtb	r4, r4
 8016448:	4020      	ands	r0, r4
 801644a:	bd70      	pop	{r4, r5, r6, pc}

0801644c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801644c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016450:	4605      	mov	r5, r0
 8016452:	460e      	mov	r6, r1
 8016454:	f7fc fc64 	bl	8012d20 <ucdr_deserialize_int32_t>
 8016458:	1d31      	adds	r1, r6, #4
 801645a:	4607      	mov	r7, r0
 801645c:	4628      	mov	r0, r5
 801645e:	f7fc f8dd 	bl	801261c <ucdr_deserialize_uint32_t>
 8016462:	f106 0108 	add.w	r1, r6, #8
 8016466:	4680      	mov	r8, r0
 8016468:	4628      	mov	r0, r5
 801646a:	f7fc fc59 	bl	8012d20 <ucdr_deserialize_int32_t>
 801646e:	f106 010c 	add.w	r1, r6, #12
 8016472:	4604      	mov	r4, r0
 8016474:	4628      	mov	r0, r5
 8016476:	f7fc f8d1 	bl	801261c <ucdr_deserialize_uint32_t>
 801647a:	ea07 0708 	and.w	r7, r7, r8
 801647e:	403c      	ands	r4, r7
 8016480:	f106 0110 	add.w	r1, r6, #16
 8016484:	4004      	ands	r4, r0
 8016486:	4628      	mov	r0, r5
 8016488:	f7fc fc4a 	bl	8012d20 <ucdr_deserialize_int32_t>
 801648c:	f106 0114 	add.w	r1, r6, #20
 8016490:	4607      	mov	r7, r0
 8016492:	4628      	mov	r0, r5
 8016494:	f7fc f8c2 	bl	801261c <ucdr_deserialize_uint32_t>
 8016498:	b2e4      	uxtb	r4, r4
 801649a:	403c      	ands	r4, r7
 801649c:	4020      	ands	r0, r4
 801649e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164a2:	bf00      	nop

080164a4 <uxr_deserialize_SampleIdentity>:
 80164a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164a8:	220c      	movs	r2, #12
 80164aa:	4604      	mov	r4, r0
 80164ac:	460d      	mov	r5, r1
 80164ae:	f002 fa97 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 80164b2:	2203      	movs	r2, #3
 80164b4:	f105 010c 	add.w	r1, r5, #12
 80164b8:	4607      	mov	r7, r0
 80164ba:	4620      	mov	r0, r4
 80164bc:	f002 fa90 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 80164c0:	f105 010f 	add.w	r1, r5, #15
 80164c4:	4680      	mov	r8, r0
 80164c6:	4620      	mov	r0, r4
 80164c8:	f7fb fd78 	bl	8011fbc <ucdr_deserialize_uint8_t>
 80164cc:	f105 0110 	add.w	r1, r5, #16
 80164d0:	4606      	mov	r6, r0
 80164d2:	4620      	mov	r0, r4
 80164d4:	f7fc fc24 	bl	8012d20 <ucdr_deserialize_int32_t>
 80164d8:	f105 0114 	add.w	r1, r5, #20
 80164dc:	4603      	mov	r3, r0
 80164de:	4620      	mov	r0, r4
 80164e0:	ea07 0708 	and.w	r7, r7, r8
 80164e4:	461c      	mov	r4, r3
 80164e6:	f7fc f899 	bl	801261c <ucdr_deserialize_uint32_t>
 80164ea:	403e      	ands	r6, r7
 80164ec:	4034      	ands	r4, r6
 80164ee:	4020      	ands	r0, r4
 80164f0:	b2c0      	uxtb	r0, r0
 80164f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164f6:	bf00      	nop

080164f8 <rcl_convert_rmw_ret_to_rcl_ret>:
 80164f8:	280b      	cmp	r0, #11
 80164fa:	dc0d      	bgt.n	8016518 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80164fc:	2800      	cmp	r0, #0
 80164fe:	db09      	blt.n	8016514 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016500:	280b      	cmp	r0, #11
 8016502:	d807      	bhi.n	8016514 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016504:	e8df f000 	tbb	[pc, r0]
 8016508:	07060607 	.word	0x07060607
 801650c:	06060606 	.word	0x06060606
 8016510:	07070606 	.word	0x07070606
 8016514:	2001      	movs	r0, #1
 8016516:	4770      	bx	lr
 8016518:	28cb      	cmp	r0, #203	; 0xcb
 801651a:	bf18      	it	ne
 801651c:	2001      	movne	r0, #1
 801651e:	4770      	bx	lr

08016520 <rcl_get_zero_initialized_context>:
 8016520:	4a03      	ldr	r2, [pc, #12]	; (8016530 <rcl_get_zero_initialized_context+0x10>)
 8016522:	4603      	mov	r3, r0
 8016524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016528:	e883 0003 	stmia.w	r3, {r0, r1}
 801652c:	4618      	mov	r0, r3
 801652e:	4770      	bx	lr
 8016530:	0801d0cc 	.word	0x0801d0cc

08016534 <rcl_context_is_valid>:
 8016534:	b118      	cbz	r0, 801653e <rcl_context_is_valid+0xa>
 8016536:	6840      	ldr	r0, [r0, #4]
 8016538:	3800      	subs	r0, #0
 801653a:	bf18      	it	ne
 801653c:	2001      	movne	r0, #1
 801653e:	4770      	bx	lr

08016540 <__cleanup_context>:
 8016540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016544:	4606      	mov	r6, r0
 8016546:	6800      	ldr	r0, [r0, #0]
 8016548:	2300      	movs	r3, #0
 801654a:	6073      	str	r3, [r6, #4]
 801654c:	2800      	cmp	r0, #0
 801654e:	d049      	beq.n	80165e4 <__cleanup_context+0xa4>
 8016550:	6947      	ldr	r7, [r0, #20]
 8016552:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016556:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801655a:	b137      	cbz	r7, 801656a <__cleanup_context+0x2a>
 801655c:	3014      	adds	r0, #20
 801655e:	f000 f9bb 	bl	80168d8 <rcl_init_options_fini>
 8016562:	4607      	mov	r7, r0
 8016564:	2800      	cmp	r0, #0
 8016566:	d144      	bne.n	80165f2 <__cleanup_context+0xb2>
 8016568:	6830      	ldr	r0, [r6, #0]
 801656a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801656c:	b143      	cbz	r3, 8016580 <__cleanup_context+0x40>
 801656e:	3028      	adds	r0, #40	; 0x28
 8016570:	f001 fd9a 	bl	80180a8 <rmw_context_fini>
 8016574:	b118      	cbz	r0, 801657e <__cleanup_context+0x3e>
 8016576:	2f00      	cmp	r7, #0
 8016578:	d03e      	beq.n	80165f8 <__cleanup_context+0xb8>
 801657a:	f7fa fa69 	bl	8010a50 <rcutils_reset_error>
 801657e:	6830      	ldr	r0, [r6, #0]
 8016580:	6a03      	ldr	r3, [r0, #32]
 8016582:	b1db      	cbz	r3, 80165bc <__cleanup_context+0x7c>
 8016584:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8016588:	2a01      	cmp	r2, #1
 801658a:	f17c 0100 	sbcs.w	r1, ip, #0
 801658e:	db11      	blt.n	80165b4 <__cleanup_context+0x74>
 8016590:	2400      	movs	r4, #0
 8016592:	4625      	mov	r5, r4
 8016594:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016598:	4649      	mov	r1, r9
 801659a:	b1b8      	cbz	r0, 80165cc <__cleanup_context+0x8c>
 801659c:	47c0      	blx	r8
 801659e:	6833      	ldr	r3, [r6, #0]
 80165a0:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80165a4:	3401      	adds	r4, #1
 80165a6:	f145 0500 	adc.w	r5, r5, #0
 80165aa:	4294      	cmp	r4, r2
 80165ac:	eb75 010c 	sbcs.w	r1, r5, ip
 80165b0:	6a1b      	ldr	r3, [r3, #32]
 80165b2:	dbef      	blt.n	8016594 <__cleanup_context+0x54>
 80165b4:	4618      	mov	r0, r3
 80165b6:	4649      	mov	r1, r9
 80165b8:	47c0      	blx	r8
 80165ba:	6830      	ldr	r0, [r6, #0]
 80165bc:	4649      	mov	r1, r9
 80165be:	47c0      	blx	r8
 80165c0:	2300      	movs	r3, #0
 80165c2:	e9c6 3300 	strd	r3, r3, [r6]
 80165c6:	4638      	mov	r0, r7
 80165c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165cc:	3401      	adds	r4, #1
 80165ce:	f145 0500 	adc.w	r5, r5, #0
 80165d2:	4294      	cmp	r4, r2
 80165d4:	eb75 010c 	sbcs.w	r1, r5, ip
 80165d8:	dbdc      	blt.n	8016594 <__cleanup_context+0x54>
 80165da:	4618      	mov	r0, r3
 80165dc:	4649      	mov	r1, r9
 80165de:	47c0      	blx	r8
 80165e0:	6830      	ldr	r0, [r6, #0]
 80165e2:	e7eb      	b.n	80165bc <__cleanup_context+0x7c>
 80165e4:	4607      	mov	r7, r0
 80165e6:	2300      	movs	r3, #0
 80165e8:	e9c6 3300 	strd	r3, r3, [r6]
 80165ec:	4638      	mov	r0, r7
 80165ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165f2:	f7fa fa2d 	bl	8010a50 <rcutils_reset_error>
 80165f6:	e7b7      	b.n	8016568 <__cleanup_context+0x28>
 80165f8:	f7ff ff7e 	bl	80164f8 <rcl_convert_rmw_ret_to_rcl_ret>
 80165fc:	4607      	mov	r7, r0
 80165fe:	e7bc      	b.n	801657a <__cleanup_context+0x3a>

08016600 <rcl_init>:
 8016600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016604:	1e05      	subs	r5, r0, #0
 8016606:	b09e      	sub	sp, #120	; 0x78
 8016608:	460e      	mov	r6, r1
 801660a:	4690      	mov	r8, r2
 801660c:	461f      	mov	r7, r3
 801660e:	f340 809c 	ble.w	801674a <rcl_init+0x14a>
 8016612:	2900      	cmp	r1, #0
 8016614:	f000 809c 	beq.w	8016750 <rcl_init+0x150>
 8016618:	f1a1 0e04 	sub.w	lr, r1, #4
 801661c:	f04f 0c00 	mov.w	ip, #0
 8016620:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8016624:	f10c 0c01 	add.w	ip, ip, #1
 8016628:	2c00      	cmp	r4, #0
 801662a:	f000 8091 	beq.w	8016750 <rcl_init+0x150>
 801662e:	4565      	cmp	r5, ip
 8016630:	d1f6      	bne.n	8016620 <rcl_init+0x20>
 8016632:	f1b8 0f00 	cmp.w	r8, #0
 8016636:	f000 808b 	beq.w	8016750 <rcl_init+0x150>
 801663a:	f8d8 4000 	ldr.w	r4, [r8]
 801663e:	2c00      	cmp	r4, #0
 8016640:	f000 8086 	beq.w	8016750 <rcl_init+0x150>
 8016644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016646:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801664a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801664e:	6823      	ldr	r3, [r4, #0]
 8016650:	f8cc 3000 	str.w	r3, [ip]
 8016654:	a819      	add	r0, sp, #100	; 0x64
 8016656:	f7fa f9d7 	bl	8010a08 <rcutils_allocator_is_valid>
 801665a:	2800      	cmp	r0, #0
 801665c:	d078      	beq.n	8016750 <rcl_init+0x150>
 801665e:	2f00      	cmp	r7, #0
 8016660:	d076      	beq.n	8016750 <rcl_init+0x150>
 8016662:	683b      	ldr	r3, [r7, #0]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d178      	bne.n	801675a <rcl_init+0x15a>
 8016668:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801666c:	2178      	movs	r1, #120	; 0x78
 801666e:	2001      	movs	r0, #1
 8016670:	4798      	blx	r3
 8016672:	4604      	mov	r4, r0
 8016674:	6038      	str	r0, [r7, #0]
 8016676:	2800      	cmp	r0, #0
 8016678:	f000 80b6 	beq.w	80167e8 <rcl_init+0x1e8>
 801667c:	a802      	add	r0, sp, #8
 801667e:	f001 f957 	bl	8017930 <rmw_get_zero_initialized_context>
 8016682:	a902      	add	r1, sp, #8
 8016684:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016688:	2250      	movs	r2, #80	; 0x50
 801668a:	ac19      	add	r4, sp, #100	; 0x64
 801668c:	f004 fd3c 	bl	801b108 <memcpy>
 8016690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016692:	f8d7 e000 	ldr.w	lr, [r7]
 8016696:	46f4      	mov	ip, lr
 8016698:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801669c:	6823      	ldr	r3, [r4, #0]
 801669e:	f8cc 3000 	str.w	r3, [ip]
 80166a2:	f10e 0114 	add.w	r1, lr, #20
 80166a6:	4640      	mov	r0, r8
 80166a8:	f000 f940 	bl	801692c <rcl_init_options_copy>
 80166ac:	4604      	mov	r4, r0
 80166ae:	2800      	cmp	r0, #0
 80166b0:	d144      	bne.n	801673c <rcl_init+0x13c>
 80166b2:	f8d7 9000 	ldr.w	r9, [r7]
 80166b6:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80166ba:	f8c9 0020 	str.w	r0, [r9, #32]
 80166be:	f8c9 5018 	str.w	r5, [r9, #24]
 80166c2:	f8c9 801c 	str.w	r8, [r9, #28]
 80166c6:	2d00      	cmp	r5, #0
 80166c8:	d04e      	beq.n	8016768 <rcl_init+0x168>
 80166ca:	2e00      	cmp	r6, #0
 80166cc:	d04c      	beq.n	8016768 <rcl_init+0x168>
 80166ce:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 80166d2:	2104      	movs	r1, #4
 80166d4:	4628      	mov	r0, r5
 80166d6:	4798      	blx	r3
 80166d8:	f8c9 0020 	str.w	r0, [r9, #32]
 80166dc:	f8d7 9000 	ldr.w	r9, [r7]
 80166e0:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80166e4:	46ca      	mov	sl, r9
 80166e6:	b343      	cbz	r3, 801673a <rcl_init+0x13a>
 80166e8:	2d01      	cmp	r5, #1
 80166ea:	f178 0300 	sbcs.w	r3, r8, #0
 80166ee:	db3b      	blt.n	8016768 <rcl_init+0x168>
 80166f0:	2400      	movs	r4, #0
 80166f2:	3e04      	subs	r6, #4
 80166f4:	46a1      	mov	r9, r4
 80166f6:	e00b      	b.n	8016710 <rcl_init+0x110>
 80166f8:	6831      	ldr	r1, [r6, #0]
 80166fa:	f004 fd05 	bl	801b108 <memcpy>
 80166fe:	3401      	adds	r4, #1
 8016700:	f149 0900 	adc.w	r9, r9, #0
 8016704:	45c8      	cmp	r8, r9
 8016706:	bf08      	it	eq
 8016708:	42a5      	cmpeq	r5, r4
 801670a:	d02b      	beq.n	8016764 <rcl_init+0x164>
 801670c:	f8d7 a000 	ldr.w	sl, [r7]
 8016710:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8016714:	f7e9 fd66 	bl	80001e4 <strlen>
 8016718:	1c42      	adds	r2, r0, #1
 801671a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801671c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801671e:	f8da a020 	ldr.w	sl, [sl, #32]
 8016722:	9201      	str	r2, [sp, #4]
 8016724:	4610      	mov	r0, r2
 8016726:	4798      	blx	r3
 8016728:	683b      	ldr	r3, [r7, #0]
 801672a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801672e:	6a1b      	ldr	r3, [r3, #32]
 8016730:	9a01      	ldr	r2, [sp, #4]
 8016732:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016736:	2800      	cmp	r0, #0
 8016738:	d1de      	bne.n	80166f8 <rcl_init+0xf8>
 801673a:	240a      	movs	r4, #10
 801673c:	4638      	mov	r0, r7
 801673e:	f7ff feff 	bl	8016540 <__cleanup_context>
 8016742:	4620      	mov	r0, r4
 8016744:	b01e      	add	sp, #120	; 0x78
 8016746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801674a:	2900      	cmp	r1, #0
 801674c:	f43f af71 	beq.w	8016632 <rcl_init+0x32>
 8016750:	240b      	movs	r4, #11
 8016752:	4620      	mov	r0, r4
 8016754:	b01e      	add	sp, #120	; 0x78
 8016756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801675a:	2464      	movs	r4, #100	; 0x64
 801675c:	4620      	mov	r0, r4
 801675e:	b01e      	add	sp, #120	; 0x78
 8016760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016764:	f8d7 9000 	ldr.w	r9, [r7]
 8016768:	4926      	ldr	r1, [pc, #152]	; (8016804 <rcl_init+0x204>)
 801676a:	680b      	ldr	r3, [r1, #0]
 801676c:	3301      	adds	r3, #1
 801676e:	d036      	beq.n	80167de <rcl_init+0x1de>
 8016770:	600b      	str	r3, [r1, #0]
 8016772:	461a      	mov	r2, r3
 8016774:	2400      	movs	r4, #0
 8016776:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801677a:	607b      	str	r3, [r7, #4]
 801677c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801677e:	3301      	adds	r3, #1
 8016780:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8016784:	d034      	beq.n	80167f0 <rcl_init+0x1f0>
 8016786:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801678a:	b93b      	cbnz	r3, 801679c <rcl_init+0x19c>
 801678c:	3030      	adds	r0, #48	; 0x30
 801678e:	f000 f939 	bl	8016a04 <rcl_get_localhost_only>
 8016792:	4604      	mov	r4, r0
 8016794:	2800      	cmp	r0, #0
 8016796:	d1d1      	bne.n	801673c <rcl_init+0x13c>
 8016798:	683b      	ldr	r3, [r7, #0]
 801679a:	6958      	ldr	r0, [r3, #20]
 801679c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801679e:	aa18      	add	r2, sp, #96	; 0x60
 80167a0:	a917      	add	r1, sp, #92	; 0x5c
 80167a2:	f000 fd81 	bl	80172a8 <rcl_validate_enclave_name>
 80167a6:	4604      	mov	r4, r0
 80167a8:	2800      	cmp	r0, #0
 80167aa:	d1c7      	bne.n	801673c <rcl_init+0x13c>
 80167ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80167ae:	b9eb      	cbnz	r3, 80167ec <rcl_init+0x1ec>
 80167b0:	6839      	ldr	r1, [r7, #0]
 80167b2:	694b      	ldr	r3, [r1, #20]
 80167b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80167b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80167ba:	f000 fc3d 	bl	8017038 <rcl_get_security_options_from_environment>
 80167be:	4604      	mov	r4, r0
 80167c0:	2800      	cmp	r0, #0
 80167c2:	d1bb      	bne.n	801673c <rcl_init+0x13c>
 80167c4:	6839      	ldr	r1, [r7, #0]
 80167c6:	6948      	ldr	r0, [r1, #20]
 80167c8:	3128      	adds	r1, #40	; 0x28
 80167ca:	3018      	adds	r0, #24
 80167cc:	f001 fb36 	bl	8017e3c <rmw_init>
 80167d0:	4604      	mov	r4, r0
 80167d2:	2800      	cmp	r0, #0
 80167d4:	d0bd      	beq.n	8016752 <rcl_init+0x152>
 80167d6:	f7ff fe8f 	bl	80164f8 <rcl_convert_rmw_ret_to_rcl_ret>
 80167da:	4604      	mov	r4, r0
 80167dc:	e7ae      	b.n	801673c <rcl_init+0x13c>
 80167de:	2201      	movs	r2, #1
 80167e0:	461c      	mov	r4, r3
 80167e2:	600a      	str	r2, [r1, #0]
 80167e4:	4613      	mov	r3, r2
 80167e6:	e7c6      	b.n	8016776 <rcl_init+0x176>
 80167e8:	240a      	movs	r4, #10
 80167ea:	e7b2      	b.n	8016752 <rcl_init+0x152>
 80167ec:	2401      	movs	r4, #1
 80167ee:	e7a5      	b.n	801673c <rcl_init+0x13c>
 80167f0:	3024      	adds	r0, #36	; 0x24
 80167f2:	f003 fdbb 	bl	801a36c <rcl_get_default_domain_id>
 80167f6:	4604      	mov	r4, r0
 80167f8:	2800      	cmp	r0, #0
 80167fa:	d19f      	bne.n	801673c <rcl_init+0x13c>
 80167fc:	683b      	ldr	r3, [r7, #0]
 80167fe:	6958      	ldr	r0, [r3, #20]
 8016800:	e7c1      	b.n	8016786 <rcl_init+0x186>
 8016802:	bf00      	nop
 8016804:	200161ec 	.word	0x200161ec

08016808 <rcl_get_zero_initialized_init_options>:
 8016808:	2000      	movs	r0, #0
 801680a:	4770      	bx	lr

0801680c <rcl_init_options_init>:
 801680c:	b084      	sub	sp, #16
 801680e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016810:	b097      	sub	sp, #92	; 0x5c
 8016812:	ae1d      	add	r6, sp, #116	; 0x74
 8016814:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8016818:	2800      	cmp	r0, #0
 801681a:	d058      	beq.n	80168ce <rcl_init_options_init+0xc2>
 801681c:	6803      	ldr	r3, [r0, #0]
 801681e:	4605      	mov	r5, r0
 8016820:	b133      	cbz	r3, 8016830 <rcl_init_options_init+0x24>
 8016822:	2464      	movs	r4, #100	; 0x64
 8016824:	4620      	mov	r0, r4
 8016826:	b017      	add	sp, #92	; 0x5c
 8016828:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801682c:	b004      	add	sp, #16
 801682e:	4770      	bx	lr
 8016830:	4630      	mov	r0, r6
 8016832:	f7fa f8e9 	bl	8010a08 <rcutils_allocator_is_valid>
 8016836:	2800      	cmp	r0, #0
 8016838:	d049      	beq.n	80168ce <rcl_init_options_init+0xc2>
 801683a:	46b4      	mov	ip, r6
 801683c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016840:	ac11      	add	r4, sp, #68	; 0x44
 8016842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016844:	f8dc 3000 	ldr.w	r3, [ip]
 8016848:	6023      	str	r3, [r4, #0]
 801684a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801684c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801684e:	2050      	movs	r0, #80	; 0x50
 8016850:	4798      	blx	r3
 8016852:	4604      	mov	r4, r0
 8016854:	6028      	str	r0, [r5, #0]
 8016856:	2800      	cmp	r0, #0
 8016858:	d03b      	beq.n	80168d2 <rcl_init_options_init+0xc6>
 801685a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801685e:	4686      	mov	lr, r0
 8016860:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016864:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016868:	f8dc 3000 	ldr.w	r3, [ip]
 801686c:	f8ce 3000 	str.w	r3, [lr]
 8016870:	a802      	add	r0, sp, #8
 8016872:	f001 f86d 	bl	8017950 <rmw_get_zero_initialized_init_options>
 8016876:	f10d 0e08 	add.w	lr, sp, #8
 801687a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801687e:	f104 0c18 	add.w	ip, r4, #24
 8016882:	682f      	ldr	r7, [r5, #0]
 8016884:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016888:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801688c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016890:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016894:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016898:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801689c:	ac20      	add	r4, sp, #128	; 0x80
 801689e:	e88c 0003 	stmia.w	ip, {r0, r1}
 80168a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80168a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80168aa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80168ae:	f107 0018 	add.w	r0, r7, #24
 80168b2:	f001 f9cb 	bl	8017c4c <rmw_init_options_init>
 80168b6:	4604      	mov	r4, r0
 80168b8:	2800      	cmp	r0, #0
 80168ba:	d0b3      	beq.n	8016824 <rcl_init_options_init+0x18>
 80168bc:	9921      	ldr	r1, [sp, #132]	; 0x84
 80168be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80168c0:	6828      	ldr	r0, [r5, #0]
 80168c2:	4798      	blx	r3
 80168c4:	4620      	mov	r0, r4
 80168c6:	f7ff fe17 	bl	80164f8 <rcl_convert_rmw_ret_to_rcl_ret>
 80168ca:	4604      	mov	r4, r0
 80168cc:	e7aa      	b.n	8016824 <rcl_init_options_init+0x18>
 80168ce:	240b      	movs	r4, #11
 80168d0:	e7a8      	b.n	8016824 <rcl_init_options_init+0x18>
 80168d2:	240a      	movs	r4, #10
 80168d4:	e7a6      	b.n	8016824 <rcl_init_options_init+0x18>
 80168d6:	bf00      	nop

080168d8 <rcl_init_options_fini>:
 80168d8:	b530      	push	{r4, r5, lr}
 80168da:	b087      	sub	sp, #28
 80168dc:	b1f0      	cbz	r0, 801691c <rcl_init_options_fini+0x44>
 80168de:	6803      	ldr	r3, [r0, #0]
 80168e0:	4604      	mov	r4, r0
 80168e2:	b1db      	cbz	r3, 801691c <rcl_init_options_fini+0x44>
 80168e4:	469c      	mov	ip, r3
 80168e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80168ea:	f10d 0e04 	add.w	lr, sp, #4
 80168ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80168f2:	f8dc 3000 	ldr.w	r3, [ip]
 80168f6:	f8ce 3000 	str.w	r3, [lr]
 80168fa:	a801      	add	r0, sp, #4
 80168fc:	f7fa f884 	bl	8010a08 <rcutils_allocator_is_valid>
 8016900:	b160      	cbz	r0, 801691c <rcl_init_options_fini+0x44>
 8016902:	6820      	ldr	r0, [r4, #0]
 8016904:	3018      	adds	r0, #24
 8016906:	f001 fa51 	bl	8017dac <rmw_init_options_fini>
 801690a:	4605      	mov	r5, r0
 801690c:	b950      	cbnz	r0, 8016924 <rcl_init_options_fini+0x4c>
 801690e:	6820      	ldr	r0, [r4, #0]
 8016910:	9b02      	ldr	r3, [sp, #8]
 8016912:	9905      	ldr	r1, [sp, #20]
 8016914:	4798      	blx	r3
 8016916:	4628      	mov	r0, r5
 8016918:	b007      	add	sp, #28
 801691a:	bd30      	pop	{r4, r5, pc}
 801691c:	250b      	movs	r5, #11
 801691e:	4628      	mov	r0, r5
 8016920:	b007      	add	sp, #28
 8016922:	bd30      	pop	{r4, r5, pc}
 8016924:	f7ff fde8 	bl	80164f8 <rcl_convert_rmw_ret_to_rcl_ret>
 8016928:	4605      	mov	r5, r0
 801692a:	e7f8      	b.n	801691e <rcl_init_options_fini+0x46>

0801692c <rcl_init_options_copy>:
 801692c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016930:	b094      	sub	sp, #80	; 0x50
 8016932:	2800      	cmp	r0, #0
 8016934:	d058      	beq.n	80169e8 <rcl_init_options_copy+0xbc>
 8016936:	4604      	mov	r4, r0
 8016938:	6800      	ldr	r0, [r0, #0]
 801693a:	2800      	cmp	r0, #0
 801693c:	d054      	beq.n	80169e8 <rcl_init_options_copy+0xbc>
 801693e:	460e      	mov	r6, r1
 8016940:	f7fa f862 	bl	8010a08 <rcutils_allocator_is_valid>
 8016944:	2800      	cmp	r0, #0
 8016946:	d04f      	beq.n	80169e8 <rcl_init_options_copy+0xbc>
 8016948:	2e00      	cmp	r6, #0
 801694a:	d04d      	beq.n	80169e8 <rcl_init_options_copy+0xbc>
 801694c:	6833      	ldr	r3, [r6, #0]
 801694e:	b123      	cbz	r3, 801695a <rcl_init_options_copy+0x2e>
 8016950:	2464      	movs	r4, #100	; 0x64
 8016952:	4620      	mov	r0, r4
 8016954:	b014      	add	sp, #80	; 0x50
 8016956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801695a:	6827      	ldr	r7, [r4, #0]
 801695c:	46bc      	mov	ip, r7
 801695e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016962:	ad0f      	add	r5, sp, #60	; 0x3c
 8016964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016966:	f8dc 3000 	ldr.w	r3, [ip]
 801696a:	f8d7 8000 	ldr.w	r8, [r7]
 801696e:	602b      	str	r3, [r5, #0]
 8016970:	4619      	mov	r1, r3
 8016972:	2050      	movs	r0, #80	; 0x50
 8016974:	47c0      	blx	r8
 8016976:	4605      	mov	r5, r0
 8016978:	6030      	str	r0, [r6, #0]
 801697a:	b3d0      	cbz	r0, 80169f2 <rcl_init_options_copy+0xc6>
 801697c:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8016980:	4686      	mov	lr, r0
 8016982:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016986:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801698a:	f8dc 3000 	ldr.w	r3, [ip]
 801698e:	f8ce 3000 	str.w	r3, [lr]
 8016992:	4668      	mov	r0, sp
 8016994:	f000 ffdc 	bl	8017950 <rmw_get_zero_initialized_init_options>
 8016998:	46ee      	mov	lr, sp
 801699a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801699e:	f105 0c18 	add.w	ip, r5, #24
 80169a2:	6824      	ldr	r4, [r4, #0]
 80169a4:	6835      	ldr	r5, [r6, #0]
 80169a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80169ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80169b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169ba:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80169be:	e88c 0003 	stmia.w	ip, {r0, r1}
 80169c2:	f104 0018 	add.w	r0, r4, #24
 80169c6:	f105 0118 	add.w	r1, r5, #24
 80169ca:	f001 f9a7 	bl	8017d1c <rmw_init_options_copy>
 80169ce:	4604      	mov	r4, r0
 80169d0:	2800      	cmp	r0, #0
 80169d2:	d0be      	beq.n	8016952 <rcl_init_options_copy+0x26>
 80169d4:	f7fa f826 	bl	8010a24 <rcutils_get_error_string>
 80169d8:	f7fa f83a 	bl	8010a50 <rcutils_reset_error>
 80169dc:	4630      	mov	r0, r6
 80169de:	f7ff ff7b 	bl	80168d8 <rcl_init_options_fini>
 80169e2:	b140      	cbz	r0, 80169f6 <rcl_init_options_copy+0xca>
 80169e4:	4604      	mov	r4, r0
 80169e6:	e7b4      	b.n	8016952 <rcl_init_options_copy+0x26>
 80169e8:	240b      	movs	r4, #11
 80169ea:	4620      	mov	r0, r4
 80169ec:	b014      	add	sp, #80	; 0x50
 80169ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169f2:	240a      	movs	r4, #10
 80169f4:	e7ad      	b.n	8016952 <rcl_init_options_copy+0x26>
 80169f6:	4620      	mov	r0, r4
 80169f8:	b014      	add	sp, #80	; 0x50
 80169fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169fe:	f7ff bd7b 	b.w	80164f8 <rcl_convert_rmw_ret_to_rcl_ret>
 8016a02:	bf00      	nop

08016a04 <rcl_get_localhost_only>:
 8016a04:	b510      	push	{r4, lr}
 8016a06:	b082      	sub	sp, #8
 8016a08:	2300      	movs	r3, #0
 8016a0a:	9301      	str	r3, [sp, #4]
 8016a0c:	b1b8      	cbz	r0, 8016a3e <rcl_get_localhost_only+0x3a>
 8016a0e:	4604      	mov	r4, r0
 8016a10:	a901      	add	r1, sp, #4
 8016a12:	480c      	ldr	r0, [pc, #48]	; (8016a44 <rcl_get_localhost_only+0x40>)
 8016a14:	f000 fc90 	bl	8017338 <rcutils_get_env>
 8016a18:	b110      	cbz	r0, 8016a20 <rcl_get_localhost_only+0x1c>
 8016a1a:	2001      	movs	r0, #1
 8016a1c:	b002      	add	sp, #8
 8016a1e:	bd10      	pop	{r4, pc}
 8016a20:	9b01      	ldr	r3, [sp, #4]
 8016a22:	b113      	cbz	r3, 8016a2a <rcl_get_localhost_only+0x26>
 8016a24:	781a      	ldrb	r2, [r3, #0]
 8016a26:	2a31      	cmp	r2, #49	; 0x31
 8016a28:	d004      	beq.n	8016a34 <rcl_get_localhost_only+0x30>
 8016a2a:	2302      	movs	r3, #2
 8016a2c:	2000      	movs	r0, #0
 8016a2e:	7023      	strb	r3, [r4, #0]
 8016a30:	b002      	add	sp, #8
 8016a32:	bd10      	pop	{r4, pc}
 8016a34:	785b      	ldrb	r3, [r3, #1]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d1f7      	bne.n	8016a2a <rcl_get_localhost_only+0x26>
 8016a3a:	2301      	movs	r3, #1
 8016a3c:	e7f6      	b.n	8016a2c <rcl_get_localhost_only+0x28>
 8016a3e:	200b      	movs	r0, #11
 8016a40:	b002      	add	sp, #8
 8016a42:	bd10      	pop	{r4, pc}
 8016a44:	0801d0d4 	.word	0x0801d0d4

08016a48 <rcl_get_zero_initialized_node>:
 8016a48:	4a03      	ldr	r2, [pc, #12]	; (8016a58 <rcl_get_zero_initialized_node+0x10>)
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016a50:	e883 0003 	stmia.w	r3, {r0, r1}
 8016a54:	4618      	mov	r0, r3
 8016a56:	4770      	bx	lr
 8016a58:	0801d0fc 	.word	0x0801d0fc

08016a5c <rcl_node_init>:
 8016a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a60:	b0a9      	sub	sp, #164	; 0xa4
 8016a62:	4604      	mov	r4, r0
 8016a64:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8016a68:	a823      	add	r0, sp, #140	; 0x8c
 8016a6a:	460e      	mov	r6, r1
 8016a6c:	4615      	mov	r5, r2
 8016a6e:	461f      	mov	r7, r3
 8016a70:	f003 fea4 	bl	801a7bc <rcl_guard_condition_get_default_options>
 8016a74:	f1b8 0f00 	cmp.w	r8, #0
 8016a78:	f000 80e6 	beq.w	8016c48 <rcl_node_init+0x1ec>
 8016a7c:	4640      	mov	r0, r8
 8016a7e:	f7f9 ffc3 	bl	8010a08 <rcutils_allocator_is_valid>
 8016a82:	2800      	cmp	r0, #0
 8016a84:	f000 80e0 	beq.w	8016c48 <rcl_node_init+0x1ec>
 8016a88:	2e00      	cmp	r6, #0
 8016a8a:	f000 80dd 	beq.w	8016c48 <rcl_node_init+0x1ec>
 8016a8e:	2d00      	cmp	r5, #0
 8016a90:	f000 80da 	beq.w	8016c48 <rcl_node_init+0x1ec>
 8016a94:	2c00      	cmp	r4, #0
 8016a96:	f000 80d7 	beq.w	8016c48 <rcl_node_init+0x1ec>
 8016a9a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016a9e:	f1b9 0f00 	cmp.w	r9, #0
 8016aa2:	f040 80fd 	bne.w	8016ca0 <rcl_node_init+0x244>
 8016aa6:	2f00      	cmp	r7, #0
 8016aa8:	f000 80ce 	beq.w	8016c48 <rcl_node_init+0x1ec>
 8016aac:	4638      	mov	r0, r7
 8016aae:	f7ff fd41 	bl	8016534 <rcl_context_is_valid>
 8016ab2:	4682      	mov	sl, r0
 8016ab4:	2800      	cmp	r0, #0
 8016ab6:	f000 80cd 	beq.w	8016c54 <rcl_node_init+0x1f8>
 8016aba:	464a      	mov	r2, r9
 8016abc:	a922      	add	r1, sp, #136	; 0x88
 8016abe:	4630      	mov	r0, r6
 8016ac0:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8016ac4:	f001 f83a 	bl	8017b3c <rmw_validate_node_name>
 8016ac8:	4681      	mov	r9, r0
 8016aca:	2800      	cmp	r0, #0
 8016acc:	f040 80be 	bne.w	8016c4c <rcl_node_init+0x1f0>
 8016ad0:	9822      	ldr	r0, [sp, #136]	; 0x88
 8016ad2:	2800      	cmp	r0, #0
 8016ad4:	f040 80f0 	bne.w	8016cb8 <rcl_node_init+0x25c>
 8016ad8:	4628      	mov	r0, r5
 8016ada:	f7e9 fb83 	bl	80001e4 <strlen>
 8016ade:	2800      	cmp	r0, #0
 8016ae0:	f040 80bb 	bne.w	8016c5a <rcl_node_init+0x1fe>
 8016ae4:	4d7c      	ldr	r5, [pc, #496]	; (8016cd8 <rcl_node_init+0x27c>)
 8016ae6:	a922      	add	r1, sp, #136	; 0x88
 8016ae8:	2200      	movs	r2, #0
 8016aea:	4628      	mov	r0, r5
 8016aec:	f001 f808 	bl	8017b00 <rmw_validate_namespace>
 8016af0:	4681      	mov	r9, r0
 8016af2:	2800      	cmp	r0, #0
 8016af4:	f040 80aa 	bne.w	8016c4c <rcl_node_init+0x1f0>
 8016af8:	4682      	mov	sl, r0
 8016afa:	9822      	ldr	r0, [sp, #136]	; 0x88
 8016afc:	2800      	cmp	r0, #0
 8016afe:	f040 80e0 	bne.w	8016cc2 <rcl_node_init+0x266>
 8016b02:	f8d8 3000 	ldr.w	r3, [r8]
 8016b06:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016b0a:	2078      	movs	r0, #120	; 0x78
 8016b0c:	4798      	blx	r3
 8016b0e:	4681      	mov	r9, r0
 8016b10:	6060      	str	r0, [r4, #4]
 8016b12:	2800      	cmp	r0, #0
 8016b14:	f000 80ca 	beq.w	8016cac <rcl_node_init+0x250>
 8016b18:	2200      	movs	r2, #0
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 8016b20:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 8016b24:	a808      	add	r0, sp, #32
 8016b26:	f000 f907 	bl	8016d38 <rcl_node_get_default_options>
 8016b2a:	a908      	add	r1, sp, #32
 8016b2c:	4648      	mov	r0, r9
 8016b2e:	2268      	movs	r2, #104	; 0x68
 8016b30:	f004 faea 	bl	801b108 <memcpy>
 8016b34:	6861      	ldr	r1, [r4, #4]
 8016b36:	6027      	str	r7, [r4, #0]
 8016b38:	4640      	mov	r0, r8
 8016b3a:	f000 f90b 	bl	8016d54 <rcl_node_options_copy>
 8016b3e:	2800      	cmp	r0, #0
 8016b40:	d158      	bne.n	8016bf4 <rcl_node_init+0x198>
 8016b42:	4628      	mov	r0, r5
 8016b44:	f7e9 fb4e 	bl	80001e4 <strlen>
 8016b48:	4428      	add	r0, r5
 8016b4a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8016b4e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8016b52:	2b2f      	cmp	r3, #47	; 0x2f
 8016b54:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016b58:	9300      	str	r3, [sp, #0]
 8016b5a:	bf0c      	ite	eq
 8016b5c:	4b5f      	ldreq	r3, [pc, #380]	; (8016cdc <rcl_node_init+0x280>)
 8016b5e:	4b60      	ldrne	r3, [pc, #384]	; (8016ce0 <rcl_node_init+0x284>)
 8016b60:	9302      	str	r3, [sp, #8]
 8016b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016b66:	9301      	str	r3, [sp, #4]
 8016b68:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016b6c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016b70:	f000 fc0a 	bl	8017388 <rcutils_format_string_limit>
 8016b74:	6823      	ldr	r3, [r4, #0]
 8016b76:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 8016b7a:	6818      	ldr	r0, [r3, #0]
 8016b7c:	4631      	mov	r1, r6
 8016b7e:	3028      	adds	r0, #40	; 0x28
 8016b80:	462a      	mov	r2, r5
 8016b82:	6866      	ldr	r6, [r4, #4]
 8016b84:	f001 fbc2 	bl	801830c <rmw_create_node>
 8016b88:	6863      	ldr	r3, [r4, #4]
 8016b8a:	66b0      	str	r0, [r6, #104]	; 0x68
 8016b8c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8016b8e:	2800      	cmp	r0, #0
 8016b90:	d032      	beq.n	8016bf8 <rcl_node_init+0x19c>
 8016b92:	f001 fc4d 	bl	8018430 <rmw_node_get_graph_guard_condition>
 8016b96:	4681      	mov	r9, r0
 8016b98:	b360      	cbz	r0, 8016bf4 <rcl_node_init+0x198>
 8016b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8016b9e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016ba2:	6866      	ldr	r6, [r4, #4]
 8016ba4:	2008      	movs	r0, #8
 8016ba6:	4798      	blx	r3
 8016ba8:	6863      	ldr	r3, [r4, #4]
 8016baa:	66f0      	str	r0, [r6, #108]	; 0x6c
 8016bac:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8016bb0:	f1bb 0f00 	cmp.w	fp, #0
 8016bb4:	d020      	beq.n	8016bf8 <rcl_node_init+0x19c>
 8016bb6:	a806      	add	r0, sp, #24
 8016bb8:	f003 fd70 	bl	801a69c <rcl_get_zero_initialized_guard_condition>
 8016bbc:	a806      	add	r0, sp, #24
 8016bbe:	c803      	ldmia	r0, {r0, r1}
 8016bc0:	6863      	ldr	r3, [r4, #4]
 8016bc2:	46c4      	mov	ip, r8
 8016bc4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8016bc8:	e88b 0003 	stmia.w	fp, {r0, r1}
 8016bcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016bd0:	ae23      	add	r6, sp, #140	; 0x8c
 8016bd2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016bd4:	f8dc 3000 	ldr.w	r3, [ip]
 8016bd8:	6033      	str	r3, [r6, #0]
 8016bda:	ab28      	add	r3, sp, #160	; 0xa0
 8016bdc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8016be0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016be4:	4649      	mov	r1, r9
 8016be6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016be8:	463a      	mov	r2, r7
 8016bea:	4670      	mov	r0, lr
 8016bec:	f003 fd60 	bl	801a6b0 <rcl_guard_condition_init_from_rmw>
 8016bf0:	4681      	mov	r9, r0
 8016bf2:	b328      	cbz	r0, 8016c40 <rcl_node_init+0x1e4>
 8016bf4:	6863      	ldr	r3, [r4, #4]
 8016bf6:	b1f3      	cbz	r3, 8016c36 <rcl_node_init+0x1da>
 8016bf8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8016bfa:	b128      	cbz	r0, 8016c08 <rcl_node_init+0x1ac>
 8016bfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016c00:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016c04:	4798      	blx	r3
 8016c06:	6863      	ldr	r3, [r4, #4]
 8016c08:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8016c0a:	b110      	cbz	r0, 8016c12 <rcl_node_init+0x1b6>
 8016c0c:	f001 fb96 	bl	801833c <rmw_destroy_node>
 8016c10:	6863      	ldr	r3, [r4, #4]
 8016c12:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8016c14:	b148      	cbz	r0, 8016c2a <rcl_node_init+0x1ce>
 8016c16:	f003 fdab 	bl	801a770 <rcl_guard_condition_fini>
 8016c1a:	6863      	ldr	r3, [r4, #4]
 8016c1c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016c20:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8016c22:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016c26:	4798      	blx	r3
 8016c28:	6863      	ldr	r3, [r4, #4]
 8016c2a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016c34:	4798      	blx	r3
 8016c36:	2300      	movs	r3, #0
 8016c38:	e9c4 3300 	strd	r3, r3, [r4]
 8016c3c:	f04f 0901 	mov.w	r9, #1
 8016c40:	f1ba 0f00 	cmp.w	sl, #0
 8016c44:	d125      	bne.n	8016c92 <rcl_node_init+0x236>
 8016c46:	e001      	b.n	8016c4c <rcl_node_init+0x1f0>
 8016c48:	f04f 090b 	mov.w	r9, #11
 8016c4c:	4648      	mov	r0, r9
 8016c4e:	b029      	add	sp, #164	; 0xa4
 8016c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c54:	f04f 0965 	mov.w	r9, #101	; 0x65
 8016c58:	e7f8      	b.n	8016c4c <rcl_node_init+0x1f0>
 8016c5a:	782b      	ldrb	r3, [r5, #0]
 8016c5c:	2b2f      	cmp	r3, #47	; 0x2f
 8016c5e:	f43f af42 	beq.w	8016ae6 <rcl_node_init+0x8a>
 8016c62:	9503      	str	r5, [sp, #12]
 8016c64:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016c68:	9300      	str	r3, [sp, #0]
 8016c6a:	4b1e      	ldr	r3, [pc, #120]	; (8016ce4 <rcl_node_init+0x288>)
 8016c6c:	9302      	str	r3, [sp, #8]
 8016c6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016c72:	9301      	str	r3, [sp, #4]
 8016c74:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016c78:	f000 fb86 	bl	8017388 <rcutils_format_string_limit>
 8016c7c:	4605      	mov	r5, r0
 8016c7e:	b340      	cbz	r0, 8016cd2 <rcl_node_init+0x276>
 8016c80:	2200      	movs	r2, #0
 8016c82:	a922      	add	r1, sp, #136	; 0x88
 8016c84:	9222      	str	r2, [sp, #136]	; 0x88
 8016c86:	f000 ff3b 	bl	8017b00 <rmw_validate_namespace>
 8016c8a:	4681      	mov	r9, r0
 8016c8c:	2800      	cmp	r0, #0
 8016c8e:	f43f af34 	beq.w	8016afa <rcl_node_init+0x9e>
 8016c92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016c96:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016c9a:	4628      	mov	r0, r5
 8016c9c:	4798      	blx	r3
 8016c9e:	e7d5      	b.n	8016c4c <rcl_node_init+0x1f0>
 8016ca0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8016ca4:	4648      	mov	r0, r9
 8016ca6:	b029      	add	sp, #164	; 0xa4
 8016ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cac:	f04f 090a 	mov.w	r9, #10
 8016cb0:	f1ba 0f00 	cmp.w	sl, #0
 8016cb4:	d1ed      	bne.n	8016c92 <rcl_node_init+0x236>
 8016cb6:	e7c9      	b.n	8016c4c <rcl_node_init+0x1f0>
 8016cb8:	f000 ff92 	bl	8017be0 <rmw_node_name_validation_result_string>
 8016cbc:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8016cc0:	e7c4      	b.n	8016c4c <rcl_node_init+0x1f0>
 8016cc2:	f000 ff2f 	bl	8017b24 <rmw_namespace_validation_result_string>
 8016cc6:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8016cca:	f1ba 0f00 	cmp.w	sl, #0
 8016cce:	d1e0      	bne.n	8016c92 <rcl_node_init+0x236>
 8016cd0:	e7bc      	b.n	8016c4c <rcl_node_init+0x1f0>
 8016cd2:	f04f 090a 	mov.w	r9, #10
 8016cd6:	e7b9      	b.n	8016c4c <rcl_node_init+0x1f0>
 8016cd8:	0801d0ec 	.word	0x0801d0ec
 8016cdc:	0801c994 	.word	0x0801c994
 8016ce0:	0801d0f4 	.word	0x0801d0f4
 8016ce4:	0801d0f0 	.word	0x0801d0f0

08016ce8 <rcl_node_is_valid>:
 8016ce8:	b130      	cbz	r0, 8016cf8 <rcl_node_is_valid+0x10>
 8016cea:	6843      	ldr	r3, [r0, #4]
 8016cec:	b123      	cbz	r3, 8016cf8 <rcl_node_is_valid+0x10>
 8016cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016cf0:	b113      	cbz	r3, 8016cf8 <rcl_node_is_valid+0x10>
 8016cf2:	6800      	ldr	r0, [r0, #0]
 8016cf4:	f7ff bc1e 	b.w	8016534 <rcl_context_is_valid>
 8016cf8:	2000      	movs	r0, #0
 8016cfa:	4770      	bx	lr

08016cfc <rcl_node_get_name>:
 8016cfc:	b120      	cbz	r0, 8016d08 <rcl_node_get_name+0xc>
 8016cfe:	6840      	ldr	r0, [r0, #4]
 8016d00:	b110      	cbz	r0, 8016d08 <rcl_node_get_name+0xc>
 8016d02:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016d04:	b100      	cbz	r0, 8016d08 <rcl_node_get_name+0xc>
 8016d06:	6880      	ldr	r0, [r0, #8]
 8016d08:	4770      	bx	lr
 8016d0a:	bf00      	nop

08016d0c <rcl_node_get_namespace>:
 8016d0c:	b120      	cbz	r0, 8016d18 <rcl_node_get_namespace+0xc>
 8016d0e:	6840      	ldr	r0, [r0, #4]
 8016d10:	b110      	cbz	r0, 8016d18 <rcl_node_get_namespace+0xc>
 8016d12:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016d14:	b100      	cbz	r0, 8016d18 <rcl_node_get_namespace+0xc>
 8016d16:	68c0      	ldr	r0, [r0, #12]
 8016d18:	4770      	bx	lr
 8016d1a:	bf00      	nop

08016d1c <rcl_node_get_options>:
 8016d1c:	b128      	cbz	r0, 8016d2a <rcl_node_get_options+0xe>
 8016d1e:	6840      	ldr	r0, [r0, #4]
 8016d20:	b118      	cbz	r0, 8016d2a <rcl_node_get_options+0xe>
 8016d22:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	bf08      	it	eq
 8016d28:	2000      	moveq	r0, #0
 8016d2a:	4770      	bx	lr

08016d2c <rcl_node_get_rmw_handle>:
 8016d2c:	b110      	cbz	r0, 8016d34 <rcl_node_get_rmw_handle+0x8>
 8016d2e:	6840      	ldr	r0, [r0, #4]
 8016d30:	b100      	cbz	r0, 8016d34 <rcl_node_get_rmw_handle+0x8>
 8016d32:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016d34:	4770      	bx	lr
 8016d36:	bf00      	nop

08016d38 <rcl_node_get_default_options>:
 8016d38:	b510      	push	{r4, lr}
 8016d3a:	2268      	movs	r2, #104	; 0x68
 8016d3c:	4604      	mov	r4, r0
 8016d3e:	2100      	movs	r1, #0
 8016d40:	f004 f9f0 	bl	801b124 <memset>
 8016d44:	4620      	mov	r0, r4
 8016d46:	f7f9 fe51 	bl	80109ec <rcutils_get_default_allocator>
 8016d4a:	2301      	movs	r3, #1
 8016d4c:	7523      	strb	r3, [r4, #20]
 8016d4e:	4620      	mov	r0, r4
 8016d50:	bd10      	pop	{r4, pc}
 8016d52:	bf00      	nop

08016d54 <rcl_node_options_copy>:
 8016d54:	b1d0      	cbz	r0, 8016d8c <rcl_node_options_copy+0x38>
 8016d56:	b570      	push	{r4, r5, r6, lr}
 8016d58:	460c      	mov	r4, r1
 8016d5a:	b1a9      	cbz	r1, 8016d88 <rcl_node_options_copy+0x34>
 8016d5c:	4288      	cmp	r0, r1
 8016d5e:	4684      	mov	ip, r0
 8016d60:	d012      	beq.n	8016d88 <rcl_node_options_copy+0x34>
 8016d62:	4605      	mov	r5, r0
 8016d64:	8a86      	ldrh	r6, [r0, #20]
 8016d66:	468e      	mov	lr, r1
 8016d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016d6e:	682b      	ldr	r3, [r5, #0]
 8016d70:	f8ce 3000 	str.w	r3, [lr]
 8016d74:	f10c 0118 	add.w	r1, ip, #24
 8016d78:	2250      	movs	r2, #80	; 0x50
 8016d7a:	82a6      	strh	r6, [r4, #20]
 8016d7c:	f104 0018 	add.w	r0, r4, #24
 8016d80:	f004 f9c2 	bl	801b108 <memcpy>
 8016d84:	2000      	movs	r0, #0
 8016d86:	bd70      	pop	{r4, r5, r6, pc}
 8016d88:	200b      	movs	r0, #11
 8016d8a:	bd70      	pop	{r4, r5, r6, pc}
 8016d8c:	200b      	movs	r0, #11
 8016d8e:	4770      	bx	lr

08016d90 <rcl_node_resolve_name>:
 8016d90:	b082      	sub	sp, #8
 8016d92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d96:	b091      	sub	sp, #68	; 0x44
 8016d98:	ac1a      	add	r4, sp, #104	; 0x68
 8016d9a:	e884 000c 	stmia.w	r4, {r2, r3}
 8016d9e:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8016da2:	2800      	cmp	r0, #0
 8016da4:	d03b      	beq.n	8016e1e <rcl_node_resolve_name+0x8e>
 8016da6:	460c      	mov	r4, r1
 8016da8:	4605      	mov	r5, r0
 8016daa:	f7ff ffb7 	bl	8016d1c <rcl_node_get_options>
 8016dae:	2800      	cmp	r0, #0
 8016db0:	d037      	beq.n	8016e22 <rcl_node_resolve_name+0x92>
 8016db2:	4628      	mov	r0, r5
 8016db4:	f7ff ffa2 	bl	8016cfc <rcl_node_get_name>
 8016db8:	4606      	mov	r6, r0
 8016dba:	4628      	mov	r0, r5
 8016dbc:	f7ff ffa6 	bl	8016d0c <rcl_node_get_namespace>
 8016dc0:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8016dc4:	4681      	mov	r9, r0
 8016dc6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016dca:	ad0b      	add	r5, sp, #44	; 0x2c
 8016dcc:	46ac      	mov	ip, r5
 8016dce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016dd2:	f8de 3000 	ldr.w	r3, [lr]
 8016dd6:	f8cc 3000 	str.w	r3, [ip]
 8016dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ddc:	b1fb      	cbz	r3, 8016e1e <rcl_node_resolve_name+0x8e>
 8016dde:	468a      	mov	sl, r1
 8016de0:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8016de4:	f000 fc28 	bl	8017638 <rcutils_get_zero_initialized_string_map>
 8016de8:	ab10      	add	r3, sp, #64	; 0x40
 8016dea:	9008      	str	r0, [sp, #32]
 8016dec:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016df0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016df4:	2100      	movs	r1, #0
 8016df6:	e895 000c 	ldmia.w	r5, {r2, r3}
 8016dfa:	a808      	add	r0, sp, #32
 8016dfc:	f000 fc94 	bl	8017728 <rcutils_string_map_init>
 8016e00:	4607      	mov	r7, r0
 8016e02:	b180      	cbz	r0, 8016e26 <rcl_node_resolve_name+0x96>
 8016e04:	f7f9 fe0e 	bl	8010a24 <rcutils_get_error_string>
 8016e08:	f7f9 fe22 	bl	8010a50 <rcutils_reset_error>
 8016e0c:	2f0a      	cmp	r7, #10
 8016e0e:	bf18      	it	ne
 8016e10:	2701      	movne	r7, #1
 8016e12:	4638      	mov	r0, r7
 8016e14:	b011      	add	sp, #68	; 0x44
 8016e16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e1a:	b002      	add	sp, #8
 8016e1c:	4770      	bx	lr
 8016e1e:	270b      	movs	r7, #11
 8016e20:	e7f7      	b.n	8016e12 <rcl_node_resolve_name+0x82>
 8016e22:	2701      	movs	r7, #1
 8016e24:	e7f5      	b.n	8016e12 <rcl_node_resolve_name+0x82>
 8016e26:	9009      	str	r0, [sp, #36]	; 0x24
 8016e28:	9007      	str	r0, [sp, #28]
 8016e2a:	a808      	add	r0, sp, #32
 8016e2c:	f003 fc30 	bl	801a690 <rcl_get_default_topic_name_substitutions>
 8016e30:	4607      	mov	r7, r0
 8016e32:	b1a8      	cbz	r0, 8016e60 <rcl_node_resolve_name+0xd0>
 8016e34:	280a      	cmp	r0, #10
 8016e36:	9c07      	ldr	r4, [sp, #28]
 8016e38:	d000      	beq.n	8016e3c <rcl_node_resolve_name+0xac>
 8016e3a:	2701      	movs	r7, #1
 8016e3c:	a808      	add	r0, sp, #32
 8016e3e:	f000 fcb3 	bl	80177a8 <rcutils_string_map_fini>
 8016e42:	2800      	cmp	r0, #0
 8016e44:	d13d      	bne.n	8016ec2 <rcl_node_resolve_name+0x132>
 8016e46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e48:	4659      	mov	r1, fp
 8016e4a:	47d0      	blx	sl
 8016e4c:	4659      	mov	r1, fp
 8016e4e:	4620      	mov	r0, r4
 8016e50:	47d0      	blx	sl
 8016e52:	f1b8 0f00 	cmp.w	r8, #0
 8016e56:	d0dc      	beq.n	8016e12 <rcl_node_resolve_name+0x82>
 8016e58:	2f67      	cmp	r7, #103	; 0x67
 8016e5a:	bf08      	it	eq
 8016e5c:	2768      	moveq	r7, #104	; 0x68
 8016e5e:	e7d8      	b.n	8016e12 <rcl_node_resolve_name+0x82>
 8016e60:	ab09      	add	r3, sp, #36	; 0x24
 8016e62:	9305      	str	r3, [sp, #20]
 8016e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e66:	46ec      	mov	ip, sp
 8016e68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e6c:	682b      	ldr	r3, [r5, #0]
 8016e6e:	f8cc 3000 	str.w	r3, [ip]
 8016e72:	464a      	mov	r2, r9
 8016e74:	4631      	mov	r1, r6
 8016e76:	4620      	mov	r0, r4
 8016e78:	ab08      	add	r3, sp, #32
 8016e7a:	f003 faab 	bl	801a3d4 <rcl_expand_topic_name>
 8016e7e:	4607      	mov	r7, r0
 8016e80:	b9b8      	cbnz	r0, 8016eb2 <rcl_node_resolve_name+0x122>
 8016e82:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016e84:	9009      	str	r0, [sp, #36]	; 0x24
 8016e86:	4602      	mov	r2, r0
 8016e88:	a90a      	add	r1, sp, #40	; 0x28
 8016e8a:	4620      	mov	r0, r4
 8016e8c:	f000 fd74 	bl	8017978 <rmw_validate_full_topic_name>
 8016e90:	b988      	cbnz	r0, 8016eb6 <rcl_node_resolve_name+0x126>
 8016e92:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016e94:	b9d5      	cbnz	r5, 8016ecc <rcl_node_resolve_name+0x13c>
 8016e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e98:	a808      	add	r0, sp, #32
 8016e9a:	601c      	str	r4, [r3, #0]
 8016e9c:	f000 fc84 	bl	80177a8 <rcutils_string_map_fini>
 8016ea0:	4607      	mov	r7, r0
 8016ea2:	b1a8      	cbz	r0, 8016ed0 <rcl_node_resolve_name+0x140>
 8016ea4:	f7f9 fdbe 	bl	8010a24 <rcutils_get_error_string>
 8016ea8:	462c      	mov	r4, r5
 8016eaa:	f7f9 fdd1 	bl	8010a50 <rcutils_reset_error>
 8016eae:	2701      	movs	r7, #1
 8016eb0:	e7c9      	b.n	8016e46 <rcl_node_resolve_name+0xb6>
 8016eb2:	9c07      	ldr	r4, [sp, #28]
 8016eb4:	e7c2      	b.n	8016e3c <rcl_node_resolve_name+0xac>
 8016eb6:	f7f9 fdb5 	bl	8010a24 <rcutils_get_error_string>
 8016eba:	2701      	movs	r7, #1
 8016ebc:	f7f9 fdc8 	bl	8010a50 <rcutils_reset_error>
 8016ec0:	e7bc      	b.n	8016e3c <rcl_node_resolve_name+0xac>
 8016ec2:	f7f9 fdaf 	bl	8010a24 <rcutils_get_error_string>
 8016ec6:	f7f9 fdc3 	bl	8010a50 <rcutils_reset_error>
 8016eca:	e7bc      	b.n	8016e46 <rcl_node_resolve_name+0xb6>
 8016ecc:	2767      	movs	r7, #103	; 0x67
 8016ece:	e7b5      	b.n	8016e3c <rcl_node_resolve_name+0xac>
 8016ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ed2:	4659      	mov	r1, fp
 8016ed4:	47d0      	blx	sl
 8016ed6:	4659      	mov	r1, fp
 8016ed8:	4638      	mov	r0, r7
 8016eda:	47d0      	blx	sl
 8016edc:	e799      	b.n	8016e12 <rcl_node_resolve_name+0x82>
 8016ede:	bf00      	nop

08016ee0 <exact_match_lookup>:
 8016ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ee2:	f102 0708 	add.w	r7, r2, #8
 8016ee6:	460b      	mov	r3, r1
 8016ee8:	4614      	mov	r4, r2
 8016eea:	4606      	mov	r6, r0
 8016eec:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016ef0:	b085      	sub	sp, #20
 8016ef2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	4919      	ldr	r1, [pc, #100]	; (8016f60 <exact_match_lookup+0x80>)
 8016efa:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016efe:	f000 fa35 	bl	801736c <rcutils_join_path>
 8016f02:	7833      	ldrb	r3, [r6, #0]
 8016f04:	2b2f      	cmp	r3, #47	; 0x2f
 8016f06:	4605      	mov	r5, r0
 8016f08:	d023      	beq.n	8016f52 <exact_match_lookup+0x72>
 8016f0a:	f104 030c 	add.w	r3, r4, #12
 8016f0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016f12:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016f16:	1c70      	adds	r0, r6, #1
 8016f18:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016f1c:	f000 fa2c 	bl	8017378 <rcutils_to_native_path>
 8016f20:	4606      	mov	r6, r0
 8016f22:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016f26:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016f2a:	4631      	mov	r1, r6
 8016f2c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016f30:	4628      	mov	r0, r5
 8016f32:	f000 fa1b 	bl	801736c <rcutils_join_path>
 8016f36:	6862      	ldr	r2, [r4, #4]
 8016f38:	6921      	ldr	r1, [r4, #16]
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	4630      	mov	r0, r6
 8016f3e:	461e      	mov	r6, r3
 8016f40:	4790      	blx	r2
 8016f42:	4628      	mov	r0, r5
 8016f44:	6863      	ldr	r3, [r4, #4]
 8016f46:	6921      	ldr	r1, [r4, #16]
 8016f48:	4798      	blx	r3
 8016f4a:	4635      	mov	r5, r6
 8016f4c:	4628      	mov	r0, r5
 8016f4e:	b005      	add	sp, #20
 8016f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f52:	7873      	ldrb	r3, [r6, #1]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d1d8      	bne.n	8016f0a <exact_match_lookup+0x2a>
 8016f58:	4628      	mov	r0, r5
 8016f5a:	b005      	add	sp, #20
 8016f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f5e:	bf00      	nop
 8016f60:	0801d140 	.word	0x0801d140

08016f64 <rcl_get_secure_root>:
 8016f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f68:	b085      	sub	sp, #20
 8016f6a:	b168      	cbz	r0, 8016f88 <rcl_get_secure_root+0x24>
 8016f6c:	4607      	mov	r7, r0
 8016f6e:	4608      	mov	r0, r1
 8016f70:	460c      	mov	r4, r1
 8016f72:	f7f9 fd49 	bl	8010a08 <rcutils_allocator_is_valid>
 8016f76:	b138      	cbz	r0, 8016f88 <rcl_get_secure_root+0x24>
 8016f78:	2300      	movs	r3, #0
 8016f7a:	482d      	ldr	r0, [pc, #180]	; (8017030 <rcl_get_secure_root+0xcc>)
 8016f7c:	9303      	str	r3, [sp, #12]
 8016f7e:	a903      	add	r1, sp, #12
 8016f80:	f000 f9da 	bl	8017338 <rcutils_get_env>
 8016f84:	4605      	mov	r5, r0
 8016f86:	b120      	cbz	r0, 8016f92 <rcl_get_secure_root+0x2e>
 8016f88:	2500      	movs	r5, #0
 8016f8a:	4628      	mov	r0, r5
 8016f8c:	b005      	add	sp, #20
 8016f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f92:	9b03      	ldr	r3, [sp, #12]
 8016f94:	781a      	ldrb	r2, [r3, #0]
 8016f96:	2a00      	cmp	r2, #0
 8016f98:	d0f6      	beq.n	8016f88 <rcl_get_secure_root+0x24>
 8016f9a:	f104 090c 	add.w	r9, r4, #12
 8016f9e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016fa2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016fac:	f000 fb06 	bl	80175bc <rcutils_strdup>
 8016fb0:	4680      	mov	r8, r0
 8016fb2:	2800      	cmp	r0, #0
 8016fb4:	d0e8      	beq.n	8016f88 <rcl_get_secure_root+0x24>
 8016fb6:	481f      	ldr	r0, [pc, #124]	; (8017034 <rcl_get_secure_root+0xd0>)
 8016fb8:	9503      	str	r5, [sp, #12]
 8016fba:	a903      	add	r1, sp, #12
 8016fbc:	f000 f9bc 	bl	8017338 <rcutils_get_env>
 8016fc0:	b160      	cbz	r0, 8016fdc <rcl_get_secure_root+0x78>
 8016fc2:	2600      	movs	r6, #0
 8016fc4:	6863      	ldr	r3, [r4, #4]
 8016fc6:	6921      	ldr	r1, [r4, #16]
 8016fc8:	4630      	mov	r0, r6
 8016fca:	4798      	blx	r3
 8016fcc:	4640      	mov	r0, r8
 8016fce:	6863      	ldr	r3, [r4, #4]
 8016fd0:	6921      	ldr	r1, [r4, #16]
 8016fd2:	4798      	blx	r3
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	b005      	add	sp, #20
 8016fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fdc:	9b03      	ldr	r3, [sp, #12]
 8016fde:	781e      	ldrb	r6, [r3, #0]
 8016fe0:	b1f6      	cbz	r6, 8017020 <rcl_get_secure_root+0xbc>
 8016fe2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016fe6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016fea:	4618      	mov	r0, r3
 8016fec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016ff0:	f000 fae4 	bl	80175bc <rcutils_strdup>
 8016ff4:	4606      	mov	r6, r0
 8016ff6:	2800      	cmp	r0, #0
 8016ff8:	d0e3      	beq.n	8016fc2 <rcl_get_secure_root+0x5e>
 8016ffa:	4622      	mov	r2, r4
 8016ffc:	4641      	mov	r1, r8
 8016ffe:	f7ff ff6f 	bl	8016ee0 <exact_match_lookup>
 8017002:	4605      	mov	r5, r0
 8017004:	2d00      	cmp	r5, #0
 8017006:	d0dd      	beq.n	8016fc4 <rcl_get_secure_root+0x60>
 8017008:	4628      	mov	r0, r5
 801700a:	f000 f9ad 	bl	8017368 <rcutils_is_directory>
 801700e:	4603      	mov	r3, r0
 8017010:	2800      	cmp	r0, #0
 8017012:	d1d7      	bne.n	8016fc4 <rcl_get_secure_root+0x60>
 8017014:	4628      	mov	r0, r5
 8017016:	6921      	ldr	r1, [r4, #16]
 8017018:	461d      	mov	r5, r3
 801701a:	6863      	ldr	r3, [r4, #4]
 801701c:	4798      	blx	r3
 801701e:	e7d1      	b.n	8016fc4 <rcl_get_secure_root+0x60>
 8017020:	4622      	mov	r2, r4
 8017022:	4638      	mov	r0, r7
 8017024:	4641      	mov	r1, r8
 8017026:	f7ff ff5b 	bl	8016ee0 <exact_match_lookup>
 801702a:	4605      	mov	r5, r0
 801702c:	e7ea      	b.n	8017004 <rcl_get_secure_root+0xa0>
 801702e:	bf00      	nop
 8017030:	0801d14c 	.word	0x0801d14c
 8017034:	0801d164 	.word	0x0801d164

08017038 <rcl_get_security_options_from_environment>:
 8017038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801703c:	b082      	sub	sp, #8
 801703e:	2300      	movs	r3, #0
 8017040:	4606      	mov	r6, r0
 8017042:	460f      	mov	r7, r1
 8017044:	4820      	ldr	r0, [pc, #128]	; (80170c8 <rcl_get_security_options_from_environment+0x90>)
 8017046:	9301      	str	r3, [sp, #4]
 8017048:	a901      	add	r1, sp, #4
 801704a:	4690      	mov	r8, r2
 801704c:	f000 f974 	bl	8017338 <rcutils_get_env>
 8017050:	b120      	cbz	r0, 801705c <rcl_get_security_options_from_environment+0x24>
 8017052:	2501      	movs	r5, #1
 8017054:	4628      	mov	r0, r5
 8017056:	b002      	add	sp, #8
 8017058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801705c:	491b      	ldr	r1, [pc, #108]	; (80170cc <rcl_get_security_options_from_environment+0x94>)
 801705e:	4604      	mov	r4, r0
 8017060:	9801      	ldr	r0, [sp, #4]
 8017062:	f7e9 f8b5 	bl	80001d0 <strcmp>
 8017066:	4605      	mov	r5, r0
 8017068:	b9e8      	cbnz	r0, 80170a6 <rcl_get_security_options_from_environment+0x6e>
 801706a:	9001      	str	r0, [sp, #4]
 801706c:	f1b8 0f00 	cmp.w	r8, #0
 8017070:	d020      	beq.n	80170b4 <rcl_get_security_options_from_environment+0x7c>
 8017072:	4817      	ldr	r0, [pc, #92]	; (80170d0 <rcl_get_security_options_from_environment+0x98>)
 8017074:	a901      	add	r1, sp, #4
 8017076:	f000 f95f 	bl	8017338 <rcutils_get_env>
 801707a:	2800      	cmp	r0, #0
 801707c:	d1e9      	bne.n	8017052 <rcl_get_security_options_from_environment+0x1a>
 801707e:	4915      	ldr	r1, [pc, #84]	; (80170d4 <rcl_get_security_options_from_environment+0x9c>)
 8017080:	9801      	ldr	r0, [sp, #4]
 8017082:	f7e9 f8a5 	bl	80001d0 <strcmp>
 8017086:	fab0 f080 	clz	r0, r0
 801708a:	0940      	lsrs	r0, r0, #5
 801708c:	f888 0000 	strb.w	r0, [r8]
 8017090:	4639      	mov	r1, r7
 8017092:	4630      	mov	r0, r6
 8017094:	f7ff ff66 	bl	8016f64 <rcl_get_secure_root>
 8017098:	b170      	cbz	r0, 80170b8 <rcl_get_security_options_from_environment+0x80>
 801709a:	f8c8 0004 	str.w	r0, [r8, #4]
 801709e:	4628      	mov	r0, r5
 80170a0:	b002      	add	sp, #8
 80170a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170a6:	4625      	mov	r5, r4
 80170a8:	4628      	mov	r0, r5
 80170aa:	f888 4000 	strb.w	r4, [r8]
 80170ae:	b002      	add	sp, #8
 80170b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170b4:	250b      	movs	r5, #11
 80170b6:	e7cd      	b.n	8017054 <rcl_get_security_options_from_environment+0x1c>
 80170b8:	f898 5000 	ldrb.w	r5, [r8]
 80170bc:	f1a5 0501 	sub.w	r5, r5, #1
 80170c0:	fab5 f585 	clz	r5, r5
 80170c4:	096d      	lsrs	r5, r5, #5
 80170c6:	e7c5      	b.n	8017054 <rcl_get_security_options_from_environment+0x1c>
 80170c8:	0801d104 	.word	0x0801d104
 80170cc:	0801d118 	.word	0x0801d118
 80170d0:	0801d120 	.word	0x0801d120
 80170d4:	0801d138 	.word	0x0801d138

080170d8 <rcl_get_system_time>:
 80170d8:	4608      	mov	r0, r1
 80170da:	f000 bbd9 	b.w	8017890 <rcutils_system_time_now>
 80170de:	bf00      	nop

080170e0 <rcl_get_steady_time>:
 80170e0:	4608      	mov	r0, r1
 80170e2:	f000 bbfd 	b.w	80178e0 <rcutils_steady_time_now>
 80170e6:	bf00      	nop

080170e8 <rcl_get_ros_time>:
 80170e8:	7a03      	ldrb	r3, [r0, #8]
 80170ea:	b510      	push	{r4, lr}
 80170ec:	460c      	mov	r4, r1
 80170ee:	b133      	cbz	r3, 80170fe <rcl_get_ros_time+0x16>
 80170f0:	2105      	movs	r1, #5
 80170f2:	f000 f8eb 	bl	80172cc <__atomic_load_8>
 80170f6:	e9c4 0100 	strd	r0, r1, [r4]
 80170fa:	2000      	movs	r0, #0
 80170fc:	bd10      	pop	{r4, pc}
 80170fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017102:	4608      	mov	r0, r1
 8017104:	f000 bbc4 	b.w	8017890 <rcutils_system_time_now>

08017108 <rcl_clock_init>:
 8017108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801710a:	4605      	mov	r5, r0
 801710c:	4610      	mov	r0, r2
 801710e:	4614      	mov	r4, r2
 8017110:	460e      	mov	r6, r1
 8017112:	f7f9 fc79 	bl	8010a08 <rcutils_allocator_is_valid>
 8017116:	b128      	cbz	r0, 8017124 <rcl_clock_init+0x1c>
 8017118:	2d03      	cmp	r5, #3
 801711a:	d803      	bhi.n	8017124 <rcl_clock_init+0x1c>
 801711c:	e8df f005 	tbb	[pc, r5]
 8017120:	06532e1d 	.word	0x06532e1d
 8017124:	f04f 0c0b 	mov.w	ip, #11
 8017128:	4660      	mov	r0, ip
 801712a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801712c:	2e00      	cmp	r6, #0
 801712e:	d0f9      	beq.n	8017124 <rcl_clock_init+0x1c>
 8017130:	2c00      	cmp	r4, #0
 8017132:	d0f7      	beq.n	8017124 <rcl_clock_init+0x1c>
 8017134:	2300      	movs	r3, #0
 8017136:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801713a:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 80171f0 <rcl_clock_init+0xe8>
 801713e:	6133      	str	r3, [r6, #16]
 8017140:	f106 0514 	add.w	r5, r6, #20
 8017144:	469c      	mov	ip, r3
 8017146:	2703      	movs	r7, #3
 8017148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801714a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801714c:	6823      	ldr	r3, [r4, #0]
 801714e:	602b      	str	r3, [r5, #0]
 8017150:	7037      	strb	r7, [r6, #0]
 8017152:	f8c6 e00c 	str.w	lr, [r6, #12]
 8017156:	4660      	mov	r0, ip
 8017158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801715a:	2e00      	cmp	r6, #0
 801715c:	d0e2      	beq.n	8017124 <rcl_clock_init+0x1c>
 801715e:	2300      	movs	r3, #0
 8017160:	7033      	strb	r3, [r6, #0]
 8017162:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017166:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801716a:	469c      	mov	ip, r3
 801716c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801716e:	f106 0514 	add.w	r5, r6, #20
 8017172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017174:	6823      	ldr	r3, [r4, #0]
 8017176:	602b      	str	r3, [r5, #0]
 8017178:	4660      	mov	r0, ip
 801717a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801717c:	2e00      	cmp	r6, #0
 801717e:	d0d1      	beq.n	8017124 <rcl_clock_init+0x1c>
 8017180:	2c00      	cmp	r4, #0
 8017182:	d0cf      	beq.n	8017124 <rcl_clock_init+0x1c>
 8017184:	2700      	movs	r7, #0
 8017186:	7037      	strb	r7, [r6, #0]
 8017188:	46a4      	mov	ip, r4
 801718a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801718e:	f106 0514 	add.w	r5, r6, #20
 8017192:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8017196:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801719a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801719c:	f8dc 3000 	ldr.w	r3, [ip]
 80171a0:	602b      	str	r3, [r5, #0]
 80171a2:	6921      	ldr	r1, [r4, #16]
 80171a4:	6823      	ldr	r3, [r4, #0]
 80171a6:	2010      	movs	r0, #16
 80171a8:	4798      	blx	r3
 80171aa:	6130      	str	r0, [r6, #16]
 80171ac:	b1d0      	cbz	r0, 80171e4 <rcl_clock_init+0xdc>
 80171ae:	2200      	movs	r2, #0
 80171b0:	2300      	movs	r3, #0
 80171b2:	e9c0 2300 	strd	r2, r3, [r0]
 80171b6:	2301      	movs	r3, #1
 80171b8:	7207      	strb	r7, [r0, #8]
 80171ba:	4a0c      	ldr	r2, [pc, #48]	; (80171ec <rcl_clock_init+0xe4>)
 80171bc:	7033      	strb	r3, [r6, #0]
 80171be:	46bc      	mov	ip, r7
 80171c0:	60f2      	str	r2, [r6, #12]
 80171c2:	4660      	mov	r0, ip
 80171c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171c6:	2e00      	cmp	r6, #0
 80171c8:	d0ac      	beq.n	8017124 <rcl_clock_init+0x1c>
 80171ca:	2c00      	cmp	r4, #0
 80171cc:	d0aa      	beq.n	8017124 <rcl_clock_init+0x1c>
 80171ce:	2300      	movs	r3, #0
 80171d0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80171d4:	f8df e01c 	ldr.w	lr, [pc, #28]	; 80171f4 <rcl_clock_init+0xec>
 80171d8:	6133      	str	r3, [r6, #16]
 80171da:	f106 0514 	add.w	r5, r6, #20
 80171de:	469c      	mov	ip, r3
 80171e0:	2702      	movs	r7, #2
 80171e2:	e7b1      	b.n	8017148 <rcl_clock_init+0x40>
 80171e4:	f04f 0c0a 	mov.w	ip, #10
 80171e8:	e79e      	b.n	8017128 <rcl_clock_init+0x20>
 80171ea:	bf00      	nop
 80171ec:	080170e9 	.word	0x080170e9
 80171f0:	080170e1 	.word	0x080170e1
 80171f4:	080170d9 	.word	0x080170d9

080171f8 <rcl_validate_enclave_name_with_size>:
 80171f8:	b378      	cbz	r0, 801725a <rcl_validate_enclave_name_with_size+0x62>
 80171fa:	b570      	push	{r4, r5, r6, lr}
 80171fc:	4615      	mov	r5, r2
 80171fe:	b0c2      	sub	sp, #264	; 0x108
 8017200:	b302      	cbz	r2, 8017244 <rcl_validate_enclave_name_with_size+0x4c>
 8017202:	461e      	mov	r6, r3
 8017204:	466a      	mov	r2, sp
 8017206:	ab01      	add	r3, sp, #4
 8017208:	460c      	mov	r4, r1
 801720a:	f000 fc2b 	bl	8017a64 <rmw_validate_namespace_with_size>
 801720e:	4684      	mov	ip, r0
 8017210:	b9e8      	cbnz	r0, 801724e <rcl_validate_enclave_name_with_size+0x56>
 8017212:	9b00      	ldr	r3, [sp, #0]
 8017214:	b923      	cbnz	r3, 8017220 <rcl_validate_enclave_name_with_size+0x28>
 8017216:	2300      	movs	r3, #0
 8017218:	602b      	str	r3, [r5, #0]
 801721a:	4660      	mov	r0, ip
 801721c:	b042      	add	sp, #264	; 0x108
 801721e:	bd70      	pop	{r4, r5, r6, pc}
 8017220:	2b07      	cmp	r3, #7
 8017222:	d007      	beq.n	8017234 <rcl_validate_enclave_name_with_size+0x3c>
 8017224:	1e5a      	subs	r2, r3, #1
 8017226:	2a05      	cmp	r2, #5
 8017228:	d833      	bhi.n	8017292 <rcl_validate_enclave_name_with_size+0x9a>
 801722a:	e8df f002 	tbb	[pc, r2]
 801722e:	2c2f      	.short	0x2c2f
 8017230:	1a232629 	.word	0x1a232629
 8017234:	2cff      	cmp	r4, #255	; 0xff
 8017236:	d9ee      	bls.n	8017216 <rcl_validate_enclave_name_with_size+0x1e>
 8017238:	602b      	str	r3, [r5, #0]
 801723a:	2e00      	cmp	r6, #0
 801723c:	d0ed      	beq.n	801721a <rcl_validate_enclave_name_with_size+0x22>
 801723e:	23fe      	movs	r3, #254	; 0xfe
 8017240:	6033      	str	r3, [r6, #0]
 8017242:	e7ea      	b.n	801721a <rcl_validate_enclave_name_with_size+0x22>
 8017244:	f04f 0c0b 	mov.w	ip, #11
 8017248:	4660      	mov	r0, ip
 801724a:	b042      	add	sp, #264	; 0x108
 801724c:	bd70      	pop	{r4, r5, r6, pc}
 801724e:	f7ff f953 	bl	80164f8 <rcl_convert_rmw_ret_to_rcl_ret>
 8017252:	4684      	mov	ip, r0
 8017254:	4660      	mov	r0, ip
 8017256:	b042      	add	sp, #264	; 0x108
 8017258:	bd70      	pop	{r4, r5, r6, pc}
 801725a:	f04f 0c0b 	mov.w	ip, #11
 801725e:	4660      	mov	r0, ip
 8017260:	4770      	bx	lr
 8017262:	2306      	movs	r3, #6
 8017264:	602b      	str	r3, [r5, #0]
 8017266:	2e00      	cmp	r6, #0
 8017268:	d0d7      	beq.n	801721a <rcl_validate_enclave_name_with_size+0x22>
 801726a:	9b01      	ldr	r3, [sp, #4]
 801726c:	6033      	str	r3, [r6, #0]
 801726e:	4660      	mov	r0, ip
 8017270:	b042      	add	sp, #264	; 0x108
 8017272:	bd70      	pop	{r4, r5, r6, pc}
 8017274:	2305      	movs	r3, #5
 8017276:	602b      	str	r3, [r5, #0]
 8017278:	e7f5      	b.n	8017266 <rcl_validate_enclave_name_with_size+0x6e>
 801727a:	2304      	movs	r3, #4
 801727c:	602b      	str	r3, [r5, #0]
 801727e:	e7f2      	b.n	8017266 <rcl_validate_enclave_name_with_size+0x6e>
 8017280:	2303      	movs	r3, #3
 8017282:	602b      	str	r3, [r5, #0]
 8017284:	e7ef      	b.n	8017266 <rcl_validate_enclave_name_with_size+0x6e>
 8017286:	2302      	movs	r3, #2
 8017288:	602b      	str	r3, [r5, #0]
 801728a:	e7ec      	b.n	8017266 <rcl_validate_enclave_name_with_size+0x6e>
 801728c:	2301      	movs	r3, #1
 801728e:	602b      	str	r3, [r5, #0]
 8017290:	e7e9      	b.n	8017266 <rcl_validate_enclave_name_with_size+0x6e>
 8017292:	4a04      	ldr	r2, [pc, #16]	; (80172a4 <rcl_validate_enclave_name_with_size+0xac>)
 8017294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017298:	a802      	add	r0, sp, #8
 801729a:	f000 f963 	bl	8017564 <rcutils_snprintf>
 801729e:	f04f 0c01 	mov.w	ip, #1
 80172a2:	e7ba      	b.n	801721a <rcl_validate_enclave_name_with_size+0x22>
 80172a4:	0801d184 	.word	0x0801d184

080172a8 <rcl_validate_enclave_name>:
 80172a8:	b168      	cbz	r0, 80172c6 <rcl_validate_enclave_name+0x1e>
 80172aa:	b570      	push	{r4, r5, r6, lr}
 80172ac:	460d      	mov	r5, r1
 80172ae:	4616      	mov	r6, r2
 80172b0:	4604      	mov	r4, r0
 80172b2:	f7e8 ff97 	bl	80001e4 <strlen>
 80172b6:	4633      	mov	r3, r6
 80172b8:	4601      	mov	r1, r0
 80172ba:	462a      	mov	r2, r5
 80172bc:	4620      	mov	r0, r4
 80172be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172c2:	f7ff bf99 	b.w	80171f8 <rcl_validate_enclave_name_with_size>
 80172c6:	200b      	movs	r0, #11
 80172c8:	4770      	bx	lr
 80172ca:	bf00      	nop

080172cc <__atomic_load_8>:
 80172cc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80172d0:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80172d4:	4a15      	ldr	r2, [pc, #84]	; (801732c <__atomic_load_8+0x60>)
 80172d6:	4b16      	ldr	r3, [pc, #88]	; (8017330 <__atomic_load_8+0x64>)
 80172d8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80172dc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80172e0:	fb02 f101 	mul.w	r1, r2, r1
 80172e4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80172e8:	fba3 2301 	umull	r2, r3, r3, r1
 80172ec:	091b      	lsrs	r3, r3, #4
 80172ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80172f2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80172f6:	b4d0      	push	{r4, r6, r7}
 80172f8:	4c0e      	ldr	r4, [pc, #56]	; (8017334 <__atomic_load_8+0x68>)
 80172fa:	1ac9      	subs	r1, r1, r3
 80172fc:	1862      	adds	r2, r4, r1
 80172fe:	f04f 0c01 	mov.w	ip, #1
 8017302:	e8d2 3f4f 	ldrexb	r3, [r2]
 8017306:	e8c2 cf46 	strexb	r6, ip, [r2]
 801730a:	2e00      	cmp	r6, #0
 801730c:	d1f9      	bne.n	8017302 <__atomic_load_8+0x36>
 801730e:	f3bf 8f5b 	dmb	ish
 8017312:	b2db      	uxtb	r3, r3
 8017314:	2b00      	cmp	r3, #0
 8017316:	d1f4      	bne.n	8017302 <__atomic_load_8+0x36>
 8017318:	e9d0 6700 	ldrd	r6, r7, [r0]
 801731c:	f3bf 8f5b 	dmb	ish
 8017320:	5463      	strb	r3, [r4, r1]
 8017322:	4630      	mov	r0, r6
 8017324:	4639      	mov	r1, r7
 8017326:	bcd0      	pop	{r4, r6, r7}
 8017328:	4770      	bx	lr
 801732a:	bf00      	nop
 801732c:	27d4eb2d 	.word	0x27d4eb2d
 8017330:	b21642c9 	.word	0xb21642c9
 8017334:	200161f0 	.word	0x200161f0

08017338 <rcutils_get_env>:
 8017338:	b168      	cbz	r0, 8017356 <rcutils_get_env+0x1e>
 801733a:	b510      	push	{r4, lr}
 801733c:	460c      	mov	r4, r1
 801733e:	b129      	cbz	r1, 801734c <rcutils_get_env+0x14>
 8017340:	f003 fe62 	bl	801b008 <getenv>
 8017344:	b120      	cbz	r0, 8017350 <rcutils_get_env+0x18>
 8017346:	6020      	str	r0, [r4, #0]
 8017348:	2000      	movs	r0, #0
 801734a:	bd10      	pop	{r4, pc}
 801734c:	4803      	ldr	r0, [pc, #12]	; (801735c <rcutils_get_env+0x24>)
 801734e:	bd10      	pop	{r4, pc}
 8017350:	4b03      	ldr	r3, [pc, #12]	; (8017360 <rcutils_get_env+0x28>)
 8017352:	6023      	str	r3, [r4, #0]
 8017354:	bd10      	pop	{r4, pc}
 8017356:	4803      	ldr	r0, [pc, #12]	; (8017364 <rcutils_get_env+0x2c>)
 8017358:	4770      	bx	lr
 801735a:	bf00      	nop
 801735c:	0801d200 	.word	0x0801d200
 8017360:	0801d7f0 	.word	0x0801d7f0
 8017364:	0801d1e4 	.word	0x0801d1e4

08017368 <rcutils_is_directory>:
 8017368:	2000      	movs	r0, #0
 801736a:	4770      	bx	lr

0801736c <rcutils_join_path>:
 801736c:	b082      	sub	sp, #8
 801736e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8017372:	2000      	movs	r0, #0
 8017374:	b002      	add	sp, #8
 8017376:	4770      	bx	lr

08017378 <rcutils_to_native_path>:
 8017378:	b084      	sub	sp, #16
 801737a:	a801      	add	r0, sp, #4
 801737c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8017380:	b004      	add	sp, #16
 8017382:	2000      	movs	r0, #0
 8017384:	4770      	bx	lr
 8017386:	bf00      	nop

08017388 <rcutils_format_string_limit>:
 8017388:	b40f      	push	{r0, r1, r2, r3}
 801738a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801738c:	b083      	sub	sp, #12
 801738e:	ac08      	add	r4, sp, #32
 8017390:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017392:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017396:	b34e      	cbz	r6, 80173ec <rcutils_format_string_limit+0x64>
 8017398:	a808      	add	r0, sp, #32
 801739a:	f7f9 fb35 	bl	8010a08 <rcutils_allocator_is_valid>
 801739e:	b328      	cbz	r0, 80173ec <rcutils_format_string_limit+0x64>
 80173a0:	2100      	movs	r1, #0
 80173a2:	ab0f      	add	r3, sp, #60	; 0x3c
 80173a4:	4632      	mov	r2, r6
 80173a6:	4608      	mov	r0, r1
 80173a8:	e9cd 3300 	strd	r3, r3, [sp]
 80173ac:	f000 f8f4 	bl	8017598 <rcutils_vsnprintf>
 80173b0:	1c43      	adds	r3, r0, #1
 80173b2:	4605      	mov	r5, r0
 80173b4:	d01a      	beq.n	80173ec <rcutils_format_string_limit+0x64>
 80173b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80173ba:	1c47      	adds	r7, r0, #1
 80173bc:	429f      	cmp	r7, r3
 80173be:	bf84      	itt	hi
 80173c0:	461f      	movhi	r7, r3
 80173c2:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 80173c6:	4638      	mov	r0, r7
 80173c8:	9b08      	ldr	r3, [sp, #32]
 80173ca:	4798      	blx	r3
 80173cc:	4604      	mov	r4, r0
 80173ce:	b168      	cbz	r0, 80173ec <rcutils_format_string_limit+0x64>
 80173d0:	9b01      	ldr	r3, [sp, #4]
 80173d2:	4632      	mov	r2, r6
 80173d4:	4639      	mov	r1, r7
 80173d6:	f000 f8df 	bl	8017598 <rcutils_vsnprintf>
 80173da:	2800      	cmp	r0, #0
 80173dc:	db02      	blt.n	80173e4 <rcutils_format_string_limit+0x5c>
 80173de:	2300      	movs	r3, #0
 80173e0:	5563      	strb	r3, [r4, r5]
 80173e2:	e004      	b.n	80173ee <rcutils_format_string_limit+0x66>
 80173e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80173e8:	4620      	mov	r0, r4
 80173ea:	4798      	blx	r3
 80173ec:	2400      	movs	r4, #0
 80173ee:	4620      	mov	r0, r4
 80173f0:	b003      	add	sp, #12
 80173f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80173f6:	b004      	add	sp, #16
 80173f8:	4770      	bx	lr
 80173fa:	bf00      	nop

080173fc <rcutils_repl_str>:
 80173fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017400:	ed2d 8b02 	vpush	{d8}
 8017404:	b087      	sub	sp, #28
 8017406:	4680      	mov	r8, r0
 8017408:	4608      	mov	r0, r1
 801740a:	f8cd 8004 	str.w	r8, [sp, #4]
 801740e:	ee08 2a10 	vmov	s16, r2
 8017412:	468a      	mov	sl, r1
 8017414:	4699      	mov	r9, r3
 8017416:	f7e8 fee5 	bl	80001e4 <strlen>
 801741a:	2600      	movs	r6, #0
 801741c:	4647      	mov	r7, r8
 801741e:	9002      	str	r0, [sp, #8]
 8017420:	46b3      	mov	fp, r6
 8017422:	2510      	movs	r5, #16
 8017424:	46b0      	mov	r8, r6
 8017426:	e01d      	b.n	8017464 <rcutils_repl_str+0x68>
 8017428:	f10b 0b01 	add.w	fp, fp, #1
 801742c:	455e      	cmp	r6, fp
 801742e:	d211      	bcs.n	8017454 <rcutils_repl_str+0x58>
 8017430:	442e      	add	r6, r5
 8017432:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017436:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801743a:	00b1      	lsls	r1, r6, #2
 801743c:	4798      	blx	r3
 801743e:	2800      	cmp	r0, #0
 8017440:	f000 8088 	beq.w	8017554 <rcutils_repl_str+0x158>
 8017444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017448:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801744c:	4680      	mov	r8, r0
 801744e:	bf28      	it	cs
 8017450:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8017454:	9a01      	ldr	r2, [sp, #4]
 8017456:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801745a:	1aa2      	subs	r2, r4, r2
 801745c:	f843 2c04 	str.w	r2, [r3, #-4]
 8017460:	9b02      	ldr	r3, [sp, #8]
 8017462:	18e7      	adds	r7, r4, r3
 8017464:	4651      	mov	r1, sl
 8017466:	4638      	mov	r0, r7
 8017468:	f004 f900 	bl	801b66c <strstr>
 801746c:	4604      	mov	r4, r0
 801746e:	4640      	mov	r0, r8
 8017470:	2c00      	cmp	r4, #0
 8017472:	d1d9      	bne.n	8017428 <rcutils_repl_str+0x2c>
 8017474:	46b8      	mov	r8, r7
 8017476:	4607      	mov	r7, r0
 8017478:	4640      	mov	r0, r8
 801747a:	f7e8 feb3 	bl	80001e4 <strlen>
 801747e:	9b01      	ldr	r3, [sp, #4]
 8017480:	eba8 0303 	sub.w	r3, r8, r3
 8017484:	181c      	adds	r4, r3, r0
 8017486:	9404      	str	r4, [sp, #16]
 8017488:	f1bb 0f00 	cmp.w	fp, #0
 801748c:	d04a      	beq.n	8017524 <rcutils_repl_str+0x128>
 801748e:	ee18 0a10 	vmov	r0, s16
 8017492:	f7e8 fea7 	bl	80001e4 <strlen>
 8017496:	9b02      	ldr	r3, [sp, #8]
 8017498:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801749c:	1ac3      	subs	r3, r0, r3
 801749e:	fb0b 4303 	mla	r3, fp, r3, r4
 80174a2:	461a      	mov	r2, r3
 80174a4:	9305      	str	r3, [sp, #20]
 80174a6:	4606      	mov	r6, r0
 80174a8:	f8d9 3000 	ldr.w	r3, [r9]
 80174ac:	1c50      	adds	r0, r2, #1
 80174ae:	4798      	blx	r3
 80174b0:	9003      	str	r0, [sp, #12]
 80174b2:	2800      	cmp	r0, #0
 80174b4:	d04f      	beq.n	8017556 <rcutils_repl_str+0x15a>
 80174b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80174ba:	683a      	ldr	r2, [r7, #0]
 80174bc:	4641      	mov	r1, r8
 80174be:	f003 fe23 	bl	801b108 <memcpy>
 80174c2:	683d      	ldr	r5, [r7, #0]
 80174c4:	9b03      	ldr	r3, [sp, #12]
 80174c6:	9701      	str	r7, [sp, #4]
 80174c8:	46ba      	mov	sl, r7
 80174ca:	441d      	add	r5, r3
 80174cc:	9f02      	ldr	r7, [sp, #8]
 80174ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80174d2:	2401      	movs	r4, #1
 80174d4:	46d1      	mov	r9, sl
 80174d6:	ee18 aa10 	vmov	sl, s16
 80174da:	e00a      	b.n	80174f2 <rcutils_repl_str+0xf6>
 80174dc:	f8d9 5000 	ldr.w	r5, [r9]
 80174e0:	1aaa      	subs	r2, r5, r2
 80174e2:	1885      	adds	r5, r0, r2
 80174e4:	f003 fe10 	bl	801b108 <memcpy>
 80174e8:	45a3      	cmp	fp, r4
 80174ea:	f104 0201 	add.w	r2, r4, #1
 80174ee:	d935      	bls.n	801755c <rcutils_repl_str+0x160>
 80174f0:	4614      	mov	r4, r2
 80174f2:	4632      	mov	r2, r6
 80174f4:	4651      	mov	r1, sl
 80174f6:	4628      	mov	r0, r5
 80174f8:	f003 fe06 	bl	801b108 <memcpy>
 80174fc:	f859 2b04 	ldr.w	r2, [r9], #4
 8017500:	45a3      	cmp	fp, r4
 8017502:	443a      	add	r2, r7
 8017504:	eb05 0006 	add.w	r0, r5, r6
 8017508:	eb08 0102 	add.w	r1, r8, r2
 801750c:	d1e6      	bne.n	80174dc <rcutils_repl_str+0xe0>
 801750e:	9b04      	ldr	r3, [sp, #16]
 8017510:	1a9a      	subs	r2, r3, r2
 8017512:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017516:	f003 fdf7 	bl	801b108 <memcpy>
 801751a:	9a03      	ldr	r2, [sp, #12]
 801751c:	9905      	ldr	r1, [sp, #20]
 801751e:	2300      	movs	r3, #0
 8017520:	5453      	strb	r3, [r2, r1]
 8017522:	e00b      	b.n	801753c <rcutils_repl_str+0x140>
 8017524:	4620      	mov	r0, r4
 8017526:	f8d9 3000 	ldr.w	r3, [r9]
 801752a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801752e:	3001      	adds	r0, #1
 8017530:	4798      	blx	r3
 8017532:	9003      	str	r0, [sp, #12]
 8017534:	b110      	cbz	r0, 801753c <rcutils_repl_str+0x140>
 8017536:	9901      	ldr	r1, [sp, #4]
 8017538:	f004 f87c 	bl	801b634 <strcpy>
 801753c:	4638      	mov	r0, r7
 801753e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017542:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017546:	4798      	blx	r3
 8017548:	9803      	ldr	r0, [sp, #12]
 801754a:	b007      	add	sp, #28
 801754c:	ecbd 8b02 	vpop	{d8}
 8017550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017554:	4647      	mov	r7, r8
 8017556:	2300      	movs	r3, #0
 8017558:	9303      	str	r3, [sp, #12]
 801755a:	e7ef      	b.n	801753c <rcutils_repl_str+0x140>
 801755c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017560:	e7db      	b.n	801751a <rcutils_repl_str+0x11e>
 8017562:	bf00      	nop

08017564 <rcutils_snprintf>:
 8017564:	b40c      	push	{r2, r3}
 8017566:	b530      	push	{r4, r5, lr}
 8017568:	b083      	sub	sp, #12
 801756a:	ab06      	add	r3, sp, #24
 801756c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017570:	9301      	str	r3, [sp, #4]
 8017572:	b152      	cbz	r2, 801758a <rcutils_snprintf+0x26>
 8017574:	b138      	cbz	r0, 8017586 <rcutils_snprintf+0x22>
 8017576:	b141      	cbz	r1, 801758a <rcutils_snprintf+0x26>
 8017578:	f004 f936 	bl	801b7e8 <vsniprintf>
 801757c:	b003      	add	sp, #12
 801757e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017582:	b002      	add	sp, #8
 8017584:	4770      	bx	lr
 8017586:	2900      	cmp	r1, #0
 8017588:	d0f6      	beq.n	8017578 <rcutils_snprintf+0x14>
 801758a:	f003 fbbf 	bl	801ad0c <__errno>
 801758e:	2316      	movs	r3, #22
 8017590:	6003      	str	r3, [r0, #0]
 8017592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017596:	e7f1      	b.n	801757c <rcutils_snprintf+0x18>

08017598 <rcutils_vsnprintf>:
 8017598:	b570      	push	{r4, r5, r6, lr}
 801759a:	b13a      	cbz	r2, 80175ac <rcutils_vsnprintf+0x14>
 801759c:	b120      	cbz	r0, 80175a8 <rcutils_vsnprintf+0x10>
 801759e:	b129      	cbz	r1, 80175ac <rcutils_vsnprintf+0x14>
 80175a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80175a4:	f004 b920 	b.w	801b7e8 <vsniprintf>
 80175a8:	2900      	cmp	r1, #0
 80175aa:	d0f9      	beq.n	80175a0 <rcutils_vsnprintf+0x8>
 80175ac:	f003 fbae 	bl	801ad0c <__errno>
 80175b0:	2316      	movs	r3, #22
 80175b2:	6003      	str	r3, [r0, #0]
 80175b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80175b8:	bd70      	pop	{r4, r5, r6, pc}
 80175ba:	bf00      	nop

080175bc <rcutils_strdup>:
 80175bc:	b084      	sub	sp, #16
 80175be:	b570      	push	{r4, r5, r6, lr}
 80175c0:	b082      	sub	sp, #8
 80175c2:	ac07      	add	r4, sp, #28
 80175c4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80175c8:	4605      	mov	r5, r0
 80175ca:	b1b0      	cbz	r0, 80175fa <rcutils_strdup+0x3e>
 80175cc:	f7e8 fe0a 	bl	80001e4 <strlen>
 80175d0:	1c42      	adds	r2, r0, #1
 80175d2:	9b07      	ldr	r3, [sp, #28]
 80175d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80175d6:	9201      	str	r2, [sp, #4]
 80175d8:	4606      	mov	r6, r0
 80175da:	4610      	mov	r0, r2
 80175dc:	4798      	blx	r3
 80175de:	4604      	mov	r4, r0
 80175e0:	b128      	cbz	r0, 80175ee <rcutils_strdup+0x32>
 80175e2:	9a01      	ldr	r2, [sp, #4]
 80175e4:	4629      	mov	r1, r5
 80175e6:	f003 fd8f 	bl	801b108 <memcpy>
 80175ea:	2300      	movs	r3, #0
 80175ec:	55a3      	strb	r3, [r4, r6]
 80175ee:	4620      	mov	r0, r4
 80175f0:	b002      	add	sp, #8
 80175f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80175f6:	b004      	add	sp, #16
 80175f8:	4770      	bx	lr
 80175fa:	4604      	mov	r4, r0
 80175fc:	e7f7      	b.n	80175ee <rcutils_strdup+0x32>
 80175fe:	bf00      	nop

08017600 <rcutils_strndup>:
 8017600:	b082      	sub	sp, #8
 8017602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017604:	ac06      	add	r4, sp, #24
 8017606:	e884 000c 	stmia.w	r4, {r2, r3}
 801760a:	4605      	mov	r5, r0
 801760c:	b188      	cbz	r0, 8017632 <rcutils_strndup+0x32>
 801760e:	1c4f      	adds	r7, r1, #1
 8017610:	460e      	mov	r6, r1
 8017612:	4638      	mov	r0, r7
 8017614:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017616:	4790      	blx	r2
 8017618:	4604      	mov	r4, r0
 801761a:	b128      	cbz	r0, 8017628 <rcutils_strndup+0x28>
 801761c:	463a      	mov	r2, r7
 801761e:	4629      	mov	r1, r5
 8017620:	f003 fd72 	bl	801b108 <memcpy>
 8017624:	2300      	movs	r3, #0
 8017626:	55a3      	strb	r3, [r4, r6]
 8017628:	4620      	mov	r0, r4
 801762a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801762e:	b002      	add	sp, #8
 8017630:	4770      	bx	lr
 8017632:	4604      	mov	r4, r0
 8017634:	e7f8      	b.n	8017628 <rcutils_strndup+0x28>
 8017636:	bf00      	nop

08017638 <rcutils_get_zero_initialized_string_map>:
 8017638:	4b01      	ldr	r3, [pc, #4]	; (8017640 <rcutils_get_zero_initialized_string_map+0x8>)
 801763a:	2000      	movs	r0, #0
 801763c:	6018      	str	r0, [r3, #0]
 801763e:	4770      	bx	lr
 8017640:	20016208 	.word	0x20016208

08017644 <rcutils_string_map_reserve>:
 8017644:	2800      	cmp	r0, #0
 8017646:	d05f      	beq.n	8017708 <rcutils_string_map_reserve+0xc4>
 8017648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801764c:	460c      	mov	r4, r1
 801764e:	6801      	ldr	r1, [r0, #0]
 8017650:	b082      	sub	sp, #8
 8017652:	4605      	mov	r5, r0
 8017654:	b129      	cbz	r1, 8017662 <rcutils_string_map_reserve+0x1e>
 8017656:	68cb      	ldr	r3, [r1, #12]
 8017658:	42a3      	cmp	r3, r4
 801765a:	d906      	bls.n	801766a <rcutils_string_map_reserve+0x26>
 801765c:	461c      	mov	r4, r3
 801765e:	2900      	cmp	r1, #0
 8017660:	d1f9      	bne.n	8017656 <rcutils_string_map_reserve+0x12>
 8017662:	201f      	movs	r0, #31
 8017664:	b002      	add	sp, #8
 8017666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801766a:	688b      	ldr	r3, [r1, #8]
 801766c:	42a3      	cmp	r3, r4
 801766e:	d047      	beq.n	8017700 <rcutils_string_map_reserve+0xbc>
 8017670:	6a0e      	ldr	r6, [r1, #32]
 8017672:	2c00      	cmp	r4, #0
 8017674:	d034      	beq.n	80176e0 <rcutils_string_map_reserve+0x9c>
 8017676:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801767a:	d243      	bcs.n	8017704 <rcutils_string_map_reserve+0xc0>
 801767c:	00a7      	lsls	r7, r4, #2
 801767e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8017682:	6808      	ldr	r0, [r1, #0]
 8017684:	4632      	mov	r2, r6
 8017686:	4639      	mov	r1, r7
 8017688:	47c0      	blx	r8
 801768a:	2800      	cmp	r0, #0
 801768c:	d03a      	beq.n	8017704 <rcutils_string_map_reserve+0xc0>
 801768e:	682b      	ldr	r3, [r5, #0]
 8017690:	4632      	mov	r2, r6
 8017692:	6018      	str	r0, [r3, #0]
 8017694:	4639      	mov	r1, r7
 8017696:	6858      	ldr	r0, [r3, #4]
 8017698:	47c0      	blx	r8
 801769a:	2800      	cmp	r0, #0
 801769c:	d032      	beq.n	8017704 <rcutils_string_map_reserve+0xc0>
 801769e:	682d      	ldr	r5, [r5, #0]
 80176a0:	68ab      	ldr	r3, [r5, #8]
 80176a2:	6068      	str	r0, [r5, #4]
 80176a4:	42a3      	cmp	r3, r4
 80176a6:	d226      	bcs.n	80176f6 <rcutils_string_map_reserve+0xb2>
 80176a8:	682a      	ldr	r2, [r5, #0]
 80176aa:	eb00 0c07 	add.w	ip, r0, r7
 80176ae:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80176b2:	45e6      	cmp	lr, ip
 80176b4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80176b8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80176bc:	d203      	bcs.n	80176c6 <rcutils_string_map_reserve+0x82>
 80176be:	eb02 0c07 	add.w	ip, r2, r7
 80176c2:	4566      	cmp	r6, ip
 80176c4:	d322      	bcc.n	801770c <rcutils_string_map_reserve+0xc8>
 80176c6:	1ae3      	subs	r3, r4, r3
 80176c8:	009a      	lsls	r2, r3, #2
 80176ca:	4670      	mov	r0, lr
 80176cc:	2100      	movs	r1, #0
 80176ce:	9201      	str	r2, [sp, #4]
 80176d0:	f003 fd28 	bl	801b124 <memset>
 80176d4:	9a01      	ldr	r2, [sp, #4]
 80176d6:	2100      	movs	r1, #0
 80176d8:	4630      	mov	r0, r6
 80176da:	f003 fd23 	bl	801b124 <memset>
 80176de:	e00a      	b.n	80176f6 <rcutils_string_map_reserve+0xb2>
 80176e0:	694f      	ldr	r7, [r1, #20]
 80176e2:	6808      	ldr	r0, [r1, #0]
 80176e4:	4631      	mov	r1, r6
 80176e6:	47b8      	blx	r7
 80176e8:	682b      	ldr	r3, [r5, #0]
 80176ea:	4631      	mov	r1, r6
 80176ec:	6858      	ldr	r0, [r3, #4]
 80176ee:	601c      	str	r4, [r3, #0]
 80176f0:	47b8      	blx	r7
 80176f2:	682d      	ldr	r5, [r5, #0]
 80176f4:	606c      	str	r4, [r5, #4]
 80176f6:	2000      	movs	r0, #0
 80176f8:	60ac      	str	r4, [r5, #8]
 80176fa:	b002      	add	sp, #8
 80176fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017700:	2000      	movs	r0, #0
 8017702:	e7af      	b.n	8017664 <rcutils_string_map_reserve+0x20>
 8017704:	200a      	movs	r0, #10
 8017706:	e7ad      	b.n	8017664 <rcutils_string_map_reserve+0x20>
 8017708:	200b      	movs	r0, #11
 801770a:	4770      	bx	lr
 801770c:	1f0b      	subs	r3, r1, #4
 801770e:	4418      	add	r0, r3
 8017710:	4413      	add	r3, r2
 8017712:	3a04      	subs	r2, #4
 8017714:	4417      	add	r7, r2
 8017716:	2200      	movs	r2, #0
 8017718:	f843 2f04 	str.w	r2, [r3, #4]!
 801771c:	42bb      	cmp	r3, r7
 801771e:	f840 2f04 	str.w	r2, [r0, #4]!
 8017722:	d1f9      	bne.n	8017718 <rcutils_string_map_reserve+0xd4>
 8017724:	e7e7      	b.n	80176f6 <rcutils_string_map_reserve+0xb2>
 8017726:	bf00      	nop

08017728 <rcutils_string_map_init>:
 8017728:	b082      	sub	sp, #8
 801772a:	b570      	push	{r4, r5, r6, lr}
 801772c:	ac04      	add	r4, sp, #16
 801772e:	e884 000c 	stmia.w	r4, {r2, r3}
 8017732:	b380      	cbz	r0, 8017796 <rcutils_string_map_init+0x6e>
 8017734:	6806      	ldr	r6, [r0, #0]
 8017736:	4604      	mov	r4, r0
 8017738:	b12e      	cbz	r6, 8017746 <rcutils_string_map_init+0x1e>
 801773a:	251e      	movs	r5, #30
 801773c:	4628      	mov	r0, r5
 801773e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017742:	b002      	add	sp, #8
 8017744:	4770      	bx	lr
 8017746:	a804      	add	r0, sp, #16
 8017748:	460d      	mov	r5, r1
 801774a:	f7f9 f95d 	bl	8010a08 <rcutils_allocator_is_valid>
 801774e:	b310      	cbz	r0, 8017796 <rcutils_string_map_init+0x6e>
 8017750:	9b04      	ldr	r3, [sp, #16]
 8017752:	9908      	ldr	r1, [sp, #32]
 8017754:	2024      	movs	r0, #36	; 0x24
 8017756:	4798      	blx	r3
 8017758:	6020      	str	r0, [r4, #0]
 801775a:	b310      	cbz	r0, 80177a2 <rcutils_string_map_init+0x7a>
 801775c:	f10d 0e10 	add.w	lr, sp, #16
 8017760:	e9c0 6600 	strd	r6, r6, [r0]
 8017764:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8017768:	f100 0c10 	add.w	ip, r0, #16
 801776c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017770:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017774:	f8de 3000 	ldr.w	r3, [lr]
 8017778:	f8cc 3000 	str.w	r3, [ip]
 801777c:	4629      	mov	r1, r5
 801777e:	4620      	mov	r0, r4
 8017780:	f7ff ff60 	bl	8017644 <rcutils_string_map_reserve>
 8017784:	4605      	mov	r5, r0
 8017786:	2800      	cmp	r0, #0
 8017788:	d0d8      	beq.n	801773c <rcutils_string_map_init+0x14>
 801778a:	9b05      	ldr	r3, [sp, #20]
 801778c:	9908      	ldr	r1, [sp, #32]
 801778e:	6820      	ldr	r0, [r4, #0]
 8017790:	4798      	blx	r3
 8017792:	6026      	str	r6, [r4, #0]
 8017794:	e7d2      	b.n	801773c <rcutils_string_map_init+0x14>
 8017796:	250b      	movs	r5, #11
 8017798:	4628      	mov	r0, r5
 801779a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801779e:	b002      	add	sp, #8
 80177a0:	4770      	bx	lr
 80177a2:	250a      	movs	r5, #10
 80177a4:	e7ca      	b.n	801773c <rcutils_string_map_init+0x14>
 80177a6:	bf00      	nop

080177a8 <rcutils_string_map_fini>:
 80177a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177ac:	b082      	sub	sp, #8
 80177ae:	2800      	cmp	r0, #0
 80177b0:	d03a      	beq.n	8017828 <rcutils_string_map_fini+0x80>
 80177b2:	6804      	ldr	r4, [r0, #0]
 80177b4:	4606      	mov	r6, r0
 80177b6:	2c00      	cmp	r4, #0
 80177b8:	d032      	beq.n	8017820 <rcutils_string_map_fini+0x78>
 80177ba:	68a3      	ldr	r3, [r4, #8]
 80177bc:	b32b      	cbz	r3, 801780a <rcutils_string_map_fini+0x62>
 80177be:	2500      	movs	r5, #0
 80177c0:	6822      	ldr	r2, [r4, #0]
 80177c2:	462f      	mov	r7, r5
 80177c4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80177c8:	b1e0      	cbz	r0, 8017804 <rcutils_string_map_fini+0x5c>
 80177ca:	6a21      	ldr	r1, [r4, #32]
 80177cc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80177d0:	9101      	str	r1, [sp, #4]
 80177d2:	47c0      	blx	r8
 80177d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80177d8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80177dc:	9901      	ldr	r1, [sp, #4]
 80177de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80177e2:	47c0      	blx	r8
 80177e4:	68e3      	ldr	r3, [r4, #12]
 80177e6:	6862      	ldr	r2, [r4, #4]
 80177e8:	3b01      	subs	r3, #1
 80177ea:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80177ee:	60e3      	str	r3, [r4, #12]
 80177f0:	6834      	ldr	r4, [r6, #0]
 80177f2:	68a3      	ldr	r3, [r4, #8]
 80177f4:	3501      	adds	r5, #1
 80177f6:	429d      	cmp	r5, r3
 80177f8:	d207      	bcs.n	801780a <rcutils_string_map_fini+0x62>
 80177fa:	6822      	ldr	r2, [r4, #0]
 80177fc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017800:	2800      	cmp	r0, #0
 8017802:	d1e2      	bne.n	80177ca <rcutils_string_map_fini+0x22>
 8017804:	3501      	adds	r5, #1
 8017806:	429d      	cmp	r5, r3
 8017808:	d3dc      	bcc.n	80177c4 <rcutils_string_map_fini+0x1c>
 801780a:	2100      	movs	r1, #0
 801780c:	4630      	mov	r0, r6
 801780e:	f7ff ff19 	bl	8017644 <rcutils_string_map_reserve>
 8017812:	4604      	mov	r4, r0
 8017814:	b920      	cbnz	r0, 8017820 <rcutils_string_map_fini+0x78>
 8017816:	6830      	ldr	r0, [r6, #0]
 8017818:	6943      	ldr	r3, [r0, #20]
 801781a:	6a01      	ldr	r1, [r0, #32]
 801781c:	4798      	blx	r3
 801781e:	6034      	str	r4, [r6, #0]
 8017820:	4620      	mov	r0, r4
 8017822:	b002      	add	sp, #8
 8017824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017828:	240b      	movs	r4, #11
 801782a:	4620      	mov	r0, r4
 801782c:	b002      	add	sp, #8
 801782e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017832:	bf00      	nop

08017834 <rcutils_string_map_getn>:
 8017834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017838:	b300      	cbz	r0, 801787c <rcutils_string_map_getn+0x48>
 801783a:	6807      	ldr	r7, [r0, #0]
 801783c:	b1ff      	cbz	r7, 801787e <rcutils_string_map_getn+0x4a>
 801783e:	4688      	mov	r8, r1
 8017840:	b1e1      	cbz	r1, 801787c <rcutils_string_map_getn+0x48>
 8017842:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8017846:	683e      	ldr	r6, [r7, #0]
 8017848:	f1ba 0f00 	cmp.w	sl, #0
 801784c:	d016      	beq.n	801787c <rcutils_string_map_getn+0x48>
 801784e:	4691      	mov	r9, r2
 8017850:	3e04      	subs	r6, #4
 8017852:	2400      	movs	r4, #0
 8017854:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8017858:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801785c:	4628      	mov	r0, r5
 801785e:	3401      	adds	r4, #1
 8017860:	b155      	cbz	r5, 8017878 <rcutils_string_map_getn+0x44>
 8017862:	f7e8 fcbf 	bl	80001e4 <strlen>
 8017866:	4548      	cmp	r0, r9
 8017868:	4602      	mov	r2, r0
 801786a:	4629      	mov	r1, r5
 801786c:	bf38      	it	cc
 801786e:	464a      	movcc	r2, r9
 8017870:	4640      	mov	r0, r8
 8017872:	f003 fee7 	bl	801b644 <strncmp>
 8017876:	b128      	cbz	r0, 8017884 <rcutils_string_map_getn+0x50>
 8017878:	45a2      	cmp	sl, r4
 801787a:	d1eb      	bne.n	8017854 <rcutils_string_map_getn+0x20>
 801787c:	2700      	movs	r7, #0
 801787e:	4638      	mov	r0, r7
 8017880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	f853 700b 	ldr.w	r7, [r3, fp]
 801788a:	4638      	mov	r0, r7
 801788c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017890 <rcutils_system_time_now>:
 8017890:	b308      	cbz	r0, 80178d6 <rcutils_system_time_now+0x46>
 8017892:	b570      	push	{r4, r5, r6, lr}
 8017894:	b084      	sub	sp, #16
 8017896:	4604      	mov	r4, r0
 8017898:	4669      	mov	r1, sp
 801789a:	2001      	movs	r0, #1
 801789c:	f7ea fbf4 	bl	8002088 <clock_gettime>
 80178a0:	e9dd 3500 	ldrd	r3, r5, [sp]
 80178a4:	2d00      	cmp	r5, #0
 80178a6:	db13      	blt.n	80178d0 <rcutils_system_time_now+0x40>
 80178a8:	9902      	ldr	r1, [sp, #8]
 80178aa:	2900      	cmp	r1, #0
 80178ac:	db0d      	blt.n	80178ca <rcutils_system_time_now+0x3a>
 80178ae:	4e0b      	ldr	r6, [pc, #44]	; (80178dc <rcutils_system_time_now+0x4c>)
 80178b0:	fba3 3206 	umull	r3, r2, r3, r6
 80178b4:	185b      	adds	r3, r3, r1
 80178b6:	fb06 2205 	mla	r2, r6, r5, r2
 80178ba:	f04f 0000 	mov.w	r0, #0
 80178be:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80178c2:	e9c4 3200 	strd	r3, r2, [r4]
 80178c6:	b004      	add	sp, #16
 80178c8:	bd70      	pop	{r4, r5, r6, pc}
 80178ca:	ea53 0205 	orrs.w	r2, r3, r5
 80178ce:	d1ee      	bne.n	80178ae <rcutils_system_time_now+0x1e>
 80178d0:	2002      	movs	r0, #2
 80178d2:	b004      	add	sp, #16
 80178d4:	bd70      	pop	{r4, r5, r6, pc}
 80178d6:	200b      	movs	r0, #11
 80178d8:	4770      	bx	lr
 80178da:	bf00      	nop
 80178dc:	3b9aca00 	.word	0x3b9aca00

080178e0 <rcutils_steady_time_now>:
 80178e0:	b308      	cbz	r0, 8017926 <rcutils_steady_time_now+0x46>
 80178e2:	b570      	push	{r4, r5, r6, lr}
 80178e4:	b084      	sub	sp, #16
 80178e6:	4604      	mov	r4, r0
 80178e8:	4669      	mov	r1, sp
 80178ea:	2000      	movs	r0, #0
 80178ec:	f7ea fbcc 	bl	8002088 <clock_gettime>
 80178f0:	e9dd 3500 	ldrd	r3, r5, [sp]
 80178f4:	2d00      	cmp	r5, #0
 80178f6:	db13      	blt.n	8017920 <rcutils_steady_time_now+0x40>
 80178f8:	9902      	ldr	r1, [sp, #8]
 80178fa:	2900      	cmp	r1, #0
 80178fc:	db0d      	blt.n	801791a <rcutils_steady_time_now+0x3a>
 80178fe:	4e0b      	ldr	r6, [pc, #44]	; (801792c <rcutils_steady_time_now+0x4c>)
 8017900:	fba3 3206 	umull	r3, r2, r3, r6
 8017904:	185b      	adds	r3, r3, r1
 8017906:	fb06 2205 	mla	r2, r6, r5, r2
 801790a:	f04f 0000 	mov.w	r0, #0
 801790e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8017912:	e9c4 3200 	strd	r3, r2, [r4]
 8017916:	b004      	add	sp, #16
 8017918:	bd70      	pop	{r4, r5, r6, pc}
 801791a:	ea53 0205 	orrs.w	r2, r3, r5
 801791e:	d1ee      	bne.n	80178fe <rcutils_steady_time_now+0x1e>
 8017920:	2002      	movs	r0, #2
 8017922:	b004      	add	sp, #16
 8017924:	bd70      	pop	{r4, r5, r6, pc}
 8017926:	200b      	movs	r0, #11
 8017928:	4770      	bx	lr
 801792a:	bf00      	nop
 801792c:	3b9aca00 	.word	0x3b9aca00

08017930 <rmw_get_zero_initialized_context>:
 8017930:	b510      	push	{r4, lr}
 8017932:	4604      	mov	r4, r0
 8017934:	3010      	adds	r0, #16
 8017936:	f000 f80b 	bl	8017950 <rmw_get_zero_initialized_init_options>
 801793a:	2300      	movs	r3, #0
 801793c:	2000      	movs	r0, #0
 801793e:	2100      	movs	r1, #0
 8017940:	e9c4 0100 	strd	r0, r1, [r4]
 8017944:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017948:	60a3      	str	r3, [r4, #8]
 801794a:	4620      	mov	r0, r4
 801794c:	bd10      	pop	{r4, pc}
 801794e:	bf00      	nop

08017950 <rmw_get_zero_initialized_init_options>:
 8017950:	b510      	push	{r4, lr}
 8017952:	2238      	movs	r2, #56	; 0x38
 8017954:	4604      	mov	r4, r0
 8017956:	2100      	movs	r1, #0
 8017958:	f003 fbe4 	bl	801b124 <memset>
 801795c:	f104 0010 	add.w	r0, r4, #16
 8017960:	f000 f806 	bl	8017970 <rmw_get_default_security_options>
 8017964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017968:	60e3      	str	r3, [r4, #12]
 801796a:	4620      	mov	r0, r4
 801796c:	bd10      	pop	{r4, pc}
 801796e:	bf00      	nop

08017970 <rmw_get_default_security_options>:
 8017970:	2200      	movs	r2, #0
 8017972:	7002      	strb	r2, [r0, #0]
 8017974:	6042      	str	r2, [r0, #4]
 8017976:	4770      	bx	lr

08017978 <rmw_validate_full_topic_name>:
 8017978:	2800      	cmp	r0, #0
 801797a:	d057      	beq.n	8017a2c <rmw_validate_full_topic_name+0xb4>
 801797c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017980:	460d      	mov	r5, r1
 8017982:	2900      	cmp	r1, #0
 8017984:	d054      	beq.n	8017a30 <rmw_validate_full_topic_name+0xb8>
 8017986:	4616      	mov	r6, r2
 8017988:	4604      	mov	r4, r0
 801798a:	f7e8 fc2b 	bl	80001e4 <strlen>
 801798e:	b148      	cbz	r0, 80179a4 <rmw_validate_full_topic_name+0x2c>
 8017990:	7823      	ldrb	r3, [r4, #0]
 8017992:	2b2f      	cmp	r3, #47	; 0x2f
 8017994:	d00d      	beq.n	80179b2 <rmw_validate_full_topic_name+0x3a>
 8017996:	2302      	movs	r3, #2
 8017998:	602b      	str	r3, [r5, #0]
 801799a:	b13e      	cbz	r6, 80179ac <rmw_validate_full_topic_name+0x34>
 801799c:	2000      	movs	r0, #0
 801799e:	6030      	str	r0, [r6, #0]
 80179a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179a4:	2301      	movs	r3, #1
 80179a6:	602b      	str	r3, [r5, #0]
 80179a8:	2e00      	cmp	r6, #0
 80179aa:	d1f7      	bne.n	801799c <rmw_validate_full_topic_name+0x24>
 80179ac:	2000      	movs	r0, #0
 80179ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179b2:	1e43      	subs	r3, r0, #1
 80179b4:	5ce2      	ldrb	r2, [r4, r3]
 80179b6:	2a2f      	cmp	r2, #47	; 0x2f
 80179b8:	d03c      	beq.n	8017a34 <rmw_validate_full_topic_name+0xbc>
 80179ba:	1e63      	subs	r3, r4, #1
 80179bc:	eb03 0800 	add.w	r8, r3, r0
 80179c0:	f1c4 0e01 	rsb	lr, r4, #1
 80179c4:	eb0e 0703 	add.w	r7, lr, r3
 80179c8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80179cc:	f021 0220 	bic.w	r2, r1, #32
 80179d0:	3a41      	subs	r2, #65	; 0x41
 80179d2:	2a19      	cmp	r2, #25
 80179d4:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 80179d8:	d90b      	bls.n	80179f2 <rmw_validate_full_topic_name+0x7a>
 80179da:	295f      	cmp	r1, #95	; 0x5f
 80179dc:	d009      	beq.n	80179f2 <rmw_validate_full_topic_name+0x7a>
 80179de:	f1bc 0f0a 	cmp.w	ip, #10
 80179e2:	d906      	bls.n	80179f2 <rmw_validate_full_topic_name+0x7a>
 80179e4:	2304      	movs	r3, #4
 80179e6:	602b      	str	r3, [r5, #0]
 80179e8:	2e00      	cmp	r6, #0
 80179ea:	d0df      	beq.n	80179ac <rmw_validate_full_topic_name+0x34>
 80179ec:	6037      	str	r7, [r6, #0]
 80179ee:	2000      	movs	r0, #0
 80179f0:	e7d6      	b.n	80179a0 <rmw_validate_full_topic_name+0x28>
 80179f2:	4543      	cmp	r3, r8
 80179f4:	d1e6      	bne.n	80179c4 <rmw_validate_full_topic_name+0x4c>
 80179f6:	4f1a      	ldr	r7, [pc, #104]	; (8017a60 <rmw_validate_full_topic_name+0xe8>)
 80179f8:	2301      	movs	r3, #1
 80179fa:	e004      	b.n	8017a06 <rmw_validate_full_topic_name+0x8e>
 80179fc:	4298      	cmp	r0, r3
 80179fe:	f104 0401 	add.w	r4, r4, #1
 8017a02:	d91c      	bls.n	8017a3e <rmw_validate_full_topic_name+0xc6>
 8017a04:	4613      	mov	r3, r2
 8017a06:	4298      	cmp	r0, r3
 8017a08:	f103 0201 	add.w	r2, r3, #1
 8017a0c:	d0f6      	beq.n	80179fc <rmw_validate_full_topic_name+0x84>
 8017a0e:	7821      	ldrb	r1, [r4, #0]
 8017a10:	292f      	cmp	r1, #47	; 0x2f
 8017a12:	d1f3      	bne.n	80179fc <rmw_validate_full_topic_name+0x84>
 8017a14:	7861      	ldrb	r1, [r4, #1]
 8017a16:	292f      	cmp	r1, #47	; 0x2f
 8017a18:	d01c      	beq.n	8017a54 <rmw_validate_full_topic_name+0xdc>
 8017a1a:	5dc9      	ldrb	r1, [r1, r7]
 8017a1c:	0749      	lsls	r1, r1, #29
 8017a1e:	d5ed      	bpl.n	80179fc <rmw_validate_full_topic_name+0x84>
 8017a20:	2206      	movs	r2, #6
 8017a22:	602a      	str	r2, [r5, #0]
 8017a24:	2e00      	cmp	r6, #0
 8017a26:	d0c1      	beq.n	80179ac <rmw_validate_full_topic_name+0x34>
 8017a28:	6033      	str	r3, [r6, #0]
 8017a2a:	e7bf      	b.n	80179ac <rmw_validate_full_topic_name+0x34>
 8017a2c:	200b      	movs	r0, #11
 8017a2e:	4770      	bx	lr
 8017a30:	200b      	movs	r0, #11
 8017a32:	e7b5      	b.n	80179a0 <rmw_validate_full_topic_name+0x28>
 8017a34:	2203      	movs	r2, #3
 8017a36:	602a      	str	r2, [r5, #0]
 8017a38:	2e00      	cmp	r6, #0
 8017a3a:	d1f5      	bne.n	8017a28 <rmw_validate_full_topic_name+0xb0>
 8017a3c:	e7b6      	b.n	80179ac <rmw_validate_full_topic_name+0x34>
 8017a3e:	28f7      	cmp	r0, #247	; 0xf7
 8017a40:	d802      	bhi.n	8017a48 <rmw_validate_full_topic_name+0xd0>
 8017a42:	2000      	movs	r0, #0
 8017a44:	6028      	str	r0, [r5, #0]
 8017a46:	e7ab      	b.n	80179a0 <rmw_validate_full_topic_name+0x28>
 8017a48:	2307      	movs	r3, #7
 8017a4a:	602b      	str	r3, [r5, #0]
 8017a4c:	2e00      	cmp	r6, #0
 8017a4e:	d0ad      	beq.n	80179ac <rmw_validate_full_topic_name+0x34>
 8017a50:	23f6      	movs	r3, #246	; 0xf6
 8017a52:	e7e9      	b.n	8017a28 <rmw_validate_full_topic_name+0xb0>
 8017a54:	2205      	movs	r2, #5
 8017a56:	602a      	str	r2, [r5, #0]
 8017a58:	2e00      	cmp	r6, #0
 8017a5a:	d1e5      	bne.n	8017a28 <rmw_validate_full_topic_name+0xb0>
 8017a5c:	e7a6      	b.n	80179ac <rmw_validate_full_topic_name+0x34>
 8017a5e:	bf00      	nop
 8017a60:	0801d897 	.word	0x0801d897

08017a64 <rmw_validate_namespace_with_size>:
 8017a64:	b340      	cbz	r0, 8017ab8 <rmw_validate_namespace_with_size+0x54>
 8017a66:	b570      	push	{r4, r5, r6, lr}
 8017a68:	4614      	mov	r4, r2
 8017a6a:	b0c2      	sub	sp, #264	; 0x108
 8017a6c:	b332      	cbz	r2, 8017abc <rmw_validate_namespace_with_size+0x58>
 8017a6e:	2901      	cmp	r1, #1
 8017a70:	460d      	mov	r5, r1
 8017a72:	461e      	mov	r6, r3
 8017a74:	d102      	bne.n	8017a7c <rmw_validate_namespace_with_size+0x18>
 8017a76:	7803      	ldrb	r3, [r0, #0]
 8017a78:	2b2f      	cmp	r3, #47	; 0x2f
 8017a7a:	d012      	beq.n	8017aa2 <rmw_validate_namespace_with_size+0x3e>
 8017a7c:	aa01      	add	r2, sp, #4
 8017a7e:	4669      	mov	r1, sp
 8017a80:	f7ff ff7a 	bl	8017978 <rmw_validate_full_topic_name>
 8017a84:	b978      	cbnz	r0, 8017aa6 <rmw_validate_namespace_with_size+0x42>
 8017a86:	9b00      	ldr	r3, [sp, #0]
 8017a88:	b14b      	cbz	r3, 8017a9e <rmw_validate_namespace_with_size+0x3a>
 8017a8a:	2b07      	cmp	r3, #7
 8017a8c:	d007      	beq.n	8017a9e <rmw_validate_namespace_with_size+0x3a>
 8017a8e:	1e5a      	subs	r2, r3, #1
 8017a90:	2a05      	cmp	r2, #5
 8017a92:	d82b      	bhi.n	8017aec <rmw_validate_namespace_with_size+0x88>
 8017a94:	e8df f002 	tbb	[pc, r2]
 8017a98:	1e212427 	.word	0x1e212427
 8017a9c:	141b      	.short	0x141b
 8017a9e:	2df5      	cmp	r5, #245	; 0xf5
 8017aa0:	d803      	bhi.n	8017aaa <rmw_validate_namespace_with_size+0x46>
 8017aa2:	2000      	movs	r0, #0
 8017aa4:	6020      	str	r0, [r4, #0]
 8017aa6:	b042      	add	sp, #264	; 0x108
 8017aa8:	bd70      	pop	{r4, r5, r6, pc}
 8017aaa:	2307      	movs	r3, #7
 8017aac:	6023      	str	r3, [r4, #0]
 8017aae:	2e00      	cmp	r6, #0
 8017ab0:	d0f9      	beq.n	8017aa6 <rmw_validate_namespace_with_size+0x42>
 8017ab2:	23f4      	movs	r3, #244	; 0xf4
 8017ab4:	6033      	str	r3, [r6, #0]
 8017ab6:	e7f6      	b.n	8017aa6 <rmw_validate_namespace_with_size+0x42>
 8017ab8:	200b      	movs	r0, #11
 8017aba:	4770      	bx	lr
 8017abc:	200b      	movs	r0, #11
 8017abe:	e7f2      	b.n	8017aa6 <rmw_validate_namespace_with_size+0x42>
 8017ac0:	2306      	movs	r3, #6
 8017ac2:	6023      	str	r3, [r4, #0]
 8017ac4:	2e00      	cmp	r6, #0
 8017ac6:	d0ee      	beq.n	8017aa6 <rmw_validate_namespace_with_size+0x42>
 8017ac8:	9b01      	ldr	r3, [sp, #4]
 8017aca:	6033      	str	r3, [r6, #0]
 8017acc:	e7eb      	b.n	8017aa6 <rmw_validate_namespace_with_size+0x42>
 8017ace:	2305      	movs	r3, #5
 8017ad0:	6023      	str	r3, [r4, #0]
 8017ad2:	e7f7      	b.n	8017ac4 <rmw_validate_namespace_with_size+0x60>
 8017ad4:	2304      	movs	r3, #4
 8017ad6:	6023      	str	r3, [r4, #0]
 8017ad8:	e7f4      	b.n	8017ac4 <rmw_validate_namespace_with_size+0x60>
 8017ada:	2303      	movs	r3, #3
 8017adc:	6023      	str	r3, [r4, #0]
 8017ade:	e7f1      	b.n	8017ac4 <rmw_validate_namespace_with_size+0x60>
 8017ae0:	2302      	movs	r3, #2
 8017ae2:	6023      	str	r3, [r4, #0]
 8017ae4:	e7ee      	b.n	8017ac4 <rmw_validate_namespace_with_size+0x60>
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	6023      	str	r3, [r4, #0]
 8017aea:	e7eb      	b.n	8017ac4 <rmw_validate_namespace_with_size+0x60>
 8017aec:	4a03      	ldr	r2, [pc, #12]	; (8017afc <rmw_validate_namespace_with_size+0x98>)
 8017aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017af2:	a802      	add	r0, sp, #8
 8017af4:	f7ff fd36 	bl	8017564 <rcutils_snprintf>
 8017af8:	2001      	movs	r0, #1
 8017afa:	e7d4      	b.n	8017aa6 <rmw_validate_namespace_with_size+0x42>
 8017afc:	0801d21c 	.word	0x0801d21c

08017b00 <rmw_validate_namespace>:
 8017b00:	b168      	cbz	r0, 8017b1e <rmw_validate_namespace+0x1e>
 8017b02:	b570      	push	{r4, r5, r6, lr}
 8017b04:	460d      	mov	r5, r1
 8017b06:	4616      	mov	r6, r2
 8017b08:	4604      	mov	r4, r0
 8017b0a:	f7e8 fb6b 	bl	80001e4 <strlen>
 8017b0e:	4633      	mov	r3, r6
 8017b10:	4601      	mov	r1, r0
 8017b12:	462a      	mov	r2, r5
 8017b14:	4620      	mov	r0, r4
 8017b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b1a:	f7ff bfa3 	b.w	8017a64 <rmw_validate_namespace_with_size>
 8017b1e:	200b      	movs	r0, #11
 8017b20:	4770      	bx	lr
 8017b22:	bf00      	nop

08017b24 <rmw_namespace_validation_result_string>:
 8017b24:	2807      	cmp	r0, #7
 8017b26:	bf9a      	itte	ls
 8017b28:	4b02      	ldrls	r3, [pc, #8]	; (8017b34 <rmw_namespace_validation_result_string+0x10>)
 8017b2a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017b2e:	4802      	ldrhi	r0, [pc, #8]	; (8017b38 <rmw_namespace_validation_result_string+0x14>)
 8017b30:	4770      	bx	lr
 8017b32:	bf00      	nop
 8017b34:	0801d414 	.word	0x0801d414
 8017b38:	0801d26c 	.word	0x0801d26c

08017b3c <rmw_validate_node_name>:
 8017b3c:	2800      	cmp	r0, #0
 8017b3e:	d03b      	beq.n	8017bb8 <rmw_validate_node_name+0x7c>
 8017b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b44:	460d      	mov	r5, r1
 8017b46:	2900      	cmp	r1, #0
 8017b48:	d038      	beq.n	8017bbc <rmw_validate_node_name+0x80>
 8017b4a:	4616      	mov	r6, r2
 8017b4c:	4604      	mov	r4, r0
 8017b4e:	f7e8 fb49 	bl	80001e4 <strlen>
 8017b52:	b1e0      	cbz	r0, 8017b8e <rmw_validate_node_name+0x52>
 8017b54:	1e63      	subs	r3, r4, #1
 8017b56:	eb03 0800 	add.w	r8, r3, r0
 8017b5a:	f1c4 0101 	rsb	r1, r4, #1
 8017b5e:	18cf      	adds	r7, r1, r3
 8017b60:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8017b64:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8017b68:	f02e 0c20 	bic.w	ip, lr, #32
 8017b6c:	2a09      	cmp	r2, #9
 8017b6e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8017b72:	d914      	bls.n	8017b9e <rmw_validate_node_name+0x62>
 8017b74:	f1bc 0f19 	cmp.w	ip, #25
 8017b78:	d911      	bls.n	8017b9e <rmw_validate_node_name+0x62>
 8017b7a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8017b7e:	d00e      	beq.n	8017b9e <rmw_validate_node_name+0x62>
 8017b80:	2302      	movs	r3, #2
 8017b82:	602b      	str	r3, [r5, #0]
 8017b84:	b106      	cbz	r6, 8017b88 <rmw_validate_node_name+0x4c>
 8017b86:	6037      	str	r7, [r6, #0]
 8017b88:	2000      	movs	r0, #0
 8017b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b8e:	2301      	movs	r3, #1
 8017b90:	602b      	str	r3, [r5, #0]
 8017b92:	2e00      	cmp	r6, #0
 8017b94:	d0f8      	beq.n	8017b88 <rmw_validate_node_name+0x4c>
 8017b96:	2000      	movs	r0, #0
 8017b98:	6030      	str	r0, [r6, #0]
 8017b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b9e:	4543      	cmp	r3, r8
 8017ba0:	d1dd      	bne.n	8017b5e <rmw_validate_node_name+0x22>
 8017ba2:	7822      	ldrb	r2, [r4, #0]
 8017ba4:	4b0d      	ldr	r3, [pc, #52]	; (8017bdc <rmw_validate_node_name+0xa0>)
 8017ba6:	5cd3      	ldrb	r3, [r2, r3]
 8017ba8:	f013 0304 	ands.w	r3, r3, #4
 8017bac:	d110      	bne.n	8017bd0 <rmw_validate_node_name+0x94>
 8017bae:	28ff      	cmp	r0, #255	; 0xff
 8017bb0:	d806      	bhi.n	8017bc0 <rmw_validate_node_name+0x84>
 8017bb2:	602b      	str	r3, [r5, #0]
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	e7e8      	b.n	8017b8a <rmw_validate_node_name+0x4e>
 8017bb8:	200b      	movs	r0, #11
 8017bba:	4770      	bx	lr
 8017bbc:	200b      	movs	r0, #11
 8017bbe:	e7e4      	b.n	8017b8a <rmw_validate_node_name+0x4e>
 8017bc0:	2204      	movs	r2, #4
 8017bc2:	602a      	str	r2, [r5, #0]
 8017bc4:	2e00      	cmp	r6, #0
 8017bc6:	d0df      	beq.n	8017b88 <rmw_validate_node_name+0x4c>
 8017bc8:	22fe      	movs	r2, #254	; 0xfe
 8017bca:	6032      	str	r2, [r6, #0]
 8017bcc:	4618      	mov	r0, r3
 8017bce:	e7dc      	b.n	8017b8a <rmw_validate_node_name+0x4e>
 8017bd0:	2303      	movs	r3, #3
 8017bd2:	602b      	str	r3, [r5, #0]
 8017bd4:	2e00      	cmp	r6, #0
 8017bd6:	d1de      	bne.n	8017b96 <rmw_validate_node_name+0x5a>
 8017bd8:	e7d6      	b.n	8017b88 <rmw_validate_node_name+0x4c>
 8017bda:	bf00      	nop
 8017bdc:	0801d897 	.word	0x0801d897

08017be0 <rmw_node_name_validation_result_string>:
 8017be0:	2804      	cmp	r0, #4
 8017be2:	bf9a      	itte	ls
 8017be4:	4b02      	ldrls	r3, [pc, #8]	; (8017bf0 <rmw_node_name_validation_result_string+0x10>)
 8017be6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017bea:	4802      	ldrhi	r0, [pc, #8]	; (8017bf4 <rmw_node_name_validation_result_string+0x14>)
 8017bec:	4770      	bx	lr
 8017bee:	bf00      	nop
 8017bf0:	0801d520 	.word	0x0801d520
 8017bf4:	0801d434 	.word	0x0801d434

08017bf8 <get_memory>:
 8017bf8:	4603      	mov	r3, r0
 8017bfa:	6840      	ldr	r0, [r0, #4]
 8017bfc:	b158      	cbz	r0, 8017c16 <get_memory+0x1e>
 8017bfe:	6842      	ldr	r2, [r0, #4]
 8017c00:	605a      	str	r2, [r3, #4]
 8017c02:	b10a      	cbz	r2, 8017c08 <get_memory+0x10>
 8017c04:	2100      	movs	r1, #0
 8017c06:	6011      	str	r1, [r2, #0]
 8017c08:	681a      	ldr	r2, [r3, #0]
 8017c0a:	6042      	str	r2, [r0, #4]
 8017c0c:	b102      	cbz	r2, 8017c10 <get_memory+0x18>
 8017c0e:	6010      	str	r0, [r2, #0]
 8017c10:	2200      	movs	r2, #0
 8017c12:	6002      	str	r2, [r0, #0]
 8017c14:	6018      	str	r0, [r3, #0]
 8017c16:	4770      	bx	lr

08017c18 <put_memory>:
 8017c18:	680b      	ldr	r3, [r1, #0]
 8017c1a:	b10b      	cbz	r3, 8017c20 <put_memory+0x8>
 8017c1c:	684a      	ldr	r2, [r1, #4]
 8017c1e:	605a      	str	r2, [r3, #4]
 8017c20:	684a      	ldr	r2, [r1, #4]
 8017c22:	b102      	cbz	r2, 8017c26 <put_memory+0xe>
 8017c24:	6013      	str	r3, [r2, #0]
 8017c26:	6803      	ldr	r3, [r0, #0]
 8017c28:	428b      	cmp	r3, r1
 8017c2a:	6843      	ldr	r3, [r0, #4]
 8017c2c:	bf08      	it	eq
 8017c2e:	6002      	streq	r2, [r0, #0]
 8017c30:	604b      	str	r3, [r1, #4]
 8017c32:	b103      	cbz	r3, 8017c36 <put_memory+0x1e>
 8017c34:	6019      	str	r1, [r3, #0]
 8017c36:	2300      	movs	r3, #0
 8017c38:	600b      	str	r3, [r1, #0]
 8017c3a:	6041      	str	r1, [r0, #4]
 8017c3c:	4770      	bx	lr
 8017c3e:	bf00      	nop

08017c40 <rmw_get_implementation_identifier>:
 8017c40:	4b01      	ldr	r3, [pc, #4]	; (8017c48 <rmw_get_implementation_identifier+0x8>)
 8017c42:	6818      	ldr	r0, [r3, #0]
 8017c44:	4770      	bx	lr
 8017c46:	bf00      	nop
 8017c48:	0801d54c 	.word	0x0801d54c

08017c4c <rmw_init_options_init>:
 8017c4c:	b084      	sub	sp, #16
 8017c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c50:	b083      	sub	sp, #12
 8017c52:	ad09      	add	r5, sp, #36	; 0x24
 8017c54:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8017c58:	b130      	cbz	r0, 8017c68 <rmw_init_options_init+0x1c>
 8017c5a:	4604      	mov	r4, r0
 8017c5c:	4628      	mov	r0, r5
 8017c5e:	f7f8 fed3 	bl	8010a08 <rcutils_allocator_is_valid>
 8017c62:	b108      	cbz	r0, 8017c68 <rmw_init_options_init+0x1c>
 8017c64:	68a6      	ldr	r6, [r4, #8]
 8017c66:	b12e      	cbz	r6, 8017c74 <rmw_init_options_init+0x28>
 8017c68:	200b      	movs	r0, #11
 8017c6a:	b003      	add	sp, #12
 8017c6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017c70:	b004      	add	sp, #16
 8017c72:	4770      	bx	lr
 8017c74:	2200      	movs	r2, #0
 8017c76:	2300      	movs	r3, #0
 8017c78:	e9c4 2300 	strd	r2, r3, [r4]
 8017c7c:	4b22      	ldr	r3, [pc, #136]	; (8017d08 <rmw_init_options_init+0xbc>)
 8017c7e:	f8df e098 	ldr.w	lr, [pc, #152]	; 8017d18 <rmw_init_options_init+0xcc>
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	60a3      	str	r3, [r4, #8]
 8017c86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017c88:	f104 0c20 	add.w	ip, r4, #32
 8017c8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017c90:	466f      	mov	r7, sp
 8017c92:	682b      	ldr	r3, [r5, #0]
 8017c94:	f8cc 3000 	str.w	r3, [ip]
 8017c98:	4638      	mov	r0, r7
 8017c9a:	f8c4 e01c 	str.w	lr, [r4, #28]
 8017c9e:	60e6      	str	r6, [r4, #12]
 8017ca0:	f7ff fe66 	bl	8017970 <rmw_get_default_security_options>
 8017ca4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017ca8:	f104 0310 	add.w	r3, r4, #16
 8017cac:	e883 0003 	stmia.w	r3, {r0, r1}
 8017cb0:	2203      	movs	r2, #3
 8017cb2:	4816      	ldr	r0, [pc, #88]	; (8017d0c <rmw_init_options_init+0xc0>)
 8017cb4:	4916      	ldr	r1, [pc, #88]	; (8017d10 <rmw_init_options_init+0xc4>)
 8017cb6:	7626      	strb	r6, [r4, #24]
 8017cb8:	f7f9 f998 	bl	8010fec <rmw_uxrce_init_init_options_impl_memory>
 8017cbc:	4813      	ldr	r0, [pc, #76]	; (8017d0c <rmw_init_options_init+0xc0>)
 8017cbe:	f7ff ff9b 	bl	8017bf8 <get_memory>
 8017cc2:	b1f0      	cbz	r0, 8017d02 <rmw_init_options_init+0xb6>
 8017cc4:	4a13      	ldr	r2, [pc, #76]	; (8017d14 <rmw_init_options_init+0xc8>)
 8017cc6:	6883      	ldr	r3, [r0, #8]
 8017cc8:	6851      	ldr	r1, [r2, #4]
 8017cca:	7810      	ldrb	r0, [r2, #0]
 8017ccc:	6363      	str	r3, [r4, #52]	; 0x34
 8017cce:	7418      	strb	r0, [r3, #16]
 8017cd0:	6159      	str	r1, [r3, #20]
 8017cd2:	68d1      	ldr	r1, [r2, #12]
 8017cd4:	61d9      	str	r1, [r3, #28]
 8017cd6:	6911      	ldr	r1, [r2, #16]
 8017cd8:	6219      	str	r1, [r3, #32]
 8017cda:	6951      	ldr	r1, [r2, #20]
 8017cdc:	6892      	ldr	r2, [r2, #8]
 8017cde:	619a      	str	r2, [r3, #24]
 8017ce0:	6259      	str	r1, [r3, #36]	; 0x24
 8017ce2:	f7fd faf3 	bl	80152cc <uxr_nanos>
 8017ce6:	f003 fb33 	bl	801b350 <srand>
 8017cea:	f003 fb5f 	bl	801b3ac <rand>
 8017cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017cf0:	6298      	str	r0, [r3, #40]	; 0x28
 8017cf2:	2800      	cmp	r0, #0
 8017cf4:	d0f9      	beq.n	8017cea <rmw_init_options_init+0x9e>
 8017cf6:	2000      	movs	r0, #0
 8017cf8:	b003      	add	sp, #12
 8017cfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017cfe:	b004      	add	sp, #16
 8017d00:	4770      	bx	lr
 8017d02:	2001      	movs	r0, #1
 8017d04:	e7b1      	b.n	8017c6a <rmw_init_options_init+0x1e>
 8017d06:	bf00      	nop
 8017d08:	0801d54c 	.word	0x0801d54c
 8017d0c:	2001615c 	.word	0x2001615c
 8017d10:	200119f8 	.word	0x200119f8
 8017d14:	20011884 	.word	0x20011884
 8017d18:	0801d0ec 	.word	0x0801d0ec

08017d1c <rmw_init_options_copy>:
 8017d1c:	b570      	push	{r4, r5, r6, lr}
 8017d1e:	b158      	cbz	r0, 8017d38 <rmw_init_options_copy+0x1c>
 8017d20:	460d      	mov	r5, r1
 8017d22:	b149      	cbz	r1, 8017d38 <rmw_init_options_copy+0x1c>
 8017d24:	4604      	mov	r4, r0
 8017d26:	6880      	ldr	r0, [r0, #8]
 8017d28:	b120      	cbz	r0, 8017d34 <rmw_init_options_copy+0x18>
 8017d2a:	4b1e      	ldr	r3, [pc, #120]	; (8017da4 <rmw_init_options_copy+0x88>)
 8017d2c:	6819      	ldr	r1, [r3, #0]
 8017d2e:	f7e8 fa4f 	bl	80001d0 <strcmp>
 8017d32:	bb90      	cbnz	r0, 8017d9a <rmw_init_options_copy+0x7e>
 8017d34:	68ab      	ldr	r3, [r5, #8]
 8017d36:	b113      	cbz	r3, 8017d3e <rmw_init_options_copy+0x22>
 8017d38:	250b      	movs	r5, #11
 8017d3a:	4628      	mov	r0, r5
 8017d3c:	bd70      	pop	{r4, r5, r6, pc}
 8017d3e:	4623      	mov	r3, r4
 8017d40:	462a      	mov	r2, r5
 8017d42:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8017d46:	f8d3 c000 	ldr.w	ip, [r3]
 8017d4a:	6858      	ldr	r0, [r3, #4]
 8017d4c:	6899      	ldr	r1, [r3, #8]
 8017d4e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8017d52:	f8c2 e00c 	str.w	lr, [r2, #12]
 8017d56:	3310      	adds	r3, #16
 8017d58:	42b3      	cmp	r3, r6
 8017d5a:	f8c2 c000 	str.w	ip, [r2]
 8017d5e:	6050      	str	r0, [r2, #4]
 8017d60:	6091      	str	r1, [r2, #8]
 8017d62:	f102 0210 	add.w	r2, r2, #16
 8017d66:	d1ee      	bne.n	8017d46 <rmw_init_options_copy+0x2a>
 8017d68:	6819      	ldr	r1, [r3, #0]
 8017d6a:	685b      	ldr	r3, [r3, #4]
 8017d6c:	480e      	ldr	r0, [pc, #56]	; (8017da8 <rmw_init_options_copy+0x8c>)
 8017d6e:	6053      	str	r3, [r2, #4]
 8017d70:	6011      	str	r1, [r2, #0]
 8017d72:	f7ff ff41 	bl	8017bf8 <get_memory>
 8017d76:	b198      	cbz	r0, 8017da0 <rmw_init_options_copy+0x84>
 8017d78:	6883      	ldr	r3, [r0, #8]
 8017d7a:	636b      	str	r3, [r5, #52]	; 0x34
 8017d7c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017d7e:	f102 0c10 	add.w	ip, r2, #16
 8017d82:	f103 0410 	add.w	r4, r3, #16
 8017d86:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017d8c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8017d90:	2500      	movs	r5, #0
 8017d92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017d96:	4628      	mov	r0, r5
 8017d98:	bd70      	pop	{r4, r5, r6, pc}
 8017d9a:	250c      	movs	r5, #12
 8017d9c:	4628      	mov	r0, r5
 8017d9e:	bd70      	pop	{r4, r5, r6, pc}
 8017da0:	2501      	movs	r5, #1
 8017da2:	e7ca      	b.n	8017d3a <rmw_init_options_copy+0x1e>
 8017da4:	0801d54c 	.word	0x0801d54c
 8017da8:	2001615c 	.word	0x2001615c

08017dac <rmw_init_options_fini>:
 8017dac:	2800      	cmp	r0, #0
 8017dae:	d03d      	beq.n	8017e2c <rmw_init_options_fini+0x80>
 8017db0:	b510      	push	{r4, lr}
 8017db2:	4604      	mov	r4, r0
 8017db4:	b08e      	sub	sp, #56	; 0x38
 8017db6:	3020      	adds	r0, #32
 8017db8:	f7f8 fe26 	bl	8010a08 <rcutils_allocator_is_valid>
 8017dbc:	b360      	cbz	r0, 8017e18 <rmw_init_options_fini+0x6c>
 8017dbe:	68a0      	ldr	r0, [r4, #8]
 8017dc0:	b120      	cbz	r0, 8017dcc <rmw_init_options_fini+0x20>
 8017dc2:	4b1c      	ldr	r3, [pc, #112]	; (8017e34 <rmw_init_options_fini+0x88>)
 8017dc4:	6819      	ldr	r1, [r3, #0]
 8017dc6:	f7e8 fa03 	bl	80001d0 <strcmp>
 8017dca:	bb68      	cbnz	r0, 8017e28 <rmw_init_options_fini+0x7c>
 8017dcc:	4b1a      	ldr	r3, [pc, #104]	; (8017e38 <rmw_init_options_fini+0x8c>)
 8017dce:	6819      	ldr	r1, [r3, #0]
 8017dd0:	b331      	cbz	r1, 8017e20 <rmw_init_options_fini+0x74>
 8017dd2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017dd4:	e001      	b.n	8017dda <rmw_init_options_fini+0x2e>
 8017dd6:	6849      	ldr	r1, [r1, #4]
 8017dd8:	b311      	cbz	r1, 8017e20 <rmw_init_options_fini+0x74>
 8017dda:	688b      	ldr	r3, [r1, #8]
 8017ddc:	429a      	cmp	r2, r3
 8017dde:	d1fa      	bne.n	8017dd6 <rmw_init_options_fini+0x2a>
 8017de0:	4815      	ldr	r0, [pc, #84]	; (8017e38 <rmw_init_options_fini+0x8c>)
 8017de2:	f7ff ff19 	bl	8017c18 <put_memory>
 8017de6:	4668      	mov	r0, sp
 8017de8:	f7ff fdb2 	bl	8017950 <rmw_get_zero_initialized_init_options>
 8017dec:	46ee      	mov	lr, sp
 8017dee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017df2:	46a4      	mov	ip, r4
 8017df4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017df8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017dfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017e04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e08:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017e0c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017e10:	2300      	movs	r3, #0
 8017e12:	4618      	mov	r0, r3
 8017e14:	b00e      	add	sp, #56	; 0x38
 8017e16:	bd10      	pop	{r4, pc}
 8017e18:	230b      	movs	r3, #11
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	b00e      	add	sp, #56	; 0x38
 8017e1e:	bd10      	pop	{r4, pc}
 8017e20:	2301      	movs	r3, #1
 8017e22:	4618      	mov	r0, r3
 8017e24:	b00e      	add	sp, #56	; 0x38
 8017e26:	bd10      	pop	{r4, pc}
 8017e28:	230c      	movs	r3, #12
 8017e2a:	e7f2      	b.n	8017e12 <rmw_init_options_fini+0x66>
 8017e2c:	230b      	movs	r3, #11
 8017e2e:	4618      	mov	r0, r3
 8017e30:	4770      	bx	lr
 8017e32:	bf00      	nop
 8017e34:	0801d54c 	.word	0x0801d54c
 8017e38:	2001615c 	.word	0x2001615c

08017e3c <rmw_init>:
 8017e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e40:	b083      	sub	sp, #12
 8017e42:	2800      	cmp	r0, #0
 8017e44:	f000 80d3 	beq.w	8017fee <rmw_init+0x1b2>
 8017e48:	460e      	mov	r6, r1
 8017e4a:	2900      	cmp	r1, #0
 8017e4c:	f000 80cf 	beq.w	8017fee <rmw_init+0x1b2>
 8017e50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017e52:	4605      	mov	r5, r0
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	f000 80ca 	beq.w	8017fee <rmw_init+0x1b2>
 8017e5a:	4b78      	ldr	r3, [pc, #480]	; (801803c <rmw_init+0x200>)
 8017e5c:	6880      	ldr	r0, [r0, #8]
 8017e5e:	681f      	ldr	r7, [r3, #0]
 8017e60:	b128      	cbz	r0, 8017e6e <rmw_init+0x32>
 8017e62:	4639      	mov	r1, r7
 8017e64:	f7e8 f9b4 	bl	80001d0 <strcmp>
 8017e68:	2800      	cmp	r0, #0
 8017e6a:	f040 80ca 	bne.w	8018002 <rmw_init+0x1c6>
 8017e6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017e72:	4c73      	ldr	r4, [pc, #460]	; (8018040 <rmw_init+0x204>)
 8017e74:	4973      	ldr	r1, [pc, #460]	; (8018044 <rmw_init+0x208>)
 8017e76:	4874      	ldr	r0, [pc, #464]	; (8018048 <rmw_init+0x20c>)
 8017e78:	60b7      	str	r7, [r6, #8]
 8017e7a:	e9c6 2300 	strd	r2, r3, [r6]
 8017e7e:	68eb      	ldr	r3, [r5, #12]
 8017e80:	64b3      	str	r3, [r6, #72]	; 0x48
 8017e82:	2201      	movs	r2, #1
 8017e84:	f7f9 f852 	bl	8010f2c <rmw_uxrce_init_session_memory>
 8017e88:	4620      	mov	r0, r4
 8017e8a:	4970      	ldr	r1, [pc, #448]	; (801804c <rmw_init+0x210>)
 8017e8c:	2204      	movs	r2, #4
 8017e8e:	f7f9 f88d 	bl	8010fac <rmw_uxrce_init_static_input_buffer_memory>
 8017e92:	f04f 0800 	mov.w	r8, #0
 8017e96:	486c      	ldr	r0, [pc, #432]	; (8018048 <rmw_init+0x20c>)
 8017e98:	f884 800d 	strb.w	r8, [r4, #13]
 8017e9c:	f7ff feac 	bl	8017bf8 <get_memory>
 8017ea0:	2800      	cmp	r0, #0
 8017ea2:	f000 80a9 	beq.w	8017ff8 <rmw_init+0x1bc>
 8017ea6:	6884      	ldr	r4, [r0, #8]
 8017ea8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8017eaa:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8017eac:	f890 c010 	ldrb.w	ip, [r0, #16]
 8017eb0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8017eb4:	9101      	str	r1, [sp, #4]
 8017eb6:	6a00      	ldr	r0, [r0, #32]
 8017eb8:	9000      	str	r0, [sp, #0]
 8017eba:	f104 0910 	add.w	r9, r4, #16
 8017ebe:	4661      	mov	r1, ip
 8017ec0:	4648      	mov	r0, r9
 8017ec2:	f000 ff2f 	bl	8018d24 <uxr_set_custom_transport_callbacks>
 8017ec6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8017eca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017ece:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8017ed2:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8017ed6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8017eda:	495d      	ldr	r1, [pc, #372]	; (8018050 <rmw_init+0x214>)
 8017edc:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8017ee0:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8017ee4:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8017ee8:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8017eec:	4859      	ldr	r0, [pc, #356]	; (8018054 <rmw_init+0x218>)
 8017eee:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8017ef2:	2201      	movs	r2, #1
 8017ef4:	64f4      	str	r4, [r6, #76]	; 0x4c
 8017ef6:	f7f8 fff9 	bl	8010eec <rmw_uxrce_init_node_memory>
 8017efa:	4957      	ldr	r1, [pc, #348]	; (8018058 <rmw_init+0x21c>)
 8017efc:	4857      	ldr	r0, [pc, #348]	; (801805c <rmw_init+0x220>)
 8017efe:	2205      	movs	r2, #5
 8017f00:	f7f8 ffd4 	bl	8010eac <rmw_uxrce_init_subscription_memory>
 8017f04:	4956      	ldr	r1, [pc, #344]	; (8018060 <rmw_init+0x224>)
 8017f06:	4857      	ldr	r0, [pc, #348]	; (8018064 <rmw_init+0x228>)
 8017f08:	220a      	movs	r2, #10
 8017f0a:	f7f8 ffaf 	bl	8010e6c <rmw_uxrce_init_publisher_memory>
 8017f0e:	4956      	ldr	r1, [pc, #344]	; (8018068 <rmw_init+0x22c>)
 8017f10:	4856      	ldr	r0, [pc, #344]	; (801806c <rmw_init+0x230>)
 8017f12:	2201      	movs	r2, #1
 8017f14:	f7f8 ff6a 	bl	8010dec <rmw_uxrce_init_service_memory>
 8017f18:	4955      	ldr	r1, [pc, #340]	; (8018070 <rmw_init+0x234>)
 8017f1a:	4856      	ldr	r0, [pc, #344]	; (8018074 <rmw_init+0x238>)
 8017f1c:	2201      	movs	r2, #1
 8017f1e:	f7f8 ff85 	bl	8010e2c <rmw_uxrce_init_client_memory>
 8017f22:	4955      	ldr	r1, [pc, #340]	; (8018078 <rmw_init+0x23c>)
 8017f24:	4855      	ldr	r0, [pc, #340]	; (801807c <rmw_init+0x240>)
 8017f26:	220f      	movs	r2, #15
 8017f28:	f7f9 f820 	bl	8010f6c <rmw_uxrce_init_topic_memory>
 8017f2c:	4954      	ldr	r1, [pc, #336]	; (8018080 <rmw_init+0x244>)
 8017f2e:	4855      	ldr	r0, [pc, #340]	; (8018084 <rmw_init+0x248>)
 8017f30:	2203      	movs	r2, #3
 8017f32:	f7f9 f85b 	bl	8010fec <rmw_uxrce_init_init_options_impl_memory>
 8017f36:	4954      	ldr	r1, [pc, #336]	; (8018088 <rmw_init+0x24c>)
 8017f38:	4854      	ldr	r0, [pc, #336]	; (801808c <rmw_init+0x250>)
 8017f3a:	2204      	movs	r2, #4
 8017f3c:	f7f9 f876 	bl	801102c <rmw_uxrce_init_wait_set_memory>
 8017f40:	4953      	ldr	r1, [pc, #332]	; (8018090 <rmw_init+0x254>)
 8017f42:	4854      	ldr	r0, [pc, #336]	; (8018094 <rmw_init+0x258>)
 8017f44:	2204      	movs	r2, #4
 8017f46:	f7f9 f891 	bl	801106c <rmw_uxrce_init_guard_condition_memory>
 8017f4a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8017f4c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8017f4e:	4642      	mov	r2, r8
 8017f50:	f000 fb18 	bl	8018584 <rmw_uxrce_transport_init>
 8017f54:	4607      	mov	r7, r0
 8017f56:	2800      	cmp	r0, #0
 8017f58:	d158      	bne.n	801800c <rmw_init+0x1d0>
 8017f5a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8017f5c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8017f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f62:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8017f66:	4628      	mov	r0, r5
 8017f68:	f7fc f84e 	bl	8014008 <uxr_init_session>
 8017f6c:	494a      	ldr	r1, [pc, #296]	; (8018098 <rmw_init+0x25c>)
 8017f6e:	4622      	mov	r2, r4
 8017f70:	4628      	mov	r0, r5
 8017f72:	f7fc f86d 	bl	8014050 <uxr_set_topic_callback>
 8017f76:	4949      	ldr	r1, [pc, #292]	; (801809c <rmw_init+0x260>)
 8017f78:	463a      	mov	r2, r7
 8017f7a:	4628      	mov	r0, r5
 8017f7c:	f7fc f864 	bl	8014048 <uxr_set_status_callback>
 8017f80:	4947      	ldr	r1, [pc, #284]	; (80180a0 <rmw_init+0x264>)
 8017f82:	463a      	mov	r2, r7
 8017f84:	4628      	mov	r0, r5
 8017f86:	f7fc f867 	bl	8014058 <uxr_set_request_callback>
 8017f8a:	4946      	ldr	r1, [pc, #280]	; (80180a4 <rmw_init+0x268>)
 8017f8c:	463a      	mov	r2, r7
 8017f8e:	4628      	mov	r0, r5
 8017f90:	f7fc f866 	bl	8014060 <uxr_set_reply_callback>
 8017f94:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017f98:	2304      	movs	r3, #4
 8017f9a:	0092      	lsls	r2, r2, #2
 8017f9c:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8017fa0:	4628      	mov	r0, r5
 8017fa2:	f7fc f89b 	bl	80140dc <uxr_create_input_reliable_stream>
 8017fa6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017faa:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8017fae:	0092      	lsls	r2, r2, #2
 8017fb0:	2304      	movs	r3, #4
 8017fb2:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8017fb6:	4628      	mov	r0, r5
 8017fb8:	f7fc f868 	bl	801408c <uxr_create_output_reliable_stream>
 8017fbc:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8017fc0:	4628      	mov	r0, r5
 8017fc2:	f7fc f885 	bl	80140d0 <uxr_create_input_best_effort_stream>
 8017fc6:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8017fca:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8017fce:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017fd2:	3114      	adds	r1, #20
 8017fd4:	4628      	mov	r0, r5
 8017fd6:	f7fc f847 	bl	8014068 <uxr_create_output_best_effort_stream>
 8017fda:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8017fde:	4628      	mov	r0, r5
 8017fe0:	f7fc fd98 	bl	8014b14 <uxr_create_session>
 8017fe4:	b1f8      	cbz	r0, 8018026 <rmw_init+0x1ea>
 8017fe6:	4638      	mov	r0, r7
 8017fe8:	b003      	add	sp, #12
 8017fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fee:	270b      	movs	r7, #11
 8017ff0:	4638      	mov	r0, r7
 8017ff2:	b003      	add	sp, #12
 8017ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ff8:	2701      	movs	r7, #1
 8017ffa:	4638      	mov	r0, r7
 8017ffc:	b003      	add	sp, #12
 8017ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018002:	270c      	movs	r7, #12
 8018004:	4638      	mov	r0, r7
 8018006:	b003      	add	sp, #12
 8018008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801800c:	4648      	mov	r0, r9
 801800e:	f000 fecb 	bl	8018da8 <uxr_close_custom_transport>
 8018012:	480d      	ldr	r0, [pc, #52]	; (8018048 <rmw_init+0x20c>)
 8018014:	4621      	mov	r1, r4
 8018016:	f7ff fdff 	bl	8017c18 <put_memory>
 801801a:	4638      	mov	r0, r7
 801801c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8018020:	b003      	add	sp, #12
 8018022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018026:	4648      	mov	r0, r9
 8018028:	f000 febe 	bl	8018da8 <uxr_close_custom_transport>
 801802c:	4806      	ldr	r0, [pc, #24]	; (8018048 <rmw_init+0x20c>)
 801802e:	4621      	mov	r1, r4
 8018030:	f7ff fdf2 	bl	8017c18 <put_memory>
 8018034:	64f7      	str	r7, [r6, #76]	; 0x4c
 8018036:	2701      	movs	r7, #1
 8018038:	e7d5      	b.n	8017fe6 <rmw_init+0x1aa>
 801803a:	bf00      	nop
 801803c:	0801d54c 	.word	0x0801d54c
 8018040:	200161ac 	.word	0x200161ac
 8018044:	20012458 	.word	0x20012458
 8018048:	2001619c 	.word	0x2001619c
 801804c:	20013a00 	.word	0x20013a00
 8018050:	20011a7c 	.word	0x20011a7c
 8018054:	2001616c 	.word	0x2001616c
 8018058:	20015b00 	.word	0x20015b00
 801805c:	200161bc 	.word	0x200161bc
 8018060:	20011b20 	.word	0x20011b20
 8018064:	2001617c 	.word	0x2001617c
 8018068:	20012390 	.word	0x20012390
 801806c:	2001618c 	.word	0x2001618c
 8018070:	200118b0 	.word	0x200118b0
 8018074:	200118a0 	.word	0x200118a0
 8018078:	20015f38 	.word	0x20015f38
 801807c:	200161cc 	.word	0x200161cc
 8018080:	200119f8 	.word	0x200119f8
 8018084:	2001615c 	.word	0x2001615c
 8018088:	200160dc 	.word	0x200160dc
 801808c:	200161dc 	.word	0x200161dc
 8018090:	20011978 	.word	0x20011978
 8018094:	2001614c 	.word	0x2001614c
 8018098:	0801a9a1 	.word	0x0801a9a1
 801809c:	0801a999 	.word	0x0801a999
 80180a0:	0801aa39 	.word	0x0801aa39
 80180a4:	0801aad5 	.word	0x0801aad5

080180a8 <rmw_context_fini>:
 80180a8:	4b17      	ldr	r3, [pc, #92]	; (8018108 <rmw_context_fini+0x60>)
 80180aa:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80180ac:	b570      	push	{r4, r5, r6, lr}
 80180ae:	681c      	ldr	r4, [r3, #0]
 80180b0:	4605      	mov	r5, r0
 80180b2:	b334      	cbz	r4, 8018102 <rmw_context_fini+0x5a>
 80180b4:	2600      	movs	r6, #0
 80180b6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80180ba:	6902      	ldr	r2, [r0, #16]
 80180bc:	428a      	cmp	r2, r1
 80180be:	d018      	beq.n	80180f2 <rmw_context_fini+0x4a>
 80180c0:	2c00      	cmp	r4, #0
 80180c2:	d1f8      	bne.n	80180b6 <rmw_context_fini+0xe>
 80180c4:	b189      	cbz	r1, 80180ea <rmw_context_fini+0x42>
 80180c6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 80180ca:	789b      	ldrb	r3, [r3, #2]
 80180cc:	2b01      	cmp	r3, #1
 80180ce:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 80180d2:	bf14      	ite	ne
 80180d4:	210a      	movne	r1, #10
 80180d6:	2100      	moveq	r1, #0
 80180d8:	f7fc fcf4 	bl	8014ac4 <uxr_delete_session_retries>
 80180dc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80180de:	f7f8 ffe5 	bl	80110ac <rmw_uxrce_fini_session_memory>
 80180e2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80180e4:	3010      	adds	r0, #16
 80180e6:	f000 fe5f 	bl	8018da8 <uxr_close_custom_transport>
 80180ea:	2300      	movs	r3, #0
 80180ec:	64eb      	str	r3, [r5, #76]	; 0x4c
 80180ee:	4630      	mov	r0, r6
 80180f0:	bd70      	pop	{r4, r5, r6, pc}
 80180f2:	3018      	adds	r0, #24
 80180f4:	f000 f922 	bl	801833c <rmw_destroy_node>
 80180f8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80180fa:	4606      	mov	r6, r0
 80180fc:	2c00      	cmp	r4, #0
 80180fe:	d1da      	bne.n	80180b6 <rmw_context_fini+0xe>
 8018100:	e7e0      	b.n	80180c4 <rmw_context_fini+0x1c>
 8018102:	4626      	mov	r6, r4
 8018104:	e7de      	b.n	80180c4 <rmw_context_fini+0x1c>
 8018106:	bf00      	nop
 8018108:	2001616c 	.word	0x2001616c

0801810c <create_topic>:
 801810c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018110:	4605      	mov	r5, r0
 8018112:	b084      	sub	sp, #16
 8018114:	482c      	ldr	r0, [pc, #176]	; (80181c8 <create_topic+0xbc>)
 8018116:	460f      	mov	r7, r1
 8018118:	4616      	mov	r6, r2
 801811a:	f7ff fd6d 	bl	8017bf8 <get_memory>
 801811e:	4604      	mov	r4, r0
 8018120:	2800      	cmp	r0, #0
 8018122:	d038      	beq.n	8018196 <create_topic+0x8a>
 8018124:	692b      	ldr	r3, [r5, #16]
 8018126:	6884      	ldr	r4, [r0, #8]
 8018128:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80181d0 <create_topic+0xc4>
 801812c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018130:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8018134:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8018138:	1c42      	adds	r2, r0, #1
 801813a:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 801813e:	2102      	movs	r1, #2
 8018140:	f7fb fea4 	bl	8013e8c <uxr_object_id>
 8018144:	223c      	movs	r2, #60	; 0x3c
 8018146:	6120      	str	r0, [r4, #16]
 8018148:	4641      	mov	r1, r8
 801814a:	4638      	mov	r0, r7
 801814c:	f7f9 f8e6 	bl	801131c <generate_topic_name>
 8018150:	4607      	mov	r7, r0
 8018152:	b320      	cbz	r0, 801819e <create_topic+0x92>
 8018154:	4f1d      	ldr	r7, [pc, #116]	; (80181cc <create_topic+0xc0>)
 8018156:	4630      	mov	r0, r6
 8018158:	2264      	movs	r2, #100	; 0x64
 801815a:	4639      	mov	r1, r7
 801815c:	f7f9 f8ae 	bl	80112bc <generate_type_name>
 8018160:	4606      	mov	r6, r0
 8018162:	b320      	cbz	r0, 80181ae <create_topic+0xa2>
 8018164:	6928      	ldr	r0, [r5, #16]
 8018166:	2306      	movs	r3, #6
 8018168:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801816c:	f8cd 8000 	str.w	r8, [sp]
 8018170:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8018174:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018178:	696b      	ldr	r3, [r5, #20]
 801817a:	6811      	ldr	r1, [r2, #0]
 801817c:	6922      	ldr	r2, [r4, #16]
 801817e:	f7fb fda9 	bl	8013cd4 <uxr_buffer_create_topic_bin>
 8018182:	4602      	mov	r2, r0
 8018184:	6928      	ldr	r0, [r5, #16]
 8018186:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801818a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801818e:	f7f9 f85f 	bl	8011250 <run_xrce_session>
 8018192:	4605      	mov	r5, r0
 8018194:	b198      	cbz	r0, 80181be <create_topic+0xb2>
 8018196:	4620      	mov	r0, r4
 8018198:	b004      	add	sp, #16
 801819a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801819e:	4620      	mov	r0, r4
 80181a0:	f7f8 fffa 	bl	8011198 <rmw_uxrce_fini_topic_memory>
 80181a4:	463c      	mov	r4, r7
 80181a6:	4620      	mov	r0, r4
 80181a8:	b004      	add	sp, #16
 80181aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181ae:	4620      	mov	r0, r4
 80181b0:	f7f8 fff2 	bl	8011198 <rmw_uxrce_fini_topic_memory>
 80181b4:	4634      	mov	r4, r6
 80181b6:	4620      	mov	r0, r4
 80181b8:	b004      	add	sp, #16
 80181ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181be:	4620      	mov	r0, r4
 80181c0:	f7f8 ffea 	bl	8011198 <rmw_uxrce_fini_topic_memory>
 80181c4:	462c      	mov	r4, r5
 80181c6:	e7e6      	b.n	8018196 <create_topic+0x8a>
 80181c8:	200161cc 	.word	0x200161cc
 80181cc:	20016248 	.word	0x20016248
 80181d0:	2001620c 	.word	0x2001620c

080181d4 <destroy_topic>:
 80181d4:	b538      	push	{r3, r4, r5, lr}
 80181d6:	6985      	ldr	r5, [r0, #24]
 80181d8:	b1d5      	cbz	r5, 8018210 <destroy_topic+0x3c>
 80181da:	4604      	mov	r4, r0
 80181dc:	6928      	ldr	r0, [r5, #16]
 80181de:	6922      	ldr	r2, [r4, #16]
 80181e0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80181e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80181e8:	6819      	ldr	r1, [r3, #0]
 80181ea:	f7fb fcf5 	bl	8013bd8 <uxr_buffer_delete_entity>
 80181ee:	4602      	mov	r2, r0
 80181f0:	6928      	ldr	r0, [r5, #16]
 80181f2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80181f6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80181fa:	f7f9 f829 	bl	8011250 <run_xrce_session>
 80181fe:	2800      	cmp	r0, #0
 8018200:	4620      	mov	r0, r4
 8018202:	bf14      	ite	ne
 8018204:	2400      	movne	r4, #0
 8018206:	2402      	moveq	r4, #2
 8018208:	f7f8 ffc6 	bl	8011198 <rmw_uxrce_fini_topic_memory>
 801820c:	4620      	mov	r0, r4
 801820e:	bd38      	pop	{r3, r4, r5, pc}
 8018210:	2401      	movs	r4, #1
 8018212:	4620      	mov	r0, r4
 8018214:	bd38      	pop	{r3, r4, r5, pc}
 8018216:	bf00      	nop

08018218 <create_node>:
 8018218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801821c:	b083      	sub	sp, #12
 801821e:	2b00      	cmp	r3, #0
 8018220:	d05f      	beq.n	80182e2 <create_node+0xca>
 8018222:	4606      	mov	r6, r0
 8018224:	4835      	ldr	r0, [pc, #212]	; (80182fc <create_node+0xe4>)
 8018226:	460f      	mov	r7, r1
 8018228:	4690      	mov	r8, r2
 801822a:	461d      	mov	r5, r3
 801822c:	f7ff fce4 	bl	8017bf8 <get_memory>
 8018230:	2800      	cmp	r0, #0
 8018232:	d056      	beq.n	80182e2 <create_node+0xca>
 8018234:	6884      	ldr	r4, [r0, #8]
 8018236:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8018238:	6123      	str	r3, [r4, #16]
 801823a:	f7ff fd01 	bl	8017c40 <rmw_get_implementation_identifier>
 801823e:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8018242:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8018246:	f8c4 9020 	str.w	r9, [r4, #32]
 801824a:	4630      	mov	r0, r6
 801824c:	f7e7 ffca 	bl	80001e4 <strlen>
 8018250:	1c42      	adds	r2, r0, #1
 8018252:	2a3c      	cmp	r2, #60	; 0x3c
 8018254:	f104 0518 	add.w	r5, r4, #24
 8018258:	d840      	bhi.n	80182dc <create_node+0xc4>
 801825a:	4648      	mov	r0, r9
 801825c:	4631      	mov	r1, r6
 801825e:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8018262:	f002 ff51 	bl	801b108 <memcpy>
 8018266:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 801826a:	4638      	mov	r0, r7
 801826c:	f7e7 ffba 	bl	80001e4 <strlen>
 8018270:	1c42      	adds	r2, r0, #1
 8018272:	2a3c      	cmp	r2, #60	; 0x3c
 8018274:	d832      	bhi.n	80182dc <create_node+0xc4>
 8018276:	4639      	mov	r1, r7
 8018278:	4648      	mov	r0, r9
 801827a:	f002 ff45 	bl	801b108 <memcpy>
 801827e:	6923      	ldr	r3, [r4, #16]
 8018280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018284:	2101      	movs	r1, #1
 8018286:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 801828a:	1842      	adds	r2, r0, r1
 801828c:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8018290:	f7fb fdfc 	bl	8013e8c <uxr_object_id>
 8018294:	6160      	str	r0, [r4, #20]
 8018296:	783b      	ldrb	r3, [r7, #0]
 8018298:	2b2f      	cmp	r3, #47	; 0x2f
 801829a:	d127      	bne.n	80182ec <create_node+0xd4>
 801829c:	787b      	ldrb	r3, [r7, #1]
 801829e:	bb2b      	cbnz	r3, 80182ec <create_node+0xd4>
 80182a0:	4a17      	ldr	r2, [pc, #92]	; (8018300 <create_node+0xe8>)
 80182a2:	4818      	ldr	r0, [pc, #96]	; (8018304 <create_node+0xec>)
 80182a4:	4633      	mov	r3, r6
 80182a6:	213c      	movs	r1, #60	; 0x3c
 80182a8:	f003 f940 	bl	801b52c <sniprintf>
 80182ac:	6920      	ldr	r0, [r4, #16]
 80182ae:	4915      	ldr	r1, [pc, #84]	; (8018304 <create_node+0xec>)
 80182b0:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80182b4:	9100      	str	r1, [sp, #0]
 80182b6:	2106      	movs	r1, #6
 80182b8:	9101      	str	r1, [sp, #4]
 80182ba:	6811      	ldr	r1, [r2, #0]
 80182bc:	6962      	ldr	r2, [r4, #20]
 80182be:	fa1f f388 	uxth.w	r3, r8
 80182c2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80182c6:	f7fb fcd3 	bl	8013c70 <uxr_buffer_create_participant_bin>
 80182ca:	4602      	mov	r2, r0
 80182cc:	6920      	ldr	r0, [r4, #16]
 80182ce:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80182d2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80182d6:	f7f8 ffbb 	bl	8011250 <run_xrce_session>
 80182da:	b918      	cbnz	r0, 80182e4 <create_node+0xcc>
 80182dc:	4628      	mov	r0, r5
 80182de:	f7f8 feeb 	bl	80110b8 <rmw_uxrce_fini_node_memory>
 80182e2:	2500      	movs	r5, #0
 80182e4:	4628      	mov	r0, r5
 80182e6:	b003      	add	sp, #12
 80182e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182ec:	4a06      	ldr	r2, [pc, #24]	; (8018308 <create_node+0xf0>)
 80182ee:	9600      	str	r6, [sp, #0]
 80182f0:	463b      	mov	r3, r7
 80182f2:	213c      	movs	r1, #60	; 0x3c
 80182f4:	4803      	ldr	r0, [pc, #12]	; (8018304 <create_node+0xec>)
 80182f6:	f003 f919 	bl	801b52c <sniprintf>
 80182fa:	e7d7      	b.n	80182ac <create_node+0x94>
 80182fc:	2001616c 	.word	0x2001616c
 8018300:	0801c988 	.word	0x0801c988
 8018304:	200162ac 	.word	0x200162ac
 8018308:	0801d0f4 	.word	0x0801d0f4

0801830c <rmw_create_node>:
 801830c:	b199      	cbz	r1, 8018336 <rmw_create_node+0x2a>
 801830e:	780b      	ldrb	r3, [r1, #0]
 8018310:	468c      	mov	ip, r1
 8018312:	b183      	cbz	r3, 8018336 <rmw_create_node+0x2a>
 8018314:	b410      	push	{r4}
 8018316:	4614      	mov	r4, r2
 8018318:	b14a      	cbz	r2, 801832e <rmw_create_node+0x22>
 801831a:	7813      	ldrb	r3, [r2, #0]
 801831c:	b13b      	cbz	r3, 801832e <rmw_create_node+0x22>
 801831e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8018320:	4603      	mov	r3, r0
 8018322:	4621      	mov	r1, r4
 8018324:	4660      	mov	r0, ip
 8018326:	f85d 4b04 	ldr.w	r4, [sp], #4
 801832a:	f7ff bf75 	b.w	8018218 <create_node>
 801832e:	2000      	movs	r0, #0
 8018330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018334:	4770      	bx	lr
 8018336:	2000      	movs	r0, #0
 8018338:	4770      	bx	lr
 801833a:	bf00      	nop

0801833c <rmw_destroy_node>:
 801833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801833e:	2800      	cmp	r0, #0
 8018340:	d066      	beq.n	8018410 <rmw_destroy_node+0xd4>
 8018342:	4607      	mov	r7, r0
 8018344:	6800      	ldr	r0, [r0, #0]
 8018346:	b128      	cbz	r0, 8018354 <rmw_destroy_node+0x18>
 8018348:	4b34      	ldr	r3, [pc, #208]	; (801841c <rmw_destroy_node+0xe0>)
 801834a:	6819      	ldr	r1, [r3, #0]
 801834c:	f7e7 ff40 	bl	80001d0 <strcmp>
 8018350:	2800      	cmp	r0, #0
 8018352:	d15d      	bne.n	8018410 <rmw_destroy_node+0xd4>
 8018354:	687c      	ldr	r4, [r7, #4]
 8018356:	2c00      	cmp	r4, #0
 8018358:	d05a      	beq.n	8018410 <rmw_destroy_node+0xd4>
 801835a:	4b31      	ldr	r3, [pc, #196]	; (8018420 <rmw_destroy_node+0xe4>)
 801835c:	681d      	ldr	r5, [r3, #0]
 801835e:	2d00      	cmp	r5, #0
 8018360:	d059      	beq.n	8018416 <rmw_destroy_node+0xda>
 8018362:	2600      	movs	r6, #0
 8018364:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8018368:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 801836c:	429c      	cmp	r4, r3
 801836e:	d047      	beq.n	8018400 <rmw_destroy_node+0xc4>
 8018370:	2d00      	cmp	r5, #0
 8018372:	d1f7      	bne.n	8018364 <rmw_destroy_node+0x28>
 8018374:	4b2b      	ldr	r3, [pc, #172]	; (8018424 <rmw_destroy_node+0xe8>)
 8018376:	681d      	ldr	r5, [r3, #0]
 8018378:	b15d      	cbz	r5, 8018392 <rmw_destroy_node+0x56>
 801837a:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 801837e:	6a0b      	ldr	r3, [r1, #32]
 8018380:	429c      	cmp	r4, r3
 8018382:	d1f9      	bne.n	8018378 <rmw_destroy_node+0x3c>
 8018384:	317c      	adds	r1, #124	; 0x7c
 8018386:	4638      	mov	r0, r7
 8018388:	f000 f89c 	bl	80184c4 <rmw_destroy_subscription>
 801838c:	4606      	mov	r6, r0
 801838e:	2d00      	cmp	r5, #0
 8018390:	d1f3      	bne.n	801837a <rmw_destroy_node+0x3e>
 8018392:	4b25      	ldr	r3, [pc, #148]	; (8018428 <rmw_destroy_node+0xec>)
 8018394:	681d      	ldr	r5, [r3, #0]
 8018396:	b15d      	cbz	r5, 80183b0 <rmw_destroy_node+0x74>
 8018398:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 801839c:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801839e:	429c      	cmp	r4, r3
 80183a0:	d1f9      	bne.n	8018396 <rmw_destroy_node+0x5a>
 80183a2:	317c      	adds	r1, #124	; 0x7c
 80183a4:	4638      	mov	r0, r7
 80183a6:	f000 f849 	bl	801843c <rmw_destroy_service>
 80183aa:	4606      	mov	r6, r0
 80183ac:	2d00      	cmp	r5, #0
 80183ae:	d1f3      	bne.n	8018398 <rmw_destroy_node+0x5c>
 80183b0:	4b1e      	ldr	r3, [pc, #120]	; (801842c <rmw_destroy_node+0xf0>)
 80183b2:	681d      	ldr	r5, [r3, #0]
 80183b4:	b15d      	cbz	r5, 80183ce <rmw_destroy_node+0x92>
 80183b6:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 80183ba:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80183bc:	429c      	cmp	r4, r3
 80183be:	d1f9      	bne.n	80183b4 <rmw_destroy_node+0x78>
 80183c0:	317c      	adds	r1, #124	; 0x7c
 80183c2:	4638      	mov	r0, r7
 80183c4:	f002 fbd0 	bl	801ab68 <rmw_destroy_client>
 80183c8:	4606      	mov	r6, r0
 80183ca:	2d00      	cmp	r5, #0
 80183cc:	d1f3      	bne.n	80183b6 <rmw_destroy_node+0x7a>
 80183ce:	6920      	ldr	r0, [r4, #16]
 80183d0:	6962      	ldr	r2, [r4, #20]
 80183d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80183d6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80183da:	6819      	ldr	r1, [r3, #0]
 80183dc:	f7fb fbfc 	bl	8013bd8 <uxr_buffer_delete_entity>
 80183e0:	4602      	mov	r2, r0
 80183e2:	6920      	ldr	r0, [r4, #16]
 80183e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80183e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80183ec:	f7f8 ff30 	bl	8011250 <run_xrce_session>
 80183f0:	2800      	cmp	r0, #0
 80183f2:	bf08      	it	eq
 80183f4:	2602      	moveq	r6, #2
 80183f6:	4638      	mov	r0, r7
 80183f8:	f7f8 fe5e 	bl	80110b8 <rmw_uxrce_fini_node_memory>
 80183fc:	4630      	mov	r0, r6
 80183fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018400:	3184      	adds	r1, #132	; 0x84
 8018402:	4638      	mov	r0, r7
 8018404:	f7f8 fca0 	bl	8010d48 <rmw_destroy_publisher>
 8018408:	4606      	mov	r6, r0
 801840a:	2d00      	cmp	r5, #0
 801840c:	d1aa      	bne.n	8018364 <rmw_destroy_node+0x28>
 801840e:	e7b1      	b.n	8018374 <rmw_destroy_node+0x38>
 8018410:	2601      	movs	r6, #1
 8018412:	4630      	mov	r0, r6
 8018414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018416:	462e      	mov	r6, r5
 8018418:	e7ac      	b.n	8018374 <rmw_destroy_node+0x38>
 801841a:	bf00      	nop
 801841c:	0801d54c 	.word	0x0801d54c
 8018420:	2001617c 	.word	0x2001617c
 8018424:	200161bc 	.word	0x200161bc
 8018428:	2001618c 	.word	0x2001618c
 801842c:	200118a0 	.word	0x200118a0

08018430 <rmw_node_get_graph_guard_condition>:
 8018430:	6843      	ldr	r3, [r0, #4]
 8018432:	6918      	ldr	r0, [r3, #16]
 8018434:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8018438:	4770      	bx	lr
 801843a:	bf00      	nop

0801843c <rmw_destroy_service>:
 801843c:	b570      	push	{r4, r5, r6, lr}
 801843e:	b128      	cbz	r0, 801844c <rmw_destroy_service+0x10>
 8018440:	4604      	mov	r4, r0
 8018442:	6800      	ldr	r0, [r0, #0]
 8018444:	460d      	mov	r5, r1
 8018446:	f7f8 ff83 	bl	8011350 <is_uxrce_rmw_identifier_valid>
 801844a:	b910      	cbnz	r0, 8018452 <rmw_destroy_service+0x16>
 801844c:	2401      	movs	r4, #1
 801844e:	4620      	mov	r0, r4
 8018450:	bd70      	pop	{r4, r5, r6, pc}
 8018452:	6863      	ldr	r3, [r4, #4]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d0f9      	beq.n	801844c <rmw_destroy_service+0x10>
 8018458:	2d00      	cmp	r5, #0
 801845a:	d0f7      	beq.n	801844c <rmw_destroy_service+0x10>
 801845c:	6828      	ldr	r0, [r5, #0]
 801845e:	f7f8 ff77 	bl	8011350 <is_uxrce_rmw_identifier_valid>
 8018462:	2800      	cmp	r0, #0
 8018464:	d0f2      	beq.n	801844c <rmw_destroy_service+0x10>
 8018466:	686e      	ldr	r6, [r5, #4]
 8018468:	2e00      	cmp	r6, #0
 801846a:	d0ef      	beq.n	801844c <rmw_destroy_service+0x10>
 801846c:	6864      	ldr	r4, [r4, #4]
 801846e:	6932      	ldr	r2, [r6, #16]
 8018470:	6920      	ldr	r0, [r4, #16]
 8018472:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018476:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801847a:	6819      	ldr	r1, [r3, #0]
 801847c:	f001 f9ce 	bl	801981c <uxr_buffer_cancel_data>
 8018480:	4602      	mov	r2, r0
 8018482:	6920      	ldr	r0, [r4, #16]
 8018484:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018488:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801848c:	f7f8 fee0 	bl	8011250 <run_xrce_session>
 8018490:	6920      	ldr	r0, [r4, #16]
 8018492:	6932      	ldr	r2, [r6, #16]
 8018494:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018498:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801849c:	6819      	ldr	r1, [r3, #0]
 801849e:	f7fb fb9b 	bl	8013bd8 <uxr_buffer_delete_entity>
 80184a2:	4602      	mov	r2, r0
 80184a4:	6920      	ldr	r0, [r4, #16]
 80184a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80184aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80184ae:	f7f8 fecf 	bl	8011250 <run_xrce_session>
 80184b2:	2800      	cmp	r0, #0
 80184b4:	4628      	mov	r0, r5
 80184b6:	bf14      	ite	ne
 80184b8:	2400      	movne	r4, #0
 80184ba:	2402      	moveq	r4, #2
 80184bc:	f7f8 fe40 	bl	8011140 <rmw_uxrce_fini_service_memory>
 80184c0:	e7c5      	b.n	801844e <rmw_destroy_service+0x12>
 80184c2:	bf00      	nop

080184c4 <rmw_destroy_subscription>:
 80184c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184c6:	b128      	cbz	r0, 80184d4 <rmw_destroy_subscription+0x10>
 80184c8:	4604      	mov	r4, r0
 80184ca:	6800      	ldr	r0, [r0, #0]
 80184cc:	460d      	mov	r5, r1
 80184ce:	f7f8 ff3f 	bl	8011350 <is_uxrce_rmw_identifier_valid>
 80184d2:	b910      	cbnz	r0, 80184da <rmw_destroy_subscription+0x16>
 80184d4:	2401      	movs	r4, #1
 80184d6:	4620      	mov	r0, r4
 80184d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184da:	6863      	ldr	r3, [r4, #4]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d0f9      	beq.n	80184d4 <rmw_destroy_subscription+0x10>
 80184e0:	2d00      	cmp	r5, #0
 80184e2:	d0f7      	beq.n	80184d4 <rmw_destroy_subscription+0x10>
 80184e4:	6828      	ldr	r0, [r5, #0]
 80184e6:	f7f8 ff33 	bl	8011350 <is_uxrce_rmw_identifier_valid>
 80184ea:	2800      	cmp	r0, #0
 80184ec:	d0f2      	beq.n	80184d4 <rmw_destroy_subscription+0x10>
 80184ee:	686c      	ldr	r4, [r5, #4]
 80184f0:	2c00      	cmp	r4, #0
 80184f2:	d0ef      	beq.n	80184d4 <rmw_destroy_subscription+0x10>
 80184f4:	6a26      	ldr	r6, [r4, #32]
 80184f6:	6962      	ldr	r2, [r4, #20]
 80184f8:	6930      	ldr	r0, [r6, #16]
 80184fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80184fe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018502:	6819      	ldr	r1, [r3, #0]
 8018504:	f001 f98a 	bl	801981c <uxr_buffer_cancel_data>
 8018508:	4602      	mov	r2, r0
 801850a:	6930      	ldr	r0, [r6, #16]
 801850c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018510:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8018514:	f7f8 fe9c 	bl	8011250 <run_xrce_session>
 8018518:	69e0      	ldr	r0, [r4, #28]
 801851a:	f7ff fe5b 	bl	80181d4 <destroy_topic>
 801851e:	6a23      	ldr	r3, [r4, #32]
 8018520:	6962      	ldr	r2, [r4, #20]
 8018522:	6918      	ldr	r0, [r3, #16]
 8018524:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018528:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801852c:	6819      	ldr	r1, [r3, #0]
 801852e:	f7fb fb53 	bl	8013bd8 <uxr_buffer_delete_entity>
 8018532:	6a23      	ldr	r3, [r4, #32]
 8018534:	6922      	ldr	r2, [r4, #16]
 8018536:	691b      	ldr	r3, [r3, #16]
 8018538:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 801853c:	4604      	mov	r4, r0
 801853e:	6809      	ldr	r1, [r1, #0]
 8018540:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8018544:	f7fb fb48 	bl	8013bd8 <uxr_buffer_delete_entity>
 8018548:	6937      	ldr	r7, [r6, #16]
 801854a:	4622      	mov	r2, r4
 801854c:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8018550:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8018554:	4604      	mov	r4, r0
 8018556:	4638      	mov	r0, r7
 8018558:	f7f8 fe7a 	bl	8011250 <run_xrce_session>
 801855c:	6936      	ldr	r6, [r6, #16]
 801855e:	4622      	mov	r2, r4
 8018560:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8018564:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8018568:	4604      	mov	r4, r0
 801856a:	4630      	mov	r0, r6
 801856c:	f7f8 fe70 	bl	8011250 <run_xrce_session>
 8018570:	b12c      	cbz	r4, 801857e <rmw_destroy_subscription+0xba>
 8018572:	b120      	cbz	r0, 801857e <rmw_destroy_subscription+0xba>
 8018574:	2400      	movs	r4, #0
 8018576:	4628      	mov	r0, r5
 8018578:	f7f8 fdcc 	bl	8011114 <rmw_uxrce_fini_subscription_memory>
 801857c:	e7ab      	b.n	80184d6 <rmw_destroy_subscription+0x12>
 801857e:	2402      	movs	r4, #2
 8018580:	e7f9      	b.n	8018576 <rmw_destroy_subscription+0xb2>
 8018582:	bf00      	nop

08018584 <rmw_uxrce_transport_init>:
 8018584:	b508      	push	{r3, lr}
 8018586:	b108      	cbz	r0, 801858c <rmw_uxrce_transport_init+0x8>
 8018588:	f100 0210 	add.w	r2, r0, #16
 801858c:	b139      	cbz	r1, 801859e <rmw_uxrce_transport_init+0x1a>
 801858e:	6949      	ldr	r1, [r1, #20]
 8018590:	4610      	mov	r0, r2
 8018592:	f000 fbd5 	bl	8018d40 <uxr_init_custom_transport>
 8018596:	f080 0001 	eor.w	r0, r0, #1
 801859a:	b2c0      	uxtb	r0, r0
 801859c:	bd08      	pop	{r3, pc}
 801859e:	4b04      	ldr	r3, [pc, #16]	; (80185b0 <rmw_uxrce_transport_init+0x2c>)
 80185a0:	4610      	mov	r0, r2
 80185a2:	6859      	ldr	r1, [r3, #4]
 80185a4:	f000 fbcc 	bl	8018d40 <uxr_init_custom_transport>
 80185a8:	f080 0001 	eor.w	r0, r0, #1
 80185ac:	b2c0      	uxtb	r0, r0
 80185ae:	bd08      	pop	{r3, pc}
 80185b0:	20011884 	.word	0x20011884

080185b4 <rmw_uros_epoch_nanos>:
 80185b4:	4b05      	ldr	r3, [pc, #20]	; (80185cc <rmw_uros_epoch_nanos+0x18>)
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	b123      	cbz	r3, 80185c4 <rmw_uros_epoch_nanos+0x10>
 80185ba:	6898      	ldr	r0, [r3, #8]
 80185bc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80185c0:	f7fb bda8 	b.w	8014114 <uxr_epoch_nanos>
 80185c4:	2000      	movs	r0, #0
 80185c6:	2100      	movs	r1, #0
 80185c8:	4770      	bx	lr
 80185ca:	bf00      	nop
 80185cc:	2001619c 	.word	0x2001619c

080185d0 <rosidl_runtime_c__float__Sequence__init>:
 80185d0:	b530      	push	{r4, r5, lr}
 80185d2:	4604      	mov	r4, r0
 80185d4:	b087      	sub	sp, #28
 80185d6:	b130      	cbz	r0, 80185e6 <rosidl_runtime_c__float__Sequence__init+0x16>
 80185d8:	460d      	mov	r5, r1
 80185da:	b931      	cbnz	r1, 80185ea <rosidl_runtime_c__float__Sequence__init+0x1a>
 80185dc:	4608      	mov	r0, r1
 80185de:	e9c4 0500 	strd	r0, r5, [r4]
 80185e2:	60a5      	str	r5, [r4, #8]
 80185e4:	2001      	movs	r0, #1
 80185e6:	b007      	add	sp, #28
 80185e8:	bd30      	pop	{r4, r5, pc}
 80185ea:	a801      	add	r0, sp, #4
 80185ec:	f7f8 f9fe 	bl	80109ec <rcutils_get_default_allocator>
 80185f0:	9b01      	ldr	r3, [sp, #4]
 80185f2:	9905      	ldr	r1, [sp, #20]
 80185f4:	00a8      	lsls	r0, r5, #2
 80185f6:	4798      	blx	r3
 80185f8:	2800      	cmp	r0, #0
 80185fa:	d1f0      	bne.n	80185de <rosidl_runtime_c__float__Sequence__init+0xe>
 80185fc:	e7f3      	b.n	80185e6 <rosidl_runtime_c__float__Sequence__init+0x16>
 80185fe:	bf00      	nop

08018600 <rosidl_runtime_c__float__Sequence__fini>:
 8018600:	b188      	cbz	r0, 8018626 <rosidl_runtime_c__float__Sequence__fini+0x26>
 8018602:	b510      	push	{r4, lr}
 8018604:	6803      	ldr	r3, [r0, #0]
 8018606:	b086      	sub	sp, #24
 8018608:	4604      	mov	r4, r0
 801860a:	b153      	cbz	r3, 8018622 <rosidl_runtime_c__float__Sequence__fini+0x22>
 801860c:	a801      	add	r0, sp, #4
 801860e:	f7f8 f9ed 	bl	80109ec <rcutils_get_default_allocator>
 8018612:	9b02      	ldr	r3, [sp, #8]
 8018614:	9905      	ldr	r1, [sp, #20]
 8018616:	6820      	ldr	r0, [r4, #0]
 8018618:	4798      	blx	r3
 801861a:	2300      	movs	r3, #0
 801861c:	e9c4 3300 	strd	r3, r3, [r4]
 8018620:	60a3      	str	r3, [r4, #8]
 8018622:	b006      	add	sp, #24
 8018624:	bd10      	pop	{r4, pc}
 8018626:	4770      	bx	lr

08018628 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8018628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801862c:	6805      	ldr	r5, [r0, #0]
 801862e:	4604      	mov	r4, r0
 8018630:	4628      	mov	r0, r5
 8018632:	460e      	mov	r6, r1
 8018634:	f7e7 fdcc 	bl	80001d0 <strcmp>
 8018638:	b1c8      	cbz	r0, 801866e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801863a:	4b11      	ldr	r3, [pc, #68]	; (8018680 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	429d      	cmp	r5, r3
 8018640:	d112      	bne.n	8018668 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8018642:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018646:	f8d8 4000 	ldr.w	r4, [r8]
 801864a:	b16c      	cbz	r4, 8018668 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801864c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018650:	2700      	movs	r7, #0
 8018652:	3d04      	subs	r5, #4
 8018654:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8018658:	4631      	mov	r1, r6
 801865a:	f7e7 fdb9 	bl	80001d0 <strcmp>
 801865e:	00bb      	lsls	r3, r7, #2
 8018660:	b140      	cbz	r0, 8018674 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8018662:	3701      	adds	r7, #1
 8018664:	42bc      	cmp	r4, r7
 8018666:	d1f5      	bne.n	8018654 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8018668:	2000      	movs	r0, #0
 801866a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801866e:	4620      	mov	r0, r4
 8018670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018674:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801867c:	58d3      	ldr	r3, [r2, r3]
 801867e:	4718      	bx	r3
 8018680:	200009b4 	.word	0x200009b4

08018684 <sensor_msgs__msg__BatteryState__init>:
 8018684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018688:	4605      	mov	r5, r0
 801868a:	2800      	cmp	r0, #0
 801868c:	d048      	beq.n	8018720 <sensor_msgs__msg__BatteryState__init+0x9c>
 801868e:	f000 f89d 	bl	80187cc <std_msgs__msg__Header__init>
 8018692:	4604      	mov	r4, r0
 8018694:	b370      	cbz	r0, 80186f4 <sensor_msgs__msg__BatteryState__init+0x70>
 8018696:	f105 0634 	add.w	r6, r5, #52	; 0x34
 801869a:	2100      	movs	r1, #0
 801869c:	4630      	mov	r0, r6
 801869e:	f7ff ff97 	bl	80185d0 <rosidl_runtime_c__float__Sequence__init>
 80186a2:	4604      	mov	r4, r0
 80186a4:	2800      	cmp	r0, #0
 80186a6:	d047      	beq.n	8018738 <sensor_msgs__msg__BatteryState__init+0xb4>
 80186a8:	f105 0740 	add.w	r7, r5, #64	; 0x40
 80186ac:	2100      	movs	r1, #0
 80186ae:	4638      	mov	r0, r7
 80186b0:	f7ff ff8e 	bl	80185d0 <rosidl_runtime_c__float__Sequence__init>
 80186b4:	4604      	mov	r4, r0
 80186b6:	b3b8      	cbz	r0, 8018728 <sensor_msgs__msg__BatteryState__init+0xa4>
 80186b8:	f105 084c 	add.w	r8, r5, #76	; 0x4c
 80186bc:	4640      	mov	r0, r8
 80186be:	f002 fabf 	bl	801ac40 <rosidl_runtime_c__String__init>
 80186c2:	4604      	mov	r4, r0
 80186c4:	b3e8      	cbz	r0, 8018742 <sensor_msgs__msg__BatteryState__init+0xbe>
 80186c6:	f105 0958 	add.w	r9, r5, #88	; 0x58
 80186ca:	4648      	mov	r0, r9
 80186cc:	f002 fab8 	bl	801ac40 <rosidl_runtime_c__String__init>
 80186d0:	4604      	mov	r4, r0
 80186d2:	bb10      	cbnz	r0, 801871a <sensor_msgs__msg__BatteryState__init+0x96>
 80186d4:	4628      	mov	r0, r5
 80186d6:	f000 f89d 	bl	8018814 <std_msgs__msg__Header__fini>
 80186da:	4630      	mov	r0, r6
 80186dc:	f7ff ff90 	bl	8018600 <rosidl_runtime_c__float__Sequence__fini>
 80186e0:	4638      	mov	r0, r7
 80186e2:	f7ff ff8d 	bl	8018600 <rosidl_runtime_c__float__Sequence__fini>
 80186e6:	4640      	mov	r0, r8
 80186e8:	f002 fac0 	bl	801ac6c <rosidl_runtime_c__String__fini>
 80186ec:	4648      	mov	r0, r9
 80186ee:	f002 fabd 	bl	801ac6c <rosidl_runtime_c__String__fini>
 80186f2:	e012      	b.n	801871a <sensor_msgs__msg__BatteryState__init+0x96>
 80186f4:	4628      	mov	r0, r5
 80186f6:	f000 f88d 	bl	8018814 <std_msgs__msg__Header__fini>
 80186fa:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80186fe:	f7ff ff7f 	bl	8018600 <rosidl_runtime_c__float__Sequence__fini>
 8018702:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8018706:	f7ff ff7b 	bl	8018600 <rosidl_runtime_c__float__Sequence__fini>
 801870a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 801870e:	f002 faad 	bl	801ac6c <rosidl_runtime_c__String__fini>
 8018712:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8018716:	f002 faa9 	bl	801ac6c <rosidl_runtime_c__String__fini>
 801871a:	4620      	mov	r0, r4
 801871c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018720:	4604      	mov	r4, r0
 8018722:	4620      	mov	r0, r4
 8018724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018728:	4628      	mov	r0, r5
 801872a:	f000 f873 	bl	8018814 <std_msgs__msg__Header__fini>
 801872e:	4630      	mov	r0, r6
 8018730:	f7ff ff66 	bl	8018600 <rosidl_runtime_c__float__Sequence__fini>
 8018734:	4638      	mov	r0, r7
 8018736:	e7e6      	b.n	8018706 <sensor_msgs__msg__BatteryState__init+0x82>
 8018738:	4628      	mov	r0, r5
 801873a:	f000 f86b 	bl	8018814 <std_msgs__msg__Header__fini>
 801873e:	4630      	mov	r0, r6
 8018740:	e7dd      	b.n	80186fe <sensor_msgs__msg__BatteryState__init+0x7a>
 8018742:	4628      	mov	r0, r5
 8018744:	f000 f866 	bl	8018814 <std_msgs__msg__Header__fini>
 8018748:	4630      	mov	r0, r6
 801874a:	f7ff ff59 	bl	8018600 <rosidl_runtime_c__float__Sequence__fini>
 801874e:	4638      	mov	r0, r7
 8018750:	f7ff ff56 	bl	8018600 <rosidl_runtime_c__float__Sequence__fini>
 8018754:	4640      	mov	r0, r8
 8018756:	f002 fa89 	bl	801ac6c <rosidl_runtime_c__String__fini>
 801875a:	f105 0058 	add.w	r0, r5, #88	; 0x58
 801875e:	f002 fa85 	bl	801ac6c <rosidl_runtime_c__String__fini>
 8018762:	e7da      	b.n	801871a <sensor_msgs__msg__BatteryState__init+0x96>

08018764 <sensor_msgs__msg__BatteryState__fini>:
 8018764:	b1a8      	cbz	r0, 8018792 <sensor_msgs__msg__BatteryState__fini+0x2e>
 8018766:	b510      	push	{r4, lr}
 8018768:	4604      	mov	r4, r0
 801876a:	f000 f853 	bl	8018814 <std_msgs__msg__Header__fini>
 801876e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8018772:	f7ff ff45 	bl	8018600 <rosidl_runtime_c__float__Sequence__fini>
 8018776:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801877a:	f7ff ff41 	bl	8018600 <rosidl_runtime_c__float__Sequence__fini>
 801877e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8018782:	f002 fa73 	bl	801ac6c <rosidl_runtime_c__String__fini>
 8018786:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801878a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801878e:	f002 ba6d 	b.w	801ac6c <rosidl_runtime_c__String__fini>
 8018792:	4770      	bx	lr

08018794 <sensor_msgs__msg__Temperature__init>:
 8018794:	b538      	push	{r3, r4, r5, lr}
 8018796:	4604      	mov	r4, r0
 8018798:	b128      	cbz	r0, 80187a6 <sensor_msgs__msg__Temperature__init+0x12>
 801879a:	f000 f817 	bl	80187cc <std_msgs__msg__Header__init>
 801879e:	4605      	mov	r5, r0
 80187a0:	b120      	cbz	r0, 80187ac <sensor_msgs__msg__Temperature__init+0x18>
 80187a2:	4628      	mov	r0, r5
 80187a4:	bd38      	pop	{r3, r4, r5, pc}
 80187a6:	4605      	mov	r5, r0
 80187a8:	4628      	mov	r0, r5
 80187aa:	bd38      	pop	{r3, r4, r5, pc}
 80187ac:	4620      	mov	r0, r4
 80187ae:	f000 f831 	bl	8018814 <std_msgs__msg__Header__fini>
 80187b2:	4628      	mov	r0, r5
 80187b4:	bd38      	pop	{r3, r4, r5, pc}
 80187b6:	bf00      	nop

080187b8 <sensor_msgs__msg__Temperature__fini>:
 80187b8:	b108      	cbz	r0, 80187be <sensor_msgs__msg__Temperature__fini+0x6>
 80187ba:	f000 b82b 	b.w	8018814 <std_msgs__msg__Header__fini>
 80187be:	4770      	bx	lr

080187c0 <std_msgs__msg__ColorRGBA__init>:
 80187c0:	3800      	subs	r0, #0
 80187c2:	bf18      	it	ne
 80187c4:	2001      	movne	r0, #1
 80187c6:	4770      	bx	lr

080187c8 <std_msgs__msg__ColorRGBA__fini>:
 80187c8:	4770      	bx	lr
 80187ca:	bf00      	nop

080187cc <std_msgs__msg__Header__init>:
 80187cc:	b570      	push	{r4, r5, r6, lr}
 80187ce:	4605      	mov	r5, r0
 80187d0:	b1a8      	cbz	r0, 80187fe <std_msgs__msg__Header__init+0x32>
 80187d2:	f000 f837 	bl	8018844 <builtin_interfaces__msg__Time__init>
 80187d6:	4604      	mov	r4, r0
 80187d8:	b140      	cbz	r0, 80187ec <std_msgs__msg__Header__init+0x20>
 80187da:	f105 0608 	add.w	r6, r5, #8
 80187de:	4630      	mov	r0, r6
 80187e0:	f002 fa2e 	bl	801ac40 <rosidl_runtime_c__String__init>
 80187e4:	4604      	mov	r4, r0
 80187e6:	b168      	cbz	r0, 8018804 <std_msgs__msg__Header__init+0x38>
 80187e8:	4620      	mov	r0, r4
 80187ea:	bd70      	pop	{r4, r5, r6, pc}
 80187ec:	4628      	mov	r0, r5
 80187ee:	f000 f82d 	bl	801884c <builtin_interfaces__msg__Time__fini>
 80187f2:	f105 0008 	add.w	r0, r5, #8
 80187f6:	f002 fa39 	bl	801ac6c <rosidl_runtime_c__String__fini>
 80187fa:	4620      	mov	r0, r4
 80187fc:	bd70      	pop	{r4, r5, r6, pc}
 80187fe:	4604      	mov	r4, r0
 8018800:	4620      	mov	r0, r4
 8018802:	bd70      	pop	{r4, r5, r6, pc}
 8018804:	4628      	mov	r0, r5
 8018806:	f000 f821 	bl	801884c <builtin_interfaces__msg__Time__fini>
 801880a:	4630      	mov	r0, r6
 801880c:	f002 fa2e 	bl	801ac6c <rosidl_runtime_c__String__fini>
 8018810:	e7ea      	b.n	80187e8 <std_msgs__msg__Header__init+0x1c>
 8018812:	bf00      	nop

08018814 <std_msgs__msg__Header__fini>:
 8018814:	b148      	cbz	r0, 801882a <std_msgs__msg__Header__fini+0x16>
 8018816:	b510      	push	{r4, lr}
 8018818:	4604      	mov	r4, r0
 801881a:	f000 f817 	bl	801884c <builtin_interfaces__msg__Time__fini>
 801881e:	f104 0008 	add.w	r0, r4, #8
 8018822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018826:	f002 ba21 	b.w	801ac6c <rosidl_runtime_c__String__fini>
 801882a:	4770      	bx	lr

0801882c <std_msgs__msg__Int32__init>:
 801882c:	3800      	subs	r0, #0
 801882e:	bf18      	it	ne
 8018830:	2001      	movne	r0, #1
 8018832:	4770      	bx	lr

08018834 <std_msgs__msg__Int32__fini>:
 8018834:	4770      	bx	lr
 8018836:	bf00      	nop

08018838 <std_msgs__msg__Int64__init>:
 8018838:	3800      	subs	r0, #0
 801883a:	bf18      	it	ne
 801883c:	2001      	movne	r0, #1
 801883e:	4770      	bx	lr

08018840 <std_msgs__msg__Int64__fini>:
 8018840:	4770      	bx	lr
 8018842:	bf00      	nop

08018844 <builtin_interfaces__msg__Time__init>:
 8018844:	3800      	subs	r0, #0
 8018846:	bf18      	it	ne
 8018848:	2001      	movne	r0, #1
 801884a:	4770      	bx	lr

0801884c <builtin_interfaces__msg__Time__fini>:
 801884c:	4770      	bx	lr
 801884e:	bf00      	nop

08018850 <ucdr_serialize_endian_array_char>:
 8018850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018854:	4619      	mov	r1, r3
 8018856:	461f      	mov	r7, r3
 8018858:	4605      	mov	r5, r0
 801885a:	4690      	mov	r8, r2
 801885c:	f7fb f874 	bl	8013948 <ucdr_check_buffer_available_for>
 8018860:	b9e0      	cbnz	r0, 801889c <ucdr_serialize_endian_array_char+0x4c>
 8018862:	463e      	mov	r6, r7
 8018864:	e009      	b.n	801887a <ucdr_serialize_endian_array_char+0x2a>
 8018866:	68a8      	ldr	r0, [r5, #8]
 8018868:	f002 fc4e 	bl	801b108 <memcpy>
 801886c:	68ab      	ldr	r3, [r5, #8]
 801886e:	6928      	ldr	r0, [r5, #16]
 8018870:	4423      	add	r3, r4
 8018872:	4420      	add	r0, r4
 8018874:	1b36      	subs	r6, r6, r4
 8018876:	60ab      	str	r3, [r5, #8]
 8018878:	6128      	str	r0, [r5, #16]
 801887a:	4631      	mov	r1, r6
 801887c:	2201      	movs	r2, #1
 801887e:	4628      	mov	r0, r5
 8018880:	f7fb f8ea 	bl	8013a58 <ucdr_check_final_buffer_behavior_array>
 8018884:	1bb9      	subs	r1, r7, r6
 8018886:	4441      	add	r1, r8
 8018888:	4604      	mov	r4, r0
 801888a:	4602      	mov	r2, r0
 801888c:	2800      	cmp	r0, #0
 801888e:	d1ea      	bne.n	8018866 <ucdr_serialize_endian_array_char+0x16>
 8018890:	2301      	movs	r3, #1
 8018892:	7da8      	ldrb	r0, [r5, #22]
 8018894:	756b      	strb	r3, [r5, #21]
 8018896:	4058      	eors	r0, r3
 8018898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801889c:	463a      	mov	r2, r7
 801889e:	68a8      	ldr	r0, [r5, #8]
 80188a0:	4641      	mov	r1, r8
 80188a2:	f002 fc31 	bl	801b108 <memcpy>
 80188a6:	68aa      	ldr	r2, [r5, #8]
 80188a8:	692b      	ldr	r3, [r5, #16]
 80188aa:	443a      	add	r2, r7
 80188ac:	443b      	add	r3, r7
 80188ae:	60aa      	str	r2, [r5, #8]
 80188b0:	612b      	str	r3, [r5, #16]
 80188b2:	e7ed      	b.n	8018890 <ucdr_serialize_endian_array_char+0x40>

080188b4 <ucdr_deserialize_endian_array_char>:
 80188b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188b8:	4619      	mov	r1, r3
 80188ba:	461f      	mov	r7, r3
 80188bc:	4605      	mov	r5, r0
 80188be:	4690      	mov	r8, r2
 80188c0:	f7fb f842 	bl	8013948 <ucdr_check_buffer_available_for>
 80188c4:	b9e0      	cbnz	r0, 8018900 <ucdr_deserialize_endian_array_char+0x4c>
 80188c6:	463e      	mov	r6, r7
 80188c8:	e009      	b.n	80188de <ucdr_deserialize_endian_array_char+0x2a>
 80188ca:	68a9      	ldr	r1, [r5, #8]
 80188cc:	f002 fc1c 	bl	801b108 <memcpy>
 80188d0:	68ab      	ldr	r3, [r5, #8]
 80188d2:	6928      	ldr	r0, [r5, #16]
 80188d4:	4423      	add	r3, r4
 80188d6:	4420      	add	r0, r4
 80188d8:	1b36      	subs	r6, r6, r4
 80188da:	60ab      	str	r3, [r5, #8]
 80188dc:	6128      	str	r0, [r5, #16]
 80188de:	2201      	movs	r2, #1
 80188e0:	4631      	mov	r1, r6
 80188e2:	4628      	mov	r0, r5
 80188e4:	f7fb f8b8 	bl	8013a58 <ucdr_check_final_buffer_behavior_array>
 80188e8:	4604      	mov	r4, r0
 80188ea:	1bb8      	subs	r0, r7, r6
 80188ec:	4440      	add	r0, r8
 80188ee:	4622      	mov	r2, r4
 80188f0:	2c00      	cmp	r4, #0
 80188f2:	d1ea      	bne.n	80188ca <ucdr_deserialize_endian_array_char+0x16>
 80188f4:	2301      	movs	r3, #1
 80188f6:	7da8      	ldrb	r0, [r5, #22]
 80188f8:	756b      	strb	r3, [r5, #21]
 80188fa:	4058      	eors	r0, r3
 80188fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018900:	463a      	mov	r2, r7
 8018902:	68a9      	ldr	r1, [r5, #8]
 8018904:	4640      	mov	r0, r8
 8018906:	f002 fbff 	bl	801b108 <memcpy>
 801890a:	68aa      	ldr	r2, [r5, #8]
 801890c:	692b      	ldr	r3, [r5, #16]
 801890e:	443a      	add	r2, r7
 8018910:	443b      	add	r3, r7
 8018912:	60aa      	str	r2, [r5, #8]
 8018914:	612b      	str	r3, [r5, #16]
 8018916:	e7ed      	b.n	80188f4 <ucdr_deserialize_endian_array_char+0x40>

08018918 <ucdr_serialize_array_uint8_t>:
 8018918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801891c:	4688      	mov	r8, r1
 801891e:	4611      	mov	r1, r2
 8018920:	4617      	mov	r7, r2
 8018922:	4605      	mov	r5, r0
 8018924:	f7fb f810 	bl	8013948 <ucdr_check_buffer_available_for>
 8018928:	b9e0      	cbnz	r0, 8018964 <ucdr_serialize_array_uint8_t+0x4c>
 801892a:	463e      	mov	r6, r7
 801892c:	e009      	b.n	8018942 <ucdr_serialize_array_uint8_t+0x2a>
 801892e:	68a8      	ldr	r0, [r5, #8]
 8018930:	f002 fbea 	bl	801b108 <memcpy>
 8018934:	68aa      	ldr	r2, [r5, #8]
 8018936:	692b      	ldr	r3, [r5, #16]
 8018938:	4422      	add	r2, r4
 801893a:	4423      	add	r3, r4
 801893c:	1b36      	subs	r6, r6, r4
 801893e:	60aa      	str	r2, [r5, #8]
 8018940:	612b      	str	r3, [r5, #16]
 8018942:	4631      	mov	r1, r6
 8018944:	2201      	movs	r2, #1
 8018946:	4628      	mov	r0, r5
 8018948:	f7fb f886 	bl	8013a58 <ucdr_check_final_buffer_behavior_array>
 801894c:	1bb9      	subs	r1, r7, r6
 801894e:	4441      	add	r1, r8
 8018950:	4604      	mov	r4, r0
 8018952:	4602      	mov	r2, r0
 8018954:	2800      	cmp	r0, #0
 8018956:	d1ea      	bne.n	801892e <ucdr_serialize_array_uint8_t+0x16>
 8018958:	2301      	movs	r3, #1
 801895a:	7da8      	ldrb	r0, [r5, #22]
 801895c:	756b      	strb	r3, [r5, #21]
 801895e:	4058      	eors	r0, r3
 8018960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018964:	463a      	mov	r2, r7
 8018966:	68a8      	ldr	r0, [r5, #8]
 8018968:	4641      	mov	r1, r8
 801896a:	f002 fbcd 	bl	801b108 <memcpy>
 801896e:	68aa      	ldr	r2, [r5, #8]
 8018970:	692b      	ldr	r3, [r5, #16]
 8018972:	443a      	add	r2, r7
 8018974:	443b      	add	r3, r7
 8018976:	60aa      	str	r2, [r5, #8]
 8018978:	612b      	str	r3, [r5, #16]
 801897a:	e7ed      	b.n	8018958 <ucdr_serialize_array_uint8_t+0x40>

0801897c <ucdr_serialize_endian_array_uint8_t>:
 801897c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018980:	4619      	mov	r1, r3
 8018982:	461f      	mov	r7, r3
 8018984:	4605      	mov	r5, r0
 8018986:	4690      	mov	r8, r2
 8018988:	f7fa ffde 	bl	8013948 <ucdr_check_buffer_available_for>
 801898c:	b9e0      	cbnz	r0, 80189c8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801898e:	463e      	mov	r6, r7
 8018990:	e009      	b.n	80189a6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8018992:	68a8      	ldr	r0, [r5, #8]
 8018994:	f002 fbb8 	bl	801b108 <memcpy>
 8018998:	68ab      	ldr	r3, [r5, #8]
 801899a:	6928      	ldr	r0, [r5, #16]
 801899c:	4423      	add	r3, r4
 801899e:	4420      	add	r0, r4
 80189a0:	1b36      	subs	r6, r6, r4
 80189a2:	60ab      	str	r3, [r5, #8]
 80189a4:	6128      	str	r0, [r5, #16]
 80189a6:	4631      	mov	r1, r6
 80189a8:	2201      	movs	r2, #1
 80189aa:	4628      	mov	r0, r5
 80189ac:	f7fb f854 	bl	8013a58 <ucdr_check_final_buffer_behavior_array>
 80189b0:	1bb9      	subs	r1, r7, r6
 80189b2:	4441      	add	r1, r8
 80189b4:	4604      	mov	r4, r0
 80189b6:	4602      	mov	r2, r0
 80189b8:	2800      	cmp	r0, #0
 80189ba:	d1ea      	bne.n	8018992 <ucdr_serialize_endian_array_uint8_t+0x16>
 80189bc:	2301      	movs	r3, #1
 80189be:	7da8      	ldrb	r0, [r5, #22]
 80189c0:	756b      	strb	r3, [r5, #21]
 80189c2:	4058      	eors	r0, r3
 80189c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189c8:	463a      	mov	r2, r7
 80189ca:	68a8      	ldr	r0, [r5, #8]
 80189cc:	4641      	mov	r1, r8
 80189ce:	f002 fb9b 	bl	801b108 <memcpy>
 80189d2:	68aa      	ldr	r2, [r5, #8]
 80189d4:	692b      	ldr	r3, [r5, #16]
 80189d6:	443a      	add	r2, r7
 80189d8:	443b      	add	r3, r7
 80189da:	60aa      	str	r2, [r5, #8]
 80189dc:	612b      	str	r3, [r5, #16]
 80189de:	e7ed      	b.n	80189bc <ucdr_serialize_endian_array_uint8_t+0x40>

080189e0 <ucdr_deserialize_array_uint8_t>:
 80189e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189e4:	4688      	mov	r8, r1
 80189e6:	4611      	mov	r1, r2
 80189e8:	4617      	mov	r7, r2
 80189ea:	4605      	mov	r5, r0
 80189ec:	f7fa ffac 	bl	8013948 <ucdr_check_buffer_available_for>
 80189f0:	b9e0      	cbnz	r0, 8018a2c <ucdr_deserialize_array_uint8_t+0x4c>
 80189f2:	463e      	mov	r6, r7
 80189f4:	e009      	b.n	8018a0a <ucdr_deserialize_array_uint8_t+0x2a>
 80189f6:	68a9      	ldr	r1, [r5, #8]
 80189f8:	f002 fb86 	bl	801b108 <memcpy>
 80189fc:	68aa      	ldr	r2, [r5, #8]
 80189fe:	692b      	ldr	r3, [r5, #16]
 8018a00:	4422      	add	r2, r4
 8018a02:	4423      	add	r3, r4
 8018a04:	1b36      	subs	r6, r6, r4
 8018a06:	60aa      	str	r2, [r5, #8]
 8018a08:	612b      	str	r3, [r5, #16]
 8018a0a:	2201      	movs	r2, #1
 8018a0c:	4631      	mov	r1, r6
 8018a0e:	4628      	mov	r0, r5
 8018a10:	f7fb f822 	bl	8013a58 <ucdr_check_final_buffer_behavior_array>
 8018a14:	4604      	mov	r4, r0
 8018a16:	1bb8      	subs	r0, r7, r6
 8018a18:	4440      	add	r0, r8
 8018a1a:	4622      	mov	r2, r4
 8018a1c:	2c00      	cmp	r4, #0
 8018a1e:	d1ea      	bne.n	80189f6 <ucdr_deserialize_array_uint8_t+0x16>
 8018a20:	2301      	movs	r3, #1
 8018a22:	7da8      	ldrb	r0, [r5, #22]
 8018a24:	756b      	strb	r3, [r5, #21]
 8018a26:	4058      	eors	r0, r3
 8018a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a2c:	463a      	mov	r2, r7
 8018a2e:	68a9      	ldr	r1, [r5, #8]
 8018a30:	4640      	mov	r0, r8
 8018a32:	f002 fb69 	bl	801b108 <memcpy>
 8018a36:	68aa      	ldr	r2, [r5, #8]
 8018a38:	692b      	ldr	r3, [r5, #16]
 8018a3a:	443a      	add	r2, r7
 8018a3c:	443b      	add	r3, r7
 8018a3e:	60aa      	str	r2, [r5, #8]
 8018a40:	612b      	str	r3, [r5, #16]
 8018a42:	e7ed      	b.n	8018a20 <ucdr_deserialize_array_uint8_t+0x40>

08018a44 <ucdr_deserialize_endian_array_uint8_t>:
 8018a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a48:	4619      	mov	r1, r3
 8018a4a:	461f      	mov	r7, r3
 8018a4c:	4605      	mov	r5, r0
 8018a4e:	4690      	mov	r8, r2
 8018a50:	f7fa ff7a 	bl	8013948 <ucdr_check_buffer_available_for>
 8018a54:	b9e0      	cbnz	r0, 8018a90 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8018a56:	463e      	mov	r6, r7
 8018a58:	e009      	b.n	8018a6e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8018a5a:	68a9      	ldr	r1, [r5, #8]
 8018a5c:	f002 fb54 	bl	801b108 <memcpy>
 8018a60:	68ab      	ldr	r3, [r5, #8]
 8018a62:	6928      	ldr	r0, [r5, #16]
 8018a64:	4423      	add	r3, r4
 8018a66:	4420      	add	r0, r4
 8018a68:	1b36      	subs	r6, r6, r4
 8018a6a:	60ab      	str	r3, [r5, #8]
 8018a6c:	6128      	str	r0, [r5, #16]
 8018a6e:	2201      	movs	r2, #1
 8018a70:	4631      	mov	r1, r6
 8018a72:	4628      	mov	r0, r5
 8018a74:	f7fa fff0 	bl	8013a58 <ucdr_check_final_buffer_behavior_array>
 8018a78:	4604      	mov	r4, r0
 8018a7a:	1bb8      	subs	r0, r7, r6
 8018a7c:	4440      	add	r0, r8
 8018a7e:	4622      	mov	r2, r4
 8018a80:	2c00      	cmp	r4, #0
 8018a82:	d1ea      	bne.n	8018a5a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8018a84:	2301      	movs	r3, #1
 8018a86:	7da8      	ldrb	r0, [r5, #22]
 8018a88:	756b      	strb	r3, [r5, #21]
 8018a8a:	4058      	eors	r0, r3
 8018a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a90:	463a      	mov	r2, r7
 8018a92:	68a9      	ldr	r1, [r5, #8]
 8018a94:	4640      	mov	r0, r8
 8018a96:	f002 fb37 	bl	801b108 <memcpy>
 8018a9a:	68aa      	ldr	r2, [r5, #8]
 8018a9c:	692b      	ldr	r3, [r5, #16]
 8018a9e:	443a      	add	r2, r7
 8018aa0:	443b      	add	r3, r7
 8018aa2:	60aa      	str	r2, [r5, #8]
 8018aa4:	612b      	str	r3, [r5, #16]
 8018aa6:	e7ed      	b.n	8018a84 <ucdr_deserialize_endian_array_uint8_t+0x40>

08018aa8 <ucdr_serialize_endian_array_float>:
 8018aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018aac:	4688      	mov	r8, r1
 8018aae:	2104      	movs	r1, #4
 8018ab0:	4604      	mov	r4, r0
 8018ab2:	4616      	mov	r6, r2
 8018ab4:	461f      	mov	r7, r3
 8018ab6:	f7fa ffa7 	bl	8013a08 <ucdr_buffer_alignment>
 8018aba:	4601      	mov	r1, r0
 8018abc:	4620      	mov	r0, r4
 8018abe:	7d65      	ldrb	r5, [r4, #21]
 8018ac0:	f7fa ffe6 	bl	8013a90 <ucdr_advance_buffer>
 8018ac4:	f1b8 0f01 	cmp.w	r8, #1
 8018ac8:	7565      	strb	r5, [r4, #21]
 8018aca:	d00f      	beq.n	8018aec <ucdr_serialize_endian_array_float+0x44>
 8018acc:	2500      	movs	r5, #0
 8018ace:	b147      	cbz	r7, 8018ae2 <ucdr_serialize_endian_array_float+0x3a>
 8018ad0:	ecb6 0a01 	vldmia	r6!, {s0}
 8018ad4:	4641      	mov	r1, r8
 8018ad6:	4620      	mov	r0, r4
 8018ad8:	3501      	adds	r5, #1
 8018ada:	f7fa fbdf 	bl	801329c <ucdr_serialize_endian_float>
 8018ade:	42af      	cmp	r7, r5
 8018ae0:	d1f6      	bne.n	8018ad0 <ucdr_serialize_endian_array_float+0x28>
 8018ae2:	7da0      	ldrb	r0, [r4, #22]
 8018ae4:	f080 0001 	eor.w	r0, r0, #1
 8018ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018aec:	00bf      	lsls	r7, r7, #2
 8018aee:	4639      	mov	r1, r7
 8018af0:	4620      	mov	r0, r4
 8018af2:	f7fa ff29 	bl	8013948 <ucdr_check_buffer_available_for>
 8018af6:	b9f8      	cbnz	r0, 8018b38 <ucdr_serialize_endian_array_float+0x90>
 8018af8:	46b8      	mov	r8, r7
 8018afa:	e00a      	b.n	8018b12 <ucdr_serialize_endian_array_float+0x6a>
 8018afc:	68a0      	ldr	r0, [r4, #8]
 8018afe:	f002 fb03 	bl	801b108 <memcpy>
 8018b02:	68a2      	ldr	r2, [r4, #8]
 8018b04:	6923      	ldr	r3, [r4, #16]
 8018b06:	442a      	add	r2, r5
 8018b08:	442b      	add	r3, r5
 8018b0a:	eba8 0805 	sub.w	r8, r8, r5
 8018b0e:	60a2      	str	r2, [r4, #8]
 8018b10:	6123      	str	r3, [r4, #16]
 8018b12:	4641      	mov	r1, r8
 8018b14:	2204      	movs	r2, #4
 8018b16:	4620      	mov	r0, r4
 8018b18:	f7fa ff9e 	bl	8013a58 <ucdr_check_final_buffer_behavior_array>
 8018b1c:	eba7 0108 	sub.w	r1, r7, r8
 8018b20:	4431      	add	r1, r6
 8018b22:	4605      	mov	r5, r0
 8018b24:	4602      	mov	r2, r0
 8018b26:	2800      	cmp	r0, #0
 8018b28:	d1e8      	bne.n	8018afc <ucdr_serialize_endian_array_float+0x54>
 8018b2a:	7da0      	ldrb	r0, [r4, #22]
 8018b2c:	2304      	movs	r3, #4
 8018b2e:	7563      	strb	r3, [r4, #21]
 8018b30:	f080 0001 	eor.w	r0, r0, #1
 8018b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b38:	463a      	mov	r2, r7
 8018b3a:	68a0      	ldr	r0, [r4, #8]
 8018b3c:	4631      	mov	r1, r6
 8018b3e:	f002 fae3 	bl	801b108 <memcpy>
 8018b42:	68a2      	ldr	r2, [r4, #8]
 8018b44:	6923      	ldr	r3, [r4, #16]
 8018b46:	443a      	add	r2, r7
 8018b48:	441f      	add	r7, r3
 8018b4a:	60a2      	str	r2, [r4, #8]
 8018b4c:	6127      	str	r7, [r4, #16]
 8018b4e:	e7ec      	b.n	8018b2a <ucdr_serialize_endian_array_float+0x82>

08018b50 <ucdr_deserialize_endian_array_float>:
 8018b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b54:	4688      	mov	r8, r1
 8018b56:	2104      	movs	r1, #4
 8018b58:	4605      	mov	r5, r0
 8018b5a:	4614      	mov	r4, r2
 8018b5c:	461f      	mov	r7, r3
 8018b5e:	f7fa ff53 	bl	8013a08 <ucdr_buffer_alignment>
 8018b62:	4601      	mov	r1, r0
 8018b64:	4628      	mov	r0, r5
 8018b66:	7d6e      	ldrb	r6, [r5, #21]
 8018b68:	f7fa ff92 	bl	8013a90 <ucdr_advance_buffer>
 8018b6c:	f1b8 0f01 	cmp.w	r8, #1
 8018b70:	756e      	strb	r6, [r5, #21]
 8018b72:	d010      	beq.n	8018b96 <ucdr_deserialize_endian_array_float+0x46>
 8018b74:	2600      	movs	r6, #0
 8018b76:	b14f      	cbz	r7, 8018b8c <ucdr_deserialize_endian_array_float+0x3c>
 8018b78:	4622      	mov	r2, r4
 8018b7a:	4641      	mov	r1, r8
 8018b7c:	4628      	mov	r0, r5
 8018b7e:	3601      	adds	r6, #1
 8018b80:	f7fa fcb6 	bl	80134f0 <ucdr_deserialize_endian_float>
 8018b84:	42b7      	cmp	r7, r6
 8018b86:	f104 0404 	add.w	r4, r4, #4
 8018b8a:	d1f5      	bne.n	8018b78 <ucdr_deserialize_endian_array_float+0x28>
 8018b8c:	7da8      	ldrb	r0, [r5, #22]
 8018b8e:	f080 0001 	eor.w	r0, r0, #1
 8018b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b96:	00bf      	lsls	r7, r7, #2
 8018b98:	4639      	mov	r1, r7
 8018b9a:	4628      	mov	r0, r5
 8018b9c:	f7fa fed4 	bl	8013948 <ucdr_check_buffer_available_for>
 8018ba0:	b9f8      	cbnz	r0, 8018be2 <ucdr_deserialize_endian_array_float+0x92>
 8018ba2:	46b8      	mov	r8, r7
 8018ba4:	e00a      	b.n	8018bbc <ucdr_deserialize_endian_array_float+0x6c>
 8018ba6:	68a9      	ldr	r1, [r5, #8]
 8018ba8:	f002 faae 	bl	801b108 <memcpy>
 8018bac:	68aa      	ldr	r2, [r5, #8]
 8018bae:	692b      	ldr	r3, [r5, #16]
 8018bb0:	4432      	add	r2, r6
 8018bb2:	4433      	add	r3, r6
 8018bb4:	eba8 0806 	sub.w	r8, r8, r6
 8018bb8:	60aa      	str	r2, [r5, #8]
 8018bba:	612b      	str	r3, [r5, #16]
 8018bbc:	2204      	movs	r2, #4
 8018bbe:	4641      	mov	r1, r8
 8018bc0:	4628      	mov	r0, r5
 8018bc2:	f7fa ff49 	bl	8013a58 <ucdr_check_final_buffer_behavior_array>
 8018bc6:	4606      	mov	r6, r0
 8018bc8:	eba7 0008 	sub.w	r0, r7, r8
 8018bcc:	4420      	add	r0, r4
 8018bce:	4632      	mov	r2, r6
 8018bd0:	2e00      	cmp	r6, #0
 8018bd2:	d1e8      	bne.n	8018ba6 <ucdr_deserialize_endian_array_float+0x56>
 8018bd4:	7da8      	ldrb	r0, [r5, #22]
 8018bd6:	2304      	movs	r3, #4
 8018bd8:	756b      	strb	r3, [r5, #21]
 8018bda:	f080 0001 	eor.w	r0, r0, #1
 8018bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018be2:	463a      	mov	r2, r7
 8018be4:	68a9      	ldr	r1, [r5, #8]
 8018be6:	4620      	mov	r0, r4
 8018be8:	f002 fa8e 	bl	801b108 <memcpy>
 8018bec:	68aa      	ldr	r2, [r5, #8]
 8018bee:	692b      	ldr	r3, [r5, #16]
 8018bf0:	443a      	add	r2, r7
 8018bf2:	441f      	add	r7, r3
 8018bf4:	60aa      	str	r2, [r5, #8]
 8018bf6:	612f      	str	r7, [r5, #16]
 8018bf8:	e7ec      	b.n	8018bd4 <ucdr_deserialize_endian_array_float+0x84>
 8018bfa:	bf00      	nop

08018bfc <ucdr_serialize_string>:
 8018bfc:	b510      	push	{r4, lr}
 8018bfe:	b082      	sub	sp, #8
 8018c00:	4604      	mov	r4, r0
 8018c02:	4608      	mov	r0, r1
 8018c04:	9101      	str	r1, [sp, #4]
 8018c06:	f7e7 faed 	bl	80001e4 <strlen>
 8018c0a:	9901      	ldr	r1, [sp, #4]
 8018c0c:	1c42      	adds	r2, r0, #1
 8018c0e:	4620      	mov	r0, r4
 8018c10:	b002      	add	sp, #8
 8018c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c16:	f7fa bf5b 	b.w	8013ad0 <ucdr_serialize_sequence_char>
 8018c1a:	bf00      	nop

08018c1c <ucdr_deserialize_string>:
 8018c1c:	b500      	push	{lr}
 8018c1e:	b083      	sub	sp, #12
 8018c20:	ab01      	add	r3, sp, #4
 8018c22:	f7fa ff67 	bl	8013af4 <ucdr_deserialize_sequence_char>
 8018c26:	b003      	add	sp, #12
 8018c28:	f85d fb04 	ldr.w	pc, [sp], #4

08018c2c <get_custom_error>:
 8018c2c:	4b01      	ldr	r3, [pc, #4]	; (8018c34 <get_custom_error+0x8>)
 8018c2e:	7818      	ldrb	r0, [r3, #0]
 8018c30:	4770      	bx	lr
 8018c32:	bf00      	nop
 8018c34:	200162e8 	.word	0x200162e8

08018c38 <recv_custom_msg>:
 8018c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c3c:	4693      	mov	fp, r2
 8018c3e:	b089      	sub	sp, #36	; 0x24
 8018c40:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8018c44:	9305      	str	r3, [sp, #20]
 8018c46:	468a      	mov	sl, r1
 8018c48:	2100      	movs	r1, #0
 8018c4a:	4604      	mov	r4, r0
 8018c4c:	f88d 101e 	strb.w	r1, [sp, #30]
 8018c50:	b322      	cbz	r2, 8018c9c <recv_custom_msg+0x64>
 8018c52:	f200 2902 	addw	r9, r0, #514	; 0x202
 8018c56:	f10d 081f 	add.w	r8, sp, #31
 8018c5a:	af05      	add	r7, sp, #20
 8018c5c:	f10d 061e 	add.w	r6, sp, #30
 8018c60:	f44f 7500 	mov.w	r5, #512	; 0x200
 8018c64:	e002      	b.n	8018c6c <recv_custom_msg+0x34>
 8018c66:	9b05      	ldr	r3, [sp, #20]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	dd0f      	ble.n	8018c8c <recv_custom_msg+0x54>
 8018c6c:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8018c70:	4623      	mov	r3, r4
 8018c72:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8018c76:	e9cd 5600 	strd	r5, r6, [sp]
 8018c7a:	4622      	mov	r2, r4
 8018c7c:	4648      	mov	r0, r9
 8018c7e:	f001 f8e1 	bl	8019e44 <uxr_read_framed_msg>
 8018c82:	2800      	cmp	r0, #0
 8018c84:	d0ef      	beq.n	8018c66 <recv_custom_msg+0x2e>
 8018c86:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8018c8a:	b1b3      	cbz	r3, 8018cba <recv_custom_msg+0x82>
 8018c8c:	4b0f      	ldr	r3, [pc, #60]	; (8018ccc <recv_custom_msg+0x94>)
 8018c8e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8018c92:	701a      	strb	r2, [r3, #0]
 8018c94:	2000      	movs	r0, #0
 8018c96:	b009      	add	sp, #36	; 0x24
 8018c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c9c:	f10d 021f 	add.w	r2, sp, #31
 8018ca0:	9200      	str	r2, [sp, #0]
 8018ca2:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8018ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018caa:	4601      	mov	r1, r0
 8018cac:	47a8      	blx	r5
 8018cae:	2800      	cmp	r0, #0
 8018cb0:	d0ec      	beq.n	8018c8c <recv_custom_msg+0x54>
 8018cb2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d1e8      	bne.n	8018c8c <recv_custom_msg+0x54>
 8018cba:	f8cb 0000 	str.w	r0, [fp]
 8018cbe:	2001      	movs	r0, #1
 8018cc0:	f8ca 4000 	str.w	r4, [sl]
 8018cc4:	b009      	add	sp, #36	; 0x24
 8018cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cca:	bf00      	nop
 8018ccc:	200162e8 	.word	0x200162e8

08018cd0 <send_custom_msg>:
 8018cd0:	b530      	push	{r4, r5, lr}
 8018cd2:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 8018cd6:	b087      	sub	sp, #28
 8018cd8:	4615      	mov	r5, r2
 8018cda:	b974      	cbnz	r4, 8018cfa <send_custom_msg+0x2a>
 8018cdc:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8018ce0:	f10d 0317 	add.w	r3, sp, #23
 8018ce4:	47a0      	blx	r4
 8018ce6:	b108      	cbz	r0, 8018cec <send_custom_msg+0x1c>
 8018ce8:	42a8      	cmp	r0, r5
 8018cea:	d015      	beq.n	8018d18 <send_custom_msg+0x48>
 8018cec:	4b0c      	ldr	r3, [pc, #48]	; (8018d20 <send_custom_msg+0x50>)
 8018cee:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8018cf2:	701a      	strb	r2, [r3, #0]
 8018cf4:	2000      	movs	r0, #0
 8018cf6:	b007      	add	sp, #28
 8018cf8:	bd30      	pop	{r4, r5, pc}
 8018cfa:	460b      	mov	r3, r1
 8018cfc:	2200      	movs	r2, #0
 8018cfe:	f10d 0117 	add.w	r1, sp, #23
 8018d02:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8018d06:	4602      	mov	r2, r0
 8018d08:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8018d0c:	9500      	str	r5, [sp, #0]
 8018d0e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8018d12:	f000 fe9f 	bl	8019a54 <uxr_write_framed_msg>
 8018d16:	e7e6      	b.n	8018ce6 <send_custom_msg+0x16>
 8018d18:	2001      	movs	r0, #1
 8018d1a:	b007      	add	sp, #28
 8018d1c:	bd30      	pop	{r4, r5, pc}
 8018d1e:	bf00      	nop
 8018d20:	200162e8 	.word	0x200162e8

08018d24 <uxr_set_custom_transport_callbacks>:
 8018d24:	b410      	push	{r4}
 8018d26:	9c01      	ldr	r4, [sp, #4]
 8018d28:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8018d2c:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8018d30:	9b02      	ldr	r3, [sp, #8]
 8018d32:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8018d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d3a:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 8018d3e:	4770      	bx	lr

08018d40 <uxr_init_custom_transport>:
 8018d40:	b538      	push	{r3, r4, r5, lr}
 8018d42:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8018d46:	b303      	cbz	r3, 8018d8a <uxr_init_custom_transport+0x4a>
 8018d48:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8018d4c:	4604      	mov	r4, r0
 8018d4e:	b1e2      	cbz	r2, 8018d8a <uxr_init_custom_transport+0x4a>
 8018d50:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8018d54:	b1ca      	cbz	r2, 8018d8a <uxr_init_custom_transport+0x4a>
 8018d56:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8018d5a:	b1b2      	cbz	r2, 8018d8a <uxr_init_custom_transport+0x4a>
 8018d5c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8018d60:	4798      	blx	r3
 8018d62:	4605      	mov	r5, r0
 8018d64:	b188      	cbz	r0, 8018d8a <uxr_init_custom_transport+0x4a>
 8018d66:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8018d6a:	b98b      	cbnz	r3, 8018d90 <uxr_init_custom_transport+0x50>
 8018d6c:	490b      	ldr	r1, [pc, #44]	; (8018d9c <uxr_init_custom_transport+0x5c>)
 8018d6e:	4b0c      	ldr	r3, [pc, #48]	; (8018da0 <uxr_init_custom_transport+0x60>)
 8018d70:	4a0c      	ldr	r2, [pc, #48]	; (8018da4 <uxr_init_custom_transport+0x64>)
 8018d72:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8018d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018d7a:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8018d7e:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8018d82:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8018d86:	4628      	mov	r0, r5
 8018d88:	bd38      	pop	{r3, r4, r5, pc}
 8018d8a:	2500      	movs	r5, #0
 8018d8c:	4628      	mov	r0, r5
 8018d8e:	bd38      	pop	{r3, r4, r5, pc}
 8018d90:	2100      	movs	r1, #0
 8018d92:	f204 2002 	addw	r0, r4, #514	; 0x202
 8018d96:	f000 fe57 	bl	8019a48 <uxr_init_framing_io>
 8018d9a:	e7e7      	b.n	8018d6c <uxr_init_custom_transport+0x2c>
 8018d9c:	08018cd1 	.word	0x08018cd1
 8018da0:	08018c39 	.word	0x08018c39
 8018da4:	08018c2d 	.word	0x08018c2d

08018da8 <uxr_close_custom_transport>:
 8018da8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8018dac:	4718      	bx	r3
 8018dae:	bf00      	nop

08018db0 <uxr_init_input_best_effort_stream>:
 8018db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018db4:	8003      	strh	r3, [r0, #0]
 8018db6:	4770      	bx	lr

08018db8 <uxr_reset_input_best_effort_stream>:
 8018db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018dbc:	8003      	strh	r3, [r0, #0]
 8018dbe:	4770      	bx	lr

08018dc0 <uxr_receive_best_effort_message>:
 8018dc0:	b538      	push	{r3, r4, r5, lr}
 8018dc2:	4604      	mov	r4, r0
 8018dc4:	8800      	ldrh	r0, [r0, #0]
 8018dc6:	460d      	mov	r5, r1
 8018dc8:	f000 fe26 	bl	8019a18 <uxr_seq_num_cmp>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018dd4:	bfb8      	it	lt
 8018dd6:	8025      	strhlt	r5, [r4, #0]
 8018dd8:	bd38      	pop	{r3, r4, r5, pc}
 8018dda:	bf00      	nop

08018ddc <on_full_input_buffer>:
 8018ddc:	b570      	push	{r4, r5, r6, lr}
 8018dde:	4605      	mov	r5, r0
 8018de0:	460c      	mov	r4, r1
 8018de2:	682b      	ldr	r3, [r5, #0]
 8018de4:	6809      	ldr	r1, [r1, #0]
 8018de6:	8920      	ldrh	r0, [r4, #8]
 8018de8:	6862      	ldr	r2, [r4, #4]
 8018dea:	fbb2 f2f0 	udiv	r2, r2, r0
 8018dee:	eba3 0c01 	sub.w	ip, r3, r1
 8018df2:	fbbc fcf2 	udiv	ip, ip, r2
 8018df6:	f10c 0c01 	add.w	ip, ip, #1
 8018dfa:	fa1f f38c 	uxth.w	r3, ip
 8018dfe:	fbb3 f6f0 	udiv	r6, r3, r0
 8018e02:	fb00 3316 	mls	r3, r0, r6, r3
 8018e06:	b29b      	uxth	r3, r3
 8018e08:	fb02 f303 	mul.w	r3, r2, r3
 8018e0c:	1d18      	adds	r0, r3, #4
 8018e0e:	4408      	add	r0, r1
 8018e10:	7d26      	ldrb	r6, [r4, #20]
 8018e12:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8018e16:	b116      	cbz	r6, 8018e1e <on_full_input_buffer+0x42>
 8018e18:	2600      	movs	r6, #0
 8018e1a:	f840 6c04 	str.w	r6, [r0, #-4]
 8018e1e:	2a03      	cmp	r2, #3
 8018e20:	d801      	bhi.n	8018e26 <on_full_input_buffer+0x4a>
 8018e22:	2001      	movs	r0, #1
 8018e24:	bd70      	pop	{r4, r5, r6, pc}
 8018e26:	3308      	adds	r3, #8
 8018e28:	4419      	add	r1, r3
 8018e2a:	4628      	mov	r0, r5
 8018e2c:	692b      	ldr	r3, [r5, #16]
 8018e2e:	3a04      	subs	r2, #4
 8018e30:	f7fa fdd6 	bl	80139e0 <ucdr_init_buffer_origin>
 8018e34:	4628      	mov	r0, r5
 8018e36:	4903      	ldr	r1, [pc, #12]	; (8018e44 <on_full_input_buffer+0x68>)
 8018e38:	4622      	mov	r2, r4
 8018e3a:	f7fa fdad 	bl	8013998 <ucdr_set_on_full_buffer_callback>
 8018e3e:	2000      	movs	r0, #0
 8018e40:	bd70      	pop	{r4, r5, r6, pc}
 8018e42:	bf00      	nop
 8018e44:	08018ddd 	.word	0x08018ddd

08018e48 <uxr_init_input_reliable_stream>:
 8018e48:	b500      	push	{lr}
 8018e4a:	e9c0 1200 	strd	r1, r2, [r0]
 8018e4e:	f04f 0e00 	mov.w	lr, #0
 8018e52:	9a01      	ldr	r2, [sp, #4]
 8018e54:	8103      	strh	r3, [r0, #8]
 8018e56:	6102      	str	r2, [r0, #16]
 8018e58:	f880 e014 	strb.w	lr, [r0, #20]
 8018e5c:	b1d3      	cbz	r3, 8018e94 <uxr_init_input_reliable_stream+0x4c>
 8018e5e:	f8c1 e000 	str.w	lr, [r1]
 8018e62:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018e66:	f1bc 0f01 	cmp.w	ip, #1
 8018e6a:	d913      	bls.n	8018e94 <uxr_init_input_reliable_stream+0x4c>
 8018e6c:	2301      	movs	r3, #1
 8018e6e:	fbb3 f1fc 	udiv	r1, r3, ip
 8018e72:	fb0c 3111 	mls	r1, ip, r1, r3
 8018e76:	b289      	uxth	r1, r1
 8018e78:	6842      	ldr	r2, [r0, #4]
 8018e7a:	fbb2 f2fc 	udiv	r2, r2, ip
 8018e7e:	fb01 f202 	mul.w	r2, r1, r2
 8018e82:	6801      	ldr	r1, [r0, #0]
 8018e84:	f841 e002 	str.w	lr, [r1, r2]
 8018e88:	3301      	adds	r3, #1
 8018e8a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018e8e:	b29b      	uxth	r3, r3
 8018e90:	459c      	cmp	ip, r3
 8018e92:	d8ec      	bhi.n	8018e6e <uxr_init_input_reliable_stream+0x26>
 8018e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018e98:	60c3      	str	r3, [r0, #12]
 8018e9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8018e9e:	bf00      	nop

08018ea0 <uxr_reset_input_reliable_stream>:
 8018ea0:	8901      	ldrh	r1, [r0, #8]
 8018ea2:	b1e9      	cbz	r1, 8018ee0 <uxr_reset_input_reliable_stream+0x40>
 8018ea4:	f04f 0c00 	mov.w	ip, #0
 8018ea8:	b500      	push	{lr}
 8018eaa:	4663      	mov	r3, ip
 8018eac:	46e6      	mov	lr, ip
 8018eae:	fbb3 f2f1 	udiv	r2, r3, r1
 8018eb2:	fb01 3312 	mls	r3, r1, r2, r3
 8018eb6:	b29b      	uxth	r3, r3
 8018eb8:	6842      	ldr	r2, [r0, #4]
 8018eba:	fbb2 f2f1 	udiv	r2, r2, r1
 8018ebe:	fb02 f303 	mul.w	r3, r2, r3
 8018ec2:	6802      	ldr	r2, [r0, #0]
 8018ec4:	f842 e003 	str.w	lr, [r2, r3]
 8018ec8:	f10c 0c01 	add.w	ip, ip, #1
 8018ecc:	8901      	ldrh	r1, [r0, #8]
 8018ece:	fa1f f38c 	uxth.w	r3, ip
 8018ed2:	4299      	cmp	r1, r3
 8018ed4:	d8eb      	bhi.n	8018eae <uxr_reset_input_reliable_stream+0xe>
 8018ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018eda:	60c3      	str	r3, [r0, #12]
 8018edc:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ee4:	60c3      	str	r3, [r0, #12]
 8018ee6:	4770      	bx	lr

08018ee8 <uxr_receive_reliable_message>:
 8018ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018eec:	4604      	mov	r4, r0
 8018eee:	460d      	mov	r5, r1
 8018ef0:	8901      	ldrh	r1, [r0, #8]
 8018ef2:	8980      	ldrh	r0, [r0, #12]
 8018ef4:	4690      	mov	r8, r2
 8018ef6:	461f      	mov	r7, r3
 8018ef8:	f000 fd86 	bl	8019a08 <uxr_seq_num_add>
 8018efc:	4629      	mov	r1, r5
 8018efe:	4606      	mov	r6, r0
 8018f00:	89a0      	ldrh	r0, [r4, #12]
 8018f02:	f000 fd89 	bl	8019a18 <uxr_seq_num_cmp>
 8018f06:	2800      	cmp	r0, #0
 8018f08:	db0a      	blt.n	8018f20 <uxr_receive_reliable_message+0x38>
 8018f0a:	2600      	movs	r6, #0
 8018f0c:	89e0      	ldrh	r0, [r4, #14]
 8018f0e:	4629      	mov	r1, r5
 8018f10:	f000 fd82 	bl	8019a18 <uxr_seq_num_cmp>
 8018f14:	2800      	cmp	r0, #0
 8018f16:	da00      	bge.n	8018f1a <uxr_receive_reliable_message+0x32>
 8018f18:	81e5      	strh	r5, [r4, #14]
 8018f1a:	4630      	mov	r0, r6
 8018f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f20:	4630      	mov	r0, r6
 8018f22:	4629      	mov	r1, r5
 8018f24:	f000 fd78 	bl	8019a18 <uxr_seq_num_cmp>
 8018f28:	2800      	cmp	r0, #0
 8018f2a:	dbee      	blt.n	8018f0a <uxr_receive_reliable_message+0x22>
 8018f2c:	6923      	ldr	r3, [r4, #16]
 8018f2e:	4640      	mov	r0, r8
 8018f30:	4798      	blx	r3
 8018f32:	2101      	movs	r1, #1
 8018f34:	4681      	mov	r9, r0
 8018f36:	89a0      	ldrh	r0, [r4, #12]
 8018f38:	f000 fd66 	bl	8019a08 <uxr_seq_num_add>
 8018f3c:	f1b9 0f00 	cmp.w	r9, #0
 8018f40:	d101      	bne.n	8018f46 <uxr_receive_reliable_message+0x5e>
 8018f42:	4285      	cmp	r5, r0
 8018f44:	d047      	beq.n	8018fd6 <uxr_receive_reliable_message+0xee>
 8018f46:	8922      	ldrh	r2, [r4, #8]
 8018f48:	fbb5 f0f2 	udiv	r0, r5, r2
 8018f4c:	fb02 5010 	mls	r0, r2, r0, r5
 8018f50:	b280      	uxth	r0, r0
 8018f52:	6863      	ldr	r3, [r4, #4]
 8018f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8018f58:	fb00 f303 	mul.w	r3, r0, r3
 8018f5c:	6820      	ldr	r0, [r4, #0]
 8018f5e:	3304      	adds	r3, #4
 8018f60:	4418      	add	r0, r3
 8018f62:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d1cf      	bne.n	8018f0a <uxr_receive_reliable_message+0x22>
 8018f6a:	4641      	mov	r1, r8
 8018f6c:	463a      	mov	r2, r7
 8018f6e:	f002 f8cb 	bl	801b108 <memcpy>
 8018f72:	8921      	ldrh	r1, [r4, #8]
 8018f74:	fbb5 f2f1 	udiv	r2, r5, r1
 8018f78:	fb01 5212 	mls	r2, r1, r2, r5
 8018f7c:	b292      	uxth	r2, r2
 8018f7e:	6863      	ldr	r3, [r4, #4]
 8018f80:	fbb3 f3f1 	udiv	r3, r3, r1
 8018f84:	fb02 f303 	mul.w	r3, r2, r3
 8018f88:	6822      	ldr	r2, [r4, #0]
 8018f8a:	50d7      	str	r7, [r2, r3]
 8018f8c:	9a08      	ldr	r2, [sp, #32]
 8018f8e:	2301      	movs	r3, #1
 8018f90:	7013      	strb	r3, [r2, #0]
 8018f92:	f1b9 0f00 	cmp.w	r9, #0
 8018f96:	d0b8      	beq.n	8018f0a <uxr_receive_reliable_message+0x22>
 8018f98:	89a6      	ldrh	r6, [r4, #12]
 8018f9a:	4630      	mov	r0, r6
 8018f9c:	2101      	movs	r1, #1
 8018f9e:	f000 fd33 	bl	8019a08 <uxr_seq_num_add>
 8018fa2:	8922      	ldrh	r2, [r4, #8]
 8018fa4:	6863      	ldr	r3, [r4, #4]
 8018fa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8018faa:	4606      	mov	r6, r0
 8018fac:	fbb0 f0f2 	udiv	r0, r0, r2
 8018fb0:	fb02 6010 	mls	r0, r2, r0, r6
 8018fb4:	b280      	uxth	r0, r0
 8018fb6:	fb00 f303 	mul.w	r3, r0, r3
 8018fba:	6820      	ldr	r0, [r4, #0]
 8018fbc:	3304      	adds	r3, #4
 8018fbe:	4418      	add	r0, r3
 8018fc0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d0a0      	beq.n	8018f0a <uxr_receive_reliable_message+0x22>
 8018fc8:	6923      	ldr	r3, [r4, #16]
 8018fca:	4798      	blx	r3
 8018fcc:	2802      	cmp	r0, #2
 8018fce:	d008      	beq.n	8018fe2 <uxr_receive_reliable_message+0xfa>
 8018fd0:	2801      	cmp	r0, #1
 8018fd2:	d0e2      	beq.n	8018f9a <uxr_receive_reliable_message+0xb2>
 8018fd4:	e799      	b.n	8018f0a <uxr_receive_reliable_message+0x22>
 8018fd6:	9b08      	ldr	r3, [sp, #32]
 8018fd8:	81a5      	strh	r5, [r4, #12]
 8018fda:	2601      	movs	r6, #1
 8018fdc:	f883 9000 	strb.w	r9, [r3]
 8018fe0:	e794      	b.n	8018f0c <uxr_receive_reliable_message+0x24>
 8018fe2:	2601      	movs	r6, #1
 8018fe4:	e792      	b.n	8018f0c <uxr_receive_reliable_message+0x24>
 8018fe6:	bf00      	nop

08018fe8 <uxr_next_input_reliable_buffer_available>:
 8018fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fec:	4604      	mov	r4, r0
 8018fee:	460f      	mov	r7, r1
 8018ff0:	8980      	ldrh	r0, [r0, #12]
 8018ff2:	2101      	movs	r1, #1
 8018ff4:	4690      	mov	r8, r2
 8018ff6:	f000 fd07 	bl	8019a08 <uxr_seq_num_add>
 8018ffa:	8922      	ldrh	r2, [r4, #8]
 8018ffc:	fbb0 f6f2 	udiv	r6, r0, r2
 8019000:	fb02 0616 	mls	r6, r2, r6, r0
 8019004:	b2b6      	uxth	r6, r6
 8019006:	6863      	ldr	r3, [r4, #4]
 8019008:	fbb3 f3f2 	udiv	r3, r3, r2
 801900c:	fb06 f303 	mul.w	r3, r6, r3
 8019010:	6826      	ldr	r6, [r4, #0]
 8019012:	3304      	adds	r3, #4
 8019014:	441e      	add	r6, r3
 8019016:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801901a:	f1b9 0f00 	cmp.w	r9, #0
 801901e:	d023      	beq.n	8019068 <uxr_next_input_reliable_buffer_available+0x80>
 8019020:	6923      	ldr	r3, [r4, #16]
 8019022:	4605      	mov	r5, r0
 8019024:	4630      	mov	r0, r6
 8019026:	4798      	blx	r3
 8019028:	4682      	mov	sl, r0
 801902a:	b300      	cbz	r0, 801906e <uxr_next_input_reliable_buffer_available+0x86>
 801902c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8019030:	2101      	movs	r1, #1
 8019032:	4650      	mov	r0, sl
 8019034:	f000 fce8 	bl	8019a08 <uxr_seq_num_add>
 8019038:	8921      	ldrh	r1, [r4, #8]
 801903a:	fbb0 f2f1 	udiv	r2, r0, r1
 801903e:	4682      	mov	sl, r0
 8019040:	fb01 0212 	mls	r2, r1, r2, r0
 8019044:	e9d4 0300 	ldrd	r0, r3, [r4]
 8019048:	b292      	uxth	r2, r2
 801904a:	fbb3 f3f1 	udiv	r3, r3, r1
 801904e:	fb02 f303 	mul.w	r3, r2, r3
 8019052:	3304      	adds	r3, #4
 8019054:	4418      	add	r0, r3
 8019056:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801905a:	b12b      	cbz	r3, 8019068 <uxr_next_input_reliable_buffer_available+0x80>
 801905c:	6923      	ldr	r3, [r4, #16]
 801905e:	4798      	blx	r3
 8019060:	2802      	cmp	r0, #2
 8019062:	d01b      	beq.n	801909c <uxr_next_input_reliable_buffer_available+0xb4>
 8019064:	2801      	cmp	r0, #1
 8019066:	d0e3      	beq.n	8019030 <uxr_next_input_reliable_buffer_available+0x48>
 8019068:	2000      	movs	r0, #0
 801906a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801906e:	464a      	mov	r2, r9
 8019070:	4631      	mov	r1, r6
 8019072:	4638      	mov	r0, r7
 8019074:	f7fa fcbc 	bl	80139f0 <ucdr_init_buffer>
 8019078:	8921      	ldrh	r1, [r4, #8]
 801907a:	fbb5 f2f1 	udiv	r2, r5, r1
 801907e:	fb01 5212 	mls	r2, r1, r2, r5
 8019082:	b292      	uxth	r2, r2
 8019084:	6863      	ldr	r3, [r4, #4]
 8019086:	fbb3 f3f1 	udiv	r3, r3, r1
 801908a:	fb02 f303 	mul.w	r3, r2, r3
 801908e:	6822      	ldr	r2, [r4, #0]
 8019090:	f842 a003 	str.w	sl, [r2, r3]
 8019094:	2001      	movs	r0, #1
 8019096:	81a5      	strh	r5, [r4, #12]
 8019098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801909c:	8920      	ldrh	r0, [r4, #8]
 801909e:	fbb5 f3f0 	udiv	r3, r5, r0
 80190a2:	fb00 5513 	mls	r5, r0, r3, r5
 80190a6:	b2ad      	uxth	r5, r5
 80190a8:	6863      	ldr	r3, [r4, #4]
 80190aa:	fbb3 f3f0 	udiv	r3, r3, r0
 80190ae:	fb03 f505 	mul.w	r5, r3, r5
 80190b2:	6823      	ldr	r3, [r4, #0]
 80190b4:	2000      	movs	r0, #0
 80190b6:	5158      	str	r0, [r3, r5]
 80190b8:	eb06 0108 	add.w	r1, r6, r8
 80190bc:	eba9 0208 	sub.w	r2, r9, r8
 80190c0:	4638      	mov	r0, r7
 80190c2:	f7fa fc95 	bl	80139f0 <ucdr_init_buffer>
 80190c6:	4638      	mov	r0, r7
 80190c8:	4903      	ldr	r1, [pc, #12]	; (80190d8 <uxr_next_input_reliable_buffer_available+0xf0>)
 80190ca:	4622      	mov	r2, r4
 80190cc:	f7fa fc64 	bl	8013998 <ucdr_set_on_full_buffer_callback>
 80190d0:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80190d4:	2001      	movs	r0, #1
 80190d6:	e7c8      	b.n	801906a <uxr_next_input_reliable_buffer_available+0x82>
 80190d8:	08018ddd 	.word	0x08018ddd

080190dc <uxr_process_heartbeat>:
 80190dc:	b538      	push	{r3, r4, r5, lr}
 80190de:	4611      	mov	r1, r2
 80190e0:	4604      	mov	r4, r0
 80190e2:	89c0      	ldrh	r0, [r0, #14]
 80190e4:	4615      	mov	r5, r2
 80190e6:	f000 fc97 	bl	8019a18 <uxr_seq_num_cmp>
 80190ea:	2800      	cmp	r0, #0
 80190ec:	bfb8      	it	lt
 80190ee:	81e5      	strhlt	r5, [r4, #14]
 80190f0:	bd38      	pop	{r3, r4, r5, pc}
 80190f2:	bf00      	nop

080190f4 <uxr_compute_acknack>:
 80190f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190f8:	8903      	ldrh	r3, [r0, #8]
 80190fa:	8985      	ldrh	r5, [r0, #12]
 80190fc:	4604      	mov	r4, r0
 80190fe:	460e      	mov	r6, r1
 8019100:	b1d3      	cbz	r3, 8019138 <uxr_compute_acknack+0x44>
 8019102:	4628      	mov	r0, r5
 8019104:	2701      	movs	r7, #1
 8019106:	e003      	b.n	8019110 <uxr_compute_acknack+0x1c>
 8019108:	4567      	cmp	r7, ip
 801910a:	d215      	bcs.n	8019138 <uxr_compute_acknack+0x44>
 801910c:	89a0      	ldrh	r0, [r4, #12]
 801910e:	3701      	adds	r7, #1
 8019110:	b2b9      	uxth	r1, r7
 8019112:	f000 fc79 	bl	8019a08 <uxr_seq_num_add>
 8019116:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801911a:	fbb0 f3fc 	udiv	r3, r0, ip
 801911e:	fb0c 0313 	mls	r3, ip, r3, r0
 8019122:	b29a      	uxth	r2, r3
 8019124:	e9d4 1300 	ldrd	r1, r3, [r4]
 8019128:	fbb3 f3fc 	udiv	r3, r3, ip
 801912c:	fb02 f303 	mul.w	r3, r2, r3
 8019130:	58cb      	ldr	r3, [r1, r3]
 8019132:	2b00      	cmp	r3, #0
 8019134:	d1e8      	bne.n	8019108 <uxr_compute_acknack+0x14>
 8019136:	4605      	mov	r5, r0
 8019138:	8035      	strh	r5, [r6, #0]
 801913a:	2101      	movs	r1, #1
 801913c:	4628      	mov	r0, r5
 801913e:	89e7      	ldrh	r7, [r4, #14]
 8019140:	f000 fc66 	bl	8019a10 <uxr_seq_num_sub>
 8019144:	4601      	mov	r1, r0
 8019146:	4638      	mov	r0, r7
 8019148:	f000 fc62 	bl	8019a10 <uxr_seq_num_sub>
 801914c:	4605      	mov	r5, r0
 801914e:	b318      	cbz	r0, 8019198 <uxr_compute_acknack+0xa4>
 8019150:	f04f 0900 	mov.w	r9, #0
 8019154:	464f      	mov	r7, r9
 8019156:	f04f 0801 	mov.w	r8, #1
 801915a:	fa1f f189 	uxth.w	r1, r9
 801915e:	8830      	ldrh	r0, [r6, #0]
 8019160:	f000 fc52 	bl	8019a08 <uxr_seq_num_add>
 8019164:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019168:	fbb0 f3fc 	udiv	r3, r0, ip
 801916c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8019170:	fb03 001c 	mls	r0, r3, ip, r0
 8019174:	b283      	uxth	r3, r0
 8019176:	fbb2 f2fc 	udiv	r2, r2, ip
 801917a:	fb02 f303 	mul.w	r3, r2, r3
 801917e:	fa08 f209 	lsl.w	r2, r8, r9
 8019182:	58cb      	ldr	r3, [r1, r3]
 8019184:	f109 0901 	add.w	r9, r9, #1
 8019188:	b90b      	cbnz	r3, 801918e <uxr_compute_acknack+0x9a>
 801918a:	4317      	orrs	r7, r2
 801918c:	b2bf      	uxth	r7, r7
 801918e:	454d      	cmp	r5, r9
 8019190:	d1e3      	bne.n	801915a <uxr_compute_acknack+0x66>
 8019192:	4638      	mov	r0, r7
 8019194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019198:	4607      	mov	r7, r0
 801919a:	4638      	mov	r0, r7
 801919c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080191a0 <uxr_init_output_best_effort_stream>:
 80191a0:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80191a4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80191a8:	6001      	str	r1, [r0, #0]
 80191aa:	7303      	strb	r3, [r0, #12]
 80191ac:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80191b0:	4770      	bx	lr
 80191b2:	bf00      	nop

080191b4 <uxr_reset_output_best_effort_stream>:
 80191b4:	7b02      	ldrb	r2, [r0, #12]
 80191b6:	6042      	str	r2, [r0, #4]
 80191b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80191bc:	81c3      	strh	r3, [r0, #14]
 80191be:	4770      	bx	lr

080191c0 <uxr_prepare_best_effort_buffer_to_write>:
 80191c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191c2:	4604      	mov	r4, r0
 80191c4:	b083      	sub	sp, #12
 80191c6:	6840      	ldr	r0, [r0, #4]
 80191c8:	460d      	mov	r5, r1
 80191ca:	4616      	mov	r6, r2
 80191cc:	f7fc f85e 	bl	801528c <uxr_submessage_padding>
 80191d0:	6863      	ldr	r3, [r4, #4]
 80191d2:	4418      	add	r0, r3
 80191d4:	68a3      	ldr	r3, [r4, #8]
 80191d6:	1942      	adds	r2, r0, r5
 80191d8:	4293      	cmp	r3, r2
 80191da:	bf2c      	ite	cs
 80191dc:	2701      	movcs	r7, #1
 80191de:	2700      	movcc	r7, #0
 80191e0:	d202      	bcs.n	80191e8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80191e2:	4638      	mov	r0, r7
 80191e4:	b003      	add	sp, #12
 80191e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191e8:	9000      	str	r0, [sp, #0]
 80191ea:	6821      	ldr	r1, [r4, #0]
 80191ec:	4630      	mov	r0, r6
 80191ee:	2300      	movs	r3, #0
 80191f0:	f7fa fbec 	bl	80139cc <ucdr_init_buffer_origin_offset>
 80191f4:	6861      	ldr	r1, [r4, #4]
 80191f6:	4638      	mov	r0, r7
 80191f8:	4429      	add	r1, r5
 80191fa:	6061      	str	r1, [r4, #4]
 80191fc:	b003      	add	sp, #12
 80191fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019200 <uxr_prepare_best_effort_buffer_to_send>:
 8019200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019204:	4604      	mov	r4, r0
 8019206:	461d      	mov	r5, r3
 8019208:	6840      	ldr	r0, [r0, #4]
 801920a:	7b23      	ldrb	r3, [r4, #12]
 801920c:	4298      	cmp	r0, r3
 801920e:	bf8c      	ite	hi
 8019210:	2601      	movhi	r6, #1
 8019212:	2600      	movls	r6, #0
 8019214:	d802      	bhi.n	801921c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8019216:	4630      	mov	r0, r6
 8019218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801921c:	4688      	mov	r8, r1
 801921e:	89e0      	ldrh	r0, [r4, #14]
 8019220:	2101      	movs	r1, #1
 8019222:	4617      	mov	r7, r2
 8019224:	f000 fbf0 	bl	8019a08 <uxr_seq_num_add>
 8019228:	6823      	ldr	r3, [r4, #0]
 801922a:	81e0      	strh	r0, [r4, #14]
 801922c:	8028      	strh	r0, [r5, #0]
 801922e:	f8c8 3000 	str.w	r3, [r8]
 8019232:	6863      	ldr	r3, [r4, #4]
 8019234:	603b      	str	r3, [r7, #0]
 8019236:	7b23      	ldrb	r3, [r4, #12]
 8019238:	6063      	str	r3, [r4, #4]
 801923a:	4630      	mov	r0, r6
 801923c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019240 <on_full_output_buffer>:
 8019240:	b538      	push	{r3, r4, r5, lr}
 8019242:	6802      	ldr	r2, [r0, #0]
 8019244:	460c      	mov	r4, r1
 8019246:	6809      	ldr	r1, [r1, #0]
 8019248:	8923      	ldrh	r3, [r4, #8]
 801924a:	eba2 0c01 	sub.w	ip, r2, r1
 801924e:	6862      	ldr	r2, [r4, #4]
 8019250:	fbb2 f2f3 	udiv	r2, r2, r3
 8019254:	fbbc fcf2 	udiv	ip, ip, r2
 8019258:	f10c 0c01 	add.w	ip, ip, #1
 801925c:	fa1f fc8c 	uxth.w	ip, ip
 8019260:	fbbc fef3 	udiv	lr, ip, r3
 8019264:	fb03 c31e 	mls	r3, r3, lr, ip
 8019268:	b29b      	uxth	r3, r3
 801926a:	fb02 f303 	mul.w	r3, r2, r3
 801926e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8019272:	58ca      	ldr	r2, [r1, r3]
 8019274:	4463      	add	r3, ip
 8019276:	eba2 020c 	sub.w	r2, r2, ip
 801927a:	3308      	adds	r3, #8
 801927c:	4605      	mov	r5, r0
 801927e:	4419      	add	r1, r3
 8019280:	3a04      	subs	r2, #4
 8019282:	6903      	ldr	r3, [r0, #16]
 8019284:	f7fa fbac 	bl	80139e0 <ucdr_init_buffer_origin>
 8019288:	4628      	mov	r0, r5
 801928a:	4903      	ldr	r1, [pc, #12]	; (8019298 <on_full_output_buffer+0x58>)
 801928c:	4622      	mov	r2, r4
 801928e:	f7fa fb83 	bl	8013998 <ucdr_set_on_full_buffer_callback>
 8019292:	2000      	movs	r0, #0
 8019294:	bd38      	pop	{r3, r4, r5, pc}
 8019296:	bf00      	nop
 8019298:	08019241 	.word	0x08019241

0801929c <uxr_init_output_reliable_stream>:
 801929c:	b410      	push	{r4}
 801929e:	f89d c004 	ldrb.w	ip, [sp, #4]
 80192a2:	8103      	strh	r3, [r0, #8]
 80192a4:	e9c0 1200 	strd	r1, r2, [r0]
 80192a8:	f880 c00c 	strb.w	ip, [r0, #12]
 80192ac:	b1d3      	cbz	r3, 80192e4 <uxr_init_output_reliable_stream+0x48>
 80192ae:	f8c1 c000 	str.w	ip, [r1]
 80192b2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80192b6:	f1bc 0f01 	cmp.w	ip, #1
 80192ba:	d913      	bls.n	80192e4 <uxr_init_output_reliable_stream+0x48>
 80192bc:	2301      	movs	r3, #1
 80192be:	fbb3 f1fc 	udiv	r1, r3, ip
 80192c2:	fb0c 3111 	mls	r1, ip, r1, r3
 80192c6:	b289      	uxth	r1, r1
 80192c8:	6842      	ldr	r2, [r0, #4]
 80192ca:	6804      	ldr	r4, [r0, #0]
 80192cc:	fbb2 f2fc 	udiv	r2, r2, ip
 80192d0:	fb01 f202 	mul.w	r2, r1, r2
 80192d4:	7b01      	ldrb	r1, [r0, #12]
 80192d6:	50a1      	str	r1, [r4, r2]
 80192d8:	3301      	adds	r3, #1
 80192da:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80192de:	b29b      	uxth	r3, r3
 80192e0:	459c      	cmp	ip, r3
 80192e2:	d8ec      	bhi.n	80192be <uxr_init_output_reliable_stream+0x22>
 80192e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80192e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80192ec:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80192f0:	4905      	ldr	r1, [pc, #20]	; (8019308 <uxr_init_output_reliable_stream+0x6c>)
 80192f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192f6:	f8c0 100e 	str.w	r1, [r0, #14]
 80192fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80192fe:	2300      	movs	r3, #0
 8019300:	8242      	strh	r2, [r0, #18]
 8019302:	8403      	strh	r3, [r0, #32]
 8019304:	4770      	bx	lr
 8019306:	bf00      	nop
 8019308:	ffff0000 	.word	0xffff0000

0801930c <uxr_reset_output_reliable_stream>:
 801930c:	8901      	ldrh	r1, [r0, #8]
 801930e:	b1b1      	cbz	r1, 801933e <uxr_reset_output_reliable_stream+0x32>
 8019310:	f04f 0c00 	mov.w	ip, #0
 8019314:	4663      	mov	r3, ip
 8019316:	fbb3 f2f1 	udiv	r2, r3, r1
 801931a:	fb01 3312 	mls	r3, r1, r2, r3
 801931e:	b29b      	uxth	r3, r3
 8019320:	6842      	ldr	r2, [r0, #4]
 8019322:	fbb2 f2f1 	udiv	r2, r2, r1
 8019326:	6801      	ldr	r1, [r0, #0]
 8019328:	fb02 f303 	mul.w	r3, r2, r3
 801932c:	7b02      	ldrb	r2, [r0, #12]
 801932e:	50ca      	str	r2, [r1, r3]
 8019330:	f10c 0c01 	add.w	ip, ip, #1
 8019334:	8901      	ldrh	r1, [r0, #8]
 8019336:	fa1f f38c 	uxth.w	r3, ip
 801933a:	4299      	cmp	r1, r3
 801933c:	d8eb      	bhi.n	8019316 <uxr_reset_output_reliable_stream+0xa>
 801933e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019342:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019346:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801934a:	4904      	ldr	r1, [pc, #16]	; (801935c <uxr_reset_output_reliable_stream+0x50>)
 801934c:	f8c0 100e 	str.w	r1, [r0, #14]
 8019350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019354:	2300      	movs	r3, #0
 8019356:	8242      	strh	r2, [r0, #18]
 8019358:	8403      	strh	r3, [r0, #32]
 801935a:	4770      	bx	lr
 801935c:	ffff0000 	.word	0xffff0000

08019360 <uxr_prepare_reliable_buffer_to_write>:
 8019360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019364:	4604      	mov	r4, r0
 8019366:	8900      	ldrh	r0, [r0, #8]
 8019368:	89e5      	ldrh	r5, [r4, #14]
 801936a:	fbb5 f3f0 	udiv	r3, r5, r0
 801936e:	b091      	sub	sp, #68	; 0x44
 8019370:	fb00 5313 	mls	r3, r0, r3, r5
 8019374:	b29b      	uxth	r3, r3
 8019376:	9205      	str	r2, [sp, #20]
 8019378:	6862      	ldr	r2, [r4, #4]
 801937a:	fbb2 f0f0 	udiv	r0, r2, r0
 801937e:	6822      	ldr	r2, [r4, #0]
 8019380:	9006      	str	r0, [sp, #24]
 8019382:	fb00 f303 	mul.w	r3, r0, r3
 8019386:	3304      	adds	r3, #4
 8019388:	18d3      	adds	r3, r2, r3
 801938a:	4689      	mov	r9, r1
 801938c:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8019390:	9304      	str	r3, [sp, #16]
 8019392:	f1a0 0804 	sub.w	r8, r0, #4
 8019396:	2104      	movs	r1, #4
 8019398:	4630      	mov	r0, r6
 801939a:	f7fa fb2d 	bl	80139f8 <ucdr_alignment>
 801939e:	1833      	adds	r3, r6, r0
 80193a0:	eb03 0609 	add.w	r6, r3, r9
 80193a4:	4546      	cmp	r6, r8
 80193a6:	9303      	str	r3, [sp, #12]
 80193a8:	f240 80d6 	bls.w	8019558 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80193ac:	7b26      	ldrb	r6, [r4, #12]
 80193ae:	eb06 0309 	add.w	r3, r6, r9
 80193b2:	4543      	cmp	r3, r8
 80193b4:	f240 80bd 	bls.w	8019532 <uxr_prepare_reliable_buffer_to_write+0x1d2>
 80193b8:	9b03      	ldr	r3, [sp, #12]
 80193ba:	3304      	adds	r3, #4
 80193bc:	4543      	cmp	r3, r8
 80193be:	f080 810d 	bcs.w	80195dc <uxr_prepare_reliable_buffer_to_write+0x27c>
 80193c2:	8920      	ldrh	r0, [r4, #8]
 80193c4:	2800      	cmp	r0, #0
 80193c6:	f000 8122 	beq.w	801960e <uxr_prepare_reliable_buffer_to_write+0x2ae>
 80193ca:	2100      	movs	r1, #0
 80193cc:	6827      	ldr	r7, [r4, #0]
 80193ce:	6862      	ldr	r2, [r4, #4]
 80193d0:	fbb2 fef0 	udiv	lr, r2, r0
 80193d4:	468c      	mov	ip, r1
 80193d6:	460b      	mov	r3, r1
 80193d8:	fbb3 f2f0 	udiv	r2, r3, r0
 80193dc:	fb00 3312 	mls	r3, r0, r2, r3
 80193e0:	b29b      	uxth	r3, r3
 80193e2:	fb0e f303 	mul.w	r3, lr, r3
 80193e6:	3101      	adds	r1, #1
 80193e8:	58fa      	ldr	r2, [r7, r3]
 80193ea:	4296      	cmp	r6, r2
 80193ec:	bf08      	it	eq
 80193ee:	f10c 0c01 	addeq.w	ip, ip, #1
 80193f2:	b28b      	uxth	r3, r1
 80193f4:	bf08      	it	eq
 80193f6:	fa1f fc8c 	uxtheq.w	ip, ip
 80193fa:	4283      	cmp	r3, r0
 80193fc:	d3ec      	bcc.n	80193d8 <uxr_prepare_reliable_buffer_to_write+0x78>
 80193fe:	9b03      	ldr	r3, [sp, #12]
 8019400:	f1a8 0704 	sub.w	r7, r8, #4
 8019404:	b2bf      	uxth	r7, r7
 8019406:	1bbe      	subs	r6, r7, r6
 8019408:	1aff      	subs	r7, r7, r3
 801940a:	b2bf      	uxth	r7, r7
 801940c:	b2b6      	uxth	r6, r6
 801940e:	eba9 0907 	sub.w	r9, r9, r7
 8019412:	fbb9 faf6 	udiv	sl, r9, r6
 8019416:	fb06 911a 	mls	r1, r6, sl, r9
 801941a:	9607      	str	r6, [sp, #28]
 801941c:	2900      	cmp	r1, #0
 801941e:	f040 80bc 	bne.w	801959a <uxr_prepare_reliable_buffer_to_write+0x23a>
 8019422:	fa1f fa8a 	uxth.w	sl, sl
 8019426:	45e2      	cmp	sl, ip
 8019428:	f200 8092 	bhi.w	8019550 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801942c:	f10d 0b20 	add.w	fp, sp, #32
 8019430:	f1ba 0f00 	cmp.w	sl, #0
 8019434:	d03a      	beq.n	80194ac <uxr_prepare_reliable_buffer_to_write+0x14c>
 8019436:	f04f 0900 	mov.w	r9, #0
 801943a:	f10d 0b20 	add.w	fp, sp, #32
 801943e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019442:	fbb5 fcf0 	udiv	ip, r5, r0
 8019446:	fb00 511c 	mls	r1, r0, ip, r5
 801944a:	fa1f fc81 	uxth.w	ip, r1
 801944e:	fbb3 f1f0 	udiv	r1, r3, r0
 8019452:	fb0c f101 	mul.w	r1, ip, r1
 8019456:	3104      	adds	r1, #4
 8019458:	4411      	add	r1, r2
 801945a:	4658      	mov	r0, fp
 801945c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019460:	9300      	str	r3, [sp, #0]
 8019462:	4642      	mov	r2, r8
 8019464:	2300      	movs	r3, #0
 8019466:	f7fa fab1 	bl	80139cc <ucdr_init_buffer_origin_offset>
 801946a:	463a      	mov	r2, r7
 801946c:	2300      	movs	r3, #0
 801946e:	210d      	movs	r1, #13
 8019470:	4658      	mov	r0, fp
 8019472:	f7fb fecb 	bl	801520c <uxr_buffer_submessage_header>
 8019476:	8921      	ldrh	r1, [r4, #8]
 8019478:	fbb5 f2f1 	udiv	r2, r5, r1
 801947c:	fb01 5212 	mls	r2, r1, r2, r5
 8019480:	b292      	uxth	r2, r2
 8019482:	6863      	ldr	r3, [r4, #4]
 8019484:	fbb3 f3f1 	udiv	r3, r3, r1
 8019488:	fb02 f303 	mul.w	r3, r2, r3
 801948c:	6822      	ldr	r2, [r4, #0]
 801948e:	4628      	mov	r0, r5
 8019490:	f842 8003 	str.w	r8, [r2, r3]
 8019494:	2101      	movs	r1, #1
 8019496:	f000 fab7 	bl	8019a08 <uxr_seq_num_add>
 801949a:	f109 0901 	add.w	r9, r9, #1
 801949e:	fa1f f389 	uxth.w	r3, r9
 80194a2:	459a      	cmp	sl, r3
 80194a4:	4605      	mov	r5, r0
 80194a6:	4637      	mov	r7, r6
 80194a8:	8920      	ldrh	r0, [r4, #8]
 80194aa:	d8c8      	bhi.n	801943e <uxr_prepare_reliable_buffer_to_write+0xde>
 80194ac:	fbb5 f1f0 	udiv	r1, r5, r0
 80194b0:	fb00 5111 	mls	r1, r0, r1, r5
 80194b4:	b28e      	uxth	r6, r1
 80194b6:	6863      	ldr	r3, [r4, #4]
 80194b8:	fbb3 f1f0 	udiv	r1, r3, r0
 80194bc:	6823      	ldr	r3, [r4, #0]
 80194be:	fb06 f101 	mul.w	r1, r6, r1
 80194c2:	3104      	adds	r1, #4
 80194c4:	4419      	add	r1, r3
 80194c6:	4642      	mov	r2, r8
 80194c8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80194cc:	9000      	str	r0, [sp, #0]
 80194ce:	2300      	movs	r3, #0
 80194d0:	4658      	mov	r0, fp
 80194d2:	f7fa fa7b 	bl	80139cc <ucdr_init_buffer_origin_offset>
 80194d6:	9e07      	ldr	r6, [sp, #28]
 80194d8:	4658      	mov	r0, fp
 80194da:	b2b2      	uxth	r2, r6
 80194dc:	2302      	movs	r3, #2
 80194de:	210d      	movs	r1, #13
 80194e0:	f7fb fe94 	bl	801520c <uxr_buffer_submessage_header>
 80194e4:	9b06      	ldr	r3, [sp, #24]
 80194e6:	7b20      	ldrb	r0, [r4, #12]
 80194e8:	8927      	ldrh	r7, [r4, #8]
 80194ea:	f1a3 0208 	sub.w	r2, r3, #8
 80194ee:	9b03      	ldr	r3, [sp, #12]
 80194f0:	3004      	adds	r0, #4
 80194f2:	1ad2      	subs	r2, r2, r3
 80194f4:	1d19      	adds	r1, r3, #4
 80194f6:	9b04      	ldr	r3, [sp, #16]
 80194f8:	4430      	add	r0, r6
 80194fa:	fbb5 f6f7 	udiv	r6, r5, r7
 80194fe:	fb07 5616 	mls	r6, r7, r6, r5
 8019502:	440b      	add	r3, r1
 8019504:	b2b6      	uxth	r6, r6
 8019506:	4619      	mov	r1, r3
 8019508:	6863      	ldr	r3, [r4, #4]
 801950a:	fbb3 f3f7 	udiv	r3, r3, r7
 801950e:	fb06 f303 	mul.w	r3, r6, r3
 8019512:	6826      	ldr	r6, [r4, #0]
 8019514:	50f0      	str	r0, [r6, r3]
 8019516:	9e05      	ldr	r6, [sp, #20]
 8019518:	4630      	mov	r0, r6
 801951a:	f7fa fa69 	bl	80139f0 <ucdr_init_buffer>
 801951e:	4630      	mov	r0, r6
 8019520:	493c      	ldr	r1, [pc, #240]	; (8019614 <uxr_prepare_reliable_buffer_to_write+0x2b4>)
 8019522:	4622      	mov	r2, r4
 8019524:	f7fa fa38 	bl	8013998 <ucdr_set_on_full_buffer_callback>
 8019528:	2001      	movs	r0, #1
 801952a:	81e5      	strh	r5, [r4, #14]
 801952c:	b011      	add	sp, #68	; 0x44
 801952e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019532:	2101      	movs	r1, #1
 8019534:	89e0      	ldrh	r0, [r4, #14]
 8019536:	f000 fa67 	bl	8019a08 <uxr_seq_num_add>
 801953a:	8921      	ldrh	r1, [r4, #8]
 801953c:	4605      	mov	r5, r0
 801953e:	8a60      	ldrh	r0, [r4, #18]
 8019540:	f000 fa62 	bl	8019a08 <uxr_seq_num_add>
 8019544:	4601      	mov	r1, r0
 8019546:	4628      	mov	r0, r5
 8019548:	f000 fa66 	bl	8019a18 <uxr_seq_num_cmp>
 801954c:	2800      	cmp	r0, #0
 801954e:	dd2a      	ble.n	80195a6 <uxr_prepare_reliable_buffer_to_write+0x246>
 8019550:	2000      	movs	r0, #0
 8019552:	b011      	add	sp, #68	; 0x44
 8019554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019558:	8921      	ldrh	r1, [r4, #8]
 801955a:	8a60      	ldrh	r0, [r4, #18]
 801955c:	f000 fa54 	bl	8019a08 <uxr_seq_num_add>
 8019560:	4601      	mov	r1, r0
 8019562:	4628      	mov	r0, r5
 8019564:	f000 fa58 	bl	8019a18 <uxr_seq_num_cmp>
 8019568:	2800      	cmp	r0, #0
 801956a:	dcf1      	bgt.n	8019550 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801956c:	8927      	ldrh	r7, [r4, #8]
 801956e:	fbb5 f2f7 	udiv	r2, r5, r7
 8019572:	fb07 5512 	mls	r5, r7, r2, r5
 8019576:	b2ad      	uxth	r5, r5
 8019578:	6863      	ldr	r3, [r4, #4]
 801957a:	6822      	ldr	r2, [r4, #0]
 801957c:	fbb3 f3f7 	udiv	r3, r3, r7
 8019580:	fb05 f303 	mul.w	r3, r5, r3
 8019584:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8019588:	50d6      	str	r6, [r2, r3]
 801958a:	9a03      	ldr	r2, [sp, #12]
 801958c:	9200      	str	r2, [sp, #0]
 801958e:	2300      	movs	r3, #0
 8019590:	4632      	mov	r2, r6
 8019592:	f7fa fa1b 	bl	80139cc <ucdr_init_buffer_origin_offset>
 8019596:	2001      	movs	r0, #1
 8019598:	e7db      	b.n	8019552 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 801959a:	f10a 0a01 	add.w	sl, sl, #1
 801959e:	fa1f fa8a 	uxth.w	sl, sl
 80195a2:	9107      	str	r1, [sp, #28]
 80195a4:	e73f      	b.n	8019426 <uxr_prepare_reliable_buffer_to_write+0xc6>
 80195a6:	8921      	ldrh	r1, [r4, #8]
 80195a8:	fbb5 f3f1 	udiv	r3, r5, r1
 80195ac:	fb01 5313 	mls	r3, r1, r3, r5
 80195b0:	b29a      	uxth	r2, r3
 80195b2:	6863      	ldr	r3, [r4, #4]
 80195b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80195b8:	6821      	ldr	r1, [r4, #0]
 80195ba:	9805      	ldr	r0, [sp, #20]
 80195bc:	fb02 f303 	mul.w	r3, r2, r3
 80195c0:	3304      	adds	r3, #4
 80195c2:	7b22      	ldrb	r2, [r4, #12]
 80195c4:	4419      	add	r1, r3
 80195c6:	444a      	add	r2, r9
 80195c8:	f841 2c04 	str.w	r2, [r1, #-4]
 80195cc:	7b23      	ldrb	r3, [r4, #12]
 80195ce:	9300      	str	r3, [sp, #0]
 80195d0:	2300      	movs	r3, #0
 80195d2:	f7fa f9fb 	bl	80139cc <ucdr_init_buffer_origin_offset>
 80195d6:	81e5      	strh	r5, [r4, #14]
 80195d8:	2001      	movs	r0, #1
 80195da:	e7ba      	b.n	8019552 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 80195dc:	4628      	mov	r0, r5
 80195de:	2101      	movs	r1, #1
 80195e0:	f000 fa12 	bl	8019a08 <uxr_seq_num_add>
 80195e4:	4605      	mov	r5, r0
 80195e6:	8920      	ldrh	r0, [r4, #8]
 80195e8:	fbb5 f3f0 	udiv	r3, r5, r0
 80195ec:	fb00 5313 	mls	r3, r0, r3, r5
 80195f0:	b29a      	uxth	r2, r3
 80195f2:	6863      	ldr	r3, [r4, #4]
 80195f4:	fbb3 f3f0 	udiv	r3, r3, r0
 80195f8:	fb02 f303 	mul.w	r3, r2, r3
 80195fc:	6822      	ldr	r2, [r4, #0]
 80195fe:	7b26      	ldrb	r6, [r4, #12]
 8019600:	3304      	adds	r3, #4
 8019602:	18d3      	adds	r3, r2, r3
 8019604:	9304      	str	r3, [sp, #16]
 8019606:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801960a:	9303      	str	r3, [sp, #12]
 801960c:	e6da      	b.n	80193c4 <uxr_prepare_reliable_buffer_to_write+0x64>
 801960e:	4684      	mov	ip, r0
 8019610:	e6f5      	b.n	80193fe <uxr_prepare_reliable_buffer_to_write+0x9e>
 8019612:	bf00      	nop
 8019614:	08019241 	.word	0x08019241

08019618 <uxr_prepare_next_reliable_buffer_to_send>:
 8019618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801961a:	4604      	mov	r4, r0
 801961c:	460f      	mov	r7, r1
 801961e:	8a00      	ldrh	r0, [r0, #16]
 8019620:	2101      	movs	r1, #1
 8019622:	4616      	mov	r6, r2
 8019624:	461d      	mov	r5, r3
 8019626:	f000 f9ef 	bl	8019a08 <uxr_seq_num_add>
 801962a:	8028      	strh	r0, [r5, #0]
 801962c:	8922      	ldrh	r2, [r4, #8]
 801962e:	fbb0 f3f2 	udiv	r3, r0, r2
 8019632:	fb02 0c13 	mls	ip, r2, r3, r0
 8019636:	fa1f fc8c 	uxth.w	ip, ip
 801963a:	6863      	ldr	r3, [r4, #4]
 801963c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019640:	fb0c fc03 	mul.w	ip, ip, r3
 8019644:	6823      	ldr	r3, [r4, #0]
 8019646:	89e1      	ldrh	r1, [r4, #14]
 8019648:	f10c 0c04 	add.w	ip, ip, #4
 801964c:	4463      	add	r3, ip
 801964e:	603b      	str	r3, [r7, #0]
 8019650:	6823      	ldr	r3, [r4, #0]
 8019652:	449c      	add	ip, r3
 8019654:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8019658:	6033      	str	r3, [r6, #0]
 801965a:	f000 f9dd 	bl	8019a18 <uxr_seq_num_cmp>
 801965e:	2800      	cmp	r0, #0
 8019660:	dd01      	ble.n	8019666 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8019662:	2000      	movs	r0, #0
 8019664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019666:	7b23      	ldrb	r3, [r4, #12]
 8019668:	6832      	ldr	r2, [r6, #0]
 801966a:	429a      	cmp	r2, r3
 801966c:	d9f9      	bls.n	8019662 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801966e:	8a61      	ldrh	r1, [r4, #18]
 8019670:	8a20      	ldrh	r0, [r4, #16]
 8019672:	f000 f9cd 	bl	8019a10 <uxr_seq_num_sub>
 8019676:	8923      	ldrh	r3, [r4, #8]
 8019678:	4283      	cmp	r3, r0
 801967a:	d0f2      	beq.n	8019662 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801967c:	8828      	ldrh	r0, [r5, #0]
 801967e:	89e3      	ldrh	r3, [r4, #14]
 8019680:	8220      	strh	r0, [r4, #16]
 8019682:	4298      	cmp	r0, r3
 8019684:	d001      	beq.n	801968a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8019686:	2001      	movs	r0, #1
 8019688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801968a:	2101      	movs	r1, #1
 801968c:	f000 f9bc 	bl	8019a08 <uxr_seq_num_add>
 8019690:	81e0      	strh	r0, [r4, #14]
 8019692:	2001      	movs	r0, #1
 8019694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019696:	bf00      	nop

08019698 <uxr_update_output_stream_heartbeat_timestamp>:
 8019698:	b570      	push	{r4, r5, r6, lr}
 801969a:	8a01      	ldrh	r1, [r0, #16]
 801969c:	4604      	mov	r4, r0
 801969e:	8a40      	ldrh	r0, [r0, #18]
 80196a0:	4615      	mov	r5, r2
 80196a2:	461e      	mov	r6, r3
 80196a4:	f000 f9b8 	bl	8019a18 <uxr_seq_num_cmp>
 80196a8:	2800      	cmp	r0, #0
 80196aa:	db07      	blt.n	80196bc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80196ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80196b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80196b4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80196b8:	2000      	movs	r0, #0
 80196ba:	bd70      	pop	{r4, r5, r6, pc}
 80196bc:	f894 0020 	ldrb.w	r0, [r4, #32]
 80196c0:	b940      	cbnz	r0, 80196d4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80196c2:	2301      	movs	r3, #1
 80196c4:	f884 3020 	strb.w	r3, [r4, #32]
 80196c8:	3564      	adds	r5, #100	; 0x64
 80196ca:	f146 0600 	adc.w	r6, r6, #0
 80196ce:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80196d2:	bd70      	pop	{r4, r5, r6, pc}
 80196d4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80196d8:	4295      	cmp	r5, r2
 80196da:	eb76 0303 	sbcs.w	r3, r6, r3
 80196de:	bfa5      	ittet	ge
 80196e0:	3001      	addge	r0, #1
 80196e2:	f884 0020 	strbge.w	r0, [r4, #32]
 80196e6:	2000      	movlt	r0, #0
 80196e8:	2001      	movge	r0, #1
 80196ea:	e7ed      	b.n	80196c8 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080196ec <uxr_begin_output_nack_buffer_it>:
 80196ec:	8a40      	ldrh	r0, [r0, #18]
 80196ee:	4770      	bx	lr

080196f0 <uxr_next_reliable_nack_buffer_to_send>:
 80196f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196f4:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 80196f8:	b082      	sub	sp, #8
 80196fa:	f1b8 0f00 	cmp.w	r8, #0
 80196fe:	d011      	beq.n	8019724 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8019700:	4604      	mov	r4, r0
 8019702:	8818      	ldrh	r0, [r3, #0]
 8019704:	460e      	mov	r6, r1
 8019706:	4617      	mov	r7, r2
 8019708:	461d      	mov	r5, r3
 801970a:	2101      	movs	r1, #1
 801970c:	f000 f97c 	bl	8019a08 <uxr_seq_num_add>
 8019710:	8028      	strh	r0, [r5, #0]
 8019712:	8a21      	ldrh	r1, [r4, #16]
 8019714:	f000 f980 	bl	8019a18 <uxr_seq_num_cmp>
 8019718:	2800      	cmp	r0, #0
 801971a:	dd07      	ble.n	801972c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801971c:	f04f 0800 	mov.w	r8, #0
 8019720:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8019724:	4640      	mov	r0, r8
 8019726:	b002      	add	sp, #8
 8019728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801972c:	8921      	ldrh	r1, [r4, #8]
 801972e:	8828      	ldrh	r0, [r5, #0]
 8019730:	6823      	ldr	r3, [r4, #0]
 8019732:	fbb0 f2f1 	udiv	r2, r0, r1
 8019736:	fb01 0c12 	mls	ip, r1, r2, r0
 801973a:	fa1f f28c 	uxth.w	r2, ip
 801973e:	9301      	str	r3, [sp, #4]
 8019740:	6863      	ldr	r3, [r4, #4]
 8019742:	fbb3 fcf1 	udiv	ip, r3, r1
 8019746:	9b01      	ldr	r3, [sp, #4]
 8019748:	fb02 fc0c 	mul.w	ip, r2, ip
 801974c:	f10c 0c04 	add.w	ip, ip, #4
 8019750:	4463      	add	r3, ip
 8019752:	6033      	str	r3, [r6, #0]
 8019754:	6823      	ldr	r3, [r4, #0]
 8019756:	4463      	add	r3, ip
 8019758:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801975c:	603b      	str	r3, [r7, #0]
 801975e:	7b22      	ldrb	r2, [r4, #12]
 8019760:	429a      	cmp	r2, r3
 8019762:	d0d2      	beq.n	801970a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8019764:	4640      	mov	r0, r8
 8019766:	b002      	add	sp, #8
 8019768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801976c <uxr_process_acknack>:
 801976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801976e:	4604      	mov	r4, r0
 8019770:	460e      	mov	r6, r1
 8019772:	4610      	mov	r0, r2
 8019774:	2101      	movs	r1, #1
 8019776:	f000 f94b 	bl	8019a10 <uxr_seq_num_sub>
 801977a:	8a61      	ldrh	r1, [r4, #18]
 801977c:	f000 f948 	bl	8019a10 <uxr_seq_num_sub>
 8019780:	b1c0      	cbz	r0, 80197b4 <uxr_process_acknack+0x48>
 8019782:	4605      	mov	r5, r0
 8019784:	2700      	movs	r7, #0
 8019786:	2101      	movs	r1, #1
 8019788:	8a60      	ldrh	r0, [r4, #18]
 801978a:	f000 f93d 	bl	8019a08 <uxr_seq_num_add>
 801978e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019792:	fbb0 f1fc 	udiv	r1, r0, ip
 8019796:	e9d4 2300 	ldrd	r2, r3, [r4]
 801979a:	fb0c 0111 	mls	r1, ip, r1, r0
 801979e:	b289      	uxth	r1, r1
 80197a0:	3701      	adds	r7, #1
 80197a2:	fbb3 f3fc 	udiv	r3, r3, ip
 80197a6:	fb01 f303 	mul.w	r3, r1, r3
 80197aa:	42bd      	cmp	r5, r7
 80197ac:	7b21      	ldrb	r1, [r4, #12]
 80197ae:	8260      	strh	r0, [r4, #18]
 80197b0:	50d1      	str	r1, [r2, r3]
 80197b2:	d1e8      	bne.n	8019786 <uxr_process_acknack+0x1a>
 80197b4:	3e00      	subs	r6, #0
 80197b6:	f04f 0300 	mov.w	r3, #0
 80197ba:	bf18      	it	ne
 80197bc:	2601      	movne	r6, #1
 80197be:	f884 3020 	strb.w	r3, [r4, #32]
 80197c2:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 80197c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080197c8 <uxr_is_output_up_to_date>:
 80197c8:	8a01      	ldrh	r1, [r0, #16]
 80197ca:	8a40      	ldrh	r0, [r0, #18]
 80197cc:	b508      	push	{r3, lr}
 80197ce:	f000 f923 	bl	8019a18 <uxr_seq_num_cmp>
 80197d2:	fab0 f080 	clz	r0, r0
 80197d6:	0940      	lsrs	r0, r0, #5
 80197d8:	bd08      	pop	{r3, pc}
 80197da:	bf00      	nop

080197dc <get_available_free_slots>:
 80197dc:	8902      	ldrh	r2, [r0, #8]
 80197de:	b1da      	cbz	r2, 8019818 <get_available_free_slots+0x3c>
 80197e0:	b530      	push	{r4, r5, lr}
 80197e2:	2100      	movs	r1, #0
 80197e4:	6843      	ldr	r3, [r0, #4]
 80197e6:	6805      	ldr	r5, [r0, #0]
 80197e8:	7b04      	ldrb	r4, [r0, #12]
 80197ea:	fbb3 fef2 	udiv	lr, r3, r2
 80197ee:	4608      	mov	r0, r1
 80197f0:	460b      	mov	r3, r1
 80197f2:	fbb3 fcf2 	udiv	ip, r3, r2
 80197f6:	fb02 331c 	mls	r3, r2, ip, r3
 80197fa:	b29b      	uxth	r3, r3
 80197fc:	fb0e f303 	mul.w	r3, lr, r3
 8019800:	3101      	adds	r1, #1
 8019802:	f855 c003 	ldr.w	ip, [r5, r3]
 8019806:	4564      	cmp	r4, ip
 8019808:	bf08      	it	eq
 801980a:	3001      	addeq	r0, #1
 801980c:	b28b      	uxth	r3, r1
 801980e:	bf08      	it	eq
 8019810:	b280      	uxtheq	r0, r0
 8019812:	4293      	cmp	r3, r2
 8019814:	d3ed      	bcc.n	80197f2 <get_available_free_slots+0x16>
 8019816:	bd30      	pop	{r4, r5, pc}
 8019818:	4610      	mov	r0, r2
 801981a:	4770      	bx	lr

0801981c <uxr_buffer_cancel_data>:
 801981c:	b510      	push	{r4, lr}
 801981e:	b094      	sub	sp, #80	; 0x50
 8019820:	2300      	movs	r3, #0
 8019822:	9202      	str	r2, [sp, #8]
 8019824:	9205      	str	r2, [sp, #20]
 8019826:	9301      	str	r3, [sp, #4]
 8019828:	2201      	movs	r2, #1
 801982a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801982e:	f88d 301e 	strb.w	r3, [sp, #30]
 8019832:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8019836:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801983a:	2308      	movs	r3, #8
 801983c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8019840:	9300      	str	r3, [sp, #0]
 8019842:	2210      	movs	r2, #16
 8019844:	ab0c      	add	r3, sp, #48	; 0x30
 8019846:	4604      	mov	r4, r0
 8019848:	9103      	str	r1, [sp, #12]
 801984a:	f7fb fa41 	bl	8014cd0 <uxr_prepare_stream_to_write_submessage>
 801984e:	b918      	cbnz	r0, 8019858 <uxr_buffer_cancel_data+0x3c>
 8019850:	4604      	mov	r4, r0
 8019852:	4620      	mov	r0, r4
 8019854:	b014      	add	sp, #80	; 0x50
 8019856:	bd10      	pop	{r4, pc}
 8019858:	9905      	ldr	r1, [sp, #20]
 801985a:	aa06      	add	r2, sp, #24
 801985c:	4620      	mov	r0, r4
 801985e:	f7fb fb6d 	bl	8014f3c <uxr_init_base_object_request>
 8019862:	a906      	add	r1, sp, #24
 8019864:	4604      	mov	r4, r0
 8019866:	a80c      	add	r0, sp, #48	; 0x30
 8019868:	f7fc fd7c 	bl	8016364 <uxr_serialize_READ_DATA_Payload>
 801986c:	4620      	mov	r0, r4
 801986e:	b014      	add	sp, #80	; 0x50
 8019870:	bd10      	pop	{r4, pc}
 8019872:	bf00      	nop

08019874 <read_submessage_format>:
 8019874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019878:	b095      	sub	sp, #84	; 0x54
 801987a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 801987e:	b113      	cbz	r3, 8019886 <read_submessage_format+0x12>
 8019880:	b015      	add	sp, #84	; 0x54
 8019882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019886:	460c      	mov	r4, r1
 8019888:	4615      	mov	r5, r2
 801988a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801988e:	4607      	mov	r7, r0
 8019890:	981c      	ldr	r0, [sp, #112]	; 0x70
 8019892:	9004      	str	r0, [sp, #16]
 8019894:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019896:	9005      	str	r0, [sp, #20]
 8019898:	1a52      	subs	r2, r2, r1
 801989a:	a80c      	add	r0, sp, #48	; 0x30
 801989c:	4699      	mov	r9, r3
 801989e:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 80198a2:	f7fa f8a5 	bl	80139f0 <ucdr_init_buffer>
 80198a6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80198aa:	a80c      	add	r0, sp, #48	; 0x30
 80198ac:	f7fa f874 	bl	8013998 <ucdr_set_on_full_buffer_callback>
 80198b0:	69e2      	ldr	r2, [r4, #28]
 80198b2:	b19a      	cbz	r2, 80198dc <read_submessage_format+0x68>
 80198b4:	f1b8 0f07 	cmp.w	r8, #7
 80198b8:	f882 9014 	strb.w	r9, [r2, #20]
 80198bc:	d040      	beq.n	8019940 <read_submessage_format+0xcc>
 80198be:	f1b8 0f08 	cmp.w	r8, #8
 80198c2:	d02e      	beq.n	8019922 <read_submessage_format+0xae>
 80198c4:	f1b8 0f06 	cmp.w	r8, #6
 80198c8:	d011      	beq.n	80198ee <read_submessage_format+0x7a>
 80198ca:	2301      	movs	r3, #1
 80198cc:	7513      	strb	r3, [r2, #20]
 80198ce:	4629      	mov	r1, r5
 80198d0:	4620      	mov	r0, r4
 80198d2:	f7fa f8dd 	bl	8013a90 <ucdr_advance_buffer>
 80198d6:	b015      	add	sp, #84	; 0x54
 80198d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198dc:	f1b8 0f07 	cmp.w	r8, #7
 80198e0:	d02e      	beq.n	8019940 <read_submessage_format+0xcc>
 80198e2:	f1b8 0f08 	cmp.w	r8, #8
 80198e6:	d01c      	beq.n	8019922 <read_submessage_format+0xae>
 80198e8:	f1b8 0f06 	cmp.w	r8, #6
 80198ec:	d1ef      	bne.n	80198ce <read_submessage_format+0x5a>
 80198ee:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 80198f2:	f1b8 0f00 	cmp.w	r8, #0
 80198f6:	d011      	beq.n	801991c <read_submessage_format+0xa8>
 80198f8:	ab0c      	add	r3, sp, #48	; 0x30
 80198fa:	e9cd 3500 	strd	r3, r5, [sp]
 80198fe:	2306      	movs	r3, #6
 8019900:	f88d 3016 	strb.w	r3, [sp, #22]
 8019904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019908:	9302      	str	r3, [sp, #8]
 801990a:	4632      	mov	r2, r6
 801990c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8019910:	4638      	mov	r0, r7
 8019912:	47c0      	blx	r8
 8019914:	2301      	movs	r3, #1
 8019916:	69e2      	ldr	r2, [r4, #28]
 8019918:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 801991c:	2a00      	cmp	r2, #0
 801991e:	d1d4      	bne.n	80198ca <read_submessage_format+0x56>
 8019920:	e7d5      	b.n	80198ce <read_submessage_format+0x5a>
 8019922:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019926:	2b00      	cmp	r3, #0
 8019928:	d0f8      	beq.n	801991c <read_submessage_format+0xa8>
 801992a:	a906      	add	r1, sp, #24
 801992c:	a80c      	add	r0, sp, #48	; 0x30
 801992e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8019932:	f7fc fdb7 	bl	80164a4 <uxr_deserialize_SampleIdentity>
 8019936:	b9a0      	cbnz	r0, 8019962 <read_submessage_format+0xee>
 8019938:	69e2      	ldr	r2, [r4, #28]
 801993a:	2a00      	cmp	r2, #0
 801993c:	d1c5      	bne.n	80198ca <read_submessage_format+0x56>
 801993e:	e7c6      	b.n	80198ce <read_submessage_format+0x5a>
 8019940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019944:	b13b      	cbz	r3, 8019956 <read_submessage_format+0xe2>
 8019946:	a906      	add	r1, sp, #24
 8019948:	a80c      	add	r0, sp, #48	; 0x30
 801994a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801994e:	f7fc faa3 	bl	8015e98 <uxr_deserialize_BaseObjectRequest>
 8019952:	bb60      	cbnz	r0, 80199ae <read_submessage_format+0x13a>
 8019954:	69e2      	ldr	r2, [r4, #28]
 8019956:	68a3      	ldr	r3, [r4, #8]
 8019958:	442b      	add	r3, r5
 801995a:	60a3      	str	r3, [r4, #8]
 801995c:	2a00      	cmp	r2, #0
 801995e:	d1b4      	bne.n	80198ca <read_submessage_format+0x56>
 8019960:	e7b5      	b.n	80198ce <read_submessage_format+0x5a>
 8019962:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8019966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019968:	1a52      	subs	r2, r2, r1
 801996a:	eba8 0803 	sub.w	r8, r8, r3
 801996e:	a80c      	add	r0, sp, #48	; 0x30
 8019970:	f7fa f83e 	bl	80139f0 <ucdr_init_buffer>
 8019974:	44a8      	add	r8, r5
 8019976:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801997a:	a80c      	add	r0, sp, #48	; 0x30
 801997c:	f7fa f80c 	bl	8013998 <ucdr_set_on_full_buffer_callback>
 8019980:	fa1f f888 	uxth.w	r8, r8
 8019984:	ab0c      	add	r3, sp, #48	; 0x30
 8019986:	9300      	str	r3, [sp, #0]
 8019988:	f8cd 8004 	str.w	r8, [sp, #4]
 801998c:	2108      	movs	r1, #8
 801998e:	f88d 1016 	strb.w	r1, [sp, #22]
 8019992:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8019996:	9102      	str	r1, [sp, #8]
 8019998:	ab06      	add	r3, sp, #24
 801999a:	4632      	mov	r2, r6
 801999c:	9905      	ldr	r1, [sp, #20]
 801999e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 80199a2:	4638      	mov	r0, r7
 80199a4:	47b0      	blx	r6
 80199a6:	2301      	movs	r3, #1
 80199a8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80199ac:	e7c4      	b.n	8019938 <read_submessage_format+0xc4>
 80199ae:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80199b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80199b4:	1a52      	subs	r2, r2, r1
 80199b6:	a80c      	add	r0, sp, #48	; 0x30
 80199b8:	eba8 0803 	sub.w	r8, r8, r3
 80199bc:	f7fa f818 	bl	80139f0 <ucdr_init_buffer>
 80199c0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80199c4:	a80c      	add	r0, sp, #48	; 0x30
 80199c6:	f7f9 ffe7 	bl	8013998 <ucdr_set_on_full_buffer_callback>
 80199ca:	ab0c      	add	r3, sp, #48	; 0x30
 80199cc:	9300      	str	r3, [sp, #0]
 80199ce:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80199d2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80199d6:	44a8      	add	r8, r5
 80199d8:	fa1f f888 	uxth.w	r8, r8
 80199dc:	f8cd 8004 	str.w	r8, [sp, #4]
 80199e0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80199e4:	2107      	movs	r1, #7
 80199e6:	f88d 1016 	strb.w	r1, [sp, #22]
 80199ea:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80199ee:	9102      	str	r1, [sp, #8]
 80199f0:	4632      	mov	r2, r6
 80199f2:	b29b      	uxth	r3, r3
 80199f4:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 80199f8:	9905      	ldr	r1, [sp, #20]
 80199fa:	4638      	mov	r0, r7
 80199fc:	47b0      	blx	r6
 80199fe:	2301      	movs	r3, #1
 8019a00:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8019a04:	e7a6      	b.n	8019954 <read_submessage_format+0xe0>
 8019a06:	bf00      	nop

08019a08 <uxr_seq_num_add>:
 8019a08:	4408      	add	r0, r1
 8019a0a:	b280      	uxth	r0, r0
 8019a0c:	4770      	bx	lr
 8019a0e:	bf00      	nop

08019a10 <uxr_seq_num_sub>:
 8019a10:	1a40      	subs	r0, r0, r1
 8019a12:	b280      	uxth	r0, r0
 8019a14:	4770      	bx	lr
 8019a16:	bf00      	nop

08019a18 <uxr_seq_num_cmp>:
 8019a18:	4288      	cmp	r0, r1
 8019a1a:	d011      	beq.n	8019a40 <uxr_seq_num_cmp+0x28>
 8019a1c:	d309      	bcc.n	8019a32 <uxr_seq_num_cmp+0x1a>
 8019a1e:	4288      	cmp	r0, r1
 8019a20:	d910      	bls.n	8019a44 <uxr_seq_num_cmp+0x2c>
 8019a22:	1a40      	subs	r0, r0, r1
 8019a24:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8019a28:	bfd4      	ite	le
 8019a2a:	2001      	movle	r0, #1
 8019a2c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8019a30:	4770      	bx	lr
 8019a32:	1a0b      	subs	r3, r1, r0
 8019a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019a38:	daf1      	bge.n	8019a1e <uxr_seq_num_cmp+0x6>
 8019a3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a3e:	4770      	bx	lr
 8019a40:	2000      	movs	r0, #0
 8019a42:	4770      	bx	lr
 8019a44:	2001      	movs	r0, #1
 8019a46:	4770      	bx	lr

08019a48 <uxr_init_framing_io>:
 8019a48:	2300      	movs	r3, #0
 8019a4a:	7041      	strb	r1, [r0, #1]
 8019a4c:	7003      	strb	r3, [r0, #0]
 8019a4e:	8583      	strh	r3, [r0, #44]	; 0x2c
 8019a50:	4770      	bx	lr
 8019a52:	bf00      	nop

08019a54 <uxr_write_framed_msg>:
 8019a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a58:	4617      	mov	r7, r2
 8019a5a:	7842      	ldrb	r2, [r0, #1]
 8019a5c:	b083      	sub	sp, #12
 8019a5e:	460e      	mov	r6, r1
 8019a60:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8019a64:	469a      	mov	sl, r3
 8019a66:	2901      	cmp	r1, #1
 8019a68:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8019a6c:	4604      	mov	r4, r0
 8019a6e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019a72:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8019a76:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8019a7a:	f240 8137 	bls.w	8019cec <uxr_write_framed_msg+0x298>
 8019a7e:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019a82:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8019a86:	2901      	cmp	r1, #1
 8019a88:	f04f 0202 	mov.w	r2, #2
 8019a8c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019a90:	f240 808f 	bls.w	8019bb2 <uxr_write_framed_msg+0x15e>
 8019a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a96:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8019a9a:	b2dd      	uxtb	r5, r3
 8019a9c:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8019aa0:	2203      	movs	r2, #3
 8019aa2:	2901      	cmp	r1, #1
 8019aa4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019aa8:	f240 809a 	bls.w	8019be0 <uxr_write_framed_msg+0x18c>
 8019aac:	18a1      	adds	r1, r4, r2
 8019aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019ab0:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8019ab4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019ab8:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8019abc:	3201      	adds	r2, #1
 8019abe:	2801      	cmp	r0, #1
 8019ac0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019ac4:	f240 80a0 	bls.w	8019c08 <uxr_write_framed_msg+0x1b4>
 8019ac8:	18a0      	adds	r0, r4, r2
 8019aca:	3201      	adds	r2, #1
 8019acc:	b2d2      	uxtb	r2, r2
 8019ace:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019ad2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	f000 80a9 	beq.w	8019c2e <uxr_write_framed_msg+0x1da>
 8019adc:	f04f 0900 	mov.w	r9, #0
 8019ae0:	46c8      	mov	r8, r9
 8019ae2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8019ae6:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8019aea:	2901      	cmp	r1, #1
 8019aec:	f240 80c3 	bls.w	8019c76 <uxr_write_framed_msg+0x222>
 8019af0:	2a29      	cmp	r2, #41	; 0x29
 8019af2:	f200 809f 	bhi.w	8019c34 <uxr_write_framed_msg+0x1e0>
 8019af6:	18a1      	adds	r1, r4, r2
 8019af8:	3201      	adds	r2, #1
 8019afa:	b2d2      	uxtb	r2, r2
 8019afc:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8019b00:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019b04:	ea89 0303 	eor.w	r3, r9, r3
 8019b08:	498c      	ldr	r1, [pc, #560]	; (8019d3c <uxr_write_framed_msg+0x2e8>)
 8019b0a:	b2db      	uxtb	r3, r3
 8019b0c:	f108 0801 	add.w	r8, r8, #1
 8019b10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019b14:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8019b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b1a:	4543      	cmp	r3, r8
 8019b1c:	d8e1      	bhi.n	8019ae2 <uxr_write_framed_msg+0x8e>
 8019b1e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8019b22:	fa5f f889 	uxtb.w	r8, r9
 8019b26:	9301      	str	r3, [sp, #4]
 8019b28:	f04f 0900 	mov.w	r9, #0
 8019b2c:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8019b30:	fa5f f18a 	uxtb.w	r1, sl
 8019b34:	2901      	cmp	r1, #1
 8019b36:	d921      	bls.n	8019b7c <uxr_write_framed_msg+0x128>
 8019b38:	2a29      	cmp	r2, #41	; 0x29
 8019b3a:	f240 80af 	bls.w	8019c9c <uxr_write_framed_msg+0x248>
 8019b3e:	2500      	movs	r5, #0
 8019b40:	e000      	b.n	8019b44 <uxr_write_framed_msg+0xf0>
 8019b42:	b160      	cbz	r0, 8019b5e <uxr_write_framed_msg+0x10a>
 8019b44:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019b48:	1b52      	subs	r2, r2, r5
 8019b4a:	465b      	mov	r3, fp
 8019b4c:	4421      	add	r1, r4
 8019b4e:	4638      	mov	r0, r7
 8019b50:	47b0      	blx	r6
 8019b52:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019b56:	4405      	add	r5, r0
 8019b58:	4295      	cmp	r5, r2
 8019b5a:	d3f2      	bcc.n	8019b42 <uxr_write_framed_msg+0xee>
 8019b5c:	d003      	beq.n	8019b66 <uxr_write_framed_msg+0x112>
 8019b5e:	2000      	movs	r0, #0
 8019b60:	b003      	add	sp, #12
 8019b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b66:	fa5f f18a 	uxtb.w	r1, sl
 8019b6a:	f04f 0300 	mov.w	r3, #0
 8019b6e:	2901      	cmp	r1, #1
 8019b70:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019b74:	f04f 0200 	mov.w	r2, #0
 8019b78:	f200 8090 	bhi.w	8019c9c <uxr_write_framed_msg+0x248>
 8019b7c:	1c51      	adds	r1, r2, #1
 8019b7e:	b2c9      	uxtb	r1, r1
 8019b80:	2929      	cmp	r1, #41	; 0x29
 8019b82:	d8dc      	bhi.n	8019b3e <uxr_write_framed_msg+0xea>
 8019b84:	18a5      	adds	r5, r4, r2
 8019b86:	4421      	add	r1, r4
 8019b88:	3202      	adds	r2, #2
 8019b8a:	f088 0820 	eor.w	r8, r8, #32
 8019b8e:	4648      	mov	r0, r9
 8019b90:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8019b94:	b2d2      	uxtb	r2, r2
 8019b96:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8019b9a:	f04f 0901 	mov.w	r9, #1
 8019b9e:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8019ba2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019ba6:	2800      	cmp	r0, #0
 8019ba8:	f040 8085 	bne.w	8019cb6 <uxr_write_framed_msg+0x262>
 8019bac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019bb0:	e7bc      	b.n	8019b2c <uxr_write_framed_msg+0xd8>
 8019bb2:	4611      	mov	r1, r2
 8019bb4:	f04f 0c03 	mov.w	ip, #3
 8019bb8:	2204      	movs	r2, #4
 8019bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019bbc:	4421      	add	r1, r4
 8019bbe:	b2dd      	uxtb	r5, r3
 8019bc0:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8019bc4:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 8019bc8:	44a4      	add	ip, r4
 8019bca:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8019bce:	f080 0020 	eor.w	r0, r0, #32
 8019bd2:	2901      	cmp	r1, #1
 8019bd4:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8019bd8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019bdc:	f63f af66 	bhi.w	8019aac <uxr_write_framed_msg+0x58>
 8019be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019be2:	18a0      	adds	r0, r4, r2
 8019be4:	f085 0520 	eor.w	r5, r5, #32
 8019be8:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8019bec:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019bf0:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8019bf4:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8019bf8:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8019bfc:	3202      	adds	r2, #2
 8019bfe:	2801      	cmp	r0, #1
 8019c00:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019c04:	f63f af60 	bhi.w	8019ac8 <uxr_write_framed_msg+0x74>
 8019c08:	1c50      	adds	r0, r2, #1
 8019c0a:	18a5      	adds	r5, r4, r2
 8019c0c:	fa54 f080 	uxtab	r0, r4, r0
 8019c10:	3202      	adds	r2, #2
 8019c12:	f081 0120 	eor.w	r1, r1, #32
 8019c16:	b2d2      	uxtb	r2, r2
 8019c18:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8019c1c:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8019c20:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019c24:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	f47f af57 	bne.w	8019adc <uxr_write_framed_msg+0x88>
 8019c2e:	9301      	str	r3, [sp, #4]
 8019c30:	4698      	mov	r8, r3
 8019c32:	e779      	b.n	8019b28 <uxr_write_framed_msg+0xd4>
 8019c34:	2500      	movs	r5, #0
 8019c36:	e001      	b.n	8019c3c <uxr_write_framed_msg+0x1e8>
 8019c38:	2800      	cmp	r0, #0
 8019c3a:	d090      	beq.n	8019b5e <uxr_write_framed_msg+0x10a>
 8019c3c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019c40:	1b52      	subs	r2, r2, r5
 8019c42:	465b      	mov	r3, fp
 8019c44:	4421      	add	r1, r4
 8019c46:	4638      	mov	r0, r7
 8019c48:	47b0      	blx	r6
 8019c4a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019c4e:	4405      	add	r5, r0
 8019c50:	4295      	cmp	r5, r2
 8019c52:	d3f1      	bcc.n	8019c38 <uxr_write_framed_msg+0x1e4>
 8019c54:	d183      	bne.n	8019b5e <uxr_write_framed_msg+0x10a>
 8019c56:	f04f 0300 	mov.w	r3, #0
 8019c5a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019c60:	4543      	cmp	r3, r8
 8019c62:	d964      	bls.n	8019d2e <uxr_write_framed_msg+0x2da>
 8019c64:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8019c68:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8019c6c:	2901      	cmp	r1, #1
 8019c6e:	f04f 0200 	mov.w	r2, #0
 8019c72:	f63f af3d 	bhi.w	8019af0 <uxr_write_framed_msg+0x9c>
 8019c76:	1c51      	adds	r1, r2, #1
 8019c78:	b2c9      	uxtb	r1, r1
 8019c7a:	2929      	cmp	r1, #41	; 0x29
 8019c7c:	d8da      	bhi.n	8019c34 <uxr_write_framed_msg+0x1e0>
 8019c7e:	18a0      	adds	r0, r4, r2
 8019c80:	4421      	add	r1, r4
 8019c82:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8019c86:	3202      	adds	r2, #2
 8019c88:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8019c8c:	b2d2      	uxtb	r2, r2
 8019c8e:	f083 0020 	eor.w	r0, r3, #32
 8019c92:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8019c96:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019c9a:	e733      	b.n	8019b04 <uxr_write_framed_msg+0xb0>
 8019c9c:	18a1      	adds	r1, r4, r2
 8019c9e:	3201      	adds	r2, #1
 8019ca0:	4648      	mov	r0, r9
 8019ca2:	b2d2      	uxtb	r2, r2
 8019ca4:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8019ca8:	f04f 0901 	mov.w	r9, #1
 8019cac:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019cb0:	2800      	cmp	r0, #0
 8019cb2:	f43f af7b 	beq.w	8019bac <uxr_write_framed_msg+0x158>
 8019cb6:	2500      	movs	r5, #0
 8019cb8:	e002      	b.n	8019cc0 <uxr_write_framed_msg+0x26c>
 8019cba:	2800      	cmp	r0, #0
 8019cbc:	f43f af4f 	beq.w	8019b5e <uxr_write_framed_msg+0x10a>
 8019cc0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019cc4:	1b52      	subs	r2, r2, r5
 8019cc6:	465b      	mov	r3, fp
 8019cc8:	4421      	add	r1, r4
 8019cca:	4638      	mov	r0, r7
 8019ccc:	47b0      	blx	r6
 8019cce:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019cd2:	4405      	add	r5, r0
 8019cd4:	4295      	cmp	r5, r2
 8019cd6:	d3f0      	bcc.n	8019cba <uxr_write_framed_msg+0x266>
 8019cd8:	f47f af41 	bne.w	8019b5e <uxr_write_framed_msg+0x10a>
 8019cdc:	2300      	movs	r3, #0
 8019cde:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019ce4:	b298      	uxth	r0, r3
 8019ce6:	b003      	add	sp, #12
 8019ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cec:	217d      	movs	r1, #125	; 0x7d
 8019cee:	f082 0220 	eor.w	r2, r2, #32
 8019cf2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8019cf6:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019cfa:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8019cfe:	2901      	cmp	r1, #1
 8019d00:	f04f 0203 	mov.w	r2, #3
 8019d04:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019d08:	d804      	bhi.n	8019d14 <uxr_write_framed_msg+0x2c0>
 8019d0a:	4611      	mov	r1, r2
 8019d0c:	f04f 0c04 	mov.w	ip, #4
 8019d10:	2205      	movs	r2, #5
 8019d12:	e752      	b.n	8019bba <uxr_write_framed_msg+0x166>
 8019d14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d16:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8019d1a:	b2dd      	uxtb	r5, r3
 8019d1c:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8019d20:	2204      	movs	r2, #4
 8019d22:	2901      	cmp	r1, #1
 8019d24:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019d28:	f63f aec0 	bhi.w	8019aac <uxr_write_framed_msg+0x58>
 8019d2c:	e758      	b.n	8019be0 <uxr_write_framed_msg+0x18c>
 8019d2e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8019d32:	fa5f f889 	uxtb.w	r8, r9
 8019d36:	9301      	str	r3, [sp, #4]
 8019d38:	2200      	movs	r2, #0
 8019d3a:	e6f5      	b.n	8019b28 <uxr_write_framed_msg+0xd4>
 8019d3c:	0801d568 	.word	0x0801d568

08019d40 <uxr_framing_read_transport>:
 8019d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d44:	4604      	mov	r4, r0
 8019d46:	b083      	sub	sp, #12
 8019d48:	461f      	mov	r7, r3
 8019d4a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8019d4e:	4689      	mov	r9, r1
 8019d50:	4692      	mov	sl, r2
 8019d52:	f7fb faa1 	bl	8015298 <uxr_millis>
 8019d56:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019d5a:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8019d5e:	42b3      	cmp	r3, r6
 8019d60:	4680      	mov	r8, r0
 8019d62:	d061      	beq.n	8019e28 <uxr_framing_read_transport+0xe8>
 8019d64:	d81c      	bhi.n	8019da0 <uxr_framing_read_transport+0x60>
 8019d66:	1e75      	subs	r5, r6, #1
 8019d68:	1aed      	subs	r5, r5, r3
 8019d6a:	b2ed      	uxtb	r5, r5
 8019d6c:	2600      	movs	r6, #0
 8019d6e:	455d      	cmp	r5, fp
 8019d70:	d81f      	bhi.n	8019db2 <uxr_framing_read_transport+0x72>
 8019d72:	19ab      	adds	r3, r5, r6
 8019d74:	455b      	cmp	r3, fp
 8019d76:	bf84      	itt	hi
 8019d78:	ebab 0605 	subhi.w	r6, fp, r5
 8019d7c:	b2f6      	uxtbhi	r6, r6
 8019d7e:	b9ed      	cbnz	r5, 8019dbc <uxr_framing_read_transport+0x7c>
 8019d80:	f04f 0b00 	mov.w	fp, #0
 8019d84:	f7fb fa88 	bl	8015298 <uxr_millis>
 8019d88:	683b      	ldr	r3, [r7, #0]
 8019d8a:	eba0 0808 	sub.w	r8, r0, r8
 8019d8e:	eba3 0308 	sub.w	r3, r3, r8
 8019d92:	4658      	mov	r0, fp
 8019d94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019d98:	603b      	str	r3, [r7, #0]
 8019d9a:	b003      	add	sp, #12
 8019d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019da0:	2e00      	cmp	r6, #0
 8019da2:	d049      	beq.n	8019e38 <uxr_framing_read_transport+0xf8>
 8019da4:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8019da8:	b2ed      	uxtb	r5, r5
 8019daa:	3e01      	subs	r6, #1
 8019dac:	455d      	cmp	r5, fp
 8019dae:	b2f6      	uxtb	r6, r6
 8019db0:	d9df      	bls.n	8019d72 <uxr_framing_read_transport+0x32>
 8019db2:	fa5f f58b 	uxtb.w	r5, fp
 8019db6:	2600      	movs	r6, #0
 8019db8:	2d00      	cmp	r5, #0
 8019dba:	d0e1      	beq.n	8019d80 <uxr_framing_read_transport+0x40>
 8019dbc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019dc0:	3102      	adds	r1, #2
 8019dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019dc4:	9300      	str	r3, [sp, #0]
 8019dc6:	683b      	ldr	r3, [r7, #0]
 8019dc8:	4421      	add	r1, r4
 8019dca:	462a      	mov	r2, r5
 8019dcc:	4650      	mov	r0, sl
 8019dce:	47c8      	blx	r9
 8019dd0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019dd4:	4a1a      	ldr	r2, [pc, #104]	; (8019e40 <uxr_framing_read_transport+0x100>)
 8019dd6:	4403      	add	r3, r0
 8019dd8:	0859      	lsrs	r1, r3, #1
 8019dda:	fba2 2101 	umull	r2, r1, r2, r1
 8019dde:	0889      	lsrs	r1, r1, #2
 8019de0:	222a      	movs	r2, #42	; 0x2a
 8019de2:	fb02 3111 	mls	r1, r2, r1, r3
 8019de6:	4683      	mov	fp, r0
 8019de8:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8019dec:	2800      	cmp	r0, #0
 8019dee:	d0c7      	beq.n	8019d80 <uxr_framing_read_transport+0x40>
 8019df0:	42a8      	cmp	r0, r5
 8019df2:	d1c7      	bne.n	8019d84 <uxr_framing_read_transport+0x44>
 8019df4:	2e00      	cmp	r6, #0
 8019df6:	d0c5      	beq.n	8019d84 <uxr_framing_read_transport+0x44>
 8019df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019dfa:	9300      	str	r3, [sp, #0]
 8019dfc:	3102      	adds	r1, #2
 8019dfe:	4632      	mov	r2, r6
 8019e00:	4421      	add	r1, r4
 8019e02:	2300      	movs	r3, #0
 8019e04:	4650      	mov	r0, sl
 8019e06:	47c8      	blx	r9
 8019e08:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019e0c:	4a0c      	ldr	r2, [pc, #48]	; (8019e40 <uxr_framing_read_transport+0x100>)
 8019e0e:	180b      	adds	r3, r1, r0
 8019e10:	0859      	lsrs	r1, r3, #1
 8019e12:	fba2 1201 	umull	r1, r2, r2, r1
 8019e16:	0892      	lsrs	r2, r2, #2
 8019e18:	212a      	movs	r1, #42	; 0x2a
 8019e1a:	fb01 3312 	mls	r3, r1, r2, r3
 8019e1e:	eb00 0b05 	add.w	fp, r0, r5
 8019e22:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8019e26:	e7ad      	b.n	8019d84 <uxr_framing_read_transport+0x44>
 8019e28:	2600      	movs	r6, #0
 8019e2a:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8019e2e:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8019e30:	d9bf      	bls.n	8019db2 <uxr_framing_read_transport+0x72>
 8019e32:	2102      	movs	r1, #2
 8019e34:	2529      	movs	r5, #41	; 0x29
 8019e36:	e7c4      	b.n	8019dc2 <uxr_framing_read_transport+0x82>
 8019e38:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8019e3c:	b2ed      	uxtb	r5, r5
 8019e3e:	e796      	b.n	8019d6e <uxr_framing_read_transport+0x2e>
 8019e40:	30c30c31 	.word	0x30c30c31

08019e44 <uxr_read_framed_msg>:
 8019e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e48:	461e      	mov	r6, r3
 8019e4a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019e4e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8019e52:	429d      	cmp	r5, r3
 8019e54:	b083      	sub	sp, #12
 8019e56:	4604      	mov	r4, r0
 8019e58:	4688      	mov	r8, r1
 8019e5a:	4691      	mov	r9, r2
 8019e5c:	f000 8188 	beq.w	801a170 <uxr_read_framed_msg+0x32c>
 8019e60:	7823      	ldrb	r3, [r4, #0]
 8019e62:	4dc1      	ldr	r5, [pc, #772]	; (801a168 <uxr_read_framed_msg+0x324>)
 8019e64:	4fc1      	ldr	r7, [pc, #772]	; (801a16c <uxr_read_framed_msg+0x328>)
 8019e66:	2b07      	cmp	r3, #7
 8019e68:	d8fd      	bhi.n	8019e66 <uxr_read_framed_msg+0x22>
 8019e6a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019e6e:	0115      	.short	0x0115
 8019e70:	00d600f6 	.word	0x00d600f6
 8019e74:	009000b9 	.word	0x009000b9
 8019e78:	0030004d 	.word	0x0030004d
 8019e7c:	0008      	.short	0x0008
 8019e7e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019e82:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019e86:	4299      	cmp	r1, r3
 8019e88:	f000 814a 	beq.w	801a120 <uxr_read_framed_msg+0x2dc>
 8019e8c:	18e2      	adds	r2, r4, r3
 8019e8e:	7892      	ldrb	r2, [r2, #2]
 8019e90:	2a7d      	cmp	r2, #125	; 0x7d
 8019e92:	f000 8199 	beq.w	801a1c8 <uxr_read_framed_msg+0x384>
 8019e96:	3301      	adds	r3, #1
 8019e98:	0858      	lsrs	r0, r3, #1
 8019e9a:	fba5 1000 	umull	r1, r0, r5, r0
 8019e9e:	0880      	lsrs	r0, r0, #2
 8019ea0:	212a      	movs	r1, #42	; 0x2a
 8019ea2:	fb01 3310 	mls	r3, r1, r0, r3
 8019ea6:	2a7e      	cmp	r2, #126	; 0x7e
 8019ea8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019eac:	f000 8252 	beq.w	801a354 <uxr_read_framed_msg+0x510>
 8019eb0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019eb2:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8019eb4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019eb8:	b29b      	uxth	r3, r3
 8019eba:	2200      	movs	r2, #0
 8019ebc:	4299      	cmp	r1, r3
 8019ebe:	86a3      	strh	r3, [r4, #52]	; 0x34
 8019ec0:	7022      	strb	r2, [r4, #0]
 8019ec2:	f000 8179 	beq.w	801a1b8 <uxr_read_framed_msg+0x374>
 8019ec6:	2000      	movs	r0, #0
 8019ec8:	b003      	add	sp, #12
 8019eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ece:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019ed2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019ed6:	4299      	cmp	r1, r3
 8019ed8:	f000 8131 	beq.w	801a13e <uxr_read_framed_msg+0x2fa>
 8019edc:	18e2      	adds	r2, r4, r3
 8019ede:	7890      	ldrb	r0, [r2, #2]
 8019ee0:	287d      	cmp	r0, #125	; 0x7d
 8019ee2:	f000 8190 	beq.w	801a206 <uxr_read_framed_msg+0x3c2>
 8019ee6:	3301      	adds	r3, #1
 8019ee8:	085a      	lsrs	r2, r3, #1
 8019eea:	fba5 1202 	umull	r1, r2, r5, r2
 8019eee:	0892      	lsrs	r2, r2, #2
 8019ef0:	212a      	movs	r1, #42	; 0x2a
 8019ef2:	fb01 3312 	mls	r3, r1, r2, r3
 8019ef6:	287e      	cmp	r0, #126	; 0x7e
 8019ef8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019efc:	f000 821a 	beq.w	801a334 <uxr_read_framed_msg+0x4f0>
 8019f00:	2307      	movs	r3, #7
 8019f02:	86a0      	strh	r0, [r4, #52]	; 0x34
 8019f04:	7023      	strb	r3, [r4, #0]
 8019f06:	e7ae      	b.n	8019e66 <uxr_read_framed_msg+0x22>
 8019f08:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019f0a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8019f0e:	459e      	cmp	lr, r3
 8019f10:	d938      	bls.n	8019f84 <uxr_read_framed_msg+0x140>
 8019f12:	ee07 8a90 	vmov	s15, r8
 8019f16:	212a      	movs	r1, #42	; 0x2a
 8019f18:	e020      	b.n	8019f5c <uxr_read_framed_msg+0x118>
 8019f1a:	f89b c002 	ldrb.w	ip, [fp, #2]
 8019f1e:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8019f22:	f000 80d4 	beq.w	801a0ce <uxr_read_framed_msg+0x28a>
 8019f26:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8019f2a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019f2e:	f000 8219 	beq.w	801a364 <uxr_read_framed_msg+0x520>
 8019f32:	f806 c003 	strb.w	ip, [r6, r3]
 8019f36:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 8019f3a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019f3c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8019f40:	ea8a 000c 	eor.w	r0, sl, ip
 8019f44:	b2c0      	uxtb	r0, r0
 8019f46:	3301      	adds	r3, #1
 8019f48:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8019f4c:	b29b      	uxth	r3, r3
 8019f4e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8019f52:	4573      	cmp	r3, lr
 8019f54:	8663      	strh	r3, [r4, #50]	; 0x32
 8019f56:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019f58:	f080 8120 	bcs.w	801a19c <uxr_read_framed_msg+0x358>
 8019f5c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8019f60:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8019f64:	f100 0c01 	add.w	ip, r0, #1
 8019f68:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019f6c:	fba5 8202 	umull	r8, r2, r5, r2
 8019f70:	0892      	lsrs	r2, r2, #2
 8019f72:	4582      	cmp	sl, r0
 8019f74:	eb04 0b00 	add.w	fp, r4, r0
 8019f78:	fb01 c212 	mls	r2, r1, r2, ip
 8019f7c:	d1cd      	bne.n	8019f1a <uxr_read_framed_msg+0xd6>
 8019f7e:	ee17 8a90 	vmov	r8, s15
 8019f82:	459e      	cmp	lr, r3
 8019f84:	f040 8111 	bne.w	801a1aa <uxr_read_framed_msg+0x366>
 8019f88:	2306      	movs	r3, #6
 8019f8a:	7023      	strb	r3, [r4, #0]
 8019f8c:	e76b      	b.n	8019e66 <uxr_read_framed_msg+0x22>
 8019f8e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019f92:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019f96:	4298      	cmp	r0, r3
 8019f98:	f000 80c2 	beq.w	801a120 <uxr_read_framed_msg+0x2dc>
 8019f9c:	18e2      	adds	r2, r4, r3
 8019f9e:	7891      	ldrb	r1, [r2, #2]
 8019fa0:	297d      	cmp	r1, #125	; 0x7d
 8019fa2:	f000 814c 	beq.w	801a23e <uxr_read_framed_msg+0x3fa>
 8019fa6:	3301      	adds	r3, #1
 8019fa8:	085a      	lsrs	r2, r3, #1
 8019faa:	fba5 0202 	umull	r0, r2, r5, r2
 8019fae:	0892      	lsrs	r2, r2, #2
 8019fb0:	202a      	movs	r0, #42	; 0x2a
 8019fb2:	fb00 3312 	mls	r3, r0, r2, r3
 8019fb6:	297e      	cmp	r1, #126	; 0x7e
 8019fb8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019fbc:	f000 81ca 	beq.w	801a354 <uxr_read_framed_msg+0x510>
 8019fc0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019fc2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019fc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019fc8:	b29b      	uxth	r3, r3
 8019fca:	2000      	movs	r0, #0
 8019fcc:	428b      	cmp	r3, r1
 8019fce:	8623      	strh	r3, [r4, #48]	; 0x30
 8019fd0:	8660      	strh	r0, [r4, #50]	; 0x32
 8019fd2:	86e0      	strh	r0, [r4, #54]	; 0x36
 8019fd4:	f240 80df 	bls.w	801a196 <uxr_read_framed_msg+0x352>
 8019fd8:	7020      	strb	r0, [r4, #0]
 8019fda:	b003      	add	sp, #12
 8019fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fe0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019fe4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019fe8:	4299      	cmp	r1, r3
 8019fea:	f000 80a8 	beq.w	801a13e <uxr_read_framed_msg+0x2fa>
 8019fee:	18e2      	adds	r2, r4, r3
 8019ff0:	7890      	ldrb	r0, [r2, #2]
 8019ff2:	287d      	cmp	r0, #125	; 0x7d
 8019ff4:	f000 8164 	beq.w	801a2c0 <uxr_read_framed_msg+0x47c>
 8019ff8:	3301      	adds	r3, #1
 8019ffa:	085a      	lsrs	r2, r3, #1
 8019ffc:	fba5 1202 	umull	r1, r2, r5, r2
 801a000:	0892      	lsrs	r2, r2, #2
 801a002:	212a      	movs	r1, #42	; 0x2a
 801a004:	fb01 3312 	mls	r3, r1, r2, r3
 801a008:	287e      	cmp	r0, #126	; 0x7e
 801a00a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a00e:	f000 8191 	beq.w	801a334 <uxr_read_framed_msg+0x4f0>
 801a012:	2304      	movs	r3, #4
 801a014:	8620      	strh	r0, [r4, #48]	; 0x30
 801a016:	7023      	strb	r3, [r4, #0]
 801a018:	e725      	b.n	8019e66 <uxr_read_framed_msg+0x22>
 801a01a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801a01e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801a022:	4290      	cmp	r0, r2
 801a024:	f000 80b3 	beq.w	801a18e <uxr_read_framed_msg+0x34a>
 801a028:	18a3      	adds	r3, r4, r2
 801a02a:	7899      	ldrb	r1, [r3, #2]
 801a02c:	297d      	cmp	r1, #125	; 0x7d
 801a02e:	f000 8164 	beq.w	801a2fa <uxr_read_framed_msg+0x4b6>
 801a032:	3201      	adds	r2, #1
 801a034:	0850      	lsrs	r0, r2, #1
 801a036:	fba5 3000 	umull	r3, r0, r5, r0
 801a03a:	0880      	lsrs	r0, r0, #2
 801a03c:	232a      	movs	r3, #42	; 0x2a
 801a03e:	fb03 2210 	mls	r2, r3, r0, r2
 801a042:	297e      	cmp	r1, #126	; 0x7e
 801a044:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801a048:	f000 8188 	beq.w	801a35c <uxr_read_framed_msg+0x518>
 801a04c:	7863      	ldrb	r3, [r4, #1]
 801a04e:	428b      	cmp	r3, r1
 801a050:	bf0c      	ite	eq
 801a052:	2303      	moveq	r3, #3
 801a054:	2300      	movne	r3, #0
 801a056:	7023      	strb	r3, [r4, #0]
 801a058:	e705      	b.n	8019e66 <uxr_read_framed_msg+0x22>
 801a05a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801a05e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801a062:	2200      	movs	r2, #0
 801a064:	4299      	cmp	r1, r3
 801a066:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801a06a:	d06c      	beq.n	801a146 <uxr_read_framed_msg+0x302>
 801a06c:	18e2      	adds	r2, r4, r3
 801a06e:	7890      	ldrb	r0, [r2, #2]
 801a070:	287d      	cmp	r0, #125	; 0x7d
 801a072:	f000 8101 	beq.w	801a278 <uxr_read_framed_msg+0x434>
 801a076:	3301      	adds	r3, #1
 801a078:	085a      	lsrs	r2, r3, #1
 801a07a:	fba5 1202 	umull	r1, r2, r5, r2
 801a07e:	0892      	lsrs	r2, r2, #2
 801a080:	212a      	movs	r1, #42	; 0x2a
 801a082:	fb01 3312 	mls	r3, r1, r2, r3
 801a086:	287e      	cmp	r0, #126	; 0x7e
 801a088:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801a08c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a090:	d059      	beq.n	801a146 <uxr_read_framed_msg+0x302>
 801a092:	2302      	movs	r3, #2
 801a094:	7023      	strb	r3, [r4, #0]
 801a096:	e6e6      	b.n	8019e66 <uxr_read_framed_msg+0x22>
 801a098:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801a09c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801a0a0:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801a0a4:	1c51      	adds	r1, r2, #1
 801a0a6:	084b      	lsrs	r3, r1, #1
 801a0a8:	fba5 c303 	umull	ip, r3, r5, r3
 801a0ac:	089b      	lsrs	r3, r3, #2
 801a0ae:	fb0e 1313 	mls	r3, lr, r3, r1
 801a0b2:	4592      	cmp	sl, r2
 801a0b4:	eb04 0002 	add.w	r0, r4, r2
 801a0b8:	b2da      	uxtb	r2, r3
 801a0ba:	f43f af04 	beq.w	8019ec6 <uxr_read_framed_msg+0x82>
 801a0be:	7883      	ldrb	r3, [r0, #2]
 801a0c0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801a0c4:	2b7e      	cmp	r3, #126	; 0x7e
 801a0c6:	d1ed      	bne.n	801a0a4 <uxr_read_framed_msg+0x260>
 801a0c8:	2301      	movs	r3, #1
 801a0ca:	7023      	strb	r3, [r4, #0]
 801a0cc:	e6cb      	b.n	8019e66 <uxr_read_framed_msg+0x22>
 801a0ce:	f100 0c01 	add.w	ip, r0, #1
 801a0d2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a0d6:	fba5 8202 	umull	r8, r2, r5, r2
 801a0da:	0892      	lsrs	r2, r2, #2
 801a0dc:	fb01 c212 	mls	r2, r1, r2, ip
 801a0e0:	eb04 0c02 	add.w	ip, r4, r2
 801a0e4:	b2d2      	uxtb	r2, r2
 801a0e6:	4592      	cmp	sl, r2
 801a0e8:	f100 0002 	add.w	r0, r0, #2
 801a0ec:	f43f af47 	beq.w	8019f7e <uxr_read_framed_msg+0x13a>
 801a0f0:	0842      	lsrs	r2, r0, #1
 801a0f2:	f89c a002 	ldrb.w	sl, [ip, #2]
 801a0f6:	fba5 8202 	umull	r8, r2, r5, r2
 801a0fa:	0892      	lsrs	r2, r2, #2
 801a0fc:	fb01 0012 	mls	r0, r1, r2, r0
 801a100:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 801a104:	f08a 0c20 	eor.w	ip, sl, #32
 801a108:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 801a10c:	f47f af11 	bne.w	8019f32 <uxr_read_framed_msg+0xee>
 801a110:	459e      	cmp	lr, r3
 801a112:	ee17 8a90 	vmov	r8, s15
 801a116:	f43f af37 	beq.w	8019f88 <uxr_read_framed_msg+0x144>
 801a11a:	2301      	movs	r3, #1
 801a11c:	7023      	strb	r3, [r4, #0]
 801a11e:	e6a2      	b.n	8019e66 <uxr_read_framed_msg+0x22>
 801a120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a122:	9300      	str	r3, [sp, #0]
 801a124:	2301      	movs	r3, #1
 801a126:	9301      	str	r3, [sp, #4]
 801a128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a12a:	464a      	mov	r2, r9
 801a12c:	4641      	mov	r1, r8
 801a12e:	4620      	mov	r0, r4
 801a130:	f7ff fe06 	bl	8019d40 <uxr_framing_read_transport>
 801a134:	2800      	cmp	r0, #0
 801a136:	f43f aec6 	beq.w	8019ec6 <uxr_read_framed_msg+0x82>
 801a13a:	7823      	ldrb	r3, [r4, #0]
 801a13c:	e693      	b.n	8019e66 <uxr_read_framed_msg+0x22>
 801a13e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a140:	9300      	str	r3, [sp, #0]
 801a142:	2302      	movs	r3, #2
 801a144:	e7ef      	b.n	801a126 <uxr_read_framed_msg+0x2e2>
 801a146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a148:	9300      	str	r3, [sp, #0]
 801a14a:	2304      	movs	r3, #4
 801a14c:	9301      	str	r3, [sp, #4]
 801a14e:	464a      	mov	r2, r9
 801a150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a152:	4641      	mov	r1, r8
 801a154:	4620      	mov	r0, r4
 801a156:	f7ff fdf3 	bl	8019d40 <uxr_framing_read_transport>
 801a15a:	2800      	cmp	r0, #0
 801a15c:	d1ed      	bne.n	801a13a <uxr_read_framed_msg+0x2f6>
 801a15e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801a162:	2b7e      	cmp	r3, #126	; 0x7e
 801a164:	d0e9      	beq.n	801a13a <uxr_read_framed_msg+0x2f6>
 801a166:	e6ae      	b.n	8019ec6 <uxr_read_framed_msg+0x82>
 801a168:	30c30c31 	.word	0x30c30c31
 801a16c:	0801d568 	.word	0x0801d568
 801a170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a172:	9300      	str	r3, [sp, #0]
 801a174:	2305      	movs	r3, #5
 801a176:	9301      	str	r3, [sp, #4]
 801a178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a17a:	f7ff fde1 	bl	8019d40 <uxr_framing_read_transport>
 801a17e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801a182:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a186:	429a      	cmp	r2, r3
 801a188:	f43f ae9d 	beq.w	8019ec6 <uxr_read_framed_msg+0x82>
 801a18c:	e668      	b.n	8019e60 <uxr_read_framed_msg+0x1c>
 801a18e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a190:	9300      	str	r3, [sp, #0]
 801a192:	2303      	movs	r3, #3
 801a194:	e7c7      	b.n	801a126 <uxr_read_framed_msg+0x2e2>
 801a196:	2305      	movs	r3, #5
 801a198:	7023      	strb	r3, [r4, #0]
 801a19a:	e664      	b.n	8019e66 <uxr_read_framed_msg+0x22>
 801a19c:	ee17 8a90 	vmov	r8, s15
 801a1a0:	f43f aef2 	beq.w	8019f88 <uxr_read_framed_msg+0x144>
 801a1a4:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801a1a8:	d08e      	beq.n	801a0c8 <uxr_read_framed_msg+0x284>
 801a1aa:	ebae 0303 	sub.w	r3, lr, r3
 801a1ae:	3302      	adds	r3, #2
 801a1b0:	9301      	str	r3, [sp, #4]
 801a1b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a1b4:	9300      	str	r3, [sp, #0]
 801a1b6:	e7b7      	b.n	801a128 <uxr_read_framed_msg+0x2e4>
 801a1b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a1ba:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801a1be:	7013      	strb	r3, [r2, #0]
 801a1c0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801a1c2:	b003      	add	sp, #12
 801a1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1c8:	f103 0c01 	add.w	ip, r3, #1
 801a1cc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a1d0:	fba5 0202 	umull	r0, r2, r5, r2
 801a1d4:	0892      	lsrs	r2, r2, #2
 801a1d6:	202a      	movs	r0, #42	; 0x2a
 801a1d8:	fb00 c212 	mls	r2, r0, r2, ip
 801a1dc:	fa5f fc82 	uxtb.w	ip, r2
 801a1e0:	4561      	cmp	r1, ip
 801a1e2:	d09d      	beq.n	801a120 <uxr_read_framed_msg+0x2dc>
 801a1e4:	3302      	adds	r3, #2
 801a1e6:	4422      	add	r2, r4
 801a1e8:	0859      	lsrs	r1, r3, #1
 801a1ea:	7892      	ldrb	r2, [r2, #2]
 801a1ec:	fba5 c101 	umull	ip, r1, r5, r1
 801a1f0:	0889      	lsrs	r1, r1, #2
 801a1f2:	fb00 3311 	mls	r3, r0, r1, r3
 801a1f6:	2a7e      	cmp	r2, #126	; 0x7e
 801a1f8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a1fc:	f000 80aa 	beq.w	801a354 <uxr_read_framed_msg+0x510>
 801a200:	f082 0220 	eor.w	r2, r2, #32
 801a204:	e654      	b.n	8019eb0 <uxr_read_framed_msg+0x6c>
 801a206:	1c58      	adds	r0, r3, #1
 801a208:	0842      	lsrs	r2, r0, #1
 801a20a:	fba5 c202 	umull	ip, r2, r5, r2
 801a20e:	0892      	lsrs	r2, r2, #2
 801a210:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a214:	fb0c 0212 	mls	r2, ip, r2, r0
 801a218:	b2d0      	uxtb	r0, r2
 801a21a:	4281      	cmp	r1, r0
 801a21c:	d08f      	beq.n	801a13e <uxr_read_framed_msg+0x2fa>
 801a21e:	4422      	add	r2, r4
 801a220:	3302      	adds	r3, #2
 801a222:	7890      	ldrb	r0, [r2, #2]
 801a224:	085a      	lsrs	r2, r3, #1
 801a226:	fba5 1202 	umull	r1, r2, r5, r2
 801a22a:	0892      	lsrs	r2, r2, #2
 801a22c:	fb0c 3312 	mls	r3, ip, r2, r3
 801a230:	287e      	cmp	r0, #126	; 0x7e
 801a232:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a236:	d07d      	beq.n	801a334 <uxr_read_framed_msg+0x4f0>
 801a238:	f080 0020 	eor.w	r0, r0, #32
 801a23c:	e660      	b.n	8019f00 <uxr_read_framed_msg+0xbc>
 801a23e:	1c59      	adds	r1, r3, #1
 801a240:	084a      	lsrs	r2, r1, #1
 801a242:	fba5 c202 	umull	ip, r2, r5, r2
 801a246:	0892      	lsrs	r2, r2, #2
 801a248:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a24c:	fb0c 1212 	mls	r2, ip, r2, r1
 801a250:	b2d1      	uxtb	r1, r2
 801a252:	4288      	cmp	r0, r1
 801a254:	f43f af64 	beq.w	801a120 <uxr_read_framed_msg+0x2dc>
 801a258:	4422      	add	r2, r4
 801a25a:	3302      	adds	r3, #2
 801a25c:	7891      	ldrb	r1, [r2, #2]
 801a25e:	085a      	lsrs	r2, r3, #1
 801a260:	fba5 0202 	umull	r0, r2, r5, r2
 801a264:	0892      	lsrs	r2, r2, #2
 801a266:	fb0c 3312 	mls	r3, ip, r2, r3
 801a26a:	297e      	cmp	r1, #126	; 0x7e
 801a26c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a270:	d070      	beq.n	801a354 <uxr_read_framed_msg+0x510>
 801a272:	f081 0120 	eor.w	r1, r1, #32
 801a276:	e6a3      	b.n	8019fc0 <uxr_read_framed_msg+0x17c>
 801a278:	f103 0c01 	add.w	ip, r3, #1
 801a27c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801a280:	fba5 0202 	umull	r0, r2, r5, r2
 801a284:	0892      	lsrs	r2, r2, #2
 801a286:	202a      	movs	r0, #42	; 0x2a
 801a288:	fb00 c212 	mls	r2, r0, r2, ip
 801a28c:	fa5f fc82 	uxtb.w	ip, r2
 801a290:	4561      	cmp	r1, ip
 801a292:	f43f af58 	beq.w	801a146 <uxr_read_framed_msg+0x302>
 801a296:	4422      	add	r2, r4
 801a298:	3302      	adds	r3, #2
 801a29a:	7891      	ldrb	r1, [r2, #2]
 801a29c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801a2a0:	085a      	lsrs	r2, r3, #1
 801a2a2:	fba5 c202 	umull	ip, r2, r5, r2
 801a2a6:	0892      	lsrs	r2, r2, #2
 801a2a8:	fb00 3312 	mls	r3, r0, r2, r3
 801a2ac:	297e      	cmp	r1, #126	; 0x7e
 801a2ae:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a2b2:	f43f af48 	beq.w	801a146 <uxr_read_framed_msg+0x302>
 801a2b6:	f081 0120 	eor.w	r1, r1, #32
 801a2ba:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801a2be:	e6e8      	b.n	801a092 <uxr_read_framed_msg+0x24e>
 801a2c0:	1c58      	adds	r0, r3, #1
 801a2c2:	0842      	lsrs	r2, r0, #1
 801a2c4:	fba5 c202 	umull	ip, r2, r5, r2
 801a2c8:	0892      	lsrs	r2, r2, #2
 801a2ca:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a2ce:	fb0c 0212 	mls	r2, ip, r2, r0
 801a2d2:	b2d0      	uxtb	r0, r2
 801a2d4:	4281      	cmp	r1, r0
 801a2d6:	f43f af32 	beq.w	801a13e <uxr_read_framed_msg+0x2fa>
 801a2da:	4422      	add	r2, r4
 801a2dc:	3302      	adds	r3, #2
 801a2de:	7890      	ldrb	r0, [r2, #2]
 801a2e0:	085a      	lsrs	r2, r3, #1
 801a2e2:	fba5 1202 	umull	r1, r2, r5, r2
 801a2e6:	0892      	lsrs	r2, r2, #2
 801a2e8:	fb0c 3312 	mls	r3, ip, r2, r3
 801a2ec:	287e      	cmp	r0, #126	; 0x7e
 801a2ee:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801a2f2:	d01f      	beq.n	801a334 <uxr_read_framed_msg+0x4f0>
 801a2f4:	f080 0020 	eor.w	r0, r0, #32
 801a2f8:	e68b      	b.n	801a012 <uxr_read_framed_msg+0x1ce>
 801a2fa:	1c51      	adds	r1, r2, #1
 801a2fc:	084b      	lsrs	r3, r1, #1
 801a2fe:	fba5 c303 	umull	ip, r3, r5, r3
 801a302:	089b      	lsrs	r3, r3, #2
 801a304:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801a308:	fb0c 1313 	mls	r3, ip, r3, r1
 801a30c:	b2d9      	uxtb	r1, r3
 801a30e:	4288      	cmp	r0, r1
 801a310:	f43f af3d 	beq.w	801a18e <uxr_read_framed_msg+0x34a>
 801a314:	3202      	adds	r2, #2
 801a316:	4423      	add	r3, r4
 801a318:	0850      	lsrs	r0, r2, #1
 801a31a:	789b      	ldrb	r3, [r3, #2]
 801a31c:	fba5 1000 	umull	r1, r0, r5, r0
 801a320:	0880      	lsrs	r0, r0, #2
 801a322:	fb0c 2210 	mls	r2, ip, r0, r2
 801a326:	2b7e      	cmp	r3, #126	; 0x7e
 801a328:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801a32c:	d016      	beq.n	801a35c <uxr_read_framed_msg+0x518>
 801a32e:	f083 0120 	eor.w	r1, r3, #32
 801a332:	e68b      	b.n	801a04c <uxr_read_framed_msg+0x208>
 801a334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a336:	9300      	str	r3, [sp, #0]
 801a338:	2302      	movs	r3, #2
 801a33a:	9301      	str	r3, [sp, #4]
 801a33c:	464a      	mov	r2, r9
 801a33e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a340:	4641      	mov	r1, r8
 801a342:	4620      	mov	r0, r4
 801a344:	f7ff fcfc 	bl	8019d40 <uxr_framing_read_transport>
 801a348:	2800      	cmp	r0, #0
 801a34a:	f47f aef6 	bne.w	801a13a <uxr_read_framed_msg+0x2f6>
 801a34e:	2301      	movs	r3, #1
 801a350:	7023      	strb	r3, [r4, #0]
 801a352:	e588      	b.n	8019e66 <uxr_read_framed_msg+0x22>
 801a354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a356:	9300      	str	r3, [sp, #0]
 801a358:	2301      	movs	r3, #1
 801a35a:	e7ee      	b.n	801a33a <uxr_read_framed_msg+0x4f6>
 801a35c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a35e:	9300      	str	r3, [sp, #0]
 801a360:	2303      	movs	r3, #3
 801a362:	e7ea      	b.n	801a33a <uxr_read_framed_msg+0x4f6>
 801a364:	ee17 8a90 	vmov	r8, s15
 801a368:	e6ae      	b.n	801a0c8 <uxr_read_framed_msg+0x284>
 801a36a:	bf00      	nop

0801a36c <rcl_get_default_domain_id>:
 801a36c:	b530      	push	{r4, r5, lr}
 801a36e:	b083      	sub	sp, #12
 801a370:	2300      	movs	r3, #0
 801a372:	9300      	str	r3, [sp, #0]
 801a374:	b1d0      	cbz	r0, 801a3ac <rcl_get_default_domain_id+0x40>
 801a376:	4604      	mov	r4, r0
 801a378:	4669      	mov	r1, sp
 801a37a:	4815      	ldr	r0, [pc, #84]	; (801a3d0 <rcl_get_default_domain_id+0x64>)
 801a37c:	f7fc ffdc 	bl	8017338 <rcutils_get_env>
 801a380:	4602      	mov	r2, r0
 801a382:	b110      	cbz	r0, 801a38a <rcl_get_default_domain_id+0x1e>
 801a384:	2001      	movs	r0, #1
 801a386:	b003      	add	sp, #12
 801a388:	bd30      	pop	{r4, r5, pc}
 801a38a:	9b00      	ldr	r3, [sp, #0]
 801a38c:	b18b      	cbz	r3, 801a3b2 <rcl_get_default_domain_id+0x46>
 801a38e:	7818      	ldrb	r0, [r3, #0]
 801a390:	2800      	cmp	r0, #0
 801a392:	d0f8      	beq.n	801a386 <rcl_get_default_domain_id+0x1a>
 801a394:	a901      	add	r1, sp, #4
 801a396:	4618      	mov	r0, r3
 801a398:	9201      	str	r2, [sp, #4]
 801a39a:	f001 f9ef 	bl	801b77c <strtoul>
 801a39e:	4605      	mov	r5, r0
 801a3a0:	b150      	cbz	r0, 801a3b8 <rcl_get_default_domain_id+0x4c>
 801a3a2:	1c43      	adds	r3, r0, #1
 801a3a4:	d00d      	beq.n	801a3c2 <rcl_get_default_domain_id+0x56>
 801a3a6:	6025      	str	r5, [r4, #0]
 801a3a8:	2000      	movs	r0, #0
 801a3aa:	e7ec      	b.n	801a386 <rcl_get_default_domain_id+0x1a>
 801a3ac:	200b      	movs	r0, #11
 801a3ae:	b003      	add	sp, #12
 801a3b0:	bd30      	pop	{r4, r5, pc}
 801a3b2:	4618      	mov	r0, r3
 801a3b4:	b003      	add	sp, #12
 801a3b6:	bd30      	pop	{r4, r5, pc}
 801a3b8:	9b01      	ldr	r3, [sp, #4]
 801a3ba:	781b      	ldrb	r3, [r3, #0]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d0f2      	beq.n	801a3a6 <rcl_get_default_domain_id+0x3a>
 801a3c0:	e7e0      	b.n	801a384 <rcl_get_default_domain_id+0x18>
 801a3c2:	f000 fca3 	bl	801ad0c <__errno>
 801a3c6:	6803      	ldr	r3, [r0, #0]
 801a3c8:	2b22      	cmp	r3, #34	; 0x22
 801a3ca:	d1ec      	bne.n	801a3a6 <rcl_get_default_domain_id+0x3a>
 801a3cc:	e7da      	b.n	801a384 <rcl_get_default_domain_id+0x18>
 801a3ce:	bf00      	nop
 801a3d0:	0801d768 	.word	0x0801d768

0801a3d4 <rcl_expand_topic_name>:
 801a3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3d8:	b08b      	sub	sp, #44	; 0x2c
 801a3da:	9306      	str	r3, [sp, #24]
 801a3dc:	2800      	cmp	r0, #0
 801a3de:	f000 80ad 	beq.w	801a53c <rcl_expand_topic_name+0x168>
 801a3e2:	460e      	mov	r6, r1
 801a3e4:	2900      	cmp	r1, #0
 801a3e6:	f000 80a9 	beq.w	801a53c <rcl_expand_topic_name+0x168>
 801a3ea:	4617      	mov	r7, r2
 801a3ec:	2a00      	cmp	r2, #0
 801a3ee:	f000 80a5 	beq.w	801a53c <rcl_expand_topic_name+0x168>
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	f000 80a2 	beq.w	801a53c <rcl_expand_topic_name+0x168>
 801a3f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	f000 809e 	beq.w	801a53c <rcl_expand_topic_name+0x168>
 801a400:	2200      	movs	r2, #0
 801a402:	a909      	add	r1, sp, #36	; 0x24
 801a404:	4680      	mov	r8, r0
 801a406:	f000 f9f5 	bl	801a7f4 <rcl_validate_topic_name>
 801a40a:	4604      	mov	r4, r0
 801a40c:	2800      	cmp	r0, #0
 801a40e:	f040 8096 	bne.w	801a53e <rcl_expand_topic_name+0x16a>
 801a412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a414:	2b00      	cmp	r3, #0
 801a416:	f040 809a 	bne.w	801a54e <rcl_expand_topic_name+0x17a>
 801a41a:	4602      	mov	r2, r0
 801a41c:	a909      	add	r1, sp, #36	; 0x24
 801a41e:	4630      	mov	r0, r6
 801a420:	f7fd fb8c 	bl	8017b3c <rmw_validate_node_name>
 801a424:	2800      	cmp	r0, #0
 801a426:	f040 808e 	bne.w	801a546 <rcl_expand_topic_name+0x172>
 801a42a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a42c:	2a00      	cmp	r2, #0
 801a42e:	f040 8093 	bne.w	801a558 <rcl_expand_topic_name+0x184>
 801a432:	a909      	add	r1, sp, #36	; 0x24
 801a434:	4638      	mov	r0, r7
 801a436:	f7fd fb63 	bl	8017b00 <rmw_validate_namespace>
 801a43a:	2800      	cmp	r0, #0
 801a43c:	f040 8083 	bne.w	801a546 <rcl_expand_topic_name+0x172>
 801a440:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a442:	2c00      	cmp	r4, #0
 801a444:	f040 80ed 	bne.w	801a622 <rcl_expand_topic_name+0x24e>
 801a448:	217b      	movs	r1, #123	; 0x7b
 801a44a:	4640      	mov	r0, r8
 801a44c:	f001 f8e5 	bl	801b61a <strchr>
 801a450:	f898 3000 	ldrb.w	r3, [r8]
 801a454:	2b2f      	cmp	r3, #47	; 0x2f
 801a456:	4605      	mov	r5, r0
 801a458:	f000 809e 	beq.w	801a598 <rcl_expand_topic_name+0x1c4>
 801a45c:	2b7e      	cmp	r3, #126	; 0x7e
 801a45e:	f040 80a2 	bne.w	801a5a6 <rcl_expand_topic_name+0x1d2>
 801a462:	4638      	mov	r0, r7
 801a464:	f7e5 febe 	bl	80001e4 <strlen>
 801a468:	4a82      	ldr	r2, [pc, #520]	; (801a674 <rcl_expand_topic_name+0x2a0>)
 801a46a:	4b83      	ldr	r3, [pc, #524]	; (801a678 <rcl_expand_topic_name+0x2a4>)
 801a46c:	2801      	cmp	r0, #1
 801a46e:	bf18      	it	ne
 801a470:	4613      	movne	r3, r2
 801a472:	9302      	str	r3, [sp, #8]
 801a474:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a476:	9300      	str	r3, [sp, #0]
 801a478:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801a47c:	f108 0301 	add.w	r3, r8, #1
 801a480:	9305      	str	r3, [sp, #20]
 801a482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a486:	9301      	str	r3, [sp, #4]
 801a488:	ab14      	add	r3, sp, #80	; 0x50
 801a48a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a48c:	f7fc ff7c 	bl	8017388 <rcutils_format_string_limit>
 801a490:	4682      	mov	sl, r0
 801a492:	2800      	cmp	r0, #0
 801a494:	f000 80c7 	beq.w	801a626 <rcl_expand_topic_name+0x252>
 801a498:	2d00      	cmp	r5, #0
 801a49a:	f000 80a2 	beq.w	801a5e2 <rcl_expand_topic_name+0x20e>
 801a49e:	217b      	movs	r1, #123	; 0x7b
 801a4a0:	f001 f8bb 	bl	801b61a <strchr>
 801a4a4:	46d1      	mov	r9, sl
 801a4a6:	4605      	mov	r5, r0
 801a4a8:	9407      	str	r4, [sp, #28]
 801a4aa:	46d3      	mov	fp, sl
 801a4ac:	464c      	mov	r4, r9
 801a4ae:	2d00      	cmp	r5, #0
 801a4b0:	f000 80be 	beq.w	801a630 <rcl_expand_topic_name+0x25c>
 801a4b4:	217d      	movs	r1, #125	; 0x7d
 801a4b6:	4620      	mov	r0, r4
 801a4b8:	f001 f8af 	bl	801b61a <strchr>
 801a4bc:	eba0 0905 	sub.w	r9, r0, r5
 801a4c0:	f109 0a01 	add.w	sl, r9, #1
 801a4c4:	486d      	ldr	r0, [pc, #436]	; (801a67c <rcl_expand_topic_name+0x2a8>)
 801a4c6:	4652      	mov	r2, sl
 801a4c8:	4629      	mov	r1, r5
 801a4ca:	f001 f8bb 	bl	801b644 <strncmp>
 801a4ce:	2800      	cmp	r0, #0
 801a4d0:	d067      	beq.n	801a5a2 <rcl_expand_topic_name+0x1ce>
 801a4d2:	486b      	ldr	r0, [pc, #428]	; (801a680 <rcl_expand_topic_name+0x2ac>)
 801a4d4:	4652      	mov	r2, sl
 801a4d6:	4629      	mov	r1, r5
 801a4d8:	f001 f8b4 	bl	801b644 <strncmp>
 801a4dc:	b130      	cbz	r0, 801a4ec <rcl_expand_topic_name+0x118>
 801a4de:	4869      	ldr	r0, [pc, #420]	; (801a684 <rcl_expand_topic_name+0x2b0>)
 801a4e0:	4652      	mov	r2, sl
 801a4e2:	4629      	mov	r1, r5
 801a4e4:	f001 f8ae 	bl	801b644 <strncmp>
 801a4e8:	2800      	cmp	r0, #0
 801a4ea:	d137      	bne.n	801a55c <rcl_expand_topic_name+0x188>
 801a4ec:	46b9      	mov	r9, r7
 801a4ee:	ab16      	add	r3, sp, #88	; 0x58
 801a4f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a4f4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a4f8:	ab14      	add	r3, sp, #80	; 0x50
 801a4fa:	4628      	mov	r0, r5
 801a4fc:	cb0c      	ldmia	r3, {r2, r3}
 801a4fe:	4651      	mov	r1, sl
 801a500:	f7fd f87e 	bl	8017600 <rcutils_strndup>
 801a504:	4605      	mov	r5, r0
 801a506:	2800      	cmp	r0, #0
 801a508:	f000 809c 	beq.w	801a644 <rcl_expand_topic_name+0x270>
 801a50c:	464a      	mov	r2, r9
 801a50e:	4620      	mov	r0, r4
 801a510:	ab14      	add	r3, sp, #80	; 0x50
 801a512:	4629      	mov	r1, r5
 801a514:	f7fc ff72 	bl	80173fc <rcutils_repl_str>
 801a518:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a51a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a51c:	4604      	mov	r4, r0
 801a51e:	4628      	mov	r0, r5
 801a520:	4798      	blx	r3
 801a522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a524:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a526:	4658      	mov	r0, fp
 801a528:	4798      	blx	r3
 801a52a:	2c00      	cmp	r4, #0
 801a52c:	d07b      	beq.n	801a626 <rcl_expand_topic_name+0x252>
 801a52e:	217b      	movs	r1, #123	; 0x7b
 801a530:	4620      	mov	r0, r4
 801a532:	f001 f872 	bl	801b61a <strchr>
 801a536:	46a3      	mov	fp, r4
 801a538:	4605      	mov	r5, r0
 801a53a:	e7b8      	b.n	801a4ae <rcl_expand_topic_name+0xda>
 801a53c:	240b      	movs	r4, #11
 801a53e:	4620      	mov	r0, r4
 801a540:	b00b      	add	sp, #44	; 0x2c
 801a542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a546:	f7fb ffd7 	bl	80164f8 <rcl_convert_rmw_ret_to_rcl_ret>
 801a54a:	4604      	mov	r4, r0
 801a54c:	e7f7      	b.n	801a53e <rcl_expand_topic_name+0x16a>
 801a54e:	2467      	movs	r4, #103	; 0x67
 801a550:	4620      	mov	r0, r4
 801a552:	b00b      	add	sp, #44	; 0x2c
 801a554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a558:	24c9      	movs	r4, #201	; 0xc9
 801a55a:	e7f0      	b.n	801a53e <rcl_expand_topic_name+0x16a>
 801a55c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801a560:	9806      	ldr	r0, [sp, #24]
 801a562:	1c69      	adds	r1, r5, #1
 801a564:	f7fd f966 	bl	8017834 <rcutils_string_map_getn>
 801a568:	4681      	mov	r9, r0
 801a56a:	2800      	cmp	r0, #0
 801a56c:	d1bf      	bne.n	801a4ee <rcl_expand_topic_name+0x11a>
 801a56e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a570:	aa16      	add	r2, sp, #88	; 0x58
 801a572:	6018      	str	r0, [r3, #0]
 801a574:	ca07      	ldmia	r2, {r0, r1, r2}
 801a576:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a57a:	ab14      	add	r3, sp, #80	; 0x50
 801a57c:	cb0c      	ldmia	r3, {r2, r3}
 801a57e:	4651      	mov	r1, sl
 801a580:	4628      	mov	r0, r5
 801a582:	f7fd f83d 	bl	8017600 <rcutils_strndup>
 801a586:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a588:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a58a:	4798      	blx	r3
 801a58c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a58e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a590:	4658      	mov	r0, fp
 801a592:	2469      	movs	r4, #105	; 0x69
 801a594:	4798      	blx	r3
 801a596:	e7d2      	b.n	801a53e <rcl_expand_topic_name+0x16a>
 801a598:	2800      	cmp	r0, #0
 801a59a:	d05b      	beq.n	801a654 <rcl_expand_topic_name+0x280>
 801a59c:	46c1      	mov	r9, r8
 801a59e:	46a2      	mov	sl, r4
 801a5a0:	e782      	b.n	801a4a8 <rcl_expand_topic_name+0xd4>
 801a5a2:	46b1      	mov	r9, r6
 801a5a4:	e7a3      	b.n	801a4ee <rcl_expand_topic_name+0x11a>
 801a5a6:	2800      	cmp	r0, #0
 801a5a8:	d1f8      	bne.n	801a59c <rcl_expand_topic_name+0x1c8>
 801a5aa:	4638      	mov	r0, r7
 801a5ac:	f7e5 fe1a 	bl	80001e4 <strlen>
 801a5b0:	4a35      	ldr	r2, [pc, #212]	; (801a688 <rcl_expand_topic_name+0x2b4>)
 801a5b2:	4b36      	ldr	r3, [pc, #216]	; (801a68c <rcl_expand_topic_name+0x2b8>)
 801a5b4:	f8cd 8010 	str.w	r8, [sp, #16]
 801a5b8:	2801      	cmp	r0, #1
 801a5ba:	bf18      	it	ne
 801a5bc:	4613      	movne	r3, r2
 801a5be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801a5c2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a5c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a5c8:	9703      	str	r7, [sp, #12]
 801a5ca:	9200      	str	r2, [sp, #0]
 801a5cc:	ab14      	add	r3, sp, #80	; 0x50
 801a5ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a5d0:	f7fc feda 	bl	8017388 <rcutils_format_string_limit>
 801a5d4:	4682      	mov	sl, r0
 801a5d6:	4653      	mov	r3, sl
 801a5d8:	b32b      	cbz	r3, 801a626 <rcl_expand_topic_name+0x252>
 801a5da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a5dc:	f8c3 a000 	str.w	sl, [r3]
 801a5e0:	e7ad      	b.n	801a53e <rcl_expand_topic_name+0x16a>
 801a5e2:	f89a 3000 	ldrb.w	r3, [sl]
 801a5e6:	2b2f      	cmp	r3, #47	; 0x2f
 801a5e8:	d0f7      	beq.n	801a5da <rcl_expand_topic_name+0x206>
 801a5ea:	4638      	mov	r0, r7
 801a5ec:	f7e5 fdfa 	bl	80001e4 <strlen>
 801a5f0:	4a25      	ldr	r2, [pc, #148]	; (801a688 <rcl_expand_topic_name+0x2b4>)
 801a5f2:	4b26      	ldr	r3, [pc, #152]	; (801a68c <rcl_expand_topic_name+0x2b8>)
 801a5f4:	f8cd a010 	str.w	sl, [sp, #16]
 801a5f8:	2801      	cmp	r0, #1
 801a5fa:	bf18      	it	ne
 801a5fc:	4613      	movne	r3, r2
 801a5fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801a602:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a606:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a608:	9703      	str	r7, [sp, #12]
 801a60a:	9200      	str	r2, [sp, #0]
 801a60c:	ab14      	add	r3, sp, #80	; 0x50
 801a60e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a610:	f7fc feba 	bl	8017388 <rcutils_format_string_limit>
 801a614:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a616:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a618:	4605      	mov	r5, r0
 801a61a:	4650      	mov	r0, sl
 801a61c:	4798      	blx	r3
 801a61e:	46aa      	mov	sl, r5
 801a620:	e7d9      	b.n	801a5d6 <rcl_expand_topic_name+0x202>
 801a622:	24ca      	movs	r4, #202	; 0xca
 801a624:	e78b      	b.n	801a53e <rcl_expand_topic_name+0x16a>
 801a626:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a628:	2300      	movs	r3, #0
 801a62a:	6013      	str	r3, [r2, #0]
 801a62c:	240a      	movs	r4, #10
 801a62e:	e786      	b.n	801a53e <rcl_expand_topic_name+0x16a>
 801a630:	465b      	mov	r3, fp
 801a632:	9c07      	ldr	r4, [sp, #28]
 801a634:	46da      	mov	sl, fp
 801a636:	2b00      	cmp	r3, #0
 801a638:	d1d3      	bne.n	801a5e2 <rcl_expand_topic_name+0x20e>
 801a63a:	f898 3000 	ldrb.w	r3, [r8]
 801a63e:	2b2f      	cmp	r3, #47	; 0x2f
 801a640:	d0cb      	beq.n	801a5da <rcl_expand_topic_name+0x206>
 801a642:	e7b2      	b.n	801a5aa <rcl_expand_topic_name+0x1d6>
 801a644:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 801a648:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a64a:	6015      	str	r5, [r2, #0]
 801a64c:	4658      	mov	r0, fp
 801a64e:	4798      	blx	r3
 801a650:	240a      	movs	r4, #10
 801a652:	e774      	b.n	801a53e <rcl_expand_topic_name+0x16a>
 801a654:	ab17      	add	r3, sp, #92	; 0x5c
 801a656:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a65a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a65e:	ab14      	add	r3, sp, #80	; 0x50
 801a660:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a662:	4640      	mov	r0, r8
 801a664:	f7fc ffaa 	bl	80175bc <rcutils_strdup>
 801a668:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a66a:	2800      	cmp	r0, #0
 801a66c:	6018      	str	r0, [r3, #0]
 801a66e:	bf08      	it	eq
 801a670:	240a      	moveq	r4, #10
 801a672:	e764      	b.n	801a53e <rcl_expand_topic_name+0x16a>
 801a674:	0801d778 	.word	0x0801d778
 801a678:	0801c984 	.word	0x0801c984
 801a67c:	0801d780 	.word	0x0801d780
 801a680:	0801d788 	.word	0x0801d788
 801a684:	0801d790 	.word	0x0801d790
 801a688:	0801d0f4 	.word	0x0801d0f4
 801a68c:	0801c994 	.word	0x0801c994

0801a690 <rcl_get_default_topic_name_substitutions>:
 801a690:	2800      	cmp	r0, #0
 801a692:	bf0c      	ite	eq
 801a694:	200b      	moveq	r0, #11
 801a696:	2000      	movne	r0, #0
 801a698:	4770      	bx	lr
 801a69a:	bf00      	nop

0801a69c <rcl_get_zero_initialized_guard_condition>:
 801a69c:	4a03      	ldr	r2, [pc, #12]	; (801a6ac <rcl_get_zero_initialized_guard_condition+0x10>)
 801a69e:	4603      	mov	r3, r0
 801a6a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a6a4:	e883 0003 	stmia.w	r3, {r0, r1}
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	4770      	bx	lr
 801a6ac:	0801d79c 	.word	0x0801d79c

0801a6b0 <rcl_guard_condition_init_from_rmw>:
 801a6b0:	b082      	sub	sp, #8
 801a6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6b6:	b086      	sub	sp, #24
 801a6b8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a6bc:	4604      	mov	r4, r0
 801a6be:	f84c 3f04 	str.w	r3, [ip, #4]!
 801a6c2:	460e      	mov	r6, r1
 801a6c4:	4617      	mov	r7, r2
 801a6c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a6ca:	f10d 0e04 	add.w	lr, sp, #4
 801a6ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a6d2:	f8dc 3000 	ldr.w	r3, [ip]
 801a6d6:	f8ce 3000 	str.w	r3, [lr]
 801a6da:	a801      	add	r0, sp, #4
 801a6dc:	f7f6 f994 	bl	8010a08 <rcutils_allocator_is_valid>
 801a6e0:	b350      	cbz	r0, 801a738 <rcl_guard_condition_init_from_rmw+0x88>
 801a6e2:	b34c      	cbz	r4, 801a738 <rcl_guard_condition_init_from_rmw+0x88>
 801a6e4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801a6e8:	f1b8 0f00 	cmp.w	r8, #0
 801a6ec:	d11e      	bne.n	801a72c <rcl_guard_condition_init_from_rmw+0x7c>
 801a6ee:	b31f      	cbz	r7, 801a738 <rcl_guard_condition_init_from_rmw+0x88>
 801a6f0:	4638      	mov	r0, r7
 801a6f2:	f7fb ff1f 	bl	8016534 <rcl_context_is_valid>
 801a6f6:	b328      	cbz	r0, 801a744 <rcl_guard_condition_init_from_rmw+0x94>
 801a6f8:	9b01      	ldr	r3, [sp, #4]
 801a6fa:	9905      	ldr	r1, [sp, #20]
 801a6fc:	201c      	movs	r0, #28
 801a6fe:	4798      	blx	r3
 801a700:	4605      	mov	r5, r0
 801a702:	6060      	str	r0, [r4, #4]
 801a704:	b358      	cbz	r0, 801a75e <rcl_guard_condition_init_from_rmw+0xae>
 801a706:	b1fe      	cbz	r6, 801a748 <rcl_guard_condition_init_from_rmw+0x98>
 801a708:	6006      	str	r6, [r0, #0]
 801a70a:	f880 8004 	strb.w	r8, [r0, #4]
 801a70e:	ac01      	add	r4, sp, #4
 801a710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a712:	f105 0c08 	add.w	ip, r5, #8
 801a716:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a71a:	6823      	ldr	r3, [r4, #0]
 801a71c:	f8cc 3000 	str.w	r3, [ip]
 801a720:	2000      	movs	r0, #0
 801a722:	b006      	add	sp, #24
 801a724:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a728:	b002      	add	sp, #8
 801a72a:	4770      	bx	lr
 801a72c:	2064      	movs	r0, #100	; 0x64
 801a72e:	b006      	add	sp, #24
 801a730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a734:	b002      	add	sp, #8
 801a736:	4770      	bx	lr
 801a738:	200b      	movs	r0, #11
 801a73a:	b006      	add	sp, #24
 801a73c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a740:	b002      	add	sp, #8
 801a742:	4770      	bx	lr
 801a744:	2065      	movs	r0, #101	; 0x65
 801a746:	e7f2      	b.n	801a72e <rcl_guard_condition_init_from_rmw+0x7e>
 801a748:	6838      	ldr	r0, [r7, #0]
 801a74a:	3028      	adds	r0, #40	; 0x28
 801a74c:	f000 fa50 	bl	801abf0 <rmw_create_guard_condition>
 801a750:	6028      	str	r0, [r5, #0]
 801a752:	6865      	ldr	r5, [r4, #4]
 801a754:	682e      	ldr	r6, [r5, #0]
 801a756:	b126      	cbz	r6, 801a762 <rcl_guard_condition_init_from_rmw+0xb2>
 801a758:	2301      	movs	r3, #1
 801a75a:	712b      	strb	r3, [r5, #4]
 801a75c:	e7d7      	b.n	801a70e <rcl_guard_condition_init_from_rmw+0x5e>
 801a75e:	200a      	movs	r0, #10
 801a760:	e7e5      	b.n	801a72e <rcl_guard_condition_init_from_rmw+0x7e>
 801a762:	4628      	mov	r0, r5
 801a764:	9b02      	ldr	r3, [sp, #8]
 801a766:	9905      	ldr	r1, [sp, #20]
 801a768:	4798      	blx	r3
 801a76a:	6066      	str	r6, [r4, #4]
 801a76c:	2001      	movs	r0, #1
 801a76e:	e7de      	b.n	801a72e <rcl_guard_condition_init_from_rmw+0x7e>

0801a770 <rcl_guard_condition_fini>:
 801a770:	b570      	push	{r4, r5, r6, lr}
 801a772:	b082      	sub	sp, #8
 801a774:	b1f0      	cbz	r0, 801a7b4 <rcl_guard_condition_fini+0x44>
 801a776:	6843      	ldr	r3, [r0, #4]
 801a778:	4604      	mov	r4, r0
 801a77a:	b163      	cbz	r3, 801a796 <rcl_guard_condition_fini+0x26>
 801a77c:	6818      	ldr	r0, [r3, #0]
 801a77e:	68de      	ldr	r6, [r3, #12]
 801a780:	6999      	ldr	r1, [r3, #24]
 801a782:	b160      	cbz	r0, 801a79e <rcl_guard_condition_fini+0x2e>
 801a784:	791d      	ldrb	r5, [r3, #4]
 801a786:	b965      	cbnz	r5, 801a7a2 <rcl_guard_condition_fini+0x32>
 801a788:	4618      	mov	r0, r3
 801a78a:	47b0      	blx	r6
 801a78c:	2300      	movs	r3, #0
 801a78e:	4628      	mov	r0, r5
 801a790:	6063      	str	r3, [r4, #4]
 801a792:	b002      	add	sp, #8
 801a794:	bd70      	pop	{r4, r5, r6, pc}
 801a796:	461d      	mov	r5, r3
 801a798:	4628      	mov	r0, r5
 801a79a:	b002      	add	sp, #8
 801a79c:	bd70      	pop	{r4, r5, r6, pc}
 801a79e:	4605      	mov	r5, r0
 801a7a0:	e7f2      	b.n	801a788 <rcl_guard_condition_fini+0x18>
 801a7a2:	9101      	str	r1, [sp, #4]
 801a7a4:	f000 fa38 	bl	801ac18 <rmw_destroy_guard_condition>
 801a7a8:	1e05      	subs	r5, r0, #0
 801a7aa:	6863      	ldr	r3, [r4, #4]
 801a7ac:	9901      	ldr	r1, [sp, #4]
 801a7ae:	bf18      	it	ne
 801a7b0:	2501      	movne	r5, #1
 801a7b2:	e7e9      	b.n	801a788 <rcl_guard_condition_fini+0x18>
 801a7b4:	250b      	movs	r5, #11
 801a7b6:	4628      	mov	r0, r5
 801a7b8:	b002      	add	sp, #8
 801a7ba:	bd70      	pop	{r4, r5, r6, pc}

0801a7bc <rcl_guard_condition_get_default_options>:
 801a7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7be:	b087      	sub	sp, #28
 801a7c0:	4606      	mov	r6, r0
 801a7c2:	4668      	mov	r0, sp
 801a7c4:	f7f6 f912 	bl	80109ec <rcutils_get_default_allocator>
 801a7c8:	4b09      	ldr	r3, [pc, #36]	; (801a7f0 <rcl_guard_condition_get_default_options+0x34>)
 801a7ca:	46ee      	mov	lr, sp
 801a7cc:	469c      	mov	ip, r3
 801a7ce:	461d      	mov	r5, r3
 801a7d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a7d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a7d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a7da:	4634      	mov	r4, r6
 801a7dc:	f8de 7000 	ldr.w	r7, [lr]
 801a7e0:	f8cc 7000 	str.w	r7, [ip]
 801a7e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a7e6:	4630      	mov	r0, r6
 801a7e8:	6027      	str	r7, [r4, #0]
 801a7ea:	b007      	add	sp, #28
 801a7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7ee:	bf00      	nop
 801a7f0:	200162ec 	.word	0x200162ec

0801a7f4 <rcl_validate_topic_name>:
 801a7f4:	2800      	cmp	r0, #0
 801a7f6:	d07a      	beq.n	801a8ee <rcl_validate_topic_name+0xfa>
 801a7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7fc:	460e      	mov	r6, r1
 801a7fe:	2900      	cmp	r1, #0
 801a800:	d07c      	beq.n	801a8fc <rcl_validate_topic_name+0x108>
 801a802:	4617      	mov	r7, r2
 801a804:	4605      	mov	r5, r0
 801a806:	f7e5 fced 	bl	80001e4 <strlen>
 801a80a:	b1b0      	cbz	r0, 801a83a <rcl_validate_topic_name+0x46>
 801a80c:	f895 9000 	ldrb.w	r9, [r5]
 801a810:	f8df c180 	ldr.w	ip, [pc, #384]	; 801a994 <rcl_validate_topic_name+0x1a0>
 801a814:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801a818:	f013 0304 	ands.w	r3, r3, #4
 801a81c:	d169      	bne.n	801a8f2 <rcl_validate_topic_name+0xfe>
 801a81e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801a822:	f815 2008 	ldrb.w	r2, [r5, r8]
 801a826:	2a2f      	cmp	r2, #47	; 0x2f
 801a828:	d10e      	bne.n	801a848 <rcl_validate_topic_name+0x54>
 801a82a:	2202      	movs	r2, #2
 801a82c:	6032      	str	r2, [r6, #0]
 801a82e:	b36f      	cbz	r7, 801a88c <rcl_validate_topic_name+0x98>
 801a830:	f8c7 8000 	str.w	r8, [r7]
 801a834:	4618      	mov	r0, r3
 801a836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a83a:	2301      	movs	r3, #1
 801a83c:	6033      	str	r3, [r6, #0]
 801a83e:	b32f      	cbz	r7, 801a88c <rcl_validate_topic_name+0x98>
 801a840:	2000      	movs	r0, #0
 801a842:	6038      	str	r0, [r7, #0]
 801a844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a848:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 801a84c:	461c      	mov	r4, r3
 801a84e:	4619      	mov	r1, r3
 801a850:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801a854:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a858:	f1be 0f09 	cmp.w	lr, #9
 801a85c:	d919      	bls.n	801a892 <rcl_validate_topic_name+0x9e>
 801a85e:	f022 0e20 	bic.w	lr, r2, #32
 801a862:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 801a866:	f1be 0f19 	cmp.w	lr, #25
 801a86a:	d912      	bls.n	801a892 <rcl_validate_topic_name+0x9e>
 801a86c:	2a5f      	cmp	r2, #95	; 0x5f
 801a86e:	d019      	beq.n	801a8a4 <rcl_validate_topic_name+0xb0>
 801a870:	2a2f      	cmp	r2, #47	; 0x2f
 801a872:	d051      	beq.n	801a918 <rcl_validate_topic_name+0x124>
 801a874:	2a7e      	cmp	r2, #126	; 0x7e
 801a876:	d048      	beq.n	801a90a <rcl_validate_topic_name+0x116>
 801a878:	2a7b      	cmp	r2, #123	; 0x7b
 801a87a:	d054      	beq.n	801a926 <rcl_validate_topic_name+0x132>
 801a87c:	2a7d      	cmp	r2, #125	; 0x7d
 801a87e:	d161      	bne.n	801a944 <rcl_validate_topic_name+0x150>
 801a880:	2c00      	cmp	r4, #0
 801a882:	d155      	bne.n	801a930 <rcl_validate_topic_name+0x13c>
 801a884:	2305      	movs	r3, #5
 801a886:	6033      	str	r3, [r6, #0]
 801a888:	b107      	cbz	r7, 801a88c <rcl_validate_topic_name+0x98>
 801a88a:	6039      	str	r1, [r7, #0]
 801a88c:	2000      	movs	r0, #0
 801a88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a892:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a896:	0752      	lsls	r2, r2, #29
 801a898:	d504      	bpl.n	801a8a4 <rcl_validate_topic_name+0xb0>
 801a89a:	b11c      	cbz	r4, 801a8a4 <rcl_validate_topic_name+0xb0>
 801a89c:	b111      	cbz	r1, 801a8a4 <rcl_validate_topic_name+0xb0>
 801a89e:	1e4a      	subs	r2, r1, #1
 801a8a0:	429a      	cmp	r2, r3
 801a8a2:	d02d      	beq.n	801a900 <rcl_validate_topic_name+0x10c>
 801a8a4:	3101      	adds	r1, #1
 801a8a6:	4288      	cmp	r0, r1
 801a8a8:	d1d2      	bne.n	801a850 <rcl_validate_topic_name+0x5c>
 801a8aa:	2c00      	cmp	r4, #0
 801a8ac:	d145      	bne.n	801a93a <rcl_validate_topic_name+0x146>
 801a8ae:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 801a8b2:	d04f      	beq.n	801a954 <rcl_validate_topic_name+0x160>
 801a8b4:	4620      	mov	r0, r4
 801a8b6:	2301      	movs	r3, #1
 801a8b8:	e006      	b.n	801a8c8 <rcl_validate_topic_name+0xd4>
 801a8ba:	428b      	cmp	r3, r1
 801a8bc:	f105 0501 	add.w	r5, r5, #1
 801a8c0:	f103 0201 	add.w	r2, r3, #1
 801a8c4:	d236      	bcs.n	801a934 <rcl_validate_topic_name+0x140>
 801a8c6:	4613      	mov	r3, r2
 801a8c8:	4580      	cmp	r8, r0
 801a8ca:	f100 0001 	add.w	r0, r0, #1
 801a8ce:	d0f4      	beq.n	801a8ba <rcl_validate_topic_name+0xc6>
 801a8d0:	782a      	ldrb	r2, [r5, #0]
 801a8d2:	2a2f      	cmp	r2, #47	; 0x2f
 801a8d4:	d1f1      	bne.n	801a8ba <rcl_validate_topic_name+0xc6>
 801a8d6:	786a      	ldrb	r2, [r5, #1]
 801a8d8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a8dc:	0754      	lsls	r4, r2, #29
 801a8de:	d5ec      	bpl.n	801a8ba <rcl_validate_topic_name+0xc6>
 801a8e0:	2204      	movs	r2, #4
 801a8e2:	6032      	str	r2, [r6, #0]
 801a8e4:	2f00      	cmp	r7, #0
 801a8e6:	d0d1      	beq.n	801a88c <rcl_validate_topic_name+0x98>
 801a8e8:	603b      	str	r3, [r7, #0]
 801a8ea:	2000      	movs	r0, #0
 801a8ec:	e7aa      	b.n	801a844 <rcl_validate_topic_name+0x50>
 801a8ee:	200b      	movs	r0, #11
 801a8f0:	4770      	bx	lr
 801a8f2:	2304      	movs	r3, #4
 801a8f4:	6033      	str	r3, [r6, #0]
 801a8f6:	2f00      	cmp	r7, #0
 801a8f8:	d1a2      	bne.n	801a840 <rcl_validate_topic_name+0x4c>
 801a8fa:	e7c7      	b.n	801a88c <rcl_validate_topic_name+0x98>
 801a8fc:	200b      	movs	r0, #11
 801a8fe:	e7a1      	b.n	801a844 <rcl_validate_topic_name+0x50>
 801a900:	2309      	movs	r3, #9
 801a902:	6033      	str	r3, [r6, #0]
 801a904:	2f00      	cmp	r7, #0
 801a906:	d1c0      	bne.n	801a88a <rcl_validate_topic_name+0x96>
 801a908:	e7c0      	b.n	801a88c <rcl_validate_topic_name+0x98>
 801a90a:	2900      	cmp	r1, #0
 801a90c:	d0ca      	beq.n	801a8a4 <rcl_validate_topic_name+0xb0>
 801a90e:	2306      	movs	r3, #6
 801a910:	6033      	str	r3, [r6, #0]
 801a912:	2f00      	cmp	r7, #0
 801a914:	d1b9      	bne.n	801a88a <rcl_validate_topic_name+0x96>
 801a916:	e7b9      	b.n	801a88c <rcl_validate_topic_name+0x98>
 801a918:	2c00      	cmp	r4, #0
 801a91a:	d0c3      	beq.n	801a8a4 <rcl_validate_topic_name+0xb0>
 801a91c:	2308      	movs	r3, #8
 801a91e:	6033      	str	r3, [r6, #0]
 801a920:	2f00      	cmp	r7, #0
 801a922:	d1b2      	bne.n	801a88a <rcl_validate_topic_name+0x96>
 801a924:	e7b2      	b.n	801a88c <rcl_validate_topic_name+0x98>
 801a926:	2c00      	cmp	r4, #0
 801a928:	d1f8      	bne.n	801a91c <rcl_validate_topic_name+0x128>
 801a92a:	460b      	mov	r3, r1
 801a92c:	2401      	movs	r4, #1
 801a92e:	e7b9      	b.n	801a8a4 <rcl_validate_topic_name+0xb0>
 801a930:	2400      	movs	r4, #0
 801a932:	e7b7      	b.n	801a8a4 <rcl_validate_topic_name+0xb0>
 801a934:	2000      	movs	r0, #0
 801a936:	6030      	str	r0, [r6, #0]
 801a938:	e784      	b.n	801a844 <rcl_validate_topic_name+0x50>
 801a93a:	2205      	movs	r2, #5
 801a93c:	6032      	str	r2, [r6, #0]
 801a93e:	2f00      	cmp	r7, #0
 801a940:	d1d2      	bne.n	801a8e8 <rcl_validate_topic_name+0xf4>
 801a942:	e7a3      	b.n	801a88c <rcl_validate_topic_name+0x98>
 801a944:	2c00      	cmp	r4, #0
 801a946:	bf14      	ite	ne
 801a948:	2308      	movne	r3, #8
 801a94a:	2303      	moveq	r3, #3
 801a94c:	6033      	str	r3, [r6, #0]
 801a94e:	2f00      	cmp	r7, #0
 801a950:	d19b      	bne.n	801a88a <rcl_validate_topic_name+0x96>
 801a952:	e79b      	b.n	801a88c <rcl_validate_topic_name+0x98>
 801a954:	2301      	movs	r3, #1
 801a956:	e00a      	b.n	801a96e <rcl_validate_topic_name+0x17a>
 801a958:	2c01      	cmp	r4, #1
 801a95a:	d013      	beq.n	801a984 <rcl_validate_topic_name+0x190>
 801a95c:	4299      	cmp	r1, r3
 801a95e:	f104 0401 	add.w	r4, r4, #1
 801a962:	f105 0501 	add.w	r5, r5, #1
 801a966:	f103 0201 	add.w	r2, r3, #1
 801a96a:	d9e3      	bls.n	801a934 <rcl_validate_topic_name+0x140>
 801a96c:	4613      	mov	r3, r2
 801a96e:	45a0      	cmp	r8, r4
 801a970:	d0f4      	beq.n	801a95c <rcl_validate_topic_name+0x168>
 801a972:	782a      	ldrb	r2, [r5, #0]
 801a974:	2a2f      	cmp	r2, #47	; 0x2f
 801a976:	d1ef      	bne.n	801a958 <rcl_validate_topic_name+0x164>
 801a978:	786a      	ldrb	r2, [r5, #1]
 801a97a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a97e:	0752      	lsls	r2, r2, #29
 801a980:	d5ec      	bpl.n	801a95c <rcl_validate_topic_name+0x168>
 801a982:	e7ad      	b.n	801a8e0 <rcl_validate_topic_name+0xec>
 801a984:	2307      	movs	r3, #7
 801a986:	6033      	str	r3, [r6, #0]
 801a988:	2f00      	cmp	r7, #0
 801a98a:	f43f af7f 	beq.w	801a88c <rcl_validate_topic_name+0x98>
 801a98e:	603c      	str	r4, [r7, #0]
 801a990:	2000      	movs	r0, #0
 801a992:	e757      	b.n	801a844 <rcl_validate_topic_name+0x50>
 801a994:	0801d897 	.word	0x0801d897

0801a998 <on_status>:
 801a998:	b082      	sub	sp, #8
 801a99a:	b002      	add	sp, #8
 801a99c:	4770      	bx	lr
 801a99e:	bf00      	nop

0801a9a0 <on_topic>:
 801a9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9a4:	4a22      	ldr	r2, [pc, #136]	; (801aa30 <on_topic+0x90>)
 801a9a6:	b094      	sub	sp, #80	; 0x50
 801a9a8:	6812      	ldr	r2, [r2, #0]
 801a9aa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801a9ac:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801a9b0:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 801a9b4:	b3c2      	cbz	r2, 801aa28 <on_topic+0x88>
 801a9b6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801a9ba:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801a9be:	e001      	b.n	801a9c4 <on_topic+0x24>
 801a9c0:	6852      	ldr	r2, [r2, #4]
 801a9c2:	b38a      	cbz	r2, 801aa28 <on_topic+0x88>
 801a9c4:	6894      	ldr	r4, [r2, #8]
 801a9c6:	8aa3      	ldrh	r3, [r4, #20]
 801a9c8:	428b      	cmp	r3, r1
 801a9ca:	d1f9      	bne.n	801a9c0 <on_topic+0x20>
 801a9cc:	7da3      	ldrb	r3, [r4, #22]
 801a9ce:	4283      	cmp	r3, r0
 801a9d0:	d1f6      	bne.n	801a9c0 <on_topic+0x20>
 801a9d2:	2248      	movs	r2, #72	; 0x48
 801a9d4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a9d8:	4668      	mov	r0, sp
 801a9da:	f000 fb95 	bl	801b108 <memcpy>
 801a9de:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801a9e2:	cb0c      	ldmia	r3, {r2, r3}
 801a9e4:	4620      	mov	r0, r4
 801a9e6:	f7f6 fbe3 	bl	80111b0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a9ea:	4607      	mov	r7, r0
 801a9ec:	b1e0      	cbz	r0, 801aa28 <on_topic+0x88>
 801a9ee:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a9f2:	4632      	mov	r2, r6
 801a9f4:	4628      	mov	r0, r5
 801a9f6:	f108 0110 	add.w	r1, r8, #16
 801a9fa:	f7fd fff1 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 801a9fe:	b930      	cbnz	r0, 801aa0e <on_topic+0x6e>
 801aa00:	480c      	ldr	r0, [pc, #48]	; (801aa34 <on_topic+0x94>)
 801aa02:	4639      	mov	r1, r7
 801aa04:	b014      	add	sp, #80	; 0x50
 801aa06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa0a:	f7fd b905 	b.w	8017c18 <put_memory>
 801aa0e:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801aa12:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 801aa16:	f7fd fdcd 	bl	80185b4 <rmw_uros_epoch_nanos>
 801aa1a:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801aa1e:	2305      	movs	r3, #5
 801aa20:	e942 0102 	strd	r0, r1, [r2, #-8]
 801aa24:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801aa28:	b014      	add	sp, #80	; 0x50
 801aa2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa2e:	bf00      	nop
 801aa30:	200161bc 	.word	0x200161bc
 801aa34:	200161ac 	.word	0x200161ac

0801aa38 <on_request>:
 801aa38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa3c:	4823      	ldr	r0, [pc, #140]	; (801aacc <on_request+0x94>)
 801aa3e:	b094      	sub	sp, #80	; 0x50
 801aa40:	6800      	ldr	r0, [r0, #0]
 801aa42:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801aa44:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801aa48:	9113      	str	r1, [sp, #76]	; 0x4c
 801aa4a:	2800      	cmp	r0, #0
 801aa4c:	d03b      	beq.n	801aac6 <on_request+0x8e>
 801aa4e:	461d      	mov	r5, r3
 801aa50:	e001      	b.n	801aa56 <on_request+0x1e>
 801aa52:	6840      	ldr	r0, [r0, #4]
 801aa54:	b3b8      	cbz	r0, 801aac6 <on_request+0x8e>
 801aa56:	6884      	ldr	r4, [r0, #8]
 801aa58:	8b21      	ldrh	r1, [r4, #24]
 801aa5a:	4291      	cmp	r1, r2
 801aa5c:	d1f9      	bne.n	801aa52 <on_request+0x1a>
 801aa5e:	2248      	movs	r2, #72	; 0x48
 801aa60:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801aa64:	4668      	mov	r0, sp
 801aa66:	f000 fb4f 	bl	801b108 <memcpy>
 801aa6a:	f104 0320 	add.w	r3, r4, #32
 801aa6e:	cb0c      	ldmia	r3, {r2, r3}
 801aa70:	4620      	mov	r0, r4
 801aa72:	f7f6 fb9d 	bl	80111b0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801aa76:	4680      	mov	r8, r0
 801aa78:	b328      	cbz	r0, 801aac6 <on_request+0x8e>
 801aa7a:	4638      	mov	r0, r7
 801aa7c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801aa80:	4632      	mov	r2, r6
 801aa82:	f107 0110 	add.w	r1, r7, #16
 801aa86:	f7fd ffab 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 801aa8a:	b930      	cbnz	r0, 801aa9a <on_request+0x62>
 801aa8c:	4810      	ldr	r0, [pc, #64]	; (801aad0 <on_request+0x98>)
 801aa8e:	4641      	mov	r1, r8
 801aa90:	b014      	add	sp, #80	; 0x50
 801aa92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa96:	f7fd b8bf 	b.w	8017c18 <put_memory>
 801aa9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aa9c:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 801aaa0:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 801aaa4:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 801aaa8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aaac:	e895 0003 	ldmia.w	r5, {r0, r1}
 801aab0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801aab4:	f7fd fd7e 	bl	80185b4 <rmw_uros_epoch_nanos>
 801aab8:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801aabc:	2303      	movs	r3, #3
 801aabe:	e942 0102 	strd	r0, r1, [r2, #-8]
 801aac2:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801aac6:	b014      	add	sp, #80	; 0x50
 801aac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aacc:	2001618c 	.word	0x2001618c
 801aad0:	200161ac 	.word	0x200161ac

0801aad4 <on_reply>:
 801aad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aad8:	4821      	ldr	r0, [pc, #132]	; (801ab60 <on_reply+0x8c>)
 801aada:	b094      	sub	sp, #80	; 0x50
 801aadc:	6800      	ldr	r0, [r0, #0]
 801aade:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801aae0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801aae4:	9113      	str	r1, [sp, #76]	; 0x4c
 801aae6:	b3b8      	cbz	r0, 801ab58 <on_reply+0x84>
 801aae8:	461d      	mov	r5, r3
 801aaea:	e001      	b.n	801aaf0 <on_reply+0x1c>
 801aaec:	6840      	ldr	r0, [r0, #4]
 801aaee:	b398      	cbz	r0, 801ab58 <on_reply+0x84>
 801aaf0:	6884      	ldr	r4, [r0, #8]
 801aaf2:	8b21      	ldrh	r1, [r4, #24]
 801aaf4:	4291      	cmp	r1, r2
 801aaf6:	d1f9      	bne.n	801aaec <on_reply+0x18>
 801aaf8:	2248      	movs	r2, #72	; 0x48
 801aafa:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801aafe:	4668      	mov	r0, sp
 801ab00:	f000 fb02 	bl	801b108 <memcpy>
 801ab04:	f104 0320 	add.w	r3, r4, #32
 801ab08:	cb0c      	ldmia	r3, {r2, r3}
 801ab0a:	4620      	mov	r0, r4
 801ab0c:	f7f6 fb50 	bl	80111b0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801ab10:	4680      	mov	r8, r0
 801ab12:	b308      	cbz	r0, 801ab58 <on_reply+0x84>
 801ab14:	4638      	mov	r0, r7
 801ab16:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801ab1a:	4632      	mov	r2, r6
 801ab1c:	f107 0110 	add.w	r1, r7, #16
 801ab20:	f7fd ff5e 	bl	80189e0 <ucdr_deserialize_array_uint8_t>
 801ab24:	b930      	cbnz	r0, 801ab34 <on_reply+0x60>
 801ab26:	480f      	ldr	r0, [pc, #60]	; (801ab64 <on_reply+0x90>)
 801ab28:	4641      	mov	r1, r8
 801ab2a:	b014      	add	sp, #80	; 0x50
 801ab2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab30:	f7fd b872 	b.w	8017c18 <put_memory>
 801ab34:	2200      	movs	r2, #0
 801ab36:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 801ab3a:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 801ab3e:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 801ab42:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 801ab46:	f7fd fd35 	bl	80185b4 <rmw_uros_epoch_nanos>
 801ab4a:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801ab4e:	2304      	movs	r3, #4
 801ab50:	e942 0102 	strd	r0, r1, [r2, #-8]
 801ab54:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801ab58:	b014      	add	sp, #80	; 0x50
 801ab5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab5e:	bf00      	nop
 801ab60:	200118a0 	.word	0x200118a0
 801ab64:	200161ac 	.word	0x200161ac

0801ab68 <rmw_destroy_client>:
 801ab68:	b570      	push	{r4, r5, r6, lr}
 801ab6a:	b128      	cbz	r0, 801ab78 <rmw_destroy_client+0x10>
 801ab6c:	4604      	mov	r4, r0
 801ab6e:	6800      	ldr	r0, [r0, #0]
 801ab70:	460d      	mov	r5, r1
 801ab72:	f7f6 fbed 	bl	8011350 <is_uxrce_rmw_identifier_valid>
 801ab76:	b910      	cbnz	r0, 801ab7e <rmw_destroy_client+0x16>
 801ab78:	2401      	movs	r4, #1
 801ab7a:	4620      	mov	r0, r4
 801ab7c:	bd70      	pop	{r4, r5, r6, pc}
 801ab7e:	6863      	ldr	r3, [r4, #4]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d0f9      	beq.n	801ab78 <rmw_destroy_client+0x10>
 801ab84:	2d00      	cmp	r5, #0
 801ab86:	d0f7      	beq.n	801ab78 <rmw_destroy_client+0x10>
 801ab88:	6828      	ldr	r0, [r5, #0]
 801ab8a:	f7f6 fbe1 	bl	8011350 <is_uxrce_rmw_identifier_valid>
 801ab8e:	2800      	cmp	r0, #0
 801ab90:	d0f2      	beq.n	801ab78 <rmw_destroy_client+0x10>
 801ab92:	686e      	ldr	r6, [r5, #4]
 801ab94:	2e00      	cmp	r6, #0
 801ab96:	d0ef      	beq.n	801ab78 <rmw_destroy_client+0x10>
 801ab98:	6864      	ldr	r4, [r4, #4]
 801ab9a:	6932      	ldr	r2, [r6, #16]
 801ab9c:	6920      	ldr	r0, [r4, #16]
 801ab9e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801aba2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801aba6:	6819      	ldr	r1, [r3, #0]
 801aba8:	f7fe fe38 	bl	801981c <uxr_buffer_cancel_data>
 801abac:	4602      	mov	r2, r0
 801abae:	6920      	ldr	r0, [r4, #16]
 801abb0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801abb4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801abb8:	f7f6 fb4a 	bl	8011250 <run_xrce_session>
 801abbc:	6920      	ldr	r0, [r4, #16]
 801abbe:	6932      	ldr	r2, [r6, #16]
 801abc0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801abc4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801abc8:	6819      	ldr	r1, [r3, #0]
 801abca:	f7f9 f805 	bl	8013bd8 <uxr_buffer_delete_entity>
 801abce:	4602      	mov	r2, r0
 801abd0:	6920      	ldr	r0, [r4, #16]
 801abd2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801abd6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801abda:	f7f6 fb39 	bl	8011250 <run_xrce_session>
 801abde:	2800      	cmp	r0, #0
 801abe0:	4628      	mov	r0, r5
 801abe2:	bf14      	ite	ne
 801abe4:	2400      	movne	r4, #0
 801abe6:	2402      	moveq	r4, #2
 801abe8:	f7f6 fac0 	bl	801116c <rmw_uxrce_fini_client_memory>
 801abec:	e7c5      	b.n	801ab7a <rmw_destroy_client+0x12>
 801abee:	bf00      	nop

0801abf0 <rmw_create_guard_condition>:
 801abf0:	b538      	push	{r3, r4, r5, lr}
 801abf2:	4605      	mov	r5, r0
 801abf4:	4807      	ldr	r0, [pc, #28]	; (801ac14 <rmw_create_guard_condition+0x24>)
 801abf6:	f7fc ffff 	bl	8017bf8 <get_memory>
 801abfa:	b148      	cbz	r0, 801ac10 <rmw_create_guard_condition+0x20>
 801abfc:	6884      	ldr	r4, [r0, #8]
 801abfe:	2300      	movs	r3, #0
 801ac00:	7423      	strb	r3, [r4, #16]
 801ac02:	61e5      	str	r5, [r4, #28]
 801ac04:	f7fd f81c 	bl	8017c40 <rmw_get_implementation_identifier>
 801ac08:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801ac0c:	f104 0014 	add.w	r0, r4, #20
 801ac10:	bd38      	pop	{r3, r4, r5, pc}
 801ac12:	bf00      	nop
 801ac14:	2001614c 	.word	0x2001614c

0801ac18 <rmw_destroy_guard_condition>:
 801ac18:	b508      	push	{r3, lr}
 801ac1a:	4b08      	ldr	r3, [pc, #32]	; (801ac3c <rmw_destroy_guard_condition+0x24>)
 801ac1c:	6819      	ldr	r1, [r3, #0]
 801ac1e:	b911      	cbnz	r1, 801ac26 <rmw_destroy_guard_condition+0xe>
 801ac20:	e00a      	b.n	801ac38 <rmw_destroy_guard_condition+0x20>
 801ac22:	6849      	ldr	r1, [r1, #4]
 801ac24:	b141      	cbz	r1, 801ac38 <rmw_destroy_guard_condition+0x20>
 801ac26:	688b      	ldr	r3, [r1, #8]
 801ac28:	3314      	adds	r3, #20
 801ac2a:	4298      	cmp	r0, r3
 801ac2c:	d1f9      	bne.n	801ac22 <rmw_destroy_guard_condition+0xa>
 801ac2e:	4803      	ldr	r0, [pc, #12]	; (801ac3c <rmw_destroy_guard_condition+0x24>)
 801ac30:	f7fc fff2 	bl	8017c18 <put_memory>
 801ac34:	2000      	movs	r0, #0
 801ac36:	bd08      	pop	{r3, pc}
 801ac38:	2001      	movs	r0, #1
 801ac3a:	bd08      	pop	{r3, pc}
 801ac3c:	2001614c 	.word	0x2001614c

0801ac40 <rosidl_runtime_c__String__init>:
 801ac40:	b510      	push	{r4, lr}
 801ac42:	4604      	mov	r4, r0
 801ac44:	b086      	sub	sp, #24
 801ac46:	b170      	cbz	r0, 801ac66 <rosidl_runtime_c__String__init+0x26>
 801ac48:	a801      	add	r0, sp, #4
 801ac4a:	f7f5 fecf 	bl	80109ec <rcutils_get_default_allocator>
 801ac4e:	9b01      	ldr	r3, [sp, #4]
 801ac50:	9905      	ldr	r1, [sp, #20]
 801ac52:	2001      	movs	r0, #1
 801ac54:	4798      	blx	r3
 801ac56:	6020      	str	r0, [r4, #0]
 801ac58:	b128      	cbz	r0, 801ac66 <rosidl_runtime_c__String__init+0x26>
 801ac5a:	2100      	movs	r1, #0
 801ac5c:	2201      	movs	r2, #1
 801ac5e:	7001      	strb	r1, [r0, #0]
 801ac60:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801ac64:	4610      	mov	r0, r2
 801ac66:	b006      	add	sp, #24
 801ac68:	bd10      	pop	{r4, pc}
 801ac6a:	bf00      	nop

0801ac6c <rosidl_runtime_c__String__fini>:
 801ac6c:	b320      	cbz	r0, 801acb8 <rosidl_runtime_c__String__fini+0x4c>
 801ac6e:	b510      	push	{r4, lr}
 801ac70:	6803      	ldr	r3, [r0, #0]
 801ac72:	b086      	sub	sp, #24
 801ac74:	4604      	mov	r4, r0
 801ac76:	b173      	cbz	r3, 801ac96 <rosidl_runtime_c__String__fini+0x2a>
 801ac78:	6883      	ldr	r3, [r0, #8]
 801ac7a:	b1f3      	cbz	r3, 801acba <rosidl_runtime_c__String__fini+0x4e>
 801ac7c:	a801      	add	r0, sp, #4
 801ac7e:	f7f5 feb5 	bl	80109ec <rcutils_get_default_allocator>
 801ac82:	9b02      	ldr	r3, [sp, #8]
 801ac84:	9905      	ldr	r1, [sp, #20]
 801ac86:	6820      	ldr	r0, [r4, #0]
 801ac88:	4798      	blx	r3
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	e9c4 3300 	strd	r3, r3, [r4]
 801ac90:	60a3      	str	r3, [r4, #8]
 801ac92:	b006      	add	sp, #24
 801ac94:	bd10      	pop	{r4, pc}
 801ac96:	6843      	ldr	r3, [r0, #4]
 801ac98:	b9db      	cbnz	r3, 801acd2 <rosidl_runtime_c__String__fini+0x66>
 801ac9a:	6883      	ldr	r3, [r0, #8]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d0f8      	beq.n	801ac92 <rosidl_runtime_c__String__fini+0x26>
 801aca0:	4b12      	ldr	r3, [pc, #72]	; (801acec <rosidl_runtime_c__String__fini+0x80>)
 801aca2:	4813      	ldr	r0, [pc, #76]	; (801acf0 <rosidl_runtime_c__String__fini+0x84>)
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	2251      	movs	r2, #81	; 0x51
 801aca8:	68db      	ldr	r3, [r3, #12]
 801acaa:	2101      	movs	r1, #1
 801acac:	f000 f99e 	bl	801afec <fwrite>
 801acb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801acb4:	f000 f830 	bl	801ad18 <exit>
 801acb8:	4770      	bx	lr
 801acba:	4b0c      	ldr	r3, [pc, #48]	; (801acec <rosidl_runtime_c__String__fini+0x80>)
 801acbc:	480d      	ldr	r0, [pc, #52]	; (801acf4 <rosidl_runtime_c__String__fini+0x88>)
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	224c      	movs	r2, #76	; 0x4c
 801acc2:	68db      	ldr	r3, [r3, #12]
 801acc4:	2101      	movs	r1, #1
 801acc6:	f000 f991 	bl	801afec <fwrite>
 801acca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801acce:	f000 f823 	bl	801ad18 <exit>
 801acd2:	4b06      	ldr	r3, [pc, #24]	; (801acec <rosidl_runtime_c__String__fini+0x80>)
 801acd4:	4808      	ldr	r0, [pc, #32]	; (801acf8 <rosidl_runtime_c__String__fini+0x8c>)
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	224e      	movs	r2, #78	; 0x4e
 801acda:	68db      	ldr	r3, [r3, #12]
 801acdc:	2101      	movs	r1, #1
 801acde:	f000 f985 	bl	801afec <fwrite>
 801ace2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ace6:	f000 f817 	bl	801ad18 <exit>
 801acea:	bf00      	nop
 801acec:	200009bc 	.word	0x200009bc
 801acf0:	0801d844 	.word	0x0801d844
 801acf4:	0801d7a4 	.word	0x0801d7a4
 801acf8:	0801d7f4 	.word	0x0801d7f4

0801acfc <calloc>:
 801acfc:	4b02      	ldr	r3, [pc, #8]	; (801ad08 <calloc+0xc>)
 801acfe:	460a      	mov	r2, r1
 801ad00:	4601      	mov	r1, r0
 801ad02:	6818      	ldr	r0, [r3, #0]
 801ad04:	f000 ba16 	b.w	801b134 <_calloc_r>
 801ad08:	200009bc 	.word	0x200009bc

0801ad0c <__errno>:
 801ad0c:	4b01      	ldr	r3, [pc, #4]	; (801ad14 <__errno+0x8>)
 801ad0e:	6818      	ldr	r0, [r3, #0]
 801ad10:	4770      	bx	lr
 801ad12:	bf00      	nop
 801ad14:	200009bc 	.word	0x200009bc

0801ad18 <exit>:
 801ad18:	b508      	push	{r3, lr}
 801ad1a:	4b07      	ldr	r3, [pc, #28]	; (801ad38 <exit+0x20>)
 801ad1c:	4604      	mov	r4, r0
 801ad1e:	b113      	cbz	r3, 801ad26 <exit+0xe>
 801ad20:	2100      	movs	r1, #0
 801ad22:	f3af 8000 	nop.w
 801ad26:	4b05      	ldr	r3, [pc, #20]	; (801ad3c <exit+0x24>)
 801ad28:	6818      	ldr	r0, [r3, #0]
 801ad2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ad2c:	b103      	cbz	r3, 801ad30 <exit+0x18>
 801ad2e:	4798      	blx	r3
 801ad30:	4620      	mov	r0, r4
 801ad32:	f7e7 fbd3 	bl	80024dc <_exit>
 801ad36:	bf00      	nop
 801ad38:	00000000 	.word	0x00000000
 801ad3c:	0801d9f8 	.word	0x0801d9f8

0801ad40 <std>:
 801ad40:	2300      	movs	r3, #0
 801ad42:	b510      	push	{r4, lr}
 801ad44:	4604      	mov	r4, r0
 801ad46:	e9c0 3300 	strd	r3, r3, [r0]
 801ad4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ad4e:	6083      	str	r3, [r0, #8]
 801ad50:	8181      	strh	r1, [r0, #12]
 801ad52:	6643      	str	r3, [r0, #100]	; 0x64
 801ad54:	81c2      	strh	r2, [r0, #14]
 801ad56:	6183      	str	r3, [r0, #24]
 801ad58:	4619      	mov	r1, r3
 801ad5a:	2208      	movs	r2, #8
 801ad5c:	305c      	adds	r0, #92	; 0x5c
 801ad5e:	f000 f9e1 	bl	801b124 <memset>
 801ad62:	4b05      	ldr	r3, [pc, #20]	; (801ad78 <std+0x38>)
 801ad64:	6263      	str	r3, [r4, #36]	; 0x24
 801ad66:	4b05      	ldr	r3, [pc, #20]	; (801ad7c <std+0x3c>)
 801ad68:	62a3      	str	r3, [r4, #40]	; 0x28
 801ad6a:	4b05      	ldr	r3, [pc, #20]	; (801ad80 <std+0x40>)
 801ad6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ad6e:	4b05      	ldr	r3, [pc, #20]	; (801ad84 <std+0x44>)
 801ad70:	6224      	str	r4, [r4, #32]
 801ad72:	6323      	str	r3, [r4, #48]	; 0x30
 801ad74:	bd10      	pop	{r4, pc}
 801ad76:	bf00      	nop
 801ad78:	0801b595 	.word	0x0801b595
 801ad7c:	0801b5b7 	.word	0x0801b5b7
 801ad80:	0801b5ef 	.word	0x0801b5ef
 801ad84:	0801b613 	.word	0x0801b613

0801ad88 <_cleanup_r>:
 801ad88:	4901      	ldr	r1, [pc, #4]	; (801ad90 <_cleanup_r+0x8>)
 801ad8a:	f000 b8af 	b.w	801aeec <_fwalk_reent>
 801ad8e:	bf00      	nop
 801ad90:	0801bb29 	.word	0x0801bb29

0801ad94 <__sfmoreglue>:
 801ad94:	b570      	push	{r4, r5, r6, lr}
 801ad96:	2268      	movs	r2, #104	; 0x68
 801ad98:	1e4d      	subs	r5, r1, #1
 801ad9a:	4355      	muls	r5, r2
 801ad9c:	460e      	mov	r6, r1
 801ad9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ada2:	f000 fa49 	bl	801b238 <_malloc_r>
 801ada6:	4604      	mov	r4, r0
 801ada8:	b140      	cbz	r0, 801adbc <__sfmoreglue+0x28>
 801adaa:	2100      	movs	r1, #0
 801adac:	e9c0 1600 	strd	r1, r6, [r0]
 801adb0:	300c      	adds	r0, #12
 801adb2:	60a0      	str	r0, [r4, #8]
 801adb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801adb8:	f000 f9b4 	bl	801b124 <memset>
 801adbc:	4620      	mov	r0, r4
 801adbe:	bd70      	pop	{r4, r5, r6, pc}

0801adc0 <__sfp_lock_acquire>:
 801adc0:	4801      	ldr	r0, [pc, #4]	; (801adc8 <__sfp_lock_acquire+0x8>)
 801adc2:	f000 b98e 	b.w	801b0e2 <__retarget_lock_acquire_recursive>
 801adc6:	bf00      	nop
 801adc8:	20016302 	.word	0x20016302

0801adcc <__sfp_lock_release>:
 801adcc:	4801      	ldr	r0, [pc, #4]	; (801add4 <__sfp_lock_release+0x8>)
 801adce:	f000 b989 	b.w	801b0e4 <__retarget_lock_release_recursive>
 801add2:	bf00      	nop
 801add4:	20016302 	.word	0x20016302

0801add8 <__sinit_lock_acquire>:
 801add8:	4801      	ldr	r0, [pc, #4]	; (801ade0 <__sinit_lock_acquire+0x8>)
 801adda:	f000 b982 	b.w	801b0e2 <__retarget_lock_acquire_recursive>
 801adde:	bf00      	nop
 801ade0:	20016303 	.word	0x20016303

0801ade4 <__sinit_lock_release>:
 801ade4:	4801      	ldr	r0, [pc, #4]	; (801adec <__sinit_lock_release+0x8>)
 801ade6:	f000 b97d 	b.w	801b0e4 <__retarget_lock_release_recursive>
 801adea:	bf00      	nop
 801adec:	20016303 	.word	0x20016303

0801adf0 <__sinit>:
 801adf0:	b510      	push	{r4, lr}
 801adf2:	4604      	mov	r4, r0
 801adf4:	f7ff fff0 	bl	801add8 <__sinit_lock_acquire>
 801adf8:	69a3      	ldr	r3, [r4, #24]
 801adfa:	b11b      	cbz	r3, 801ae04 <__sinit+0x14>
 801adfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae00:	f7ff bff0 	b.w	801ade4 <__sinit_lock_release>
 801ae04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ae08:	6523      	str	r3, [r4, #80]	; 0x50
 801ae0a:	4b13      	ldr	r3, [pc, #76]	; (801ae58 <__sinit+0x68>)
 801ae0c:	4a13      	ldr	r2, [pc, #76]	; (801ae5c <__sinit+0x6c>)
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	62a2      	str	r2, [r4, #40]	; 0x28
 801ae12:	42a3      	cmp	r3, r4
 801ae14:	bf04      	itt	eq
 801ae16:	2301      	moveq	r3, #1
 801ae18:	61a3      	streq	r3, [r4, #24]
 801ae1a:	4620      	mov	r0, r4
 801ae1c:	f000 f820 	bl	801ae60 <__sfp>
 801ae20:	6060      	str	r0, [r4, #4]
 801ae22:	4620      	mov	r0, r4
 801ae24:	f000 f81c 	bl	801ae60 <__sfp>
 801ae28:	60a0      	str	r0, [r4, #8]
 801ae2a:	4620      	mov	r0, r4
 801ae2c:	f000 f818 	bl	801ae60 <__sfp>
 801ae30:	2200      	movs	r2, #0
 801ae32:	60e0      	str	r0, [r4, #12]
 801ae34:	2104      	movs	r1, #4
 801ae36:	6860      	ldr	r0, [r4, #4]
 801ae38:	f7ff ff82 	bl	801ad40 <std>
 801ae3c:	68a0      	ldr	r0, [r4, #8]
 801ae3e:	2201      	movs	r2, #1
 801ae40:	2109      	movs	r1, #9
 801ae42:	f7ff ff7d 	bl	801ad40 <std>
 801ae46:	68e0      	ldr	r0, [r4, #12]
 801ae48:	2202      	movs	r2, #2
 801ae4a:	2112      	movs	r1, #18
 801ae4c:	f7ff ff78 	bl	801ad40 <std>
 801ae50:	2301      	movs	r3, #1
 801ae52:	61a3      	str	r3, [r4, #24]
 801ae54:	e7d2      	b.n	801adfc <__sinit+0xc>
 801ae56:	bf00      	nop
 801ae58:	0801d9f8 	.word	0x0801d9f8
 801ae5c:	0801ad89 	.word	0x0801ad89

0801ae60 <__sfp>:
 801ae60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae62:	4607      	mov	r7, r0
 801ae64:	f7ff ffac 	bl	801adc0 <__sfp_lock_acquire>
 801ae68:	4b1e      	ldr	r3, [pc, #120]	; (801aee4 <__sfp+0x84>)
 801ae6a:	681e      	ldr	r6, [r3, #0]
 801ae6c:	69b3      	ldr	r3, [r6, #24]
 801ae6e:	b913      	cbnz	r3, 801ae76 <__sfp+0x16>
 801ae70:	4630      	mov	r0, r6
 801ae72:	f7ff ffbd 	bl	801adf0 <__sinit>
 801ae76:	3648      	adds	r6, #72	; 0x48
 801ae78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ae7c:	3b01      	subs	r3, #1
 801ae7e:	d503      	bpl.n	801ae88 <__sfp+0x28>
 801ae80:	6833      	ldr	r3, [r6, #0]
 801ae82:	b30b      	cbz	r3, 801aec8 <__sfp+0x68>
 801ae84:	6836      	ldr	r6, [r6, #0]
 801ae86:	e7f7      	b.n	801ae78 <__sfp+0x18>
 801ae88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ae8c:	b9d5      	cbnz	r5, 801aec4 <__sfp+0x64>
 801ae8e:	4b16      	ldr	r3, [pc, #88]	; (801aee8 <__sfp+0x88>)
 801ae90:	60e3      	str	r3, [r4, #12]
 801ae92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ae96:	6665      	str	r5, [r4, #100]	; 0x64
 801ae98:	f000 f922 	bl	801b0e0 <__retarget_lock_init_recursive>
 801ae9c:	f7ff ff96 	bl	801adcc <__sfp_lock_release>
 801aea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801aea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801aea8:	6025      	str	r5, [r4, #0]
 801aeaa:	61a5      	str	r5, [r4, #24]
 801aeac:	2208      	movs	r2, #8
 801aeae:	4629      	mov	r1, r5
 801aeb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aeb4:	f000 f936 	bl	801b124 <memset>
 801aeb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801aebc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801aec0:	4620      	mov	r0, r4
 801aec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aec4:	3468      	adds	r4, #104	; 0x68
 801aec6:	e7d9      	b.n	801ae7c <__sfp+0x1c>
 801aec8:	2104      	movs	r1, #4
 801aeca:	4638      	mov	r0, r7
 801aecc:	f7ff ff62 	bl	801ad94 <__sfmoreglue>
 801aed0:	4604      	mov	r4, r0
 801aed2:	6030      	str	r0, [r6, #0]
 801aed4:	2800      	cmp	r0, #0
 801aed6:	d1d5      	bne.n	801ae84 <__sfp+0x24>
 801aed8:	f7ff ff78 	bl	801adcc <__sfp_lock_release>
 801aedc:	230c      	movs	r3, #12
 801aede:	603b      	str	r3, [r7, #0]
 801aee0:	e7ee      	b.n	801aec0 <__sfp+0x60>
 801aee2:	bf00      	nop
 801aee4:	0801d9f8 	.word	0x0801d9f8
 801aee8:	ffff0001 	.word	0xffff0001

0801aeec <_fwalk_reent>:
 801aeec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aef0:	4606      	mov	r6, r0
 801aef2:	4688      	mov	r8, r1
 801aef4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801aef8:	2700      	movs	r7, #0
 801aefa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801aefe:	f1b9 0901 	subs.w	r9, r9, #1
 801af02:	d505      	bpl.n	801af10 <_fwalk_reent+0x24>
 801af04:	6824      	ldr	r4, [r4, #0]
 801af06:	2c00      	cmp	r4, #0
 801af08:	d1f7      	bne.n	801aefa <_fwalk_reent+0xe>
 801af0a:	4638      	mov	r0, r7
 801af0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af10:	89ab      	ldrh	r3, [r5, #12]
 801af12:	2b01      	cmp	r3, #1
 801af14:	d907      	bls.n	801af26 <_fwalk_reent+0x3a>
 801af16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801af1a:	3301      	adds	r3, #1
 801af1c:	d003      	beq.n	801af26 <_fwalk_reent+0x3a>
 801af1e:	4629      	mov	r1, r5
 801af20:	4630      	mov	r0, r6
 801af22:	47c0      	blx	r8
 801af24:	4307      	orrs	r7, r0
 801af26:	3568      	adds	r5, #104	; 0x68
 801af28:	e7e9      	b.n	801aefe <_fwalk_reent+0x12>
	...

0801af2c <_fwrite_r>:
 801af2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af30:	9c08      	ldr	r4, [sp, #32]
 801af32:	468a      	mov	sl, r1
 801af34:	4690      	mov	r8, r2
 801af36:	fb02 f903 	mul.w	r9, r2, r3
 801af3a:	4605      	mov	r5, r0
 801af3c:	b118      	cbz	r0, 801af46 <_fwrite_r+0x1a>
 801af3e:	6983      	ldr	r3, [r0, #24]
 801af40:	b90b      	cbnz	r3, 801af46 <_fwrite_r+0x1a>
 801af42:	f7ff ff55 	bl	801adf0 <__sinit>
 801af46:	4b26      	ldr	r3, [pc, #152]	; (801afe0 <_fwrite_r+0xb4>)
 801af48:	429c      	cmp	r4, r3
 801af4a:	d123      	bne.n	801af94 <_fwrite_r+0x68>
 801af4c:	686c      	ldr	r4, [r5, #4]
 801af4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801af50:	07de      	lsls	r6, r3, #31
 801af52:	d405      	bmi.n	801af60 <_fwrite_r+0x34>
 801af54:	89a3      	ldrh	r3, [r4, #12]
 801af56:	0598      	lsls	r0, r3, #22
 801af58:	d402      	bmi.n	801af60 <_fwrite_r+0x34>
 801af5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801af5c:	f000 f8c1 	bl	801b0e2 <__retarget_lock_acquire_recursive>
 801af60:	89a3      	ldrh	r3, [r4, #12]
 801af62:	0719      	lsls	r1, r3, #28
 801af64:	d520      	bpl.n	801afa8 <_fwrite_r+0x7c>
 801af66:	6923      	ldr	r3, [r4, #16]
 801af68:	b1f3      	cbz	r3, 801afa8 <_fwrite_r+0x7c>
 801af6a:	2600      	movs	r6, #0
 801af6c:	454e      	cmp	r6, r9
 801af6e:	d029      	beq.n	801afc4 <_fwrite_r+0x98>
 801af70:	68a7      	ldr	r7, [r4, #8]
 801af72:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801af76:	3f01      	subs	r7, #1
 801af78:	2f00      	cmp	r7, #0
 801af7a:	60a7      	str	r7, [r4, #8]
 801af7c:	da04      	bge.n	801af88 <_fwrite_r+0x5c>
 801af7e:	69a3      	ldr	r3, [r4, #24]
 801af80:	429f      	cmp	r7, r3
 801af82:	db19      	blt.n	801afb8 <_fwrite_r+0x8c>
 801af84:	290a      	cmp	r1, #10
 801af86:	d017      	beq.n	801afb8 <_fwrite_r+0x8c>
 801af88:	6823      	ldr	r3, [r4, #0]
 801af8a:	1c5a      	adds	r2, r3, #1
 801af8c:	6022      	str	r2, [r4, #0]
 801af8e:	7019      	strb	r1, [r3, #0]
 801af90:	3601      	adds	r6, #1
 801af92:	e7eb      	b.n	801af6c <_fwrite_r+0x40>
 801af94:	4b13      	ldr	r3, [pc, #76]	; (801afe4 <_fwrite_r+0xb8>)
 801af96:	429c      	cmp	r4, r3
 801af98:	d101      	bne.n	801af9e <_fwrite_r+0x72>
 801af9a:	68ac      	ldr	r4, [r5, #8]
 801af9c:	e7d7      	b.n	801af4e <_fwrite_r+0x22>
 801af9e:	4b12      	ldr	r3, [pc, #72]	; (801afe8 <_fwrite_r+0xbc>)
 801afa0:	429c      	cmp	r4, r3
 801afa2:	bf08      	it	eq
 801afa4:	68ec      	ldreq	r4, [r5, #12]
 801afa6:	e7d2      	b.n	801af4e <_fwrite_r+0x22>
 801afa8:	4621      	mov	r1, r4
 801afaa:	4628      	mov	r0, r5
 801afac:	f000 fc8e 	bl	801b8cc <__swsetup_r>
 801afb0:	2800      	cmp	r0, #0
 801afb2:	d0da      	beq.n	801af6a <_fwrite_r+0x3e>
 801afb4:	2600      	movs	r6, #0
 801afb6:	e005      	b.n	801afc4 <_fwrite_r+0x98>
 801afb8:	4622      	mov	r2, r4
 801afba:	4628      	mov	r0, r5
 801afbc:	f000 fc22 	bl	801b804 <__swbuf_r>
 801afc0:	3001      	adds	r0, #1
 801afc2:	d1e5      	bne.n	801af90 <_fwrite_r+0x64>
 801afc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801afc6:	07da      	lsls	r2, r3, #31
 801afc8:	d405      	bmi.n	801afd6 <_fwrite_r+0xaa>
 801afca:	89a3      	ldrh	r3, [r4, #12]
 801afcc:	059b      	lsls	r3, r3, #22
 801afce:	d402      	bmi.n	801afd6 <_fwrite_r+0xaa>
 801afd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801afd2:	f000 f887 	bl	801b0e4 <__retarget_lock_release_recursive>
 801afd6:	fbb6 f0f8 	udiv	r0, r6, r8
 801afda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afde:	bf00      	nop
 801afe0:	0801d9b8 	.word	0x0801d9b8
 801afe4:	0801d9d8 	.word	0x0801d9d8
 801afe8:	0801d998 	.word	0x0801d998

0801afec <fwrite>:
 801afec:	b507      	push	{r0, r1, r2, lr}
 801afee:	9300      	str	r3, [sp, #0]
 801aff0:	4613      	mov	r3, r2
 801aff2:	460a      	mov	r2, r1
 801aff4:	4601      	mov	r1, r0
 801aff6:	4803      	ldr	r0, [pc, #12]	; (801b004 <fwrite+0x18>)
 801aff8:	6800      	ldr	r0, [r0, #0]
 801affa:	f7ff ff97 	bl	801af2c <_fwrite_r>
 801affe:	b003      	add	sp, #12
 801b000:	f85d fb04 	ldr.w	pc, [sp], #4
 801b004:	200009bc 	.word	0x200009bc

0801b008 <getenv>:
 801b008:	b507      	push	{r0, r1, r2, lr}
 801b00a:	4b04      	ldr	r3, [pc, #16]	; (801b01c <getenv+0x14>)
 801b00c:	4601      	mov	r1, r0
 801b00e:	aa01      	add	r2, sp, #4
 801b010:	6818      	ldr	r0, [r3, #0]
 801b012:	f000 f805 	bl	801b020 <_findenv_r>
 801b016:	b003      	add	sp, #12
 801b018:	f85d fb04 	ldr.w	pc, [sp], #4
 801b01c:	200009bc 	.word	0x200009bc

0801b020 <_findenv_r>:
 801b020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b024:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801b094 <_findenv_r+0x74>
 801b028:	4607      	mov	r7, r0
 801b02a:	4689      	mov	r9, r1
 801b02c:	4616      	mov	r6, r2
 801b02e:	f000 fce9 	bl	801ba04 <__env_lock>
 801b032:	f8da 4000 	ldr.w	r4, [sl]
 801b036:	b134      	cbz	r4, 801b046 <_findenv_r+0x26>
 801b038:	464b      	mov	r3, r9
 801b03a:	4698      	mov	r8, r3
 801b03c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b040:	b13a      	cbz	r2, 801b052 <_findenv_r+0x32>
 801b042:	2a3d      	cmp	r2, #61	; 0x3d
 801b044:	d1f9      	bne.n	801b03a <_findenv_r+0x1a>
 801b046:	4638      	mov	r0, r7
 801b048:	f000 fce2 	bl	801ba10 <__env_unlock>
 801b04c:	2000      	movs	r0, #0
 801b04e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b052:	eba8 0809 	sub.w	r8, r8, r9
 801b056:	46a3      	mov	fp, r4
 801b058:	f854 0b04 	ldr.w	r0, [r4], #4
 801b05c:	2800      	cmp	r0, #0
 801b05e:	d0f2      	beq.n	801b046 <_findenv_r+0x26>
 801b060:	4642      	mov	r2, r8
 801b062:	4649      	mov	r1, r9
 801b064:	f000 faee 	bl	801b644 <strncmp>
 801b068:	2800      	cmp	r0, #0
 801b06a:	d1f4      	bne.n	801b056 <_findenv_r+0x36>
 801b06c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b070:	eb03 0508 	add.w	r5, r3, r8
 801b074:	f813 3008 	ldrb.w	r3, [r3, r8]
 801b078:	2b3d      	cmp	r3, #61	; 0x3d
 801b07a:	d1ec      	bne.n	801b056 <_findenv_r+0x36>
 801b07c:	f8da 3000 	ldr.w	r3, [sl]
 801b080:	ebab 0303 	sub.w	r3, fp, r3
 801b084:	109b      	asrs	r3, r3, #2
 801b086:	4638      	mov	r0, r7
 801b088:	6033      	str	r3, [r6, #0]
 801b08a:	f000 fcc1 	bl	801ba10 <__env_unlock>
 801b08e:	1c68      	adds	r0, r5, #1
 801b090:	e7dd      	b.n	801b04e <_findenv_r+0x2e>
 801b092:	bf00      	nop
 801b094:	20000000 	.word	0x20000000

0801b098 <__libc_init_array>:
 801b098:	b570      	push	{r4, r5, r6, lr}
 801b09a:	4d0d      	ldr	r5, [pc, #52]	; (801b0d0 <__libc_init_array+0x38>)
 801b09c:	4c0d      	ldr	r4, [pc, #52]	; (801b0d4 <__libc_init_array+0x3c>)
 801b09e:	1b64      	subs	r4, r4, r5
 801b0a0:	10a4      	asrs	r4, r4, #2
 801b0a2:	2600      	movs	r6, #0
 801b0a4:	42a6      	cmp	r6, r4
 801b0a6:	d109      	bne.n	801b0bc <__libc_init_array+0x24>
 801b0a8:	4d0b      	ldr	r5, [pc, #44]	; (801b0d8 <__libc_init_array+0x40>)
 801b0aa:	4c0c      	ldr	r4, [pc, #48]	; (801b0dc <__libc_init_array+0x44>)
 801b0ac:	f001 fb28 	bl	801c700 <_init>
 801b0b0:	1b64      	subs	r4, r4, r5
 801b0b2:	10a4      	asrs	r4, r4, #2
 801b0b4:	2600      	movs	r6, #0
 801b0b6:	42a6      	cmp	r6, r4
 801b0b8:	d105      	bne.n	801b0c6 <__libc_init_array+0x2e>
 801b0ba:	bd70      	pop	{r4, r5, r6, pc}
 801b0bc:	f855 3b04 	ldr.w	r3, [r5], #4
 801b0c0:	4798      	blx	r3
 801b0c2:	3601      	adds	r6, #1
 801b0c4:	e7ee      	b.n	801b0a4 <__libc_init_array+0xc>
 801b0c6:	f855 3b04 	ldr.w	r3, [r5], #4
 801b0ca:	4798      	blx	r3
 801b0cc:	3601      	adds	r6, #1
 801b0ce:	e7f2      	b.n	801b0b6 <__libc_init_array+0x1e>
 801b0d0:	0801dae8 	.word	0x0801dae8
 801b0d4:	0801dae8 	.word	0x0801dae8
 801b0d8:	0801dae8 	.word	0x0801dae8
 801b0dc:	0801db00 	.word	0x0801db00

0801b0e0 <__retarget_lock_init_recursive>:
 801b0e0:	4770      	bx	lr

0801b0e2 <__retarget_lock_acquire_recursive>:
 801b0e2:	4770      	bx	lr

0801b0e4 <__retarget_lock_release_recursive>:
 801b0e4:	4770      	bx	lr
	...

0801b0e8 <malloc>:
 801b0e8:	4b02      	ldr	r3, [pc, #8]	; (801b0f4 <malloc+0xc>)
 801b0ea:	4601      	mov	r1, r0
 801b0ec:	6818      	ldr	r0, [r3, #0]
 801b0ee:	f000 b8a3 	b.w	801b238 <_malloc_r>
 801b0f2:	bf00      	nop
 801b0f4:	200009bc 	.word	0x200009bc

0801b0f8 <free>:
 801b0f8:	4b02      	ldr	r3, [pc, #8]	; (801b104 <free+0xc>)
 801b0fa:	4601      	mov	r1, r0
 801b0fc:	6818      	ldr	r0, [r3, #0]
 801b0fe:	f000 b82f 	b.w	801b160 <_free_r>
 801b102:	bf00      	nop
 801b104:	200009bc 	.word	0x200009bc

0801b108 <memcpy>:
 801b108:	440a      	add	r2, r1
 801b10a:	4291      	cmp	r1, r2
 801b10c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801b110:	d100      	bne.n	801b114 <memcpy+0xc>
 801b112:	4770      	bx	lr
 801b114:	b510      	push	{r4, lr}
 801b116:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b11a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b11e:	4291      	cmp	r1, r2
 801b120:	d1f9      	bne.n	801b116 <memcpy+0xe>
 801b122:	bd10      	pop	{r4, pc}

0801b124 <memset>:
 801b124:	4402      	add	r2, r0
 801b126:	4603      	mov	r3, r0
 801b128:	4293      	cmp	r3, r2
 801b12a:	d100      	bne.n	801b12e <memset+0xa>
 801b12c:	4770      	bx	lr
 801b12e:	f803 1b01 	strb.w	r1, [r3], #1
 801b132:	e7f9      	b.n	801b128 <memset+0x4>

0801b134 <_calloc_r>:
 801b134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b136:	fba1 2402 	umull	r2, r4, r1, r2
 801b13a:	b94c      	cbnz	r4, 801b150 <_calloc_r+0x1c>
 801b13c:	4611      	mov	r1, r2
 801b13e:	9201      	str	r2, [sp, #4]
 801b140:	f000 f87a 	bl	801b238 <_malloc_r>
 801b144:	9a01      	ldr	r2, [sp, #4]
 801b146:	4605      	mov	r5, r0
 801b148:	b930      	cbnz	r0, 801b158 <_calloc_r+0x24>
 801b14a:	4628      	mov	r0, r5
 801b14c:	b003      	add	sp, #12
 801b14e:	bd30      	pop	{r4, r5, pc}
 801b150:	220c      	movs	r2, #12
 801b152:	6002      	str	r2, [r0, #0]
 801b154:	2500      	movs	r5, #0
 801b156:	e7f8      	b.n	801b14a <_calloc_r+0x16>
 801b158:	4621      	mov	r1, r4
 801b15a:	f7ff ffe3 	bl	801b124 <memset>
 801b15e:	e7f4      	b.n	801b14a <_calloc_r+0x16>

0801b160 <_free_r>:
 801b160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b162:	2900      	cmp	r1, #0
 801b164:	d044      	beq.n	801b1f0 <_free_r+0x90>
 801b166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b16a:	9001      	str	r0, [sp, #4]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	f1a1 0404 	sub.w	r4, r1, #4
 801b172:	bfb8      	it	lt
 801b174:	18e4      	addlt	r4, r4, r3
 801b176:	f000 fd9d 	bl	801bcb4 <__malloc_lock>
 801b17a:	4a1e      	ldr	r2, [pc, #120]	; (801b1f4 <_free_r+0x94>)
 801b17c:	9801      	ldr	r0, [sp, #4]
 801b17e:	6813      	ldr	r3, [r2, #0]
 801b180:	b933      	cbnz	r3, 801b190 <_free_r+0x30>
 801b182:	6063      	str	r3, [r4, #4]
 801b184:	6014      	str	r4, [r2, #0]
 801b186:	b003      	add	sp, #12
 801b188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b18c:	f000 bd98 	b.w	801bcc0 <__malloc_unlock>
 801b190:	42a3      	cmp	r3, r4
 801b192:	d908      	bls.n	801b1a6 <_free_r+0x46>
 801b194:	6825      	ldr	r5, [r4, #0]
 801b196:	1961      	adds	r1, r4, r5
 801b198:	428b      	cmp	r3, r1
 801b19a:	bf01      	itttt	eq
 801b19c:	6819      	ldreq	r1, [r3, #0]
 801b19e:	685b      	ldreq	r3, [r3, #4]
 801b1a0:	1949      	addeq	r1, r1, r5
 801b1a2:	6021      	streq	r1, [r4, #0]
 801b1a4:	e7ed      	b.n	801b182 <_free_r+0x22>
 801b1a6:	461a      	mov	r2, r3
 801b1a8:	685b      	ldr	r3, [r3, #4]
 801b1aa:	b10b      	cbz	r3, 801b1b0 <_free_r+0x50>
 801b1ac:	42a3      	cmp	r3, r4
 801b1ae:	d9fa      	bls.n	801b1a6 <_free_r+0x46>
 801b1b0:	6811      	ldr	r1, [r2, #0]
 801b1b2:	1855      	adds	r5, r2, r1
 801b1b4:	42a5      	cmp	r5, r4
 801b1b6:	d10b      	bne.n	801b1d0 <_free_r+0x70>
 801b1b8:	6824      	ldr	r4, [r4, #0]
 801b1ba:	4421      	add	r1, r4
 801b1bc:	1854      	adds	r4, r2, r1
 801b1be:	42a3      	cmp	r3, r4
 801b1c0:	6011      	str	r1, [r2, #0]
 801b1c2:	d1e0      	bne.n	801b186 <_free_r+0x26>
 801b1c4:	681c      	ldr	r4, [r3, #0]
 801b1c6:	685b      	ldr	r3, [r3, #4]
 801b1c8:	6053      	str	r3, [r2, #4]
 801b1ca:	4421      	add	r1, r4
 801b1cc:	6011      	str	r1, [r2, #0]
 801b1ce:	e7da      	b.n	801b186 <_free_r+0x26>
 801b1d0:	d902      	bls.n	801b1d8 <_free_r+0x78>
 801b1d2:	230c      	movs	r3, #12
 801b1d4:	6003      	str	r3, [r0, #0]
 801b1d6:	e7d6      	b.n	801b186 <_free_r+0x26>
 801b1d8:	6825      	ldr	r5, [r4, #0]
 801b1da:	1961      	adds	r1, r4, r5
 801b1dc:	428b      	cmp	r3, r1
 801b1de:	bf04      	itt	eq
 801b1e0:	6819      	ldreq	r1, [r3, #0]
 801b1e2:	685b      	ldreq	r3, [r3, #4]
 801b1e4:	6063      	str	r3, [r4, #4]
 801b1e6:	bf04      	itt	eq
 801b1e8:	1949      	addeq	r1, r1, r5
 801b1ea:	6021      	streq	r1, [r4, #0]
 801b1ec:	6054      	str	r4, [r2, #4]
 801b1ee:	e7ca      	b.n	801b186 <_free_r+0x26>
 801b1f0:	b003      	add	sp, #12
 801b1f2:	bd30      	pop	{r4, r5, pc}
 801b1f4:	20016304 	.word	0x20016304

0801b1f8 <sbrk_aligned>:
 801b1f8:	b570      	push	{r4, r5, r6, lr}
 801b1fa:	4e0e      	ldr	r6, [pc, #56]	; (801b234 <sbrk_aligned+0x3c>)
 801b1fc:	460c      	mov	r4, r1
 801b1fe:	6831      	ldr	r1, [r6, #0]
 801b200:	4605      	mov	r5, r0
 801b202:	b911      	cbnz	r1, 801b20a <sbrk_aligned+0x12>
 801b204:	f000 f982 	bl	801b50c <_sbrk_r>
 801b208:	6030      	str	r0, [r6, #0]
 801b20a:	4621      	mov	r1, r4
 801b20c:	4628      	mov	r0, r5
 801b20e:	f000 f97d 	bl	801b50c <_sbrk_r>
 801b212:	1c43      	adds	r3, r0, #1
 801b214:	d00a      	beq.n	801b22c <sbrk_aligned+0x34>
 801b216:	1cc4      	adds	r4, r0, #3
 801b218:	f024 0403 	bic.w	r4, r4, #3
 801b21c:	42a0      	cmp	r0, r4
 801b21e:	d007      	beq.n	801b230 <sbrk_aligned+0x38>
 801b220:	1a21      	subs	r1, r4, r0
 801b222:	4628      	mov	r0, r5
 801b224:	f000 f972 	bl	801b50c <_sbrk_r>
 801b228:	3001      	adds	r0, #1
 801b22a:	d101      	bne.n	801b230 <sbrk_aligned+0x38>
 801b22c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b230:	4620      	mov	r0, r4
 801b232:	bd70      	pop	{r4, r5, r6, pc}
 801b234:	20016308 	.word	0x20016308

0801b238 <_malloc_r>:
 801b238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b23c:	1ccd      	adds	r5, r1, #3
 801b23e:	f025 0503 	bic.w	r5, r5, #3
 801b242:	3508      	adds	r5, #8
 801b244:	2d0c      	cmp	r5, #12
 801b246:	bf38      	it	cc
 801b248:	250c      	movcc	r5, #12
 801b24a:	2d00      	cmp	r5, #0
 801b24c:	4607      	mov	r7, r0
 801b24e:	db01      	blt.n	801b254 <_malloc_r+0x1c>
 801b250:	42a9      	cmp	r1, r5
 801b252:	d905      	bls.n	801b260 <_malloc_r+0x28>
 801b254:	230c      	movs	r3, #12
 801b256:	603b      	str	r3, [r7, #0]
 801b258:	2600      	movs	r6, #0
 801b25a:	4630      	mov	r0, r6
 801b25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b260:	4e2e      	ldr	r6, [pc, #184]	; (801b31c <_malloc_r+0xe4>)
 801b262:	f000 fd27 	bl	801bcb4 <__malloc_lock>
 801b266:	6833      	ldr	r3, [r6, #0]
 801b268:	461c      	mov	r4, r3
 801b26a:	bb34      	cbnz	r4, 801b2ba <_malloc_r+0x82>
 801b26c:	4629      	mov	r1, r5
 801b26e:	4638      	mov	r0, r7
 801b270:	f7ff ffc2 	bl	801b1f8 <sbrk_aligned>
 801b274:	1c43      	adds	r3, r0, #1
 801b276:	4604      	mov	r4, r0
 801b278:	d14d      	bne.n	801b316 <_malloc_r+0xde>
 801b27a:	6834      	ldr	r4, [r6, #0]
 801b27c:	4626      	mov	r6, r4
 801b27e:	2e00      	cmp	r6, #0
 801b280:	d140      	bne.n	801b304 <_malloc_r+0xcc>
 801b282:	6823      	ldr	r3, [r4, #0]
 801b284:	4631      	mov	r1, r6
 801b286:	4638      	mov	r0, r7
 801b288:	eb04 0803 	add.w	r8, r4, r3
 801b28c:	f000 f93e 	bl	801b50c <_sbrk_r>
 801b290:	4580      	cmp	r8, r0
 801b292:	d13a      	bne.n	801b30a <_malloc_r+0xd2>
 801b294:	6821      	ldr	r1, [r4, #0]
 801b296:	3503      	adds	r5, #3
 801b298:	1a6d      	subs	r5, r5, r1
 801b29a:	f025 0503 	bic.w	r5, r5, #3
 801b29e:	3508      	adds	r5, #8
 801b2a0:	2d0c      	cmp	r5, #12
 801b2a2:	bf38      	it	cc
 801b2a4:	250c      	movcc	r5, #12
 801b2a6:	4629      	mov	r1, r5
 801b2a8:	4638      	mov	r0, r7
 801b2aa:	f7ff ffa5 	bl	801b1f8 <sbrk_aligned>
 801b2ae:	3001      	adds	r0, #1
 801b2b0:	d02b      	beq.n	801b30a <_malloc_r+0xd2>
 801b2b2:	6823      	ldr	r3, [r4, #0]
 801b2b4:	442b      	add	r3, r5
 801b2b6:	6023      	str	r3, [r4, #0]
 801b2b8:	e00e      	b.n	801b2d8 <_malloc_r+0xa0>
 801b2ba:	6822      	ldr	r2, [r4, #0]
 801b2bc:	1b52      	subs	r2, r2, r5
 801b2be:	d41e      	bmi.n	801b2fe <_malloc_r+0xc6>
 801b2c0:	2a0b      	cmp	r2, #11
 801b2c2:	d916      	bls.n	801b2f2 <_malloc_r+0xba>
 801b2c4:	1961      	adds	r1, r4, r5
 801b2c6:	42a3      	cmp	r3, r4
 801b2c8:	6025      	str	r5, [r4, #0]
 801b2ca:	bf18      	it	ne
 801b2cc:	6059      	strne	r1, [r3, #4]
 801b2ce:	6863      	ldr	r3, [r4, #4]
 801b2d0:	bf08      	it	eq
 801b2d2:	6031      	streq	r1, [r6, #0]
 801b2d4:	5162      	str	r2, [r4, r5]
 801b2d6:	604b      	str	r3, [r1, #4]
 801b2d8:	4638      	mov	r0, r7
 801b2da:	f104 060b 	add.w	r6, r4, #11
 801b2de:	f000 fcef 	bl	801bcc0 <__malloc_unlock>
 801b2e2:	f026 0607 	bic.w	r6, r6, #7
 801b2e6:	1d23      	adds	r3, r4, #4
 801b2e8:	1af2      	subs	r2, r6, r3
 801b2ea:	d0b6      	beq.n	801b25a <_malloc_r+0x22>
 801b2ec:	1b9b      	subs	r3, r3, r6
 801b2ee:	50a3      	str	r3, [r4, r2]
 801b2f0:	e7b3      	b.n	801b25a <_malloc_r+0x22>
 801b2f2:	6862      	ldr	r2, [r4, #4]
 801b2f4:	42a3      	cmp	r3, r4
 801b2f6:	bf0c      	ite	eq
 801b2f8:	6032      	streq	r2, [r6, #0]
 801b2fa:	605a      	strne	r2, [r3, #4]
 801b2fc:	e7ec      	b.n	801b2d8 <_malloc_r+0xa0>
 801b2fe:	4623      	mov	r3, r4
 801b300:	6864      	ldr	r4, [r4, #4]
 801b302:	e7b2      	b.n	801b26a <_malloc_r+0x32>
 801b304:	4634      	mov	r4, r6
 801b306:	6876      	ldr	r6, [r6, #4]
 801b308:	e7b9      	b.n	801b27e <_malloc_r+0x46>
 801b30a:	230c      	movs	r3, #12
 801b30c:	603b      	str	r3, [r7, #0]
 801b30e:	4638      	mov	r0, r7
 801b310:	f000 fcd6 	bl	801bcc0 <__malloc_unlock>
 801b314:	e7a1      	b.n	801b25a <_malloc_r+0x22>
 801b316:	6025      	str	r5, [r4, #0]
 801b318:	e7de      	b.n	801b2d8 <_malloc_r+0xa0>
 801b31a:	bf00      	nop
 801b31c:	20016304 	.word	0x20016304

0801b320 <iprintf>:
 801b320:	b40f      	push	{r0, r1, r2, r3}
 801b322:	4b0a      	ldr	r3, [pc, #40]	; (801b34c <iprintf+0x2c>)
 801b324:	b513      	push	{r0, r1, r4, lr}
 801b326:	681c      	ldr	r4, [r3, #0]
 801b328:	b124      	cbz	r4, 801b334 <iprintf+0x14>
 801b32a:	69a3      	ldr	r3, [r4, #24]
 801b32c:	b913      	cbnz	r3, 801b334 <iprintf+0x14>
 801b32e:	4620      	mov	r0, r4
 801b330:	f7ff fd5e 	bl	801adf0 <__sinit>
 801b334:	ab05      	add	r3, sp, #20
 801b336:	9a04      	ldr	r2, [sp, #16]
 801b338:	68a1      	ldr	r1, [r4, #8]
 801b33a:	9301      	str	r3, [sp, #4]
 801b33c:	4620      	mov	r0, r4
 801b33e:	f000 fe79 	bl	801c034 <_vfiprintf_r>
 801b342:	b002      	add	sp, #8
 801b344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b348:	b004      	add	sp, #16
 801b34a:	4770      	bx	lr
 801b34c:	200009bc 	.word	0x200009bc

0801b350 <srand>:
 801b350:	b538      	push	{r3, r4, r5, lr}
 801b352:	4b10      	ldr	r3, [pc, #64]	; (801b394 <srand+0x44>)
 801b354:	681d      	ldr	r5, [r3, #0]
 801b356:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801b358:	4604      	mov	r4, r0
 801b35a:	b9b3      	cbnz	r3, 801b38a <srand+0x3a>
 801b35c:	2018      	movs	r0, #24
 801b35e:	f7ff fec3 	bl	801b0e8 <malloc>
 801b362:	4602      	mov	r2, r0
 801b364:	63a8      	str	r0, [r5, #56]	; 0x38
 801b366:	b920      	cbnz	r0, 801b372 <srand+0x22>
 801b368:	4b0b      	ldr	r3, [pc, #44]	; (801b398 <srand+0x48>)
 801b36a:	480c      	ldr	r0, [pc, #48]	; (801b39c <srand+0x4c>)
 801b36c:	2142      	movs	r1, #66	; 0x42
 801b36e:	f000 fb1b 	bl	801b9a8 <__assert_func>
 801b372:	490b      	ldr	r1, [pc, #44]	; (801b3a0 <srand+0x50>)
 801b374:	4b0b      	ldr	r3, [pc, #44]	; (801b3a4 <srand+0x54>)
 801b376:	e9c0 1300 	strd	r1, r3, [r0]
 801b37a:	4b0b      	ldr	r3, [pc, #44]	; (801b3a8 <srand+0x58>)
 801b37c:	6083      	str	r3, [r0, #8]
 801b37e:	230b      	movs	r3, #11
 801b380:	8183      	strh	r3, [r0, #12]
 801b382:	2100      	movs	r1, #0
 801b384:	2001      	movs	r0, #1
 801b386:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b38a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801b38c:	2200      	movs	r2, #0
 801b38e:	611c      	str	r4, [r3, #16]
 801b390:	615a      	str	r2, [r3, #20]
 801b392:	bd38      	pop	{r3, r4, r5, pc}
 801b394:	200009bc 	.word	0x200009bc
 801b398:	0801d9fc 	.word	0x0801d9fc
 801b39c:	0801da13 	.word	0x0801da13
 801b3a0:	abcd330e 	.word	0xabcd330e
 801b3a4:	e66d1234 	.word	0xe66d1234
 801b3a8:	0005deec 	.word	0x0005deec

0801b3ac <rand>:
 801b3ac:	4b16      	ldr	r3, [pc, #88]	; (801b408 <rand+0x5c>)
 801b3ae:	b510      	push	{r4, lr}
 801b3b0:	681c      	ldr	r4, [r3, #0]
 801b3b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b3b4:	b9b3      	cbnz	r3, 801b3e4 <rand+0x38>
 801b3b6:	2018      	movs	r0, #24
 801b3b8:	f7ff fe96 	bl	801b0e8 <malloc>
 801b3bc:	63a0      	str	r0, [r4, #56]	; 0x38
 801b3be:	b928      	cbnz	r0, 801b3cc <rand+0x20>
 801b3c0:	4602      	mov	r2, r0
 801b3c2:	4b12      	ldr	r3, [pc, #72]	; (801b40c <rand+0x60>)
 801b3c4:	4812      	ldr	r0, [pc, #72]	; (801b410 <rand+0x64>)
 801b3c6:	214e      	movs	r1, #78	; 0x4e
 801b3c8:	f000 faee 	bl	801b9a8 <__assert_func>
 801b3cc:	4a11      	ldr	r2, [pc, #68]	; (801b414 <rand+0x68>)
 801b3ce:	4b12      	ldr	r3, [pc, #72]	; (801b418 <rand+0x6c>)
 801b3d0:	e9c0 2300 	strd	r2, r3, [r0]
 801b3d4:	4b11      	ldr	r3, [pc, #68]	; (801b41c <rand+0x70>)
 801b3d6:	6083      	str	r3, [r0, #8]
 801b3d8:	230b      	movs	r3, #11
 801b3da:	8183      	strh	r3, [r0, #12]
 801b3dc:	2201      	movs	r2, #1
 801b3de:	2300      	movs	r3, #0
 801b3e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b3e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801b3e6:	4a0e      	ldr	r2, [pc, #56]	; (801b420 <rand+0x74>)
 801b3e8:	6920      	ldr	r0, [r4, #16]
 801b3ea:	6963      	ldr	r3, [r4, #20]
 801b3ec:	490d      	ldr	r1, [pc, #52]	; (801b424 <rand+0x78>)
 801b3ee:	4342      	muls	r2, r0
 801b3f0:	fb01 2203 	mla	r2, r1, r3, r2
 801b3f4:	fba0 0101 	umull	r0, r1, r0, r1
 801b3f8:	1c43      	adds	r3, r0, #1
 801b3fa:	eb42 0001 	adc.w	r0, r2, r1
 801b3fe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801b402:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b406:	bd10      	pop	{r4, pc}
 801b408:	200009bc 	.word	0x200009bc
 801b40c:	0801d9fc 	.word	0x0801d9fc
 801b410:	0801da13 	.word	0x0801da13
 801b414:	abcd330e 	.word	0xabcd330e
 801b418:	e66d1234 	.word	0xe66d1234
 801b41c:	0005deec 	.word	0x0005deec
 801b420:	5851f42d 	.word	0x5851f42d
 801b424:	4c957f2d 	.word	0x4c957f2d

0801b428 <realloc>:
 801b428:	4b02      	ldr	r3, [pc, #8]	; (801b434 <realloc+0xc>)
 801b42a:	460a      	mov	r2, r1
 801b42c:	4601      	mov	r1, r0
 801b42e:	6818      	ldr	r0, [r3, #0]
 801b430:	f000 bc4c 	b.w	801bccc <_realloc_r>
 801b434:	200009bc 	.word	0x200009bc

0801b438 <cleanup_glue>:
 801b438:	b538      	push	{r3, r4, r5, lr}
 801b43a:	460c      	mov	r4, r1
 801b43c:	6809      	ldr	r1, [r1, #0]
 801b43e:	4605      	mov	r5, r0
 801b440:	b109      	cbz	r1, 801b446 <cleanup_glue+0xe>
 801b442:	f7ff fff9 	bl	801b438 <cleanup_glue>
 801b446:	4621      	mov	r1, r4
 801b448:	4628      	mov	r0, r5
 801b44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b44e:	f7ff be87 	b.w	801b160 <_free_r>
	...

0801b454 <_reclaim_reent>:
 801b454:	4b2c      	ldr	r3, [pc, #176]	; (801b508 <_reclaim_reent+0xb4>)
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	4283      	cmp	r3, r0
 801b45a:	b570      	push	{r4, r5, r6, lr}
 801b45c:	4604      	mov	r4, r0
 801b45e:	d051      	beq.n	801b504 <_reclaim_reent+0xb0>
 801b460:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b462:	b143      	cbz	r3, 801b476 <_reclaim_reent+0x22>
 801b464:	68db      	ldr	r3, [r3, #12]
 801b466:	2b00      	cmp	r3, #0
 801b468:	d14a      	bne.n	801b500 <_reclaim_reent+0xac>
 801b46a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b46c:	6819      	ldr	r1, [r3, #0]
 801b46e:	b111      	cbz	r1, 801b476 <_reclaim_reent+0x22>
 801b470:	4620      	mov	r0, r4
 801b472:	f7ff fe75 	bl	801b160 <_free_r>
 801b476:	6961      	ldr	r1, [r4, #20]
 801b478:	b111      	cbz	r1, 801b480 <_reclaim_reent+0x2c>
 801b47a:	4620      	mov	r0, r4
 801b47c:	f7ff fe70 	bl	801b160 <_free_r>
 801b480:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b482:	b111      	cbz	r1, 801b48a <_reclaim_reent+0x36>
 801b484:	4620      	mov	r0, r4
 801b486:	f7ff fe6b 	bl	801b160 <_free_r>
 801b48a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b48c:	b111      	cbz	r1, 801b494 <_reclaim_reent+0x40>
 801b48e:	4620      	mov	r0, r4
 801b490:	f7ff fe66 	bl	801b160 <_free_r>
 801b494:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b496:	b111      	cbz	r1, 801b49e <_reclaim_reent+0x4a>
 801b498:	4620      	mov	r0, r4
 801b49a:	f7ff fe61 	bl	801b160 <_free_r>
 801b49e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b4a0:	b111      	cbz	r1, 801b4a8 <_reclaim_reent+0x54>
 801b4a2:	4620      	mov	r0, r4
 801b4a4:	f7ff fe5c 	bl	801b160 <_free_r>
 801b4a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b4aa:	b111      	cbz	r1, 801b4b2 <_reclaim_reent+0x5e>
 801b4ac:	4620      	mov	r0, r4
 801b4ae:	f7ff fe57 	bl	801b160 <_free_r>
 801b4b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b4b4:	b111      	cbz	r1, 801b4bc <_reclaim_reent+0x68>
 801b4b6:	4620      	mov	r0, r4
 801b4b8:	f7ff fe52 	bl	801b160 <_free_r>
 801b4bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b4be:	b111      	cbz	r1, 801b4c6 <_reclaim_reent+0x72>
 801b4c0:	4620      	mov	r0, r4
 801b4c2:	f7ff fe4d 	bl	801b160 <_free_r>
 801b4c6:	69a3      	ldr	r3, [r4, #24]
 801b4c8:	b1e3      	cbz	r3, 801b504 <_reclaim_reent+0xb0>
 801b4ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b4cc:	4620      	mov	r0, r4
 801b4ce:	4798      	blx	r3
 801b4d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b4d2:	b1b9      	cbz	r1, 801b504 <_reclaim_reent+0xb0>
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b4da:	f7ff bfad 	b.w	801b438 <cleanup_glue>
 801b4de:	5949      	ldr	r1, [r1, r5]
 801b4e0:	b941      	cbnz	r1, 801b4f4 <_reclaim_reent+0xa0>
 801b4e2:	3504      	adds	r5, #4
 801b4e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b4e6:	2d80      	cmp	r5, #128	; 0x80
 801b4e8:	68d9      	ldr	r1, [r3, #12]
 801b4ea:	d1f8      	bne.n	801b4de <_reclaim_reent+0x8a>
 801b4ec:	4620      	mov	r0, r4
 801b4ee:	f7ff fe37 	bl	801b160 <_free_r>
 801b4f2:	e7ba      	b.n	801b46a <_reclaim_reent+0x16>
 801b4f4:	680e      	ldr	r6, [r1, #0]
 801b4f6:	4620      	mov	r0, r4
 801b4f8:	f7ff fe32 	bl	801b160 <_free_r>
 801b4fc:	4631      	mov	r1, r6
 801b4fe:	e7ef      	b.n	801b4e0 <_reclaim_reent+0x8c>
 801b500:	2500      	movs	r5, #0
 801b502:	e7ef      	b.n	801b4e4 <_reclaim_reent+0x90>
 801b504:	bd70      	pop	{r4, r5, r6, pc}
 801b506:	bf00      	nop
 801b508:	200009bc 	.word	0x200009bc

0801b50c <_sbrk_r>:
 801b50c:	b538      	push	{r3, r4, r5, lr}
 801b50e:	4d06      	ldr	r5, [pc, #24]	; (801b528 <_sbrk_r+0x1c>)
 801b510:	2300      	movs	r3, #0
 801b512:	4604      	mov	r4, r0
 801b514:	4608      	mov	r0, r1
 801b516:	602b      	str	r3, [r5, #0]
 801b518:	f7e7 f824 	bl	8002564 <_sbrk>
 801b51c:	1c43      	adds	r3, r0, #1
 801b51e:	d102      	bne.n	801b526 <_sbrk_r+0x1a>
 801b520:	682b      	ldr	r3, [r5, #0]
 801b522:	b103      	cbz	r3, 801b526 <_sbrk_r+0x1a>
 801b524:	6023      	str	r3, [r4, #0]
 801b526:	bd38      	pop	{r3, r4, r5, pc}
 801b528:	2001630c 	.word	0x2001630c

0801b52c <sniprintf>:
 801b52c:	b40c      	push	{r2, r3}
 801b52e:	b530      	push	{r4, r5, lr}
 801b530:	4b17      	ldr	r3, [pc, #92]	; (801b590 <sniprintf+0x64>)
 801b532:	1e0c      	subs	r4, r1, #0
 801b534:	681d      	ldr	r5, [r3, #0]
 801b536:	b09d      	sub	sp, #116	; 0x74
 801b538:	da08      	bge.n	801b54c <sniprintf+0x20>
 801b53a:	238b      	movs	r3, #139	; 0x8b
 801b53c:	602b      	str	r3, [r5, #0]
 801b53e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b542:	b01d      	add	sp, #116	; 0x74
 801b544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b548:	b002      	add	sp, #8
 801b54a:	4770      	bx	lr
 801b54c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b550:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b554:	bf14      	ite	ne
 801b556:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801b55a:	4623      	moveq	r3, r4
 801b55c:	9304      	str	r3, [sp, #16]
 801b55e:	9307      	str	r3, [sp, #28]
 801b560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b564:	9002      	str	r0, [sp, #8]
 801b566:	9006      	str	r0, [sp, #24]
 801b568:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b56c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b56e:	ab21      	add	r3, sp, #132	; 0x84
 801b570:	a902      	add	r1, sp, #8
 801b572:	4628      	mov	r0, r5
 801b574:	9301      	str	r3, [sp, #4]
 801b576:	f000 fc33 	bl	801bde0 <_svfiprintf_r>
 801b57a:	1c43      	adds	r3, r0, #1
 801b57c:	bfbc      	itt	lt
 801b57e:	238b      	movlt	r3, #139	; 0x8b
 801b580:	602b      	strlt	r3, [r5, #0]
 801b582:	2c00      	cmp	r4, #0
 801b584:	d0dd      	beq.n	801b542 <sniprintf+0x16>
 801b586:	9b02      	ldr	r3, [sp, #8]
 801b588:	2200      	movs	r2, #0
 801b58a:	701a      	strb	r2, [r3, #0]
 801b58c:	e7d9      	b.n	801b542 <sniprintf+0x16>
 801b58e:	bf00      	nop
 801b590:	200009bc 	.word	0x200009bc

0801b594 <__sread>:
 801b594:	b510      	push	{r4, lr}
 801b596:	460c      	mov	r4, r1
 801b598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b59c:	f001 f80e 	bl	801c5bc <_read_r>
 801b5a0:	2800      	cmp	r0, #0
 801b5a2:	bfab      	itete	ge
 801b5a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b5a6:	89a3      	ldrhlt	r3, [r4, #12]
 801b5a8:	181b      	addge	r3, r3, r0
 801b5aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b5ae:	bfac      	ite	ge
 801b5b0:	6563      	strge	r3, [r4, #84]	; 0x54
 801b5b2:	81a3      	strhlt	r3, [r4, #12]
 801b5b4:	bd10      	pop	{r4, pc}

0801b5b6 <__swrite>:
 801b5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5ba:	461f      	mov	r7, r3
 801b5bc:	898b      	ldrh	r3, [r1, #12]
 801b5be:	05db      	lsls	r3, r3, #23
 801b5c0:	4605      	mov	r5, r0
 801b5c2:	460c      	mov	r4, r1
 801b5c4:	4616      	mov	r6, r2
 801b5c6:	d505      	bpl.n	801b5d4 <__swrite+0x1e>
 801b5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b5cc:	2302      	movs	r3, #2
 801b5ce:	2200      	movs	r2, #0
 801b5d0:	f000 faf8 	bl	801bbc4 <_lseek_r>
 801b5d4:	89a3      	ldrh	r3, [r4, #12]
 801b5d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b5da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b5de:	81a3      	strh	r3, [r4, #12]
 801b5e0:	4632      	mov	r2, r6
 801b5e2:	463b      	mov	r3, r7
 801b5e4:	4628      	mov	r0, r5
 801b5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b5ea:	f000 b95d 	b.w	801b8a8 <_write_r>

0801b5ee <__sseek>:
 801b5ee:	b510      	push	{r4, lr}
 801b5f0:	460c      	mov	r4, r1
 801b5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b5f6:	f000 fae5 	bl	801bbc4 <_lseek_r>
 801b5fa:	1c43      	adds	r3, r0, #1
 801b5fc:	89a3      	ldrh	r3, [r4, #12]
 801b5fe:	bf15      	itete	ne
 801b600:	6560      	strne	r0, [r4, #84]	; 0x54
 801b602:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b606:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b60a:	81a3      	strheq	r3, [r4, #12]
 801b60c:	bf18      	it	ne
 801b60e:	81a3      	strhne	r3, [r4, #12]
 801b610:	bd10      	pop	{r4, pc}

0801b612 <__sclose>:
 801b612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b616:	f000 b9e5 	b.w	801b9e4 <_close_r>

0801b61a <strchr>:
 801b61a:	b2c9      	uxtb	r1, r1
 801b61c:	4603      	mov	r3, r0
 801b61e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b622:	b11a      	cbz	r2, 801b62c <strchr+0x12>
 801b624:	428a      	cmp	r2, r1
 801b626:	d1f9      	bne.n	801b61c <strchr+0x2>
 801b628:	4618      	mov	r0, r3
 801b62a:	4770      	bx	lr
 801b62c:	2900      	cmp	r1, #0
 801b62e:	bf18      	it	ne
 801b630:	2300      	movne	r3, #0
 801b632:	e7f9      	b.n	801b628 <strchr+0xe>

0801b634 <strcpy>:
 801b634:	4603      	mov	r3, r0
 801b636:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b63a:	f803 2b01 	strb.w	r2, [r3], #1
 801b63e:	2a00      	cmp	r2, #0
 801b640:	d1f9      	bne.n	801b636 <strcpy+0x2>
 801b642:	4770      	bx	lr

0801b644 <strncmp>:
 801b644:	b510      	push	{r4, lr}
 801b646:	b17a      	cbz	r2, 801b668 <strncmp+0x24>
 801b648:	4603      	mov	r3, r0
 801b64a:	3901      	subs	r1, #1
 801b64c:	1884      	adds	r4, r0, r2
 801b64e:	f813 0b01 	ldrb.w	r0, [r3], #1
 801b652:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b656:	4290      	cmp	r0, r2
 801b658:	d101      	bne.n	801b65e <strncmp+0x1a>
 801b65a:	42a3      	cmp	r3, r4
 801b65c:	d101      	bne.n	801b662 <strncmp+0x1e>
 801b65e:	1a80      	subs	r0, r0, r2
 801b660:	bd10      	pop	{r4, pc}
 801b662:	2800      	cmp	r0, #0
 801b664:	d1f3      	bne.n	801b64e <strncmp+0xa>
 801b666:	e7fa      	b.n	801b65e <strncmp+0x1a>
 801b668:	4610      	mov	r0, r2
 801b66a:	e7f9      	b.n	801b660 <strncmp+0x1c>

0801b66c <strstr>:
 801b66c:	780a      	ldrb	r2, [r1, #0]
 801b66e:	b570      	push	{r4, r5, r6, lr}
 801b670:	b96a      	cbnz	r2, 801b68e <strstr+0x22>
 801b672:	bd70      	pop	{r4, r5, r6, pc}
 801b674:	429a      	cmp	r2, r3
 801b676:	d109      	bne.n	801b68c <strstr+0x20>
 801b678:	460c      	mov	r4, r1
 801b67a:	4605      	mov	r5, r0
 801b67c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b680:	2b00      	cmp	r3, #0
 801b682:	d0f6      	beq.n	801b672 <strstr+0x6>
 801b684:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b688:	429e      	cmp	r6, r3
 801b68a:	d0f7      	beq.n	801b67c <strstr+0x10>
 801b68c:	3001      	adds	r0, #1
 801b68e:	7803      	ldrb	r3, [r0, #0]
 801b690:	2b00      	cmp	r3, #0
 801b692:	d1ef      	bne.n	801b674 <strstr+0x8>
 801b694:	4618      	mov	r0, r3
 801b696:	e7ec      	b.n	801b672 <strstr+0x6>

0801b698 <_strtoul_l.constprop.0>:
 801b698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b69c:	4f36      	ldr	r7, [pc, #216]	; (801b778 <_strtoul_l.constprop.0+0xe0>)
 801b69e:	4686      	mov	lr, r0
 801b6a0:	460d      	mov	r5, r1
 801b6a2:	4628      	mov	r0, r5
 801b6a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b6a8:	5de6      	ldrb	r6, [r4, r7]
 801b6aa:	f016 0608 	ands.w	r6, r6, #8
 801b6ae:	d1f8      	bne.n	801b6a2 <_strtoul_l.constprop.0+0xa>
 801b6b0:	2c2d      	cmp	r4, #45	; 0x2d
 801b6b2:	d12f      	bne.n	801b714 <_strtoul_l.constprop.0+0x7c>
 801b6b4:	782c      	ldrb	r4, [r5, #0]
 801b6b6:	2601      	movs	r6, #1
 801b6b8:	1c85      	adds	r5, r0, #2
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d057      	beq.n	801b76e <_strtoul_l.constprop.0+0xd6>
 801b6be:	2b10      	cmp	r3, #16
 801b6c0:	d109      	bne.n	801b6d6 <_strtoul_l.constprop.0+0x3e>
 801b6c2:	2c30      	cmp	r4, #48	; 0x30
 801b6c4:	d107      	bne.n	801b6d6 <_strtoul_l.constprop.0+0x3e>
 801b6c6:	7828      	ldrb	r0, [r5, #0]
 801b6c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801b6cc:	2858      	cmp	r0, #88	; 0x58
 801b6ce:	d149      	bne.n	801b764 <_strtoul_l.constprop.0+0xcc>
 801b6d0:	786c      	ldrb	r4, [r5, #1]
 801b6d2:	2310      	movs	r3, #16
 801b6d4:	3502      	adds	r5, #2
 801b6d6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801b6da:	2700      	movs	r7, #0
 801b6dc:	fbb8 f8f3 	udiv	r8, r8, r3
 801b6e0:	fb03 f908 	mul.w	r9, r3, r8
 801b6e4:	ea6f 0909 	mvn.w	r9, r9
 801b6e8:	4638      	mov	r0, r7
 801b6ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b6ee:	f1bc 0f09 	cmp.w	ip, #9
 801b6f2:	d814      	bhi.n	801b71e <_strtoul_l.constprop.0+0x86>
 801b6f4:	4664      	mov	r4, ip
 801b6f6:	42a3      	cmp	r3, r4
 801b6f8:	dd22      	ble.n	801b740 <_strtoul_l.constprop.0+0xa8>
 801b6fa:	2f00      	cmp	r7, #0
 801b6fc:	db1d      	blt.n	801b73a <_strtoul_l.constprop.0+0xa2>
 801b6fe:	4580      	cmp	r8, r0
 801b700:	d31b      	bcc.n	801b73a <_strtoul_l.constprop.0+0xa2>
 801b702:	d101      	bne.n	801b708 <_strtoul_l.constprop.0+0x70>
 801b704:	45a1      	cmp	r9, r4
 801b706:	db18      	blt.n	801b73a <_strtoul_l.constprop.0+0xa2>
 801b708:	fb00 4003 	mla	r0, r0, r3, r4
 801b70c:	2701      	movs	r7, #1
 801b70e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b712:	e7ea      	b.n	801b6ea <_strtoul_l.constprop.0+0x52>
 801b714:	2c2b      	cmp	r4, #43	; 0x2b
 801b716:	bf04      	itt	eq
 801b718:	782c      	ldrbeq	r4, [r5, #0]
 801b71a:	1c85      	addeq	r5, r0, #2
 801b71c:	e7cd      	b.n	801b6ba <_strtoul_l.constprop.0+0x22>
 801b71e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b722:	f1bc 0f19 	cmp.w	ip, #25
 801b726:	d801      	bhi.n	801b72c <_strtoul_l.constprop.0+0x94>
 801b728:	3c37      	subs	r4, #55	; 0x37
 801b72a:	e7e4      	b.n	801b6f6 <_strtoul_l.constprop.0+0x5e>
 801b72c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b730:	f1bc 0f19 	cmp.w	ip, #25
 801b734:	d804      	bhi.n	801b740 <_strtoul_l.constprop.0+0xa8>
 801b736:	3c57      	subs	r4, #87	; 0x57
 801b738:	e7dd      	b.n	801b6f6 <_strtoul_l.constprop.0+0x5e>
 801b73a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b73e:	e7e6      	b.n	801b70e <_strtoul_l.constprop.0+0x76>
 801b740:	2f00      	cmp	r7, #0
 801b742:	da07      	bge.n	801b754 <_strtoul_l.constprop.0+0xbc>
 801b744:	2322      	movs	r3, #34	; 0x22
 801b746:	f8ce 3000 	str.w	r3, [lr]
 801b74a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b74e:	b932      	cbnz	r2, 801b75e <_strtoul_l.constprop.0+0xc6>
 801b750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b754:	b106      	cbz	r6, 801b758 <_strtoul_l.constprop.0+0xc0>
 801b756:	4240      	negs	r0, r0
 801b758:	2a00      	cmp	r2, #0
 801b75a:	d0f9      	beq.n	801b750 <_strtoul_l.constprop.0+0xb8>
 801b75c:	b107      	cbz	r7, 801b760 <_strtoul_l.constprop.0+0xc8>
 801b75e:	1e69      	subs	r1, r5, #1
 801b760:	6011      	str	r1, [r2, #0]
 801b762:	e7f5      	b.n	801b750 <_strtoul_l.constprop.0+0xb8>
 801b764:	2430      	movs	r4, #48	; 0x30
 801b766:	2b00      	cmp	r3, #0
 801b768:	d1b5      	bne.n	801b6d6 <_strtoul_l.constprop.0+0x3e>
 801b76a:	2308      	movs	r3, #8
 801b76c:	e7b3      	b.n	801b6d6 <_strtoul_l.constprop.0+0x3e>
 801b76e:	2c30      	cmp	r4, #48	; 0x30
 801b770:	d0a9      	beq.n	801b6c6 <_strtoul_l.constprop.0+0x2e>
 801b772:	230a      	movs	r3, #10
 801b774:	e7af      	b.n	801b6d6 <_strtoul_l.constprop.0+0x3e>
 801b776:	bf00      	nop
 801b778:	0801d897 	.word	0x0801d897

0801b77c <strtoul>:
 801b77c:	4613      	mov	r3, r2
 801b77e:	460a      	mov	r2, r1
 801b780:	4601      	mov	r1, r0
 801b782:	4802      	ldr	r0, [pc, #8]	; (801b78c <strtoul+0x10>)
 801b784:	6800      	ldr	r0, [r0, #0]
 801b786:	f7ff bf87 	b.w	801b698 <_strtoul_l.constprop.0>
 801b78a:	bf00      	nop
 801b78c:	200009bc 	.word	0x200009bc

0801b790 <_vsniprintf_r>:
 801b790:	b530      	push	{r4, r5, lr}
 801b792:	4614      	mov	r4, r2
 801b794:	2c00      	cmp	r4, #0
 801b796:	b09b      	sub	sp, #108	; 0x6c
 801b798:	4605      	mov	r5, r0
 801b79a:	461a      	mov	r2, r3
 801b79c:	da05      	bge.n	801b7aa <_vsniprintf_r+0x1a>
 801b79e:	238b      	movs	r3, #139	; 0x8b
 801b7a0:	6003      	str	r3, [r0, #0]
 801b7a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b7a6:	b01b      	add	sp, #108	; 0x6c
 801b7a8:	bd30      	pop	{r4, r5, pc}
 801b7aa:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b7ae:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b7b2:	bf14      	ite	ne
 801b7b4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801b7b8:	4623      	moveq	r3, r4
 801b7ba:	9302      	str	r3, [sp, #8]
 801b7bc:	9305      	str	r3, [sp, #20]
 801b7be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b7c2:	9100      	str	r1, [sp, #0]
 801b7c4:	9104      	str	r1, [sp, #16]
 801b7c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b7ca:	4669      	mov	r1, sp
 801b7cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b7ce:	f000 fb07 	bl	801bde0 <_svfiprintf_r>
 801b7d2:	1c43      	adds	r3, r0, #1
 801b7d4:	bfbc      	itt	lt
 801b7d6:	238b      	movlt	r3, #139	; 0x8b
 801b7d8:	602b      	strlt	r3, [r5, #0]
 801b7da:	2c00      	cmp	r4, #0
 801b7dc:	d0e3      	beq.n	801b7a6 <_vsniprintf_r+0x16>
 801b7de:	9b00      	ldr	r3, [sp, #0]
 801b7e0:	2200      	movs	r2, #0
 801b7e2:	701a      	strb	r2, [r3, #0]
 801b7e4:	e7df      	b.n	801b7a6 <_vsniprintf_r+0x16>
	...

0801b7e8 <vsniprintf>:
 801b7e8:	b507      	push	{r0, r1, r2, lr}
 801b7ea:	9300      	str	r3, [sp, #0]
 801b7ec:	4613      	mov	r3, r2
 801b7ee:	460a      	mov	r2, r1
 801b7f0:	4601      	mov	r1, r0
 801b7f2:	4803      	ldr	r0, [pc, #12]	; (801b800 <vsniprintf+0x18>)
 801b7f4:	6800      	ldr	r0, [r0, #0]
 801b7f6:	f7ff ffcb 	bl	801b790 <_vsniprintf_r>
 801b7fa:	b003      	add	sp, #12
 801b7fc:	f85d fb04 	ldr.w	pc, [sp], #4
 801b800:	200009bc 	.word	0x200009bc

0801b804 <__swbuf_r>:
 801b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b806:	460e      	mov	r6, r1
 801b808:	4614      	mov	r4, r2
 801b80a:	4605      	mov	r5, r0
 801b80c:	b118      	cbz	r0, 801b816 <__swbuf_r+0x12>
 801b80e:	6983      	ldr	r3, [r0, #24]
 801b810:	b90b      	cbnz	r3, 801b816 <__swbuf_r+0x12>
 801b812:	f7ff faed 	bl	801adf0 <__sinit>
 801b816:	4b21      	ldr	r3, [pc, #132]	; (801b89c <__swbuf_r+0x98>)
 801b818:	429c      	cmp	r4, r3
 801b81a:	d12b      	bne.n	801b874 <__swbuf_r+0x70>
 801b81c:	686c      	ldr	r4, [r5, #4]
 801b81e:	69a3      	ldr	r3, [r4, #24]
 801b820:	60a3      	str	r3, [r4, #8]
 801b822:	89a3      	ldrh	r3, [r4, #12]
 801b824:	071a      	lsls	r2, r3, #28
 801b826:	d52f      	bpl.n	801b888 <__swbuf_r+0x84>
 801b828:	6923      	ldr	r3, [r4, #16]
 801b82a:	b36b      	cbz	r3, 801b888 <__swbuf_r+0x84>
 801b82c:	6923      	ldr	r3, [r4, #16]
 801b82e:	6820      	ldr	r0, [r4, #0]
 801b830:	1ac0      	subs	r0, r0, r3
 801b832:	6963      	ldr	r3, [r4, #20]
 801b834:	b2f6      	uxtb	r6, r6
 801b836:	4283      	cmp	r3, r0
 801b838:	4637      	mov	r7, r6
 801b83a:	dc04      	bgt.n	801b846 <__swbuf_r+0x42>
 801b83c:	4621      	mov	r1, r4
 801b83e:	4628      	mov	r0, r5
 801b840:	f000 f972 	bl	801bb28 <_fflush_r>
 801b844:	bb30      	cbnz	r0, 801b894 <__swbuf_r+0x90>
 801b846:	68a3      	ldr	r3, [r4, #8]
 801b848:	3b01      	subs	r3, #1
 801b84a:	60a3      	str	r3, [r4, #8]
 801b84c:	6823      	ldr	r3, [r4, #0]
 801b84e:	1c5a      	adds	r2, r3, #1
 801b850:	6022      	str	r2, [r4, #0]
 801b852:	701e      	strb	r6, [r3, #0]
 801b854:	6963      	ldr	r3, [r4, #20]
 801b856:	3001      	adds	r0, #1
 801b858:	4283      	cmp	r3, r0
 801b85a:	d004      	beq.n	801b866 <__swbuf_r+0x62>
 801b85c:	89a3      	ldrh	r3, [r4, #12]
 801b85e:	07db      	lsls	r3, r3, #31
 801b860:	d506      	bpl.n	801b870 <__swbuf_r+0x6c>
 801b862:	2e0a      	cmp	r6, #10
 801b864:	d104      	bne.n	801b870 <__swbuf_r+0x6c>
 801b866:	4621      	mov	r1, r4
 801b868:	4628      	mov	r0, r5
 801b86a:	f000 f95d 	bl	801bb28 <_fflush_r>
 801b86e:	b988      	cbnz	r0, 801b894 <__swbuf_r+0x90>
 801b870:	4638      	mov	r0, r7
 801b872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b874:	4b0a      	ldr	r3, [pc, #40]	; (801b8a0 <__swbuf_r+0x9c>)
 801b876:	429c      	cmp	r4, r3
 801b878:	d101      	bne.n	801b87e <__swbuf_r+0x7a>
 801b87a:	68ac      	ldr	r4, [r5, #8]
 801b87c:	e7cf      	b.n	801b81e <__swbuf_r+0x1a>
 801b87e:	4b09      	ldr	r3, [pc, #36]	; (801b8a4 <__swbuf_r+0xa0>)
 801b880:	429c      	cmp	r4, r3
 801b882:	bf08      	it	eq
 801b884:	68ec      	ldreq	r4, [r5, #12]
 801b886:	e7ca      	b.n	801b81e <__swbuf_r+0x1a>
 801b888:	4621      	mov	r1, r4
 801b88a:	4628      	mov	r0, r5
 801b88c:	f000 f81e 	bl	801b8cc <__swsetup_r>
 801b890:	2800      	cmp	r0, #0
 801b892:	d0cb      	beq.n	801b82c <__swbuf_r+0x28>
 801b894:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b898:	e7ea      	b.n	801b870 <__swbuf_r+0x6c>
 801b89a:	bf00      	nop
 801b89c:	0801d9b8 	.word	0x0801d9b8
 801b8a0:	0801d9d8 	.word	0x0801d9d8
 801b8a4:	0801d998 	.word	0x0801d998

0801b8a8 <_write_r>:
 801b8a8:	b538      	push	{r3, r4, r5, lr}
 801b8aa:	4d07      	ldr	r5, [pc, #28]	; (801b8c8 <_write_r+0x20>)
 801b8ac:	4604      	mov	r4, r0
 801b8ae:	4608      	mov	r0, r1
 801b8b0:	4611      	mov	r1, r2
 801b8b2:	2200      	movs	r2, #0
 801b8b4:	602a      	str	r2, [r5, #0]
 801b8b6:	461a      	mov	r2, r3
 801b8b8:	f7e6 fe37 	bl	800252a <_write>
 801b8bc:	1c43      	adds	r3, r0, #1
 801b8be:	d102      	bne.n	801b8c6 <_write_r+0x1e>
 801b8c0:	682b      	ldr	r3, [r5, #0]
 801b8c2:	b103      	cbz	r3, 801b8c6 <_write_r+0x1e>
 801b8c4:	6023      	str	r3, [r4, #0]
 801b8c6:	bd38      	pop	{r3, r4, r5, pc}
 801b8c8:	2001630c 	.word	0x2001630c

0801b8cc <__swsetup_r>:
 801b8cc:	4b32      	ldr	r3, [pc, #200]	; (801b998 <__swsetup_r+0xcc>)
 801b8ce:	b570      	push	{r4, r5, r6, lr}
 801b8d0:	681d      	ldr	r5, [r3, #0]
 801b8d2:	4606      	mov	r6, r0
 801b8d4:	460c      	mov	r4, r1
 801b8d6:	b125      	cbz	r5, 801b8e2 <__swsetup_r+0x16>
 801b8d8:	69ab      	ldr	r3, [r5, #24]
 801b8da:	b913      	cbnz	r3, 801b8e2 <__swsetup_r+0x16>
 801b8dc:	4628      	mov	r0, r5
 801b8de:	f7ff fa87 	bl	801adf0 <__sinit>
 801b8e2:	4b2e      	ldr	r3, [pc, #184]	; (801b99c <__swsetup_r+0xd0>)
 801b8e4:	429c      	cmp	r4, r3
 801b8e6:	d10f      	bne.n	801b908 <__swsetup_r+0x3c>
 801b8e8:	686c      	ldr	r4, [r5, #4]
 801b8ea:	89a3      	ldrh	r3, [r4, #12]
 801b8ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b8f0:	0719      	lsls	r1, r3, #28
 801b8f2:	d42c      	bmi.n	801b94e <__swsetup_r+0x82>
 801b8f4:	06dd      	lsls	r5, r3, #27
 801b8f6:	d411      	bmi.n	801b91c <__swsetup_r+0x50>
 801b8f8:	2309      	movs	r3, #9
 801b8fa:	6033      	str	r3, [r6, #0]
 801b8fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b900:	81a3      	strh	r3, [r4, #12]
 801b902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b906:	e03e      	b.n	801b986 <__swsetup_r+0xba>
 801b908:	4b25      	ldr	r3, [pc, #148]	; (801b9a0 <__swsetup_r+0xd4>)
 801b90a:	429c      	cmp	r4, r3
 801b90c:	d101      	bne.n	801b912 <__swsetup_r+0x46>
 801b90e:	68ac      	ldr	r4, [r5, #8]
 801b910:	e7eb      	b.n	801b8ea <__swsetup_r+0x1e>
 801b912:	4b24      	ldr	r3, [pc, #144]	; (801b9a4 <__swsetup_r+0xd8>)
 801b914:	429c      	cmp	r4, r3
 801b916:	bf08      	it	eq
 801b918:	68ec      	ldreq	r4, [r5, #12]
 801b91a:	e7e6      	b.n	801b8ea <__swsetup_r+0x1e>
 801b91c:	0758      	lsls	r0, r3, #29
 801b91e:	d512      	bpl.n	801b946 <__swsetup_r+0x7a>
 801b920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b922:	b141      	cbz	r1, 801b936 <__swsetup_r+0x6a>
 801b924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b928:	4299      	cmp	r1, r3
 801b92a:	d002      	beq.n	801b932 <__swsetup_r+0x66>
 801b92c:	4630      	mov	r0, r6
 801b92e:	f7ff fc17 	bl	801b160 <_free_r>
 801b932:	2300      	movs	r3, #0
 801b934:	6363      	str	r3, [r4, #52]	; 0x34
 801b936:	89a3      	ldrh	r3, [r4, #12]
 801b938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b93c:	81a3      	strh	r3, [r4, #12]
 801b93e:	2300      	movs	r3, #0
 801b940:	6063      	str	r3, [r4, #4]
 801b942:	6923      	ldr	r3, [r4, #16]
 801b944:	6023      	str	r3, [r4, #0]
 801b946:	89a3      	ldrh	r3, [r4, #12]
 801b948:	f043 0308 	orr.w	r3, r3, #8
 801b94c:	81a3      	strh	r3, [r4, #12]
 801b94e:	6923      	ldr	r3, [r4, #16]
 801b950:	b94b      	cbnz	r3, 801b966 <__swsetup_r+0x9a>
 801b952:	89a3      	ldrh	r3, [r4, #12]
 801b954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b95c:	d003      	beq.n	801b966 <__swsetup_r+0x9a>
 801b95e:	4621      	mov	r1, r4
 801b960:	4630      	mov	r0, r6
 801b962:	f000 f967 	bl	801bc34 <__smakebuf_r>
 801b966:	89a0      	ldrh	r0, [r4, #12]
 801b968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b96c:	f010 0301 	ands.w	r3, r0, #1
 801b970:	d00a      	beq.n	801b988 <__swsetup_r+0xbc>
 801b972:	2300      	movs	r3, #0
 801b974:	60a3      	str	r3, [r4, #8]
 801b976:	6963      	ldr	r3, [r4, #20]
 801b978:	425b      	negs	r3, r3
 801b97a:	61a3      	str	r3, [r4, #24]
 801b97c:	6923      	ldr	r3, [r4, #16]
 801b97e:	b943      	cbnz	r3, 801b992 <__swsetup_r+0xc6>
 801b980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b984:	d1ba      	bne.n	801b8fc <__swsetup_r+0x30>
 801b986:	bd70      	pop	{r4, r5, r6, pc}
 801b988:	0781      	lsls	r1, r0, #30
 801b98a:	bf58      	it	pl
 801b98c:	6963      	ldrpl	r3, [r4, #20]
 801b98e:	60a3      	str	r3, [r4, #8]
 801b990:	e7f4      	b.n	801b97c <__swsetup_r+0xb0>
 801b992:	2000      	movs	r0, #0
 801b994:	e7f7      	b.n	801b986 <__swsetup_r+0xba>
 801b996:	bf00      	nop
 801b998:	200009bc 	.word	0x200009bc
 801b99c:	0801d9b8 	.word	0x0801d9b8
 801b9a0:	0801d9d8 	.word	0x0801d9d8
 801b9a4:	0801d998 	.word	0x0801d998

0801b9a8 <__assert_func>:
 801b9a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b9aa:	4614      	mov	r4, r2
 801b9ac:	461a      	mov	r2, r3
 801b9ae:	4b09      	ldr	r3, [pc, #36]	; (801b9d4 <__assert_func+0x2c>)
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	4605      	mov	r5, r0
 801b9b4:	68d8      	ldr	r0, [r3, #12]
 801b9b6:	b14c      	cbz	r4, 801b9cc <__assert_func+0x24>
 801b9b8:	4b07      	ldr	r3, [pc, #28]	; (801b9d8 <__assert_func+0x30>)
 801b9ba:	9100      	str	r1, [sp, #0]
 801b9bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b9c0:	4906      	ldr	r1, [pc, #24]	; (801b9dc <__assert_func+0x34>)
 801b9c2:	462b      	mov	r3, r5
 801b9c4:	f000 f8ec 	bl	801bba0 <fiprintf>
 801b9c8:	f000 fe0a 	bl	801c5e0 <abort>
 801b9cc:	4b04      	ldr	r3, [pc, #16]	; (801b9e0 <__assert_func+0x38>)
 801b9ce:	461c      	mov	r4, r3
 801b9d0:	e7f3      	b.n	801b9ba <__assert_func+0x12>
 801b9d2:	bf00      	nop
 801b9d4:	200009bc 	.word	0x200009bc
 801b9d8:	0801da6e 	.word	0x0801da6e
 801b9dc:	0801da7b 	.word	0x0801da7b
 801b9e0:	0801daa9 	.word	0x0801daa9

0801b9e4 <_close_r>:
 801b9e4:	b538      	push	{r3, r4, r5, lr}
 801b9e6:	4d06      	ldr	r5, [pc, #24]	; (801ba00 <_close_r+0x1c>)
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	4604      	mov	r4, r0
 801b9ec:	4608      	mov	r0, r1
 801b9ee:	602b      	str	r3, [r5, #0]
 801b9f0:	f7e6 fdee 	bl	80025d0 <_close>
 801b9f4:	1c43      	adds	r3, r0, #1
 801b9f6:	d102      	bne.n	801b9fe <_close_r+0x1a>
 801b9f8:	682b      	ldr	r3, [r5, #0]
 801b9fa:	b103      	cbz	r3, 801b9fe <_close_r+0x1a>
 801b9fc:	6023      	str	r3, [r4, #0]
 801b9fe:	bd38      	pop	{r3, r4, r5, pc}
 801ba00:	2001630c 	.word	0x2001630c

0801ba04 <__env_lock>:
 801ba04:	4801      	ldr	r0, [pc, #4]	; (801ba0c <__env_lock+0x8>)
 801ba06:	f7ff bb6c 	b.w	801b0e2 <__retarget_lock_acquire_recursive>
 801ba0a:	bf00      	nop
 801ba0c:	20016300 	.word	0x20016300

0801ba10 <__env_unlock>:
 801ba10:	4801      	ldr	r0, [pc, #4]	; (801ba18 <__env_unlock+0x8>)
 801ba12:	f7ff bb67 	b.w	801b0e4 <__retarget_lock_release_recursive>
 801ba16:	bf00      	nop
 801ba18:	20016300 	.word	0x20016300

0801ba1c <__sflush_r>:
 801ba1c:	898a      	ldrh	r2, [r1, #12]
 801ba1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba22:	4605      	mov	r5, r0
 801ba24:	0710      	lsls	r0, r2, #28
 801ba26:	460c      	mov	r4, r1
 801ba28:	d458      	bmi.n	801badc <__sflush_r+0xc0>
 801ba2a:	684b      	ldr	r3, [r1, #4]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	dc05      	bgt.n	801ba3c <__sflush_r+0x20>
 801ba30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	dc02      	bgt.n	801ba3c <__sflush_r+0x20>
 801ba36:	2000      	movs	r0, #0
 801ba38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ba3e:	2e00      	cmp	r6, #0
 801ba40:	d0f9      	beq.n	801ba36 <__sflush_r+0x1a>
 801ba42:	2300      	movs	r3, #0
 801ba44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ba48:	682f      	ldr	r7, [r5, #0]
 801ba4a:	602b      	str	r3, [r5, #0]
 801ba4c:	d032      	beq.n	801bab4 <__sflush_r+0x98>
 801ba4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ba50:	89a3      	ldrh	r3, [r4, #12]
 801ba52:	075a      	lsls	r2, r3, #29
 801ba54:	d505      	bpl.n	801ba62 <__sflush_r+0x46>
 801ba56:	6863      	ldr	r3, [r4, #4]
 801ba58:	1ac0      	subs	r0, r0, r3
 801ba5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ba5c:	b10b      	cbz	r3, 801ba62 <__sflush_r+0x46>
 801ba5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ba60:	1ac0      	subs	r0, r0, r3
 801ba62:	2300      	movs	r3, #0
 801ba64:	4602      	mov	r2, r0
 801ba66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ba68:	6a21      	ldr	r1, [r4, #32]
 801ba6a:	4628      	mov	r0, r5
 801ba6c:	47b0      	blx	r6
 801ba6e:	1c43      	adds	r3, r0, #1
 801ba70:	89a3      	ldrh	r3, [r4, #12]
 801ba72:	d106      	bne.n	801ba82 <__sflush_r+0x66>
 801ba74:	6829      	ldr	r1, [r5, #0]
 801ba76:	291d      	cmp	r1, #29
 801ba78:	d82c      	bhi.n	801bad4 <__sflush_r+0xb8>
 801ba7a:	4a2a      	ldr	r2, [pc, #168]	; (801bb24 <__sflush_r+0x108>)
 801ba7c:	40ca      	lsrs	r2, r1
 801ba7e:	07d6      	lsls	r6, r2, #31
 801ba80:	d528      	bpl.n	801bad4 <__sflush_r+0xb8>
 801ba82:	2200      	movs	r2, #0
 801ba84:	6062      	str	r2, [r4, #4]
 801ba86:	04d9      	lsls	r1, r3, #19
 801ba88:	6922      	ldr	r2, [r4, #16]
 801ba8a:	6022      	str	r2, [r4, #0]
 801ba8c:	d504      	bpl.n	801ba98 <__sflush_r+0x7c>
 801ba8e:	1c42      	adds	r2, r0, #1
 801ba90:	d101      	bne.n	801ba96 <__sflush_r+0x7a>
 801ba92:	682b      	ldr	r3, [r5, #0]
 801ba94:	b903      	cbnz	r3, 801ba98 <__sflush_r+0x7c>
 801ba96:	6560      	str	r0, [r4, #84]	; 0x54
 801ba98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ba9a:	602f      	str	r7, [r5, #0]
 801ba9c:	2900      	cmp	r1, #0
 801ba9e:	d0ca      	beq.n	801ba36 <__sflush_r+0x1a>
 801baa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801baa4:	4299      	cmp	r1, r3
 801baa6:	d002      	beq.n	801baae <__sflush_r+0x92>
 801baa8:	4628      	mov	r0, r5
 801baaa:	f7ff fb59 	bl	801b160 <_free_r>
 801baae:	2000      	movs	r0, #0
 801bab0:	6360      	str	r0, [r4, #52]	; 0x34
 801bab2:	e7c1      	b.n	801ba38 <__sflush_r+0x1c>
 801bab4:	6a21      	ldr	r1, [r4, #32]
 801bab6:	2301      	movs	r3, #1
 801bab8:	4628      	mov	r0, r5
 801baba:	47b0      	blx	r6
 801babc:	1c41      	adds	r1, r0, #1
 801babe:	d1c7      	bne.n	801ba50 <__sflush_r+0x34>
 801bac0:	682b      	ldr	r3, [r5, #0]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d0c4      	beq.n	801ba50 <__sflush_r+0x34>
 801bac6:	2b1d      	cmp	r3, #29
 801bac8:	d001      	beq.n	801bace <__sflush_r+0xb2>
 801baca:	2b16      	cmp	r3, #22
 801bacc:	d101      	bne.n	801bad2 <__sflush_r+0xb6>
 801bace:	602f      	str	r7, [r5, #0]
 801bad0:	e7b1      	b.n	801ba36 <__sflush_r+0x1a>
 801bad2:	89a3      	ldrh	r3, [r4, #12]
 801bad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bad8:	81a3      	strh	r3, [r4, #12]
 801bada:	e7ad      	b.n	801ba38 <__sflush_r+0x1c>
 801badc:	690f      	ldr	r7, [r1, #16]
 801bade:	2f00      	cmp	r7, #0
 801bae0:	d0a9      	beq.n	801ba36 <__sflush_r+0x1a>
 801bae2:	0793      	lsls	r3, r2, #30
 801bae4:	680e      	ldr	r6, [r1, #0]
 801bae6:	bf08      	it	eq
 801bae8:	694b      	ldreq	r3, [r1, #20]
 801baea:	600f      	str	r7, [r1, #0]
 801baec:	bf18      	it	ne
 801baee:	2300      	movne	r3, #0
 801baf0:	eba6 0807 	sub.w	r8, r6, r7
 801baf4:	608b      	str	r3, [r1, #8]
 801baf6:	f1b8 0f00 	cmp.w	r8, #0
 801bafa:	dd9c      	ble.n	801ba36 <__sflush_r+0x1a>
 801bafc:	6a21      	ldr	r1, [r4, #32]
 801bafe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bb00:	4643      	mov	r3, r8
 801bb02:	463a      	mov	r2, r7
 801bb04:	4628      	mov	r0, r5
 801bb06:	47b0      	blx	r6
 801bb08:	2800      	cmp	r0, #0
 801bb0a:	dc06      	bgt.n	801bb1a <__sflush_r+0xfe>
 801bb0c:	89a3      	ldrh	r3, [r4, #12]
 801bb0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb12:	81a3      	strh	r3, [r4, #12]
 801bb14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bb18:	e78e      	b.n	801ba38 <__sflush_r+0x1c>
 801bb1a:	4407      	add	r7, r0
 801bb1c:	eba8 0800 	sub.w	r8, r8, r0
 801bb20:	e7e9      	b.n	801baf6 <__sflush_r+0xda>
 801bb22:	bf00      	nop
 801bb24:	20400001 	.word	0x20400001

0801bb28 <_fflush_r>:
 801bb28:	b538      	push	{r3, r4, r5, lr}
 801bb2a:	690b      	ldr	r3, [r1, #16]
 801bb2c:	4605      	mov	r5, r0
 801bb2e:	460c      	mov	r4, r1
 801bb30:	b913      	cbnz	r3, 801bb38 <_fflush_r+0x10>
 801bb32:	2500      	movs	r5, #0
 801bb34:	4628      	mov	r0, r5
 801bb36:	bd38      	pop	{r3, r4, r5, pc}
 801bb38:	b118      	cbz	r0, 801bb42 <_fflush_r+0x1a>
 801bb3a:	6983      	ldr	r3, [r0, #24]
 801bb3c:	b90b      	cbnz	r3, 801bb42 <_fflush_r+0x1a>
 801bb3e:	f7ff f957 	bl	801adf0 <__sinit>
 801bb42:	4b14      	ldr	r3, [pc, #80]	; (801bb94 <_fflush_r+0x6c>)
 801bb44:	429c      	cmp	r4, r3
 801bb46:	d11b      	bne.n	801bb80 <_fflush_r+0x58>
 801bb48:	686c      	ldr	r4, [r5, #4]
 801bb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d0ef      	beq.n	801bb32 <_fflush_r+0xa>
 801bb52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bb54:	07d0      	lsls	r0, r2, #31
 801bb56:	d404      	bmi.n	801bb62 <_fflush_r+0x3a>
 801bb58:	0599      	lsls	r1, r3, #22
 801bb5a:	d402      	bmi.n	801bb62 <_fflush_r+0x3a>
 801bb5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bb5e:	f7ff fac0 	bl	801b0e2 <__retarget_lock_acquire_recursive>
 801bb62:	4628      	mov	r0, r5
 801bb64:	4621      	mov	r1, r4
 801bb66:	f7ff ff59 	bl	801ba1c <__sflush_r>
 801bb6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bb6c:	07da      	lsls	r2, r3, #31
 801bb6e:	4605      	mov	r5, r0
 801bb70:	d4e0      	bmi.n	801bb34 <_fflush_r+0xc>
 801bb72:	89a3      	ldrh	r3, [r4, #12]
 801bb74:	059b      	lsls	r3, r3, #22
 801bb76:	d4dd      	bmi.n	801bb34 <_fflush_r+0xc>
 801bb78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bb7a:	f7ff fab3 	bl	801b0e4 <__retarget_lock_release_recursive>
 801bb7e:	e7d9      	b.n	801bb34 <_fflush_r+0xc>
 801bb80:	4b05      	ldr	r3, [pc, #20]	; (801bb98 <_fflush_r+0x70>)
 801bb82:	429c      	cmp	r4, r3
 801bb84:	d101      	bne.n	801bb8a <_fflush_r+0x62>
 801bb86:	68ac      	ldr	r4, [r5, #8]
 801bb88:	e7df      	b.n	801bb4a <_fflush_r+0x22>
 801bb8a:	4b04      	ldr	r3, [pc, #16]	; (801bb9c <_fflush_r+0x74>)
 801bb8c:	429c      	cmp	r4, r3
 801bb8e:	bf08      	it	eq
 801bb90:	68ec      	ldreq	r4, [r5, #12]
 801bb92:	e7da      	b.n	801bb4a <_fflush_r+0x22>
 801bb94:	0801d9b8 	.word	0x0801d9b8
 801bb98:	0801d9d8 	.word	0x0801d9d8
 801bb9c:	0801d998 	.word	0x0801d998

0801bba0 <fiprintf>:
 801bba0:	b40e      	push	{r1, r2, r3}
 801bba2:	b503      	push	{r0, r1, lr}
 801bba4:	4601      	mov	r1, r0
 801bba6:	ab03      	add	r3, sp, #12
 801bba8:	4805      	ldr	r0, [pc, #20]	; (801bbc0 <fiprintf+0x20>)
 801bbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbae:	6800      	ldr	r0, [r0, #0]
 801bbb0:	9301      	str	r3, [sp, #4]
 801bbb2:	f000 fa3f 	bl	801c034 <_vfiprintf_r>
 801bbb6:	b002      	add	sp, #8
 801bbb8:	f85d eb04 	ldr.w	lr, [sp], #4
 801bbbc:	b003      	add	sp, #12
 801bbbe:	4770      	bx	lr
 801bbc0:	200009bc 	.word	0x200009bc

0801bbc4 <_lseek_r>:
 801bbc4:	b538      	push	{r3, r4, r5, lr}
 801bbc6:	4d07      	ldr	r5, [pc, #28]	; (801bbe4 <_lseek_r+0x20>)
 801bbc8:	4604      	mov	r4, r0
 801bbca:	4608      	mov	r0, r1
 801bbcc:	4611      	mov	r1, r2
 801bbce:	2200      	movs	r2, #0
 801bbd0:	602a      	str	r2, [r5, #0]
 801bbd2:	461a      	mov	r2, r3
 801bbd4:	f7e6 fd23 	bl	800261e <_lseek>
 801bbd8:	1c43      	adds	r3, r0, #1
 801bbda:	d102      	bne.n	801bbe2 <_lseek_r+0x1e>
 801bbdc:	682b      	ldr	r3, [r5, #0]
 801bbde:	b103      	cbz	r3, 801bbe2 <_lseek_r+0x1e>
 801bbe0:	6023      	str	r3, [r4, #0]
 801bbe2:	bd38      	pop	{r3, r4, r5, pc}
 801bbe4:	2001630c 	.word	0x2001630c

0801bbe8 <__swhatbuf_r>:
 801bbe8:	b570      	push	{r4, r5, r6, lr}
 801bbea:	460e      	mov	r6, r1
 801bbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bbf0:	2900      	cmp	r1, #0
 801bbf2:	b096      	sub	sp, #88	; 0x58
 801bbf4:	4614      	mov	r4, r2
 801bbf6:	461d      	mov	r5, r3
 801bbf8:	da08      	bge.n	801bc0c <__swhatbuf_r+0x24>
 801bbfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801bbfe:	2200      	movs	r2, #0
 801bc00:	602a      	str	r2, [r5, #0]
 801bc02:	061a      	lsls	r2, r3, #24
 801bc04:	d410      	bmi.n	801bc28 <__swhatbuf_r+0x40>
 801bc06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc0a:	e00e      	b.n	801bc2a <__swhatbuf_r+0x42>
 801bc0c:	466a      	mov	r2, sp
 801bc0e:	f000 fcef 	bl	801c5f0 <_fstat_r>
 801bc12:	2800      	cmp	r0, #0
 801bc14:	dbf1      	blt.n	801bbfa <__swhatbuf_r+0x12>
 801bc16:	9a01      	ldr	r2, [sp, #4]
 801bc18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bc1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bc20:	425a      	negs	r2, r3
 801bc22:	415a      	adcs	r2, r3
 801bc24:	602a      	str	r2, [r5, #0]
 801bc26:	e7ee      	b.n	801bc06 <__swhatbuf_r+0x1e>
 801bc28:	2340      	movs	r3, #64	; 0x40
 801bc2a:	2000      	movs	r0, #0
 801bc2c:	6023      	str	r3, [r4, #0]
 801bc2e:	b016      	add	sp, #88	; 0x58
 801bc30:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bc34 <__smakebuf_r>:
 801bc34:	898b      	ldrh	r3, [r1, #12]
 801bc36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bc38:	079d      	lsls	r5, r3, #30
 801bc3a:	4606      	mov	r6, r0
 801bc3c:	460c      	mov	r4, r1
 801bc3e:	d507      	bpl.n	801bc50 <__smakebuf_r+0x1c>
 801bc40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bc44:	6023      	str	r3, [r4, #0]
 801bc46:	6123      	str	r3, [r4, #16]
 801bc48:	2301      	movs	r3, #1
 801bc4a:	6163      	str	r3, [r4, #20]
 801bc4c:	b002      	add	sp, #8
 801bc4e:	bd70      	pop	{r4, r5, r6, pc}
 801bc50:	ab01      	add	r3, sp, #4
 801bc52:	466a      	mov	r2, sp
 801bc54:	f7ff ffc8 	bl	801bbe8 <__swhatbuf_r>
 801bc58:	9900      	ldr	r1, [sp, #0]
 801bc5a:	4605      	mov	r5, r0
 801bc5c:	4630      	mov	r0, r6
 801bc5e:	f7ff faeb 	bl	801b238 <_malloc_r>
 801bc62:	b948      	cbnz	r0, 801bc78 <__smakebuf_r+0x44>
 801bc64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc68:	059a      	lsls	r2, r3, #22
 801bc6a:	d4ef      	bmi.n	801bc4c <__smakebuf_r+0x18>
 801bc6c:	f023 0303 	bic.w	r3, r3, #3
 801bc70:	f043 0302 	orr.w	r3, r3, #2
 801bc74:	81a3      	strh	r3, [r4, #12]
 801bc76:	e7e3      	b.n	801bc40 <__smakebuf_r+0xc>
 801bc78:	4b0d      	ldr	r3, [pc, #52]	; (801bcb0 <__smakebuf_r+0x7c>)
 801bc7a:	62b3      	str	r3, [r6, #40]	; 0x28
 801bc7c:	89a3      	ldrh	r3, [r4, #12]
 801bc7e:	6020      	str	r0, [r4, #0]
 801bc80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bc84:	81a3      	strh	r3, [r4, #12]
 801bc86:	9b00      	ldr	r3, [sp, #0]
 801bc88:	6163      	str	r3, [r4, #20]
 801bc8a:	9b01      	ldr	r3, [sp, #4]
 801bc8c:	6120      	str	r0, [r4, #16]
 801bc8e:	b15b      	cbz	r3, 801bca8 <__smakebuf_r+0x74>
 801bc90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bc94:	4630      	mov	r0, r6
 801bc96:	f000 fcbd 	bl	801c614 <_isatty_r>
 801bc9a:	b128      	cbz	r0, 801bca8 <__smakebuf_r+0x74>
 801bc9c:	89a3      	ldrh	r3, [r4, #12]
 801bc9e:	f023 0303 	bic.w	r3, r3, #3
 801bca2:	f043 0301 	orr.w	r3, r3, #1
 801bca6:	81a3      	strh	r3, [r4, #12]
 801bca8:	89a0      	ldrh	r0, [r4, #12]
 801bcaa:	4305      	orrs	r5, r0
 801bcac:	81a5      	strh	r5, [r4, #12]
 801bcae:	e7cd      	b.n	801bc4c <__smakebuf_r+0x18>
 801bcb0:	0801ad89 	.word	0x0801ad89

0801bcb4 <__malloc_lock>:
 801bcb4:	4801      	ldr	r0, [pc, #4]	; (801bcbc <__malloc_lock+0x8>)
 801bcb6:	f7ff ba14 	b.w	801b0e2 <__retarget_lock_acquire_recursive>
 801bcba:	bf00      	nop
 801bcbc:	20016301 	.word	0x20016301

0801bcc0 <__malloc_unlock>:
 801bcc0:	4801      	ldr	r0, [pc, #4]	; (801bcc8 <__malloc_unlock+0x8>)
 801bcc2:	f7ff ba0f 	b.w	801b0e4 <__retarget_lock_release_recursive>
 801bcc6:	bf00      	nop
 801bcc8:	20016301 	.word	0x20016301

0801bccc <_realloc_r>:
 801bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcd0:	4680      	mov	r8, r0
 801bcd2:	4614      	mov	r4, r2
 801bcd4:	460e      	mov	r6, r1
 801bcd6:	b921      	cbnz	r1, 801bce2 <_realloc_r+0x16>
 801bcd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bcdc:	4611      	mov	r1, r2
 801bcde:	f7ff baab 	b.w	801b238 <_malloc_r>
 801bce2:	b92a      	cbnz	r2, 801bcf0 <_realloc_r+0x24>
 801bce4:	f7ff fa3c 	bl	801b160 <_free_r>
 801bce8:	4625      	mov	r5, r4
 801bcea:	4628      	mov	r0, r5
 801bcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcf0:	f000 fcba 	bl	801c668 <_malloc_usable_size_r>
 801bcf4:	4284      	cmp	r4, r0
 801bcf6:	4607      	mov	r7, r0
 801bcf8:	d802      	bhi.n	801bd00 <_realloc_r+0x34>
 801bcfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bcfe:	d812      	bhi.n	801bd26 <_realloc_r+0x5a>
 801bd00:	4621      	mov	r1, r4
 801bd02:	4640      	mov	r0, r8
 801bd04:	f7ff fa98 	bl	801b238 <_malloc_r>
 801bd08:	4605      	mov	r5, r0
 801bd0a:	2800      	cmp	r0, #0
 801bd0c:	d0ed      	beq.n	801bcea <_realloc_r+0x1e>
 801bd0e:	42bc      	cmp	r4, r7
 801bd10:	4622      	mov	r2, r4
 801bd12:	4631      	mov	r1, r6
 801bd14:	bf28      	it	cs
 801bd16:	463a      	movcs	r2, r7
 801bd18:	f7ff f9f6 	bl	801b108 <memcpy>
 801bd1c:	4631      	mov	r1, r6
 801bd1e:	4640      	mov	r0, r8
 801bd20:	f7ff fa1e 	bl	801b160 <_free_r>
 801bd24:	e7e1      	b.n	801bcea <_realloc_r+0x1e>
 801bd26:	4635      	mov	r5, r6
 801bd28:	e7df      	b.n	801bcea <_realloc_r+0x1e>

0801bd2a <__ssputs_r>:
 801bd2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd2e:	688e      	ldr	r6, [r1, #8]
 801bd30:	429e      	cmp	r6, r3
 801bd32:	4682      	mov	sl, r0
 801bd34:	460c      	mov	r4, r1
 801bd36:	4690      	mov	r8, r2
 801bd38:	461f      	mov	r7, r3
 801bd3a:	d838      	bhi.n	801bdae <__ssputs_r+0x84>
 801bd3c:	898a      	ldrh	r2, [r1, #12]
 801bd3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bd42:	d032      	beq.n	801bdaa <__ssputs_r+0x80>
 801bd44:	6825      	ldr	r5, [r4, #0]
 801bd46:	6909      	ldr	r1, [r1, #16]
 801bd48:	eba5 0901 	sub.w	r9, r5, r1
 801bd4c:	6965      	ldr	r5, [r4, #20]
 801bd4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bd52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bd56:	3301      	adds	r3, #1
 801bd58:	444b      	add	r3, r9
 801bd5a:	106d      	asrs	r5, r5, #1
 801bd5c:	429d      	cmp	r5, r3
 801bd5e:	bf38      	it	cc
 801bd60:	461d      	movcc	r5, r3
 801bd62:	0553      	lsls	r3, r2, #21
 801bd64:	d531      	bpl.n	801bdca <__ssputs_r+0xa0>
 801bd66:	4629      	mov	r1, r5
 801bd68:	f7ff fa66 	bl	801b238 <_malloc_r>
 801bd6c:	4606      	mov	r6, r0
 801bd6e:	b950      	cbnz	r0, 801bd86 <__ssputs_r+0x5c>
 801bd70:	230c      	movs	r3, #12
 801bd72:	f8ca 3000 	str.w	r3, [sl]
 801bd76:	89a3      	ldrh	r3, [r4, #12]
 801bd78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bd7c:	81a3      	strh	r3, [r4, #12]
 801bd7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd86:	6921      	ldr	r1, [r4, #16]
 801bd88:	464a      	mov	r2, r9
 801bd8a:	f7ff f9bd 	bl	801b108 <memcpy>
 801bd8e:	89a3      	ldrh	r3, [r4, #12]
 801bd90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bd94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bd98:	81a3      	strh	r3, [r4, #12]
 801bd9a:	6126      	str	r6, [r4, #16]
 801bd9c:	6165      	str	r5, [r4, #20]
 801bd9e:	444e      	add	r6, r9
 801bda0:	eba5 0509 	sub.w	r5, r5, r9
 801bda4:	6026      	str	r6, [r4, #0]
 801bda6:	60a5      	str	r5, [r4, #8]
 801bda8:	463e      	mov	r6, r7
 801bdaa:	42be      	cmp	r6, r7
 801bdac:	d900      	bls.n	801bdb0 <__ssputs_r+0x86>
 801bdae:	463e      	mov	r6, r7
 801bdb0:	6820      	ldr	r0, [r4, #0]
 801bdb2:	4632      	mov	r2, r6
 801bdb4:	4641      	mov	r1, r8
 801bdb6:	f000 fc3d 	bl	801c634 <memmove>
 801bdba:	68a3      	ldr	r3, [r4, #8]
 801bdbc:	1b9b      	subs	r3, r3, r6
 801bdbe:	60a3      	str	r3, [r4, #8]
 801bdc0:	6823      	ldr	r3, [r4, #0]
 801bdc2:	4433      	add	r3, r6
 801bdc4:	6023      	str	r3, [r4, #0]
 801bdc6:	2000      	movs	r0, #0
 801bdc8:	e7db      	b.n	801bd82 <__ssputs_r+0x58>
 801bdca:	462a      	mov	r2, r5
 801bdcc:	f7ff ff7e 	bl	801bccc <_realloc_r>
 801bdd0:	4606      	mov	r6, r0
 801bdd2:	2800      	cmp	r0, #0
 801bdd4:	d1e1      	bne.n	801bd9a <__ssputs_r+0x70>
 801bdd6:	6921      	ldr	r1, [r4, #16]
 801bdd8:	4650      	mov	r0, sl
 801bdda:	f7ff f9c1 	bl	801b160 <_free_r>
 801bdde:	e7c7      	b.n	801bd70 <__ssputs_r+0x46>

0801bde0 <_svfiprintf_r>:
 801bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bde4:	4698      	mov	r8, r3
 801bde6:	898b      	ldrh	r3, [r1, #12]
 801bde8:	061b      	lsls	r3, r3, #24
 801bdea:	b09d      	sub	sp, #116	; 0x74
 801bdec:	4607      	mov	r7, r0
 801bdee:	460d      	mov	r5, r1
 801bdf0:	4614      	mov	r4, r2
 801bdf2:	d50e      	bpl.n	801be12 <_svfiprintf_r+0x32>
 801bdf4:	690b      	ldr	r3, [r1, #16]
 801bdf6:	b963      	cbnz	r3, 801be12 <_svfiprintf_r+0x32>
 801bdf8:	2140      	movs	r1, #64	; 0x40
 801bdfa:	f7ff fa1d 	bl	801b238 <_malloc_r>
 801bdfe:	6028      	str	r0, [r5, #0]
 801be00:	6128      	str	r0, [r5, #16]
 801be02:	b920      	cbnz	r0, 801be0e <_svfiprintf_r+0x2e>
 801be04:	230c      	movs	r3, #12
 801be06:	603b      	str	r3, [r7, #0]
 801be08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801be0c:	e0d1      	b.n	801bfb2 <_svfiprintf_r+0x1d2>
 801be0e:	2340      	movs	r3, #64	; 0x40
 801be10:	616b      	str	r3, [r5, #20]
 801be12:	2300      	movs	r3, #0
 801be14:	9309      	str	r3, [sp, #36]	; 0x24
 801be16:	2320      	movs	r3, #32
 801be18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801be1c:	f8cd 800c 	str.w	r8, [sp, #12]
 801be20:	2330      	movs	r3, #48	; 0x30
 801be22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801bfcc <_svfiprintf_r+0x1ec>
 801be26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801be2a:	f04f 0901 	mov.w	r9, #1
 801be2e:	4623      	mov	r3, r4
 801be30:	469a      	mov	sl, r3
 801be32:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be36:	b10a      	cbz	r2, 801be3c <_svfiprintf_r+0x5c>
 801be38:	2a25      	cmp	r2, #37	; 0x25
 801be3a:	d1f9      	bne.n	801be30 <_svfiprintf_r+0x50>
 801be3c:	ebba 0b04 	subs.w	fp, sl, r4
 801be40:	d00b      	beq.n	801be5a <_svfiprintf_r+0x7a>
 801be42:	465b      	mov	r3, fp
 801be44:	4622      	mov	r2, r4
 801be46:	4629      	mov	r1, r5
 801be48:	4638      	mov	r0, r7
 801be4a:	f7ff ff6e 	bl	801bd2a <__ssputs_r>
 801be4e:	3001      	adds	r0, #1
 801be50:	f000 80aa 	beq.w	801bfa8 <_svfiprintf_r+0x1c8>
 801be54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801be56:	445a      	add	r2, fp
 801be58:	9209      	str	r2, [sp, #36]	; 0x24
 801be5a:	f89a 3000 	ldrb.w	r3, [sl]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	f000 80a2 	beq.w	801bfa8 <_svfiprintf_r+0x1c8>
 801be64:	2300      	movs	r3, #0
 801be66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801be6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801be6e:	f10a 0a01 	add.w	sl, sl, #1
 801be72:	9304      	str	r3, [sp, #16]
 801be74:	9307      	str	r3, [sp, #28]
 801be76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801be7a:	931a      	str	r3, [sp, #104]	; 0x68
 801be7c:	4654      	mov	r4, sl
 801be7e:	2205      	movs	r2, #5
 801be80:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be84:	4851      	ldr	r0, [pc, #324]	; (801bfcc <_svfiprintf_r+0x1ec>)
 801be86:	f7e4 f9bb 	bl	8000200 <memchr>
 801be8a:	9a04      	ldr	r2, [sp, #16]
 801be8c:	b9d8      	cbnz	r0, 801bec6 <_svfiprintf_r+0xe6>
 801be8e:	06d0      	lsls	r0, r2, #27
 801be90:	bf44      	itt	mi
 801be92:	2320      	movmi	r3, #32
 801be94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801be98:	0711      	lsls	r1, r2, #28
 801be9a:	bf44      	itt	mi
 801be9c:	232b      	movmi	r3, #43	; 0x2b
 801be9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bea2:	f89a 3000 	ldrb.w	r3, [sl]
 801bea6:	2b2a      	cmp	r3, #42	; 0x2a
 801bea8:	d015      	beq.n	801bed6 <_svfiprintf_r+0xf6>
 801beaa:	9a07      	ldr	r2, [sp, #28]
 801beac:	4654      	mov	r4, sl
 801beae:	2000      	movs	r0, #0
 801beb0:	f04f 0c0a 	mov.w	ip, #10
 801beb4:	4621      	mov	r1, r4
 801beb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801beba:	3b30      	subs	r3, #48	; 0x30
 801bebc:	2b09      	cmp	r3, #9
 801bebe:	d94e      	bls.n	801bf5e <_svfiprintf_r+0x17e>
 801bec0:	b1b0      	cbz	r0, 801bef0 <_svfiprintf_r+0x110>
 801bec2:	9207      	str	r2, [sp, #28]
 801bec4:	e014      	b.n	801bef0 <_svfiprintf_r+0x110>
 801bec6:	eba0 0308 	sub.w	r3, r0, r8
 801beca:	fa09 f303 	lsl.w	r3, r9, r3
 801bece:	4313      	orrs	r3, r2
 801bed0:	9304      	str	r3, [sp, #16]
 801bed2:	46a2      	mov	sl, r4
 801bed4:	e7d2      	b.n	801be7c <_svfiprintf_r+0x9c>
 801bed6:	9b03      	ldr	r3, [sp, #12]
 801bed8:	1d19      	adds	r1, r3, #4
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	9103      	str	r1, [sp, #12]
 801bede:	2b00      	cmp	r3, #0
 801bee0:	bfbb      	ittet	lt
 801bee2:	425b      	neglt	r3, r3
 801bee4:	f042 0202 	orrlt.w	r2, r2, #2
 801bee8:	9307      	strge	r3, [sp, #28]
 801beea:	9307      	strlt	r3, [sp, #28]
 801beec:	bfb8      	it	lt
 801beee:	9204      	strlt	r2, [sp, #16]
 801bef0:	7823      	ldrb	r3, [r4, #0]
 801bef2:	2b2e      	cmp	r3, #46	; 0x2e
 801bef4:	d10c      	bne.n	801bf10 <_svfiprintf_r+0x130>
 801bef6:	7863      	ldrb	r3, [r4, #1]
 801bef8:	2b2a      	cmp	r3, #42	; 0x2a
 801befa:	d135      	bne.n	801bf68 <_svfiprintf_r+0x188>
 801befc:	9b03      	ldr	r3, [sp, #12]
 801befe:	1d1a      	adds	r2, r3, #4
 801bf00:	681b      	ldr	r3, [r3, #0]
 801bf02:	9203      	str	r2, [sp, #12]
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	bfb8      	it	lt
 801bf08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801bf0c:	3402      	adds	r4, #2
 801bf0e:	9305      	str	r3, [sp, #20]
 801bf10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801bfdc <_svfiprintf_r+0x1fc>
 801bf14:	7821      	ldrb	r1, [r4, #0]
 801bf16:	2203      	movs	r2, #3
 801bf18:	4650      	mov	r0, sl
 801bf1a:	f7e4 f971 	bl	8000200 <memchr>
 801bf1e:	b140      	cbz	r0, 801bf32 <_svfiprintf_r+0x152>
 801bf20:	2340      	movs	r3, #64	; 0x40
 801bf22:	eba0 000a 	sub.w	r0, r0, sl
 801bf26:	fa03 f000 	lsl.w	r0, r3, r0
 801bf2a:	9b04      	ldr	r3, [sp, #16]
 801bf2c:	4303      	orrs	r3, r0
 801bf2e:	3401      	adds	r4, #1
 801bf30:	9304      	str	r3, [sp, #16]
 801bf32:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf36:	4826      	ldr	r0, [pc, #152]	; (801bfd0 <_svfiprintf_r+0x1f0>)
 801bf38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bf3c:	2206      	movs	r2, #6
 801bf3e:	f7e4 f95f 	bl	8000200 <memchr>
 801bf42:	2800      	cmp	r0, #0
 801bf44:	d038      	beq.n	801bfb8 <_svfiprintf_r+0x1d8>
 801bf46:	4b23      	ldr	r3, [pc, #140]	; (801bfd4 <_svfiprintf_r+0x1f4>)
 801bf48:	bb1b      	cbnz	r3, 801bf92 <_svfiprintf_r+0x1b2>
 801bf4a:	9b03      	ldr	r3, [sp, #12]
 801bf4c:	3307      	adds	r3, #7
 801bf4e:	f023 0307 	bic.w	r3, r3, #7
 801bf52:	3308      	adds	r3, #8
 801bf54:	9303      	str	r3, [sp, #12]
 801bf56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf58:	4433      	add	r3, r6
 801bf5a:	9309      	str	r3, [sp, #36]	; 0x24
 801bf5c:	e767      	b.n	801be2e <_svfiprintf_r+0x4e>
 801bf5e:	fb0c 3202 	mla	r2, ip, r2, r3
 801bf62:	460c      	mov	r4, r1
 801bf64:	2001      	movs	r0, #1
 801bf66:	e7a5      	b.n	801beb4 <_svfiprintf_r+0xd4>
 801bf68:	2300      	movs	r3, #0
 801bf6a:	3401      	adds	r4, #1
 801bf6c:	9305      	str	r3, [sp, #20]
 801bf6e:	4619      	mov	r1, r3
 801bf70:	f04f 0c0a 	mov.w	ip, #10
 801bf74:	4620      	mov	r0, r4
 801bf76:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bf7a:	3a30      	subs	r2, #48	; 0x30
 801bf7c:	2a09      	cmp	r2, #9
 801bf7e:	d903      	bls.n	801bf88 <_svfiprintf_r+0x1a8>
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d0c5      	beq.n	801bf10 <_svfiprintf_r+0x130>
 801bf84:	9105      	str	r1, [sp, #20]
 801bf86:	e7c3      	b.n	801bf10 <_svfiprintf_r+0x130>
 801bf88:	fb0c 2101 	mla	r1, ip, r1, r2
 801bf8c:	4604      	mov	r4, r0
 801bf8e:	2301      	movs	r3, #1
 801bf90:	e7f0      	b.n	801bf74 <_svfiprintf_r+0x194>
 801bf92:	ab03      	add	r3, sp, #12
 801bf94:	9300      	str	r3, [sp, #0]
 801bf96:	462a      	mov	r2, r5
 801bf98:	4b0f      	ldr	r3, [pc, #60]	; (801bfd8 <_svfiprintf_r+0x1f8>)
 801bf9a:	a904      	add	r1, sp, #16
 801bf9c:	4638      	mov	r0, r7
 801bf9e:	f3af 8000 	nop.w
 801bfa2:	1c42      	adds	r2, r0, #1
 801bfa4:	4606      	mov	r6, r0
 801bfa6:	d1d6      	bne.n	801bf56 <_svfiprintf_r+0x176>
 801bfa8:	89ab      	ldrh	r3, [r5, #12]
 801bfaa:	065b      	lsls	r3, r3, #25
 801bfac:	f53f af2c 	bmi.w	801be08 <_svfiprintf_r+0x28>
 801bfb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bfb2:	b01d      	add	sp, #116	; 0x74
 801bfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfb8:	ab03      	add	r3, sp, #12
 801bfba:	9300      	str	r3, [sp, #0]
 801bfbc:	462a      	mov	r2, r5
 801bfbe:	4b06      	ldr	r3, [pc, #24]	; (801bfd8 <_svfiprintf_r+0x1f8>)
 801bfc0:	a904      	add	r1, sp, #16
 801bfc2:	4638      	mov	r0, r7
 801bfc4:	f000 f9d4 	bl	801c370 <_printf_i>
 801bfc8:	e7eb      	b.n	801bfa2 <_svfiprintf_r+0x1c2>
 801bfca:	bf00      	nop
 801bfcc:	0801daaa 	.word	0x0801daaa
 801bfd0:	0801dab4 	.word	0x0801dab4
 801bfd4:	00000000 	.word	0x00000000
 801bfd8:	0801bd2b 	.word	0x0801bd2b
 801bfdc:	0801dab0 	.word	0x0801dab0

0801bfe0 <__sfputc_r>:
 801bfe0:	6893      	ldr	r3, [r2, #8]
 801bfe2:	3b01      	subs	r3, #1
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	b410      	push	{r4}
 801bfe8:	6093      	str	r3, [r2, #8]
 801bfea:	da08      	bge.n	801bffe <__sfputc_r+0x1e>
 801bfec:	6994      	ldr	r4, [r2, #24]
 801bfee:	42a3      	cmp	r3, r4
 801bff0:	db01      	blt.n	801bff6 <__sfputc_r+0x16>
 801bff2:	290a      	cmp	r1, #10
 801bff4:	d103      	bne.n	801bffe <__sfputc_r+0x1e>
 801bff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bffa:	f7ff bc03 	b.w	801b804 <__swbuf_r>
 801bffe:	6813      	ldr	r3, [r2, #0]
 801c000:	1c58      	adds	r0, r3, #1
 801c002:	6010      	str	r0, [r2, #0]
 801c004:	7019      	strb	r1, [r3, #0]
 801c006:	4608      	mov	r0, r1
 801c008:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c00c:	4770      	bx	lr

0801c00e <__sfputs_r>:
 801c00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c010:	4606      	mov	r6, r0
 801c012:	460f      	mov	r7, r1
 801c014:	4614      	mov	r4, r2
 801c016:	18d5      	adds	r5, r2, r3
 801c018:	42ac      	cmp	r4, r5
 801c01a:	d101      	bne.n	801c020 <__sfputs_r+0x12>
 801c01c:	2000      	movs	r0, #0
 801c01e:	e007      	b.n	801c030 <__sfputs_r+0x22>
 801c020:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c024:	463a      	mov	r2, r7
 801c026:	4630      	mov	r0, r6
 801c028:	f7ff ffda 	bl	801bfe0 <__sfputc_r>
 801c02c:	1c43      	adds	r3, r0, #1
 801c02e:	d1f3      	bne.n	801c018 <__sfputs_r+0xa>
 801c030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c034 <_vfiprintf_r>:
 801c034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c038:	460d      	mov	r5, r1
 801c03a:	b09d      	sub	sp, #116	; 0x74
 801c03c:	4614      	mov	r4, r2
 801c03e:	4698      	mov	r8, r3
 801c040:	4606      	mov	r6, r0
 801c042:	b118      	cbz	r0, 801c04c <_vfiprintf_r+0x18>
 801c044:	6983      	ldr	r3, [r0, #24]
 801c046:	b90b      	cbnz	r3, 801c04c <_vfiprintf_r+0x18>
 801c048:	f7fe fed2 	bl	801adf0 <__sinit>
 801c04c:	4b89      	ldr	r3, [pc, #548]	; (801c274 <_vfiprintf_r+0x240>)
 801c04e:	429d      	cmp	r5, r3
 801c050:	d11b      	bne.n	801c08a <_vfiprintf_r+0x56>
 801c052:	6875      	ldr	r5, [r6, #4]
 801c054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c056:	07d9      	lsls	r1, r3, #31
 801c058:	d405      	bmi.n	801c066 <_vfiprintf_r+0x32>
 801c05a:	89ab      	ldrh	r3, [r5, #12]
 801c05c:	059a      	lsls	r2, r3, #22
 801c05e:	d402      	bmi.n	801c066 <_vfiprintf_r+0x32>
 801c060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c062:	f7ff f83e 	bl	801b0e2 <__retarget_lock_acquire_recursive>
 801c066:	89ab      	ldrh	r3, [r5, #12]
 801c068:	071b      	lsls	r3, r3, #28
 801c06a:	d501      	bpl.n	801c070 <_vfiprintf_r+0x3c>
 801c06c:	692b      	ldr	r3, [r5, #16]
 801c06e:	b9eb      	cbnz	r3, 801c0ac <_vfiprintf_r+0x78>
 801c070:	4629      	mov	r1, r5
 801c072:	4630      	mov	r0, r6
 801c074:	f7ff fc2a 	bl	801b8cc <__swsetup_r>
 801c078:	b1c0      	cbz	r0, 801c0ac <_vfiprintf_r+0x78>
 801c07a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c07c:	07dc      	lsls	r4, r3, #31
 801c07e:	d50e      	bpl.n	801c09e <_vfiprintf_r+0x6a>
 801c080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c084:	b01d      	add	sp, #116	; 0x74
 801c086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c08a:	4b7b      	ldr	r3, [pc, #492]	; (801c278 <_vfiprintf_r+0x244>)
 801c08c:	429d      	cmp	r5, r3
 801c08e:	d101      	bne.n	801c094 <_vfiprintf_r+0x60>
 801c090:	68b5      	ldr	r5, [r6, #8]
 801c092:	e7df      	b.n	801c054 <_vfiprintf_r+0x20>
 801c094:	4b79      	ldr	r3, [pc, #484]	; (801c27c <_vfiprintf_r+0x248>)
 801c096:	429d      	cmp	r5, r3
 801c098:	bf08      	it	eq
 801c09a:	68f5      	ldreq	r5, [r6, #12]
 801c09c:	e7da      	b.n	801c054 <_vfiprintf_r+0x20>
 801c09e:	89ab      	ldrh	r3, [r5, #12]
 801c0a0:	0598      	lsls	r0, r3, #22
 801c0a2:	d4ed      	bmi.n	801c080 <_vfiprintf_r+0x4c>
 801c0a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c0a6:	f7ff f81d 	bl	801b0e4 <__retarget_lock_release_recursive>
 801c0aa:	e7e9      	b.n	801c080 <_vfiprintf_r+0x4c>
 801c0ac:	2300      	movs	r3, #0
 801c0ae:	9309      	str	r3, [sp, #36]	; 0x24
 801c0b0:	2320      	movs	r3, #32
 801c0b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c0b6:	f8cd 800c 	str.w	r8, [sp, #12]
 801c0ba:	2330      	movs	r3, #48	; 0x30
 801c0bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c280 <_vfiprintf_r+0x24c>
 801c0c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c0c4:	f04f 0901 	mov.w	r9, #1
 801c0c8:	4623      	mov	r3, r4
 801c0ca:	469a      	mov	sl, r3
 801c0cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c0d0:	b10a      	cbz	r2, 801c0d6 <_vfiprintf_r+0xa2>
 801c0d2:	2a25      	cmp	r2, #37	; 0x25
 801c0d4:	d1f9      	bne.n	801c0ca <_vfiprintf_r+0x96>
 801c0d6:	ebba 0b04 	subs.w	fp, sl, r4
 801c0da:	d00b      	beq.n	801c0f4 <_vfiprintf_r+0xc0>
 801c0dc:	465b      	mov	r3, fp
 801c0de:	4622      	mov	r2, r4
 801c0e0:	4629      	mov	r1, r5
 801c0e2:	4630      	mov	r0, r6
 801c0e4:	f7ff ff93 	bl	801c00e <__sfputs_r>
 801c0e8:	3001      	adds	r0, #1
 801c0ea:	f000 80aa 	beq.w	801c242 <_vfiprintf_r+0x20e>
 801c0ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c0f0:	445a      	add	r2, fp
 801c0f2:	9209      	str	r2, [sp, #36]	; 0x24
 801c0f4:	f89a 3000 	ldrb.w	r3, [sl]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	f000 80a2 	beq.w	801c242 <_vfiprintf_r+0x20e>
 801c0fe:	2300      	movs	r3, #0
 801c100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c108:	f10a 0a01 	add.w	sl, sl, #1
 801c10c:	9304      	str	r3, [sp, #16]
 801c10e:	9307      	str	r3, [sp, #28]
 801c110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c114:	931a      	str	r3, [sp, #104]	; 0x68
 801c116:	4654      	mov	r4, sl
 801c118:	2205      	movs	r2, #5
 801c11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c11e:	4858      	ldr	r0, [pc, #352]	; (801c280 <_vfiprintf_r+0x24c>)
 801c120:	f7e4 f86e 	bl	8000200 <memchr>
 801c124:	9a04      	ldr	r2, [sp, #16]
 801c126:	b9d8      	cbnz	r0, 801c160 <_vfiprintf_r+0x12c>
 801c128:	06d1      	lsls	r1, r2, #27
 801c12a:	bf44      	itt	mi
 801c12c:	2320      	movmi	r3, #32
 801c12e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c132:	0713      	lsls	r3, r2, #28
 801c134:	bf44      	itt	mi
 801c136:	232b      	movmi	r3, #43	; 0x2b
 801c138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c13c:	f89a 3000 	ldrb.w	r3, [sl]
 801c140:	2b2a      	cmp	r3, #42	; 0x2a
 801c142:	d015      	beq.n	801c170 <_vfiprintf_r+0x13c>
 801c144:	9a07      	ldr	r2, [sp, #28]
 801c146:	4654      	mov	r4, sl
 801c148:	2000      	movs	r0, #0
 801c14a:	f04f 0c0a 	mov.w	ip, #10
 801c14e:	4621      	mov	r1, r4
 801c150:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c154:	3b30      	subs	r3, #48	; 0x30
 801c156:	2b09      	cmp	r3, #9
 801c158:	d94e      	bls.n	801c1f8 <_vfiprintf_r+0x1c4>
 801c15a:	b1b0      	cbz	r0, 801c18a <_vfiprintf_r+0x156>
 801c15c:	9207      	str	r2, [sp, #28]
 801c15e:	e014      	b.n	801c18a <_vfiprintf_r+0x156>
 801c160:	eba0 0308 	sub.w	r3, r0, r8
 801c164:	fa09 f303 	lsl.w	r3, r9, r3
 801c168:	4313      	orrs	r3, r2
 801c16a:	9304      	str	r3, [sp, #16]
 801c16c:	46a2      	mov	sl, r4
 801c16e:	e7d2      	b.n	801c116 <_vfiprintf_r+0xe2>
 801c170:	9b03      	ldr	r3, [sp, #12]
 801c172:	1d19      	adds	r1, r3, #4
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	9103      	str	r1, [sp, #12]
 801c178:	2b00      	cmp	r3, #0
 801c17a:	bfbb      	ittet	lt
 801c17c:	425b      	neglt	r3, r3
 801c17e:	f042 0202 	orrlt.w	r2, r2, #2
 801c182:	9307      	strge	r3, [sp, #28]
 801c184:	9307      	strlt	r3, [sp, #28]
 801c186:	bfb8      	it	lt
 801c188:	9204      	strlt	r2, [sp, #16]
 801c18a:	7823      	ldrb	r3, [r4, #0]
 801c18c:	2b2e      	cmp	r3, #46	; 0x2e
 801c18e:	d10c      	bne.n	801c1aa <_vfiprintf_r+0x176>
 801c190:	7863      	ldrb	r3, [r4, #1]
 801c192:	2b2a      	cmp	r3, #42	; 0x2a
 801c194:	d135      	bne.n	801c202 <_vfiprintf_r+0x1ce>
 801c196:	9b03      	ldr	r3, [sp, #12]
 801c198:	1d1a      	adds	r2, r3, #4
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	9203      	str	r2, [sp, #12]
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	bfb8      	it	lt
 801c1a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c1a6:	3402      	adds	r4, #2
 801c1a8:	9305      	str	r3, [sp, #20]
 801c1aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c290 <_vfiprintf_r+0x25c>
 801c1ae:	7821      	ldrb	r1, [r4, #0]
 801c1b0:	2203      	movs	r2, #3
 801c1b2:	4650      	mov	r0, sl
 801c1b4:	f7e4 f824 	bl	8000200 <memchr>
 801c1b8:	b140      	cbz	r0, 801c1cc <_vfiprintf_r+0x198>
 801c1ba:	2340      	movs	r3, #64	; 0x40
 801c1bc:	eba0 000a 	sub.w	r0, r0, sl
 801c1c0:	fa03 f000 	lsl.w	r0, r3, r0
 801c1c4:	9b04      	ldr	r3, [sp, #16]
 801c1c6:	4303      	orrs	r3, r0
 801c1c8:	3401      	adds	r4, #1
 801c1ca:	9304      	str	r3, [sp, #16]
 801c1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1d0:	482c      	ldr	r0, [pc, #176]	; (801c284 <_vfiprintf_r+0x250>)
 801c1d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c1d6:	2206      	movs	r2, #6
 801c1d8:	f7e4 f812 	bl	8000200 <memchr>
 801c1dc:	2800      	cmp	r0, #0
 801c1de:	d03f      	beq.n	801c260 <_vfiprintf_r+0x22c>
 801c1e0:	4b29      	ldr	r3, [pc, #164]	; (801c288 <_vfiprintf_r+0x254>)
 801c1e2:	bb1b      	cbnz	r3, 801c22c <_vfiprintf_r+0x1f8>
 801c1e4:	9b03      	ldr	r3, [sp, #12]
 801c1e6:	3307      	adds	r3, #7
 801c1e8:	f023 0307 	bic.w	r3, r3, #7
 801c1ec:	3308      	adds	r3, #8
 801c1ee:	9303      	str	r3, [sp, #12]
 801c1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1f2:	443b      	add	r3, r7
 801c1f4:	9309      	str	r3, [sp, #36]	; 0x24
 801c1f6:	e767      	b.n	801c0c8 <_vfiprintf_r+0x94>
 801c1f8:	fb0c 3202 	mla	r2, ip, r2, r3
 801c1fc:	460c      	mov	r4, r1
 801c1fe:	2001      	movs	r0, #1
 801c200:	e7a5      	b.n	801c14e <_vfiprintf_r+0x11a>
 801c202:	2300      	movs	r3, #0
 801c204:	3401      	adds	r4, #1
 801c206:	9305      	str	r3, [sp, #20]
 801c208:	4619      	mov	r1, r3
 801c20a:	f04f 0c0a 	mov.w	ip, #10
 801c20e:	4620      	mov	r0, r4
 801c210:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c214:	3a30      	subs	r2, #48	; 0x30
 801c216:	2a09      	cmp	r2, #9
 801c218:	d903      	bls.n	801c222 <_vfiprintf_r+0x1ee>
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d0c5      	beq.n	801c1aa <_vfiprintf_r+0x176>
 801c21e:	9105      	str	r1, [sp, #20]
 801c220:	e7c3      	b.n	801c1aa <_vfiprintf_r+0x176>
 801c222:	fb0c 2101 	mla	r1, ip, r1, r2
 801c226:	4604      	mov	r4, r0
 801c228:	2301      	movs	r3, #1
 801c22a:	e7f0      	b.n	801c20e <_vfiprintf_r+0x1da>
 801c22c:	ab03      	add	r3, sp, #12
 801c22e:	9300      	str	r3, [sp, #0]
 801c230:	462a      	mov	r2, r5
 801c232:	4b16      	ldr	r3, [pc, #88]	; (801c28c <_vfiprintf_r+0x258>)
 801c234:	a904      	add	r1, sp, #16
 801c236:	4630      	mov	r0, r6
 801c238:	f3af 8000 	nop.w
 801c23c:	4607      	mov	r7, r0
 801c23e:	1c78      	adds	r0, r7, #1
 801c240:	d1d6      	bne.n	801c1f0 <_vfiprintf_r+0x1bc>
 801c242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c244:	07d9      	lsls	r1, r3, #31
 801c246:	d405      	bmi.n	801c254 <_vfiprintf_r+0x220>
 801c248:	89ab      	ldrh	r3, [r5, #12]
 801c24a:	059a      	lsls	r2, r3, #22
 801c24c:	d402      	bmi.n	801c254 <_vfiprintf_r+0x220>
 801c24e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c250:	f7fe ff48 	bl	801b0e4 <__retarget_lock_release_recursive>
 801c254:	89ab      	ldrh	r3, [r5, #12]
 801c256:	065b      	lsls	r3, r3, #25
 801c258:	f53f af12 	bmi.w	801c080 <_vfiprintf_r+0x4c>
 801c25c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c25e:	e711      	b.n	801c084 <_vfiprintf_r+0x50>
 801c260:	ab03      	add	r3, sp, #12
 801c262:	9300      	str	r3, [sp, #0]
 801c264:	462a      	mov	r2, r5
 801c266:	4b09      	ldr	r3, [pc, #36]	; (801c28c <_vfiprintf_r+0x258>)
 801c268:	a904      	add	r1, sp, #16
 801c26a:	4630      	mov	r0, r6
 801c26c:	f000 f880 	bl	801c370 <_printf_i>
 801c270:	e7e4      	b.n	801c23c <_vfiprintf_r+0x208>
 801c272:	bf00      	nop
 801c274:	0801d9b8 	.word	0x0801d9b8
 801c278:	0801d9d8 	.word	0x0801d9d8
 801c27c:	0801d998 	.word	0x0801d998
 801c280:	0801daaa 	.word	0x0801daaa
 801c284:	0801dab4 	.word	0x0801dab4
 801c288:	00000000 	.word	0x00000000
 801c28c:	0801c00f 	.word	0x0801c00f
 801c290:	0801dab0 	.word	0x0801dab0

0801c294 <_printf_common>:
 801c294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c298:	4616      	mov	r6, r2
 801c29a:	4699      	mov	r9, r3
 801c29c:	688a      	ldr	r2, [r1, #8]
 801c29e:	690b      	ldr	r3, [r1, #16]
 801c2a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c2a4:	4293      	cmp	r3, r2
 801c2a6:	bfb8      	it	lt
 801c2a8:	4613      	movlt	r3, r2
 801c2aa:	6033      	str	r3, [r6, #0]
 801c2ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c2b0:	4607      	mov	r7, r0
 801c2b2:	460c      	mov	r4, r1
 801c2b4:	b10a      	cbz	r2, 801c2ba <_printf_common+0x26>
 801c2b6:	3301      	adds	r3, #1
 801c2b8:	6033      	str	r3, [r6, #0]
 801c2ba:	6823      	ldr	r3, [r4, #0]
 801c2bc:	0699      	lsls	r1, r3, #26
 801c2be:	bf42      	ittt	mi
 801c2c0:	6833      	ldrmi	r3, [r6, #0]
 801c2c2:	3302      	addmi	r3, #2
 801c2c4:	6033      	strmi	r3, [r6, #0]
 801c2c6:	6825      	ldr	r5, [r4, #0]
 801c2c8:	f015 0506 	ands.w	r5, r5, #6
 801c2cc:	d106      	bne.n	801c2dc <_printf_common+0x48>
 801c2ce:	f104 0a19 	add.w	sl, r4, #25
 801c2d2:	68e3      	ldr	r3, [r4, #12]
 801c2d4:	6832      	ldr	r2, [r6, #0]
 801c2d6:	1a9b      	subs	r3, r3, r2
 801c2d8:	42ab      	cmp	r3, r5
 801c2da:	dc26      	bgt.n	801c32a <_printf_common+0x96>
 801c2dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c2e0:	1e13      	subs	r3, r2, #0
 801c2e2:	6822      	ldr	r2, [r4, #0]
 801c2e4:	bf18      	it	ne
 801c2e6:	2301      	movne	r3, #1
 801c2e8:	0692      	lsls	r2, r2, #26
 801c2ea:	d42b      	bmi.n	801c344 <_printf_common+0xb0>
 801c2ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c2f0:	4649      	mov	r1, r9
 801c2f2:	4638      	mov	r0, r7
 801c2f4:	47c0      	blx	r8
 801c2f6:	3001      	adds	r0, #1
 801c2f8:	d01e      	beq.n	801c338 <_printf_common+0xa4>
 801c2fa:	6823      	ldr	r3, [r4, #0]
 801c2fc:	68e5      	ldr	r5, [r4, #12]
 801c2fe:	6832      	ldr	r2, [r6, #0]
 801c300:	f003 0306 	and.w	r3, r3, #6
 801c304:	2b04      	cmp	r3, #4
 801c306:	bf08      	it	eq
 801c308:	1aad      	subeq	r5, r5, r2
 801c30a:	68a3      	ldr	r3, [r4, #8]
 801c30c:	6922      	ldr	r2, [r4, #16]
 801c30e:	bf0c      	ite	eq
 801c310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c314:	2500      	movne	r5, #0
 801c316:	4293      	cmp	r3, r2
 801c318:	bfc4      	itt	gt
 801c31a:	1a9b      	subgt	r3, r3, r2
 801c31c:	18ed      	addgt	r5, r5, r3
 801c31e:	2600      	movs	r6, #0
 801c320:	341a      	adds	r4, #26
 801c322:	42b5      	cmp	r5, r6
 801c324:	d11a      	bne.n	801c35c <_printf_common+0xc8>
 801c326:	2000      	movs	r0, #0
 801c328:	e008      	b.n	801c33c <_printf_common+0xa8>
 801c32a:	2301      	movs	r3, #1
 801c32c:	4652      	mov	r2, sl
 801c32e:	4649      	mov	r1, r9
 801c330:	4638      	mov	r0, r7
 801c332:	47c0      	blx	r8
 801c334:	3001      	adds	r0, #1
 801c336:	d103      	bne.n	801c340 <_printf_common+0xac>
 801c338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c340:	3501      	adds	r5, #1
 801c342:	e7c6      	b.n	801c2d2 <_printf_common+0x3e>
 801c344:	18e1      	adds	r1, r4, r3
 801c346:	1c5a      	adds	r2, r3, #1
 801c348:	2030      	movs	r0, #48	; 0x30
 801c34a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c34e:	4422      	add	r2, r4
 801c350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c358:	3302      	adds	r3, #2
 801c35a:	e7c7      	b.n	801c2ec <_printf_common+0x58>
 801c35c:	2301      	movs	r3, #1
 801c35e:	4622      	mov	r2, r4
 801c360:	4649      	mov	r1, r9
 801c362:	4638      	mov	r0, r7
 801c364:	47c0      	blx	r8
 801c366:	3001      	adds	r0, #1
 801c368:	d0e6      	beq.n	801c338 <_printf_common+0xa4>
 801c36a:	3601      	adds	r6, #1
 801c36c:	e7d9      	b.n	801c322 <_printf_common+0x8e>
	...

0801c370 <_printf_i>:
 801c370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c374:	7e0f      	ldrb	r7, [r1, #24]
 801c376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c378:	2f78      	cmp	r7, #120	; 0x78
 801c37a:	4691      	mov	r9, r2
 801c37c:	4680      	mov	r8, r0
 801c37e:	460c      	mov	r4, r1
 801c380:	469a      	mov	sl, r3
 801c382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c386:	d807      	bhi.n	801c398 <_printf_i+0x28>
 801c388:	2f62      	cmp	r7, #98	; 0x62
 801c38a:	d80a      	bhi.n	801c3a2 <_printf_i+0x32>
 801c38c:	2f00      	cmp	r7, #0
 801c38e:	f000 80d8 	beq.w	801c542 <_printf_i+0x1d2>
 801c392:	2f58      	cmp	r7, #88	; 0x58
 801c394:	f000 80a3 	beq.w	801c4de <_printf_i+0x16e>
 801c398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c39c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c3a0:	e03a      	b.n	801c418 <_printf_i+0xa8>
 801c3a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c3a6:	2b15      	cmp	r3, #21
 801c3a8:	d8f6      	bhi.n	801c398 <_printf_i+0x28>
 801c3aa:	a101      	add	r1, pc, #4	; (adr r1, 801c3b0 <_printf_i+0x40>)
 801c3ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c3b0:	0801c409 	.word	0x0801c409
 801c3b4:	0801c41d 	.word	0x0801c41d
 801c3b8:	0801c399 	.word	0x0801c399
 801c3bc:	0801c399 	.word	0x0801c399
 801c3c0:	0801c399 	.word	0x0801c399
 801c3c4:	0801c399 	.word	0x0801c399
 801c3c8:	0801c41d 	.word	0x0801c41d
 801c3cc:	0801c399 	.word	0x0801c399
 801c3d0:	0801c399 	.word	0x0801c399
 801c3d4:	0801c399 	.word	0x0801c399
 801c3d8:	0801c399 	.word	0x0801c399
 801c3dc:	0801c529 	.word	0x0801c529
 801c3e0:	0801c44d 	.word	0x0801c44d
 801c3e4:	0801c50b 	.word	0x0801c50b
 801c3e8:	0801c399 	.word	0x0801c399
 801c3ec:	0801c399 	.word	0x0801c399
 801c3f0:	0801c54b 	.word	0x0801c54b
 801c3f4:	0801c399 	.word	0x0801c399
 801c3f8:	0801c44d 	.word	0x0801c44d
 801c3fc:	0801c399 	.word	0x0801c399
 801c400:	0801c399 	.word	0x0801c399
 801c404:	0801c513 	.word	0x0801c513
 801c408:	682b      	ldr	r3, [r5, #0]
 801c40a:	1d1a      	adds	r2, r3, #4
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	602a      	str	r2, [r5, #0]
 801c410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c418:	2301      	movs	r3, #1
 801c41a:	e0a3      	b.n	801c564 <_printf_i+0x1f4>
 801c41c:	6820      	ldr	r0, [r4, #0]
 801c41e:	6829      	ldr	r1, [r5, #0]
 801c420:	0606      	lsls	r6, r0, #24
 801c422:	f101 0304 	add.w	r3, r1, #4
 801c426:	d50a      	bpl.n	801c43e <_printf_i+0xce>
 801c428:	680e      	ldr	r6, [r1, #0]
 801c42a:	602b      	str	r3, [r5, #0]
 801c42c:	2e00      	cmp	r6, #0
 801c42e:	da03      	bge.n	801c438 <_printf_i+0xc8>
 801c430:	232d      	movs	r3, #45	; 0x2d
 801c432:	4276      	negs	r6, r6
 801c434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c438:	485e      	ldr	r0, [pc, #376]	; (801c5b4 <_printf_i+0x244>)
 801c43a:	230a      	movs	r3, #10
 801c43c:	e019      	b.n	801c472 <_printf_i+0x102>
 801c43e:	680e      	ldr	r6, [r1, #0]
 801c440:	602b      	str	r3, [r5, #0]
 801c442:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c446:	bf18      	it	ne
 801c448:	b236      	sxthne	r6, r6
 801c44a:	e7ef      	b.n	801c42c <_printf_i+0xbc>
 801c44c:	682b      	ldr	r3, [r5, #0]
 801c44e:	6820      	ldr	r0, [r4, #0]
 801c450:	1d19      	adds	r1, r3, #4
 801c452:	6029      	str	r1, [r5, #0]
 801c454:	0601      	lsls	r1, r0, #24
 801c456:	d501      	bpl.n	801c45c <_printf_i+0xec>
 801c458:	681e      	ldr	r6, [r3, #0]
 801c45a:	e002      	b.n	801c462 <_printf_i+0xf2>
 801c45c:	0646      	lsls	r6, r0, #25
 801c45e:	d5fb      	bpl.n	801c458 <_printf_i+0xe8>
 801c460:	881e      	ldrh	r6, [r3, #0]
 801c462:	4854      	ldr	r0, [pc, #336]	; (801c5b4 <_printf_i+0x244>)
 801c464:	2f6f      	cmp	r7, #111	; 0x6f
 801c466:	bf0c      	ite	eq
 801c468:	2308      	moveq	r3, #8
 801c46a:	230a      	movne	r3, #10
 801c46c:	2100      	movs	r1, #0
 801c46e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c472:	6865      	ldr	r5, [r4, #4]
 801c474:	60a5      	str	r5, [r4, #8]
 801c476:	2d00      	cmp	r5, #0
 801c478:	bfa2      	ittt	ge
 801c47a:	6821      	ldrge	r1, [r4, #0]
 801c47c:	f021 0104 	bicge.w	r1, r1, #4
 801c480:	6021      	strge	r1, [r4, #0]
 801c482:	b90e      	cbnz	r6, 801c488 <_printf_i+0x118>
 801c484:	2d00      	cmp	r5, #0
 801c486:	d04d      	beq.n	801c524 <_printf_i+0x1b4>
 801c488:	4615      	mov	r5, r2
 801c48a:	fbb6 f1f3 	udiv	r1, r6, r3
 801c48e:	fb03 6711 	mls	r7, r3, r1, r6
 801c492:	5dc7      	ldrb	r7, [r0, r7]
 801c494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c498:	4637      	mov	r7, r6
 801c49a:	42bb      	cmp	r3, r7
 801c49c:	460e      	mov	r6, r1
 801c49e:	d9f4      	bls.n	801c48a <_printf_i+0x11a>
 801c4a0:	2b08      	cmp	r3, #8
 801c4a2:	d10b      	bne.n	801c4bc <_printf_i+0x14c>
 801c4a4:	6823      	ldr	r3, [r4, #0]
 801c4a6:	07de      	lsls	r6, r3, #31
 801c4a8:	d508      	bpl.n	801c4bc <_printf_i+0x14c>
 801c4aa:	6923      	ldr	r3, [r4, #16]
 801c4ac:	6861      	ldr	r1, [r4, #4]
 801c4ae:	4299      	cmp	r1, r3
 801c4b0:	bfde      	ittt	le
 801c4b2:	2330      	movle	r3, #48	; 0x30
 801c4b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c4b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801c4bc:	1b52      	subs	r2, r2, r5
 801c4be:	6122      	str	r2, [r4, #16]
 801c4c0:	f8cd a000 	str.w	sl, [sp]
 801c4c4:	464b      	mov	r3, r9
 801c4c6:	aa03      	add	r2, sp, #12
 801c4c8:	4621      	mov	r1, r4
 801c4ca:	4640      	mov	r0, r8
 801c4cc:	f7ff fee2 	bl	801c294 <_printf_common>
 801c4d0:	3001      	adds	r0, #1
 801c4d2:	d14c      	bne.n	801c56e <_printf_i+0x1fe>
 801c4d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c4d8:	b004      	add	sp, #16
 801c4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4de:	4835      	ldr	r0, [pc, #212]	; (801c5b4 <_printf_i+0x244>)
 801c4e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c4e4:	6829      	ldr	r1, [r5, #0]
 801c4e6:	6823      	ldr	r3, [r4, #0]
 801c4e8:	f851 6b04 	ldr.w	r6, [r1], #4
 801c4ec:	6029      	str	r1, [r5, #0]
 801c4ee:	061d      	lsls	r5, r3, #24
 801c4f0:	d514      	bpl.n	801c51c <_printf_i+0x1ac>
 801c4f2:	07df      	lsls	r7, r3, #31
 801c4f4:	bf44      	itt	mi
 801c4f6:	f043 0320 	orrmi.w	r3, r3, #32
 801c4fa:	6023      	strmi	r3, [r4, #0]
 801c4fc:	b91e      	cbnz	r6, 801c506 <_printf_i+0x196>
 801c4fe:	6823      	ldr	r3, [r4, #0]
 801c500:	f023 0320 	bic.w	r3, r3, #32
 801c504:	6023      	str	r3, [r4, #0]
 801c506:	2310      	movs	r3, #16
 801c508:	e7b0      	b.n	801c46c <_printf_i+0xfc>
 801c50a:	6823      	ldr	r3, [r4, #0]
 801c50c:	f043 0320 	orr.w	r3, r3, #32
 801c510:	6023      	str	r3, [r4, #0]
 801c512:	2378      	movs	r3, #120	; 0x78
 801c514:	4828      	ldr	r0, [pc, #160]	; (801c5b8 <_printf_i+0x248>)
 801c516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c51a:	e7e3      	b.n	801c4e4 <_printf_i+0x174>
 801c51c:	0659      	lsls	r1, r3, #25
 801c51e:	bf48      	it	mi
 801c520:	b2b6      	uxthmi	r6, r6
 801c522:	e7e6      	b.n	801c4f2 <_printf_i+0x182>
 801c524:	4615      	mov	r5, r2
 801c526:	e7bb      	b.n	801c4a0 <_printf_i+0x130>
 801c528:	682b      	ldr	r3, [r5, #0]
 801c52a:	6826      	ldr	r6, [r4, #0]
 801c52c:	6961      	ldr	r1, [r4, #20]
 801c52e:	1d18      	adds	r0, r3, #4
 801c530:	6028      	str	r0, [r5, #0]
 801c532:	0635      	lsls	r5, r6, #24
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	d501      	bpl.n	801c53c <_printf_i+0x1cc>
 801c538:	6019      	str	r1, [r3, #0]
 801c53a:	e002      	b.n	801c542 <_printf_i+0x1d2>
 801c53c:	0670      	lsls	r0, r6, #25
 801c53e:	d5fb      	bpl.n	801c538 <_printf_i+0x1c8>
 801c540:	8019      	strh	r1, [r3, #0]
 801c542:	2300      	movs	r3, #0
 801c544:	6123      	str	r3, [r4, #16]
 801c546:	4615      	mov	r5, r2
 801c548:	e7ba      	b.n	801c4c0 <_printf_i+0x150>
 801c54a:	682b      	ldr	r3, [r5, #0]
 801c54c:	1d1a      	adds	r2, r3, #4
 801c54e:	602a      	str	r2, [r5, #0]
 801c550:	681d      	ldr	r5, [r3, #0]
 801c552:	6862      	ldr	r2, [r4, #4]
 801c554:	2100      	movs	r1, #0
 801c556:	4628      	mov	r0, r5
 801c558:	f7e3 fe52 	bl	8000200 <memchr>
 801c55c:	b108      	cbz	r0, 801c562 <_printf_i+0x1f2>
 801c55e:	1b40      	subs	r0, r0, r5
 801c560:	6060      	str	r0, [r4, #4]
 801c562:	6863      	ldr	r3, [r4, #4]
 801c564:	6123      	str	r3, [r4, #16]
 801c566:	2300      	movs	r3, #0
 801c568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c56c:	e7a8      	b.n	801c4c0 <_printf_i+0x150>
 801c56e:	6923      	ldr	r3, [r4, #16]
 801c570:	462a      	mov	r2, r5
 801c572:	4649      	mov	r1, r9
 801c574:	4640      	mov	r0, r8
 801c576:	47d0      	blx	sl
 801c578:	3001      	adds	r0, #1
 801c57a:	d0ab      	beq.n	801c4d4 <_printf_i+0x164>
 801c57c:	6823      	ldr	r3, [r4, #0]
 801c57e:	079b      	lsls	r3, r3, #30
 801c580:	d413      	bmi.n	801c5aa <_printf_i+0x23a>
 801c582:	68e0      	ldr	r0, [r4, #12]
 801c584:	9b03      	ldr	r3, [sp, #12]
 801c586:	4298      	cmp	r0, r3
 801c588:	bfb8      	it	lt
 801c58a:	4618      	movlt	r0, r3
 801c58c:	e7a4      	b.n	801c4d8 <_printf_i+0x168>
 801c58e:	2301      	movs	r3, #1
 801c590:	4632      	mov	r2, r6
 801c592:	4649      	mov	r1, r9
 801c594:	4640      	mov	r0, r8
 801c596:	47d0      	blx	sl
 801c598:	3001      	adds	r0, #1
 801c59a:	d09b      	beq.n	801c4d4 <_printf_i+0x164>
 801c59c:	3501      	adds	r5, #1
 801c59e:	68e3      	ldr	r3, [r4, #12]
 801c5a0:	9903      	ldr	r1, [sp, #12]
 801c5a2:	1a5b      	subs	r3, r3, r1
 801c5a4:	42ab      	cmp	r3, r5
 801c5a6:	dcf2      	bgt.n	801c58e <_printf_i+0x21e>
 801c5a8:	e7eb      	b.n	801c582 <_printf_i+0x212>
 801c5aa:	2500      	movs	r5, #0
 801c5ac:	f104 0619 	add.w	r6, r4, #25
 801c5b0:	e7f5      	b.n	801c59e <_printf_i+0x22e>
 801c5b2:	bf00      	nop
 801c5b4:	0801dabb 	.word	0x0801dabb
 801c5b8:	0801dacc 	.word	0x0801dacc

0801c5bc <_read_r>:
 801c5bc:	b538      	push	{r3, r4, r5, lr}
 801c5be:	4d07      	ldr	r5, [pc, #28]	; (801c5dc <_read_r+0x20>)
 801c5c0:	4604      	mov	r4, r0
 801c5c2:	4608      	mov	r0, r1
 801c5c4:	4611      	mov	r1, r2
 801c5c6:	2200      	movs	r2, #0
 801c5c8:	602a      	str	r2, [r5, #0]
 801c5ca:	461a      	mov	r2, r3
 801c5cc:	f7e5 ff90 	bl	80024f0 <_read>
 801c5d0:	1c43      	adds	r3, r0, #1
 801c5d2:	d102      	bne.n	801c5da <_read_r+0x1e>
 801c5d4:	682b      	ldr	r3, [r5, #0]
 801c5d6:	b103      	cbz	r3, 801c5da <_read_r+0x1e>
 801c5d8:	6023      	str	r3, [r4, #0]
 801c5da:	bd38      	pop	{r3, r4, r5, pc}
 801c5dc:	2001630c 	.word	0x2001630c

0801c5e0 <abort>:
 801c5e0:	b508      	push	{r3, lr}
 801c5e2:	2006      	movs	r0, #6
 801c5e4:	f000 f870 	bl	801c6c8 <raise>
 801c5e8:	2001      	movs	r0, #1
 801c5ea:	f7e5 ff77 	bl	80024dc <_exit>
	...

0801c5f0 <_fstat_r>:
 801c5f0:	b538      	push	{r3, r4, r5, lr}
 801c5f2:	4d07      	ldr	r5, [pc, #28]	; (801c610 <_fstat_r+0x20>)
 801c5f4:	2300      	movs	r3, #0
 801c5f6:	4604      	mov	r4, r0
 801c5f8:	4608      	mov	r0, r1
 801c5fa:	4611      	mov	r1, r2
 801c5fc:	602b      	str	r3, [r5, #0]
 801c5fe:	f7e5 fff3 	bl	80025e8 <_fstat>
 801c602:	1c43      	adds	r3, r0, #1
 801c604:	d102      	bne.n	801c60c <_fstat_r+0x1c>
 801c606:	682b      	ldr	r3, [r5, #0]
 801c608:	b103      	cbz	r3, 801c60c <_fstat_r+0x1c>
 801c60a:	6023      	str	r3, [r4, #0]
 801c60c:	bd38      	pop	{r3, r4, r5, pc}
 801c60e:	bf00      	nop
 801c610:	2001630c 	.word	0x2001630c

0801c614 <_isatty_r>:
 801c614:	b538      	push	{r3, r4, r5, lr}
 801c616:	4d06      	ldr	r5, [pc, #24]	; (801c630 <_isatty_r+0x1c>)
 801c618:	2300      	movs	r3, #0
 801c61a:	4604      	mov	r4, r0
 801c61c:	4608      	mov	r0, r1
 801c61e:	602b      	str	r3, [r5, #0]
 801c620:	f7e5 fff2 	bl	8002608 <_isatty>
 801c624:	1c43      	adds	r3, r0, #1
 801c626:	d102      	bne.n	801c62e <_isatty_r+0x1a>
 801c628:	682b      	ldr	r3, [r5, #0]
 801c62a:	b103      	cbz	r3, 801c62e <_isatty_r+0x1a>
 801c62c:	6023      	str	r3, [r4, #0]
 801c62e:	bd38      	pop	{r3, r4, r5, pc}
 801c630:	2001630c 	.word	0x2001630c

0801c634 <memmove>:
 801c634:	4288      	cmp	r0, r1
 801c636:	b510      	push	{r4, lr}
 801c638:	eb01 0402 	add.w	r4, r1, r2
 801c63c:	d902      	bls.n	801c644 <memmove+0x10>
 801c63e:	4284      	cmp	r4, r0
 801c640:	4623      	mov	r3, r4
 801c642:	d807      	bhi.n	801c654 <memmove+0x20>
 801c644:	1e43      	subs	r3, r0, #1
 801c646:	42a1      	cmp	r1, r4
 801c648:	d008      	beq.n	801c65c <memmove+0x28>
 801c64a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c64e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c652:	e7f8      	b.n	801c646 <memmove+0x12>
 801c654:	4402      	add	r2, r0
 801c656:	4601      	mov	r1, r0
 801c658:	428a      	cmp	r2, r1
 801c65a:	d100      	bne.n	801c65e <memmove+0x2a>
 801c65c:	bd10      	pop	{r4, pc}
 801c65e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c666:	e7f7      	b.n	801c658 <memmove+0x24>

0801c668 <_malloc_usable_size_r>:
 801c668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c66c:	1f18      	subs	r0, r3, #4
 801c66e:	2b00      	cmp	r3, #0
 801c670:	bfbc      	itt	lt
 801c672:	580b      	ldrlt	r3, [r1, r0]
 801c674:	18c0      	addlt	r0, r0, r3
 801c676:	4770      	bx	lr

0801c678 <_raise_r>:
 801c678:	291f      	cmp	r1, #31
 801c67a:	b538      	push	{r3, r4, r5, lr}
 801c67c:	4604      	mov	r4, r0
 801c67e:	460d      	mov	r5, r1
 801c680:	d904      	bls.n	801c68c <_raise_r+0x14>
 801c682:	2316      	movs	r3, #22
 801c684:	6003      	str	r3, [r0, #0]
 801c686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c68a:	bd38      	pop	{r3, r4, r5, pc}
 801c68c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c68e:	b112      	cbz	r2, 801c696 <_raise_r+0x1e>
 801c690:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c694:	b94b      	cbnz	r3, 801c6aa <_raise_r+0x32>
 801c696:	4620      	mov	r0, r4
 801c698:	f000 f830 	bl	801c6fc <_getpid_r>
 801c69c:	462a      	mov	r2, r5
 801c69e:	4601      	mov	r1, r0
 801c6a0:	4620      	mov	r0, r4
 801c6a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c6a6:	f000 b817 	b.w	801c6d8 <_kill_r>
 801c6aa:	2b01      	cmp	r3, #1
 801c6ac:	d00a      	beq.n	801c6c4 <_raise_r+0x4c>
 801c6ae:	1c59      	adds	r1, r3, #1
 801c6b0:	d103      	bne.n	801c6ba <_raise_r+0x42>
 801c6b2:	2316      	movs	r3, #22
 801c6b4:	6003      	str	r3, [r0, #0]
 801c6b6:	2001      	movs	r0, #1
 801c6b8:	e7e7      	b.n	801c68a <_raise_r+0x12>
 801c6ba:	2400      	movs	r4, #0
 801c6bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c6c0:	4628      	mov	r0, r5
 801c6c2:	4798      	blx	r3
 801c6c4:	2000      	movs	r0, #0
 801c6c6:	e7e0      	b.n	801c68a <_raise_r+0x12>

0801c6c8 <raise>:
 801c6c8:	4b02      	ldr	r3, [pc, #8]	; (801c6d4 <raise+0xc>)
 801c6ca:	4601      	mov	r1, r0
 801c6cc:	6818      	ldr	r0, [r3, #0]
 801c6ce:	f7ff bfd3 	b.w	801c678 <_raise_r>
 801c6d2:	bf00      	nop
 801c6d4:	200009bc 	.word	0x200009bc

0801c6d8 <_kill_r>:
 801c6d8:	b538      	push	{r3, r4, r5, lr}
 801c6da:	4d07      	ldr	r5, [pc, #28]	; (801c6f8 <_kill_r+0x20>)
 801c6dc:	2300      	movs	r3, #0
 801c6de:	4604      	mov	r4, r0
 801c6e0:	4608      	mov	r0, r1
 801c6e2:	4611      	mov	r1, r2
 801c6e4:	602b      	str	r3, [r5, #0]
 801c6e6:	f7e5 fee9 	bl	80024bc <_kill>
 801c6ea:	1c43      	adds	r3, r0, #1
 801c6ec:	d102      	bne.n	801c6f4 <_kill_r+0x1c>
 801c6ee:	682b      	ldr	r3, [r5, #0]
 801c6f0:	b103      	cbz	r3, 801c6f4 <_kill_r+0x1c>
 801c6f2:	6023      	str	r3, [r4, #0]
 801c6f4:	bd38      	pop	{r3, r4, r5, pc}
 801c6f6:	bf00      	nop
 801c6f8:	2001630c 	.word	0x2001630c

0801c6fc <_getpid_r>:
 801c6fc:	f7e5 bed6 	b.w	80024ac <_getpid>

0801c700 <_init>:
 801c700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c702:	bf00      	nop
 801c704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c706:	bc08      	pop	{r3}
 801c708:	469e      	mov	lr, r3
 801c70a:	4770      	bx	lr

0801c70c <_fini>:
 801c70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c70e:	bf00      	nop
 801c710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c712:	bc08      	pop	{r3}
 801c714:	469e      	mov	lr, r3
 801c716:	4770      	bx	lr
